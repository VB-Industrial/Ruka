
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  08016c58  08016c58  00026c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801820c  0801820c  00030240  2**0
                  CONTENTS
  4 .ARM          00000008  0801820c  0801820c  0002820c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018214  08018214  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08018214  08018214  00028214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08018224  08018224  00028224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08018234  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000240  08018474  00030240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  08018474  00030a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 13 .debug_info   000470ef  00000000  00000000  000302b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008571  00000000  00000000  000773a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002948  00000000  00000000  0007f918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002062  00000000  00000000  00082260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003149c  00000000  00000000  000842c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035fbc  00000000  00000000  000b575e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012a533  00000000  00000000  000eb71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c988  00000000  00000000  00215c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  002225d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016c40 	.word	0x08016c40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	08016c40 	.word	0x08016c40

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	08017684 	.word	0x08017684

08001060 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	08017684 	.word	0x08017684

08001080 <_ZN15Adafruit_SensorD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800108e:	2108      	movs	r1, #8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f011 f9a2 	bl	80123da <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffb9 	bl	8001040 <_ZN15Adafruit_SensorC1Ev>
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	609a      	str	r2, [r3, #8]
  _address = address;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	715a      	strb	r2, [r3, #5]
}
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08017668 	.word	0x08017668

080010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa5c 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2206      	movs	r2, #6
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f012 fa50 	bl	80135b2 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	83fb      	strh	r3, [r7, #30]
 8001116:	8bfb      	ldrh	r3, [r7, #30]
 8001118:	83bb      	strh	r3, [r7, #28]
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800111e:	f107 0214 	add.w	r2, r7, #20
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	2306      	movs	r3, #6
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 fa05 	bl	8001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800112c:	7d3b      	ldrb	r3, [r7, #20]
 800112e:	b21a      	sxth	r2, r3
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	b21a      	sxth	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001148:	7e3b      	ldrb	r3, [r7, #24]
 800114a:	b21a      	sxth	r2, r3
 800114c:	7e7b      	ldrb	r3, [r7, #25]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3b08      	subs	r3, #8
 800115a:	2b26      	cmp	r3, #38	; 0x26
 800115c:	f200 8152 	bhi.w	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001385 	.word	0x08001385
 800116c:	08001405 	.word	0x08001405
 8001170:	08001405 	.word	0x08001405
 8001174:	08001405 	.word	0x08001405
 8001178:	08001405 	.word	0x08001405
 800117c:	08001405 	.word	0x08001405
 8001180:	08001205 	.word	0x08001205
 8001184:	08001405 	.word	0x08001405
 8001188:	08001405 	.word	0x08001405
 800118c:	08001405 	.word	0x08001405
 8001190:	08001405 	.word	0x08001405
 8001194:	08001405 	.word	0x08001405
 8001198:	08001285 	.word	0x08001285
 800119c:	08001405 	.word	0x08001405
 80011a0:	08001405 	.word	0x08001405
 80011a4:	08001405 	.word	0x08001405
 80011a8:	08001405 	.word	0x08001405
 80011ac:	08001405 	.word	0x08001405
 80011b0:	08001305 	.word	0x08001305
 80011b4:	08001405 	.word	0x08001405
 80011b8:	08001405 	.word	0x08001405
 80011bc:	08001405 	.word	0x08001405
 80011c0:	08001405 	.word	0x08001405
 80011c4:	08001405 	.word	0x08001405
 80011c8:	08001405 	.word	0x08001405
 80011cc:	08001405 	.word	0x08001405
 80011d0:	08001405 	.word	0x08001405
 80011d4:	08001405 	.word	0x08001405
 80011d8:	08001405 	.word	0x08001405
 80011dc:	08001405 	.word	0x08001405
 80011e0:	08001405 	.word	0x08001405
 80011e4:	08001405 	.word	0x08001405
 80011e8:	08001385 	.word	0x08001385
 80011ec:	08001405 	.word	0x08001405
 80011f0:	08001405 	.word	0x08001405
 80011f4:	08001405 	.word	0x08001405
 80011f8:	08001405 	.word	0x08001405
 80011fc:	08001405 	.word	0x08001405
 8001200:	08001385 	.word	0x08001385
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9b3 	bl	8000574 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001214:	f7ff fb42 	bl	800089c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	2100      	movs	r1, #0
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9d9 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001228:	4603      	mov	r3, r0
 800122a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800122e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f99e 	bl	8000574 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800123e:	f7ff fb2d 	bl	800089c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	2101      	movs	r1, #1
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9c4 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001252:	4603      	mov	r3, r0
 8001254:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 8001258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f989 	bl	8000574 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001268:	f7ff fb18 	bl	800089c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	2102      	movs	r1, #2
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9af 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800127c:	4603      	mov	r3, r0
 800127e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001282:	e0bf      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f973 	bl	8000574 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001294:	f7ff fb02 	bl	800089c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f999 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f95e 	bl	8000574 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012be:	f7ff faed 	bl	800089c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f984 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f949 	bl	8000574 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012e8:	f7ff fad8 	bl	800089c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	2102      	movs	r1, #2
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f96f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001302:	e07f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001304:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f933 	bl	8000574 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001314:	f7ff fac2 	bl	800089c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f959 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001328:	4603      	mov	r3, r0
 800132a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800132e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f91e 	bl	8000574 <__aeabi_i2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4614      	mov	r4, r2
 8001348:	461d      	mov	r5, r3
 800134a:	2101      	movs	r1, #1
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f944 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001352:	4603      	mov	r3, r0
 8001354:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f909 	bl	8000574 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001368:	f7ff fa98 	bl	800089c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	2102      	movs	r1, #2
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f92f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800137c:	4603      	mov	r3, r0
 800137e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001382:	e03f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001384:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8f3 	bl	8000574 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001394:	f7ff fa82 	bl	800089c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f919 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013a8:	4603      	mov	r3, r0
 80013aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8de 	bl	8000574 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013be:	f7ff fa6d 	bl	800089c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	2101      	movs	r1, #1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f904 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8c9 	bl	8000574 <__aeabi_i2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	2102      	movs	r1, #2
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f8ef 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001402:	bf00      	nop
  }

  return xyz;
 8001404:	bf00      	nop
}
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	bf00      	nop
 8001410:	40300000 	.word	0x40300000
 8001414:	408c2000 	.word	0x408c2000
 8001418:	40590000 	.word	0x40590000

0800141c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f012 f8c1 	bl	80135b2 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	220b      	movs	r2, #11
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001436:	4618      	mov	r0, r3
 8001438:	f012 f8c3 	bl	80135c2 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2203      	movs	r2, #3
 8001454:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0.0F;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001470:	621a      	str	r2, [r3, #32]
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08016c58 	.word	0x08016c58
 8001480:	3c23d70a 	.word	0x3c23d70a

08001484 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2100      	movs	r1, #0
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f012 f88d 	bl	80135b2 <memset>

  event->version   = sizeof(sensors_event_t);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2203      	movs	r2, #3
 80014aa:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014ac:	f008 f972 	bl	8009794 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	221a      	movs	r2, #26
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe15 	bl	80010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f853 	bl	8001576 <_ZN3imu6VectorILh3EE1xEv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbad 	bl	8000c38 <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84f 	bl	800158c <_ZN3imu6VectorILh3EE1yEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb9e 	bl	8000c38 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f84c 	bl	80015a4 <_ZN3imu6VectorILh3EE1zEv>
 800150c:	4603      	mov	r3, r0
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb8f 	bl	8000c38 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	61da      	str	r2, [r3, #28]

  return true;
 8001520:	2401      	movs	r4, #1
}
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f81a 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800152c:	4623      	mov	r3, r4
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
 8001546:	4613      	mov	r3, r2
 8001548:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800154a:	7aba      	ldrb	r2, [r7, #10]
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f89b 	bl	800168c <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    {
    }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3310      	adds	r3, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2218      	movs	r2, #24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f011 fff1 	bl	80135b2 <memset>
    }
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd29 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08017668 	.word	0x08017668

0800161c <_ZN15Adafruit_BNO055D0Ev>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
 800162a:	2110      	movs	r1, #16
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f010 fed4 	bl	80123da <_ZdlPvj>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_ZN3imu10QuaternionC1Ev+0x4c>)
 800164c:	e9c1 2300 	strd	r2, r3, [r1]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	3ff00000 	.word	0x3ff00000

0800168c <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2164      	movs	r1, #100	; 0x64
 80016a6:	9102      	str	r1, [sp, #8]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2152      	movs	r1, #82	; 0x52
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016b4:	f009 fb0a 	bl	800accc <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016bc:	bf00      	nop
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016c0:	f009 fcd3 	bl	800b06a <HAL_I2C_GetState>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f4      	bne.n	80016be <I2C_n_byte_receive+0x32>

  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000030c 	.word	0x2000030c

080016e4 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10a      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016fe:	2229      	movs	r2, #41	; 0x29
 8001700:	2137      	movs	r1, #55	; 0x37
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001704:	f7ff fcd8 	bl	80010b8 <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800170a:	f7ff ff97 	bl	800163c <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001710:	f7ff ff54 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	4293      	cmp	r3, r2
 8001722:	d105      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001726:	f7ff ff1b 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800172c:	f7ff ff64 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000025c 	.word	0x2000025c
 800173c:	20000270 	.word	0x20000270
 8001740:	20000290 	.word	0x20000290

08001744 <_GLOBAL__sub_I_bno>:
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ffc9 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001752:	bd80      	pop	{r7, pc}

08001754 <_GLOBAL__sub_D_bno>:
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffc1 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_DMA_Init+0x60>)
 800176c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_DMA_Init+0x60>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6493      	str	r3, [r2, #72]	; 0x48
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_DMA_Init+0x60>)
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_DMA_Init+0x60>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <MX_DMA_Init+0x60>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6493      	str	r3, [r2, #72]	; 0x48
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_DMA_Init+0x60>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200b      	movs	r0, #11
 80017a0:	f008 f901 	bl	80099a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a4:	200b      	movs	r0, #11
 80017a6:	f008 f918 	bl	80099da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200c      	movs	r0, #12
 80017b0:	f008 f8f9 	bl	80099a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b4:	200c      	movs	r0, #12
 80017b6:	f008 f910 	bl	80099da <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_FDCAN1_Init+0x8c>)
 80017d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001800:	2201      	movs	r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001806:	221d      	movs	r2, #29
 8001808:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800180c:	220a      	movs	r2, #10
 800180e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001812:	2204      	movs	r2, #4
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001818:	2201      	movs	r2, #1
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800181e:	2202      	movs	r2, #2
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001824:	2202      	movs	r2, #2
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001830:	2203      	movs	r2, #3
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800183c:	f008 fb70 	bl	8009f20 <HAL_FDCAN_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001846:	f000 fac6 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002a8 	.word	0x200002a8
 8001854:	40006400 	.word	0x40006400

08001858 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09e      	sub	sp, #120	; 0x78
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f011 fe9a 	bl	80135b2 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_FDCAN_MspInit+0xac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d138      	bne.n	80018fa <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800188e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4618      	mov	r0, r3
 800189a:	f00b f9ff 	bl	800cc9c <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80018a4:	f000 fa97 	bl	8001dd6 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018ea:	2309      	movs	r3, #9
 80018ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_FDCAN_MspInit+0xb4>)
 80018f6:	f008 ff99 	bl	800a82c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3778      	adds	r7, #120	; 0x78
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40006400 	.word	0x40006400
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <MX_GPIO_Init+0x140>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <MX_GPIO_Init+0x140>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <MX_GPIO_Init+0x140>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <MX_GPIO_Init+0x140>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <MX_GPIO_Init+0x140>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 800199e:	2200      	movs	r2, #0
 80019a0:	f649 3110 	movw	r1, #39696	; 0x9b10
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f009 f8c2 	bl	800ab30 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	4828      	ldr	r0, [pc, #160]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019b2:	f009 f8bd 	bl	800ab30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	4827      	ldr	r0, [pc, #156]	; (8001a58 <MX_GPIO_Init+0x148>)
 80019bc:	f009 f8b8 	bl	800ab30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c4:	2303      	movs	r3, #3
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4820      	ldr	r0, [pc, #128]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019d4:	f008 ff2a 	bl	800a82c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 80019d8:	230c      	movs	r3, #12
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	481a      	ldr	r0, [pc, #104]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019ec:	f008 ff1e 	bl	800a82c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 80019f0:	f649 3310 	movw	r3, #39696	; 0x9b10
 80019f4:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f008 ff0e 	bl	800a82c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001a10:	2320      	movs	r3, #32
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <MX_GPIO_Init+0x144>)
 8001a28:	f008 ff00 	bl	800a82c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_GPIO_Init+0x148>)
 8001a44:	f008 fef2 	bl	800a82c <HAL_GPIO_Init>

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00

08001a5c <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_I2C4_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_I2C4_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a98:	f009 f87c 	bl	800ab94 <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 f998 	bl	8001dd6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001aaa:	f00a fa7d 	bl	800bfa8 <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 f98f 	bl	8001dd6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001abc:	f00a fabf 	bl	800c03e <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 f986 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000030c 	.word	0x2000030c
 8001ad4:	40008400 	.word	0x40008400
 8001ad8:	00702991 	.word	0x00702991

08001adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a0      	sub	sp, #128	; 0x80
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f011 fd58 	bl	80135b2 <memset>
  if(i2cHandle->Instance==I2C4)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5e      	ldr	r2, [pc, #376]	; (8001c80 <HAL_I2C_MspInit+0x1a4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	f040 80b5 	bne.w	8001c78 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00b f8bd 	bl	800cc9c <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b28:	f000 f955 	bl	8001dd6 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b4f      	ldr	r3, [pc, #316]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4844      	ldr	r0, [pc, #272]	; (8001c88 <HAL_I2C_MspInit+0x1ac>)
 8001b78:	f008 fe58 	bl	800a82c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b94:	4619      	mov	r1, r3
 8001b96:	483d      	ldr	r0, [pc, #244]	; (8001c8c <HAL_I2C_MspInit+0x1b0>)
 8001b98:	f008 fe48 	bl	800a82c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_I2C_MspInit+0x1b8>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001bea:	4829      	ldr	r0, [pc, #164]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bec:	f007 ff10 	bl	8009a10 <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001bf6:	f000 f8ee 	bl	8001dd6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_I2C_MspInit+0x1c0>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c0e:	2217      	movs	r2, #23
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c14:	2210      	movs	r2, #16
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001c3c:	4816      	ldr	r0, [pc, #88]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c3e:	f007 fee7 	bl	8009a10 <HAL_DMA_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001c48:	f000 f8c5 	bl	8001dd6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2052      	movs	r0, #82	; 0x52
 8001c5e:	f007 fea2 	bl	80099a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001c62:	2052      	movs	r0, #82	; 0x52
 8001c64:	f007 feb9 	bl	80099da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2053      	movs	r0, #83	; 0x53
 8001c6e:	f007 fe9a 	bl	80099a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001c72:	2053      	movs	r0, #83	; 0x53
 8001c74:	f007 feb1 	bl	80099da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3780      	adds	r7, #128	; 0x80
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40008400 	.word	0x40008400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000800 	.word	0x48000800
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	20000360 	.word	0x20000360
 8001c94:	40020008 	.word	0x40020008
 8001c98:	200003c0 	.word	0x200003c0
 8001c9c:	4002001c 	.word	0x4002001c

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09c      	sub	sp, #112	; 0x70
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca6:	f007 fd10 	bl	80096ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001caa:	f000 f849 	bl	8001d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cae:	f7ff fe2f 	bl	8001910 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cb2:	f7ff fd57 	bl	8001764 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001cb6:	f7ff fd87 	bl	80017c8 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001cba:	f7ff fecf 	bl	8001a5c <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8001cbe:	f007 fc2f 	bl	8009520 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001cc2:	f006 fe75 	bl	80089b0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001cc6:	f006 feb1 	bl	8008a2c <MX_SPI3_Init>
  MX_TIM8_Init();
 8001cca:	f007 f8cd 	bl	8008e68 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  joint_config joint_config;
  cyphal_can_starter(&hfdcan1);
 8001cce:	481b      	ldr	r0, [pc, #108]	; (8001d3c <main+0x9c>)
 8001cd0:	f004 feec 	bl	8006aac <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <main+0x9c>)
 8001cd6:	f004 fe45 	bl	8006964 <setup_cyphal>
  HAL_Delay(10);
 8001cda:	200a      	movs	r0, #10
 8001cdc:	f007 fd66 	bl	80097ac <HAL_Delay>
  tmc5160_init();
 8001ce0:	f007 fb02 	bl	80092e8 <tmc5160_init>
  HAL_Delay(10);
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f007 fd61 	bl	80097ac <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	66bb      	str	r3, [r7, #104]	; 0x68
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8001cee:	f007 fd51 	bl	8009794 <HAL_GetTick>
 8001cf2:	66f8      	str	r0, [r7, #108]	; 0x6c

  vec_4ax linear = {0};
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  //IMU_setup();

  while (1)
  {

      uint32_t now = HAL_GetTick();
 8001d1c:	f007 fd3a 	bl	8009794 <HAL_GetTick>
 8001d20:	6678      	str	r0, [r7, #100]	; 0x64
      if ( (now - last_hbeat) >= 1000) {
 8001d22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d2c:	d303      	bcc.n	8001d36 <main+0x96>
      	  //imu_get_quat(&quat);
      	  //imu_get_linear(&linear);
      	  //imu_get_gyro(&gyro);
          last_hbeat = now;
 8001d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d30:	66fb      	str	r3, [r7, #108]	; 0x6c
          heartbeat();
 8001d32:	f004 fde7 	bl	8006904 <heartbeat>
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      cyphal_loop();
 8001d36:	f004 feab 	bl	8006a90 <cyphal_loop>
  {
 8001d3a:	e7ef      	b.n	8001d1c <main+0x7c>
 8001d3c:	200002a8 	.word	0x200002a8

08001d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b094      	sub	sp, #80	; 0x50
 8001d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d46:	f107 0318 	add.w	r3, r7, #24
 8001d4a:	2238      	movs	r2, #56	; 0x38
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f011 fc2f 	bl	80135b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f00a f9b8 	bl	800c0d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d70:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d72:	2302      	movs	r3, #2
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d76:	2303      	movs	r3, #3
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d7e:	2328      	movs	r3, #40	; 0x28
 8001d80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d82:	2302      	movs	r3, #2
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00a fa54 	bl	800c240 <HAL_RCC_OscConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d9e:	f000 f81a 	bl	8001dd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da2:	230f      	movs	r3, #15
 8001da4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da6:	2303      	movs	r3, #3
 8001da8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00a fd50 	bl	800c864 <HAL_RCC_ClockConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001dca:	f000 f804 	bl	8001dd6 <Error_Handler>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3750      	adds	r7, #80	; 0x50
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dda:	b672      	cpsid	i
}
 8001ddc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dde:	e7fe      	b.n	8001dde <Error_Handler+0x8>

08001de0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d019      	beq.n	8001e6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3308      	adds	r3, #8
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
        }
    }
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4798      	blx	r3
    }
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ffd4 	bl	8001ea2 <_ZNSt14_Function_baseD1Ev>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZNSt8functionIFvvEED1Ev>:
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ffc7 	bl	8001ea2 <_ZNSt14_Function_baseD1Ev>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 fe92 	bl	8006c58 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3310      	adds	r3, #16
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 feb7 	bl	8006cae <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	08017754 	.word	0x08017754

08001f78 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001f84:	f004 febe 	bl	8006d04 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f010 fa67 	bl	8012468 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001f9c:	f004 fec3 	bl	8006d26 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	6814      	ldr	r4, [r2, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	47a0      	blx	r4
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	2000093c 	.word	0x2000093c

08001fbc <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001fc6:	480d      	ldr	r0, [pc, #52]	; (8001ffc <_Z6free_fP14CanardInstancePv+0x40>)
 8001fc8:	f004 fe9c 	bl	8006d04 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f010 fa45 	bl	8012468 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8001fde:	4807      	ldr	r0, [pc, #28]	; (8001ffc <_Z6free_fP14CanardInstancePv+0x40>)
 8001fe0:	f004 fea1 	bl	8006d26 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	3204      	adds	r2, #4
 8001fea:	6814      	ldr	r4, [r2, #0]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	47a0      	blx	r4
 8001ff4:	bf00      	nop
}
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	2000093c 	.word	0x2000093c

08002000 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	330c      	adds	r3, #12
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f00f ff10 	bl	8011e50 <canardTxInit>
        utilities(utilities)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	08017918 	.word	0x08017918

08002044 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	7afa      	ldrb	r2, [r7, #11]
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3308      	adds	r3, #8
 8002064:	6839      	ldr	r1, [r7, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f004 fe79 	bl	8006d5e <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2248      	movs	r2, #72	; 0x48
 8002090:	2140      	movs	r1, #64	; 0x40
 8002092:	f7ff ffb5 	bl	8002000 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	080178f4 	.word	0x080178f4

080020b0 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff42 	bl	8001f4c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 80020c8:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	080177d8 	.word	0x080177d8

080020dc <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ea:	eef0 7ae7 	vabs.f32	s15, s15
 80020ee:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002120 <_ZSt8isfinitef+0x44>
 80020f2:	eef4 7a47 	vcmp.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	bf8c      	ite	hi
 80020fc:	2301      	movhi	r3, #1
 80020fe:	2300      	movls	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	7f7fffff 	.word	0x7f7fffff

08002124 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d201      	bcs.n	800213a <nunavutChooseMin+0x16>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	e000      	b.n	800213c <nunavutChooseMin+0x18>
 800213a:	683b      	ldr	r3, [r7, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	6978      	ldr	r0, [r7, #20]
 800215e:	f7ff ffe1 	bl	8002124 <nunavutChooseMin>
 8002162:	4602      	mov	r2, r0
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 800216a:	6939      	ldr	r1, [r7, #16]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffd9 	bl	8002124 <nunavutChooseMin>
 8002172:	4603      	mov	r3, r0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b092      	sub	sp, #72	; 0x48
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 800218a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d145      	bne.n	8002220 <nunavutCopyBits+0xa4>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	2b00      	cmp	r3, #0
 800219c:	d140      	bne.n	8002220 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 80021a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 80021b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021be:	f011 f9de 	bl	801357e <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 80021ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 808a 	beq.w	80022ec <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 80021d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021dc:	4413      	add	r3, r2
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 80021e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	4413      	add	r3, r2
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 80021e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ec:	2201      	movs	r2, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002202:	43db      	mvns	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4013      	ands	r3, r2
 8002208:	b2da      	uxtb	r2, r3
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	7819      	ldrb	r1, [r3, #0]
 800220e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002212:	400b      	ands	r3, r1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b2da      	uxtb	r2, r3
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	701a      	strb	r2, [r3, #0]
        }
    }
 800221e:	e065      	b.n	80022ec <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8002228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800222a:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8002230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8002238:	e053      	b.n	80022e2 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 800223a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8002244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 800224e:	7dfa      	ldrb	r2, [r7, #23]
 8002250:	7dbb      	ldrb	r3, [r7, #22]
 8002252:	429a      	cmp	r2, r3
 8002254:	d901      	bls.n	800225a <nunavutCopyBits+0xde>
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	e000      	b.n	800225c <nunavutCopyBits+0xe0>
 800225a:	7dbb      	ldrb	r3, [r7, #22]
 800225c:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 800225e:	7d7b      	ldrb	r3, [r7, #21]
 8002260:	f1c3 0008 	rsb	r0, r3, #8
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4619      	mov	r1, r3
 800226c:	f7ff ff5a 	bl	8002124 <nunavutChooseMin>
 8002270:	4603      	mov	r3, r0
 8002272:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8002274:	7d3b      	ldrb	r3, [r7, #20]
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	7dbb      	ldrb	r3, [r7, #22]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8002286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	6a3a      	ldr	r2, [r7, #32]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	fa42 f303 	asr.w	r3, r2, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	7dbb      	ldrb	r3, [r7, #22]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80022a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a6:	08db      	lsrs	r3, r3, #3
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 80022b8:	7cba      	ldrb	r2, [r7, #18]
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	4013      	ands	r3, r2
 80022be:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80022c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	7c79      	ldrb	r1, [r7, #17]
 80022ca:	7c3a      	ldrb	r2, [r7, #16]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80022d2:	7d3b      	ldrb	r3, [r7, #20]
 80022d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022d6:	4413      	add	r3, r2
 80022d8:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 80022da:	7d3b      	ldrb	r3, [r7, #20]
 80022dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022de:	4413      	add	r3, r2
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d8a7      	bhi.n	800223a <nunavutCopyBits+0xbe>
        }

    }
}
 80022ea:	e000      	b.n	80022ee <nunavutCopyBits+0x172>
    }
 80022ec:	bf00      	nop
}
 80022ee:	bf00      	nop
 80022f0:	3748      	adds	r7, #72	; 0x48
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b088      	sub	sp, #32
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff1d 	bl	8002148 <nunavutSaturateBufferFragmentBitLength>
 800230e:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	18d0      	adds	r0, r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3307      	adds	r3, #7
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	461a      	mov	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f011 f943 	bl	80135b2 <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	2100      	movs	r1, #0
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ff20 	bl	800217c <nunavutCopyBits>
}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	00da      	lsls	r2, r3, #3
 8002354:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	440b      	add	r3, r1
 800235c:	429a      	cmp	r2, r3
 800235e:	d202      	bcs.n	8002366 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002360:	f06f 0302 	mvn.w	r3, #2
 8002364:	e010      	b.n	8002388 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8002366:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800236a:	2140      	movs	r1, #64	; 0x40
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fed9 	bl	8002124 <nunavutChooseMin>
 8002372:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f107 0320 	add.w	r3, r7, #32
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fefb 	bl	800217c <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	2110      	movs	r1, #16
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff febe 	bl	8002124 <nunavutChooseMin>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	f7ff feca 	bl	8002148 <nunavutSaturateBufferFragmentBitLength>
 80023b4:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 80023ba:	f107 0012 	add.w	r0, r7, #18
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	2100      	movs	r1, #0
 80023c8:	f7ff fed8 	bl	800217c <nunavutCopyBits>
    return val;
 80023cc:	8a7b      	ldrh	r3, [r7, #18]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af02      	add	r7, sp, #8
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	2120      	movs	r1, #32
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fe9b 	bl	8002124 <nunavutChooseMin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f7ff fea7 	bl	8002148 <nunavutSaturateBufferFragmentBitLength>
 80023fa:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002400:	f107 0010 	add.w	r0, r7, #16
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	2100      	movs	r1, #0
 800240e:	f7ff feb5 	bl	800217c <nunavutCopyBits>
    return val;
 8002412:	693b      	ldr	r3, [r7, #16]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 800241c:	b480      	push	{r7}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af00      	add	r7, sp, #0
 8002422:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <nunavutFloat16Pack+0xb8>)
 8002428:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 800242a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800242e:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8002430:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8002434:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8002436:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 800243a:	613b      	str	r3, [r7, #16]
    in.real = value;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002446:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	4053      	eors	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	429a      	cmp	r2, r3
 800245a:	d313      	bcc.n	8002484 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 8002466:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 800246a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800246c:	e025      	b.n	80024ba <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	429a      	cmp	r2, r3
 8002474:	d902      	bls.n	800247c <nunavutFloat16Pack+0x60>
 8002476:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800247a:	e001      	b.n	8002480 <nunavutFloat16Pack+0x64>
 800247c:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8002480:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002482:	e01a      	b.n	80024ba <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800248a:	f023 030f 	bic.w	r3, r3, #15
 800248e:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 8002490:	ed97 7a03 	vldr	s14, [r7, #12]
 8002494:	edd7 7a04 	vldr	s15, [r7, #16]
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d901      	bls.n	80024b4 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b29a      	uxth	r2, r3
 80024c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024c2:	4313      	orrs	r3, r2
 80024c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 80024c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	372c      	adds	r7, #44	; 0x2c
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	fffff000 	.word	0xfffff000

080024d8 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 80024e2:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 80024e6:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 80024e8:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 80024ec:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	035a      	lsls	r2, r3, #13
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <nunavutFloat16Unpack+0x6c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 80024f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80024fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8002508:	ed97 7a03 	vldr	s14, [r7, #12]
 800250c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	db03      	blt.n	8002522 <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8002520:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	041b      	lsls	r3, r3, #16
 8002528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    return out.real;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	ee07 3a90 	vmov	s15, r3
}
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	0fffe000 	.word	0x0fffe000

08002548 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8002554:	2310      	movs	r3, #16
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff ff18 	bl	8002390 <nunavutGetU16>
 8002560:	4603      	mov	r3, r0
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffb8 	bl	80024d8 <nunavutFloat16Unpack>
 8002568:	eef0 7a40 	vmov.f32	s15, s0
}
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8002582:	2320      	movs	r3, #32
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff ff24 	bl	80023d6 <nunavutGetU32>
 800258e:	4603      	mov	r3, r0
 8002590:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	ee07 3a90 	vmov	s15, r3
}
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08c      	sub	sp, #48	; 0x30
 80025a6:	af04      	add	r7, sp, #16
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <uavcan_node_Health_1_0_serialize_+0x1e>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <uavcan_node_Health_1_0_serialize_+0x1e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80025c0:	f06f 0301 	mvn.w	r3, #1
 80025c4:	e048      	b.n	8002658 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	2b07      	cmp	r3, #7
 80025d2:	d802      	bhi.n	80025da <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80025d4:	f06f 0302 	mvn.w	r3, #2
 80025d8:	e03e      	b.n	8002658 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 80025e4:	7efb      	ldrb	r3, [r7, #27]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d901      	bls.n	80025ee <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 80025ea:	2303      	movs	r3, #3
 80025ec:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4413      	add	r3, r2
 80025f6:	7efa      	ldrb	r2, [r7, #27]
 80025f8:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3302      	adds	r3, #2
 80025fe:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	2b00      	cmp	r3, #0
 8002608:	d021      	beq.n	800264e <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f1c3 0308 	rsb	r3, r3, #8
 8002618:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	9302      	str	r3, [sp, #8]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9cd 2300 	strd	r2, r3, [sp]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	68b8      	ldr	r0, [r7, #8]
 8002630:	f7ff fe88 	bl	8002344 <nunavutSetUxx>
 8002634:	4603      	mov	r3, r0
 8002636:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002638:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da02      	bge.n	8002646 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002640:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002644:	e008      	b.n	8002658 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <uavcan_node_Health_1_0_deserialize_+0x2c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002686:	f06f 0301 	mvn.w	r3, #1
 800268a:	e030      	b.n	80026ee <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002694:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3302      	adds	r3, #2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d30a      	bcc.n	80026c6 <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e002      	b.n	80026cc <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3302      	adds	r3, #2
 80026d0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3307      	adds	r3, #7
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff fd20 	bl	8002124 <nunavutChooseMin>
 80026e4:	4603      	mov	r3, r0
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	080176a0 	.word	0x080176a0

080026fc <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af04      	add	r7, sp, #16
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <uavcan_node_Mode_1_0_serialize_+0x1e>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800271a:	f06f 0301 	mvn.w	r3, #1
 800271e:	e048      	b.n	80027b2 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	2b07      	cmp	r3, #7
 800272c:	d802      	bhi.n	8002734 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800272e:	f06f 0302 	mvn.w	r3, #2
 8002732:	e03e      	b.n	80027b2 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 800273e:	7efb      	ldrb	r3, [r7, #27]
 8002740:	2b07      	cmp	r3, #7
 8002742:	d901      	bls.n	8002748 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002744:	2307      	movs	r3, #7
 8002746:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	4413      	add	r3, r2
 8002750:	7efa      	ldrb	r2, [r7, #27]
 8002752:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3303      	adds	r3, #3
 8002758:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	2b00      	cmp	r3, #0
 8002762:	d021      	beq.n	80027a8 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f1c3 0308 	rsb	r3, r3, #8
 8002772:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9cd 2300 	strd	r2, r3, [sp]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	6979      	ldr	r1, [r7, #20]
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	f7ff fddb 	bl	8002344 <nunavutSetUxx>
 800278e:	4603      	mov	r3, r0
 8002790:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002792:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da02      	bge.n	80027a0 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 800279a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800279e:	e008      	b.n	80027b2 <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <uavcan_node_Mode_1_0_deserialize_+0x26>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <uavcan_node_Mode_1_0_deserialize_+0x26>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027e2:	f06f 0301 	mvn.w	r3, #1
 80027e6:	e030      	b.n	800284a <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 80027f0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3303      	adds	r3, #3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	429a      	cmp	r2, r3
 800280a:	d30a      	bcc.n	8002822 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	08db      	lsrs	r3, r3, #3
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e002      	b.n	8002828 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3303      	adds	r3, #3
 800282c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3307      	adds	r3, #7
 8002832:	f023 0307 	bic.w	r3, r3, #7
 8002836:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002838:	69b9      	ldr	r1, [r7, #24]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff fc72 	bl	8002124 <nunavutChooseMin>
 8002840:	4603      	mov	r3, r0
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	080176a0 	.word	0x080176a0

08002858 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af04      	add	r7, sp, #16
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002876:	f06f 0301 	mvn.w	r3, #1
 800287a:	e0cf      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	2b37      	cmp	r3, #55	; 0x37
 8002888:	d802      	bhi.n	8002890 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800288a:	f06f 0302 	mvn.w	r3, #2
 800288e:	e0c5      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	4413      	add	r3, r2
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	3320      	adds	r3, #32
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d021      	beq.n	80028f6 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f1c3 0308 	rsb	r3, r3, #8
 80028c0:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80028c2:	7ffb      	ldrb	r3, [r7, #31]
 80028c4:	9302      	str	r3, [sp, #8]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9cd 2300 	strd	r2, r3, [sp]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f7ff fd34 	bl	8002344 <nunavutSetUxx>
 80028dc:	4603      	mov	r3, r0
 80028de:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 80028e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da02      	bge.n	80028ee <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 80028e8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80028ec:	e096      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 80028ee:	7ffb      	ldrb	r3, [r7, #31]
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	4413      	add	r3, r2
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 80028f6:	2301      	movs	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4413      	add	r3, r2
 8002906:	f107 0214 	add.w	r2, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	f7ff fe49 	bl	80025a2 <uavcan_node_Health_1_0_serialize_>
 8002910:	4603      	mov	r3, r0
 8002912:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002914:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da02      	bge.n	8002922 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 800291c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002920:	e07c      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	4413      	add	r3, r2
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	2b00      	cmp	r3, #0
 8002934:	d021      	beq.n	800297a <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f1c3 0308 	rsb	r3, r3, #8
 8002944:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002946:	7f3b      	ldrb	r3, [r7, #28]
 8002948:	9302      	str	r3, [sp, #8]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9cd 2300 	strd	r2, r3, [sp]
 8002956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002958:	6a39      	ldr	r1, [r7, #32]
 800295a:	68b8      	ldr	r0, [r7, #8]
 800295c:	f7ff fcf2 	bl	8002344 <nunavutSetUxx>
 8002960:	4603      	mov	r3, r0
 8002962:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002964:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da02      	bge.n	8002972 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 800296c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002970:	e054      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002972:	7f3b      	ldrb	r3, [r7, #28]
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	4413      	add	r3, r2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 800297a:	2301      	movs	r3, #1
 800297c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4413      	add	r3, r2
 800298a:	f107 0210 	add.w	r2, r7, #16
 800298e:	4619      	mov	r1, r3
 8002990:	f7ff feb4 	bl	80026fc <uavcan_node_Mode_1_0_serialize_>
 8002994:	4603      	mov	r3, r0
 8002996:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002998:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800299c:	2b00      	cmp	r3, #0
 800299e:	da02      	bge.n	80029a6 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 80029a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80029a4:	e03a      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	4413      	add	r3, r2
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4413      	add	r3, r2
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	7992      	ldrb	r2, [r2, #6]
 80029bc:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	3308      	adds	r3, #8
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d021      	beq.n	8002a12 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f1c3 0308 	rsb	r3, r3, #8
 80029dc:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80029de:	7e7b      	ldrb	r3, [r7, #25]
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9cd 2300 	strd	r2, r3, [sp]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	68b8      	ldr	r0, [r7, #8]
 80029f4:	f7ff fca6 	bl	8002344 <nunavutSetUxx>
 80029f8:	4603      	mov	r3, r0
 80029fa:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 80029fc:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da02      	bge.n	8002a0a <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002a04:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a08:	e008      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002a0a:	7e7b      	ldrb	r3, [r7, #25]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	4413      	add	r3, r2
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a4a:	f06f 0301 	mvn.w	r3, #1
 8002a4e:	e089      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002a56:	4b45      	ldr	r3, [pc, #276]	; (8002b6c <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002a58:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a70:	68b8      	ldr	r0, [r7, #8]
 8002a72:	f7ff fcb0 	bl	80023d6 <nunavutGetU32>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3307      	adds	r3, #7
 8002a86:	f023 0307 	bic.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08db      	lsrs	r3, r3, #3
 8002a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fb46 	bl	8002124 <nunavutChooseMin>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f107 0214 	add.w	r2, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7ff fdd5 	bl	8002660 <uavcan_node_Health_1_0_deserialize_>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002aba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da02      	bge.n	8002ac8 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002ac2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ac6:	e04d      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3307      	adds	r3, #7
 8002ad6:	f023 0307 	bic.w	r3, r3, #7
 8002ada:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	08db      	lsrs	r3, r3, #3
 8002ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fb1e 	bl	8002124 <nunavutChooseMin>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4413      	add	r3, r2
 8002afc:	f107 0210 	add.w	r2, r7, #16
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7ff fe5b 	bl	80027bc <uavcan_node_Mode_1_0_deserialize_>
 8002b06:	4603      	mov	r3, r0
 8002b08:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002b0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da02      	bge.n	8002b18 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002b12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b16:	e025      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3308      	adds	r3, #8
 8002b26:	6a3a      	ldr	r2, [r7, #32]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d307      	bcc.n	8002b3c <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	4413      	add	r3, r2
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	719a      	strb	r2, [r3, #6]
 8002b3a:	e002      	b.n	8002b42 <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3308      	adds	r3, #8
 8002b46:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3307      	adds	r3, #7
 8002b4c:	f023 0307 	bic.w	r3, r3, #7
 8002b50:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	69f8      	ldr	r0, [r7, #28]
 8002b56:	f7ff fae5 	bl	8002124 <nunavutChooseMin>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	080176a0 	.word	0x080176a0

08002b70 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b96:	f06f 0301 	mvn.w	r3, #1
 8002b9a:	e027      	b.n	8002bec <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002ba4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	68b8      	ldr	r0, [r7, #8]
 8002bbc:	f7ff fcdb 	bl	8002576 <nunavutGetF32>
 8002bc0:	eef0 7a40 	vmov.f32	s15, s0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3320      	adds	r3, #32
 8002bce:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3307      	adds	r3, #7
 8002bd4:	f023 0307 	bic.w	r3, r3, #7
 8002bd8:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002bda:	69b9      	ldr	r1, [r7, #24]
 8002bdc:	6978      	ldr	r0, [r7, #20]
 8002bde:	f7ff faa1 	bl	8002124 <nunavutChooseMin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	080176a0 	.word	0x080176a0

08002bf8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c1e:	f06f 0301 	mvn.w	r3, #1
 8002c22:	e027      	b.n	8002c74 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8002c2c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	69f9      	ldr	r1, [r7, #28]
 8002c42:	68b8      	ldr	r0, [r7, #8]
 8002c44:	f7ff fc97 	bl	8002576 <nunavutGetF32>
 8002c48:	eef0 7a40 	vmov.f32	s15, s0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3320      	adds	r3, #32
 8002c56:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	f023 0307 	bic.w	r3, r3, #7
 8002c60:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f7ff fa5d 	bl	8002124 <nunavutChooseMin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	080176a0 	.word	0x080176a0

08002c80 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ca6:	f06f 0301 	mvn.w	r3, #1
 8002caa:	e027      	b.n	8002cfc <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 8002cb4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	69f9      	ldr	r1, [r7, #28]
 8002cca:	68b8      	ldr	r0, [r7, #8]
 8002ccc:	f7ff fc53 	bl	8002576 <nunavutGetF32>
 8002cd0:	eef0 7a40 	vmov.f32	s15, s0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3320      	adds	r3, #32
 8002cde:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3307      	adds	r3, #7
 8002ce4:	f023 0307 	bic.w	r3, r3, #7
 8002ce8:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	6978      	ldr	r0, [r7, #20]
 8002cee:	f7ff fa19 	bl	8002124 <nunavutChooseMin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	080176a0 	.word	0x080176a0

08002d08 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d2e:	f06f 0301 	mvn.w	r3, #1
 8002d32:	e090      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002d3a:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8002d3c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	08db      	lsrs	r3, r3, #3
 8002d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f9e5 	bl	8002124 <nunavutChooseMin>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002d62:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f107 021c 	add.w	r2, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7ff fefd 	bl	8002b70 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 8002d7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	da02      	bge.n	8002d8a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8002d84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002d88:	e065      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	4413      	add	r3, r2
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	3307      	adds	r3, #7
 8002d98:	f023 0307 	bic.w	r3, r3, #7
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f9bd 	bl	8002124 <nunavutChooseMin>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f107 0218 	add.w	r2, r7, #24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff ff5c 	bl	8002c80 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 8002dce:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da02      	bge.n	8002ddc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8002dd6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002dda:	e03c      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de2:	4413      	add	r3, r2
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	3307      	adds	r3, #7
 8002dea:	f023 0307 	bic.w	r3, r3, #7
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	08db      	lsrs	r3, r3, #3
 8002df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f994 	bl	8002124 <nunavutChooseMin>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	f107 0214 	add.w	r2, r7, #20
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7ff feee 	bl	8002bf8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 8002e22:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da02      	bge.n	8002e30 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 8002e2a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002e2e:	e012      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	4413      	add	r3, r2
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e48:	f7ff f96c 	bl	8002124 <nunavutChooseMin>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3730      	adds	r7, #48	; 0x30
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	080176a0 	.word	0x080176a0

08002e64 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <uavcan_register_Name_1_0_deserialize_+0x26>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <uavcan_register_Name_1_0_deserialize_+0x26>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <uavcan_register_Name_1_0_deserialize_+0x2c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e8a:	f06f 0301 	mvn.w	r3, #1
 8002e8e:	e04a      	b.n	8002f26 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 8002e98:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3308      	adds	r3, #8
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d309      	bcc.n	8002ec8 <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	08db      	lsrs	r3, r3, #3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8002ec6:	e003      	b.n	8002ed0 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002edc:	2bff      	cmp	r3, #255	; 0xff
 8002ede:	d902      	bls.n	8002ee6 <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002ee0:	f06f 0309 	mvn.w	r3, #9
 8002ee4:	e01f      	b.n	8002f26 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	f7ff f9fd 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4413      	add	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3307      	adds	r3, #7
 8002f0e:	f023 0307 	bic.w	r3, r3, #7
 8002f12:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff f904 	bl	8002124 <nunavutChooseMin>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	080176a0 	.word	0x080176a0

08002f34 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f52:	f06f 0301 	mvn.w	r3, #1
 8002f56:	e05e      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002f66:	d202      	bcs.n	8002f6e <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002f68:	f06f 0302 	mvn.w	r3, #2
 8002f6c:	e053      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7c:	d902      	bls.n	8002f84 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002f7e:	f06f 0309 	mvn.w	r3, #9
 8002f82:	e048      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	b292      	uxth	r2, r2
 8002f96:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	9100      	str	r1, [sp, #0]
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f7ff f8e5 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d021      	beq.n	800300c <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f1c3 0308 	rsb	r3, r3, #8
 8002fd6:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	69b9      	ldr	r1, [r7, #24]
 8002fec:	68b8      	ldr	r0, [r7, #8]
 8002fee:	f7ff f9a9 	bl	8002344 <nunavutSetUxx>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002ff6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da02      	bge.n	8003004 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 8002ffe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003002:	e008      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003046:	f06f 0301 	mvn.w	r3, #1
 800304a:	e041      	b.n	80030d0 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 8003054:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003066:	2310      	movs	r3, #16
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	69f9      	ldr	r1, [r7, #28]
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f7ff f98f 	bl	8002390 <nunavutGetU16>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3310      	adds	r3, #16
 8003080:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308c:	d902      	bls.n	8003094 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800308e:	f06f 0309 	mvn.w	r3, #9
 8003092:	e01d      	b.n	80030d0 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	f7ff f927 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4413      	add	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3307      	adds	r3, #7
 80030b8:	f023 0307 	bic.w	r3, r3, #7
 80030bc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80030be:	69b9      	ldr	r1, [r7, #24]
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff f82f 	bl	8002124 <nunavutChooseMin>
 80030c6:	4603      	mov	r3, r0
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	080176a0 	.word	0x080176a0

080030dc <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	; 0x30
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030fa:	f06f 0301 	mvn.w	r3, #1
 80030fe:	e05f      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	f640 0207 	movw	r2, #2055	; 0x807
 800310e:	4293      	cmp	r3, r2
 8003110:	d802      	bhi.n	8003118 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003112:	f06f 0302 	mvn.w	r3, #2
 8003116:	e053      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d902      	bls.n	800312c <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003126:	f06f 0309 	mvn.w	r3, #9
 800312a:	e049      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	b2ca      	uxtb	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3308      	adds	r3, #8
 8003142:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800314a:	011a      	lsls	r2, r3, #4
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2100      	movs	r1, #0
 8003150:	9100      	str	r1, [sp, #0]
 8003152:	69f9      	ldr	r1, [r7, #28]
 8003154:	68b8      	ldr	r0, [r7, #8]
 8003156:	f7ff f811 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	2b00      	cmp	r3, #0
 8003170:	d021      	beq.n	80031b6 <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f1c3 0308 	rsb	r3, r3, #8
 8003180:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9cd 2300 	strd	r2, r3, [sp]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	68b8      	ldr	r0, [r7, #8]
 8003198:	f7ff f8d4 	bl	8002344 <nunavutSetUxx>
 800319c:	4603      	mov	r3, r0
 800319e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80031a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	da02      	bge.n	80031ae <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80031a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031ac:	e008      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	08da      	lsrs	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80031ee:	f06f 0301 	mvn.w	r3, #1
 80031f2:	e04a      	b.n	800328a <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 80031fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3308      	adds	r3, #8
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	429a      	cmp	r2, r3
 8003216:	d309      	bcc.n	800322c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08db      	lsrs	r3, r3, #3
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800322a:	e003      	b.n	8003234 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3308      	adds	r3, #8
 8003238:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003240:	2b80      	cmp	r3, #128	; 0x80
 8003242:	d902      	bls.n	800324a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003244:	f06f 0309 	mvn.w	r3, #9
 8003248:	e01f      	b.n	800328a <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	f7ff f84b 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3307      	adds	r3, #7
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003278:	69b9      	ldr	r1, [r7, #24]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7fe ff52 	bl	8002124 <nunavutChooseMin>
 8003280:	4603      	mov	r3, r0
 8003282:	08da      	lsrs	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	080176a0 	.word	0x080176a0

08003298 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08c      	sub	sp, #48	; 0x30
 800329c:	af04      	add	r7, sp, #16
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80032b6:	f06f 0301 	mvn.w	r3, #1
 80032ba:	e05f      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	f640 0207 	movw	r2, #2055	; 0x807
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80032ce:	f06f 0302 	mvn.w	r3, #2
 80032d2:	e053      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d902      	bls.n	80032e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80032e2:	f06f 0309 	mvn.w	r3, #9
 80032e6:	e049      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	4413      	add	r3, r2
 80032f6:	b2ca      	uxtb	r2, r1
 80032f8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3308      	adds	r3, #8
 80032fe:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2100      	movs	r1, #0
 800330c:	9100      	str	r1, [sp, #0]
 800330e:	69f9      	ldr	r1, [r7, #28]
 8003310:	68b8      	ldr	r0, [r7, #8]
 8003312:	f7fe ff33 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800331c:	015b      	lsls	r3, r3, #5
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	2b00      	cmp	r3, #0
 800332c:	d021      	beq.n	8003372 <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f1c3 0308 	rsb	r3, r3, #8
 800333c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9cd 2300 	strd	r2, r3, [sp]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	69b9      	ldr	r1, [r7, #24]
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f7fe fff6 	bl	8002344 <nunavutSetUxx>
 8003358:	4603      	mov	r3, r0
 800335a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800335c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003360:	2b00      	cmp	r3, #0
 8003362:	da02      	bge.n	800336a <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003364:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003368:	e008      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033aa:	f06f 0301 	mvn.w	r3, #1
 80033ae:	e04a      	b.n	8003446 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 80033b8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3308      	adds	r3, #8
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d309      	bcc.n	80033e8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	4413      	add	r3, r2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80033e6:	e003      	b.n	80033f0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3308      	adds	r3, #8
 80033f4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d902      	bls.n	8003406 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003400:	f06f 0309 	mvn.w	r3, #9
 8003404:	e01f      	b.n	8003446 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	f7fe ff6d 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003422:	015b      	lsls	r3, r3, #5
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4413      	add	r3, r2
 8003428:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3307      	adds	r3, #7
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003434:	69b9      	ldr	r1, [r7, #24]
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7fe fe74 	bl	8002124 <nunavutChooseMin>
 800343c:	4603      	mov	r3, r0
 800343e:	08da      	lsrs	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	080176a0 	.word	0x080176a0

08003454 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	; 0x30
 8003458:	af04      	add	r7, sp, #16
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003472:	f06f 0301 	mvn.w	r3, #1
 8003476:	e05f      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	f640 0207 	movw	r2, #2055	; 0x807
 8003486:	4293      	cmp	r3, r2
 8003488:	d802      	bhi.n	8003490 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800348a:	f06f 0302 	mvn.w	r3, #2
 800348e:	e053      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800349a:	2b20      	cmp	r3, #32
 800349c:	d902      	bls.n	80034a4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800349e:	f06f 0309 	mvn.w	r3, #9
 80034a2:	e049      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	4413      	add	r3, r2
 80034b2:	b2ca      	uxtb	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3308      	adds	r3, #8
 80034ba:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034c2:	019a      	lsls	r2, r3, #6
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2100      	movs	r1, #0
 80034c8:	9100      	str	r1, [sp, #0]
 80034ca:	69f9      	ldr	r1, [r7, #28]
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f7fe fe55 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d021      	beq.n	800352e <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f1c3 0308 	rsb	r3, r3, #8
 80034f8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9cd 2300 	strd	r2, r3, [sp]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	69b9      	ldr	r1, [r7, #24]
 800350e:	68b8      	ldr	r0, [r7, #8]
 8003510:	f7fe ff18 	bl	8002344 <nunavutSetUxx>
 8003514:	4603      	mov	r3, r0
 8003516:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003518:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800351c:	2b00      	cmp	r3, #0
 800351e:	da02      	bge.n	8003526 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003520:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003524:	e008      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d006      	beq.n	8003566 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003566:	f06f 0301 	mvn.w	r3, #1
 800356a:	e04a      	b.n	8003602 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8003574:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3308      	adds	r3, #8
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d309      	bcc.n	80035a4 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	08db      	lsrs	r3, r3, #3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80035a2:	e003      	b.n	80035ac <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3308      	adds	r3, #8
 80035b0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d902      	bls.n	80035c2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035bc:	f06f 0309 	mvn.w	r3, #9
 80035c0:	e01f      	b.n	8003602 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035ca:	019b      	lsls	r3, r3, #6
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	f7fe fe8f 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035de:	019b      	lsls	r3, r3, #6
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4413      	add	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3307      	adds	r3, #7
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7fe fd96 	bl	8002124 <nunavutChooseMin>
 80035f8:	4603      	mov	r3, r0
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	080176a0 	.word	0x080176a0

08003610 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af04      	add	r7, sp, #16
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800362e:	f06f 0301 	mvn.w	r3, #1
 8003632:	e060      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003642:	d202      	bcs.n	800364a <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003644:	f06f 0302 	mvn.w	r3, #2
 8003648:	e055      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d902      	bls.n	8003660 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800365a:	f06f 0309 	mvn.w	r3, #9
 800365e:	e04a      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4413      	add	r3, r2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800366e:	8812      	ldrh	r2, [r2, #0]
 8003670:	b292      	uxth	r2, r2
 8003672:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3310      	adds	r3, #16
 8003678:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003680:	00da      	lsls	r2, r3, #3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2100      	movs	r1, #0
 8003686:	9100      	str	r1, [sp, #0]
 8003688:	69f9      	ldr	r1, [r7, #28]
 800368a:	68b8      	ldr	r0, [r7, #8]
 800368c:	f7fe fd76 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d021      	beq.n	80036ec <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f1c3 0308 	rsb	r3, r3, #8
 80036b6:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9cd 2300 	strd	r2, r3, [sp]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	f7fe fe39 	bl	8002344 <nunavutSetUxx>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80036d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da02      	bge.n	80036e4 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 80036de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036e2:	e008      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003726:	f06f 0301 	mvn.w	r3, #1
 800372a:	e043      	b.n	80037b4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003734:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003746:	2310      	movs	r3, #16
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f7fe fe1f 	bl	8002390 <nunavutGetU16>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3310      	adds	r3, #16
 8003760:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d902      	bls.n	8003774 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800376e:	f06f 0309 	mvn.w	r3, #9
 8003772:	e01f      	b.n	80037b4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	f7fe fdb6 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4413      	add	r3, r2
 8003796:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3307      	adds	r3, #7
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f7fe fcbd 	bl	8002124 <nunavutChooseMin>
 80037aa:	4603      	mov	r3, r0
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	080176a0 	.word	0x080176a0

080037c0 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af04      	add	r7, sp, #16
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037de:	f06f 0301 	mvn.w	r3, #1
 80037e2:	e05f      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	f640 0207 	movw	r2, #2055	; 0x807
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d802      	bhi.n	80037fc <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80037f6:	f06f 0302 	mvn.w	r3, #2
 80037fa:	e053      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d902      	bls.n	8003810 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800380a:	f06f 0309 	mvn.w	r3, #9
 800380e:	e049      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08db      	lsrs	r3, r3, #3
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4413      	add	r3, r2
 800381e:	b2ca      	uxtb	r2, r1
 8003820:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3308      	adds	r3, #8
 8003826:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800382e:	011a      	lsls	r2, r3, #4
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2100      	movs	r1, #0
 8003834:	9100      	str	r1, [sp, #0]
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68b8      	ldr	r0, [r7, #8]
 800383a:	f7fe fc9f 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f1c3 0308 	rsb	r3, r3, #8
 8003864:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9cd 2300 	strd	r2, r3, [sp]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f7fe fd62 	bl	8002344 <nunavutSetUxx>
 8003880:	4603      	mov	r3, r0
 8003882:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003884:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003888:	2b00      	cmp	r3, #0
 800388a:	da02      	bge.n	8003892 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 800388c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003890:	e008      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038d2:	f06f 0301 	mvn.w	r3, #1
 80038d6:	e04a      	b.n	800396e <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 80038e0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3308      	adds	r3, #8
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d309      	bcc.n	8003910 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	4413      	add	r3, r2
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800390e:	e003      	b.n	8003918 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3308      	adds	r3, #8
 800391c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d902      	bls.n	800392e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003928:	f06f 0309 	mvn.w	r3, #9
 800392c:	e01f      	b.n	800396e <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	f7fe fcd9 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3307      	adds	r3, #7
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7fe fbe0 	bl	8002124 <nunavutChooseMin>
 8003964:	4603      	mov	r3, r0
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	080176a0 	.word	0x080176a0

0800397c <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af04      	add	r7, sp, #16
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800399a:	f06f 0301 	mvn.w	r3, #1
 800399e:	e05f      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f640 0207 	movw	r2, #2055	; 0x807
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d802      	bhi.n	80039b8 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80039b2:	f06f 0302 	mvn.w	r3, #2
 80039b6:	e053      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d902      	bls.n	80039cc <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039c6:	f06f 0309 	mvn.w	r3, #9
 80039ca:	e049      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	b2ca      	uxtb	r2, r1
 80039dc:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3308      	adds	r3, #8
 80039e2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2100      	movs	r1, #0
 80039f0:	9100      	str	r1, [sp, #0]
 80039f2:	69f9      	ldr	r1, [r7, #28]
 80039f4:	68b8      	ldr	r0, [r7, #8]
 80039f6:	f7fe fbc1 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a00:	015b      	lsls	r3, r3, #5
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d021      	beq.n	8003a56 <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f1c3 0308 	rsb	r3, r3, #8
 8003a20:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	69b9      	ldr	r1, [r7, #24]
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f7fe fc84 	bl	8002344 <nunavutSetUxx>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003a40:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da02      	bge.n	8003a4e <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003a48:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a4c:	e008      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	08da      	lsrs	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a8e:	f06f 0301 	mvn.w	r3, #1
 8003a92:	e04a      	b.n	8003b2a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8003a9c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d309      	bcc.n	8003acc <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	08db      	lsrs	r3, r3, #3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003aca:	e003      	b.n	8003ad4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d902      	bls.n	8003aea <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ae4:	f06f 0309 	mvn.w	r3, #9
 8003ae8:	e01f      	b.n	8003b2a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003af2:	015b      	lsls	r3, r3, #5
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	f7fe fbfb 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b06:	015b      	lsls	r3, r3, #5
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3307      	adds	r3, #7
 8003b12:	f023 0307 	bic.w	r3, r3, #7
 8003b16:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7fe fb02 	bl	8002124 <nunavutChooseMin>
 8003b20:	4603      	mov	r3, r0
 8003b22:	08da      	lsrs	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	080176a0 	.word	0x080176a0

08003b38 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af04      	add	r7, sp, #16
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b56:	f06f 0301 	mvn.w	r3, #1
 8003b5a:	e05f      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	f640 0207 	movw	r2, #2055	; 0x807
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003b6e:	f06f 0302 	mvn.w	r3, #2
 8003b72:	e053      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d902      	bls.n	8003b88 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b82:	f06f 0309 	mvn.w	r3, #9
 8003b86:	e049      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	4413      	add	r3, r2
 8003b96:	b2ca      	uxtb	r2, r1
 8003b98:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ba6:	019a      	lsls	r2, r3, #6
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2100      	movs	r1, #0
 8003bac:	9100      	str	r1, [sp, #0]
 8003bae:	69f9      	ldr	r1, [r7, #28]
 8003bb0:	68b8      	ldr	r0, [r7, #8]
 8003bb2:	f7fe fae3 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003bbc:	019b      	lsls	r3, r3, #6
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d021      	beq.n	8003c12 <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f1c3 0308 	rsb	r3, r3, #8
 8003bdc:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9cd 2300 	strd	r2, r3, [sp]
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	68b8      	ldr	r0, [r7, #8]
 8003bf4:	f7fe fba6 	bl	8002344 <nunavutSetUxx>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003bfc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da02      	bge.n	8003c0a <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003c04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c08:	e008      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c4a:	f06f 0301 	mvn.w	r3, #1
 8003c4e:	e04a      	b.n	8003ce6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 8003c58:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d309      	bcc.n	8003c88 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003c86:	e003      	b.n	8003c90 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3308      	adds	r3, #8
 8003c94:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d902      	bls.n	8003ca6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ca0:	f06f 0309 	mvn.w	r3, #9
 8003ca4:	e01f      	b.n	8003ce6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cae:	019b      	lsls	r3, r3, #6
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	f7fe fb1d 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cc2:	019b      	lsls	r3, r3, #6
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	f023 0307 	bic.w	r3, r3, #7
 8003cd2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003cd4:	69b9      	ldr	r1, [r7, #24]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7fe fa24 	bl	8002124 <nunavutChooseMin>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	08da      	lsrs	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	080176a0 	.word	0x080176a0

08003cf4 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08c      	sub	sp, #48	; 0x30
 8003cf8:	af04      	add	r7, sp, #16
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d12:	f06f 0301 	mvn.w	r3, #1
 8003d16:	e060      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003d26:	d202      	bcs.n	8003d2e <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003d28:	f06f 0302 	mvn.w	r3, #2
 8003d2c:	e055      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	d902      	bls.n	8003d44 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d3e:	f06f 0309 	mvn.w	r3, #9
 8003d42:	e04a      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003d52:	8812      	ldrh	r2, [r2, #0]
 8003d54:	b292      	uxth	r2, r2
 8003d56:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d64:	00da      	lsls	r2, r3, #3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	9100      	str	r1, [sp, #0]
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	68b8      	ldr	r0, [r7, #8]
 8003d70:	f7fe fa04 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d021      	beq.n	8003dd0 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f1c3 0308 	rsb	r3, r3, #8
 8003d9a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	9302      	str	r3, [sp, #8]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9cd 2300 	strd	r2, r3, [sp]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	68b8      	ldr	r0, [r7, #8]
 8003db2:	f7fe fac7 	bl	8002344 <nunavutSetUxx>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003dba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da02      	bge.n	8003dc8 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003dc2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dc6:	e008      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e0a:	f06f 0301 	mvn.w	r3, #1
 8003e0e:	e043      	b.n	8003e98 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 8003e18:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	69f9      	ldr	r1, [r7, #28]
 8003e30:	68b8      	ldr	r0, [r7, #8]
 8003e32:	f7fe faad 	bl	8002390 <nunavutGetU16>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3310      	adds	r3, #16
 8003e44:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e50:	d902      	bls.n	8003e58 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e52:	f06f 0309 	mvn.w	r3, #9
 8003e56:	e01f      	b.n	8003e98 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	f7fe fa44 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3307      	adds	r3, #7
 8003e80:	f023 0307 	bic.w	r3, r3, #7
 8003e84:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f7fe f94b 	bl	8002124 <nunavutChooseMin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	080176a0 	.word	0x080176a0

08003ea4 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	; 0x38
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ec2:	f06f 0301 	mvn.w	r3, #1
 8003ec6:	e08b      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	f640 0207 	movw	r2, #2055	; 0x807
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003eda:	f06f 0302 	mvn.w	r3, #2
 8003ede:	e07f      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d902      	bls.n	8003ef4 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003eee:	f06f 0309 	mvn.w	r3, #9
 8003ef2:	e075      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4413      	add	r3, r2
 8003f02:	b2ca      	uxtb	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	3308      	adds	r3, #8
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	623b      	str	r3, [r7, #32]
 8003f10:	e034      	b.n	8003f7c <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 8003f1e:	ed97 0a07 	vldr	s0, [r7, #28]
 8003f22:	f7fe f8db 	bl	80020dc <_ZSt8isfinitef>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 8003f2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f30:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003fe8 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 8003f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d501      	bpl.n	8003f42 <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 8003f40:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 8003f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f46:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003ff0 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 8003f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f52:	dd01      	ble.n	8003f58 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 8003f56:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 8003f58:	ed97 0a07 	vldr	s0, [r7, #28]
 8003f5c:	f7fe fa5e 	bl	800241c <nunavutFloat16Pack>
 8003f60:	4603      	mov	r3, r0
 8003f62:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	8aba      	ldrh	r2, [r7, #20]
 8003f6e:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	3310      	adds	r3, #16
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d3c4      	bcc.n	8003f12 <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d021      	beq.n	8003fd6 <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f1c3 0308 	rsb	r3, r3, #8
 8003fa0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9cd 2300 	strd	r2, r3, [sp]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	69b9      	ldr	r1, [r7, #24]
 8003fb6:	68b8      	ldr	r0, [r7, #8]
 8003fb8:	f7fe f9c4 	bl	8002344 <nunavutSetUxx>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003fc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da02      	bge.n	8003fce <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8003fc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003fcc:	e008      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	4413      	add	r3, r2
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3728      	adds	r7, #40	; 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	c77fe000 	.word	0xc77fe000
 8003fec:	c77fe000 	.word	0xc77fe000
 8003ff0:	477fe000 	.word	0x477fe000
 8003ff4:	477fe000 	.word	0x477fe000

08003ff8 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800401e:	f06f 0301 	mvn.w	r3, #1
 8004022:	e054      	b.n	80040ce <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 800402c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3308      	adds	r3, #8
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	429a      	cmp	r2, r3
 8004046:	d309      	bcc.n	800405c <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800405a:	e003      	b.n	8004064 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3308      	adds	r3, #8
 8004068:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d902      	bls.n	800407a <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004074:	f06f 0309 	mvn.w	r3, #9
 8004078:	e029      	b.n	80040ce <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e012      	b.n	80040a6 <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	6979      	ldr	r1, [r7, #20]
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	f7fe fa5f 	bl	8002548 <nunavutGetF16>
 800408a:	eef0 7a40 	vmov.f32	s15, s0
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3310      	adds	r3, #16
 800409e:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	3301      	adds	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3e6      	bcc.n	8004080 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3307      	adds	r3, #7
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	69f8      	ldr	r0, [r7, #28]
 80040c0:	f7fe f830 	bl	8002124 <nunavutChooseMin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	080176a0 	.word	0x080176a0

080040dc <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	; 0x30
 80040e0:	af04      	add	r7, sp, #16
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80040fa:	f06f 0301 	mvn.w	r3, #1
 80040fe:	e05f      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	f640 0207 	movw	r2, #2055	; 0x807
 800410e:	4293      	cmp	r3, r2
 8004110:	d802      	bhi.n	8004118 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004112:	f06f 0302 	mvn.w	r3, #2
 8004116:	e053      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d902      	bls.n	800412c <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004126:	f06f 0309 	mvn.w	r3, #9
 800412a:	e049      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08db      	lsrs	r3, r3, #3
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4413      	add	r3, r2
 800413a:	b2ca      	uxtb	r2, r1
 800413c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3308      	adds	r3, #8
 8004142:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2100      	movs	r1, #0
 8004150:	9100      	str	r1, [sp, #0]
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f7fe f811 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004160:	015b      	lsls	r3, r3, #5
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	2b00      	cmp	r3, #0
 8004170:	d021      	beq.n	80041b6 <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f1c3 0308 	rsb	r3, r3, #8
 8004180:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9cd 2300 	strd	r2, r3, [sp]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	69b9      	ldr	r1, [r7, #24]
 8004196:	68b8      	ldr	r0, [r7, #8]
 8004198:	f7fe f8d4 	bl	8002344 <nunavutSetUxx>
 800419c:	4603      	mov	r3, r0
 800419e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80041a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da02      	bge.n	80041ae <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80041a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80041ac:	e008      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	08da      	lsrs	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80041ee:	f06f 0301 	mvn.w	r3, #1
 80041f2:	e04a      	b.n	800428a <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80041fa:	4b26      	ldr	r3, [pc, #152]	; (8004294 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 80041fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3308      	adds	r3, #8
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d309      	bcc.n	800422c <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	08db      	lsrs	r3, r3, #3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800422a:	e003      	b.n	8004234 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3308      	adds	r3, #8
 8004238:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d902      	bls.n	800424a <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004244:	f06f 0309 	mvn.w	r3, #9
 8004248:	e01f      	b.n	800428a <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004252:	015b      	lsls	r3, r3, #5
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	f7fe f84b 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004266:	015b      	lsls	r3, r3, #5
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4413      	add	r3, r2
 800426c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3307      	adds	r3, #7
 8004272:	f023 0307 	bic.w	r3, r3, #7
 8004276:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7fd ff52 	bl	8002124 <nunavutChooseMin>
 8004280:	4603      	mov	r3, r0
 8004282:	08da      	lsrs	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	080176a0 	.word	0x080176a0

08004298 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af04      	add	r7, sp, #16
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80042b6:	f06f 0301 	mvn.w	r3, #1
 80042ba:	e05f      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	f640 0207 	movw	r2, #2055	; 0x807
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80042ce:	f06f 0302 	mvn.w	r3, #2
 80042d2:	e053      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d902      	bls.n	80042e8 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80042e2:	f06f 0309 	mvn.w	r3, #9
 80042e6:	e049      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4413      	add	r3, r2
 80042f6:	b2ca      	uxtb	r2, r1
 80042f8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3308      	adds	r3, #8
 80042fe:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004306:	019a      	lsls	r2, r3, #6
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2100      	movs	r1, #0
 800430c:	9100      	str	r1, [sp, #0]
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	f7fd ff33 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d021      	beq.n	8004372 <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f1c3 0308 	rsb	r3, r3, #8
 800433c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	9302      	str	r3, [sp, #8]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9cd 2300 	strd	r2, r3, [sp]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	68b8      	ldr	r0, [r7, #8]
 8004354:	f7fd fff6 	bl	8002344 <nunavutSetUxx>
 8004358:	4603      	mov	r3, r0
 800435a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800435c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da02      	bge.n	800436a <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004364:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004368:	e008      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	08da      	lsrs	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80043aa:	f06f 0301 	mvn.w	r3, #1
 80043ae:	e04a      	b.n	8004446 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 80043b8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	3308      	adds	r3, #8
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d309      	bcc.n	80043e8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	08db      	lsrs	r3, r3, #3
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4413      	add	r3, r2
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80043e6:	e003      	b.n	80043f0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3308      	adds	r3, #8
 80043f4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d902      	bls.n	8004406 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004400:	f06f 0309 	mvn.w	r3, #9
 8004404:	e01f      	b.n	8004446 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800440e:	019b      	lsls	r3, r3, #6
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	f7fd ff6d 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004422:	019b      	lsls	r3, r3, #6
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3307      	adds	r3, #7
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004434:	69b9      	ldr	r1, [r7, #24]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7fd fe74 	bl	8002124 <nunavutChooseMin>
 800443c:	4603      	mov	r3, r0
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	080176a0 	.word	0x080176a0

08004454 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004472:	f06f 0301 	mvn.w	r3, #1
 8004476:	e003      	b.n	8004480 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80044b2:	f06f 0301 	mvn.w	r3, #1
 80044b6:	e008      	b.n	80044ca <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 80044c0:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	080176a0 	.word	0x080176a0

080044dc <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	; 0x30
 80044e0:	af04      	add	r7, sp, #16
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <uavcan_primitive_String_1_0_serialize_+0x1e>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <uavcan_primitive_String_1_0_serialize_+0x1e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80044fa:	f06f 0301 	mvn.w	r3, #1
 80044fe:	e060      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800450e:	d202      	bcs.n	8004516 <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004510:	f06f 0302 	mvn.w	r3, #2
 8004514:	e055      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004524:	d902      	bls.n	800452c <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004526:	f06f 0309 	mvn.w	r3, #9
 800452a:	e04a      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	08db      	lsrs	r3, r3, #3
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	4413      	add	r3, r2
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	b292      	uxth	r2, r2
 800453e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3310      	adds	r3, #16
 8004544:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800454c:	00da      	lsls	r2, r3, #3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2100      	movs	r1, #0
 8004552:	9100      	str	r1, [sp, #0]
 8004554:	69f9      	ldr	r1, [r7, #28]
 8004556:	68b8      	ldr	r0, [r7, #8]
 8004558:	f7fd fe10 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	2b00      	cmp	r3, #0
 8004572:	d021      	beq.n	80045b8 <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f1c3 0308 	rsb	r3, r3, #8
 8004582:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9cd 2300 	strd	r2, r3, [sp]
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f7fd fed3 	bl	8002344 <nunavutSetUxx>
 800459e:	4603      	mov	r3, r0
 80045a0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80045a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	da02      	bge.n	80045b0 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 80045aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80045ae:	e008      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	08da      	lsrs	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <uavcan_primitive_String_1_0_deserialize_+0x26>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <uavcan_primitive_String_1_0_deserialize_+0x26>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80045f2:	f06f 0301 	mvn.w	r3, #1
 80045f6:	e043      	b.n	8004680 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80045fe:	4b22      	ldr	r3, [pc, #136]	; (8004688 <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8004600:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004612:	2310      	movs	r3, #16
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	69f9      	ldr	r1, [r7, #28]
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f7fd feb9 	bl	8002390 <nunavutGetU16>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3310      	adds	r3, #16
 800462c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004638:	d902      	bls.n	8004640 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800463a:	f06f 0309 	mvn.w	r3, #9
 800463e:	e01f      	b.n	8004680 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	f7fd fe50 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4413      	add	r3, r2
 8004662:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3307      	adds	r3, #7
 8004668:	f023 0307 	bic.w	r3, r3, #7
 800466c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f7fd fd57 	bl	8002124 <nunavutChooseMin>
 8004676:	4603      	mov	r3, r0
 8004678:	08da      	lsrs	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	080176a0 	.word	0x080176a0

0800468c <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af04      	add	r7, sp, #16
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80046aa:	f06f 0301 	mvn.w	r3, #1
 80046ae:	e060      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80046be:	d202      	bcs.n	80046c6 <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80046c0:	f06f 0302 	mvn.w	r3, #2
 80046c4:	e055      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d4:	d902      	bls.n	80046dc <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80046d6:	f06f 0309 	mvn.w	r3, #9
 80046da:	e04a      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4413      	add	r3, r2
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80046ea:	8812      	ldrh	r2, [r2, #0]
 80046ec:	b292      	uxth	r2, r2
 80046ee:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3310      	adds	r3, #16
 80046f4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046fc:	00da      	lsls	r2, r3, #3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2100      	movs	r1, #0
 8004702:	9100      	str	r1, [sp, #0]
 8004704:	69f9      	ldr	r1, [r7, #28]
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	f7fd fd38 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	2b00      	cmp	r3, #0
 8004722:	d021      	beq.n	8004768 <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f1c3 0308 	rsb	r3, r3, #8
 8004732:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9cd 2300 	strd	r2, r3, [sp]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f7fd fdfb 	bl	8002344 <nunavutSetUxx>
 800474e:	4603      	mov	r3, r0
 8004750:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004752:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da02      	bge.n	8004760 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 800475a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800475e:	e008      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80047a2:	f06f 0301 	mvn.w	r3, #1
 80047a6:	e043      	b.n	8004830 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80047ae:	4b22      	ldr	r3, [pc, #136]	; (8004838 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 80047b0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80047c2:	2310      	movs	r3, #16
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f7fd fde1 	bl	8002390 <nunavutGetU16>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3310      	adds	r3, #16
 80047dc:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e8:	d902      	bls.n	80047f0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80047ea:	f06f 0309 	mvn.w	r3, #9
 80047ee:	e01f      	b.n	8004830 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	f7fd fd78 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3307      	adds	r3, #7
 8004818:	f023 0307 	bic.w	r3, r3, #7
 800481c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	f7fd fc7f 	bl	8002124 <nunavutChooseMin>
 8004826:	4603      	mov	r3, r0
 8004828:	08da      	lsrs	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	080176a0 	.word	0x080176a0

0800483c <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b09e      	sub	sp, #120	; 0x78
 8004840:	af04      	add	r7, sp, #16
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <uavcan_register_Value_1_0_serialize_+0x1e>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <uavcan_register_Value_1_0_serialize_+0x1e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800485a:	f06f 0301 	mvn.w	r3, #1
 800485e:	e248      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	663b      	str	r3, [r7, #96]	; 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f640 0217 	movw	r2, #2071	; 0x817
 800486e:	4293      	cmp	r3, r2
 8004870:	d802      	bhi.n	8004878 <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004872:	f06f 0302 	mvn.w	r3, #2
 8004876:	e23c      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	667b      	str	r3, [r7, #100]	; 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 800487c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800487e:	08db      	lsrs	r3, r3, #3
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4413      	add	r3, r2
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 800488a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800488c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488e:	3308      	adds	r3, #8
 8004890:	667b      	str	r3, [r7, #100]	; 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11b      	bne.n	80048d4 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 800489c:	2300      	movs	r3, #0
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 80048a0:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 80048a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a4:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4413      	add	r3, r2
 80048aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7ff fdd0 	bl	8004454 <uavcan_primitive_Empty_1_0_serialize_>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
        if (_err0_ < 0)
 80048ba:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 80048be:	2b00      	cmp	r3, #0
 80048c0:	da02      	bge.n	80048c8 <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 80048c2:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 80048c6:	e214      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048ce:	4413      	add	r3, r2
 80048d0:	667b      	str	r3, [r7, #100]	; 0x64
 80048d2:	e1de      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d11c      	bne.n	8004918 <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 80048de:	f44f 7381 	mov.w	r3, #258	; 0x102
 80048e2:	647b      	str	r3, [r7, #68]	; 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80048e4:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 80048e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e8:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7ff fdf2 	bl	80044dc <uavcan_primitive_String_1_0_serialize_>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (_err1_ < 0)
 80048fe:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004902:	2b00      	cmp	r3, #0
 8004904:	da02      	bge.n	800490c <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 8004906:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800490a:	e1f2      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004912:	4413      	add	r3, r2
 8004914:	667b      	str	r3, [r7, #100]	; 0x64
 8004916:	e1bc      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800491e:	2b02      	cmp	r3, #2
 8004920:	d11c      	bne.n	800495c <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8004922:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004926:	643b      	str	r3, [r7, #64]	; 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004928:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 800492a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492c:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4413      	add	r3, r2
 8004932:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004936:	4619      	mov	r1, r3
 8004938:	f7ff fea8 	bl	800468c <uavcan_primitive_Unstructured_1_0_serialize_>
 800493c:	4603      	mov	r3, r0
 800493e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (_err2_ < 0)
 8004942:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004946:	2b00      	cmp	r3, #0
 8004948:	da02      	bge.n	8004950 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 800494a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800494e:	e1d0      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004956:	4413      	add	r3, r2
 8004958:	667b      	str	r3, [r7, #100]	; 0x64
 800495a:	e19a      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004962:	2b03      	cmp	r3, #3
 8004964:	d11c      	bne.n	80049a0 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 8004966:	f44f 7381 	mov.w	r3, #258	; 0x102
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 800496c:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 800496e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004970:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800497a:	4619      	mov	r1, r3
 800497c:	f7fe fada 	bl	8002f34 <uavcan_primitive_array_Bit_1_0_serialize_>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        if (_err3_ < 0)
 8004986:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 800498a:	2b00      	cmp	r3, #0
 800498c:	da02      	bge.n	8004994 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 800498e:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004992:	e1ae      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 8004994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800499a:	4413      	add	r3, r2
 800499c:	667b      	str	r3, [r7, #100]	; 0x64
 800499e:	e178      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d11c      	bne.n	80049e4 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 80049aa:	f240 1301 	movw	r3, #257	; 0x101
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80049b0:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 80049b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b4:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4413      	add	r3, r2
 80049ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049be:	4619      	mov	r1, r3
 80049c0:	f7fe fd48 	bl	8003454 <uavcan_primitive_array_Integer64_1_0_serialize_>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if (_err4_ < 0)
 80049ca:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	da02      	bge.n	80049d8 <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 80049d2:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 80049d6:	e18c      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049de:	4413      	add	r3, r2
 80049e0:	667b      	str	r3, [r7, #100]	; 0x64
 80049e2:	e156      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d11c      	bne.n	8004a28 <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 80049ee:	f240 1301 	movw	r3, #257	; 0x101
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 80049f4:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 80049f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f8:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7fe fc48 	bl	8003298 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        if (_err5_ < 0)
 8004a0e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da02      	bge.n	8004a1c <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 8004a16:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004a1a:	e16a      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a22:	4413      	add	r3, r2
 8004a24:	667b      	str	r3, [r7, #100]	; 0x64
 8004a26:	e134      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d11c      	bne.n	8004a6c <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 8004a32:	f240 1301 	movw	r3, #257	; 0x101
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004a38:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 8004a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a3c:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7fe fb48 	bl	80030dc <uavcan_primitive_array_Integer16_1_0_serialize_>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (_err6_ < 0)
 8004a52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da02      	bge.n	8004a60 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 8004a5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a5e:	e148      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a66:	4413      	add	r3, r2
 8004a68:	667b      	str	r3, [r7, #100]	; 0x64
 8004a6a:	e112      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	d11c      	bne.n	8004ab0 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 8004a76:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004a7c:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8004a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a80:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4413      	add	r3, r2
 8004a86:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f7fe fdc0 	bl	8003610 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
        if (_err7_ < 0)
 8004a96:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da02      	bge.n	8004aa4 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 8004a9e:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004aa2:	e126      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004aaa:	4413      	add	r3, r2
 8004aac:	667b      	str	r3, [r7, #100]	; 0x64
 8004aae:	e0f0      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d11c      	bne.n	8004af4 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8004aba:	f240 1301 	movw	r3, #257	; 0x101
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8004ac0:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8004ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac4:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f7ff f832 	bl	8003b38 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        if (_err8_ < 0)
 8004ada:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da02      	bge.n	8004ae8 <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 8004ae2:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8004ae6:	e104      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004aee:	4413      	add	r3, r2
 8004af0:	667b      	str	r3, [r7, #100]	; 0x64
 8004af2:	e0ce      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004afa:	2b09      	cmp	r3, #9
 8004afc:	d11c      	bne.n	8004b38 <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 8004afe:	f240 1301 	movw	r3, #257	; 0x101
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8004b04:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8004b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b08:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7fe ff32 	bl	800397c <uavcan_primitive_array_Natural32_1_0_serialize_>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
        if (_err9_ < 0)
 8004b1e:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da02      	bge.n	8004b2c <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 8004b26:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8004b2a:	e0e2      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b32:	4413      	add	r3, r2
 8004b34:	667b      	str	r3, [r7, #100]	; 0x64
 8004b36:	e0ac      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b3e:	2b0a      	cmp	r3, #10
 8004b40:	d11c      	bne.n	8004b7c <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8004b42:	f240 1301 	movw	r3, #257	; 0x101
 8004b46:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004b48:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 8004b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4c:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	f107 0220 	add.w	r2, r7, #32
 8004b56:	4619      	mov	r1, r3
 8004b58:	f7fe fe32 	bl	80037c0 <uavcan_primitive_array_Natural16_1_0_serialize_>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if (_err10_ < 0)
 8004b62:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da02      	bge.n	8004b70 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 8004b6a:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004b6e:	e0c0      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b76:	4413      	add	r3, r2
 8004b78:	667b      	str	r3, [r7, #100]	; 0x64
 8004b7a:	e08a      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b82:	2b0b      	cmp	r3, #11
 8004b84:	d11c      	bne.n	8004bc0 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 8004b86:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004b8a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004b8c:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 8004b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b90:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	f107 021c 	add.w	r2, r7, #28
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f7ff f8aa 	bl	8003cf4 <uavcan_primitive_array_Natural8_1_0_serialize_>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (_err11_ < 0)
 8004ba6:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da02      	bge.n	8004bb4 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 8004bae:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 8004bb2:	e09e      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bba:	4413      	add	r3, r2
 8004bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bbe:	e068      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d11c      	bne.n	8004c04 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 8004bca:	f240 1301 	movw	r3, #257	; 0x101
 8004bce:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004bd0:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 8004bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd4:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f107 0218 	add.w	r2, r7, #24
 8004bde:	4619      	mov	r1, r3
 8004be0:	f7ff fb5a 	bl	8004298 <uavcan_primitive_array_Real64_1_0_serialize_>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if (_err12_ < 0)
 8004bea:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da02      	bge.n	8004bf8 <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8004bf2:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8004bf6:	e07c      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bfe:	4413      	add	r3, r2
 8004c00:	667b      	str	r3, [r7, #100]	; 0x64
 8004c02:	e046      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004c0a:	2b0d      	cmp	r3, #13
 8004c0c:	d11c      	bne.n	8004c48 <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 8004c0e:	f240 1301 	movw	r3, #257	; 0x101
 8004c12:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004c14:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8004c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c18:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f107 0214 	add.w	r2, r7, #20
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7ff fa5a 	bl	80040dc <uavcan_primitive_array_Real32_1_0_serialize_>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if (_err13_ < 0)
 8004c2e:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da02      	bge.n	8004c3c <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 8004c36:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004c3a:	e05a      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c42:	4413      	add	r3, r2
 8004c44:	667b      	str	r3, [r7, #100]	; 0x64
 8004c46:	e024      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004c4e:	2b0e      	cmp	r3, #14
 8004c50:	d11c      	bne.n	8004c8c <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 8004c52:	f240 1301 	movw	r3, #257	; 0x101
 8004c56:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004c58:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 8004c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5c:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	f107 0210 	add.w	r2, r7, #16
 8004c66:	4619      	mov	r1, r3
 8004c68:	f7ff f91c 	bl	8003ea4 <uavcan_primitive_array_Real16_1_0_serialize_>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (_err14_ < 0)
 8004c72:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da02      	bge.n	8004c80 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 8004c7a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004c7e:	e038      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c86:	4413      	add	r3, r2
 8004c88:	667b      	str	r3, [r7, #100]	; 0x64
 8004c8a:	e002      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8004c8c:	f06f 030a 	mvn.w	r3, #10
 8004c90:	e02f      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d025      	beq.n	8004ce8 <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f1c3 0308 	rsb	r3, r3, #8
 8004caa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004cae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9cd 2300 	strd	r2, r3, [sp]
 8004cc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cc2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f7fd fb3d 	bl	8002344 <nunavutSetUxx>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (_err15_ < 0)
 8004cd0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da02      	bge.n	8004cde <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8004cd8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004cdc:	e009      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 8004cde:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004ce2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ce4:	4413      	add	r3, r2
 8004ce6:	667b      	str	r3, [r7, #100]	; 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cea:	08da      	lsrs	r2, r3, #3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3768      	adds	r7, #104	; 0x68
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b09a      	sub	sp, #104	; 0x68
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <uavcan_register_Value_1_0_deserialize_+0x26>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <uavcan_register_Value_1_0_deserialize_+0x26>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <uavcan_register_Value_1_0_deserialize_+0x2c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d22:	f06f 0301 	mvn.w	r3, #1
 8004d26:	e29b      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004d2e:	4bb0      	ldr	r3, [pc, #704]	; (8004ff0 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 8004d30:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	667b      	str	r3, [r7, #100]	; 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d44:	3308      	adds	r3, #8
 8004d46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d308      	bcc.n	8004d5e <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 8004d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	4413      	add	r3, r2
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8004d5c:	e003      	b.n	8004d66 <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 8004d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d68:	3308      	adds	r3, #8
 8004d6a:	667b      	str	r3, [r7, #100]	; 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d123      	bne.n	8004dbe <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd f9d1 	bl	8002124 <nunavutChooseMin>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004d8a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 8004d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8e:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	4413      	add	r3, r2
 8004d94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7ff fb77 	bl	800448c <uavcan_primitive_Empty_1_0_deserialize_>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 8004da4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da02      	bge.n	8004db2 <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 8004dac:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004db0:	e256      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8004db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004db8:	4413      	add	r3, r2
 8004dba:	667b      	str	r3, [r7, #100]	; 0x64
 8004dbc:	e242      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d123      	bne.n	8004e10 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dca:	08db      	lsrs	r3, r3, #3
 8004dcc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd f9a8 	bl	8002124 <nunavutChooseMin>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004ddc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8004dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de0:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4413      	add	r3, r2
 8004de6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004dea:	4619      	mov	r1, r3
 8004dec:	f7ff fbee 	bl	80045cc <uavcan_primitive_String_1_0_deserialize_>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 8004df6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	da02      	bge.n	8004e04 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 8004dfe:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8004e02:	e22d      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e0a:	4413      	add	r3, r2
 8004e0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e0e:	e219      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d123      	bne.n	8004e62 <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd f97f 	bl	8002124 <nunavutChooseMin>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004e2e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8004e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e32:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f7ff fc9d 	bl	800477c <uavcan_primitive_Unstructured_1_0_deserialize_>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 8004e48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da02      	bge.n	8004e56 <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 8004e50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e54:	e204      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e5c:	4413      	add	r3, r2
 8004e5e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e60:	e1f0      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d123      	bne.n	8004eb4 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6e:	08db      	lsrs	r3, r3, #3
 8004e70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd f956 	bl	8002124 <nunavutChooseMin>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004e80:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 8004e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e84:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f7fe f8c6 	bl	8003020 <uavcan_primitive_array_Bit_1_0_deserialize_>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 8004e9a:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da02      	bge.n	8004ea8 <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 8004ea2:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004ea6:	e1db      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004eae:	4413      	add	r3, r2
 8004eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8004eb2:	e1c7      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d123      	bne.n	8004f06 <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec0:	08db      	lsrs	r3, r3, #3
 8004ec2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fd f92d 	bl	8002124 <nunavutChooseMin>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004ed2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed6:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	4413      	add	r3, r2
 8004edc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fe fb2d 	bl	8003540 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 8004eec:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da02      	bge.n	8004efa <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8004ef4:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004ef8:	e1b2      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f00:	4413      	add	r3, r2
 8004f02:	667b      	str	r3, [r7, #100]	; 0x64
 8004f04:	e19e      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d123      	bne.n	8004f58 <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f12:	08db      	lsrs	r3, r3, #3
 8004f14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd f904 	bl	8002124 <nunavutChooseMin>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004f24:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8004f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f28:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fe fa26 	bl	8003384 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 8004f3e:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da02      	bge.n	8004f4c <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 8004f46:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004f4a:	e189      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f52:	4413      	add	r3, r2
 8004f54:	667b      	str	r3, [r7, #100]	; 0x64
 8004f56:	e175      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d123      	bne.n	8004faa <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f64:	08db      	lsrs	r3, r3, #3
 8004f66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd f8db 	bl	8002124 <nunavutChooseMin>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004f76:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 8004f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f7a:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f84:	4619      	mov	r1, r3
 8004f86:	f7fe f91f 	bl	80031c8 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 8004f90:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	da02      	bge.n	8004f9e <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 8004f98:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004f9c:	e160      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fa4:	4413      	add	r3, r2
 8004fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa8:	e14c      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004fb0:	2b07      	cmp	r3, #7
 8004fb2:	d125      	bne.n	8005000 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fd f8b2 	bl	8002124 <nunavutChooseMin>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004fc8:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8004fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fcc:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fe fb92 	bl	8003700 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 8004fe2:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da04      	bge.n	8004ff4 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 8004fea:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004fee:	e137      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
 8004ff0:	080176a0 	.word	0x080176a0
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ffa:	4413      	add	r3, r2
 8004ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffe:	e121      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005006:	2b08      	cmp	r3, #8
 8005008:	d123      	bne.n	8005052 <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800500a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005010:	4618      	mov	r0, r3
 8005012:	f7fd f887 	bl	8002124 <nunavutChooseMin>
 8005016:	4602      	mov	r2, r0
 8005018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 800501e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8005020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005022:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	4413      	add	r3, r2
 8005028:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800502c:	4619      	mov	r1, r3
 800502e:	f7fe fdf9 	bl	8003c24 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 8005038:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800503c:	2b00      	cmp	r3, #0
 800503e:	da02      	bge.n	8005046 <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 8005040:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8005044:	e10c      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800504c:	4413      	add	r3, r2
 800504e:	667b      	str	r3, [r7, #100]	; 0x64
 8005050:	e0f8      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005058:	2b09      	cmp	r3, #9
 800505a:	d123      	bne.n	80050a4 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800505c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505e:	08db      	lsrs	r3, r3, #3
 8005060:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd f85e 	bl	8002124 <nunavutChooseMin>
 8005068:	4602      	mov	r2, r0
 800506a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8005070:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 8005072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005074:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4413      	add	r3, r2
 800507a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800507e:	4619      	mov	r1, r3
 8005080:	f7fe fcf2 	bl	8003a68 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 800508a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800508e:	2b00      	cmp	r3, #0
 8005090:	da02      	bge.n	8005098 <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 8005092:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8005096:	e0e3      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800509e:	4413      	add	r3, r2
 80050a0:	667b      	str	r3, [r7, #100]	; 0x64
 80050a2:	e0cf      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050aa:	2b0a      	cmp	r3, #10
 80050ac:	d123      	bne.n	80050f6 <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80050ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd f835 	bl	8002124 <nunavutChooseMin>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80050c2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 80050c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c6:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4413      	add	r3, r2
 80050cc:	f107 0220 	add.w	r2, r7, #32
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fe fbeb 	bl	80038ac <uavcan_primitive_array_Natural16_1_0_deserialize_>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 80050dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	da02      	bge.n	80050ea <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 80050e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050e8:	e0ba      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050f0:	4413      	add	r3, r2
 80050f2:	667b      	str	r3, [r7, #100]	; 0x64
 80050f4:	e0a6      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050fc:	2b0b      	cmp	r3, #11
 80050fe:	d123      	bne.n	8005148 <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005106:	4618      	mov	r0, r3
 8005108:	f7fd f80c 	bl	8002124 <nunavutChooseMin>
 800510c:	4602      	mov	r2, r0
 800510e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005114:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 8005116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005118:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	f107 021c 	add.w	r2, r7, #28
 8005122:	4619      	mov	r1, r3
 8005124:	f7fe fe5e 	bl	8003de4 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 800512e:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8005132:	2b00      	cmp	r3, #0
 8005134:	da02      	bge.n	800513c <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 8005136:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800513a:	e091      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005142:	4413      	add	r3, r2
 8005144:	667b      	str	r3, [r7, #100]	; 0x64
 8005146:	e07d      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d123      	bne.n	800519a <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005154:	08db      	lsrs	r3, r3, #3
 8005156:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005158:	4618      	mov	r0, r3
 800515a:	f7fc ffe3 	bl	8002124 <nunavutChooseMin>
 800515e:	4602      	mov	r2, r0
 8005160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 8005166:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 8005168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516a:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	4413      	add	r3, r2
 8005170:	f107 0218 	add.w	r2, r7, #24
 8005174:	4619      	mov	r1, r3
 8005176:	f7ff f905 	bl	8004384 <uavcan_primitive_array_Real64_1_0_deserialize_>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 8005180:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8005184:	2b00      	cmp	r3, #0
 8005186:	da02      	bge.n	800518e <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 8005188:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 800518c:	e068      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005194:	4413      	add	r3, r2
 8005196:	667b      	str	r3, [r7, #100]	; 0x64
 8005198:	e054      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051a0:	2b0d      	cmp	r3, #13
 80051a2:	d123      	bne.n	80051ec <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80051a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a6:	08db      	lsrs	r3, r3, #3
 80051a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc ffba 	bl	8002124 <nunavutChooseMin>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80051b8:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 80051ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051bc:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	f107 0214 	add.w	r2, r7, #20
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fe fffe 	bl	80041c8 <uavcan_primitive_array_Real32_1_0_deserialize_>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 80051d2:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da02      	bge.n	80051e0 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 80051da:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80051de:	e03f      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051e6:	4413      	add	r3, r2
 80051e8:	667b      	str	r3, [r7, #100]	; 0x64
 80051ea:	e02b      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051f2:	2b0e      	cmp	r3, #14
 80051f4:	d123      	bne.n	800523e <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80051f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fc ff91 	bl	8002124 <nunavutChooseMin>
 8005202:	4602      	mov	r2, r0
 8005204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 800520a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 800520c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520e:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4413      	add	r3, r2
 8005214:	f107 0210 	add.w	r2, r7, #16
 8005218:	4619      	mov	r1, r3
 800521a:	f7fe feed 	bl	8003ff8 <uavcan_primitive_array_Real16_1_0_deserialize_>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 8005224:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005228:	2b00      	cmp	r3, #0
 800522a:	da02      	bge.n	8005232 <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 800522c:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005230:	e016      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005238:	4413      	add	r3, r2
 800523a:	667b      	str	r3, [r7, #100]	; 0x64
 800523c:	e002      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 800523e:	f06f 030a 	mvn.w	r3, #10
 8005242:	e00d      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005246:	3307      	adds	r3, #7
 8005248:	f023 0307 	bic.w	r3, r3, #7
 800524c:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800524e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005250:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005252:	f7fc ff67 	bl	8002124 <nunavutChooseMin>
 8005256:	4603      	mov	r3, r0
 8005258:	08da      	lsrs	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3768      	adds	r7, #104	; 0x68
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af04      	add	r7, sp, #16
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005286:	f06f 0301 	mvn.w	r3, #1
 800528a:	e043      	b.n	8005314 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	2b37      	cmp	r3, #55	; 0x37
 8005298:	d802      	bhi.n	80052a0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800529a:	f06f 0302 	mvn.w	r3, #2
 800529e:	e039      	b.n	8005314 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	08db      	lsrs	r3, r3, #3
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	4413      	add	r3, r2
 80052ac:	68f9      	ldr	r1, [r7, #12]
 80052ae:	2207      	movs	r2, #7
 80052b0:	4618      	mov	r0, r3
 80052b2:	f00e f964 	bl	801357e <memmove>
        offset_bits += 56U;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3338      	adds	r3, #56	; 0x38
 80052ba:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d021      	beq.n	800530a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f1c3 0308 	rsb	r3, r3, #8
 80052d4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	9302      	str	r3, [sp, #8]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9cd 2300 	strd	r2, r3, [sp]
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	68b8      	ldr	r0, [r7, #8]
 80052ec:	f7fd f82a 	bl	8002344 <nunavutSetUxx>
 80052f0:	4603      	mov	r3, r0
 80052f2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80052f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da02      	bge.n	8005302 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 80052fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005300:	e008      	b.n	8005314 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005342:	f06f 0301 	mvn.w	r3, #1
 8005346:	e065      	b.n	8005414 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800534e:	4b33      	ldr	r3, [pc, #204]	; (800541c <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8005350:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f7fc fedb 	bl	8002124 <nunavutChooseMin>
 800536e:	4602      	mov	r2, r0
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005376:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	4413      	add	r3, r2
 8005380:	f107 0214 	add.w	r2, r7, #20
 8005384:	4619      	mov	r1, r3
 8005386:	f7fd fd6d 	bl	8002e64 <uavcan_register_Name_1_0_deserialize_>
 800538a:	4603      	mov	r3, r0
 800538c:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 800538e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da02      	bge.n	800539c <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 8005396:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800539a:	e03b      	b.n	8005414 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3307      	adds	r3, #7
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	08db      	lsrs	r3, r3, #3
 80053b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc feb4 	bl	8002124 <nunavutChooseMin>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	f107 0210 	add.w	r2, r7, #16
 80053d6:	4619      	mov	r1, r3
 80053d8:	f7ff fc90 	bl	8004cfc <uavcan_register_Value_1_0_deserialize_>
 80053dc:	4603      	mov	r3, r0
 80053de:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 80053e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da02      	bge.n	80053ee <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 80053e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80053ec:	e012      	b.n	8005414 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	3307      	adds	r3, #7
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005402:	6a39      	ldr	r1, [r7, #32]
 8005404:	69f8      	ldr	r0, [r7, #28]
 8005406:	f7fc fe8d 	bl	8002124 <nunavutChooseMin>
 800540a:	4603      	mov	r3, r0
 800540c:	08da      	lsrs	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3728      	adds	r7, #40	; 0x28
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	080176a0 	.word	0x080176a0

08005420 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	; 0x38
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800543e:	f06f 0301 	mvn.w	r3, #1
 8005442:	e0f0      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	f640 0257 	movw	r2, #2135	; 0x857
 8005452:	4293      	cmp	r3, r2
 8005454:	d802      	bhi.n	800545c <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005456:	f06f 0302 	mvn.w	r3, #2
 800545a:	e0e4      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8005460:	2307      	movs	r3, #7
 8005462:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005464:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	f107 0214 	add.w	r2, r7, #20
 8005472:	4619      	mov	r1, r3
 8005474:	f7ff fef8 	bl	8005268 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8005478:	4603      	mov	r3, r0
 800547a:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 800547c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005480:	2b00      	cmp	r3, #0
 8005482:	da02      	bge.n	800548a <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 8005484:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005488:	e0cd      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	4413      	add	r3, r2
 8005492:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	7a1b      	ldrb	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 800549c:	2101      	movs	r1, #1
 800549e:	e000      	b.n	80054a2 <uavcan_register_Access_Response_1_0_serialize_+0x82>
 80054a0:	2100      	movs	r1, #0
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	08db      	lsrs	r3, r3, #3
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4413      	add	r3, r2
 80054aa:	460a      	mov	r2, r1
 80054ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	3301      	adds	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	7a5b      	ldrb	r3, [r3, #9]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d013      	beq.n	80054e4 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	08db      	lsrs	r3, r3, #3
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4413      	add	r3, r2
 80054c4:	7819      	ldrb	r1, [r3, #0]
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2201      	movs	r2, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	68b8      	ldr	r0, [r7, #8]
 80054da:	4403      	add	r3, r0
 80054dc:	430a      	orrs	r2, r1
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e014      	b.n	800550e <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	08db      	lsrs	r3, r3, #3
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	4413      	add	r3, r2
 80054ec:	7819      	ldrb	r1, [r3, #0]
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	2201      	movs	r2, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	08db      	lsrs	r3, r3, #3
 8005504:	68b8      	ldr	r0, [r7, #8]
 8005506:	4403      	add	r3, r0
 8005508:	400a      	ands	r2, r1
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	3301      	adds	r3, #1
 8005512:	627b      	str	r3, [r7, #36]	; 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005514:	2306      	movs	r3, #6
 8005516:	9302      	str	r3, [sp, #8]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9cd 2300 	strd	r2, r3, [sp]
 8005524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005526:	6a39      	ldr	r1, [r7, #32]
 8005528:	68b8      	ldr	r0, [r7, #8]
 800552a:	f7fc ff0b 	bl	8002344 <nunavutSetUxx>
 800552e:	4603      	mov	r3, r0
 8005530:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8005532:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005536:	2b00      	cmp	r3, #0
 8005538:	da02      	bge.n	8005540 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 800553a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800553e:	e072      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	3306      	adds	r3, #6
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	2b00      	cmp	r3, #0
 800554e:	d021      	beq.n	8005594 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f1c3 0308 	rsb	r3, r3, #8
 800555e:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005560:	7f7b      	ldrb	r3, [r7, #29]
 8005562:	9302      	str	r3, [sp, #8]
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	e9cd 2300 	strd	r2, r3, [sp]
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	6a39      	ldr	r1, [r7, #32]
 8005574:	68b8      	ldr	r0, [r7, #8]
 8005576:	f7fc fee5 	bl	8002344 <nunavutSetUxx>
 800557a:	4603      	mov	r3, r0
 800557c:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 800557e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da02      	bge.n	800558c <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8005586:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800558a:	e04c      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 800558c:	7f7b      	ldrb	r3, [r7, #29]
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	4413      	add	r3, r2
 8005592:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005594:	f240 1303 	movw	r3, #259	; 0x103
 8005598:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4413      	add	r3, r2
 80055a8:	f107 0210 	add.w	r2, r7, #16
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7ff f945 	bl	800483c <uavcan_register_Value_1_0_serialize_>
 80055b2:	4603      	mov	r3, r0
 80055b4:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 80055b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da02      	bge.n	80055c4 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 80055be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055c2:	e030      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ca:	4413      	add	r3, r2
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d021      	beq.n	800561c <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f1c3 0308 	rsb	r3, r3, #8
 80055e6:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 80055e8:	7ebb      	ldrb	r3, [r7, #26]
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9cd 2300 	strd	r2, r3, [sp]
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	6a39      	ldr	r1, [r7, #32]
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f7fc fea1 	bl	8002344 <nunavutSetUxx>
 8005602:	4603      	mov	r3, r0
 8005604:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8005606:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800560a:	2b00      	cmp	r3, #0
 800560c:	da02      	bge.n	8005614 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 800560e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005612:	e008      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005614:	7ebb      	ldrb	r3, [r7, #26]
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	4413      	add	r3, r2
 800561a:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	08da      	lsrs	r2, r3, #3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3728      	adds	r7, #40	; 0x28
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b08c      	sub	sp, #48	; 0x30
 8005632:	af04      	add	r7, sp, #16
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <uavcan_node_Version_1_0_serialize_+0x1e>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <uavcan_node_Version_1_0_serialize_+0x1e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800564c:	f06f 0301 	mvn.w	r3, #1
 8005650:	e04b      	b.n	80056ea <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d802      	bhi.n	8005666 <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005660:	f06f 0302 	mvn.w	r3, #2
 8005664:	e041      	b.n	80056ea <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4413      	add	r3, r2
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	7812      	ldrb	r2, [r2, #0]
 8005676:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	3308      	adds	r3, #8
 800567c:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4413      	add	r3, r2
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	7852      	ldrb	r2, [r2, #1]
 800568a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3308      	adds	r3, #8
 8005690:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	2b00      	cmp	r3, #0
 800569a:	d021      	beq.n	80056e0 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f1c3 0308 	rsb	r3, r3, #8
 80056aa:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	9302      	str	r3, [sp, #8]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9cd 2300 	strd	r2, r3, [sp]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	69b9      	ldr	r1, [r7, #24]
 80056c0:	68b8      	ldr	r0, [r7, #8]
 80056c2:	f7fc fe3f 	bl	8002344 <nunavutSetUxx>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80056ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da02      	bge.n	80056d8 <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 80056d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80056d6:	e008      	b.n	80056ea <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	08da      	lsrs	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800571a:	f06f 0301 	mvn.w	r3, #1
 800571e:	e008      	b.n	8005732 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005726:	4b06      	ldr	r3, [pc, #24]	; (8005740 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005728:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	080176a0 	.word	0x080176a0

08005744 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af04      	add	r7, sp, #16
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005762:	f06f 0301 	mvn.w	r3, #1
 8005766:	e16b      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	f640 12c7 	movw	r2, #2503	; 0x9c7
 8005776:	4293      	cmp	r3, r2
 8005778:	d802      	bhi.n	8005780 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800577a:	f06f 0302 	mvn.w	r3, #2
 800577e:	e15f      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8005784:	2302      	movs	r3, #2
 8005786:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005788:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4413      	add	r3, r2
 8005792:	f107 0218 	add.w	r2, r7, #24
 8005796:	4619      	mov	r1, r3
 8005798:	f7ff ff49 	bl	800562e <uavcan_node_Version_1_0_serialize_>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 80057a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da02      	bge.n	80057b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 80057aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057ae:	e147      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b6:	4413      	add	r3, r2
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d025      	beq.n	8005810 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f1c3 0308 	rsb	r3, r3, #8
 80057d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80057d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057da:	9302      	str	r3, [sp, #8]
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9cd 2300 	strd	r2, r3, [sp]
 80057e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ec:	68b8      	ldr	r0, [r7, #8]
 80057ee:	f7fc fda9 	bl	8002344 <nunavutSetUxx>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 80057f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da02      	bge.n	8005806 <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 8005800:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005804:	e11c      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 8005806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800580a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580c:	4413      	add	r3, r2
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8005810:	2302      	movs	r3, #2
 8005812:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4413      	add	r3, r2
 8005820:	f107 0214 	add.w	r2, r7, #20
 8005824:	4619      	mov	r1, r3
 8005826:	f7ff ff02 	bl	800562e <uavcan_node_Version_1_0_serialize_>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 8005830:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	da02      	bge.n	800583e <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 8005838:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800583c:	e100      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005844:	4413      	add	r3, r2
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d025      	beq.n	800589e <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f1c3 0308 	rsb	r3, r3, #8
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8005864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005868:	9302      	str	r3, [sp, #8]
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9cd 2300 	strd	r2, r3, [sp]
 8005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800587a:	68b8      	ldr	r0, [r7, #8]
 800587c:	f7fc fd62 	bl	8002344 <nunavutSetUxx>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 8005886:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800588a:	2b00      	cmp	r3, #0
 800588c:	da02      	bge.n	8005894 <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 800588e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005892:	e0d5      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 8005894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589a:	4413      	add	r3, r2
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 800589e:	2302      	movs	r3, #2
 80058a0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	f107 0210 	add.w	r2, r7, #16
 80058b2:	4619      	mov	r1, r3
 80058b4:	f7ff febb 	bl	800562e <uavcan_node_Version_1_0_serialize_>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 80058be:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da02      	bge.n	80058cc <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 80058c6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80058ca:	e0b9      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d2:	4413      	add	r3, r2
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	08db      	lsrs	r3, r3, #3
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	18d0      	adds	r0, r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3308      	adds	r3, #8
 80058e2:	2208      	movs	r2, #8
 80058e4:	4619      	mov	r1, r3
 80058e6:	f00d fe4a 	bl	801357e <memmove>
        offset_bits += 64U;
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	3340      	adds	r3, #64	; 0x40
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3310      	adds	r3, #16
 80058f4:	2200      	movs	r2, #0
 80058f6:	9200      	str	r2, [sp, #0]
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058fc:	68b8      	ldr	r0, [r7, #8]
 80058fe:	f7fc fc3d 	bl	800217c <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	3380      	adds	r3, #128	; 0x80
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	2b32      	cmp	r3, #50	; 0x32
 800590e:	d902      	bls.n	8005916 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005910:	f06f 0309 	mvn.w	r3, #9
 8005914:	e094      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	08db      	lsrs	r3, r3, #3
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	b2ca      	uxtb	r2, r1
 8005924:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	3308      	adds	r3, #8
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	00da      	lsls	r2, r3, #3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3320      	adds	r3, #32
 8005936:	2100      	movs	r1, #0
 8005938:	9100      	str	r1, [sp, #0]
 800593a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800593c:	68b8      	ldr	r0, [r7, #8]
 800593e:	f7fc fc1d 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594a:	4413      	add	r3, r2
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005952:	2b01      	cmp	r3, #1
 8005954:	d902      	bls.n	800595c <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005956:	f06f 0309 	mvn.w	r3, #9
 800595a:	e071      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	08db      	lsrs	r3, r3, #3
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4413      	add	r3, r2
 8005968:	b2ca      	uxtb	r2, r1
 800596a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	3308      	adds	r3, #8
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005976:	019a      	lsls	r2, r3, #6
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3358      	adds	r3, #88	; 0x58
 800597c:	2100      	movs	r1, #0
 800597e:	9100      	str	r1, [sp, #0]
 8005980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f7fc fbfa 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005990:	4413      	add	r3, r2
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800599a:	2bde      	cmp	r3, #222	; 0xde
 800599c:	d902      	bls.n	80059a4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800599e:	f06f 0309 	mvn.w	r3, #9
 80059a2:	e04d      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	b2ca      	uxtb	r2, r1
 80059b4:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	3308      	adds	r3, #8
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80059c2:	00da      	lsls	r2, r3, #3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3368      	adds	r3, #104	; 0x68
 80059c8:	2100      	movs	r1, #0
 80059ca:	9100      	str	r1, [sp, #0]
 80059cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ce:	68b8      	ldr	r0, [r7, #8]
 80059d0:	f7fc fbd4 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059de:	4413      	add	r3, r2
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d024      	beq.n	8005a36 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f1c3 0308 	rsb	r3, r3, #8
 80059fa:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80059fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8005a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a14:	68b8      	ldr	r0, [r7, #8]
 8005a16:	f7fc fc95 	bl	8002344 <nunavutSetUxx>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8005a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da02      	bge.n	8005a2c <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 8005a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a2a:	e009      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 8005a2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a32:	4413      	add	r3, r2
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	08da      	lsrs	r2, r3, #3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3730      	adds	r7, #48	; 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 f9b3 	bl	8006dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
      { }
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	f7fc f9a7 	bl	8001dd6 <Error_Handler>
 8005a88:	bf00      	nop
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <micros_64>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	f003 fe80 	bl	8009794 <HAL_GetTick>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	461c      	mov	r4, r3
 8005aa2:	4615      	mov	r5, r2
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	bdb0      	pop	{r4, r5, r7, pc}

08005aae <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f001 f9ea 	bl	8006ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff ffdf 	bl	8005aae <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff ff9f 	bl	8005a48 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8005b1e:	687c      	ldr	r4, [r7, #4]
 8005b20:	f107 0308 	add.w	r3, r7, #8
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff ffd7 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005b2c:	f107 0308 	add.w	r3, r7, #8
 8005b30:	f641 5255 	movw	r2, #7509	; 0x1d55
 8005b34:	4619      	mov	r1, r3
 8005b36:	4620      	mov	r0, r4
 8005b38:	f001 f9cb 	bl	8006ed2 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ffda 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005b46:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd90      	pop	{r4, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	08017728 	.word	0x08017728

08005b5c <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8005b7e:	687c      	ldr	r4, [r7, #4]
 8005b80:	f107 0308 	add.w	r3, r7, #8
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ffa7 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005b8c:	f107 0308 	add.w	r3, r7, #8
 8005b90:	f240 4262 	movw	r2, #1122	; 0x462
 8005b94:	4619      	mov	r1, r3
 8005b96:	4620      	mov	r0, r4
 8005b98:	f001 f9b9 	bl	8006f0e <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005b9c:	f107 0308 	add.w	r3, r7, #8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff ffaa 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005ba6:	4a04      	ldr	r2, [pc, #16]	; (8005bb8 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd90      	pop	{r4, r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08017708 	.word	0x08017708

08005bbc <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005bc8:	2104      	movs	r1, #4
 8005bca:	4803      	ldr	r0, [pc, #12]	; (8005bd8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x1c>)
 8005bcc:	f004 ffc8 	bl	800ab60 <HAL_GPIO_TogglePin>
    }
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	48000c00 	.word	0x48000c00

08005bdc <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8005be6:	687c      	ldr	r4, [r7, #4]
 8005be8:	f107 0308 	add.w	r3, r7, #8
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ff73 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005bf4:	f107 0108 	add.w	r1, r7, #8
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f001 f9b4 	bl	8006f6c <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff ff76 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005c0e:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	080176e8 	.word	0x080176e8

08005c24 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 8005c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c28:	b0e7      	sub	sp, #412	; 0x19c
 8005c2a:	af06      	add	r7, sp, #24
 8005c2c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005c34:	6018      	str	r0, [r3, #0]
 8005c36:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c3a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005c3e:	6019      	str	r1, [r3, #0]
 8005c40:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c44:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c48:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 8005c4a:	466b      	mov	r3, sp
 8005c4c:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 8005c4e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005c56:	4618      	mov	r0, r3
 8005c58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2100      	movs	r1, #0
 8005c60:	f00d fca7 	bl	80135b2 <memset>
 8005c64:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c68:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c74:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005c78:	2201      	movs	r2, #1
 8005c7a:	709a      	strb	r2, [r3, #2]
 8005c7c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c80:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005c84:	2201      	movs	r2, #1
 8005c86:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 8005c88:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c8c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    node_info_response.software_image_crc.count = 0;
 8005c96:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	661a      	str	r2, [r3, #96]	; 0x60
    size_t name_len = 8;
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    char joint_name[name_len];
 8005ca8:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8005cac:	460b      	mov	r3, r1
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4688      	mov	r8, r1
 8005cb8:	4699      	mov	r9, r3
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cce:	2300      	movs	r3, #0
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	00eb      	lsls	r3, r5, #3
 8005cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ce2:	00e2      	lsls	r2, r4, #3
 8005ce4:	1dcb      	adds	r3, r1, #7
 8005ce6:	08db      	lsrs	r3, r3, #3
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	ebad 0d03 	sub.w	sp, sp, r3
 8005cee:	ab06      	add	r3, sp, #24
 8005cf0:	3300      	adds	r3, #0
 8005cf2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	4939      	ldr	r1, [pc, #228]	; (8005de0 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 8005cfa:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8005cfe:	f00d fbcb 	bl	8013498 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 8005d02:	f107 0320 	add.w	r3, r7, #32
 8005d06:	3320      	adds	r3, #32
 8005d08:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005d0c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005d10:	4618      	mov	r0, r3
 8005d12:	f00d fd34 	bl	801377e <memcpy>
    node_info_response.name.count = name_len;
 8005d16:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005d1e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005d22:	655a      	str	r2, [r3, #84]	; 0x54
    uint32_t word0 = 1;
 8005d24:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 8005d30:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d34:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005d38:	2202      	movs	r2, #2
 8005d3a:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 8005d3c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005d44:	2203      	movs	r2, #3
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005d50:	681a      	ldr	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 8005d52:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005d5a:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 8005d5c:	f107 0320 	add.w	r3, r7, #32
 8005d60:	3310      	adds	r3, #16
 8005d62:	3304      	adds	r3, #4
 8005d64:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8005d68:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 8005d70:	f107 0320 	add.w	r3, r7, #32
 8005d74:	3310      	adds	r3, #16
 8005d76:	3308      	adds	r3, #8
 8005d78:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8005d7c:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 8005d84:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d88:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 8005d90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f916 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005da4:	4604      	mov	r4, r0
 8005da6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005daa:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8005dae:	f107 0020 	add.w	r0, r7, #32
 8005db2:	2304      	movs	r3, #4
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	4a0b      	ldr	r2, [pc, #44]	; (8005de4 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dc0:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	680b      	ldr	r3, [r1, #0]
 8005dc8:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f001 f90b 	bl	8006fe8 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 8005dd2:	46b5      	mov	sp, r6
}
 8005dd4:	bf00      	nop
 8005dd6:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005de0:	08017698 	.word	0x08017698
 8005de4:	000f4240 	.word	0x000f4240
 8005de8:	200004ac 	.word	0x200004ac

08005dec <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 8005dec:	b590      	push	{r4, r7, lr}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8005df6:	687c      	ldr	r4, [r7, #4]
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff fe6b 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005e04:	f107 0108 	add.w	r1, r7, #8
 8005e08:	2302      	movs	r3, #2
 8005e0a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f001 f934 	bl	800707c <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fe6e 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005e1e:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd90      	pop	{r4, r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	080176c8 	.word	0x080176c8

08005e34 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	f2ad 5d7c 	subw	sp, sp, #1404	; 0x57c
 8005e3a:	af06      	add	r7, sp, #24
 8005e3c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005e40:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8005e44:	6018      	str	r0, [r3, #0]
 8005e46:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005e4a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005e4e:	6019      	str	r1, [r3, #0]
 8005e50:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005e54:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8005e58:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 8005e5a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005e5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005e62:	4618      	mov	r0, r3
 8005e64:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005e68:	461a      	mov	r2, r3
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f00d fba1 	bl	80135b2 <memset>

    register_access_response.timestamp.microsecond = micros_64();
 8005e70:	f7ff fe0c 	bl	8005a8c <micros_64>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8005e7c:	f5a1 710c 	sub.w	r1, r1, #560	; 0x230
 8005e80:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 8005e84:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005e88:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f44f 7304 	mov.w	r3, #528	; 0x210
 8005e92:	461a      	mov	r2, r3
 8005e94:	2100      	movs	r1, #0
 8005e96:	f00d fb8c 	bl	80135b2 <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8005ea6:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 8005eb0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005eb4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2204      	movs	r2, #4
 8005ebc:	49c7      	ldr	r1, [pc, #796]	; (80061dc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a8>)
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f00d fb4d 	bl	801355e <memcmp>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d15c      	bne.n	8005f84 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 8005eca:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ece:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d113      	bne.n	8005f04 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005edc:	2104      	movs	r1, #4
 8005ede:	48c0      	ldr	r0, [pc, #768]	; (80061e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 8005ee0:	f004 fe3e 	bl	800ab60 <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 8005ee4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ee8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8005ef2:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8005ef6:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 8005efa:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8005efe:	4618      	mov	r0, r3
 8005f00:	f003 f8a2 	bl	8009048 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 8005f04:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f08:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005f10:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f14:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f18:	2201      	movs	r2, #1
 8005f1a:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 8005f1c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f20:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8005f24:	2204      	movs	r2, #4
 8005f26:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 8005f2a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f2e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005f32:	4618      	mov	r0, r3
 8005f34:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	f00d fb39 	bl	80135b2 <memset>
        result.value.elements[0] = tv; //PZDC!!!
 8005f40:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8005f4c:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 8005f50:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8005f54:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f58:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer64 = result;
 8005f62:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f66:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8005f6a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f6e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005f72:	4610      	mov	r0, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f00d fbff 	bl	801377e <memcpy>
 8005f80:	f000 bc87 	b.w	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 8005f84:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005f88:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	4994      	ldr	r1, [pc, #592]	; (80061e4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b0>)
 8005f92:	4618      	mov	r0, r3
 8005f94:	f00d fae3 	bl	801355e <memcmp>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d157      	bne.n	800604e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x21a>
        if (register_access_request.value._tag_ == 9) {
 8005f9e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005fa2:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8005fac:	2b09      	cmp	r3, #9
 8005fae:	d10b      	bne.n	8005fc8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x194>
            //MOVE
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005fb0:	2104      	movs	r1, #4
 8005fb2:	488b      	ldr	r0, [pc, #556]	; (80061e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 8005fb4:	f004 fdd4 	bl	800ab60 <HAL_GPIO_TogglePin>
        	tv = 0;
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8005fc4:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8005fc8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005fcc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005fd4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005fd8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005fdc:	2201      	movs	r2, #1
 8005fde:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8005fe0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005fe4:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8005fe8:	2209      	movs	r2, #9
 8005fea:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8005fee:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ff2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2100      	movs	r1, #0
 8006000:	f00d fad7 	bl	80135b2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006004:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006008:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006012:	461a      	mov	r2, r3
 8006014:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006018:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800601c:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 800601e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006022:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006026:	2201      	movs	r2, #1
 8006028:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 800602c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006030:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006034:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006038:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006044:	461a      	mov	r2, r3
 8006046:	f00d fb9a 	bl	801377e <memcpy>
 800604a:	f000 bc22 	b.w	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 800604e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006052:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2203      	movs	r2, #3
 800605a:	4963      	ldr	r1, [pc, #396]	; (80061e8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b4>)
 800605c:	4618      	mov	r0, r3
 800605e:	f00d fa7e 	bl	801355e <memcmp>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d156      	bne.n	8006116 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2e2>

        if (register_access_request.value._tag_ == 9) {
 8006068:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800606c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006076:	2b09      	cmp	r3, #9
 8006078:	d111      	bne.n	800609e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x26a>
            tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 800607a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800607e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006088:	4618      	mov	r0, r3
 800608a:	f002 ffa9 	bl	8008fe0 <tmc5160_position>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800608e:	2104      	movs	r1, #4
 8006090:	4853      	ldr	r0, [pc, #332]	; (80061e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 8006092:	f004 fd65 	bl	800ab60 <HAL_GPIO_TogglePin>
        	js_pos_v = tmc5160_position_read();
 8006096:	f003 f8ef 	bl	8009278 <tmc5160_position_read>
 800609a:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
        }
        register_access_response.persistent = true;
 800609e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80060a2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80060a6:	2201      	movs	r2, #1
 80060a8:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80060aa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80060ae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80060b2:	2201      	movs	r2, #1
 80060b4:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 80060b6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80060ba:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80060be:	2209      	movs	r2, #9
 80060c0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 80060c4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80060c8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80060cc:	4618      	mov	r0, r3
 80060ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80060d2:	461a      	mov	r2, r3
 80060d4:	2100      	movs	r1, #0
 80060d6:	f00d fa6c 	bl	80135b2 <memset>
        result.value.elements[0] = js_pos_v;
 80060da:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80060de:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80060e2:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80060e6:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 80060e8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80060ec:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80060f0:	2201      	movs	r2, #1
 80060f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 80060f6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80060fa:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80060fe:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006102:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800610e:	461a      	mov	r2, r3
 8006110:	f00d fb35 	bl	801377e <memcpy>
 8006114:	e3bd      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 8006116:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800611a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2207      	movs	r2, #7
 8006122:	4932      	ldr	r1, [pc, #200]	; (80061ec <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b8>)
 8006124:	4618      	mov	r0, r3
 8006126:	f00d fa1a 	bl	801355e <memcmp>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d15f      	bne.n	80061f0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3bc>
        if (register_access_request.value._tag_ == 9) {
 8006130:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006134:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800613e:	2b09      	cmp	r3, #9
 8006140:	d10f      	bne.n	8006162 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x32e>
            //RETURN CURENT POS
        	js_pos_v = tmc5160_position_read();
 8006142:	f003 f899 	bl	8009278 <tmc5160_position_read>
 8006146:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800614a:	2104      	movs	r1, #4
 800614c:	4824      	ldr	r0, [pc, #144]	; (80061e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 800614e:	f004 fd07 	bl	800ab60 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800615e:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006162:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006166:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800616a:	2201      	movs	r2, #1
 800616c:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800616e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006172:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006176:	2201      	movs	r2, #1
 8006178:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 800617a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800617e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006182:	2209      	movs	r2, #9
 8006184:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8006188:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800618c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006190:	4618      	mov	r0, r3
 8006192:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006196:	461a      	mov	r2, r3
 8006198:	2100      	movs	r1, #0
 800619a:	f00d fa0a 	bl	80135b2 <memset>
        result.value.elements[0] = js_pos_v;
 800619e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80061a2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80061a6:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80061aa:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 80061ac:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80061b0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80061b4:	2201      	movs	r2, #1
 80061b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 80061ba:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80061be:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80061c2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80061c6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061d2:	461a      	mov	r2, r3
 80061d4:	f00d fad3 	bl	801377e <memcpy>
 80061d8:	e35b      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
 80061da:	bf00      	nop
 80061dc:	20000000 	.word	0x20000000
 80061e0:	48000c00 	.word	0x48000c00
 80061e4:	20000008 	.word	0x20000008
 80061e8:	20000010 	.word	0x20000010
 80061ec:	20000018 	.word	0x20000018
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 80061f0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80061f4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2203      	movs	r2, #3
 80061fc:	49c8      	ldr	r1, [pc, #800]	; (8006520 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6ec>)
 80061fe:	4618      	mov	r0, r3
 8006200:	f00d f9ad 	bl	801355e <memcmp>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d15f      	bne.n	80062ca <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x496>
        if (register_access_request.value._tag_ == 7) {
 800620a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800620e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006218:	2b07      	cmp	r3, #7
 800621a:	d115      	bne.n	8006248 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x414>
            tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 800621c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006220:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f993 3108 	ldrsb.w	r3, [r3, #264]	; 0x108
 800622a:	4618      	mov	r0, r3
 800622c:	f003 f944 	bl	80094b8 <tmc5160_set_motor_direction>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006230:	2104      	movs	r1, #4
 8006232:	48bc      	ldr	r0, [pc, #752]	; (8006524 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006234:	f004 fc94 	bl	800ab60 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006244:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006248:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800624c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006250:	2201      	movs	r2, #1
 8006252:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006254:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006258:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800625c:	2201      	movs	r2, #1
 800625e:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006260:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006264:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006268:	220b      	movs	r2, #11
 800626a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 800626e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006272:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006276:	4618      	mov	r0, r3
 8006278:	f44f 7382 	mov.w	r3, #260	; 0x104
 800627c:	461a      	mov	r2, r3
 800627e:	2100      	movs	r1, #0
 8006280:	f00d f997 	bl	80135b2 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8006284:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006288:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f993 2108 	ldrsb.w	r2, [r3, #264]	; 0x108
 8006292:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006296:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800629a:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 800629c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80062a0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80062a4:	2201      	movs	r2, #1
 80062a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer8 = result;
 80062aa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80062ae:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80062b2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80062b6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062c2:	461a      	mov	r2, r3
 80062c4:	f00d fa5b 	bl	801377e <memcpy>
 80062c8:	e2e3      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 80062ca:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80062ce:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2205      	movs	r2, #5
 80062d6:	4994      	ldr	r1, [pc, #592]	; (8006528 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f4>)
 80062d8:	4618      	mov	r0, r3
 80062da:	f00d f940 	bl	801355e <memcmp>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d155      	bne.n	8006390 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x55c>
        if (register_access_request.value._tag_ == 11) {
 80062e4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80062e8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80062f2:	2b0b      	cmp	r3, #11
 80062f4:	d10b      	bne.n	800630e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4da>
            //ENABLE CALIB
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80062f6:	2104      	movs	r1, #4
 80062f8:	488a      	ldr	r0, [pc, #552]	; (8006524 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 80062fa:	f004 fc31 	bl	800ab60 <HAL_GPIO_TogglePin>
        	tv = 0;
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800630a:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 800630e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006312:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006316:	2201      	movs	r2, #1
 8006318:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800631a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800631e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006322:	2201      	movs	r2, #1
 8006324:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006326:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800632a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800632e:	220b      	movs	r2, #11
 8006330:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006334:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006338:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800633c:	4618      	mov	r0, r3
 800633e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006342:	461a      	mov	r2, r3
 8006344:	2100      	movs	r1, #0
 8006346:	f00d f934 	bl	80135b2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 800634a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800634e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006358:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800635c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006360:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006362:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006366:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800636a:	2201      	movs	r2, #1
 800636c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006370:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006374:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006378:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800637c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006388:	461a      	mov	r2, r3
 800638a:	f00d f9f8 	bl	801377e <memcpy>
 800638e:	e280      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 8006390:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006394:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2209      	movs	r2, #9
 800639c:	4963      	ldr	r1, [pc, #396]	; (800652c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f8>)
 800639e:	4618      	mov	r0, r3
 80063a0:	f00d f8dd 	bl	801355e <memcmp>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d156      	bne.n	8006458 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x624>
		if (register_access_request.value._tag_ == 9) {
 80063aa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063ae:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80063b8:	2b09      	cmp	r3, #9
 80063ba:	d10b      	bne.n	80063d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x5a0>
			//SET UPPER LIMIT FOR JOINT
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80063bc:	2104      	movs	r1, #4
 80063be:	4859      	ldr	r0, [pc, #356]	; (8006524 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 80063c0:	f004 fbce 	bl	800ab60 <HAL_GPIO_TogglePin>
			tv = 0;
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80063d0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 80063d4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063d8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80063dc:	2201      	movs	r2, #1
 80063de:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 80063e0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063e4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80063e8:	2201      	movs	r2, #1
 80063ea:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 80063ec:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063f0:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80063f4:	2209      	movs	r2, #9
 80063f6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 80063fa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063fe:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006402:	4618      	mov	r0, r3
 8006404:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006408:	461a      	mov	r2, r3
 800640a:	2100      	movs	r1, #0
 800640c:	f00d f8d1 	bl	80135b2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006410:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006414:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800641e:	461a      	mov	r2, r3
 8006420:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006424:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006428:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 800642a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800642e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006432:	2201      	movs	r2, #1
 8006434:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006438:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800643c:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006440:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006444:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006450:	461a      	mov	r2, r3
 8006452:	f00d f994 	bl	801377e <memcpy>
 8006456:	e21c      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 8006458:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800645c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2209      	movs	r2, #9
 8006464:	4932      	ldr	r1, [pc, #200]	; (8006530 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6fc>)
 8006466:	4618      	mov	r0, r3
 8006468:	f00d f879 	bl	801355e <memcmp>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d160      	bne.n	8006534 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x700>
		if (register_access_request.value._tag_ == 9) {
 8006472:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006476:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006480:	2b09      	cmp	r3, #9
 8006482:	d10b      	bne.n	800649c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x668>
			//SET UPPER LIMIT FOR JOINT
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006484:	2104      	movs	r1, #4
 8006486:	4827      	ldr	r0, [pc, #156]	; (8006524 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006488:	f004 fb6a 	bl	800ab60 <HAL_GPIO_TogglePin>
			tv = 0;
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006498:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 800649c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064a0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80064a4:	2201      	movs	r2, #1
 80064a6:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 80064a8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064ac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80064b0:	2201      	movs	r2, #1
 80064b2:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 80064b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064b8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80064bc:	2209      	movs	r2, #9
 80064be:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 80064c2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064c6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80064ca:	4618      	mov	r0, r3
 80064cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80064d0:	461a      	mov	r2, r3
 80064d2:	2100      	movs	r1, #0
 80064d4:	f00d f86d 	bl	80135b2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 80064d8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064dc:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80064e6:	461a      	mov	r2, r3
 80064e8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064ec:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80064f0:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 80064f2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064f6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80064fa:	2201      	movs	r2, #1
 80064fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006500:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006504:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006508:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800650c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006510:	4610      	mov	r0, r2
 8006512:	4619      	mov	r1, r3
 8006514:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006518:	461a      	mov	r2, r3
 800651a:	f00d f930 	bl	801377e <memcpy>
 800651e:	e1b8      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
 8006520:	20000014 	.word	0x20000014
 8006524:	48000c00 	.word	0x48000c00
 8006528:	20000020 	.word	0x20000020
 800652c:	20000028 	.word	0x20000028
 8006530:	20000034 	.word	0x20000034
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 8006534:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006538:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2208      	movs	r2, #8
 8006540:	49c7      	ldr	r1, [pc, #796]	; (8006860 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa2c>)
 8006542:	4618      	mov	r0, r3
 8006544:	f00d f80b 	bl	801355e <memcmp>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d15b      	bne.n	8006606 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7d2>
		if (register_access_request.value._tag_ == 12) {
 800654e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006552:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800655c:	2b0c      	cmp	r3, #12
 800655e:	d10b      	bne.n	8006578 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x744>
			//SET ZERO VALUE FOR JOINT
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006560:	2104      	movs	r1, #4
 8006562:	48c0      	ldr	r0, [pc, #768]	; (8006864 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 8006564:	f004 fafc 	bl	800ab60 <HAL_GPIO_TogglePin>
			tv = 0;
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006574:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 8006578:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800657c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006580:	2201      	movs	r2, #1
 8006582:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006584:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006588:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800658c:	2201      	movs	r2, #1
 800658e:	721a      	strb	r2, [r3, #8]
		value._tag_ = 12;
 8006590:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006594:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006598:	220c      	movs	r2, #12
 800659a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 800659e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065a2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065a6:	4618      	mov	r0, r3
 80065a8:	f44f 7384 	mov.w	r3, #264	; 0x108
 80065ac:	461a      	mov	r2, r3
 80065ae:	2100      	movs	r1, #0
 80065b0:	f00c ffff 	bl	80135b2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 80065b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065b8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7f9 ffc6 	bl	8000554 <__aeabi_ui2d>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80065d0:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 80065d4:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 80065d8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065dc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065e0:	2201      	movs	r2, #1
 80065e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.real64 = result;
 80065e6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065ea:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80065ee:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065f2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065f6:	4610      	mov	r0, r2
 80065f8:	4619      	mov	r1, r3
 80065fa:	f44f 7384 	mov.w	r3, #264	; 0x108
 80065fe:	461a      	mov	r2, r3
 8006600:	f00d f8bd 	bl	801377e <memcpy>
 8006604:	e145      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_zero_reg_name, SET_ENC_ZERO_REG_NAME_LEN) == 0) {
 8006606:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800660a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	220c      	movs	r2, #12
 8006612:	4995      	ldr	r1, [pc, #596]	; (8006868 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa34>)
 8006614:	4618      	mov	r0, r3
 8006616:	f00c ffa2 	bl	801355e <memcmp>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d155      	bne.n	80066cc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x898>
        if (register_access_request.value._tag_ == 11) {
 8006620:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006624:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800662e:	2b0b      	cmp	r3, #11
 8006630:	d10b      	bne.n	800664a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x816>
            //SET TYPE OF MOTOR FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006632:	2104      	movs	r1, #4
 8006634:	488b      	ldr	r0, [pc, #556]	; (8006864 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 8006636:	f004 fa93 	bl	800ab60 <HAL_GPIO_TogglePin>
        	tv = 0;
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	f04f 0300 	mov.w	r3, #0
 8006642:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006646:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 800664a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800664e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006652:	2201      	movs	r2, #1
 8006654:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006656:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800665a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800665e:	2201      	movs	r2, #1
 8006660:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006662:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006666:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800666a:	220b      	movs	r2, #11
 800666c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006670:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006674:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006678:	4618      	mov	r0, r3
 800667a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800667e:	461a      	mov	r2, r3
 8006680:	2100      	movs	r1, #0
 8006682:	f00c ff96 	bl	80135b2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006686:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800668a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006694:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006698:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800669c:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 800669e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066a2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 80066ac:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066b0:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80066b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066b8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80066bc:	4610      	mov	r0, r2
 80066be:	4619      	mov	r1, r3
 80066c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80066c4:	461a      	mov	r2, r3
 80066c6:	f00d f85a 	bl	801377e <memcpy>
 80066ca:	e0e2      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 80066cc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066d0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2204      	movs	r2, #4
 80066d8:	4964      	ldr	r1, [pc, #400]	; (800686c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa38>)
 80066da:	4618      	mov	r0, r3
 80066dc:	f00c ff3f 	bl	801355e <memcmp>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d159      	bne.n	800679a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x966>
        if (register_access_request.value._tag_ == 1) {
 80066e6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066ea:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d10b      	bne.n	8006710 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x8dc>
            //SET NAME FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80066f8:	2104      	movs	r1, #4
 80066fa:	485a      	ldr	r0, [pc, #360]	; (8006864 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 80066fc:	f004 fa30 	bl	800ab60 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800670c:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006710:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006714:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006718:	2201      	movs	r2, #1
 800671a:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800671c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006720:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006724:	2201      	movs	r2, #1
 8006726:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 8006728:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800672c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_String_1_0 result = {};
 8006736:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800673a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800673e:	4618      	mov	r0, r3
 8006740:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006744:	461a      	mov	r2, r3
 8006746:	2100      	movs	r1, #0
 8006748:	f00c ff33 	bl	80135b2 <memset>

        char mystring[4] = "xyz";
 800674c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006750:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006754:	4a46      	ldr	r2, [pc, #280]	; (8006870 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa3c>)
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800675c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006760:	681a      	ldr	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 8006762:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006766:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800676a:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 800676c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006770:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006774:	2203      	movs	r2, #3
 8006776:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value._string = result;
 800677a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800677e:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006782:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006786:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
 800678e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006792:	461a      	mov	r2, r3
 8006794:	f00c fff3 	bl	801377e <memcpy>
 8006798:	e07b      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 800679a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800679e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2204      	movs	r2, #4
 80067a6:	4933      	ldr	r1, [pc, #204]	; (8006874 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa40>)
 80067a8:	4618      	mov	r0, r3
 80067aa:	f00c fed8 	bl	801355e <memcmp>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d161      	bne.n	8006878 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>
        if (register_access_request.value._tag_ == 11) {
 80067b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067b8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80067c2:	2b0b      	cmp	r3, #11
 80067c4:	d10b      	bne.n	80067de <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x9aa>
            //SET TYPE OF MOTOR FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80067c6:	2104      	movs	r1, #4
 80067c8:	4826      	ldr	r0, [pc, #152]	; (8006864 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 80067ca:	f004 f9c9 	bl	800ab60 <HAL_GPIO_TogglePin>
        	tv = 0;
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80067da:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 80067de:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067e6:	2201      	movs	r2, #1
 80067e8:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80067ea:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067ee:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067f2:	2201      	movs	r2, #1
 80067f4:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 80067f6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067fa:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80067fe:	220b      	movs	r2, #11
 8006800:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006804:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006808:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800680c:	4618      	mov	r0, r3
 800680e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006812:	461a      	mov	r2, r3
 8006814:	2100      	movs	r1, #0
 8006816:	f00c fecc 	bl	80135b2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 800681a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800681e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006828:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800682c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006830:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006832:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006836:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800683a:	2201      	movs	r2, #1
 800683c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006840:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006844:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006848:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800684c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006858:	461a      	mov	r2, r3
 800685a:	f00c ff90 	bl	801377e <memcpy>
 800685e:	e018      	b.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5e>
 8006860:	20000050 	.word	0x20000050
 8006864:	48000c00 	.word	0x48000c00
 8006868:	20000040 	.word	0x20000040
 800686c:	2000005c 	.word	0x2000005c
 8006870:	007a7978 	.word	0x007a7978
 8006874:	20000064 	.word	0x20000064
    }
    else {
        value._tag_ = 0;
 8006878:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800687c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 8006886:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800688a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 8006892:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006896:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800689a:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800689e:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80068a2:	3310      	adds	r3, #16
 80068a4:	4611      	mov	r1, r2
 80068a6:	f44f 7204 	mov.w	r2, #528	; 0x210
 80068aa:	4618      	mov	r0, r3
 80068ac:	f00c ff67 	bl	801377e <memcpy>

    interface->send_response<RegisterAccessResponse>(
 80068b0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068b4:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb86 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80068c4:	4604      	mov	r4, r0
 80068c6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068ca:	f2a3 515c 	subw	r1, r3, #1372	; 0x55c
 80068ce:	f507 704c 	add.w	r0, r7, #816	; 0x330
 80068d2:	2304      	movs	r3, #4
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xac8>)
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	680b      	ldr	r3, [r1, #0]
 80068e8:	4a05      	ldr	r2, [pc, #20]	; (8006900 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xacc>)
 80068ea:	4601      	mov	r1, r0
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fbf7 	bl	80070e0 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 80068f2:	bf00      	nop
 80068f4:	f207 5764 	addw	r7, r7, #1380	; 0x564
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd90      	pop	{r4, r7, pc}
 80068fc:	000f4240 	.word	0x000f4240
 8006900:	200005ec 	.word	0x200005ec

08006904 <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 800690a:	463b      	mov	r3, r7
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8006912:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <heartbeat+0x4c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 8006918:	480e      	ldr	r0, [pc, #56]	; (8006954 <heartbeat+0x50>)
 800691a:	f000 fb59 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800691e:	4639      	mov	r1, r7
 8006920:	2304      	movs	r3, #4
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	4a0c      	ldr	r2, [pc, #48]	; (8006958 <heartbeat+0x54>)
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <heartbeat+0x58>)
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	f641 5355 	movw	r3, #7509	; 0x1d55
 8006936:	4a0a      	ldr	r2, [pc, #40]	; (8006960 <heartbeat+0x5c>)
 8006938:	f000 fc1b 	bl	8007172 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <heartbeat+0x4c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <heartbeat+0x4c>)
 8006944:	6013      	str	r3, [r2, #0]
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000700 	.word	0x20000700
 8006954:	20000478 	.word	0x20000478
 8006958:	000f4240 	.word	0x000f4240
 800695c:	200006ff 	.word	0x200006ff
 8006960:	200006f8 	.word	0x200006f8

08006964 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8006964:	b5b0      	push	{r4, r5, r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af02      	add	r7, sp, #8
 800696a:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 800696c:	4b41      	ldr	r3, [pc, #260]	; (8006a74 <setup_cyphal+0x110>)
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	2102      	movs	r1, #2
 8006978:	483f      	ldr	r0, [pc, #252]	; (8006a78 <setup_cyphal+0x114>)
 800697a:	f000 fc19 	bl	80071b0 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 800697e:	4602      	mov	r2, r0
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fc3b 	bl	8007202 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 800698c:	f107 0308 	add.w	r3, r7, #8
 8006990:	4619      	mov	r1, r3
 8006992:	483a      	ldr	r0, [pc, #232]	; (8006a7c <setup_cyphal+0x118>)
 8006994:	f000 fc44 	bl	8007220 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8006998:	f107 0308 	add.w	r3, r7, #8
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff f8ac 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 80069a2:	f107 0310 	add.w	r3, r7, #16
 80069a6:	4935      	ldr	r1, [pc, #212]	; (8006a7c <setup_cyphal+0x118>)
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff f896 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80069ae:	f107 0510 	add.w	r5, r7, #16
 80069b2:	f44f 700e 	mov.w	r0, #568	; 0x238
 80069b6:	f00b fd12 	bl	80123de <_Znwj>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461c      	mov	r4, r3
 80069be:	4629      	mov	r1, r5
 80069c0:	4620      	mov	r0, r4
 80069c2:	f7ff f8a7 	bl	8005b14 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80069c6:	4b2e      	ldr	r3, [pc, #184]	; (8006a80 <setup_cyphal+0x11c>)
 80069c8:	601c      	str	r4, [r3, #0]
 80069ca:	f107 0310 	add.w	r3, r7, #16
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff f893 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 80069d4:	f107 0318 	add.w	r3, r7, #24
 80069d8:	4928      	ldr	r1, [pc, #160]	; (8006a7c <setup_cyphal+0x118>)
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff f87d 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80069e0:	f107 0518 	add.w	r5, r7, #24
 80069e4:	f44f 700e 	mov.w	r0, #568	; 0x238
 80069e8:	f00b fcf9 	bl	80123de <_Znwj>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461c      	mov	r4, r3
 80069f0:	4629      	mov	r1, r5
 80069f2:	4620      	mov	r0, r4
 80069f4:	f7ff f8be 	bl	8005b74 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <setup_cyphal+0x120>)
 80069fa:	601c      	str	r4, [r3, #0]
 80069fc:	f107 0318 	add.w	r3, r7, #24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff f87a 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 8006a06:	f107 0320 	add.w	r3, r7, #32
 8006a0a:	491c      	ldr	r1, [pc, #112]	; (8006a7c <setup_cyphal+0x118>)
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff f864 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006a12:	f107 0520 	add.w	r5, r7, #32
 8006a16:	f44f 700e 	mov.w	r0, #568	; 0x238
 8006a1a:	f00b fce0 	bl	80123de <_Znwj>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	461c      	mov	r4, r3
 8006a22:	4629      	mov	r1, r5
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff f9e1 	bl	8005dec <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006a2a:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <setup_cyphal+0x124>)
 8006a2c:	601c      	str	r4, [r3, #0]
 8006a2e:	f107 0320 	add.w	r3, r7, #32
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff f861 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 8006a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a3c:	490f      	ldr	r1, [pc, #60]	; (8006a7c <setup_cyphal+0x118>)
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff f84b 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006a44:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8006a48:	f44f 700e 	mov.w	r0, #568	; 0x238
 8006a4c:	f00b fcc7 	bl	80123de <_Znwj>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461c      	mov	r4, r3
 8006a54:	4629      	mov	r1, r5
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff f8c0 	bl	8005bdc <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <setup_cyphal+0x128>)
 8006a5e:	601c      	str	r4, [r3, #0]
 8006a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff f848 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8006a6a:	bf00      	nop
 8006a6c:	3730      	adds	r7, #48	; 0x30
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bdb0      	pop	{r4, r5, r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000480 	.word	0x20000480
 8006a78:	20000420 	.word	0x20000420
 8006a7c:	20000478 	.word	0x20000478
 8006a80:	200004a0 	.word	0x200004a0
 8006a84:	200004a4 	.word	0x200004a4
 8006a88:	200005e8 	.word	0x200005e8
 8006a8c:	200004a8 	.word	0x200004a8

08006a90 <cyphal_loop>:

void cyphal_loop() {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
    interface->loop();
 8006a94:	4804      	ldr	r0, [pc, #16]	; (8006aa8 <cyphal_loop+0x18>)
 8006a96:	f000 fa9b 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f008 fedd 	bl	800f85c <_ZN15CyphalInterface4loopEv>
}
 8006aa2:	bf00      	nop
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000478 	.word	0x20000478

08006aac <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	; 0x30
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8006ab4:	f107 0320 	add.w	r3, r7, #32
 8006ab8:	2102      	movs	r1, #2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f00b fc40 	bl	8012340 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 8006ac0:	f107 0318 	add.w	r3, r7, #24
 8006ac4:	f240 4165 	movw	r1, #1125	; 0x465
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f00b fc19 	bl	8012300 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8006ace:	f107 0310 	add.w	r3, r7, #16
 8006ad2:	f641 5155 	movw	r1, #7509	; 0x1d55
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f00b fc12 	bl	8012300 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8006adc:	f107 0308 	add.w	r3, r7, #8
 8006ae0:	f107 0218 	add.w	r2, r7, #24
 8006ae4:	f107 0120 	add.w	r1, r7, #32
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f00b fc4b 	bl	8012384 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006aee:	4b45      	ldr	r3, [pc, #276]	; (8006c04 <cyphal_can_starter+0x158>)
 8006af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006af4:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8006af6:	4b43      	ldr	r3, [pc, #268]	; (8006c04 <cyphal_can_starter+0x158>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006afc:	4b41      	ldr	r3, [pc, #260]	; (8006c04 <cyphal_can_starter+0x158>)
 8006afe:	2202      	movs	r2, #2
 8006b00:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006b02:	4b40      	ldr	r3, [pc, #256]	; (8006c04 <cyphal_can_starter+0x158>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	4a3e      	ldr	r2, [pc, #248]	; (8006c04 <cyphal_can_starter+0x158>)
 8006b0c:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	4a3c      	ldr	r2, [pc, #240]	; (8006c04 <cyphal_can_starter+0x158>)
 8006b12:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006b14:	4b3c      	ldr	r3, [pc, #240]	; (8006c08 <cyphal_can_starter+0x15c>)
 8006b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b1a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8006b1c:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <cyphal_can_starter+0x15c>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006b22:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <cyphal_can_starter+0x15c>)
 8006b24:	2202      	movs	r2, #2
 8006b26:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006b28:	4b37      	ldr	r3, [pc, #220]	; (8006c08 <cyphal_can_starter+0x15c>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	4a35      	ldr	r2, [pc, #212]	; (8006c08 <cyphal_can_starter+0x15c>)
 8006b32:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	4a34      	ldr	r2, [pc, #208]	; (8006c08 <cyphal_can_starter+0x15c>)
 8006b38:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006b3a:	4b34      	ldr	r3, [pc, #208]	; (8006c0c <cyphal_can_starter+0x160>)
 8006b3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b40:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 8006b42:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <cyphal_can_starter+0x160>)
 8006b44:	2202      	movs	r2, #2
 8006b46:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006b48:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <cyphal_can_starter+0x160>)
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <cyphal_can_starter+0x160>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4a2d      	ldr	r2, [pc, #180]	; (8006c0c <cyphal_can_starter+0x160>)
 8006b58:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <cyphal_can_starter+0x160>)
 8006b5e:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 8006b60:	2302      	movs	r3, #2
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	2302      	movs	r3, #2
 8006b66:	2202      	movs	r2, #2
 8006b68:	2102      	movs	r1, #2
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f003 fb8c 	bl	800a288 <HAL_FDCAN_ConfigGlobalFilter>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bf14      	ite	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	2300      	moveq	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8006b80:	f7fb f929 	bl	8001dd6 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 8006b84:	491f      	ldr	r1, [pc, #124]	; (8006c04 <cyphal_can_starter+0x158>)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f003 fb24 	bl	800a1d4 <HAL_FDCAN_ConfigFilter>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8006b9c:	f7fb f91b 	bl	8001dd6 <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8006ba0:	491a      	ldr	r1, [pc, #104]	; (8006c0c <cyphal_can_starter+0x160>)
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f003 fb16 	bl	800a1d4 <HAL_FDCAN_ConfigFilter>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf14      	ite	ne
 8006bae:	2301      	movne	r3, #1
 8006bb0:	2300      	moveq	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <cyphal_can_starter+0x110>
	  Error_Handler();
 8006bb8:	f7fb f90d 	bl	8001dd6 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2105      	movs	r1, #5
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f003 fb92 	bl	800a2ea <HAL_FDCAN_ConfigTxDelayCompensation>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <cyphal_can_starter+0x12e>
	  Error_Handler();
 8006bd6:	f7fb f8fe 	bl	8001dd6 <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f003 fba7 	bl	800a32e <HAL_FDCAN_EnableTxDelayCompensation>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bf14      	ite	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	2300      	moveq	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <cyphal_can_starter+0x148>
	  Error_Handler();
 8006bf0:	f7fb f8f1 	bl	8001dd6 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f003 fbbb 	bl	800a370 <HAL_FDCAN_Start>
}
 8006bfa:	bf00      	nop
 8006bfc:	3728      	adds	r7, #40	; 0x28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000734 	.word	0x20000734
 8006c08:	20000704 	.word	0x20000704
 8006c0c:	2000071c 	.word	0x2000071c

08006c10 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
      { delete this; }
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3304      	adds	r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	bf00      	nop
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	6053      	str	r3, [r2, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	609a      	str	r2, [r3, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	461a      	mov	r2, r3
 8006c66:	2300      	movs	r3, #0
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	6053      	str	r3, [r2, #4]
 8006c6c:	6093      	str	r3, [r2, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff ffde 	bl	8006c32 <_ZNSt14_Function_baseC1Ev>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8006c7c:	6838      	ldr	r0, [r7, #0]
 8006c7e:	f000 fb03 	bl	8007288 <_ZNKSt8functionIFyvEEcvbEv>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	2202      	movs	r2, #2
 8006c92:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
	  }
      }
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	6053      	str	r3, [r2, #4]
 8006cc2:	6093      	str	r3, [r2, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff ffb3 	bl	8006c32 <_ZNSt14_Function_baseC1Ev>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8006cd2:	6838      	ldr	r0, [r7, #0]
 8006cd4:	f000 fae8 	bl	80072a8 <_ZNKSt8functionIFvvEEcvbEv>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	609a      	str	r2, [r3, #8]
      }
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fadb 	bl	80072c8 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
	return get();
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 faca 	bl	80072c8 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8006d34:	4603      	mov	r3, r0
      }
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fac7 	bl	80072e2 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff ffe6 	bl	8006d3e <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fabf 	bl	800730a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8006d8c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00c      	beq.n	8006db0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fac4 	bl	8007324 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 facd 	bl	800733e <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8006da4:	4603      	mov	r3, r0
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fad2 	bl	8007354 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
      }
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd90      	pop	{r4, r7, pc}

08006dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fb f81e 	bl	8001e16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	461a      	mov	r2, r3
 8006df2:	2300      	movs	r3, #0
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	6053      	str	r3, [r2, #4]
 8006df8:	6093      	str	r3, [r2, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff ff18 	bl	8006c32 <_ZNSt14_Function_baseC1Ev>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8006e08:	6838      	ldr	r0, [r7, #0]
 8006e0a:	f000 fab4 	bl	8007376 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8006e14:	687c      	ldr	r4, [r7, #4]
 8006e16:	6838      	ldr	r0, [r7, #0]
 8006e18:	f000 fabd 	bl	8007396 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 fac3 	bl	80073ac <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a04      	ldr	r2, [pc, #16]	; (8006e3c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8006e2a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8006e30:	609a      	str	r2, [r3, #8]
	    }
	}
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd90      	pop	{r4, r7, pc}
 8006e3c:	080073d1 	.word	0x080073d1
 8006e40:	080073f5 	.word	0x080073f5

08006e44 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8006e44:	b590      	push	{r4, r7, lr}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	461a      	mov	r2, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	6053      	str	r3, [r2, #4]
 8006e58:	6093      	str	r3, [r2, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fee8 	bl	8006c32 <_ZNSt14_Function_baseC1Ev>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8006e68:	6838      	ldr	r0, [r7, #0]
 8006e6a:	f000 fae2 	bl	8007432 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8006e74:	687c      	ldr	r4, [r7, #4]
 8006e76:	6838      	ldr	r0, [r7, #0]
 8006e78:	f000 faeb 	bl	8007452 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 faf1 	bl	8007468 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8006e8a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a04      	ldr	r2, [pc, #16]	; (8006ea0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8006e90:	609a      	str	r2, [r3, #8]
	}
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd90      	pop	{r4, r7, pc}
 8006e9c:	0800748d 	.word	0x0800748d
 8006ea0:	080074ab 	.word	0x080074ab

08006ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d004      	beq.n	8006ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fa ff98 	bl	8001df8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	4613      	mov	r3, r2
 8006ede:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8006ee0:	f107 0310 	add.w	r3, r7, #16
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fdf7 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006eec:	88fa      	ldrh	r2, [r7, #6]
 8006eee:	f107 0110 	add.w	r1, r7, #16
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 faf7 	bl	80074e8 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8006efa:	f107 0310 	add.w	r3, r7, #16
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fdfb 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fdd9 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	f107 0110 	add.w	r1, r7, #16
 8006f2e:	2300      	movs	r3, #0
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fb0b 	bl	800754c <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8006f36:	f107 0310 	add.w	r3, r7, #16
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fddd 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	08017748 	.word	0x08017748

08006f6c <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4611      	mov	r1, r2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	80fb      	strh	r3, [r7, #6]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff ffe1 	bl	8006f4c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006f8a:	4a10      	ldr	r2, [pc, #64]	; (8006fcc <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	797a      	ldrb	r2, [r7, #5]
 8006f94:	711a      	strb	r2, [r3, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	f44f 720a 	mov.w	r2, #552	; 0x228
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f00c fb06 	bl	80135b2 <memset>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fd93 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8006fb4:	797a      	ldrb	r2, [r7, #5]
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 faf8 	bl	80075b0 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	080176f8 	.word	0x080176f8

08006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	return _M_get();
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb07 	bl	80075ec <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8006fde:	4603      	mov	r3, r0
      }
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 8006fe8:	b5b0      	push	{r4, r5, r7, lr}
 8006fea:	b08c      	sub	sp, #48	; 0x30
 8006fec:	af04      	add	r7, sp, #16
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8006ff6:	f240 1339 	movw	r3, #313	; 0x139
 8006ffa:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8006ffc:	f107 031c 	add.w	r3, r7, #28
 8007000:	461a      	mov	r2, r3
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	68b8      	ldr	r0, [r7, #8]
 8007006:	f7fe fb9d 	bl	8005744 <uavcan_node_GetInfo_Response_1_0_serialize_>
 800700a:	4603      	mov	r3, r0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	09db      	lsrs	r3, r3, #7
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	3310      	adds	r3, #16
 800701c:	4618      	mov	r0, r3
 800701e:	f000 faf1 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007022:	f107 0314 	add.w	r3, r7, #20
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	809a      	strh	r2, [r3, #4]
 800702c:	2301      	movs	r3, #1
 800702e:	757b      	strb	r3, [r7, #21]
 8007030:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007034:	753b      	strb	r3, [r7, #20]
 8007036:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007038:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800703e:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007044:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 faf0 	bl	8007630 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007054:	1884      	adds	r4, r0, r2
 8007056:	eb41 0503 	adc.w	r5, r1, r3
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	9202      	str	r2, [sp, #8]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	f107 0314 	add.w	r3, r7, #20
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	4622      	mov	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f008 fb87 	bl	800f780 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 8007072:	bf00      	nop
 8007074:	3720      	adds	r7, #32
 8007076:	46bd      	mov	sp, r7
 8007078:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800707c <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4611      	mov	r1, r2
 8007088:	461a      	mov	r2, r3
 800708a:	460b      	mov	r3, r1
 800708c:	80fb      	strh	r3, [r7, #6]
 800708e:	4613      	mov	r3, r2
 8007090:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff ff59 	bl	8006f4c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800709a:	4a10      	ldr	r2, [pc, #64]	; (80070dc <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	797a      	ldrb	r2, [r7, #5]
 80070a4:	711a      	strb	r2, [r3, #4]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3308      	adds	r3, #8
 80070aa:	f44f 720a 	mov.w	r2, #552	; 0x228
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f00c fa7e 	bl	80135b2 <memset>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fd0b 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80070c4:	797a      	ldrb	r2, [r7, #5]
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	4619      	mov	r1, r3
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fac9 	bl	8007662 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	080176d8 	.word	0x080176d8

080070e0 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 80070e0:	b5b0      	push	{r4, r5, r7, lr}
 80070e2:	b08c      	sub	sp, #48	; 0x30
 80070e4:	af04      	add	r7, sp, #16
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80070ee:	f240 130b 	movw	r3, #267	; 0x10b
 80070f2:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80070f4:	f107 031c 	add.w	r3, r7, #28
 80070f8:	461a      	mov	r2, r3
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	68b8      	ldr	r0, [r7, #8]
 80070fe:	f7fe f98f 	bl	8005420 <uavcan_register_Access_Response_1_0_serialize_>
 8007102:	4603      	mov	r3, r0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	09db      	lsrs	r3, r3, #7
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	3310      	adds	r3, #16
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fa75 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800711a:	f107 0314 	add.w	r3, r7, #20
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	809a      	strh	r2, [r3, #4]
 8007124:	2301      	movs	r3, #1
 8007126:	757b      	strb	r3, [r7, #21]
 8007128:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800712c:	753b      	strb	r3, [r7, #20]
 800712e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007130:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007136:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800713c:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fa74 	bl	8007630 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007148:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800714c:	1884      	adds	r4, r0, r2
 800714e:	eb41 0503 	adc.w	r5, r1, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	9202      	str	r2, [sp, #8]
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	f107 0314 	add.w	r3, r7, #20
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	4622      	mov	r2, r4
 8007162:	462b      	mov	r3, r5
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f008 fb0b 	bl	800f780 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 800716a:	bf00      	nop
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bdb0      	pop	{r4, r5, r7, pc}

08007172 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8007172:	b580      	push	{r7, lr}
 8007174:	b08a      	sub	sp, #40	; 0x28
 8007176:	af06      	add	r7, sp, #24
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8007180:	8879      	ldrh	r1, [r7, #2]
 8007182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007186:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800718a:	23ff      	movs	r3, #255	; 0xff
 800718c:	9303      	str	r3, [sp, #12]
 800718e:	2300      	movs	r3, #0
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	460b      	mov	r3, r1
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fa7c 	bl	80076a0 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 80071a8:	bf00      	nop
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 80071b0:	b590      	push	{r4, r7, lr}
 80071b2:	b08b      	sub	sp, #44	; 0x2c
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	460b      	mov	r3, r1
 80071be:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 80071c0:	f107 030c 	add.w	r3, r7, #12
 80071c4:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 80071c6:	7afa      	ldrb	r2, [r7, #11]
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	69f8      	ldr	r0, [r7, #28]
 80071d2:	f000 faaf 	bl	8007734 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 80071d6:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	4619      	mov	r1, r3
 80071e2:	200c      	movs	r0, #12
 80071e4:	f7fa fdfc 	bl	8001de0 <_ZnwjPv>
 80071e8:	4604      	mov	r4, r0
 80071ea:	7af9      	ldrb	r1, [r7, #11]
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7fa ff27 	bl	8002044 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 80071f6:	613c      	str	r4, [r7, #16]

        return interface;
 80071f8:	693b      	ldr	r3, [r7, #16]
    }
 80071fa:	4618      	mov	r0, r3
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd90      	pop	{r4, r7, pc}

08007202 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fadd 	bl	80077d0 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800722a:	687c      	ldr	r4, [r7, #4]
 800722c:	6838      	ldr	r0, [r7, #0]
 800722e:	f000 fae7 	bl	8007800 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8007232:	4603      	mov	r3, r0
 8007234:	4619      	mov	r1, r3
 8007236:	4620      	mov	r0, r4
 8007238:	f000 faed 	bl	8007816 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800723c:	687b      	ldr	r3, [r7, #4]
      }
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}
	...

08007248 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
      { }
 8007250:	4a04      	ldr	r2, [pc, #16]	; (8007264 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	0801776c 	.word	0x0801776c

08007268 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
      { }
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff ffe9 	bl	8007248 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007276:	210c      	movs	r1, #12
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f00b f8ae 	bl	80123da <_ZdlPvj>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4618      	mov	r0, r3
 8007294:	f7fa fe18 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 8007298:	4603      	mov	r3, r0
 800729a:	f083 0301 	eor.w	r3, r3, #1
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fa fe08 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f083 0301 	eor.w	r3, r3, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fabe 	bl	8007854 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80072d8:	4603      	mov	r3, r0
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80072e2:	b590      	push	{r4, r7, lr}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fabe 	bl	8007870 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80072f4:	683c      	ldr	r4, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f807 	bl	800730a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 80072fc:	4603      	mov	r3, r0
 80072fe:	601c      	str	r4, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	bd90      	pop	{r4, r7, pc}

0800730a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fab8 	bl	800788a <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800731a:	4603      	mov	r3, r0
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fab8 	bl	80078a4 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8007334:	4603      	mov	r3, r0
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	3218      	adds	r2, #24
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	4790      	blx	r2
      }
 800736e:	bf00      	nop
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	4618      	mov	r0, r3
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80073ac:	b590      	push	{r4, r7, lr}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80073b6:	6838      	ldr	r0, [r7, #0]
 80073b8:	f7ff ffed 	bl	8007396 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80073bc:	4603      	mov	r3, r0
 80073be:	4622      	mov	r2, r4
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa7b 	bl	80078be <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd90      	pop	{r4, r7, pc}

080073d0 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa88 	bl	80078ee <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80073de:	4603      	mov	r3, r0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fa94 	bl	800790e <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
      }
 80073ea:	4610      	mov	r0, r2
 80073ec:	4619      	mov	r1, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d109      	bne.n	800741c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007408:	68b8      	ldr	r0, [r7, #8]
 800740a:	f000 fa70 	bl	80078ee <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 800740e:	4604      	mov	r4, r0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fa8f 	bl	8007934 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007416:	4603      	mov	r3, r0
 8007418:	601c      	str	r4, [r3, #0]
	    break;
 800741a:	e005      	b.n	8007428 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	461a      	mov	r2, r3
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fa92 	bl	800794c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007428:	2300      	movs	r3, #0
      }
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	bd90      	pop	{r4, r7, pc}

08007432 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007472:	6838      	ldr	r0, [r7, #0]
 8007474:	f7ff ffed 	bl	8007452 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007478:	4603      	mov	r3, r0
 800747a:	4622      	mov	r2, r4
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa9e 	bl	80079c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	bd90      	pop	{r4, r7, pc}

0800748c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 faab 	bl	80079f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800749a:	4603      	mov	r3, r0
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fab7 	bl	8007a10 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 80074a2:	bf00      	nop
      }
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80074aa:	b590      	push	{r4, r7, lr}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	4613      	mov	r3, r2
 80074b6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d109      	bne.n	80074d2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	f000 fa96 	bl	80079f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80074c4:	4604      	mov	r4, r0
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fab2 	bl	8007a30 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 80074cc:	4603      	mov	r3, r0
 80074ce:	601c      	str	r4, [r3, #0]
	    break;
 80074d0:	e005      	b.n	80074de <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fab5 	bl	8007a48 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80074de:	2300      	movs	r3, #0
      }
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd90      	pop	{r4, r7, pc}

080074e8 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	460b      	mov	r3, r1
 80074f8:	80fb      	strh	r3, [r7, #6]
 80074fa:	4613      	mov	r3, r2
 80074fc:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fd23 	bl	8006f4c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007506:	4a10      	ldr	r2, [pc, #64]	; (8007548 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	797a      	ldrb	r2, [r7, #5]
 8007510:	711a      	strb	r2, [r3, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3308      	adds	r3, #8
 8007516:	f44f 720a 	mov.w	r2, #552	; 0x228
 800751a:	2100      	movs	r1, #0
 800751c:	4618      	mov	r0, r3
 800751e:	f00c f848 	bl	80135b2 <memset>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fad5 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007530:	797a      	ldrb	r2, [r7, #5]
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	4619      	mov	r1, r3
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fac0 	bl	8007abc <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	08017738 	.word	0x08017738

0800754c <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	460b      	mov	r3, r1
 800755c:	80fb      	strh	r3, [r7, #6]
 800755e:	4613      	mov	r3, r2
 8007560:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fcf1 	bl	8006f4c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800756a:	4a10      	ldr	r2, [pc, #64]	; (80075ac <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	797a      	ldrb	r2, [r7, #5]
 8007574:	711a      	strb	r2, [r3, #4]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3308      	adds	r3, #8
 800757a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f00c f816 	bl	80135b2 <memset>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe faa3 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007594:	797a      	ldrb	r2, [r7, #5]
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	4619      	mov	r1, r3
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 faac 	bl	8007af8 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	08017718 	.word	0x08017718

080075b0 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	807b      	strh	r3, [r7, #2]
 80075bc:	4613      	mov	r3, r2
 80075be:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fcff 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3308      	adds	r3, #8
 80075d6:	787a      	ldrb	r2, [r7, #1]
 80075d8:	8879      	ldrh	r1, [r7, #2]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	2200      	movs	r2, #0
 80075e0:	f008 f908 	bl	800f7f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa9d 	bl	8007b34 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80075fa:	4603      	mov	r3, r0
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4618      	mov	r0, r3
 8007610:	f7fa fc5a 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 800761a:	f00a fef1 	bl	8012400 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	bf00      	nop
      }
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4618      	mov	r0, r3
 800763c:	f7fa fc44 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8007646:	f00a fedb 	bl	8012400 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
      }
 8007658:	4610      	mov	r0, r2
 800765a:	4619      	mov	r1, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af02      	add	r7, sp, #8
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	807b      	strh	r3, [r7, #2]
 800766e:	4613      	mov	r3, r2
 8007670:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff fca6 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3308      	adds	r3, #8
 8007688:	787a      	ldrb	r2, [r7, #1]
 800768a:	8879      	ldrh	r1, [r7, #2]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	4613      	mov	r3, r2
 8007690:	f240 2203 	movw	r2, #515	; 0x203
 8007694:	f008 f8ae 	bl	800f7f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 80076a0:	b5b0      	push	{r4, r5, r7, lr}
 80076a2:	b08c      	sub	sp, #48	; 0x30
 80076a4:	af04      	add	r7, sp, #16
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80076ae:	2307      	movs	r3, #7
 80076b0:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80076b2:	f107 031c 	add.w	r3, r7, #28
 80076b6:	461a      	mov	r2, r3
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	f7fb f8cc 	bl	8002858 <uavcan_node_Heartbeat_1_0_serialize_>
 80076c0:	4603      	mov	r3, r0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	09db      	lsrs	r3, r3, #7
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	3310      	adds	r3, #16
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff ff96 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80076d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80076dc:	753b      	strb	r3, [r7, #20]
 80076de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80076e2:	757b      	strb	r3, [r7, #21]
 80076e4:	887b      	ldrh	r3, [r7, #2]
 80076e6:	82fb      	strh	r3, [r7, #22]
 80076e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80076ec:	763b      	strb	r3, [r7, #24]
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff ff99 	bl	8007630 <_ZNKSt8functionIFyvEEclEv>
    push(
 80076fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007702:	1884      	adds	r4, r0, r2
 8007704:	eb41 0503 	adc.w	r5, r1, r3
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	9202      	str	r2, [sp, #8]
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f107 0314 	add.w	r3, r7, #20
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	4622      	mov	r2, r4
 8007718:	462b      	mov	r3, r5
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f008 f830 	bl	800f780 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	3301      	adds	r3, #1
 8007726:	b2da      	uxtb	r2, r3
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	701a      	strb	r2, [r3, #0]
}
 800772c:	bf00      	nop
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bdb0      	pop	{r4, r5, r7, pc}

08007734 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 8007734:	b590      	push	{r4, r7, lr}
 8007736:	b089      	sub	sp, #36	; 0x24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	4619      	mov	r1, r3
 800774e:	2008      	movs	r0, #8
 8007750:	f7fa fb46 	bl	8001de0 <_ZnwjPv>
 8007754:	4604      	mov	r4, r0
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	4413      	add	r3, r2
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	4618      	mov	r0, r3
 8007762:	f7f8 fef7 	bl	8000554 <__aeabi_ui2d>
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	4b18      	ldr	r3, [pc, #96]	; (80077cc <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 800776c:	f7f8 ff6c 	bl	8000648 <__aeabi_dmul>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4610      	mov	r0, r2
 8007776:	4619      	mov	r1, r3
 8007778:	f7f9 fa3e 	bl	8000bf8 <__aeabi_d2uiz>
 800777c:	4603      	mov	r3, r0
 800777e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007780:	4619      	mov	r1, r3
 8007782:	4620      	mov	r0, r4
 8007784:	f7fa fc94 	bl	80020b0 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8007788:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	3308      	adds	r3, #8
 800778e:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	4619      	mov	r1, r3
 8007794:	2044      	movs	r0, #68	; 0x44
 8007796:	f7fa fb23 	bl	8001de0 <_ZnwjPv>
 800779a:	4604      	mov	r4, r0
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7fa fc68 	bl	8002078 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 80077a8:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	79fa      	ldrb	r2, [r7, #7]
 80077ae:	69b9      	ldr	r1, [r7, #24]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 f9cb 	bl	8007b4c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	601a      	str	r2, [r3, #0]
        return ptr;
 80077c0:	693b      	ldr	r3, [r7, #16]
    }
 80077c2:	4618      	mov	r0, r3
 80077c4:	3724      	adds	r7, #36	; 0x24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd90      	pop	{r4, r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40040000 	.word	0x40040000

080077d0 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4622      	mov	r2, r4
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 f9f3 	bl	8007bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f9fe 	bl	8007bf2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd90      	pop	{r4, r7, pc}

08007800 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8007820:	6838      	ldr	r0, [r7, #0]
 8007822:	f000 f9f1 	bl	8007c08 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007826:	4602      	mov	r2, r0
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	4611      	mov	r1, r2
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f9f5 	bl	8007c1e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8007834:	f107 0308 	add.w	r3, r7, #8
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fa0d 	bl	8007c5a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8007840:	f107 0308 	add.w	r3, r7, #8
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe f8ff 	bl	8005a48 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800784a:	687b      	ldr	r3, [r7, #4]
      }
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fa12 	bl	8007c88 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8007864:	4603      	mov	r3, r0
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fa11 	bl	8007ca2 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fa14 	bl	8007cc2 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800789a:	4603      	mov	r3, r0
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fa13 	bl	8007cda <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80078b4:	4603      	mov	r3, r0
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80078be:	b590      	push	{r4, r7, lr}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80078ca:	68b8      	ldr	r0, [r7, #8]
 80078cc:	f7ff fd63 	bl	8007396 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80078d0:	4604      	mov	r4, r0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7fa facf 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80078d8:	4603      	mov	r3, r0
 80078da:	4619      	mov	r1, r3
 80078dc:	2004      	movs	r0, #4
 80078de:	f7fa fa7f 	bl	8001de0 <_ZnwjPv>
 80078e2:	4603      	mov	r3, r0
 80078e4:	601c      	str	r4, [r3, #0]
	  }
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd90      	pop	{r4, r7, pc}

080078ee <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9fb 	bl	8007cf2 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 80078fc:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fa03 	bl	8007d0a <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8007904:	4603      	mov	r3, r0
	}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800790e:	b590      	push	{r4, r7, lr}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa02 	bl	8007d20 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800791c:	4603      	mov	r3, r0
 800791e:	4619      	mov	r1, r3
 8007920:	4620      	mov	r0, r4
 8007922:	f000 fa08 	bl	8007d36 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bd90      	pop	{r4, r7, pc}

08007934 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fa fa9a 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8007942:	4603      	mov	r3, r0
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800794c:	b590      	push	{r4, r7, lr}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	2b03      	cmp	r3, #3
 800795e:	d82a      	bhi.n	80079b6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007979 	.word	0x08007979
 800796c:	08007987 	.word	0x08007987
 8007970:	0800799b 	.word	0x0800799b
 8007974:	080079ad 	.word	0x080079ad
	      __dest._M_access<const type_info*>() = nullptr;
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f9ee 	bl	8007d5a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800797e:	4603      	mov	r3, r0
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
	      break;
 8007984:	e017      	b.n	80079b6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007986:	68b8      	ldr	r0, [r7, #8]
 8007988:	f7ff ffb1 	bl	80078ee <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 800798c:	4604      	mov	r4, r0
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f7ff ffd0 	bl	8007934 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007994:	4603      	mov	r3, r0
 8007996:	601c      	str	r4, [r3, #0]
	      break;
 8007998:	e00d      	b.n	80079b6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800799a:	68b8      	ldr	r0, [r7, #8]
 800799c:	f7ff ffa7 	bl	80078ee <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80079a0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80079a2:	4619      	mov	r1, r3
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 f9e4 	bl	8007d72 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80079aa:	e004      	b.n	80079b6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80079ac:	4621      	mov	r1, r4
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f9f1 	bl	8007d96 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80079b4:	bf00      	nop
	  return false;
 80079b6:	2300      	movs	r3, #0
	}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd90      	pop	{r4, r7, pc}

080079c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80079cc:	68b8      	ldr	r0, [r7, #8]
 80079ce:	f7ff fd40 	bl	8007452 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80079d2:	4604      	mov	r4, r0
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7fa fa4e 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80079da:	4603      	mov	r3, r0
 80079dc:	4619      	mov	r1, r3
 80079de:	2004      	movs	r0, #4
 80079e0:	f7fa f9fe 	bl	8001de0 <_ZnwjPv>
 80079e4:	4603      	mov	r3, r0
 80079e6:	601c      	str	r4, [r3, #0]
	  }
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd90      	pop	{r4, r7, pc}

080079f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9d8 	bl	8007dae <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80079fe:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f9e0 	bl	8007dc6 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8007a06:	4603      	mov	r3, r0
	}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007a10:	b590      	push	{r4, r7, lr}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f9df 	bl	8007ddc <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4619      	mov	r1, r3
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f9e5 	bl	8007df2 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd90      	pop	{r4, r7, pc}

08007a30 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7fa fa1c 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d82a      	bhi.n	8007ab2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a83 	.word	0x08007a83
 8007a6c:	08007a97 	.word	0x08007a97
 8007a70:	08007aa9 	.word	0x08007aa9
	      __dest._M_access<const type_info*>() = nullptr;
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f970 	bl	8007d5a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
	      break;
 8007a80:	e017      	b.n	8007ab2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007a82:	68b8      	ldr	r0, [r7, #8]
 8007a84:	f7ff ffb4 	bl	80079f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff ffd0 	bl	8007a30 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007a90:	4603      	mov	r3, r0
 8007a92:	601c      	str	r4, [r3, #0]
	      break;
 8007a94:	e00d      	b.n	8007ab2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8007a96:	68b8      	ldr	r0, [r7, #8]
 8007a98:	f7ff ffaa 	bl	80079f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007a9c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f9b5 	bl	8007e10 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8007aa6:	e004      	b.n	8007ab2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f9c2 	bl	8007e34 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007ab0:	bf00      	nop
	  return false;
 8007ab2:	2300      	movs	r3, #0
	}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd90      	pop	{r4, r7, pc}

08007abc <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff fa79 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	787a      	ldrb	r2, [r7, #1]
 8007ae4:	8879      	ldrh	r1, [r7, #2]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	220c      	movs	r2, #12
 8007aec:	f007 fe82 	bl	800f7f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	807b      	strh	r3, [r7, #2]
 8007b04:	4613      	mov	r3, r2
 8007b06:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff fa5b 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	787a      	ldrb	r2, [r7, #1]
 8007b20:	8879      	ldrh	r1, [r7, #2]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	220c      	movs	r2, #12
 8007b28:	f007 fe64 	bl	800f7f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8007b4c:	b5b0      	push	{r4, r5, r7, lr}
 8007b4e:	b08e      	sub	sp, #56	; 0x38
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b54:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b56:	4613      	mov	r3, r2
 8007b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8007b5c:	481a      	ldr	r0, [pc, #104]	; (8007bc8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8007b5e:	f7ff f8d1 	bl	8006d04 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fd48 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8007b74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 f976 	bl	8007e6c <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8007b80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b84:	4619      	mov	r1, r3
 8007b86:	4810      	ldr	r0, [pc, #64]	; (8007bc8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8007b88:	f000 f9a1 	bl	8007ece <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8007b8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 f97a 	bl	8007e8a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 8007b96:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007b98:	463b      	mov	r3, r7
 8007b9a:	4a0c      	ldr	r2, [pc, #48]	; (8007bcc <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8007b9c:	490c      	ldr	r1, [pc, #48]	; (8007bd0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f00a f918 	bl	8011dd4 <canardInit>
 8007ba4:	3420      	adds	r4, #32
 8007ba6:	463d      	mov	r5, r7
 8007ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8007bbe:	bf00      	nop
 8007bc0:	3738      	adds	r7, #56	; 0x38
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000093c 	.word	0x2000093c
 8007bcc:	08001fbd 	.word	0x08001fbd
 8007bd0:	08001f79 	.word	0x08001f79

08007bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f9a4 	bl	8007f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
	{ }
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fd ff15 	bl	8005a64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	1d1a      	adds	r2, r3, #4
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f000 f98b 	bl	8007f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
      }
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f998 	bl	8007fa0 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 f970 	bl	8007f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f9a3 	bl	8007fde <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9a3 	bl	8007ff6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f9ab 	bl	800800e <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9ad 	bl	800802a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f9ae 	bl	8008044 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7fa f8c6 	bl	8001e8c <_ZNKSt9_Any_data9_M_accessEv>
 8007d00:	4603      	mov	r3, r0
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	7138      	strb	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007d40:	6838      	ldr	r0, [r7, #0]
 8007d42:	f7ff ffed 	bl	8007d20 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007d46:	4603      	mov	r3, r0
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4798      	blx	r3
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4610      	mov	r0, r2
 8007d52:	4619      	mov	r1, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fa f887 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007d72:	b590      	push	{r4, r7, lr}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007d7c:	6838      	ldr	r0, [r7, #0]
 8007d7e:	f000 f96d 	bl	800805c <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007d82:	4603      	mov	r3, r0
 8007d84:	4622      	mov	r2, r4
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f972 	bl	8008072 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd90      	pop	{r4, r7, pc}

08007d96 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f97f 	bl	80080a4 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fa f868 	bl	8001e8c <_ZNKSt9_Any_data9_M_accessEv>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	7138      	strb	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007dfc:	6838      	ldr	r0, [r7, #0]
 8007dfe:	f7ff ffed 	bl	8007ddc <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007e02:	4603      	mov	r3, r0
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4798      	blx	r3
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007e1a:	6838      	ldr	r0, [r7, #0]
 8007e1c:	f000 f94e 	bl	80080bc <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007e20:	4603      	mov	r3, r0
 8007e22:	4622      	mov	r2, r4
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f953 	bl	80080d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd90      	pop	{r4, r7, pc}

08007e34 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f960 	bl	8008104 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f95d 	bl	800811c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff ffe6 	bl	8007e4c <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8007e8a:	b590      	push	{r4, r7, lr}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 f955 	bl	8008144 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007e9a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00c      	beq.n	8007ebe <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f95a 	bl	800815e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8007eaa:	4604      	mov	r4, r0
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f963 	bl	8008178 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 f968 	bl	800818e <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
      }
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd90      	pop	{r4, r7, pc}

08007ece <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8007ed8:	6838      	ldr	r0, [r7, #0]
 8007eda:	f000 f97d 	bl	80081d8 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f964 	bl	80081b0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8007ee8:	6838      	ldr	r0, [r7, #0]
 8007eea:	f000 f938 	bl	800815e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 f98b 	bl	800820c <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	f107 030c 	add.w	r3, r7, #12
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f98f 	bl	8008222 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f974 	bl	80081f2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8007f0a:	687b      	ldr	r3, [r7, #4]
	}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe ff2b 	bl	8006d7c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8007f30:	b590      	push	{r4, r7, lr}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8007f40:	2010      	movs	r0, #16
 8007f42:	f00a fa4c 	bl	80123de <_Znwj>
 8007f46:	4603      	mov	r3, r0
 8007f48:	461c      	mov	r4, r3
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 f975 	bl	800823c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	601c      	str	r4, [r3, #0]
	}
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}

08007f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	601a      	str	r2, [r3, #0]
      }
 8007f7e:	bf00      	nop
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff ffed 	bl	8007f8a <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8007fb6:	6838      	ldr	r0, [r7, #0]
 8007fb8:	f7ff ffe7 	bl	8007f8a <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff ffde 	bl	8007f8a <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	601a      	str	r2, [r3, #0]
    }
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f93e 	bl	8008268 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8007fec:	4603      	mov	r3, r0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f93f 	bl	8008282 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4618      	mov	r0, r3
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f92f 	bl	8008298 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 800803a:	4603      	mov	r3, r0
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f92e 	bl	80082ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8008052:	4603      	mov	r3, r0
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008072:	b590      	push	{r4, r7, lr}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800807e:	68b8      	ldr	r0, [r7, #8]
 8008080:	f7ff ffec 	bl	800805c <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008084:	4603      	mov	r3, r0
 8008086:	681c      	ldr	r4, [r3, #0]
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7f9 fef4 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 800808e:	4603      	mov	r3, r0
 8008090:	4619      	mov	r1, r3
 8008092:	2004      	movs	r0, #4
 8008094:	f7f9 fea4 	bl	8001de0 <_ZnwjPv>
 8008098:	4603      	mov	r3, r0
 800809a:	601c      	str	r4, [r3, #0]
	  }
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd90      	pop	{r4, r7, pc}

080080a4 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7f9 fee2 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80080b2:	4603      	mov	r3, r0
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80080d2:	b590      	push	{r4, r7, lr}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80080de:	68b8      	ldr	r0, [r7, #8]
 80080e0:	f7ff ffec 	bl	80080bc <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80080e4:	4603      	mov	r3, r0
 80080e6:	681c      	ldr	r4, [r3, #0]
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7f9 fec4 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	4619      	mov	r1, r3
 80080f2:	2004      	movs	r0, #4
 80080f4:	f7f9 fe74 	bl	8001de0 <_ZnwjPv>
 80080f8:	4603      	mov	r3, r0
 80080fa:	601c      	str	r4, [r3, #0]
	  }
 80080fc:	bf00      	nop
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bd90      	pop	{r4, r7, pc}

08008104 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7f9 feb2 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8008112:	4603      	mov	r3, r0
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f8cc 	bl	80082c6 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800812e:	683c      	ldr	r4, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f807 	bl	8008144 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008136:	4603      	mov	r3, r0
 8008138:	601c      	str	r4, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	bd90      	pop	{r4, r7, pc}

08008144 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f8c6 	bl	80082e0 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008154:	4603      	mov	r3, r0
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f8c6 	bl	80082fa <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800816e:	4603      	mov	r3, r0
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4618      	mov	r0, r3
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	320c      	adds	r2, #12
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	4790      	blx	r2
      }
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80081b0:	b590      	push	{r4, r7, lr}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80081ba:	687c      	ldr	r4, [r7, #4]
 80081bc:	463b      	mov	r3, r7
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f8a8 	bl	8008314 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80081c4:	4603      	mov	r3, r0
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4619      	mov	r1, r3
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f8ad 	bl	800832a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd90      	pop	{r4, r7, pc}

080081d8 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f8c1 	bl	800836a <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80081e8:	4603      	mov	r3, r0
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 f8c9 	bl	8008394 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008202:	4603      	mov	r3, r0
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4618      	mov	r0, r3
 800824a:	f000 f8b1 	bl	80083b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800824e:	4a05      	ldr	r2, [pc, #20]	; (8008264 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	080176ac 	.word	0x080176ac

08008268 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f8b2 	bl	80083dc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8008278:	4603      	mov	r3, r0
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f89b 	bl	80083f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 80082bc:	4603      	mov	r3, r0
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 f899 	bl	8008408 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f89c 	bl	8008428 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80082f0:	4603      	mov	r3, r0
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f89b 	bl	8008440 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800830a:	4603      	mov	r3, r0
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800832a:	b590      	push	{r4, r7, lr}
 800832c:	b085      	sub	sp, #20
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f88f 	bl	8008458 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800833a:	4603      	mov	r3, r0
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8008340:	683c      	ldr	r4, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f888 	bl	8008458 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008348:	4603      	mov	r3, r0
 800834a:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f81e 	bl	8008394 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008358:	4603      	mov	r3, r0
 800835a:	68f9      	ldr	r1, [r7, #12]
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f888 	bl	8008472 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bd90      	pop	{r4, r7, pc}

0800836a <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff fee6 	bl	8008144 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008378:	4603      	mov	r3, r0
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff fee0 	bl	8008144 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008384:	4603      	mov	r3, r0
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
	return __p;
 800838a:	68fb      	ldr	r3, [r7, #12]
      }
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f878 	bl	8008494 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80083b8:	4a07      	ldr	r2, [pc, #28]	; (80083d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	609a      	str	r2, [r3, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	0801776c 	.word	0x0801776c

080083dc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f84b 	bl	80084ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f853 	bl	80084c4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f855 	bl	80084e0 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008436:	4603      	mov	r3, r0
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f856 	bl	80084fa <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800844e:	4603      	mov	r3, r0
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f855 	bl	8008512 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008468:	4603      	mov	r3, r0
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	320c      	adds	r2, #12
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	4618      	mov	r0, r3
 800848a:	4790      	blx	r2
      }
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f845 	bl	800852c <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80084a2:	4603      	mov	r3, r0
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f845 	bl	8008544 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f835 	bl	800855a <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 80084f0:	4603      	mov	r3, r0
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f834 	bl	8008570 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8008508:	4603      	mov	r3, r0
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f833 	bl	8008588 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008522:	4603      	mov	r3, r0
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f833 	bl	80085a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 800853a:	4603      	mov	r3, r0
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f81d 	bl	80085b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 800857e:	4603      	mov	r3, r0
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f81c 	bl	80085ce <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008596:	4603      	mov	r3, r0
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f81d 	bl	80085e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 80085ae:	4603      	mov	r3, r0
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f810 	bl	80085fe <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 80085de:	4603      	mov	r3, r0
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4618      	mov	r0, r3
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	4a05      	ldr	r2, [pc, #20]	; (8008634 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fe0f 	bl	8007248 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	080176ac 	.word	0x080176ac

08008638 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ffe7 	bl	8008614 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008646:	2110      	movs	r1, #16
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f009 fec6 	bl	80123da <_ZdlPvj>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3310      	adds	r3, #16
 8008664:	4618      	mov	r0, r3
 8008666:	f7f9 fc4d 	bl	8001f04 <_ZNSt8functionIFvvEED1Ev>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4618      	mov	r0, r3
 800866e:	f7f9 fc3c 	bl	8001eea <_ZNSt8functionIFyvEED1Ev>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <_Z41__static_initialization_and_destruction_0ii>:

}
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	; 0x28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d122      	bne.n	80086d2 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008692:	4293      	cmp	r3, r2
 8008694:	d11d      	bne.n	80086d2 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8008696:	f107 0308 	add.w	r3, r7, #8
 800869a:	4917      	ldr	r1, [pc, #92]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe fba1 	bl	8006de4 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 80086a2:	f107 0318 	add.w	r3, r7, #24
 80086a6:	4915      	ldr	r1, [pc, #84]	; (80086fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe fbcb 	bl	8006e44 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 80086ae:	f107 0218 	add.w	r2, r7, #24
 80086b2:	f107 0308 	add.w	r3, r7, #8
 80086b6:	4619      	mov	r1, r3
 80086b8:	4811      	ldr	r0, [pc, #68]	; (8008700 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80086ba:	f7f9 fc30 	bl	8001f1e <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 80086be:	f107 0318 	add.w	r3, r7, #24
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f9 fc1e 	bl	8001f04 <_ZNSt8functionIFvvEED1Ev>
 80086c8:	f107 0308 	add.w	r3, r7, #8
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7f9 fc0c 	bl	8001eea <_ZNSt8functionIFyvEED1Ev>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <_Z41__static_initialization_and_destruction_0ii+0x72>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086de:	4293      	cmp	r3, r2
 80086e0:	d105      	bne.n	80086ee <_Z41__static_initialization_and_destruction_0ii+0x72>
 80086e2:	4807      	ldr	r0, [pc, #28]	; (8008700 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80086e4:	f7ff ffb8 	bl	8008658 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80086ea:	f7fd fa06 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80086ee:	bf00      	nop
 80086f0:	3728      	adds	r7, #40	; 0x28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	08005a8d 	.word	0x08005a8d
 80086fc:	08005a81 	.word	0x08005a81
 8008700:	20000480 	.word	0x20000480
 8008704:	20000478 	.word	0x20000478

08008708 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8008708:	b590      	push	{r4, r7, lr}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68dc      	ldr	r4, [r3, #12]
 8008714:	2c00      	cmp	r4, #0
 8008716:	d006      	beq.n	8008726 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8008718:	4620      	mov	r0, r4
 800871a:	f7ff fbfb 	bl	8007f14 <_ZN15CyphalInterfaceD1Ev>
 800871e:	210c      	movs	r1, #12
 8008720:	4620      	mov	r0, r4
 8008722:	f009 fe5a 	bl	80123da <_ZdlPvj>
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	bd90      	pop	{r4, r7, pc}

0800872e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
      { delete this; }
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff7b 	bl	8008638 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8008754:	2300      	movs	r3, #0
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8008762:	b580      	push	{r7, lr}
 8008764:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 8008768:	af00      	add	r7, sp, #0
 800876a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800876e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008772:	6018      	str	r0, [r3, #0]
 8008774:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008778:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800877c:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 800877e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008782:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fc1f 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008792:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008796:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800879a:	f107 0108 	add.w	r1, r7, #8
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	f000 f874 	bl	800888c <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80087a4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80087a8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3304      	adds	r3, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80087b8:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80087c4:	f5a0 7047 	sub.w	r0, r0, #796	; 0x31c
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	6800      	ldr	r0, [r0, #0]
 80087cc:	4798      	blx	r3
    }
 80087ce:	bf00      	nop
 80087d0:	f507 7748 	add.w	r7, r7, #800	; 0x320
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe fbf1 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80087ee:	f107 030c 	add.w	r3, r7, #12
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	f000 f86a 	bl	80088ce <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3304      	adds	r3, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f107 010c 	add.w	r1, r7, #12
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4798      	blx	r3
    }
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fbd3 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	4619      	mov	r1, r3
 8008832:	f000 f86c 	bl	800890e <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3304      	adds	r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f107 010c 	add.w	r1, r7, #12
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	4798      	blx	r3
    }
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fbb5 	bl	8006fd0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008866:	f107 0308 	add.w	r3, r7, #8
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	4619      	mov	r1, r3
 800886e:	f000 f86e 	bl	800894e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3304      	adds	r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f107 0108 	add.w	r1, r7, #8
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
    }
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8008898:	f240 2303 	movw	r3, #515	; 0x203
 800889c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f107 0214 	add.w	r2, r7, #20
 80088a6:	4619      	mov	r1, r3
 80088a8:	68b8      	ldr	r0, [r7, #8]
 80088aa:	f7fc fd37 	bl	800531c <uavcan_register_Access_Request_1_0_deserialize_>
 80088ae:	4603      	mov	r3, r0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	09db      	lsrs	r3, r3, #7
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	3310      	adds	r3, #16
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fe9f 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80088c6:	bf00      	nop
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b086      	sub	sp, #24
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	f107 0214 	add.w	r2, r7, #20
 80088e6:	4619      	mov	r1, r3
 80088e8:	68b8      	ldr	r0, [r7, #8]
 80088ea:	f7fc ff03 	bl	80056f4 <uavcan_node_GetInfo_Request_1_0_deserialize_>
 80088ee:	4603      	mov	r3, r0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	09db      	lsrs	r3, r3, #7
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	3310      	adds	r3, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fe7f 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
}
 8008906:	bf00      	nop
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800890e:	b580      	push	{r7, lr}
 8008910:	b086      	sub	sp, #24
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 800891a:	230c      	movs	r3, #12
 800891c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f107 0214 	add.w	r2, r7, #20
 8008926:	4619      	mov	r1, r3
 8008928:	68b8      	ldr	r0, [r7, #8]
 800892a:	f7fa f9ed 	bl	8002d08 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 800892e:	4603      	mov	r3, r0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	09db      	lsrs	r3, r3, #7
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	3310      	adds	r3, #16
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fe5f 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
}
 8008946:	bf00      	nop
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800894e:	b580      	push	{r7, lr}
 8008950:	b086      	sub	sp, #24
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 800895a:	230c      	movs	r3, #12
 800895c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f107 0214 	add.w	r2, r7, #20
 8008966:	4619      	mov	r1, r3
 8008968:	68b8      	ldr	r0, [r7, #8]
 800896a:	f7fa f85b 	bl	8002a24 <uavcan_node_Heartbeat_1_0_deserialize_>
 800896e:	4603      	mov	r3, r0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	09db      	lsrs	r3, r3, #7
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	3310      	adds	r3, #16
 8008980:	4618      	mov	r0, r3
 8008982:	f7fe fe3f 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
}
 8008986:	bf00      	nop
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <_GLOBAL__sub_I_buffer>:
 800898e:	b580      	push	{r7, lr}
 8008990:	af00      	add	r7, sp, #0
 8008992:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008996:	2001      	movs	r0, #1
 8008998:	f7ff fe70 	bl	800867c <_Z41__static_initialization_and_destruction_0ii>
 800899c:	bd80      	pop	{r7, pc}

0800899e <_GLOBAL__sub_D_buffer>:
 800899e:	b580      	push	{r7, lr}
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089a6:	2000      	movs	r0, #0
 80089a8:	f7ff fe68 	bl	800867c <_Z41__static_initialization_and_destruction_0ii>
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80089b4:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089b6:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <MX_SPI1_Init+0x78>)
 80089b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80089ba:	4b1a      	ldr	r3, [pc, #104]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80089c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80089c2:	4b18      	ldr	r3, [pc, #96]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80089ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80089d0:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089d2:	2202      	movs	r2, #2
 80089d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80089d6:	4b13      	ldr	r3, [pc, #76]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089d8:	2201      	movs	r2, #1
 80089da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80089e4:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089e6:	2220      	movs	r2, #32
 80089e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80089ea:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80089f0:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <MX_SPI1_Init+0x74>)
 80089fe:	2207      	movs	r2, #7
 8008a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <MX_SPI1_Init+0x74>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <MX_SPI1_Init+0x74>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008a0e:	4805      	ldr	r0, [pc, #20]	; (8008a24 <MX_SPI1_Init+0x74>)
 8008a10:	f004 fb92 	bl	800d138 <HAL_SPI_Init>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008a1a:	f7f9 f9dc 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008a1e:	bf00      	nop
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	2000074c 	.word	0x2000074c
 8008a28:	40013000 	.word	0x40013000

08008a2c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a32:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <MX_SPI3_Init+0x78>)
 8008a34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008a3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008a3e:	4b18      	ldr	r3, [pc, #96]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8008a44:	4b16      	ldr	r3, [pc, #88]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a46:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008a4a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a4c:	4b14      	ldr	r3, [pc, #80]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008a52:	4b13      	ldr	r3, [pc, #76]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008a58:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a5e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008a60:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a62:	2218      	movs	r2, #24
 8008a64:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008a66:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008a6c:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008a78:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a7a:	2207      	movs	r2, #7
 8008a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008a7e:	4b08      	ldr	r3, [pc, #32]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008a8a:	4805      	ldr	r0, [pc, #20]	; (8008aa0 <MX_SPI3_Init+0x74>)
 8008a8c:	f004 fb54 	bl	800d138 <HAL_SPI_Init>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008a96:	f7f9 f99e 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	200007b0 	.word	0x200007b0
 8008aa4:	40003c00 	.word	0x40003c00

08008aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08c      	sub	sp, #48	; 0x30
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ab0:	f107 031c 	add.w	r3, r7, #28
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	605a      	str	r2, [r3, #4]
 8008aba:	609a      	str	r2, [r3, #8]
 8008abc:	60da      	str	r2, [r3, #12]
 8008abe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a33      	ldr	r2, [pc, #204]	; (8008b94 <HAL_SPI_MspInit+0xec>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d131      	bne.n	8008b2e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008aca:	4b33      	ldr	r3, [pc, #204]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ace:	4a32      	ldr	r2, [pc, #200]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8008ad6:	4b30      	ldr	r3, [pc, #192]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ae2:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae6:	4a2c      	ldr	r2, [pc, #176]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008ae8:	f043 0301 	orr.w	r3, r3, #1
 8008aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008aee:	4b2a      	ldr	r3, [pc, #168]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008afa:	23e0      	movs	r3, #224	; 0xe0
 8008afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008afe:	2302      	movs	r3, #2
 8008b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b06:	2300      	movs	r3, #0
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008b0a:	2305      	movs	r3, #5
 8008b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b0e:	f107 031c 	add.w	r3, r7, #28
 8008b12:	4619      	mov	r1, r3
 8008b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008b18:	f001 fe88 	bl	800a82c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	2023      	movs	r0, #35	; 0x23
 8008b22:	f000 ff40 	bl	80099a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008b26:	2023      	movs	r0, #35	; 0x23
 8008b28:	f000 ff57 	bl	80099da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008b2c:	e02d      	b.n	8008b8a <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a1a      	ldr	r2, [pc, #104]	; (8008b9c <HAL_SPI_MspInit+0xf4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d128      	bne.n	8008b8a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008b38:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3c:	4a16      	ldr	r2, [pc, #88]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b42:	6593      	str	r3, [r2, #88]	; 0x58
 8008b44:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b4c:	613b      	str	r3, [r7, #16]
 8008b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b50:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b54:	4a10      	ldr	r2, [pc, #64]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008b56:	f043 0304 	orr.w	r3, r3, #4
 8008b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b5c:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <HAL_SPI_MspInit+0xf0>)
 8008b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008b68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b76:	2300      	movs	r3, #0
 8008b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b7a:	2306      	movs	r3, #6
 8008b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b7e:	f107 031c 	add.w	r3, r7, #28
 8008b82:	4619      	mov	r1, r3
 8008b84:	4806      	ldr	r0, [pc, #24]	; (8008ba0 <HAL_SPI_MspInit+0xf8>)
 8008b86:	f001 fe51 	bl	800a82c <HAL_GPIO_Init>
}
 8008b8a:	bf00      	nop
 8008b8c:	3730      	adds	r7, #48	; 0x30
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	40013000 	.word	0x40013000
 8008b98:	40021000 	.word	0x40021000
 8008b9c:	40003c00 	.word	0x40003c00
 8008ba0:	48000800 	.word	0x48000800

08008ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <HAL_MspInit+0x44>)
 8008bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bae:	4a0e      	ldr	r2, [pc, #56]	; (8008be8 <HAL_MspInit+0x44>)
 8008bb0:	f043 0301 	orr.w	r3, r3, #1
 8008bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <HAL_MspInit+0x44>)
 8008bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <HAL_MspInit+0x44>)
 8008bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc6:	4a08      	ldr	r2, [pc, #32]	; (8008be8 <HAL_MspInit+0x44>)
 8008bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_MspInit+0x44>)
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008bda:	f003 fb21 	bl	800c220 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	40021000 	.word	0x40021000

08008bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008bf0:	e7fe      	b.n	8008bf0 <NMI_Handler+0x4>

08008bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bf6:	e7fe      	b.n	8008bf6 <HardFault_Handler+0x4>

08008bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bfc:	e7fe      	b.n	8008bfc <MemManage_Handler+0x4>

08008bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c02:	e7fe      	b.n	8008c02 <BusFault_Handler+0x4>

08008c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c08:	e7fe      	b.n	8008c08 <UsageFault_Handler+0x4>

08008c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c0e:	bf00      	nop
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c1c:	bf00      	nop
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c26:	b480      	push	{r7}
 8008c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c2a:	bf00      	nop
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c38:	f000 fd9a 	bl	8009770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c3c:	bf00      	nop
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8008c44:	4802      	ldr	r0, [pc, #8]	; (8008c50 <DMA1_Channel1_IRQHandler+0x10>)
 8008c46:	f001 f84b 	bl	8009ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008c4a:	bf00      	nop
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000360 	.word	0x20000360

08008c54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8008c58:	4802      	ldr	r0, [pc, #8]	; (8008c64 <DMA1_Channel2_IRQHandler+0x10>)
 8008c5a:	f001 f841 	bl	8009ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008c5e:	bf00      	nop
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	200003c0 	.word	0x200003c0

08008c68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008c6c:	4802      	ldr	r0, [pc, #8]	; (8008c78 <SPI1_IRQHandler+0x10>)
 8008c6e:	f004 fea5 	bl	800d9bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008c72:	bf00      	nop
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	2000074c 	.word	0x2000074c

08008c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008c80:	4802      	ldr	r0, [pc, #8]	; (8008c8c <USART2_IRQHandler+0x10>)
 8008c82:	f005 fb53 	bl	800e32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008c86:	bf00      	nop
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000864 	.word	0x20000864

08008c90 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8008c94:	4802      	ldr	r0, [pc, #8]	; (8008ca0 <I2C4_EV_IRQHandler+0x10>)
 8008c96:	f002 f933 	bl	800af00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8008c9a:	bf00      	nop
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	2000030c 	.word	0x2000030c

08008ca4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8008ca8:	4802      	ldr	r0, [pc, #8]	; (8008cb4 <I2C4_ER_IRQHandler+0x10>)
 8008caa:	f002 f943 	bl	800af34 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	2000030c 	.word	0x2000030c

08008cb8 <_getpid>:
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <_kill>:
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	f00a fd27 	bl	8013724 <__errno>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2216      	movs	r2, #22
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <_exit>:
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff ffe7 	bl	8008cc8 <_kill>
 8008cfa:	e7fe      	b.n	8008cfa <_exit+0x12>

08008cfc <_read>:
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e00a      	b.n	8008d24 <_read+0x28>
 8008d0e:	f3af 8000 	nop.w
 8008d12:	4601      	mov	r1, r0
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	60ba      	str	r2, [r7, #8]
 8008d1a:	b2ca      	uxtb	r2, r1
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	3301      	adds	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	dbf0      	blt.n	8008d0e <_read+0x12>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <_write>:
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b086      	sub	sp, #24
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	2300      	movs	r3, #0
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e009      	b.n	8008d5c <_write+0x26>
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	60ba      	str	r2, [r7, #8]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f3af 8000 	nop.w
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	dbf1      	blt.n	8008d48 <_write+0x12>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_close>:
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <_fstat>:
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <_isatty>:
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	2301      	movs	r3, #1
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <_lseek>:
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
	...

08008dd8 <_sbrk>:
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	4a14      	ldr	r2, [pc, #80]	; (8008e34 <_sbrk+0x5c>)
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <_sbrk+0x60>)
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <_sbrk+0x64>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <_sbrk+0x22>
 8008df4:	4b11      	ldr	r3, [pc, #68]	; (8008e3c <_sbrk+0x64>)
 8008df6:	4a12      	ldr	r2, [pc, #72]	; (8008e40 <_sbrk+0x68>)
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <_sbrk+0x64>)
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d207      	bcs.n	8008e18 <_sbrk+0x40>
 8008e08:	f00a fc8c 	bl	8013724 <__errno>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	220c      	movs	r2, #12
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	f04f 33ff 	mov.w	r3, #4294967295
 8008e16:	e009      	b.n	8008e2c <_sbrk+0x54>
 8008e18:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <_sbrk+0x64>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <_sbrk+0x64>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4413      	add	r3, r2
 8008e26:	4a05      	ldr	r2, [pc, #20]	; (8008e3c <_sbrk+0x64>)
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20020000 	.word	0x20020000
 8008e38:	00000400 	.word	0x00000400
 8008e3c:	20000814 	.word	0x20000814
 8008e40:	20000a90 	.word	0x20000a90

08008e44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008e44:	b480      	push	{r7}
 8008e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <SystemInit+0x20>)
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4e:	4a05      	ldr	r2, [pc, #20]	; (8008e64 <SystemInit+0x20>)
 8008e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e58:	bf00      	nop
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	e000ed00 	.word	0xe000ed00

08008e68 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08c      	sub	sp, #48	; 0x30
 8008e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008e6e:	f107 030c 	add.w	r3, r7, #12
 8008e72:	2224      	movs	r2, #36	; 0x24
 8008e74:	2100      	movs	r1, #0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f00a fb9b 	bl	80135b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e7c:	463b      	mov	r3, r7
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	605a      	str	r2, [r3, #4]
 8008e84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008e86:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008e88:	4a23      	ldr	r2, [pc, #140]	; (8008f18 <MX_TIM8_Init+0xb0>)
 8008e8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008e8c:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e92:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8008e98:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e9e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ea0:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008eac:	4b19      	ldr	r3, [pc, #100]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	4619      	mov	r1, r3
 8008edc:	480d      	ldr	r0, [pc, #52]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008ede:	f004 ffe5 	bl	800deac <HAL_TIM_Encoder_Init>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8008ee8:	f7f8 ff75 	bl	8001dd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008eec:	2300      	movs	r3, #0
 8008eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008ef8:	463b      	mov	r3, r7
 8008efa:	4619      	mov	r1, r3
 8008efc:	4805      	ldr	r0, [pc, #20]	; (8008f14 <MX_TIM8_Init+0xac>)
 8008efe:	f005 f92f 	bl	800e160 <HAL_TIMEx_MasterConfigSynchronization>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008f08:	f7f8 ff65 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008f0c:	bf00      	nop
 8008f0e:	3730      	adds	r7, #48	; 0x30
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000818 	.word	0x20000818
 8008f18:	40013400 	.word	0x40013400

08008f1c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	; 0x28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f24:	f107 0314 	add.w	r3, r7, #20
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	605a      	str	r2, [r3, #4]
 8008f2e:	609a      	str	r2, [r3, #8]
 8008f30:	60da      	str	r2, [r3, #12]
 8008f32:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a25      	ldr	r2, [pc, #148]	; (8008fd0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d143      	bne.n	8008fc6 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008f3e:	4b25      	ldr	r3, [pc, #148]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f42:	4a24      	ldr	r2, [pc, #144]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f48:	6613      	str	r3, [r2, #96]	; 0x60
 8008f4a:	4b22      	ldr	r3, [pc, #136]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f52:	613b      	str	r3, [r7, #16]
 8008f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f56:	4b1f      	ldr	r3, [pc, #124]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5a:	4a1e      	ldr	r2, [pc, #120]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f5c:	f043 0304 	orr.w	r3, r3, #4
 8008f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f62:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f66:	f003 0304 	and.w	r3, r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f6e:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f72:	4a18      	ldr	r2, [pc, #96]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f74:	f043 0302 	orr.w	r3, r3, #2
 8008f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f7a:	4b16      	ldr	r3, [pc, #88]	; (8008fd4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	60bb      	str	r3, [r7, #8]
 8008f84:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008f86:	2380      	movs	r3, #128	; 0x80
 8008f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f92:	2300      	movs	r3, #0
 8008f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8008f96:	2304      	movs	r3, #4
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f9a:	f107 0314 	add.w	r3, r7, #20
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	480d      	ldr	r0, [pc, #52]	; (8008fd8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8008fa2:	f001 fc43 	bl	800a82c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008faa:	2302      	movs	r3, #2
 8008fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8008fb6:	2305      	movs	r3, #5
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fba:	f107 0314 	add.w	r3, r7, #20
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4806      	ldr	r0, [pc, #24]	; (8008fdc <HAL_TIM_Encoder_MspInit+0xc0>)
 8008fc2:	f001 fc33 	bl	800a82c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008fc6:	bf00      	nop
 8008fc8:	3728      	adds	r7, #40	; 0x28
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	40013400 	.word	0x40013400
 8008fd4:	40021000 	.word	0x40021000
 8008fd8:	48000800 	.word	0x48000800
 8008fdc:	48000400 	.word	0x48000400

08008fe0 <tmc5160_position>:

extern motor_config motor_cfg;


void tmc5160_position(int32_t position)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60bb      	str	r3, [r7, #8]
 8008fec:	2300      	movs	r3, #0
 8008fee:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 8008ff0:	23a0      	movs	r3, #160	; 0xa0
 8008ff2:	723b      	strb	r3, [r7, #8]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	727b      	strb	r3, [r7, #9]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	72bb      	strb	r3, [r7, #10]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	72fb      	strb	r3, [r7, #11]
 8009000:	2300      	movs	r3, #0
 8009002:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009004:	f107 0308 	add.w	r3, r7, #8
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f8e1 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 800900e:	23ad      	movs	r3, #173	; 0xad
 8009010:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	0e1b      	lsrs	r3, r3, #24
 8009016:	b2db      	uxtb	r3, r3
 8009018:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	141b      	asrs	r3, r3, #16
 800901e:	b2db      	uxtb	r3, r3
 8009020:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	121b      	asrs	r3, r3, #8
 8009026:	b2db      	uxtb	r3, r3
 8009028:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009030:	f107 0308 	add.w	r3, r7, #8
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f8cb 	bl	80091d0 <tmc5160_write>
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	0000      	movs	r0, r0
 8009044:	0000      	movs	r0, r0
	...

08009048 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7f7 fa8f 	bl	8000574 <__aeabi_i2d>
 8009056:	a334      	add	r3, pc, #208	; (adr r3, 8009128 <tmc5160_move+0xe0>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 faf4 	bl	8000648 <__aeabi_dmul>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	f7f7 fd9e 	bl	8000ba8 <__aeabi_d2iz>
 800906c:	4603      	mov	r3, r0
 800906e:	607b      	str	r3, [r7, #4]
	int32_t v1;
	uint8_t WData[5] = {0};
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	2300      	movs	r3, #0
 8009076:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	105b      	asrs	r3, r3, #1
 800907c:	617b      	str	r3, [r7, #20]

	if (vel < 0) //select positive or negative mode depending on vel sign
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	da0f      	bge.n	80090a4 <tmc5160_move+0x5c>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 8009084:	23a0      	movs	r3, #160	; 0xa0
 8009086:	733b      	strb	r3, [r7, #12]
 8009088:	2300      	movs	r3, #0
 800908a:	737b      	strb	r3, [r7, #13]
 800908c:	2300      	movs	r3, #0
 800908e:	73bb      	strb	r3, [r7, #14]
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]
 8009094:	2302      	movs	r3, #2
 8009096:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 8009098:	f107 030c 	add.w	r3, r7, #12
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f897 	bl	80091d0 <tmc5160_write>
 80090a2:	e00e      	b.n	80090c2 <tmc5160_move+0x7a>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 80090a4:	23a0      	movs	r3, #160	; 0xa0
 80090a6:	733b      	strb	r3, [r7, #12]
 80090a8:	2300      	movs	r3, #0
 80090aa:	737b      	strb	r3, [r7, #13]
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
 80090b4:	2301      	movs	r3, #1
 80090b6:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 80090b8:	f107 030c 	add.w	r3, r7, #12
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f887 	bl	80091d0 <tmc5160_write>
	}

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 80090c2:	23a5      	movs	r3, #165	; 0xa5
 80090c4:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	0e1b      	lsrs	r3, r3, #24
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	141b      	asrs	r3, r3, #16
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	121b      	asrs	r3, r3, #8
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80090e4:	f107 030c 	add.w	r3, r7, #12
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f871 	bl	80091d0 <tmc5160_write>

	//vel = abs(vel); //TODO!!!
	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 80090ee:	23a7      	movs	r3, #167	; 0xa7
 80090f0:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0e1b      	lsrs	r3, r3, #24
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	141b      	asrs	r3, r3, #16
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	121b      	asrs	r3, r3, #8
 8009106:	b2db      	uxtb	r3, r3
 8009108:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009110:	f107 030c 	add.w	r3, r7, #12
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f85b 	bl	80091d0 <tmc5160_write>
}
 800911a:	bf00      	nop
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	f3af 8000 	nop.w
 8009128:	77ffebde 	.word	0x77ffebde
 800912c:	3ff65e9f 	.word	0x3ff65e9f

08009130 <tmc5160_velocity>:
	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
	tmc5160_write(WData);
}

void tmc5160_velocity(uint32_t vel)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7f7 fa0b 	bl	8000554 <__aeabi_ui2d>
 800913e:	a322      	add	r3, pc, #136	; (adr r3, 80091c8 <tmc5160_velocity+0x98>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fa80 	bl	8000648 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4610      	mov	r0, r2
 800914e:	4619      	mov	r1, r3
 8009150:	f7f7 fd52 	bl	8000bf8 <__aeabi_d2uiz>
 8009154:	4603      	mov	r3, r0
 8009156:	607b      	str	r3, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	2300      	movs	r3, #0
 800915e:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	085b      	lsrs	r3, r3, #1
 8009164:	617b      	str	r3, [r7, #20]

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009166:	23a5      	movs	r3, #165	; 0xa5
 8009168:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	0e1b      	lsrs	r3, r3, #24
 800916e:	b2db      	uxtb	r3, r3
 8009170:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	b2db      	uxtb	r3, r3
 8009178:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	0a1b      	lsrs	r3, r3, #8
 800917e:	b2db      	uxtb	r3, r3
 8009180:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	b2db      	uxtb	r3, r3
 8009186:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009188:	f107 030c 	add.w	r3, r7, #12
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f81f 	bl	80091d0 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009192:	23a7      	movs	r3, #167	; 0xa7
 8009194:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	0e1b      	lsrs	r3, r3, #24
 800919a:	b2db      	uxtb	r3, r3
 800919c:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	0c1b      	lsrs	r3, r3, #16
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	0a1b      	lsrs	r3, r3, #8
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80091b4:	f107 030c 	add.w	r3, r7, #12
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 f809 	bl	80091d0 <tmc5160_write>

}
 80091be:	bf00      	nop
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	77ffebde 	.word	0x77ffebde
 80091cc:	3ff65e9f 	.word	0x3ff65e9f

080091d0 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 80091d8:	2200      	movs	r2, #0
 80091da:	2110      	movs	r1, #16
 80091dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091e0:	f001 fca6 	bl	800ab30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 80091e4:	f04f 33ff 	mov.w	r3, #4294967295
 80091e8:	2205      	movs	r2, #5
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	4806      	ldr	r0, [pc, #24]	; (8009208 <tmc5160_write+0x38>)
 80091ee:	f004 f84e 	bl	800d28e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 80091f2:	2201      	movs	r2, #1
 80091f4:	2110      	movs	r1, #16
 80091f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091fa:	f001 fc99 	bl	800ab30 <HAL_GPIO_WritePin>
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	2000074c 	.word	0x2000074c

0800920c <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af02      	add	r7, sp, #8
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009216:	2200      	movs	r2, #0
 8009218:	2110      	movs	r1, #16
 800921a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800921e:	f001 fc87 	bl	800ab30 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009222:	f04f 33ff 	mov.w	r3, #4294967295
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	2305      	movs	r3, #5
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4811      	ldr	r0, [pc, #68]	; (8009274 <tmc5160_read+0x68>)
 8009230:	f004 f9a2 	bl	800d578 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009234:	2201      	movs	r2, #1
 8009236:	2110      	movs	r1, #16
 8009238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800923c:	f001 fc78 	bl	800ab30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009240:	2200      	movs	r2, #0
 8009242:	2110      	movs	r1, #16
 8009244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009248:	f001 fc72 	bl	800ab30 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2305      	movs	r3, #5
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	4806      	ldr	r0, [pc, #24]	; (8009274 <tmc5160_read+0x68>)
 800925a:	f004 f98d 	bl	800d578 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800925e:	2201      	movs	r2, #1
 8009260:	2110      	movs	r1, #16
 8009262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009266:	f001 fc63 	bl	800ab30 <HAL_GPIO_WritePin>
}
 800926a:	bf00      	nop
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	2000074c 	.word	0x2000074c

08009278 <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	2300      	movs	r3, #0
 8009284:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 8009286:	2300      	movs	r3, #0
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	2300      	movs	r3, #0
 800928c:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 800928e:	2321      	movs	r3, #33	; 0x21
 8009290:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 8009292:	1d3a      	adds	r2, r7, #4
 8009294:	f107 030c 	add.w	r3, r7, #12
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff ffb6 	bl	800920c <tmc5160_read>

	int32_t response = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 80092a4:	797b      	ldrb	r3, [r7, #5]
 80092a6:	461a      	mov	r2, r3
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 80092b4:	79bb      	ldrb	r3, [r7, #6]
 80092b6:	461a      	mov	r2, r3
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	461a      	mov	r2, r3
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 80092d4:	7a3b      	ldrb	r3, [r7, #8]
 80092d6:	461a      	mov	r2, r3
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

	return response;
 80092de:	697b      	ldr	r3, [r7, #20]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <tmc5160_init>:

	return (rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
}

void tmc5160_init()
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 80092ee:	2200      	movs	r2, #0
 80092f0:	2120      	movs	r1, #32
 80092f2:	486f      	ldr	r0, [pc, #444]	; (80094b0 <tmc5160_init+0x1c8>)
 80092f4:	f001 fc1c 	bl	800ab30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 80092f8:	2201      	movs	r2, #1
 80092fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80092fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009302:	f001 fc15 	bl	800ab30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8009306:	2200      	movs	r2, #0
 8009308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800930c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009310:	f001 fc0e 	bl	800ab30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009314:	2201      	movs	r2, #1
 8009316:	2110      	movs	r1, #16
 8009318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800931c:	f001 fc08 	bl	800ab30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 8009320:	2200      	movs	r2, #0
 8009322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800932a:	f001 fc01 	bl	800ab30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 800932e:	2200      	movs	r2, #0
 8009330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009338:	f001 fbfa 	bl	800ab30 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800933c:	2064      	movs	r0, #100	; 0x64
 800933e:	f000 fa35 	bl	80097ac <HAL_Delay>

	uint8_t WData[5] = {0};
 8009342:	2300      	movs	r3, #0
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	2300      	movs	r3, #0
 8009348:	713b      	strb	r3, [r7, #4]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 800934a:	23ec      	movs	r3, #236	; 0xec
 800934c:	703b      	strb	r3, [r7, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	707b      	strb	r3, [r7, #1]
 8009352:	2300      	movs	r3, #0
 8009354:	70bb      	strb	r3, [r7, #2]
 8009356:	2300      	movs	r3, #0
 8009358:	70fb      	strb	r3, [r7, #3]
 800935a:	23c3      	movs	r3, #195	; 0xc3
 800935c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800935e:	463b      	mov	r3, r7
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff ff35 	bl	80091d0 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x01; WData[4] = 0x01; //  IHOLDDELAY=10,  IRUN=10/31,  IHOLD=02/31
 8009366:	2390      	movs	r3, #144	; 0x90
 8009368:	703b      	strb	r3, [r7, #0]
 800936a:	2300      	movs	r3, #0
 800936c:	707b      	strb	r3, [r7, #1]
 800936e:	2300      	movs	r3, #0
 8009370:	70bb      	strb	r3, [r7, #2]
 8009372:	2301      	movs	r3, #1
 8009374:	70fb      	strb	r3, [r7, #3]
 8009376:	2301      	movs	r3, #1
 8009378:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800937a:	463b      	mov	r3, r7
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff ff27 	bl	80091d0 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 8009382:	2391      	movs	r3, #145	; 0x91
 8009384:	703b      	strb	r3, [r7, #0]
 8009386:	2300      	movs	r3, #0
 8009388:	707b      	strb	r3, [r7, #1]
 800938a:	2300      	movs	r3, #0
 800938c:	70bb      	strb	r3, [r7, #2]
 800938e:	2300      	movs	r3, #0
 8009390:	70fb      	strb	r3, [r7, #3]
 8009392:	230a      	movs	r3, #10
 8009394:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009396:	463b      	mov	r3, r7
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff ff19 	bl	80091d0 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800939e:	2380      	movs	r3, #128	; 0x80
 80093a0:	703b      	strb	r3, [r7, #0]
 80093a2:	2300      	movs	r3, #0
 80093a4:	707b      	strb	r3, [r7, #1]
 80093a6:	2300      	movs	r3, #0
 80093a8:	70bb      	strb	r3, [r7, #2]
 80093aa:	2300      	movs	r3, #0
 80093ac:	70fb      	strb	r3, [r7, #3]
 80093ae:	2304      	movs	r3, #4
 80093b0:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80093b2:	463b      	mov	r3, r7
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff ff0b 	bl	80091d0 <tmc5160_write>

	tmc5160_velocity(1000000); //initial vel config
 80093ba:	483e      	ldr	r0, [pc, #248]	; (80094b4 <tmc5160_init+0x1cc>)
 80093bc:	f7ff feb8 	bl	8009130 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 80093c0:	2393      	movs	r3, #147	; 0x93
 80093c2:	703b      	strb	r3, [r7, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	707b      	strb	r3, [r7, #1]
 80093c8:	2300      	movs	r3, #0
 80093ca:	70bb      	strb	r3, [r7, #2]
 80093cc:	2300      	movs	r3, #0
 80093ce:	70fb      	strb	r3, [r7, #3]
 80093d0:	23c8      	movs	r3, #200	; 0xc8
 80093d2:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80093d4:	463b      	mov	r3, r7
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fefa 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 80093dc:	23a0      	movs	r3, #160	; 0xa0
 80093de:	703b      	strb	r3, [r7, #0]
 80093e0:	2300      	movs	r3, #0
 80093e2:	707b      	strb	r3, [r7, #1]
 80093e4:	2300      	movs	r3, #0
 80093e6:	70bb      	strb	r3, [r7, #2]
 80093e8:	2300      	movs	r3, #0
 80093ea:	70fb      	strb	r3, [r7, #3]
 80093ec:	2300      	movs	r3, #0
 80093ee:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80093f0:	463b      	mov	r3, r7
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff feec 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 80093f8:	23a3      	movs	r3, #163	; 0xa3
 80093fa:	703b      	strb	r3, [r7, #0]
 80093fc:	2300      	movs	r3, #0
 80093fe:	707b      	strb	r3, [r7, #1]
 8009400:	2300      	movs	r3, #0
 8009402:	70bb      	strb	r3, [r7, #2]
 8009404:	2300      	movs	r3, #0
 8009406:	70fb      	strb	r3, [r7, #3]
 8009408:	230a      	movs	r3, #10
 800940a:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800940c:	463b      	mov	r3, r7
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff fede 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8009414:	23a4      	movs	r3, #164	; 0xa4
 8009416:	703b      	strb	r3, [r7, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	707b      	strb	r3, [r7, #1]
 800941c:	2300      	movs	r3, #0
 800941e:	70bb      	strb	r3, [r7, #2]
 8009420:	236e      	movs	r3, #110	; 0x6e
 8009422:	70fb      	strb	r3, [r7, #3]
 8009424:	2320      	movs	r3, #32
 8009426:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009428:	463b      	mov	r3, r7
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff fed0 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8009430:	23a6      	movs	r3, #166	; 0xa6
 8009432:	703b      	strb	r3, [r7, #0]
 8009434:	2300      	movs	r3, #0
 8009436:	707b      	strb	r3, [r7, #1]
 8009438:	2300      	movs	r3, #0
 800943a:	70bb      	strb	r3, [r7, #2]
 800943c:	2323      	movs	r3, #35	; 0x23
 800943e:	70fb      	strb	r3, [r7, #3]
 8009440:	2388      	movs	r3, #136	; 0x88
 8009442:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009444:	463b      	mov	r3, r7
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff fec2 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 800944c:	23a8      	movs	r3, #168	; 0xa8
 800944e:	703b      	strb	r3, [r7, #0]
 8009450:	2300      	movs	r3, #0
 8009452:	707b      	strb	r3, [r7, #1]
 8009454:	2300      	movs	r3, #0
 8009456:	70bb      	strb	r3, [r7, #2]
 8009458:	2323      	movs	r3, #35	; 0x23
 800945a:	70fb      	strb	r3, [r7, #3]
 800945c:	2388      	movs	r3, #136	; 0x88
 800945e:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009460:	463b      	mov	r3, r7
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff feb4 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 8009468:	23aa      	movs	r3, #170	; 0xaa
 800946a:	703b      	strb	r3, [r7, #0]
 800946c:	2300      	movs	r3, #0
 800946e:	707b      	strb	r3, [r7, #1]
 8009470:	2300      	movs	r3, #0
 8009472:	70bb      	strb	r3, [r7, #2]
 8009474:	236e      	movs	r3, #110	; 0x6e
 8009476:	70fb      	strb	r3, [r7, #3]
 8009478:	2320      	movs	r3, #32
 800947a:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800947c:	463b      	mov	r3, r7
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff fea6 	bl	80091d0 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8009484:	23ab      	movs	r3, #171	; 0xab
 8009486:	703b      	strb	r3, [r7, #0]
 8009488:	2300      	movs	r3, #0
 800948a:	707b      	strb	r3, [r7, #1]
 800948c:	2300      	movs	r3, #0
 800948e:	70bb      	strb	r3, [r7, #2]
 8009490:	2300      	movs	r3, #0
 8009492:	70fb      	strb	r3, [r7, #3]
 8009494:	230a      	movs	r3, #10
 8009496:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009498:	463b      	mov	r3, r7
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff fe98 	bl	80091d0 <tmc5160_write>

	HAL_Delay(100);
 80094a0:	2064      	movs	r0, #100	; 0x64
 80094a2:	f000 f983 	bl	80097ac <HAL_Delay>
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	48000800 	.word	0x48000800
 80094b4:	000f4240 	.word	0x000f4240

080094b8 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	71fb      	strb	r3, [r7, #7]
	if(dir < 0)
 80094c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	da13      	bge.n	80094f2 <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 80094ca:	2300      	movs	r3, #0
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	2300      	movs	r3, #0
 80094d0:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 80094d2:	2380      	movs	r3, #128	; 0x80
 80094d4:	743b      	strb	r3, [r7, #16]
 80094d6:	2300      	movs	r3, #0
 80094d8:	747b      	strb	r3, [r7, #17]
 80094da:	2300      	movs	r3, #0
 80094dc:	74bb      	strb	r3, [r7, #18]
 80094de:	2300      	movs	r3, #0
 80094e0:	74fb      	strb	r3, [r7, #19]
 80094e2:	2314      	movs	r3, #20
 80094e4:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 80094e6:	f107 0310 	add.w	r3, r7, #16
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fe70 	bl	80091d0 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 80094f0:	e012      	b.n	8009518 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 80094f2:	2300      	movs	r3, #0
 80094f4:	60bb      	str	r3, [r7, #8]
 80094f6:	2300      	movs	r3, #0
 80094f8:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 80094fa:	2380      	movs	r3, #128	; 0x80
 80094fc:	723b      	strb	r3, [r7, #8]
 80094fe:	2300      	movs	r3, #0
 8009500:	727b      	strb	r3, [r7, #9]
 8009502:	2300      	movs	r3, #0
 8009504:	72bb      	strb	r3, [r7, #10]
 8009506:	2300      	movs	r3, #0
 8009508:	72fb      	strb	r3, [r7, #11]
 800950a:	2304      	movs	r3, #4
 800950c:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 800950e:	f107 0308 	add.w	r3, r7, #8
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fe5c 	bl	80091d0 <tmc5160_write>
}
 8009518:	bf00      	nop
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009524:	4b22      	ldr	r3, [pc, #136]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 8009526:	4a23      	ldr	r2, [pc, #140]	; (80095b4 <MX_USART2_UART_Init+0x94>)
 8009528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800952a:	4b21      	ldr	r3, [pc, #132]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800952c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009532:	4b1f      	ldr	r3, [pc, #124]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 8009534:	2200      	movs	r2, #0
 8009536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009538:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800953a:	2200      	movs	r2, #0
 800953c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800953e:	4b1c      	ldr	r3, [pc, #112]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 8009540:	2200      	movs	r2, #0
 8009542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009544:	4b1a      	ldr	r3, [pc, #104]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 8009546:	220c      	movs	r2, #12
 8009548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800954a:	4b19      	ldr	r3, [pc, #100]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800954c:	2200      	movs	r2, #0
 800954e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009550:	4b17      	ldr	r3, [pc, #92]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 8009552:	2200      	movs	r2, #0
 8009554:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009556:	4b16      	ldr	r3, [pc, #88]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 8009558:	2200      	movs	r2, #0
 800955a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800955c:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800955e:	2200      	movs	r2, #0
 8009560:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 8009564:	2200      	movs	r2, #0
 8009566:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009568:	4811      	ldr	r0, [pc, #68]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800956a:	f004 fe8f 	bl	800e28c <HAL_UART_Init>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009574:	f7f8 fc2f 	bl	8001dd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009578:	2100      	movs	r1, #0
 800957a:	480d      	ldr	r0, [pc, #52]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800957c:	f005 ffcd 	bl	800f51a <HAL_UARTEx_SetTxFifoThreshold>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009586:	f7f8 fc26 	bl	8001dd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800958a:	2100      	movs	r1, #0
 800958c:	4808      	ldr	r0, [pc, #32]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800958e:	f006 f802 	bl	800f596 <HAL_UARTEx_SetRxFifoThreshold>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009598:	f7f8 fc1d 	bl	8001dd6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800959c:	4804      	ldr	r0, [pc, #16]	; (80095b0 <MX_USART2_UART_Init+0x90>)
 800959e:	f005 ff83 	bl	800f4a8 <HAL_UARTEx_DisableFifoMode>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80095a8:	f7f8 fc15 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80095ac:	bf00      	nop
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000864 	.word	0x20000864
 80095b4:	40004400 	.word	0x40004400

080095b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b09e      	sub	sp, #120	; 0x78
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	609a      	str	r2, [r3, #8]
 80095cc:	60da      	str	r2, [r3, #12]
 80095ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80095d0:	f107 0310 	add.w	r3, r7, #16
 80095d4:	2254      	movs	r2, #84	; 0x54
 80095d6:	2100      	movs	r1, #0
 80095d8:	4618      	mov	r0, r3
 80095da:	f009 ffea 	bl	80135b2 <memset>
  if(uartHandle->Instance==USART2)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a23      	ldr	r2, [pc, #140]	; (8009670 <HAL_UART_MspInit+0xb8>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d13e      	bne.n	8009666 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80095e8:	2302      	movs	r3, #2
 80095ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80095ec:	2300      	movs	r3, #0
 80095ee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80095f0:	f107 0310 	add.w	r3, r7, #16
 80095f4:	4618      	mov	r0, r3
 80095f6:	f003 fb51 	bl	800cc9c <HAL_RCCEx_PeriphCLKConfig>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009600:	f7f8 fbe9 	bl	8001dd6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009604:	4b1b      	ldr	r3, [pc, #108]	; (8009674 <HAL_UART_MspInit+0xbc>)
 8009606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009608:	4a1a      	ldr	r2, [pc, #104]	; (8009674 <HAL_UART_MspInit+0xbc>)
 800960a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800960e:	6593      	str	r3, [r2, #88]	; 0x58
 8009610:	4b18      	ldr	r3, [pc, #96]	; (8009674 <HAL_UART_MspInit+0xbc>)
 8009612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800961c:	4b15      	ldr	r3, [pc, #84]	; (8009674 <HAL_UART_MspInit+0xbc>)
 800961e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009620:	4a14      	ldr	r2, [pc, #80]	; (8009674 <HAL_UART_MspInit+0xbc>)
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009628:	4b12      	ldr	r3, [pc, #72]	; (8009674 <HAL_UART_MspInit+0xbc>)
 800962a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	60bb      	str	r3, [r7, #8]
 8009632:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009634:	230c      	movs	r3, #12
 8009636:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009638:	2302      	movs	r3, #2
 800963a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800963c:	2300      	movs	r3, #0
 800963e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009640:	2300      	movs	r3, #0
 8009642:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009644:	2307      	movs	r3, #7
 8009646:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800964c:	4619      	mov	r1, r3
 800964e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009652:	f001 f8eb 	bl	800a82c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009656:	2200      	movs	r2, #0
 8009658:	2100      	movs	r1, #0
 800965a:	2026      	movs	r0, #38	; 0x26
 800965c:	f000 f9a3 	bl	80099a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009660:	2026      	movs	r0, #38	; 0x26
 8009662:	f000 f9ba 	bl	80099da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009666:	bf00      	nop
 8009668:	3778      	adds	r7, #120	; 0x78
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40004400 	.word	0x40004400
 8009674:	40021000 	.word	0x40021000

08009678 <Reset_Handler>:
 8009678:	480d      	ldr	r0, [pc, #52]	; (80096b0 <LoopForever+0x2>)
 800967a:	4685      	mov	sp, r0
 800967c:	f7ff fbe2 	bl	8008e44 <SystemInit>
 8009680:	480c      	ldr	r0, [pc, #48]	; (80096b4 <LoopForever+0x6>)
 8009682:	490d      	ldr	r1, [pc, #52]	; (80096b8 <LoopForever+0xa>)
 8009684:	4a0d      	ldr	r2, [pc, #52]	; (80096bc <LoopForever+0xe>)
 8009686:	2300      	movs	r3, #0
 8009688:	e002      	b.n	8009690 <LoopCopyDataInit>

0800968a <CopyDataInit>:
 800968a:	58d4      	ldr	r4, [r2, r3]
 800968c:	50c4      	str	r4, [r0, r3]
 800968e:	3304      	adds	r3, #4

08009690 <LoopCopyDataInit>:
 8009690:	18c4      	adds	r4, r0, r3
 8009692:	428c      	cmp	r4, r1
 8009694:	d3f9      	bcc.n	800968a <CopyDataInit>
 8009696:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <LoopForever+0x12>)
 8009698:	4c0a      	ldr	r4, [pc, #40]	; (80096c4 <LoopForever+0x16>)
 800969a:	2300      	movs	r3, #0
 800969c:	e001      	b.n	80096a2 <LoopFillZerobss>

0800969e <FillZerobss>:
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	3204      	adds	r2, #4

080096a2 <LoopFillZerobss>:
 80096a2:	42a2      	cmp	r2, r4
 80096a4:	d3fb      	bcc.n	800969e <FillZerobss>
 80096a6:	f00a f843 	bl	8013730 <__libc_init_array>
 80096aa:	f7f8 faf9 	bl	8001ca0 <main>

080096ae <LoopForever>:
 80096ae:	e7fe      	b.n	80096ae <LoopForever>
 80096b0:	20020000 	.word	0x20020000
 80096b4:	20000000 	.word	0x20000000
 80096b8:	20000240 	.word	0x20000240
 80096bc:	08018234 	.word	0x08018234
 80096c0:	20000240 	.word	0x20000240
 80096c4:	20000a90 	.word	0x20000a90

080096c8 <ADC1_2_IRQHandler>:
 80096c8:	e7fe      	b.n	80096c8 <ADC1_2_IRQHandler>

080096ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096d4:	2003      	movs	r0, #3
 80096d6:	f000 f95b 	bl	8009990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80096da:	200f      	movs	r0, #15
 80096dc:	f000 f80e 	bl	80096fc <HAL_InitTick>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	71fb      	strb	r3, [r7, #7]
 80096ea:	e001      	b.n	80096f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80096ec:	f7ff fa5a 	bl	8008ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80096f0:	79fb      	ldrb	r3, [r7, #7]

}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009708:	4b16      	ldr	r3, [pc, #88]	; (8009764 <HAL_InitTick+0x68>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d022      	beq.n	8009756 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009710:	4b15      	ldr	r3, [pc, #84]	; (8009768 <HAL_InitTick+0x6c>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	4b13      	ldr	r3, [pc, #76]	; (8009764 <HAL_InitTick+0x68>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800971c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009720:	fbb2 f3f3 	udiv	r3, r2, r3
 8009724:	4618      	mov	r0, r3
 8009726:	f000 f966 	bl	80099f6 <HAL_SYSTICK_Config>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10f      	bne.n	8009750 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b0f      	cmp	r3, #15
 8009734:	d809      	bhi.n	800974a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009736:	2200      	movs	r2, #0
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	f04f 30ff 	mov.w	r0, #4294967295
 800973e:	f000 f932 	bl	80099a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009742:	4a0a      	ldr	r2, [pc, #40]	; (800976c <HAL_InitTick+0x70>)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e007      	b.n	800975a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	73fb      	strb	r3, [r7, #15]
 800974e:	e004      	b.n	800975a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	73fb      	strb	r3, [r7, #15]
 8009754:	e001      	b.n	800975a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800975a:	7bfb      	ldrb	r3, [r7, #15]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20000074 	.word	0x20000074
 8009768:	2000006c 	.word	0x2000006c
 800976c:	20000070 	.word	0x20000070

08009770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <HAL_IncTick+0x1c>)
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	4b05      	ldr	r3, [pc, #20]	; (8009790 <HAL_IncTick+0x20>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4413      	add	r3, r2
 800977e:	4a03      	ldr	r2, [pc, #12]	; (800978c <HAL_IncTick+0x1c>)
 8009780:	6013      	str	r3, [r2, #0]
}
 8009782:	bf00      	nop
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	200008f8 	.word	0x200008f8
 8009790:	20000074 	.word	0x20000074

08009794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
  return uwTick;
 8009798:	4b03      	ldr	r3, [pc, #12]	; (80097a8 <HAL_GetTick+0x14>)
 800979a:	681b      	ldr	r3, [r3, #0]
}
 800979c:	4618      	mov	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200008f8 	.word	0x200008f8

080097ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097b4:	f7ff ffee 	bl	8009794 <HAL_GetTick>
 80097b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c4:	d004      	beq.n	80097d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80097c6:	4b09      	ldr	r3, [pc, #36]	; (80097ec <HAL_Delay+0x40>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80097d0:	bf00      	nop
 80097d2:	f7ff ffdf 	bl	8009794 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d8f7      	bhi.n	80097d2 <HAL_Delay+0x26>
  {
  }
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20000074 	.word	0x20000074

080097f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009800:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <__NVIC_SetPriorityGrouping+0x44>)
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800980c:	4013      	ands	r3, r2
 800980e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800981c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009822:	4a04      	ldr	r2, [pc, #16]	; (8009834 <__NVIC_SetPriorityGrouping+0x44>)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	60d3      	str	r3, [r2, #12]
}
 8009828:	bf00      	nop
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	e000ed00 	.word	0xe000ed00

08009838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <__NVIC_GetPriorityGrouping+0x18>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	f003 0307 	and.w	r3, r3, #7
}
 8009846:	4618      	mov	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	e000ed00 	.word	0xe000ed00

08009854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800985e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009862:	2b00      	cmp	r3, #0
 8009864:	db0b      	blt.n	800987e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	f003 021f 	and.w	r2, r3, #31
 800986c:	4907      	ldr	r1, [pc, #28]	; (800988c <__NVIC_EnableIRQ+0x38>)
 800986e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009872:	095b      	lsrs	r3, r3, #5
 8009874:	2001      	movs	r0, #1
 8009876:	fa00 f202 	lsl.w	r2, r0, r2
 800987a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	e000e100 	.word	0xe000e100

08009890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	6039      	str	r1, [r7, #0]
 800989a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800989c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	db0a      	blt.n	80098ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	490c      	ldr	r1, [pc, #48]	; (80098dc <__NVIC_SetPriority+0x4c>)
 80098aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ae:	0112      	lsls	r2, r2, #4
 80098b0:	b2d2      	uxtb	r2, r2
 80098b2:	440b      	add	r3, r1
 80098b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098b8:	e00a      	b.n	80098d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	4908      	ldr	r1, [pc, #32]	; (80098e0 <__NVIC_SetPriority+0x50>)
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	3b04      	subs	r3, #4
 80098c8:	0112      	lsls	r2, r2, #4
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	440b      	add	r3, r1
 80098ce:	761a      	strb	r2, [r3, #24]
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	e000e100 	.word	0xe000e100
 80098e0:	e000ed00 	.word	0xe000ed00

080098e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b089      	sub	sp, #36	; 0x24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	f1c3 0307 	rsb	r3, r3, #7
 80098fe:	2b04      	cmp	r3, #4
 8009900:	bf28      	it	cs
 8009902:	2304      	movcs	r3, #4
 8009904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	3304      	adds	r3, #4
 800990a:	2b06      	cmp	r3, #6
 800990c:	d902      	bls.n	8009914 <NVIC_EncodePriority+0x30>
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	3b03      	subs	r3, #3
 8009912:	e000      	b.n	8009916 <NVIC_EncodePriority+0x32>
 8009914:	2300      	movs	r3, #0
 8009916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009918:	f04f 32ff 	mov.w	r2, #4294967295
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	43da      	mvns	r2, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	401a      	ands	r2, r3
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800992c:	f04f 31ff 	mov.w	r1, #4294967295
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	fa01 f303 	lsl.w	r3, r1, r3
 8009936:	43d9      	mvns	r1, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800993c:	4313      	orrs	r3, r2
         );
}
 800993e:	4618      	mov	r0, r3
 8009940:	3724      	adds	r7, #36	; 0x24
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
	...

0800994c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3b01      	subs	r3, #1
 8009958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800995c:	d301      	bcc.n	8009962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800995e:	2301      	movs	r3, #1
 8009960:	e00f      	b.n	8009982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009962:	4a0a      	ldr	r2, [pc, #40]	; (800998c <SysTick_Config+0x40>)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3b01      	subs	r3, #1
 8009968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800996a:	210f      	movs	r1, #15
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	f7ff ff8e 	bl	8009890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <SysTick_Config+0x40>)
 8009976:	2200      	movs	r2, #0
 8009978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800997a:	4b04      	ldr	r3, [pc, #16]	; (800998c <SysTick_Config+0x40>)
 800997c:	2207      	movs	r2, #7
 800997e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	e000e010 	.word	0xe000e010

08009990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff ff29 	bl	80097f0 <__NVIC_SetPriorityGrouping>
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	4603      	mov	r3, r0
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80099b4:	f7ff ff40 	bl	8009838 <__NVIC_GetPriorityGrouping>
 80099b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	6978      	ldr	r0, [r7, #20]
 80099c0:	f7ff ff90 	bl	80098e4 <NVIC_EncodePriority>
 80099c4:	4602      	mov	r2, r0
 80099c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff ff5f 	bl	8009890 <__NVIC_SetPriority>
}
 80099d2:	bf00      	nop
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b082      	sub	sp, #8
 80099de:	af00      	add	r7, sp, #0
 80099e0:	4603      	mov	r3, r0
 80099e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff ff33 	bl	8009854 <__NVIC_EnableIRQ>
}
 80099ee:	bf00      	nop
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff ffa4 	bl	800994c <SysTick_Config>
 8009a04:	4603      	mov	r3, r0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e08d      	b.n	8009b3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	4b47      	ldr	r3, [pc, #284]	; (8009b48 <HAL_DMA_Init+0x138>)
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d80f      	bhi.n	8009a4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	461a      	mov	r2, r3
 8009a34:	4b45      	ldr	r3, [pc, #276]	; (8009b4c <HAL_DMA_Init+0x13c>)
 8009a36:	4413      	add	r3, r2
 8009a38:	4a45      	ldr	r2, [pc, #276]	; (8009b50 <HAL_DMA_Init+0x140>)
 8009a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3e:	091b      	lsrs	r3, r3, #4
 8009a40:	009a      	lsls	r2, r3, #2
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a42      	ldr	r2, [pc, #264]	; (8009b54 <HAL_DMA_Init+0x144>)
 8009a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8009a4c:	e00e      	b.n	8009a6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	4b40      	ldr	r3, [pc, #256]	; (8009b58 <HAL_DMA_Init+0x148>)
 8009a56:	4413      	add	r3, r2
 8009a58:	4a3d      	ldr	r2, [pc, #244]	; (8009b50 <HAL_DMA_Init+0x140>)
 8009a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5e:	091b      	lsrs	r3, r3, #4
 8009a60:	009a      	lsls	r2, r3, #2
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a3c      	ldr	r2, [pc, #240]	; (8009b5c <HAL_DMA_Init+0x14c>)
 8009a6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f9cc 	bl	8009e5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009acc:	d102      	bne.n	8009ad4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009adc:	b2d2      	uxtb	r2, r2
 8009ade:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ae8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d010      	beq.n	8009b14 <HAL_DMA_Init+0x104>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d80c      	bhi.n	8009b14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9ec 	bl	8009ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009b10:	605a      	str	r2, [r3, #4]
 8009b12:	e008      	b.n	8009b26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40020407 	.word	0x40020407
 8009b4c:	bffdfff8 	.word	0xbffdfff8
 8009b50:	cccccccd 	.word	0xcccccccd
 8009b54:	40020000 	.word	0x40020000
 8009b58:	bffdfbf8 	.word	0xbffdfbf8
 8009b5c:	40020400 	.word	0x40020400

08009b60 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d005      	beq.n	8009b84 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2204      	movs	r2, #4
 8009b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	73fb      	strb	r3, [r7, #15]
 8009b82:	e037      	b.n	8009bf4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 020e 	bic.w	r2, r2, #14
 8009b92:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ba2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f022 0201 	bic.w	r2, r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb8:	f003 021f 	and.w	r2, r3, #31
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8009bc6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009bd0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00c      	beq.n	8009bf4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009be8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009bf2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d00d      	beq.n	8009c46 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2204      	movs	r2, #4
 8009c2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
 8009c44:	e047      	b.n	8009cd6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 020e 	bic.w	r2, r2, #14
 8009c54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0201 	bic.w	r2, r2, #1
 8009c64:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c7a:	f003 021f 	and.w	r2, r3, #31
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	2101      	movs	r1, #1
 8009c84:	fa01 f202 	lsl.w	r2, r1, r2
 8009c88:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c92:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00c      	beq.n	8009cb6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009caa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009cb4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	4798      	blx	r3
    }
  }
  return status;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfc:	f003 031f 	and.w	r3, r3, #31
 8009d00:	2204      	movs	r2, #4
 8009d02:	409a      	lsls	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4013      	ands	r3, r2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d026      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x7a>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d021      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0320 	and.w	r3, r3, #32
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d107      	bne.n	8009d34 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f022 0204 	bic.w	r2, r2, #4
 8009d32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d38:	f003 021f 	and.w	r2, r3, #31
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	2104      	movs	r1, #4
 8009d42:	fa01 f202 	lsl.w	r2, r1, r2
 8009d46:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d071      	beq.n	8009e34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009d58:	e06c      	b.n	8009e34 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	2202      	movs	r2, #2
 8009d64:	409a      	lsls	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d02e      	beq.n	8009dcc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d029      	beq.n	8009dcc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 020a 	bic.w	r2, r2, #10
 8009d94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da2:	f003 021f 	and.w	r2, r3, #31
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	2102      	movs	r1, #2
 8009dac:	fa01 f202 	lsl.w	r2, r1, r2
 8009db0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d038      	beq.n	8009e34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009dca:	e033      	b.n	8009e34 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd0:	f003 031f 	and.w	r3, r3, #31
 8009dd4:	2208      	movs	r2, #8
 8009dd6:	409a      	lsls	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d02a      	beq.n	8009e36 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f003 0308 	and.w	r3, r3, #8
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d025      	beq.n	8009e36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 020e 	bic.w	r2, r2, #14
 8009df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfe:	f003 021f 	and.w	r2, r3, #31
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e06:	2101      	movs	r1, #1
 8009e08:	fa01 f202 	lsl.w	r2, r1, r2
 8009e0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d004      	beq.n	8009e36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
}
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e4c:	b2db      	uxtb	r3, r3
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
	...

08009e5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4b16      	ldr	r3, [pc, #88]	; (8009ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d802      	bhi.n	8009e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009e70:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009e72:	617b      	str	r3, [r7, #20]
 8009e74:	e001      	b.n	8009e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009e76:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009e78:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	3b08      	subs	r3, #8
 8009e86:	4a12      	ldr	r2, [pc, #72]	; (8009ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009e88:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8c:	091b      	lsrs	r3, r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e94:	089b      	lsrs	r3, r3, #2
 8009e96:	009a      	lsls	r2, r3, #2
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a0b      	ldr	r2, [pc, #44]	; (8009ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f003 031f 	and.w	r3, r3, #31
 8009eae:	2201      	movs	r2, #1
 8009eb0:	409a      	lsls	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009eb6:	bf00      	nop
 8009eb8:	371c      	adds	r7, #28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40020407 	.word	0x40020407
 8009ec8:	40020800 	.word	0x40020800
 8009ecc:	40020820 	.word	0x40020820
 8009ed0:	cccccccd 	.word	0xcccccccd
 8009ed4:	40020880 	.word	0x40020880

08009ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a08      	ldr	r2, [pc, #32]	; (8009f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009efa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	f003 031f 	and.w	r3, r3, #31
 8009f04:	2201      	movs	r2, #1
 8009f06:	409a      	lsls	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	1000823f 	.word	0x1000823f
 8009f1c:	40020940 	.word	0x40020940

08009f20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e147      	b.n	800a1c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d106      	bne.n	8009f4c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7f7 fc86 	bl	8001858 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	699a      	ldr	r2, [r3, #24]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0210 	bic.w	r2, r2, #16
 8009f5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f5c:	f7ff fc1a 	bl	8009794 <HAL_GetTick>
 8009f60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009f62:	e012      	b.n	8009f8a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009f64:	f7ff fc16 	bl	8009794 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b0a      	cmp	r3, #10
 8009f70:	d90b      	bls.n	8009f8a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f76:	f043 0201 	orr.w	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2203      	movs	r2, #3
 8009f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e11b      	b.n	800a1c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d0e5      	beq.n	8009f64 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	699a      	ldr	r2, [r3, #24]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fa8:	f7ff fbf4 	bl	8009794 <HAL_GetTick>
 8009fac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009fae:	e012      	b.n	8009fd6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009fb0:	f7ff fbf0 	bl	8009794 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b0a      	cmp	r3, #10
 8009fbc:	d90b      	bls.n	8009fd6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc2:	f043 0201 	orr.w	r2, r3, #1
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2203      	movs	r2, #3
 8009fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e0f5      	b.n	800a1c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d0e5      	beq.n	8009fb0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699a      	ldr	r2, [r3, #24]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0202 	orr.w	r2, r2, #2
 8009ff2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a74      	ldr	r2, [pc, #464]	; (800a1cc <HAL_FDCAN_Init+0x2ac>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d103      	bne.n	800a006 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8009ffe:	4a74      	ldr	r2, [pc, #464]	; (800a1d0 <HAL_FDCAN_Init+0x2b0>)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7c1b      	ldrb	r3, [r3, #16]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d108      	bne.n	800a020 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	699a      	ldr	r2, [r3, #24]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a01c:	619a      	str	r2, [r3, #24]
 800a01e:	e007      	b.n	800a030 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699a      	ldr	r2, [r3, #24]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a02e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7c5b      	ldrb	r3, [r3, #17]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d108      	bne.n	800a04a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a046:	619a      	str	r2, [r3, #24]
 800a048:	e007      	b.n	800a05a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	699a      	ldr	r2, [r3, #24]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a058:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7c9b      	ldrb	r3, [r3, #18]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d108      	bne.n	800a074 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	699a      	ldr	r2, [r3, #24]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a070:	619a      	str	r2, [r3, #24]
 800a072:	e007      	b.n	800a084 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a082:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	699a      	ldr	r2, [r3, #24]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800a0a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	691a      	ldr	r2, [r3, #16]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f022 0210 	bic.w	r2, r2, #16
 800a0b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d108      	bne.n	800a0d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	699a      	ldr	r2, [r3, #24]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0204 	orr.w	r2, r2, #4
 800a0d0:	619a      	str	r2, [r3, #24]
 800a0d2:	e02c      	b.n	800a12e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d028      	beq.n	800a12e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d01c      	beq.n	800a11e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f042 0210 	orr.w	r2, r2, #16
 800a102:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d110      	bne.n	800a12e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0220 	orr.w	r2, r2, #32
 800a11a:	619a      	str	r2, [r3, #24]
 800a11c:	e007      	b.n	800a12e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0220 	orr.w	r2, r2, #32
 800a12c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	3b01      	subs	r3, #1
 800a134:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a13e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a146:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	3b01      	subs	r3, #1
 800a150:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a156:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a158:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a162:	d115      	bne.n	800a190 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a168:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	3b01      	subs	r3, #1
 800a170:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a172:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	3b01      	subs	r3, #1
 800a17a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a17c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	3b01      	subs	r3, #1
 800a186:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a18c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a18e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa58 	bl	800a65c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	40006400 	.word	0x40006400
 800a1d0:	40006500 	.word	0x40006500

0800a1d4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a1e4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d002      	beq.n	800a1f2 <HAL_FDCAN_ConfigFilter+0x1e>
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d13d      	bne.n	800a26e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d119      	bne.n	800a22e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a206:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800a20e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a214:	4313      	orrs	r3, r2
 800a216:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	e01d      	b.n	800a26a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	075a      	lsls	r2, r3, #29
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	079a      	lsls	r2, r3, #30
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	4413      	add	r3, r2
 800a256:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	3304      	adds	r3, #4
 800a262:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	e006      	b.n	800a27c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a272:	f043 0202 	orr.w	r2, r3, #2
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d116      	bne.n	800a2d0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2aa:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	011a      	lsls	r2, r3, #4
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e006      	b.n	800a2de <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d4:	f043 0204 	orr.w	r2, r3, #4
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
  }
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d108      	bne.n	800a314 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	0219      	lsls	r1, r3, #8
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	e006      	b.n	800a322 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a318:	f043 0204 	orr.w	r2, r3, #4
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
  }
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d109      	bne.n	800a356 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68da      	ldr	r2, [r3, #12]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a350:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	e006      	b.n	800a364 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a35a:	f043 0204 	orr.w	r2, r3, #4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
  }
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b01      	cmp	r3, #1
 800a382:	d110      	bne.n	800a3a6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2202      	movs	r2, #2
 800a388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699a      	ldr	r2, [r3, #24]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0201 	bic.w	r2, r2, #1
 800a39a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e006      	b.n	800a3b4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3aa:	f043 0204 	orr.w	r2, r3, #4
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
  }
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d12c      	bne.n	800a432 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a3e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e023      	b.n	800a440 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a400:	0c1b      	lsrs	r3, r3, #16
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	68b9      	ldr	r1, [r7, #8]
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f990 	bl	800a734 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2101      	movs	r1, #1
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	fa01 f202 	lsl.w	r2, r1, r2
 800a420:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800a424:	2201      	movs	r2, #1
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	409a      	lsls	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	e006      	b.n	800a440 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a436:	f043 0208 	orr.w	r2, r3, #8
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
  }
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a448:	b480      	push	{r7}
 800a44a:	b08b      	sub	sp, #44	; 0x2c
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a45c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800a45e:	7efb      	ldrb	r3, [r7, #27]
 800a460:	2b02      	cmp	r3, #2
 800a462:	f040 80bc 	bne.w	800a5de <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b40      	cmp	r3, #64	; 0x40
 800a46a:	d121      	bne.n	800a4b0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a474:	f003 030f 	and.w	r3, r3, #15
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d107      	bne.n	800a48c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a480:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e0af      	b.n	800a5ec <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a494:	0a1b      	lsrs	r3, r3, #8
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a4a0:	69fa      	ldr	r2, [r7, #28]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	00db      	lsls	r3, r3, #3
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	440b      	add	r3, r1
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ae:	e020      	b.n	800a4f2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d107      	bne.n	800a4d0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e08d      	b.n	800a5ec <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4d8:	0a1b      	lsrs	r3, r3, #8
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4e4:	69fa      	ldr	r2, [r7, #28]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	4413      	add	r3, r2
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	440b      	add	r3, r1
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	0c9b      	lsrs	r3, r3, #18
 800a50c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	e005      	b.n	800a522 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	3304      	adds	r3, #4
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	b29a      	uxth	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	0e1b      	lsrs	r3, r3, #24
 800a574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	0fda      	lsrs	r2, r3, #31
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	3304      	adds	r3, #4
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800a590:	2300      	movs	r3, #0
 800a592:	623b      	str	r3, [r7, #32]
 800a594:	e00a      	b.n	800a5ac <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	441a      	add	r2, r3
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	440b      	add	r3, r1
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	623b      	str	r3, [r7, #32]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	0c1b      	lsrs	r3, r3, #16
 800a5b2:	4a11      	ldr	r2, [pc, #68]	; (800a5f8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800a5b4:	5cd3      	ldrb	r3, [r2, r3]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d3eb      	bcc.n	800a596 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2b40      	cmp	r3, #64	; 0x40
 800a5c2:	d105      	bne.n	800a5d0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	69fa      	ldr	r2, [r7, #28]
 800a5ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800a5ce:	e004      	b.n	800a5da <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	69fa      	ldr	r2, [r7, #28]
 800a5d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e006      	b.n	800a5ec <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5e2:	f043 0208 	orr.w	r2, r3, #8
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
  }
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	372c      	adds	r7, #44	; 0x2c
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	08017798 	.word	0x08017798

0800a5fc <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b40      	cmp	r3, #64	; 0x40
 800a60a:	d107      	bne.n	800a61c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a614:	f003 030f 	and.w	r3, r3, #15
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	e006      	b.n	800a62a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800a62a:	68fb      	ldr	r3, [r7, #12]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800a64e:	68fb      	ldr	r3, [r7, #12]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800a664:	4b30      	ldr	r3, [pc, #192]	; (800a728 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800a666:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a2f      	ldr	r2, [pc, #188]	; (800a72c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d103      	bne.n	800a67a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a678:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a2c      	ldr	r2, [pc, #176]	; (800a730 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d103      	bne.n	800a68c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800a68a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a69a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a2:	041a      	lsls	r2, r3, #16
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6c0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c8:	061a      	lsls	r2, r3, #24
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	e005      	b.n	800a70e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3304      	adds	r3, #4
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	429a      	cmp	r2, r3
 800a718:	d3f3      	bcc.n	800a702 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	4000a400 	.word	0x4000a400
 800a72c:	40006800 	.word	0x40006800
 800a730:	40006c00 	.word	0x40006c00

0800a734 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800a734:	b480      	push	{r7}
 800a736:	b089      	sub	sp, #36	; 0x24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800a752:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a75a:	4313      	orrs	r3, r2
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	e00a      	b.n	800a776 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800a768:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800a76e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a774:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a780:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a786:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a78c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a792:	4313      	orrs	r3, r2
 800a794:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	4613      	mov	r3, r2
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	4413      	add	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	440b      	add	r3, r1
 800a7a6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	617b      	str	r3, [r7, #20]
 800a7c4:	e020      	b.n	800a808 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	3303      	adds	r3, #3
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	440b      	add	r3, r1
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a7de:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	440b      	add	r3, r1
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a7ec:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a7f6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	3304      	adds	r3, #4
 800a800:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	3304      	adds	r3, #4
 800a806:	617b      	str	r3, [r7, #20]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	0c1b      	lsrs	r3, r3, #16
 800a80e:	4a06      	ldr	r2, [pc, #24]	; (800a828 <FDCAN_CopyMessageToRAM+0xf4>)
 800a810:	5cd3      	ldrb	r3, [r2, r3]
 800a812:	461a      	mov	r2, r3
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	4293      	cmp	r3, r2
 800a818:	d3d5      	bcc.n	800a7c6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800a81a:	bf00      	nop
 800a81c:	bf00      	nop
 800a81e:	3724      	adds	r7, #36	; 0x24
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	08017798 	.word	0x08017798

0800a82c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a83a:	e15a      	b.n	800aaf2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	2101      	movs	r1, #1
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	fa01 f303 	lsl.w	r3, r1, r3
 800a848:	4013      	ands	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 814c 	beq.w	800aaec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d005      	beq.n	800a86c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d130      	bne.n	800a8ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	2203      	movs	r2, #3
 800a878:	fa02 f303 	lsl.w	r3, r2, r3
 800a87c:	43db      	mvns	r3, r3
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	4013      	ands	r3, r2
 800a882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	005b      	lsls	r3, r3, #1
 800a88c:	fa02 f303 	lsl.w	r3, r2, r3
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4313      	orrs	r3, r2
 800a894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	091b      	lsrs	r3, r3, #4
 800a8b8:	f003 0201 	and.w	r2, r3, #1
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d017      	beq.n	800a90a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ea:	43db      	mvns	r3, r3
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	689a      	ldr	r2, [r3, #8]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	4313      	orrs	r3, r2
 800a902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	2b02      	cmp	r3, #2
 800a914:	d123      	bne.n	800a95e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	08da      	lsrs	r2, r3, #3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3208      	adds	r2, #8
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f003 0307 	and.w	r3, r3, #7
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	220f      	movs	r2, #15
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	43db      	mvns	r3, r3
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	4013      	ands	r3, r2
 800a938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	08da      	lsrs	r2, r3, #3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3208      	adds	r2, #8
 800a958:	6939      	ldr	r1, [r7, #16]
 800a95a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	2203      	movs	r2, #3
 800a96a:	fa02 f303 	lsl.w	r3, r2, r3
 800a96e:	43db      	mvns	r3, r3
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	4013      	ands	r3, r2
 800a974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f003 0203 	and.w	r2, r3, #3
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	fa02 f303 	lsl.w	r3, r2, r3
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	4313      	orrs	r3, r2
 800a98a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 80a6 	beq.w	800aaec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9a0:	4b5b      	ldr	r3, [pc, #364]	; (800ab10 <HAL_GPIO_Init+0x2e4>)
 800a9a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a4:	4a5a      	ldr	r2, [pc, #360]	; (800ab10 <HAL_GPIO_Init+0x2e4>)
 800a9a6:	f043 0301 	orr.w	r3, r3, #1
 800a9aa:	6613      	str	r3, [r2, #96]	; 0x60
 800a9ac:	4b58      	ldr	r3, [pc, #352]	; (800ab10 <HAL_GPIO_Init+0x2e4>)
 800a9ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	60bb      	str	r3, [r7, #8]
 800a9b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a9b8:	4a56      	ldr	r2, [pc, #344]	; (800ab14 <HAL_GPIO_Init+0x2e8>)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	089b      	lsrs	r3, r3, #2
 800a9be:	3302      	adds	r3, #2
 800a9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f003 0303 	and.w	r3, r3, #3
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	220f      	movs	r2, #15
 800a9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d4:	43db      	mvns	r3, r3
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a9e2:	d01f      	beq.n	800aa24 <HAL_GPIO_Init+0x1f8>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a4c      	ldr	r2, [pc, #304]	; (800ab18 <HAL_GPIO_Init+0x2ec>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d019      	beq.n	800aa20 <HAL_GPIO_Init+0x1f4>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a4b      	ldr	r2, [pc, #300]	; (800ab1c <HAL_GPIO_Init+0x2f0>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d013      	beq.n	800aa1c <HAL_GPIO_Init+0x1f0>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a4a      	ldr	r2, [pc, #296]	; (800ab20 <HAL_GPIO_Init+0x2f4>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00d      	beq.n	800aa18 <HAL_GPIO_Init+0x1ec>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a49      	ldr	r2, [pc, #292]	; (800ab24 <HAL_GPIO_Init+0x2f8>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d007      	beq.n	800aa14 <HAL_GPIO_Init+0x1e8>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a48      	ldr	r2, [pc, #288]	; (800ab28 <HAL_GPIO_Init+0x2fc>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d101      	bne.n	800aa10 <HAL_GPIO_Init+0x1e4>
 800aa0c:	2305      	movs	r3, #5
 800aa0e:	e00a      	b.n	800aa26 <HAL_GPIO_Init+0x1fa>
 800aa10:	2306      	movs	r3, #6
 800aa12:	e008      	b.n	800aa26 <HAL_GPIO_Init+0x1fa>
 800aa14:	2304      	movs	r3, #4
 800aa16:	e006      	b.n	800aa26 <HAL_GPIO_Init+0x1fa>
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e004      	b.n	800aa26 <HAL_GPIO_Init+0x1fa>
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	e002      	b.n	800aa26 <HAL_GPIO_Init+0x1fa>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <HAL_GPIO_Init+0x1fa>
 800aa24:	2300      	movs	r3, #0
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	f002 0203 	and.w	r2, r2, #3
 800aa2c:	0092      	lsls	r2, r2, #2
 800aa2e:	4093      	lsls	r3, r2
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa36:	4937      	ldr	r1, [pc, #220]	; (800ab14 <HAL_GPIO_Init+0x2e8>)
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	089b      	lsrs	r3, r3, #2
 800aa3c:	3302      	adds	r3, #2
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa44:	4b39      	ldr	r3, [pc, #228]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	43db      	mvns	r3, r3
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4013      	ands	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800aa68:	4a30      	ldr	r2, [pc, #192]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800aa6e:	4b2f      	ldr	r3, [pc, #188]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	43db      	mvns	r3, r3
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800aa92:	4a26      	ldr	r2, [pc, #152]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800aa98:	4b24      	ldr	r3, [pc, #144]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	43db      	mvns	r3, r3
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d003      	beq.n	800aabc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800aabc:	4a1b      	ldr	r2, [pc, #108]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800aac2:	4b1a      	ldr	r3, [pc, #104]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	43db      	mvns	r3, r3
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	4013      	ands	r3, r2
 800aad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800aae6:	4a11      	ldr	r2, [pc, #68]	; (800ab2c <HAL_GPIO_Init+0x300>)
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	fa22 f303 	lsr.w	r3, r2, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f47f ae9d 	bne.w	800a83c <HAL_GPIO_Init+0x10>
  }
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	40021000 	.word	0x40021000
 800ab14:	40010000 	.word	0x40010000
 800ab18:	48000400 	.word	0x48000400
 800ab1c:	48000800 	.word	0x48000800
 800ab20:	48000c00 	.word	0x48000c00
 800ab24:	48001000 	.word	0x48001000
 800ab28:	48001400 	.word	0x48001400
 800ab2c:	40010400 	.word	0x40010400

0800ab30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	807b      	strh	r3, [r7, #2]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ab40:	787b      	ldrb	r3, [r7, #1]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ab46:	887a      	ldrh	r2, [r7, #2]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ab4c:	e002      	b.n	800ab54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ab4e:	887a      	ldrh	r2, [r7, #2]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ab72:	887a      	ldrh	r2, [r7, #2]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4013      	ands	r3, r2
 800ab78:	041a      	lsls	r2, r3, #16
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	43d9      	mvns	r1, r3
 800ab7e:	887b      	ldrh	r3, [r7, #2]
 800ab80:	400b      	ands	r3, r1
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	619a      	str	r2, [r3, #24]
}
 800ab88:	bf00      	nop
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e08d      	b.n	800acc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7f6 ff8e 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2224      	movs	r2, #36	; 0x24
 800abc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0201 	bic.w	r2, r2, #1
 800abd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800abe4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d107      	bne.n	800ac0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	689a      	ldr	r2, [r3, #8]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac0a:	609a      	str	r2, [r3, #8]
 800ac0c:	e006      	b.n	800ac1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	689a      	ldr	r2, [r3, #8]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ac1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d108      	bne.n	800ac36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac32:	605a      	str	r2, [r3, #4]
 800ac34:	e007      	b.n	800ac46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6812      	ldr	r2, [r2, #0]
 800ac50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ac54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68da      	ldr	r2, [r3, #12]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691a      	ldr	r2, [r3, #16]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	430a      	orrs	r2, r1
 800ac82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	69d9      	ldr	r1, [r3, #28]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a1a      	ldr	r2, [r3, #32]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f042 0201 	orr.w	r2, r2, #1
 800aca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2220      	movs	r2, #32
 800acae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af02      	add	r7, sp, #8
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	4608      	mov	r0, r1
 800acd6:	4611      	mov	r1, r2
 800acd8:	461a      	mov	r2, r3
 800acda:	4603      	mov	r3, r0
 800acdc:	817b      	strh	r3, [r7, #10]
 800acde:	460b      	mov	r3, r1
 800ace0:	813b      	strh	r3, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b20      	cmp	r3, #32
 800acf0:	f040 80fd 	bne.w	800aeee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <HAL_I2C_Mem_Read+0x34>
 800acfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d105      	bne.n	800ad0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e0f1      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d101      	bne.n	800ad1a <HAL_I2C_Mem_Read+0x4e>
 800ad16:	2302      	movs	r3, #2
 800ad18:	e0ea      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad22:	f7fe fd37 	bl	8009794 <HAL_GetTick>
 800ad26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	2319      	movs	r3, #25
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 fee4 	bl	800bb02 <I2C_WaitOnFlagUntilTimeout>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e0d5      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2222      	movs	r2, #34	; 0x22
 800ad48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2240      	movs	r2, #64	; 0x40
 800ad50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6a3a      	ldr	r2, [r7, #32]
 800ad5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad6c:	88f8      	ldrh	r0, [r7, #6]
 800ad6e:	893a      	ldrh	r2, [r7, #8]
 800ad70:	8979      	ldrh	r1, [r7, #10]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 fa7b 	bl	800b278 <I2C_RequestMemoryRead>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e0ad      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	2bff      	cmp	r3, #255	; 0xff
 800ad9c:	d90e      	bls.n	800adbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	22ff      	movs	r2, #255	; 0xff
 800ada2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	8979      	ldrh	r1, [r7, #10]
 800adac:	4b52      	ldr	r3, [pc, #328]	; (800aef8 <HAL_I2C_Mem_Read+0x22c>)
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f001 f867 	bl	800be88 <I2C_TransferConfig>
 800adba:	e00f      	b.n	800addc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	8979      	ldrh	r1, [r7, #10]
 800adce:	4b4a      	ldr	r3, [pc, #296]	; (800aef8 <HAL_I2C_Mem_Read+0x22c>)
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f001 f856 	bl	800be88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	2200      	movs	r2, #0
 800ade4:	2104      	movs	r1, #4
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 fe8b 	bl	800bb02 <I2C_WaitOnFlagUntilTimeout>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e07c      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	b2d2      	uxtb	r2, r2
 800ae02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae12:	3b01      	subs	r3, #1
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	3b01      	subs	r3, #1
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d034      	beq.n	800ae9c <HAL_I2C_Mem_Read+0x1d0>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d130      	bne.n	800ae9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	2200      	movs	r2, #0
 800ae42:	2180      	movs	r1, #128	; 0x80
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 fe5c 	bl	800bb02 <I2C_WaitOnFlagUntilTimeout>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e04d      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	2bff      	cmp	r3, #255	; 0xff
 800ae5c:	d90e      	bls.n	800ae7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	22ff      	movs	r2, #255	; 0xff
 800ae62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	8979      	ldrh	r1, [r7, #10]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f001 f807 	bl	800be88 <I2C_TransferConfig>
 800ae7a:	e00f      	b.n	800ae9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	8979      	ldrh	r1, [r7, #10]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f000 fff6 	bl	800be88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d19a      	bne.n	800addc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f000 fec9 	bl	800bc42 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e01a      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2220      	movs	r2, #32
 800aec0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6859      	ldr	r1, [r3, #4]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <HAL_I2C_Mem_Read+0x230>)
 800aece:	400b      	ands	r3, r1
 800aed0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	e000      	b.n	800aef0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aeee:	2302      	movs	r3, #2
  }
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	80002400 	.word	0x80002400
 800aefc:	fe00e800 	.word	0xfe00e800

0800af00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d005      	beq.n	800af2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	68f9      	ldr	r1, [r7, #12]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	4798      	blx	r3
  }
}
 800af2c:	bf00      	nop
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00f      	beq.n	800af76 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00a      	beq.n	800af76 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af64:	f043 0201 	orr.w	r2, r3, #1
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00f      	beq.n	800afa0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8e:	f043 0208 	orr.w	r2, r3, #8
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00f      	beq.n	800afca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00a      	beq.n	800afca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb8:	f043 0202 	orr.w	r2, r3, #2
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afc8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f003 030b 	and.w	r3, r3, #11
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800afda:	68f9      	ldr	r1, [r7, #12]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fc37 	bl	800b850 <I2C_ITError>
  }
}
 800afe2:	bf00      	nop
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afea:	b480      	push	{r7}
 800afec:	b083      	sub	sp, #12
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800aff2:	bf00      	nop
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
 800b01e:	4613      	mov	r3, r2
 800b020:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b04a:	bf00      	nop
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b078:	b2db      	uxtb	r3, r3
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b086      	sub	sp, #24
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d101      	bne.n	800b0aa <I2C_Slave_ISR_IT+0x24>
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	e0e2      	b.n	800b270 <I2C_Slave_ISR_IT+0x1ea>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f003 0320 	and.w	r3, r3, #32
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d009      	beq.n	800b0d0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b0c6:	6939      	ldr	r1, [r7, #16]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 fa09 	bl	800b4e0 <I2C_ITSlaveCplt>
 800b0ce:	e0ca      	b.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f003 0310 	and.w	r3, r3, #16
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d04b      	beq.n	800b172 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d046      	beq.n	800b172 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d128      	bne.n	800b140 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b28      	cmp	r3, #40	; 0x28
 800b0f8:	d108      	bne.n	800b10c <I2C_Slave_ISR_IT+0x86>
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b100:	d104      	bne.n	800b10c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b102:	6939      	ldr	r1, [r7, #16]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 fb4f 	bl	800b7a8 <I2C_ITListenCplt>
 800b10a:	e031      	b.n	800b170 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b29      	cmp	r3, #41	; 0x29
 800b116:	d10e      	bne.n	800b136 <I2C_Slave_ISR_IT+0xb0>
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b11e:	d00a      	beq.n	800b136 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2210      	movs	r2, #16
 800b126:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 fca8 	bl	800ba7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f000 f97a 	bl	800b428 <I2C_ITSlaveSeqCplt>
 800b134:	e01c      	b.n	800b170 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2210      	movs	r2, #16
 800b13c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b13e:	e08f      	b.n	800b260 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2210      	movs	r2, #16
 800b146:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b14c:	f043 0204 	orr.w	r2, r3, #4
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <I2C_Slave_ISR_IT+0xdc>
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b160:	d17e      	bne.n	800b260 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b166:	4619      	mov	r1, r3
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 fb71 	bl	800b850 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b16e:	e077      	b.n	800b260 <I2C_Slave_ISR_IT+0x1da>
 800b170:	e076      	b.n	800b260 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d02f      	beq.n	800b1dc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b182:	2b00      	cmp	r3, #0
 800b184:	d02a      	beq.n	800b1dc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d018      	beq.n	800b1c2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d14b      	bne.n	800b264 <I2C_Slave_ISR_IT+0x1de>
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b1d2:	d047      	beq.n	800b264 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 f927 	bl	800b428 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b1da:	e043      	b.n	800b264 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d009      	beq.n	800b1fa <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d004      	beq.n	800b1fa <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b1f0:	6939      	ldr	r1, [r7, #16]
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 f894 	bl	800b320 <I2C_ITAddrCplt>
 800b1f8:	e035      	b.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d030      	beq.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d02b      	beq.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b212:	b29b      	uxth	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d018      	beq.n	800b24a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	781a      	ldrb	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b232:	b29b      	uxth	r3, r3
 800b234:	3b01      	subs	r3, #1
 800b236:	b29a      	uxth	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b240:	3b01      	subs	r3, #1
 800b242:	b29a      	uxth	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	851a      	strh	r2, [r3, #40]	; 0x28
 800b248:	e00d      	b.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b250:	d002      	beq.n	800b258 <I2C_Slave_ISR_IT+0x1d2>
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d106      	bne.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f000 f8e5 	bl	800b428 <I2C_ITSlaveSeqCplt>
 800b25e:	e002      	b.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800b260:	bf00      	nop
 800b262:	e000      	b.n	800b266 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800b264:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	4608      	mov	r0, r1
 800b282:	4611      	mov	r1, r2
 800b284:	461a      	mov	r2, r3
 800b286:	4603      	mov	r3, r0
 800b288:	817b      	strh	r3, [r7, #10]
 800b28a:	460b      	mov	r3, r1
 800b28c:	813b      	strh	r3, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b292:	88fb      	ldrh	r3, [r7, #6]
 800b294:	b2da      	uxtb	r2, r3
 800b296:	8979      	ldrh	r1, [r7, #10]
 800b298:	4b20      	ldr	r3, [pc, #128]	; (800b31c <I2C_RequestMemoryRead+0xa4>)
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	2300      	movs	r3, #0
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f000 fdf2 	bl	800be88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2a4:	69fa      	ldr	r2, [r7, #28]
 800b2a6:	69b9      	ldr	r1, [r7, #24]
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 fc83 	bl	800bbb4 <I2C_WaitOnTXISFlagUntilTimeout>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e02c      	b.n	800b312 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b2b8:	88fb      	ldrh	r3, [r7, #6]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d105      	bne.n	800b2ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b2be:	893b      	ldrh	r3, [r7, #8]
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	629a      	str	r2, [r3, #40]	; 0x28
 800b2c8:	e015      	b.n	800b2f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b2ca:	893b      	ldrh	r3, [r7, #8]
 800b2cc:	0a1b      	lsrs	r3, r3, #8
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2d8:	69fa      	ldr	r2, [r7, #28]
 800b2da:	69b9      	ldr	r1, [r7, #24]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 fc69 	bl	800bbb4 <I2C_WaitOnTXISFlagUntilTimeout>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e012      	b.n	800b312 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b2ec:	893b      	ldrh	r3, [r7, #8]
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2140      	movs	r1, #64	; 0x40
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 fbfe 	bl	800bb02 <I2C_WaitOnFlagUntilTimeout>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e000      	b.n	800b312 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	80002000 	.word	0x80002000

0800b320 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b330:	b2db      	uxtb	r3, r3
 800b332:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b336:	2b28      	cmp	r3, #40	; 0x28
 800b338:	d16a      	bne.n	800b410 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	0c1b      	lsrs	r3, r3, #16
 800b342:	b2db      	uxtb	r3, r3
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	0c1b      	lsrs	r3, r3, #16
 800b352:	b29b      	uxth	r3, r3
 800b354:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b358:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	b29b      	uxth	r3, r3
 800b362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b366:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	b29b      	uxth	r3, r3
 800b370:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b374:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d138      	bne.n	800b3f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b37e:	897b      	ldrh	r3, [r7, #10]
 800b380:	09db      	lsrs	r3, r3, #7
 800b382:	b29a      	uxth	r2, r3
 800b384:	89bb      	ldrh	r3, [r7, #12]
 800b386:	4053      	eors	r3, r2
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f003 0306 	and.w	r3, r3, #6
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d11c      	bne.n	800b3cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b392:	897b      	ldrh	r3, [r7, #10]
 800b394:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d13b      	bne.n	800b420 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2208      	movs	r2, #8
 800b3b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b3be:	89ba      	ldrh	r2, [r7, #12]
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff fe24 	bl	800b012 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b3ca:	e029      	b.n	800b420 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b3cc:	893b      	ldrh	r3, [r7, #8]
 800b3ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b3d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fd89 	bl	800beec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b3e2:	89ba      	ldrh	r2, [r7, #12]
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff fe12 	bl	800b012 <HAL_I2C_AddrCallback>
}
 800b3ee:	e017      	b.n	800b420 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b3f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fd79 	bl	800beec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b402:	89ba      	ldrh	r2, [r7, #12]
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff fe02 	bl	800b012 <HAL_I2C_AddrCallback>
}
 800b40e:	e007      	b.n	800b420 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2208      	movs	r2, #8
 800b416:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b446:	2b00      	cmp	r3, #0
 800b448:	d008      	beq.n	800b45c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	e00c      	b.n	800b476 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d007      	beq.n	800b476 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b474:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b29      	cmp	r3, #41	; 0x29
 800b480:	d112      	bne.n	800b4a8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2228      	movs	r2, #40	; 0x28
 800b486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2221      	movs	r2, #33	; 0x21
 800b48e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b490:	2101      	movs	r1, #1
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fd2a 	bl	800beec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff fda2 	bl	800afea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b4a6:	e017      	b.n	800b4d8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b2:	d111      	bne.n	800b4d8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2228      	movs	r2, #40	; 0x28
 800b4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2222      	movs	r2, #34	; 0x22
 800b4c0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b4c2:	2102      	movs	r1, #2
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fd11 	bl	800beec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff fd93 	bl	800affe <HAL_I2C_SlaveRxCpltCallback>
}
 800b4d8:	bf00      	nop
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b502:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2220      	movs	r2, #32
 800b50a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b50c:	7afb      	ldrb	r3, [r7, #11]
 800b50e:	2b21      	cmp	r3, #33	; 0x21
 800b510:	d002      	beq.n	800b518 <I2C_ITSlaveCplt+0x38>
 800b512:	7afb      	ldrb	r3, [r7, #11]
 800b514:	2b29      	cmp	r3, #41	; 0x29
 800b516:	d108      	bne.n	800b52a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b518:	f248 0101 	movw	r1, #32769	; 0x8001
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fce5 	bl	800beec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2221      	movs	r2, #33	; 0x21
 800b526:	631a      	str	r2, [r3, #48]	; 0x30
 800b528:	e019      	b.n	800b55e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b52a:	7afb      	ldrb	r3, [r7, #11]
 800b52c:	2b22      	cmp	r3, #34	; 0x22
 800b52e:	d002      	beq.n	800b536 <I2C_ITSlaveCplt+0x56>
 800b530:	7afb      	ldrb	r3, [r7, #11]
 800b532:	2b2a      	cmp	r3, #42	; 0x2a
 800b534:	d108      	bne.n	800b548 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b536:	f248 0102 	movw	r1, #32770	; 0x8002
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fcd6 	bl	800beec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2222      	movs	r2, #34	; 0x22
 800b544:	631a      	str	r2, [r3, #48]	; 0x30
 800b546:	e00a      	b.n	800b55e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	2b28      	cmp	r3, #40	; 0x28
 800b54c:	d107      	bne.n	800b55e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b54e:	f248 0103 	movw	r1, #32771	; 0x8003
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fcca 	bl	800beec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685a      	ldr	r2, [r3, #4]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b56c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6859      	ldr	r1, [r3, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	4b89      	ldr	r3, [pc, #548]	; (800b7a0 <I2C_ITSlaveCplt+0x2c0>)
 800b57a:	400b      	ands	r3, r1
 800b57c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fa7d 	bl	800ba7e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d013      	beq.n	800b5b6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b59c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d01f      	beq.n	800b5e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5b4:	e017      	b.n	800b5e6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d012      	beq.n	800b5e6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b5ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d020      	beq.n	800b632 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	f023 0304 	bic.w	r3, r3, #4
 800b5f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b602:	b2d2      	uxtb	r2, r2
 800b604:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00c      	beq.n	800b632 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b29a      	uxth	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b628:	b29b      	uxth	r3, r3
 800b62a:	3b01      	subs	r3, #1
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b636:	b29b      	uxth	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d005      	beq.n	800b648 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b640:	f043 0204 	orr.w	r2, r3, #4
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f003 0310 	and.w	r3, r3, #16
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d049      	beq.n	800b6e6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d044      	beq.n	800b6e6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b660:	b29b      	uxth	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d128      	bne.n	800b6b8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b28      	cmp	r3, #40	; 0x28
 800b670:	d108      	bne.n	800b684 <I2C_ITSlaveCplt+0x1a4>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b678:	d104      	bne.n	800b684 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b67a:	6979      	ldr	r1, [r7, #20]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f893 	bl	800b7a8 <I2C_ITListenCplt>
 800b682:	e030      	b.n	800b6e6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b29      	cmp	r3, #41	; 0x29
 800b68e:	d10e      	bne.n	800b6ae <I2C_ITSlaveCplt+0x1ce>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b696:	d00a      	beq.n	800b6ae <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2210      	movs	r2, #16
 800b69e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f9ec 	bl	800ba7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff febe 	bl	800b428 <I2C_ITSlaveSeqCplt>
 800b6ac:	e01b      	b.n	800b6e6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2210      	movs	r2, #16
 800b6b4:	61da      	str	r2, [r3, #28]
 800b6b6:	e016      	b.n	800b6e6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2210      	movs	r2, #16
 800b6be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c4:	f043 0204 	orr.w	r2, r3, #4
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <I2C_ITSlaveCplt+0x1fa>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6d8:	d105      	bne.n	800b6e6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f8b5 	bl	800b850 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d010      	beq.n	800b71e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b700:	4619      	mov	r1, r3
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f8a4 	bl	800b850 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b28      	cmp	r3, #40	; 0x28
 800b712:	d141      	bne.n	800b798 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b714:	6979      	ldr	r1, [r7, #20]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f846 	bl	800b7a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b71c:	e03c      	b.n	800b798 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b722:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b726:	d014      	beq.n	800b752 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff fe7d 	bl	800b428 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a1c      	ldr	r2, [pc, #112]	; (800b7a4 <I2C_ITSlaveCplt+0x2c4>)
 800b732:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2220      	movs	r2, #32
 800b738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7ff fc6f 	bl	800b02e <HAL_I2C_ListenCpltCallback>
}
 800b750:	e022      	b.n	800b798 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b22      	cmp	r3, #34	; 0x22
 800b75c:	d10e      	bne.n	800b77c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2220      	movs	r2, #32
 800b762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff fc42 	bl	800affe <HAL_I2C_SlaveRxCpltCallback>
}
 800b77a:	e00d      	b.n	800b798 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2220      	movs	r2, #32
 800b780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff fc29 	bl	800afea <HAL_I2C_SlaveTxCpltCallback>
}
 800b798:	bf00      	nop
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	fe00e800 	.word	0xfe00e800
 800b7a4:	ffff0000 	.word	0xffff0000

0800b7a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a25      	ldr	r2, [pc, #148]	; (800b84c <I2C_ITListenCplt+0xa4>)
 800b7b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2220      	movs	r2, #32
 800b7c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	f003 0304 	and.w	r3, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d022      	beq.n	800b824 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d012      	beq.n	800b824 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b802:	3b01      	subs	r3, #1
 800b804:	b29a      	uxth	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b80e:	b29b      	uxth	r3, r3
 800b810:	3b01      	subs	r3, #1
 800b812:	b29a      	uxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81c:	f043 0204 	orr.w	r2, r3, #4
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b824:	f248 0103 	movw	r1, #32771	; 0x8003
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fb5f 	bl	800beec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2210      	movs	r2, #16
 800b834:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff fbf5 	bl	800b02e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	ffff0000 	.word	0xffff0000

0800b850 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b860:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a6d      	ldr	r2, [pc, #436]	; (800ba24 <I2C_ITError+0x1d4>)
 800b86e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	431a      	orrs	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b882:	7bfb      	ldrb	r3, [r7, #15]
 800b884:	2b28      	cmp	r3, #40	; 0x28
 800b886:	d005      	beq.n	800b894 <I2C_ITError+0x44>
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	2b29      	cmp	r3, #41	; 0x29
 800b88c:	d002      	beq.n	800b894 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	2b2a      	cmp	r3, #42	; 0x2a
 800b892:	d10b      	bne.n	800b8ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b894:	2103      	movs	r1, #3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fb28 	bl	800beec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2228      	movs	r2, #40	; 0x28
 800b8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a60      	ldr	r2, [pc, #384]	; (800ba28 <I2C_ITError+0x1d8>)
 800b8a8:	635a      	str	r2, [r3, #52]	; 0x34
 800b8aa:	e030      	b.n	800b90e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b8ac:	f248 0103 	movw	r1, #32771	; 0x8003
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fb1b 	bl	800beec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f8e1 	bl	800ba7e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b60      	cmp	r3, #96	; 0x60
 800b8c6:	d01f      	beq.n	800b908 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	f003 0320 	and.w	r3, r3, #32
 800b8da:	2b20      	cmp	r3, #32
 800b8dc:	d114      	bne.n	800b908 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	f003 0310 	and.w	r3, r3, #16
 800b8e8:	2b10      	cmp	r3, #16
 800b8ea:	d109      	bne.n	800b900 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2210      	movs	r2, #16
 800b8f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f8:	f043 0204 	orr.w	r2, r3, #4
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2220      	movs	r2, #32
 800b906:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b912:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d039      	beq.n	800b990 <I2C_ITError+0x140>
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b11      	cmp	r3, #17
 800b920:	d002      	beq.n	800b928 <I2C_ITError+0xd8>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2b21      	cmp	r3, #33	; 0x21
 800b926:	d133      	bne.n	800b990 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b936:	d107      	bne.n	800b948 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b946:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe fa76 	bl	8009e3e <HAL_DMA_GetState>
 800b952:	4603      	mov	r3, r0
 800b954:	2b01      	cmp	r3, #1
 800b956:	d017      	beq.n	800b988 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95c:	4a33      	ldr	r2, [pc, #204]	; (800ba2c <I2C_ITError+0x1dc>)
 800b95e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe f950 	bl	8009c12 <HAL_DMA_Abort_IT>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d04d      	beq.n	800ba14 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b982:	4610      	mov	r0, r2
 800b984:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b986:	e045      	b.n	800ba14 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f851 	bl	800ba30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b98e:	e041      	b.n	800ba14 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d039      	beq.n	800ba0c <I2C_ITError+0x1bc>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b12      	cmp	r3, #18
 800b99c:	d002      	beq.n	800b9a4 <I2C_ITError+0x154>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2b22      	cmp	r3, #34	; 0x22
 800b9a2:	d133      	bne.n	800ba0c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9b2:	d107      	bne.n	800b9c4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b9c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fa38 	bl	8009e3e <HAL_DMA_GetState>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d017      	beq.n	800ba04 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d8:	4a14      	ldr	r2, [pc, #80]	; (800ba2c <I2C_ITError+0x1dc>)
 800b9da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe f912 	bl	8009c12 <HAL_DMA_Abort_IT>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d011      	beq.n	800ba18 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b9fe:	4610      	mov	r0, r2
 800ba00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ba02:	e009      	b.n	800ba18 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f813 	bl	800ba30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ba0a:	e005      	b.n	800ba18 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f80f 	bl	800ba30 <I2C_TreatErrorCallback>
  }
}
 800ba12:	e002      	b.n	800ba1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ba14:	bf00      	nop
 800ba16:	e000      	b.n	800ba1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ba18:	bf00      	nop
}
 800ba1a:	bf00      	nop
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	ffff0000 	.word	0xffff0000
 800ba28:	0800b087 	.word	0x0800b087
 800ba2c:	0800bac7 	.word	0x0800bac7

0800ba30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b60      	cmp	r3, #96	; 0x60
 800ba42:	d10e      	bne.n	800ba62 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fafb 	bl	800b056 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ba60:	e009      	b.n	800ba76 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7ff fae6 	bl	800b042 <HAL_I2C_ErrorCallback>
}
 800ba76:	bf00      	nop
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d103      	bne.n	800ba9c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d007      	beq.n	800baba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	699a      	ldr	r2, [r3, #24]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f042 0201 	orr.w	r2, r2, #1
 800bab8:	619a      	str	r2, [r3, #24]
  }
}
 800baba:	bf00      	nop
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae0:	2200      	movs	r2, #0
 800bae2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf0:	2200      	movs	r2, #0
 800baf2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff ff9b 	bl	800ba30 <I2C_TreatErrorCallback>
}
 800bafa:	bf00      	nop
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	603b      	str	r3, [r7, #0]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb12:	e03b      	b.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 f8d5 	bl	800bcc8 <I2C_IsErrorOccurred>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e041      	b.n	800bbac <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d02d      	beq.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb30:	f7fd fe30 	bl	8009794 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d302      	bcc.n	800bb46 <I2C_WaitOnFlagUntilTimeout+0x44>
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d122      	bne.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	699a      	ldr	r2, [r3, #24]
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	4013      	ands	r3, r2
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	bf0c      	ite	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	2300      	movne	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d113      	bne.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb68:	f043 0220 	orr.w	r2, r3, #32
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e00f      	b.n	800bbac <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	699a      	ldr	r2, [r3, #24]
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	4013      	ands	r3, r2
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2301      	moveq	r3, #1
 800bb9e:	2300      	movne	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d0b4      	beq.n	800bb14 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbc0:	e033      	b.n	800bc2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	68b9      	ldr	r1, [r7, #8]
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 f87e 	bl	800bcc8 <I2C_IsErrorOccurred>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e031      	b.n	800bc3a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbdc:	d025      	beq.n	800bc2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbde:	f7fd fdd9 	bl	8009794 <HAL_GetTick>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d302      	bcc.n	800bbf4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d11a      	bne.n	800bc2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d013      	beq.n	800bc2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc06:	f043 0220 	orr.w	r2, r3, #32
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2220      	movs	r2, #32
 800bc12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e007      	b.n	800bc3a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	f003 0302 	and.w	r3, r3, #2
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d1c4      	bne.n	800bbc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	60f8      	str	r0, [r7, #12]
 800bc4a:	60b9      	str	r1, [r7, #8]
 800bc4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc4e:	e02f      	b.n	800bcb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 f837 	bl	800bcc8 <I2C_IsErrorOccurred>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e02d      	b.n	800bcc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc64:	f7fd fd96 	bl	8009794 <HAL_GetTick>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d302      	bcc.n	800bc7a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d11a      	bne.n	800bcb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	f003 0320 	and.w	r3, r3, #32
 800bc84:	2b20      	cmp	r3, #32
 800bc86:	d013      	beq.n	800bcb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8c:	f043 0220 	orr.w	r2, r3, #32
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2220      	movs	r2, #32
 800bc98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e007      	b.n	800bcc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	699b      	ldr	r3, [r3, #24]
 800bcb6:	f003 0320 	and.w	r3, r3, #32
 800bcba:	2b20      	cmp	r3, #32
 800bcbc:	d1c8      	bne.n	800bc50 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	; 0x28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	f003 0310 	and.w	r3, r3, #16
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d068      	beq.n	800bdc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2210      	movs	r2, #16
 800bcfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bcfc:	e049      	b.n	800bd92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d045      	beq.n	800bd92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bd06:	f7fd fd45 	bl	8009794 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d302      	bcc.n	800bd1c <I2C_IsErrorOccurred+0x54>
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d13a      	bne.n	800bd92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd3e:	d121      	bne.n	800bd84 <I2C_IsErrorOccurred+0xbc>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd46:	d01d      	beq.n	800bd84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bd48:	7cfb      	ldrb	r3, [r7, #19]
 800bd4a:	2b20      	cmp	r3, #32
 800bd4c:	d01a      	beq.n	800bd84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bd5e:	f7fd fd19 	bl	8009794 <HAL_GetTick>
 800bd62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd64:	e00e      	b.n	800bd84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bd66:	f7fd fd15 	bl	8009794 <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	2b19      	cmp	r3, #25
 800bd72:	d907      	bls.n	800bd84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	f043 0320 	orr.w	r3, r3, #32
 800bd7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800bd82:	e006      	b.n	800bd92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f003 0320 	and.w	r3, r3, #32
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	d1e9      	bne.n	800bd66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	f003 0320 	and.w	r3, r3, #32
 800bd9c:	2b20      	cmp	r3, #32
 800bd9e:	d003      	beq.n	800bda8 <I2C_IsErrorOccurred+0xe0>
 800bda0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0aa      	beq.n	800bcfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2220      	movs	r2, #32
 800bdb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	f043 0304 	orr.w	r3, r3, #4
 800bdbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00b      	beq.n	800bdf0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bde8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00b      	beq.n	800be12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	f043 0308 	orr.w	r3, r3, #8
 800be00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	f043 0302 	orr.w	r3, r3, #2
 800be22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800be34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01c      	beq.n	800be76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff fe1e 	bl	800ba7e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6859      	ldr	r1, [r3, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <I2C_IsErrorOccurred+0x1bc>)
 800be4e:	400b      	ands	r3, r1
 800be50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	431a      	orrs	r2, r3
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2220      	movs	r2, #32
 800be62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800be76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3728      	adds	r7, #40	; 0x28
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	fe00e800 	.word	0xfe00e800

0800be88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	607b      	str	r3, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	817b      	strh	r3, [r7, #10]
 800be96:	4613      	mov	r3, r2
 800be98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be9a:	897b      	ldrh	r3, [r7, #10]
 800be9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bea0:	7a7b      	ldrb	r3, [r7, #9]
 800bea2:	041b      	lsls	r3, r3, #16
 800bea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bea8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800beb6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	0d5b      	lsrs	r3, r3, #21
 800bec2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bec6:	4b08      	ldr	r3, [pc, #32]	; (800bee8 <I2C_TransferConfig+0x60>)
 800bec8:	430b      	orrs	r3, r1
 800beca:	43db      	mvns	r3, r3
 800becc:	ea02 0103 	and.w	r1, r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800beda:	bf00      	nop
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	03ff63ff 	.word	0x03ff63ff

0800beec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800befc:	887b      	ldrh	r3, [r7, #2]
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00f      	beq.n	800bf26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800bf0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bf1a:	2b28      	cmp	r3, #40	; 0x28
 800bf1c:	d003      	beq.n	800bf26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bf24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bf26:	887b      	ldrh	r3, [r7, #2]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00f      	beq.n	800bf50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800bf36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bf44:	2b28      	cmp	r3, #40	; 0x28
 800bf46:	d003      	beq.n	800bf50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bf4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bf50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	da03      	bge.n	800bf60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bf5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bf60:	887b      	ldrh	r3, [r7, #2]
 800bf62:	2b10      	cmp	r3, #16
 800bf64:	d103      	bne.n	800bf6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bf6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bf6e:	887b      	ldrh	r3, [r7, #2]
 800bf70:	2b20      	cmp	r3, #32
 800bf72:	d103      	bne.n	800bf7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f043 0320 	orr.w	r3, r3, #32
 800bf7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bf7c:	887b      	ldrh	r3, [r7, #2]
 800bf7e:	2b40      	cmp	r3, #64	; 0x40
 800bf80:	d103      	bne.n	800bf8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6819      	ldr	r1, [r3, #0]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	43da      	mvns	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	400a      	ands	r2, r1
 800bf9a:	601a      	str	r2, [r3, #0]
}
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	d138      	bne.n	800c030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d101      	bne.n	800bfcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	e032      	b.n	800c032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2224      	movs	r2, #36	; 0x24
 800bfd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f022 0201 	bic.w	r2, r2, #1
 800bfea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6819      	ldr	r1, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	430a      	orrs	r2, r1
 800c00a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f042 0201 	orr.w	r2, r2, #1
 800c01a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2220      	movs	r2, #32
 800c020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	e000      	b.n	800c032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c030:	2302      	movs	r3, #2
  }
}
 800c032:	4618      	mov	r0, r3
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c03e:	b480      	push	{r7}
 800c040:	b085      	sub	sp, #20
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b20      	cmp	r3, #32
 800c052:	d139      	bne.n	800c0c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d101      	bne.n	800c062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c05e:	2302      	movs	r3, #2
 800c060:	e033      	b.n	800c0ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2224      	movs	r2, #36	; 0x24
 800c06e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f022 0201 	bic.w	r2, r2, #1
 800c080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	021b      	lsls	r3, r3, #8
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4313      	orrs	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f042 0201 	orr.w	r2, r2, #1
 800c0b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	e000      	b.n	800c0ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c0c8:	2302      	movs	r3, #2
  }
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d141      	bne.n	800c16a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c0e6:	4b4b      	ldr	r3, [pc, #300]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c0ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0f2:	d131      	bne.n	800c158 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c0f4:	4b47      	ldr	r3, [pc, #284]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fa:	4a46      	ldr	r2, [pc, #280]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c104:	4b43      	ldr	r3, [pc, #268]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c10c:	4a41      	ldr	r2, [pc, #260]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c10e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c114:	4b40      	ldr	r3, [pc, #256]	; (800c218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2232      	movs	r2, #50	; 0x32
 800c11a:	fb02 f303 	mul.w	r3, r2, r3
 800c11e:	4a3f      	ldr	r2, [pc, #252]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c120:	fba2 2303 	umull	r2, r3, r2, r3
 800c124:	0c9b      	lsrs	r3, r3, #18
 800c126:	3301      	adds	r3, #1
 800c128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c12a:	e002      	b.n	800c132 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3b01      	subs	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c132:	4b38      	ldr	r3, [pc, #224]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c13a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c13e:	d102      	bne.n	800c146 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1f2      	bne.n	800c12c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c146:	4b33      	ldr	r3, [pc, #204]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c14e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c152:	d158      	bne.n	800c206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c154:	2303      	movs	r3, #3
 800c156:	e057      	b.n	800c208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c158:	4b2e      	ldr	r3, [pc, #184]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c15e:	4a2d      	ldr	r2, [pc, #180]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c168:	e04d      	b.n	800c206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c170:	d141      	bne.n	800c1f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c172:	4b28      	ldr	r3, [pc, #160]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c17a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17e:	d131      	bne.n	800c1e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c180:	4b24      	ldr	r3, [pc, #144]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c186:	4a23      	ldr	r2, [pc, #140]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c18c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c190:	4b20      	ldr	r3, [pc, #128]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c198:	4a1e      	ldr	r2, [pc, #120]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c19a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c19e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1a0:	4b1d      	ldr	r3, [pc, #116]	; (800c218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2232      	movs	r2, #50	; 0x32
 800c1a6:	fb02 f303 	mul.w	r3, r2, r3
 800c1aa:	4a1c      	ldr	r2, [pc, #112]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b0:	0c9b      	lsrs	r3, r3, #18
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1b6:	e002      	b.n	800c1be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1be:	4b15      	ldr	r3, [pc, #84]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ca:	d102      	bne.n	800c1d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1f2      	bne.n	800c1b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c1d2:	4b10      	ldr	r3, [pc, #64]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1de:	d112      	bne.n	800c206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e011      	b.n	800c208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1e4:	4b0b      	ldr	r3, [pc, #44]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1ea:	4a0a      	ldr	r2, [pc, #40]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c1f4:	e007      	b.n	800c206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c1f6:	4b07      	ldr	r3, [pc, #28]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1fe:	4a05      	ldr	r2, [pc, #20]	; (800c214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c204:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	40007000 	.word	0x40007000
 800c218:	2000006c 	.word	0x2000006c
 800c21c:	431bde83 	.word	0x431bde83

0800c220 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c224:	4b05      	ldr	r3, [pc, #20]	; (800c23c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	4a04      	ldr	r2, [pc, #16]	; (800c23c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c22a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c22e:	6093      	str	r3, [r2, #8]
}
 800c230:	bf00      	nop
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	40007000 	.word	0x40007000

0800c240 <HAL_RCC_OscConfig>:
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <HAL_RCC_OscConfig+0x12>
 800c24e:	2301      	movs	r3, #1
 800c250:	e2fe      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d075      	beq.n	800c34a <HAL_RCC_OscConfig+0x10a>
 800c25e:	4b97      	ldr	r3, [pc, #604]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	f003 030c 	and.w	r3, r3, #12
 800c266:	61bb      	str	r3, [r7, #24]
 800c268:	4b94      	ldr	r3, [pc, #592]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	617b      	str	r3, [r7, #20]
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b0c      	cmp	r3, #12
 800c276:	d102      	bne.n	800c27e <HAL_RCC_OscConfig+0x3e>
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d002      	beq.n	800c284 <HAL_RCC_OscConfig+0x44>
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	2b08      	cmp	r3, #8
 800c282:	d10b      	bne.n	800c29c <HAL_RCC_OscConfig+0x5c>
 800c284:	4b8d      	ldr	r3, [pc, #564]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d05b      	beq.n	800c348 <HAL_RCC_OscConfig+0x108>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d157      	bne.n	800c348 <HAL_RCC_OscConfig+0x108>
 800c298:	2301      	movs	r3, #1
 800c29a:	e2d9      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2a4:	d106      	bne.n	800c2b4 <HAL_RCC_OscConfig+0x74>
 800c2a6:	4b85      	ldr	r3, [pc, #532]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a84      	ldr	r2, [pc, #528]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2b0:	6013      	str	r3, [r2, #0]
 800c2b2:	e01d      	b.n	800c2f0 <HAL_RCC_OscConfig+0xb0>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2bc:	d10c      	bne.n	800c2d8 <HAL_RCC_OscConfig+0x98>
 800c2be:	4b7f      	ldr	r3, [pc, #508]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a7e      	ldr	r2, [pc, #504]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	4b7c      	ldr	r3, [pc, #496]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a7b      	ldr	r2, [pc, #492]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	e00b      	b.n	800c2f0 <HAL_RCC_OscConfig+0xb0>
 800c2d8:	4b78      	ldr	r3, [pc, #480]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a77      	ldr	r2, [pc, #476]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	4b75      	ldr	r3, [pc, #468]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a74      	ldr	r2, [pc, #464]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c2ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d013      	beq.n	800c320 <HAL_RCC_OscConfig+0xe0>
 800c2f8:	f7fd fa4c 	bl	8009794 <HAL_GetTick>
 800c2fc:	6138      	str	r0, [r7, #16]
 800c2fe:	e008      	b.n	800c312 <HAL_RCC_OscConfig+0xd2>
 800c300:	f7fd fa48 	bl	8009794 <HAL_GetTick>
 800c304:	4602      	mov	r2, r0
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	2b64      	cmp	r3, #100	; 0x64
 800c30c:	d901      	bls.n	800c312 <HAL_RCC_OscConfig+0xd2>
 800c30e:	2303      	movs	r3, #3
 800c310:	e29e      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c312:	4b6a      	ldr	r3, [pc, #424]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d0f0      	beq.n	800c300 <HAL_RCC_OscConfig+0xc0>
 800c31e:	e014      	b.n	800c34a <HAL_RCC_OscConfig+0x10a>
 800c320:	f7fd fa38 	bl	8009794 <HAL_GetTick>
 800c324:	6138      	str	r0, [r7, #16]
 800c326:	e008      	b.n	800c33a <HAL_RCC_OscConfig+0xfa>
 800c328:	f7fd fa34 	bl	8009794 <HAL_GetTick>
 800c32c:	4602      	mov	r2, r0
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	2b64      	cmp	r3, #100	; 0x64
 800c334:	d901      	bls.n	800c33a <HAL_RCC_OscConfig+0xfa>
 800c336:	2303      	movs	r3, #3
 800c338:	e28a      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c33a:	4b60      	ldr	r3, [pc, #384]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1f0      	bne.n	800c328 <HAL_RCC_OscConfig+0xe8>
 800c346:	e000      	b.n	800c34a <HAL_RCC_OscConfig+0x10a>
 800c348:	bf00      	nop
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f003 0302 	and.w	r3, r3, #2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d075      	beq.n	800c442 <HAL_RCC_OscConfig+0x202>
 800c356:	4b59      	ldr	r3, [pc, #356]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	f003 030c 	and.w	r3, r3, #12
 800c35e:	61bb      	str	r3, [r7, #24]
 800c360:	4b56      	ldr	r3, [pc, #344]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f003 0303 	and.w	r3, r3, #3
 800c368:	617b      	str	r3, [r7, #20]
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	2b0c      	cmp	r3, #12
 800c36e:	d102      	bne.n	800c376 <HAL_RCC_OscConfig+0x136>
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d002      	beq.n	800c37c <HAL_RCC_OscConfig+0x13c>
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d11f      	bne.n	800c3bc <HAL_RCC_OscConfig+0x17c>
 800c37c:	4b4f      	ldr	r3, [pc, #316]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c384:	2b00      	cmp	r3, #0
 800c386:	d005      	beq.n	800c394 <HAL_RCC_OscConfig+0x154>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <HAL_RCC_OscConfig+0x154>
 800c390:	2301      	movs	r3, #1
 800c392:	e25d      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c394:	4b49      	ldr	r3, [pc, #292]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	061b      	lsls	r3, r3, #24
 800c3a2:	4946      	ldr	r1, [pc, #280]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	604b      	str	r3, [r1, #4]
 800c3a8:	4b45      	ldr	r3, [pc, #276]	; (800c4c0 <HAL_RCC_OscConfig+0x280>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fd f9a5 	bl	80096fc <HAL_InitTick>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d043      	beq.n	800c440 <HAL_RCC_OscConfig+0x200>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e249      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d023      	beq.n	800c40c <HAL_RCC_OscConfig+0x1cc>
 800c3c4:	4b3d      	ldr	r3, [pc, #244]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a3c      	ldr	r2, [pc, #240]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c3ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3ce:	6013      	str	r3, [r2, #0]
 800c3d0:	f7fd f9e0 	bl	8009794 <HAL_GetTick>
 800c3d4:	6138      	str	r0, [r7, #16]
 800c3d6:	e008      	b.n	800c3ea <HAL_RCC_OscConfig+0x1aa>
 800c3d8:	f7fd f9dc 	bl	8009794 <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d901      	bls.n	800c3ea <HAL_RCC_OscConfig+0x1aa>
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e232      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c3ea:	4b34      	ldr	r3, [pc, #208]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0f0      	beq.n	800c3d8 <HAL_RCC_OscConfig+0x198>
 800c3f6:	4b31      	ldr	r3, [pc, #196]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	061b      	lsls	r3, r3, #24
 800c404:	492d      	ldr	r1, [pc, #180]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c406:	4313      	orrs	r3, r2
 800c408:	604b      	str	r3, [r1, #4]
 800c40a:	e01a      	b.n	800c442 <HAL_RCC_OscConfig+0x202>
 800c40c:	4b2b      	ldr	r3, [pc, #172]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a2a      	ldr	r2, [pc, #168]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	f7fd f9bc 	bl	8009794 <HAL_GetTick>
 800c41c:	6138      	str	r0, [r7, #16]
 800c41e:	e008      	b.n	800c432 <HAL_RCC_OscConfig+0x1f2>
 800c420:	f7fd f9b8 	bl	8009794 <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d901      	bls.n	800c432 <HAL_RCC_OscConfig+0x1f2>
 800c42e:	2303      	movs	r3, #3
 800c430:	e20e      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c432:	4b22      	ldr	r3, [pc, #136]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1f0      	bne.n	800c420 <HAL_RCC_OscConfig+0x1e0>
 800c43e:	e000      	b.n	800c442 <HAL_RCC_OscConfig+0x202>
 800c440:	bf00      	nop
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0308 	and.w	r3, r3, #8
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d041      	beq.n	800c4d2 <HAL_RCC_OscConfig+0x292>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d01c      	beq.n	800c490 <HAL_RCC_OscConfig+0x250>
 800c456:	4b19      	ldr	r3, [pc, #100]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c45c:	4a17      	ldr	r2, [pc, #92]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c45e:	f043 0301 	orr.w	r3, r3, #1
 800c462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c466:	f7fd f995 	bl	8009794 <HAL_GetTick>
 800c46a:	6138      	str	r0, [r7, #16]
 800c46c:	e008      	b.n	800c480 <HAL_RCC_OscConfig+0x240>
 800c46e:	f7fd f991 	bl	8009794 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d901      	bls.n	800c480 <HAL_RCC_OscConfig+0x240>
 800c47c:	2303      	movs	r3, #3
 800c47e:	e1e7      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c480:	4b0e      	ldr	r3, [pc, #56]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c486:	f003 0302 	and.w	r3, r3, #2
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0ef      	beq.n	800c46e <HAL_RCC_OscConfig+0x22e>
 800c48e:	e020      	b.n	800c4d2 <HAL_RCC_OscConfig+0x292>
 800c490:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c496:	4a09      	ldr	r2, [pc, #36]	; (800c4bc <HAL_RCC_OscConfig+0x27c>)
 800c498:	f023 0301 	bic.w	r3, r3, #1
 800c49c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c4a0:	f7fd f978 	bl	8009794 <HAL_GetTick>
 800c4a4:	6138      	str	r0, [r7, #16]
 800c4a6:	e00d      	b.n	800c4c4 <HAL_RCC_OscConfig+0x284>
 800c4a8:	f7fd f974 	bl	8009794 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d906      	bls.n	800c4c4 <HAL_RCC_OscConfig+0x284>
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e1ca      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c4ba:	bf00      	nop
 800c4bc:	40021000 	.word	0x40021000
 800c4c0:	20000070 	.word	0x20000070
 800c4c4:	4b8c      	ldr	r3, [pc, #560]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c4c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4ca:	f003 0302 	and.w	r3, r3, #2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1ea      	bne.n	800c4a8 <HAL_RCC_OscConfig+0x268>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 0304 	and.w	r3, r3, #4
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 80a6 	beq.w	800c62c <HAL_RCC_OscConfig+0x3ec>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	77fb      	strb	r3, [r7, #31]
 800c4e4:	4b84      	ldr	r3, [pc, #528]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <HAL_RCC_OscConfig+0x2b4>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e000      	b.n	800c4f6 <HAL_RCC_OscConfig+0x2b6>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00d      	beq.n	800c516 <HAL_RCC_OscConfig+0x2d6>
 800c4fa:	4b7f      	ldr	r3, [pc, #508]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4fe:	4a7e      	ldr	r2, [pc, #504]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c504:	6593      	str	r3, [r2, #88]	; 0x58
 800c506:	4b7c      	ldr	r3, [pc, #496]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c50a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2301      	movs	r3, #1
 800c514:	77fb      	strb	r3, [r7, #31]
 800c516:	4b79      	ldr	r3, [pc, #484]	; (800c6fc <HAL_RCC_OscConfig+0x4bc>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d118      	bne.n	800c554 <HAL_RCC_OscConfig+0x314>
 800c522:	4b76      	ldr	r3, [pc, #472]	; (800c6fc <HAL_RCC_OscConfig+0x4bc>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a75      	ldr	r2, [pc, #468]	; (800c6fc <HAL_RCC_OscConfig+0x4bc>)
 800c528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c52c:	6013      	str	r3, [r2, #0]
 800c52e:	f7fd f931 	bl	8009794 <HAL_GetTick>
 800c532:	6138      	str	r0, [r7, #16]
 800c534:	e008      	b.n	800c548 <HAL_RCC_OscConfig+0x308>
 800c536:	f7fd f92d 	bl	8009794 <HAL_GetTick>
 800c53a:	4602      	mov	r2, r0
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	2b02      	cmp	r3, #2
 800c542:	d901      	bls.n	800c548 <HAL_RCC_OscConfig+0x308>
 800c544:	2303      	movs	r3, #3
 800c546:	e183      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c548:	4b6c      	ldr	r3, [pc, #432]	; (800c6fc <HAL_RCC_OscConfig+0x4bc>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c550:	2b00      	cmp	r3, #0
 800c552:	d0f0      	beq.n	800c536 <HAL_RCC_OscConfig+0x2f6>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d108      	bne.n	800c56e <HAL_RCC_OscConfig+0x32e>
 800c55c:	4b66      	ldr	r3, [pc, #408]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c562:	4a65      	ldr	r2, [pc, #404]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c564:	f043 0301 	orr.w	r3, r3, #1
 800c568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c56c:	e024      	b.n	800c5b8 <HAL_RCC_OscConfig+0x378>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	2b05      	cmp	r3, #5
 800c574:	d110      	bne.n	800c598 <HAL_RCC_OscConfig+0x358>
 800c576:	4b60      	ldr	r3, [pc, #384]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c57c:	4a5e      	ldr	r2, [pc, #376]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c57e:	f043 0304 	orr.w	r3, r3, #4
 800c582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c586:	4b5c      	ldr	r3, [pc, #368]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c58c:	4a5a      	ldr	r2, [pc, #360]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c58e:	f043 0301 	orr.w	r3, r3, #1
 800c592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c596:	e00f      	b.n	800c5b8 <HAL_RCC_OscConfig+0x378>
 800c598:	4b57      	ldr	r3, [pc, #348]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c59e:	4a56      	ldr	r2, [pc, #344]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c5a0:	f023 0301 	bic.w	r3, r3, #1
 800c5a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5a8:	4b53      	ldr	r3, [pc, #332]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ae:	4a52      	ldr	r2, [pc, #328]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c5b0:	f023 0304 	bic.w	r3, r3, #4
 800c5b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d016      	beq.n	800c5ee <HAL_RCC_OscConfig+0x3ae>
 800c5c0:	f7fd f8e8 	bl	8009794 <HAL_GetTick>
 800c5c4:	6138      	str	r0, [r7, #16]
 800c5c6:	e00a      	b.n	800c5de <HAL_RCC_OscConfig+0x39e>
 800c5c8:	f7fd f8e4 	bl	8009794 <HAL_GetTick>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d901      	bls.n	800c5de <HAL_RCC_OscConfig+0x39e>
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e138      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c5de:	4b46      	ldr	r3, [pc, #280]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5e4:	f003 0302 	and.w	r3, r3, #2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d0ed      	beq.n	800c5c8 <HAL_RCC_OscConfig+0x388>
 800c5ec:	e015      	b.n	800c61a <HAL_RCC_OscConfig+0x3da>
 800c5ee:	f7fd f8d1 	bl	8009794 <HAL_GetTick>
 800c5f2:	6138      	str	r0, [r7, #16]
 800c5f4:	e00a      	b.n	800c60c <HAL_RCC_OscConfig+0x3cc>
 800c5f6:	f7fd f8cd 	bl	8009794 <HAL_GetTick>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	f241 3288 	movw	r2, #5000	; 0x1388
 800c604:	4293      	cmp	r3, r2
 800c606:	d901      	bls.n	800c60c <HAL_RCC_OscConfig+0x3cc>
 800c608:	2303      	movs	r3, #3
 800c60a:	e121      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c60c:	4b3a      	ldr	r3, [pc, #232]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c612:	f003 0302 	and.w	r3, r3, #2
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1ed      	bne.n	800c5f6 <HAL_RCC_OscConfig+0x3b6>
 800c61a:	7ffb      	ldrb	r3, [r7, #31]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d105      	bne.n	800c62c <HAL_RCC_OscConfig+0x3ec>
 800c620:	4b35      	ldr	r3, [pc, #212]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c624:	4a34      	ldr	r2, [pc, #208]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c62a:	6593      	str	r3, [r2, #88]	; 0x58
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f003 0320 	and.w	r3, r3, #32
 800c634:	2b00      	cmp	r3, #0
 800c636:	d03c      	beq.n	800c6b2 <HAL_RCC_OscConfig+0x472>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d01c      	beq.n	800c67a <HAL_RCC_OscConfig+0x43a>
 800c640:	4b2d      	ldr	r3, [pc, #180]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c646:	4a2c      	ldr	r2, [pc, #176]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c648:	f043 0301 	orr.w	r3, r3, #1
 800c64c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800c650:	f7fd f8a0 	bl	8009794 <HAL_GetTick>
 800c654:	6138      	str	r0, [r7, #16]
 800c656:	e008      	b.n	800c66a <HAL_RCC_OscConfig+0x42a>
 800c658:	f7fd f89c 	bl	8009794 <HAL_GetTick>
 800c65c:	4602      	mov	r2, r0
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	2b02      	cmp	r3, #2
 800c664:	d901      	bls.n	800c66a <HAL_RCC_OscConfig+0x42a>
 800c666:	2303      	movs	r3, #3
 800c668:	e0f2      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c66a:	4b23      	ldr	r3, [pc, #140]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c66c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0ef      	beq.n	800c658 <HAL_RCC_OscConfig+0x418>
 800c678:	e01b      	b.n	800c6b2 <HAL_RCC_OscConfig+0x472>
 800c67a:	4b1f      	ldr	r3, [pc, #124]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c67c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c680:	4a1d      	ldr	r2, [pc, #116]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c682:	f023 0301 	bic.w	r3, r3, #1
 800c686:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800c68a:	f7fd f883 	bl	8009794 <HAL_GetTick>
 800c68e:	6138      	str	r0, [r7, #16]
 800c690:	e008      	b.n	800c6a4 <HAL_RCC_OscConfig+0x464>
 800c692:	f7fd f87f 	bl	8009794 <HAL_GetTick>
 800c696:	4602      	mov	r2, r0
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCC_OscConfig+0x464>
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e0d5      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c6a4:	4b14      	ldr	r3, [pc, #80]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c6a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6aa:	f003 0302 	and.w	r3, r3, #2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1ef      	bne.n	800c692 <HAL_RCC_OscConfig+0x452>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 80c9 	beq.w	800c84e <HAL_RCC_OscConfig+0x60e>
 800c6bc:	4b0e      	ldr	r3, [pc, #56]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	f003 030c 	and.w	r3, r3, #12
 800c6c4:	2b0c      	cmp	r3, #12
 800c6c6:	f000 8083 	beq.w	800c7d0 <HAL_RCC_OscConfig+0x590>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	69db      	ldr	r3, [r3, #28]
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d15e      	bne.n	800c790 <HAL_RCC_OscConfig+0x550>
 800c6d2:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a08      	ldr	r2, [pc, #32]	; (800c6f8 <HAL_RCC_OscConfig+0x4b8>)
 800c6d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	f7fd f859 	bl	8009794 <HAL_GetTick>
 800c6e2:	6138      	str	r0, [r7, #16]
 800c6e4:	e00c      	b.n	800c700 <HAL_RCC_OscConfig+0x4c0>
 800c6e6:	f7fd f855 	bl	8009794 <HAL_GetTick>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d905      	bls.n	800c700 <HAL_RCC_OscConfig+0x4c0>
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	e0ab      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c6f8:	40021000 	.word	0x40021000
 800c6fc:	40007000 	.word	0x40007000
 800c700:	4b55      	ldr	r3, [pc, #340]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1ec      	bne.n	800c6e6 <HAL_RCC_OscConfig+0x4a6>
 800c70c:	4b52      	ldr	r3, [pc, #328]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c70e:	68da      	ldr	r2, [r3, #12]
 800c710:	4b52      	ldr	r3, [pc, #328]	; (800c85c <HAL_RCC_OscConfig+0x61c>)
 800c712:	4013      	ands	r3, r2
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	6a11      	ldr	r1, [r2, #32]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c71c:	3a01      	subs	r2, #1
 800c71e:	0112      	lsls	r2, r2, #4
 800c720:	4311      	orrs	r1, r2
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c726:	0212      	lsls	r2, r2, #8
 800c728:	4311      	orrs	r1, r2
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c72e:	0852      	lsrs	r2, r2, #1
 800c730:	3a01      	subs	r2, #1
 800c732:	0552      	lsls	r2, r2, #21
 800c734:	4311      	orrs	r1, r2
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c73a:	0852      	lsrs	r2, r2, #1
 800c73c:	3a01      	subs	r2, #1
 800c73e:	0652      	lsls	r2, r2, #25
 800c740:	4311      	orrs	r1, r2
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c746:	06d2      	lsls	r2, r2, #27
 800c748:	430a      	orrs	r2, r1
 800c74a:	4943      	ldr	r1, [pc, #268]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60cb      	str	r3, [r1, #12]
 800c750:	4b41      	ldr	r3, [pc, #260]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a40      	ldr	r2, [pc, #256]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c75a:	6013      	str	r3, [r2, #0]
 800c75c:	4b3e      	ldr	r3, [pc, #248]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	4a3d      	ldr	r2, [pc, #244]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c766:	60d3      	str	r3, [r2, #12]
 800c768:	f7fd f814 	bl	8009794 <HAL_GetTick>
 800c76c:	6138      	str	r0, [r7, #16]
 800c76e:	e008      	b.n	800c782 <HAL_RCC_OscConfig+0x542>
 800c770:	f7fd f810 	bl	8009794 <HAL_GetTick>
 800c774:	4602      	mov	r2, r0
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d901      	bls.n	800c782 <HAL_RCC_OscConfig+0x542>
 800c77e:	2303      	movs	r3, #3
 800c780:	e066      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c782:	4b35      	ldr	r3, [pc, #212]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d0f0      	beq.n	800c770 <HAL_RCC_OscConfig+0x530>
 800c78e:	e05e      	b.n	800c84e <HAL_RCC_OscConfig+0x60e>
 800c790:	4b31      	ldr	r3, [pc, #196]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a30      	ldr	r2, [pc, #192]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	f7fc fffa 	bl	8009794 <HAL_GetTick>
 800c7a0:	6138      	str	r0, [r7, #16]
 800c7a2:	e008      	b.n	800c7b6 <HAL_RCC_OscConfig+0x576>
 800c7a4:	f7fc fff6 	bl	8009794 <HAL_GetTick>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d901      	bls.n	800c7b6 <HAL_RCC_OscConfig+0x576>
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e04c      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c7b6:	4b28      	ldr	r3, [pc, #160]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1f0      	bne.n	800c7a4 <HAL_RCC_OscConfig+0x564>
 800c7c2:	4b25      	ldr	r3, [pc, #148]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c7c4:	68da      	ldr	r2, [r3, #12]
 800c7c6:	4924      	ldr	r1, [pc, #144]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c7c8:	4b25      	ldr	r3, [pc, #148]	; (800c860 <HAL_RCC_OscConfig+0x620>)
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	60cb      	str	r3, [r1, #12]
 800c7ce:	e03e      	b.n	800c84e <HAL_RCC_OscConfig+0x60e>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d101      	bne.n	800c7dc <HAL_RCC_OscConfig+0x59c>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e039      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c7dc:	4b1e      	ldr	r3, [pc, #120]	; (800c858 <HAL_RCC_OscConfig+0x618>)
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	617b      	str	r3, [r7, #20]
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f003 0203 	and.w	r2, r3, #3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a1b      	ldr	r3, [r3, #32]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d12c      	bne.n	800c84a <HAL_RCC_OscConfig+0x60a>
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	011b      	lsls	r3, r3, #4
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d123      	bne.n	800c84a <HAL_RCC_OscConfig+0x60a>
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80c:	021b      	lsls	r3, r3, #8
 800c80e:	429a      	cmp	r2, r3
 800c810:	d11b      	bne.n	800c84a <HAL_RCC_OscConfig+0x60a>
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81c:	06db      	lsls	r3, r3, #27
 800c81e:	429a      	cmp	r2, r3
 800c820:	d113      	bne.n	800c84a <HAL_RCC_OscConfig+0x60a>
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82c:	085b      	lsrs	r3, r3, #1
 800c82e:	3b01      	subs	r3, #1
 800c830:	055b      	lsls	r3, r3, #21
 800c832:	429a      	cmp	r2, r3
 800c834:	d109      	bne.n	800c84a <HAL_RCC_OscConfig+0x60a>
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c840:	085b      	lsrs	r3, r3, #1
 800c842:	3b01      	subs	r3, #1
 800c844:	065b      	lsls	r3, r3, #25
 800c846:	429a      	cmp	r2, r3
 800c848:	d001      	beq.n	800c84e <HAL_RCC_OscConfig+0x60e>
 800c84a:	2301      	movs	r3, #1
 800c84c:	e000      	b.n	800c850 <HAL_RCC_OscConfig+0x610>
 800c84e:	2300      	movs	r3, #0
 800c850:	4618      	mov	r0, r3
 800c852:	3720      	adds	r7, #32
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	40021000 	.word	0x40021000
 800c85c:	019f800c 	.word	0x019f800c
 800c860:	feeefffc 	.word	0xfeeefffc

0800c864 <HAL_RCC_ClockConfig>:
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
 800c86e:	2300      	movs	r3, #0
 800c870:	617b      	str	r3, [r7, #20]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <HAL_RCC_ClockConfig+0x18>
 800c878:	2301      	movs	r3, #1
 800c87a:	e11e      	b.n	800caba <HAL_RCC_ClockConfig+0x256>
 800c87c:	4b91      	ldr	r3, [pc, #580]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 030f 	and.w	r3, r3, #15
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	429a      	cmp	r2, r3
 800c888:	d910      	bls.n	800c8ac <HAL_RCC_ClockConfig+0x48>
 800c88a:	4b8e      	ldr	r3, [pc, #568]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f023 020f 	bic.w	r2, r3, #15
 800c892:	498c      	ldr	r1, [pc, #560]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	4313      	orrs	r3, r2
 800c898:	600b      	str	r3, [r1, #0]
 800c89a:	4b8a      	ldr	r3, [pc, #552]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f003 030f 	and.w	r3, r3, #15
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d001      	beq.n	800c8ac <HAL_RCC_ClockConfig+0x48>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e106      	b.n	800caba <HAL_RCC_ClockConfig+0x256>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d073      	beq.n	800c9a0 <HAL_RCC_ClockConfig+0x13c>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	d129      	bne.n	800c914 <HAL_RCC_ClockConfig+0xb0>
 800c8c0:	4b81      	ldr	r3, [pc, #516]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <HAL_RCC_ClockConfig+0x6c>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e0f4      	b.n	800caba <HAL_RCC_ClockConfig+0x256>
 800c8d0:	f000 f99e 	bl	800cc10 <RCC_GetSysClockFreqFromPLLSource>
 800c8d4:	6138      	str	r0, [r7, #16]
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	4a7c      	ldr	r2, [pc, #496]	; (800cacc <HAL_RCC_ClockConfig+0x268>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d93f      	bls.n	800c95e <HAL_RCC_ClockConfig+0xfa>
 800c8de:	4b7a      	ldr	r3, [pc, #488]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d009      	beq.n	800c8fe <HAL_RCC_ClockConfig+0x9a>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f003 0302 	and.w	r3, r3, #2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d033      	beq.n	800c95e <HAL_RCC_ClockConfig+0xfa>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d12f      	bne.n	800c95e <HAL_RCC_ClockConfig+0xfa>
 800c8fe:	4b72      	ldr	r3, [pc, #456]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c906:	4a70      	ldr	r2, [pc, #448]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c90c:	6093      	str	r3, [r2, #8]
 800c90e:	2380      	movs	r3, #128	; 0x80
 800c910:	617b      	str	r3, [r7, #20]
 800c912:	e024      	b.n	800c95e <HAL_RCC_ClockConfig+0xfa>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d107      	bne.n	800c92c <HAL_RCC_ClockConfig+0xc8>
 800c91c:	4b6a      	ldr	r3, [pc, #424]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d109      	bne.n	800c93c <HAL_RCC_ClockConfig+0xd8>
 800c928:	2301      	movs	r3, #1
 800c92a:	e0c6      	b.n	800caba <HAL_RCC_ClockConfig+0x256>
 800c92c:	4b66      	ldr	r3, [pc, #408]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <HAL_RCC_ClockConfig+0xd8>
 800c938:	2301      	movs	r3, #1
 800c93a:	e0be      	b.n	800caba <HAL_RCC_ClockConfig+0x256>
 800c93c:	f000 f8ce 	bl	800cadc <HAL_RCC_GetSysClockFreq>
 800c940:	6138      	str	r0, [r7, #16]
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	4a61      	ldr	r2, [pc, #388]	; (800cacc <HAL_RCC_ClockConfig+0x268>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d909      	bls.n	800c95e <HAL_RCC_ClockConfig+0xfa>
 800c94a:	4b5f      	ldr	r3, [pc, #380]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c952:	4a5d      	ldr	r2, [pc, #372]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c958:	6093      	str	r3, [r2, #8]
 800c95a:	2380      	movs	r3, #128	; 0x80
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	4b5a      	ldr	r3, [pc, #360]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f023 0203 	bic.w	r2, r3, #3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	4957      	ldr	r1, [pc, #348]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c96c:	4313      	orrs	r3, r2
 800c96e:	608b      	str	r3, [r1, #8]
 800c970:	f7fc ff10 	bl	8009794 <HAL_GetTick>
 800c974:	60f8      	str	r0, [r7, #12]
 800c976:	e00a      	b.n	800c98e <HAL_RCC_ClockConfig+0x12a>
 800c978:	f7fc ff0c 	bl	8009794 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	f241 3288 	movw	r2, #5000	; 0x1388
 800c986:	4293      	cmp	r3, r2
 800c988:	d901      	bls.n	800c98e <HAL_RCC_ClockConfig+0x12a>
 800c98a:	2303      	movs	r3, #3
 800c98c:	e095      	b.n	800caba <HAL_RCC_ClockConfig+0x256>
 800c98e:	4b4e      	ldr	r3, [pc, #312]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f003 020c 	and.w	r2, r3, #12
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d1eb      	bne.n	800c978 <HAL_RCC_ClockConfig+0x114>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 0302 	and.w	r3, r3, #2
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d023      	beq.n	800c9f4 <HAL_RCC_ClockConfig+0x190>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 0304 	and.w	r3, r3, #4
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d005      	beq.n	800c9c4 <HAL_RCC_ClockConfig+0x160>
 800c9b8:	4b43      	ldr	r3, [pc, #268]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	4a42      	ldr	r2, [pc, #264]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c9be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c9c2:	6093      	str	r3, [r2, #8]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 0308 	and.w	r3, r3, #8
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d007      	beq.n	800c9e0 <HAL_RCC_ClockConfig+0x17c>
 800c9d0:	4b3d      	ldr	r3, [pc, #244]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c9d8:	4a3b      	ldr	r2, [pc, #236]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c9da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c9de:	6093      	str	r3, [r2, #8]
 800c9e0:	4b39      	ldr	r3, [pc, #228]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	4936      	ldr	r1, [pc, #216]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	608b      	str	r3, [r1, #8]
 800c9f2:	e008      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a2>
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	2b80      	cmp	r3, #128	; 0x80
 800c9f8:	d105      	bne.n	800ca06 <HAL_RCC_ClockConfig+0x1a2>
 800c9fa:	4b33      	ldr	r3, [pc, #204]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	4a32      	ldr	r2, [pc, #200]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800ca00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca04:	6093      	str	r3, [r2, #8]
 800ca06:	4b2f      	ldr	r3, [pc, #188]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 030f 	and.w	r3, r3, #15
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d21d      	bcs.n	800ca50 <HAL_RCC_ClockConfig+0x1ec>
 800ca14:	4b2b      	ldr	r3, [pc, #172]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f023 020f 	bic.w	r2, r3, #15
 800ca1c:	4929      	ldr	r1, [pc, #164]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	600b      	str	r3, [r1, #0]
 800ca24:	f7fc feb6 	bl	8009794 <HAL_GetTick>
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	e00a      	b.n	800ca42 <HAL_RCC_ClockConfig+0x1de>
 800ca2c:	f7fc feb2 	bl	8009794 <HAL_GetTick>
 800ca30:	4602      	mov	r2, r0
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_ClockConfig+0x1de>
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e03b      	b.n	800caba <HAL_RCC_ClockConfig+0x256>
 800ca42:	4b20      	ldr	r3, [pc, #128]	; (800cac4 <HAL_RCC_ClockConfig+0x260>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d1ed      	bne.n	800ca2c <HAL_RCC_ClockConfig+0x1c8>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d008      	beq.n	800ca6e <HAL_RCC_ClockConfig+0x20a>
 800ca5c:	4b1a      	ldr	r3, [pc, #104]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	4917      	ldr	r1, [pc, #92]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	608b      	str	r3, [r1, #8]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f003 0308 	and.w	r3, r3, #8
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d009      	beq.n	800ca8e <HAL_RCC_ClockConfig+0x22a>
 800ca7a:	4b13      	ldr	r3, [pc, #76]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	490f      	ldr	r1, [pc, #60]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	608b      	str	r3, [r1, #8]
 800ca8e:	f000 f825 	bl	800cadc <HAL_RCC_GetSysClockFreq>
 800ca92:	4602      	mov	r2, r0
 800ca94:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <HAL_RCC_ClockConfig+0x264>)
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	091b      	lsrs	r3, r3, #4
 800ca9a:	f003 030f 	and.w	r3, r3, #15
 800ca9e:	490c      	ldr	r1, [pc, #48]	; (800cad0 <HAL_RCC_ClockConfig+0x26c>)
 800caa0:	5ccb      	ldrb	r3, [r1, r3]
 800caa2:	f003 031f 	and.w	r3, r3, #31
 800caa6:	fa22 f303 	lsr.w	r3, r2, r3
 800caaa:	4a0a      	ldr	r2, [pc, #40]	; (800cad4 <HAL_RCC_ClockConfig+0x270>)
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <HAL_RCC_ClockConfig+0x274>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fc fe22 	bl	80096fc <HAL_InitTick>
 800cab8:	4603      	mov	r3, r0
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	40022000 	.word	0x40022000
 800cac8:	40021000 	.word	0x40021000
 800cacc:	04c4b400 	.word	0x04c4b400
 800cad0:	08017780 	.word	0x08017780
 800cad4:	2000006c 	.word	0x2000006c
 800cad8:	20000070 	.word	0x20000070

0800cadc <HAL_RCC_GetSysClockFreq>:
 800cadc:	b480      	push	{r7}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4b2c      	ldr	r3, [pc, #176]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	f003 030c 	and.w	r3, r3, #12
 800caea:	2b04      	cmp	r3, #4
 800caec:	d102      	bne.n	800caf4 <HAL_RCC_GetSysClockFreq+0x18>
 800caee:	4b2a      	ldr	r3, [pc, #168]	; (800cb98 <HAL_RCC_GetSysClockFreq+0xbc>)
 800caf0:	613b      	str	r3, [r7, #16]
 800caf2:	e047      	b.n	800cb84 <HAL_RCC_GetSysClockFreq+0xa8>
 800caf4:	4b27      	ldr	r3, [pc, #156]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	f003 030c 	and.w	r3, r3, #12
 800cafc:	2b08      	cmp	r3, #8
 800cafe:	d102      	bne.n	800cb06 <HAL_RCC_GetSysClockFreq+0x2a>
 800cb00:	4b26      	ldr	r3, [pc, #152]	; (800cb9c <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb02:	613b      	str	r3, [r7, #16]
 800cb04:	e03e      	b.n	800cb84 <HAL_RCC_GetSysClockFreq+0xa8>
 800cb06:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	f003 030c 	and.w	r3, r3, #12
 800cb0e:	2b0c      	cmp	r3, #12
 800cb10:	d136      	bne.n	800cb80 <HAL_RCC_GetSysClockFreq+0xa4>
 800cb12:	4b20      	ldr	r3, [pc, #128]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	f003 0303 	and.w	r3, r3, #3
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	4b1d      	ldr	r3, [pc, #116]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	091b      	lsrs	r3, r3, #4
 800cb22:	f003 030f 	and.w	r3, r3, #15
 800cb26:	3301      	adds	r3, #1
 800cb28:	60bb      	str	r3, [r7, #8]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d10c      	bne.n	800cb4a <HAL_RCC_GetSysClockFreq+0x6e>
 800cb30:	4a1a      	ldr	r2, [pc, #104]	; (800cb9c <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb38:	4a16      	ldr	r2, [pc, #88]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb3a:	68d2      	ldr	r2, [r2, #12]
 800cb3c:	0a12      	lsrs	r2, r2, #8
 800cb3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb42:	fb02 f303 	mul.w	r3, r2, r3
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	e00c      	b.n	800cb64 <HAL_RCC_GetSysClockFreq+0x88>
 800cb4a:	4a13      	ldr	r2, [pc, #76]	; (800cb98 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb52:	4a10      	ldr	r2, [pc, #64]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb54:	68d2      	ldr	r2, [r2, #12]
 800cb56:	0a12      	lsrs	r2, r2, #8
 800cb58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb5c:	fb02 f303 	mul.w	r3, r2, r3
 800cb60:	617b      	str	r3, [r7, #20]
 800cb62:	bf00      	nop
 800cb64:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	0e5b      	lsrs	r3, r3, #25
 800cb6a:	f003 0303 	and.w	r3, r3, #3
 800cb6e:	3301      	adds	r3, #1
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	607b      	str	r3, [r7, #4]
 800cb74:	697a      	ldr	r2, [r7, #20]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb7c:	613b      	str	r3, [r7, #16]
 800cb7e:	e001      	b.n	800cb84 <HAL_RCC_GetSysClockFreq+0xa8>
 800cb80:	2300      	movs	r3, #0
 800cb82:	613b      	str	r3, [r7, #16]
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	4618      	mov	r0, r3
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	40021000 	.word	0x40021000
 800cb98:	00f42400 	.word	0x00f42400
 800cb9c:	007a1200 	.word	0x007a1200

0800cba0 <HAL_RCC_GetHCLKFreq>:
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	4b03      	ldr	r3, [pc, #12]	; (800cbb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	2000006c 	.word	0x2000006c

0800cbb8 <HAL_RCC_GetPCLK1Freq>:
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	f7ff fff0 	bl	800cba0 <HAL_RCC_GetHCLKFreq>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	4b06      	ldr	r3, [pc, #24]	; (800cbdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	0a1b      	lsrs	r3, r3, #8
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	4904      	ldr	r1, [pc, #16]	; (800cbe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cbce:	5ccb      	ldrb	r3, [r1, r3]
 800cbd0:	f003 031f 	and.w	r3, r3, #31
 800cbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd8:	4618      	mov	r0, r3
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	40021000 	.word	0x40021000
 800cbe0:	08017790 	.word	0x08017790

0800cbe4 <HAL_RCC_GetPCLK2Freq>:
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	f7ff ffda 	bl	800cba0 <HAL_RCC_GetHCLKFreq>
 800cbec:	4602      	mov	r2, r0
 800cbee:	4b06      	ldr	r3, [pc, #24]	; (800cc08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	0adb      	lsrs	r3, r3, #11
 800cbf4:	f003 0307 	and.w	r3, r3, #7
 800cbf8:	4904      	ldr	r1, [pc, #16]	; (800cc0c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cbfa:	5ccb      	ldrb	r3, [r1, r3]
 800cbfc:	f003 031f 	and.w	r3, r3, #31
 800cc00:	fa22 f303 	lsr.w	r3, r2, r3
 800cc04:	4618      	mov	r0, r3
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	40021000 	.word	0x40021000
 800cc0c:	08017790 	.word	0x08017790

0800cc10 <RCC_GetSysClockFreqFromPLLSource>:
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4b1e      	ldr	r3, [pc, #120]	; (800cc90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f003 0303 	and.w	r3, r3, #3
 800cc1e:	613b      	str	r3, [r7, #16]
 800cc20:	4b1b      	ldr	r3, [pc, #108]	; (800cc90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	091b      	lsrs	r3, r3, #4
 800cc26:	f003 030f 	and.w	r3, r3, #15
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	60fb      	str	r3, [r7, #12]
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d10c      	bne.n	800cc4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
 800cc34:	4a17      	ldr	r2, [pc, #92]	; (800cc94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc3c:	4a14      	ldr	r2, [pc, #80]	; (800cc90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc3e:	68d2      	ldr	r2, [r2, #12]
 800cc40:	0a12      	lsrs	r2, r2, #8
 800cc42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc46:	fb02 f303 	mul.w	r3, r2, r3
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	e00c      	b.n	800cc68 <RCC_GetSysClockFreqFromPLLSource+0x58>
 800cc4e:	4a12      	ldr	r2, [pc, #72]	; (800cc98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc56:	4a0e      	ldr	r2, [pc, #56]	; (800cc90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc58:	68d2      	ldr	r2, [r2, #12]
 800cc5a:	0a12      	lsrs	r2, r2, #8
 800cc5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc60:	fb02 f303 	mul.w	r3, r2, r3
 800cc64:	617b      	str	r3, [r7, #20]
 800cc66:	bf00      	nop
 800cc68:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	0e5b      	lsrs	r3, r3, #25
 800cc6e:	f003 0303 	and.w	r3, r3, #3
 800cc72:	3301      	adds	r3, #1
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	60bb      	str	r3, [r7, #8]
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc80:	607b      	str	r3, [r7, #4]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4618      	mov	r0, r3
 800cc86:	371c      	adds	r7, #28
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr
 800cc90:	40021000 	.word	0x40021000
 800cc94:	007a1200 	.word	0x007a1200
 800cc98:	00f42400 	.word	0x00f42400

0800cc9c <HAL_RCCEx_PeriphCLKConfig>:
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	2300      	movs	r3, #0
 800cca6:	74fb      	strb	r3, [r7, #19]
 800cca8:	2300      	movs	r3, #0
 800ccaa:	74bb      	strb	r3, [r7, #18]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 8098 	beq.w	800cdea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	747b      	strb	r3, [r7, #17]
 800ccbe:	4b43      	ldr	r3, [pc, #268]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10d      	bne.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800ccca:	4b40      	ldr	r3, [pc, #256]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccce:	4a3f      	ldr	r2, [pc, #252]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccd4:	6593      	str	r3, [r2, #88]	; 0x58
 800ccd6:	4b3d      	ldr	r3, [pc, #244]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccde:	60bb      	str	r3, [r7, #8]
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2301      	movs	r3, #1
 800cce4:	747b      	strb	r3, [r7, #17]
 800cce6:	4b3a      	ldr	r3, [pc, #232]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a39      	ldr	r2, [pc, #228]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ccec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccf0:	6013      	str	r3, [r2, #0]
 800ccf2:	f7fc fd4f 	bl	8009794 <HAL_GetTick>
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	e009      	b.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800ccfa:	f7fc fd4b 	bl	8009794 <HAL_GetTick>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d902      	bls.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800cd08:	2303      	movs	r3, #3
 800cd0a:	74fb      	strb	r3, [r7, #19]
 800cd0c:	e005      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800cd0e:	4b30      	ldr	r3, [pc, #192]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d0ef      	beq.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800cd1a:	7cfb      	ldrb	r3, [r7, #19]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d159      	bne.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800cd20:	4b2a      	ldr	r3, [pc, #168]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d01e      	beq.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d019      	beq.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cd3c:	4b23      	ldr	r3, [pc, #140]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd46:	617b      	str	r3, [r7, #20]
 800cd48:	4b20      	ldr	r3, [pc, #128]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd4e:	4a1f      	ldr	r2, [pc, #124]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd58:	4b1c      	ldr	r3, [pc, #112]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd5e:	4a1b      	ldr	r2, [pc, #108]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd68:	4a18      	ldr	r2, [pc, #96]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d016      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cd7a:	f7fc fd0b 	bl	8009794 <HAL_GetTick>
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	e00b      	b.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800cd82:	f7fc fd07 	bl	8009794 <HAL_GetTick>
 800cd86:	4602      	mov	r2, r0
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d902      	bls.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800cd94:	2303      	movs	r3, #3
 800cd96:	74fb      	strb	r3, [r7, #19]
 800cd98:	e006      	b.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cd9a:	4b0c      	ldr	r3, [pc, #48]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda0:	f003 0302 	and.w	r3, r3, #2
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d0ec      	beq.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800cda8:	7cfb      	ldrb	r3, [r7, #19]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10b      	bne.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800cdae:	4b07      	ldr	r3, [pc, #28]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdbc:	4903      	ldr	r1, [pc, #12]	; (800cdcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cdc4:	e008      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800cdc6:	7cfb      	ldrb	r3, [r7, #19]
 800cdc8:	74bb      	strb	r3, [r7, #18]
 800cdca:	e005      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800cdcc:	40021000 	.word	0x40021000
 800cdd0:	40007000 	.word	0x40007000
 800cdd4:	7cfb      	ldrb	r3, [r7, #19]
 800cdd6:	74bb      	strb	r3, [r7, #18]
 800cdd8:	7c7b      	ldrb	r3, [r7, #17]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d105      	bne.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800cdde:	4ba7      	ldr	r3, [pc, #668]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde2:	4aa6      	ldr	r2, [pc, #664]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cde4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cde8:	6593      	str	r3, [r2, #88]	; 0x58
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00a      	beq.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x170>
 800cdf6:	4ba1      	ldr	r3, [pc, #644]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cdf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdfc:	f023 0203 	bic.w	r2, r3, #3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	499d      	ldr	r1, [pc, #628]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce06:	4313      	orrs	r3, r2
 800ce08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0302 	and.w	r3, r3, #2
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00a      	beq.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ce18:	4b98      	ldr	r3, [pc, #608]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce1e:	f023 020c 	bic.w	r2, r3, #12
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	4995      	ldr	r1, [pc, #596]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0304 	and.w	r3, r3, #4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800ce3a:	4b90      	ldr	r3, [pc, #576]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	498c      	ldr	r1, [pc, #560]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0308 	and.w	r3, r3, #8
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00a      	beq.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800ce5c:	4b87      	ldr	r3, [pc, #540]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	4984      	ldr	r1, [pc, #528]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 0310 	and.w	r3, r3, #16
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00a      	beq.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ce7e:	4b7f      	ldr	r3, [pc, #508]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	497b      	ldr	r1, [pc, #492]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0320 	and.w	r3, r3, #32
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00a      	beq.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800cea0:	4b76      	ldr	r3, [pc, #472]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cea6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	4973      	ldr	r1, [pc, #460]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00a      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800cec2:	4b6e      	ldr	r3, [pc, #440]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	69db      	ldr	r3, [r3, #28]
 800ced0:	496a      	ldr	r1, [pc, #424]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00a      	beq.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800cee4:	4b65      	ldr	r3, [pc, #404]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	4962      	ldr	r1, [pc, #392]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cef4:	4313      	orrs	r3, r2
 800cef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800cf06:	4b5d      	ldr	r3, [pc, #372]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf14:	4959      	ldr	r1, [pc, #356]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf16:	4313      	orrs	r3, r2
 800cf18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00a      	beq.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800cf28:	4b54      	ldr	r3, [pc, #336]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf2e:	f023 0203 	bic.w	r2, r3, #3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	4951      	ldr	r1, [pc, #324]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00a      	beq.n	800cf60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800cf4a:	4b4c      	ldr	r3, [pc, #304]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf58:	4948      	ldr	r1, [pc, #288]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d015      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800cf6c:	4b43      	ldr	r3, [pc, #268]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf7a:	4940      	ldr	r1, [pc, #256]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf8a:	d105      	bne.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800cf8c:	4b3b      	ldr	r3, [pc, #236]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	4a3a      	ldr	r2, [pc, #232]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf96:	60d3      	str	r3, [r2, #12]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d015      	beq.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800cfa4:	4b35      	ldr	r3, [pc, #212]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb2:	4932      	ldr	r1, [pc, #200]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfc2:	d105      	bne.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800cfc4:	4b2d      	ldr	r3, [pc, #180]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	4a2c      	ldr	r2, [pc, #176]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfce:	60d3      	str	r3, [r2, #12]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d015      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800cfdc:	4b27      	ldr	r3, [pc, #156]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfe2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfea:	4924      	ldr	r1, [pc, #144]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfec:	4313      	orrs	r3, r2
 800cfee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cffa:	d105      	bne.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800cffc:	4b1f      	ldr	r3, [pc, #124]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	4a1e      	ldr	r2, [pc, #120]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d006:	60d3      	str	r3, [r2, #12]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d015      	beq.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800d014:	4b19      	ldr	r3, [pc, #100]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d01a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d022:	4916      	ldr	r1, [pc, #88]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d024:	4313      	orrs	r3, r2
 800d026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d032:	d105      	bne.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800d034:	4b11      	ldr	r3, [pc, #68]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	4a10      	ldr	r2, [pc, #64]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d03a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d03e:	60d3      	str	r3, [r2, #12]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d019      	beq.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d04c:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05a:	4908      	ldr	r1, [pc, #32]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d05c:	4313      	orrs	r3, r2
 800d05e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d06a:	d109      	bne.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d06c:	4b03      	ldr	r3, [pc, #12]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	4a02      	ldr	r2, [pc, #8]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d076:	60d3      	str	r3, [r2, #12]
 800d078:	e002      	b.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d07a:	bf00      	nop
 800d07c:	40021000 	.word	0x40021000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d015      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800d08c:	4b29      	ldr	r3, [pc, #164]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d092:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d09a:	4926      	ldr	r1, [pc, #152]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d09c:	4313      	orrs	r3, r2
 800d09e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0aa:	d105      	bne.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800d0ac:	4b21      	ldr	r3, [pc, #132]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	4a20      	ldr	r2, [pc, #128]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0b6:	60d3      	str	r3, [r2, #12]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d015      	beq.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800d0c4:	4b1b      	ldr	r3, [pc, #108]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0d2:	4918      	ldr	r1, [pc, #96]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e2:	d105      	bne.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800d0e4:	4b13      	ldr	r3, [pc, #76]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	4a12      	ldr	r2, [pc, #72]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0ee:	60d3      	str	r3, [r2, #12]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d015      	beq.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d10a:	490a      	ldr	r1, [pc, #40]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d10c:	4313      	orrs	r3, r2
 800d10e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d11a:	d105      	bne.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d11c:	4b05      	ldr	r3, [pc, #20]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	4a04      	ldr	r2, [pc, #16]	; (800d134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d126:	60d3      	str	r3, [r2, #12]
 800d128:	7cbb      	ldrb	r3, [r7, #18]
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	40021000 	.word	0x40021000

0800d138 <HAL_SPI_Init>:
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <HAL_SPI_Init+0x12>
 800d146:	2301      	movs	r3, #1
 800d148:	e09d      	b.n	800d286 <HAL_SPI_Init+0x14e>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d108      	bne.n	800d164 <HAL_SPI_Init+0x2c>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d15a:	d009      	beq.n	800d170 <HAL_SPI_Init+0x38>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	61da      	str	r2, [r3, #28]
 800d162:	e005      	b.n	800d170 <HAL_SPI_Init+0x38>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	611a      	str	r2, [r3, #16]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	615a      	str	r2, [r3, #20]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	629a      	str	r2, [r3, #40]	; 0x28
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d106      	bne.n	800d190 <HAL_SPI_Init+0x58>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7fb fc8c 	bl	8008aa8 <HAL_SPI_MspInit>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2202      	movs	r2, #2
 800d194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1b0:	d902      	bls.n	800d1b8 <HAL_SPI_Init+0x80>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60fb      	str	r3, [r7, #12]
 800d1b6:	e002      	b.n	800d1be <HAL_SPI_Init+0x86>
 800d1b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d1c6:	d007      	beq.n	800d1d8 <HAL_SPI_Init+0xa0>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1d0:	d002      	beq.n	800d1d8 <HAL_SPI_Init+0xa0>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	629a      	str	r2, [r3, #40]	; 0x28
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	f003 0302 	and.w	r3, r3, #2
 800d1f2:	431a      	orrs	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d206:	431a      	orrs	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	69db      	ldr	r3, [r3, #28]
 800d20c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d210:	431a      	orrs	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d21a:	ea42 0103 	orr.w	r1, r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d222:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	430a      	orrs	r2, r1
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	0c1b      	lsrs	r3, r3, #16
 800d234:	f003 0204 	and.w	r2, r3, #4
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	f003 0310 	and.w	r3, r3, #16
 800d240:	431a      	orrs	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d246:	f003 0308 	and.w	r3, r3, #8
 800d24a:	431a      	orrs	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d254:	ea42 0103 	orr.w	r1, r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	430a      	orrs	r2, r1
 800d264:	605a      	str	r2, [r3, #4]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69da      	ldr	r2, [r3, #28]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d274:	61da      	str	r2, [r3, #28]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	661a      	str	r2, [r3, #96]	; 0x60
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d284:	2300      	movs	r3, #0
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <HAL_SPI_Transmit>:
 800d28e:	b580      	push	{r7, lr}
 800d290:	b088      	sub	sp, #32
 800d292:	af00      	add	r7, sp, #0
 800d294:	60f8      	str	r0, [r7, #12]
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	603b      	str	r3, [r7, #0]
 800d29a:	4613      	mov	r3, r2
 800d29c:	80fb      	strh	r3, [r7, #6]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	77fb      	strb	r3, [r7, #31]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d101      	bne.n	800d2b0 <HAL_SPI_Transmit+0x22>
 800d2ac:	2302      	movs	r3, #2
 800d2ae:	e15f      	b.n	800d570 <HAL_SPI_Transmit+0x2e2>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800d2b8:	f7fc fa6c 	bl	8009794 <HAL_GetTick>
 800d2bc:	61b8      	str	r0, [r7, #24]
 800d2be:	88fb      	ldrh	r3, [r7, #6]
 800d2c0:	82fb      	strh	r3, [r7, #22]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d002      	beq.n	800d2d4 <HAL_SPI_Transmit+0x46>
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	77fb      	strb	r3, [r7, #31]
 800d2d2:	e148      	b.n	800d566 <HAL_SPI_Transmit+0x2d8>
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d002      	beq.n	800d2e0 <HAL_SPI_Transmit+0x52>
 800d2da:	88fb      	ldrh	r3, [r7, #6]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d102      	bne.n	800d2e6 <HAL_SPI_Transmit+0x58>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	77fb      	strb	r3, [r7, #31]
 800d2e4:	e13f      	b.n	800d566 <HAL_SPI_Transmit+0x2d8>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2203      	movs	r2, #3
 800d2ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	661a      	str	r2, [r3, #96]	; 0x60
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	639a      	str	r2, [r3, #56]	; 0x38
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	88fa      	ldrh	r2, [r7, #6]
 800d2fe:	879a      	strh	r2, [r3, #60]	; 0x3c
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	88fa      	ldrh	r2, [r7, #6]
 800d304:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2200      	movs	r2, #0
 800d30a:	641a      	str	r2, [r3, #64]	; 0x40
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	651a      	str	r2, [r3, #80]	; 0x50
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	64da      	str	r2, [r3, #76]	; 0x4c
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d330:	d10f      	bne.n	800d352 <HAL_SPI_Transmit+0xc4>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d350:	601a      	str	r2, [r3, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d35c:	2b40      	cmp	r3, #64	; 0x40
 800d35e:	d007      	beq.n	800d370 <HAL_SPI_Transmit+0xe2>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d378:	d94f      	bls.n	800d41a <HAL_SPI_Transmit+0x18c>
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d002      	beq.n	800d388 <HAL_SPI_Transmit+0xfa>
 800d382:	8afb      	ldrh	r3, [r7, #22]
 800d384:	2b01      	cmp	r3, #1
 800d386:	d142      	bne.n	800d40e <HAL_SPI_Transmit+0x180>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38c:	881a      	ldrh	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	60da      	str	r2, [r3, #12]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d398:	1c9a      	adds	r2, r3, #2
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	639a      	str	r2, [r3, #56]	; 0x38
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d3ac:	e02f      	b.n	800d40e <HAL_SPI_Transmit+0x180>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	f003 0302 	and.w	r3, r3, #2
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d112      	bne.n	800d3e2 <HAL_SPI_Transmit+0x154>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c0:	881a      	ldrh	r2, [r3, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	60da      	str	r2, [r3, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	1c9a      	adds	r2, r3, #2
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	639a      	str	r2, [r3, #56]	; 0x38
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d3e0:	e015      	b.n	800d40e <HAL_SPI_Transmit+0x180>
 800d3e2:	f7fc f9d7 	bl	8009794 <HAL_GetTick>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d803      	bhi.n	800d3fa <HAL_SPI_Transmit+0x16c>
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f8:	d102      	bne.n	800d400 <HAL_SPI_Transmit+0x172>
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d106      	bne.n	800d40e <HAL_SPI_Transmit+0x180>
 800d400:	2303      	movs	r3, #3
 800d402:	77fb      	strb	r3, [r7, #31]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2201      	movs	r2, #1
 800d408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d40c:	e0ab      	b.n	800d566 <HAL_SPI_Transmit+0x2d8>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d412:	b29b      	uxth	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1ca      	bne.n	800d3ae <HAL_SPI_Transmit+0x120>
 800d418:	e080      	b.n	800d51c <HAL_SPI_Transmit+0x28e>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <HAL_SPI_Transmit+0x19a>
 800d422:	8afb      	ldrh	r3, [r7, #22]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d174      	bne.n	800d512 <HAL_SPI_Transmit+0x284>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d912      	bls.n	800d458 <HAL_SPI_Transmit+0x1ca>
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	881a      	ldrh	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	60da      	str	r2, [r3, #12]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	1c9a      	adds	r2, r3, #2
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	639a      	str	r2, [r3, #56]	; 0x38
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	3b02      	subs	r3, #2
 800d450:	b29a      	uxth	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d456:	e05c      	b.n	800d512 <HAL_SPI_Transmit+0x284>
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	330c      	adds	r3, #12
 800d462:	7812      	ldrb	r2, [r2, #0]
 800d464:	701a      	strb	r2, [r3, #0]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	639a      	str	r2, [r3, #56]	; 0x38
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d474:	b29b      	uxth	r3, r3
 800d476:	3b01      	subs	r3, #1
 800d478:	b29a      	uxth	r2, r3
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d47e:	e048      	b.n	800d512 <HAL_SPI_Transmit+0x284>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f003 0302 	and.w	r3, r3, #2
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d12b      	bne.n	800d4e6 <HAL_SPI_Transmit+0x258>
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d492:	b29b      	uxth	r3, r3
 800d494:	2b01      	cmp	r3, #1
 800d496:	d912      	bls.n	800d4be <HAL_SPI_Transmit+0x230>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49c:	881a      	ldrh	r2, [r3, #0]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	60da      	str	r2, [r3, #12]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a8:	1c9a      	adds	r2, r3, #2
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	639a      	str	r2, [r3, #56]	; 0x38
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	3b02      	subs	r3, #2
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4bc:	e029      	b.n	800d512 <HAL_SPI_Transmit+0x284>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	330c      	adds	r3, #12
 800d4c8:	7812      	ldrb	r2, [r2, #0]
 800d4ca:	701a      	strb	r2, [r3, #0]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	639a      	str	r2, [r3, #56]	; 0x38
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4e4:	e015      	b.n	800d512 <HAL_SPI_Transmit+0x284>
 800d4e6:	f7fc f955 	bl	8009794 <HAL_GetTick>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d803      	bhi.n	800d4fe <HAL_SPI_Transmit+0x270>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fc:	d102      	bne.n	800d504 <HAL_SPI_Transmit+0x276>
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <HAL_SPI_Transmit+0x284>
 800d504:	2303      	movs	r3, #3
 800d506:	77fb      	strb	r3, [r7, #31]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d510:	e029      	b.n	800d566 <HAL_SPI_Transmit+0x2d8>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d516:	b29b      	uxth	r3, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1b1      	bne.n	800d480 <HAL_SPI_Transmit+0x1f2>
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f000 fc7d 	bl	800de20 <SPI_EndRxTxTransaction>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <HAL_SPI_Transmit+0x2a4>
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2220      	movs	r2, #32
 800d530:	661a      	str	r2, [r3, #96]	; 0x60
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10a      	bne.n	800d550 <HAL_SPI_Transmit+0x2c2>
 800d53a:	2300      	movs	r3, #0
 800d53c:	613b      	str	r3, [r7, #16]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	613b      	str	r3, [r7, #16]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	613b      	str	r3, [r7, #16]
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <HAL_SPI_Transmit+0x2d0>
 800d558:	2301      	movs	r3, #1
 800d55a:	77fb      	strb	r3, [r7, #31]
 800d55c:	e003      	b.n	800d566 <HAL_SPI_Transmit+0x2d8>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2200      	movs	r2, #0
 800d56a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800d56e:	7ffb      	ldrb	r3, [r7, #31]
 800d570:	4618      	mov	r0, r3
 800d572:	3720      	adds	r7, #32
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <HAL_SPI_TransmitReceive>:
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08a      	sub	sp, #40	; 0x28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	807b      	strh	r3, [r7, #2]
 800d586:	2301      	movs	r3, #1
 800d588:	627b      	str	r3, [r7, #36]	; 0x24
 800d58a:	2300      	movs	r3, #0
 800d58c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d596:	2b01      	cmp	r3, #1
 800d598:	d101      	bne.n	800d59e <HAL_SPI_TransmitReceive+0x26>
 800d59a:	2302      	movs	r3, #2
 800d59c:	e20a      	b.n	800d9b4 <HAL_SPI_TransmitReceive+0x43c>
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800d5a6:	f7fc f8f5 	bl	8009794 <HAL_GetTick>
 800d5aa:	61f8      	str	r0, [r7, #28]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d5b2:	76fb      	strb	r3, [r7, #27]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	617b      	str	r3, [r7, #20]
 800d5ba:	887b      	ldrh	r3, [r7, #2]
 800d5bc:	827b      	strh	r3, [r7, #18]
 800d5be:	887b      	ldrh	r3, [r7, #2]
 800d5c0:	823b      	strh	r3, [r7, #16]
 800d5c2:	7efb      	ldrb	r3, [r7, #27]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d00e      	beq.n	800d5e6 <HAL_SPI_TransmitReceive+0x6e>
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5ce:	d106      	bne.n	800d5de <HAL_SPI_TransmitReceive+0x66>
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <HAL_SPI_TransmitReceive+0x66>
 800d5d8:	7efb      	ldrb	r3, [r7, #27]
 800d5da:	2b04      	cmp	r3, #4
 800d5dc:	d003      	beq.n	800d5e6 <HAL_SPI_TransmitReceive+0x6e>
 800d5de:	2302      	movs	r3, #2
 800d5e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5e4:	e1e0      	b.n	800d9a8 <HAL_SPI_TransmitReceive+0x430>
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d005      	beq.n	800d5f8 <HAL_SPI_TransmitReceive+0x80>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d002      	beq.n	800d5f8 <HAL_SPI_TransmitReceive+0x80>
 800d5f2:	887b      	ldrh	r3, [r7, #2]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d103      	bne.n	800d600 <HAL_SPI_TransmitReceive+0x88>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5fe:	e1d3      	b.n	800d9a8 <HAL_SPI_TransmitReceive+0x430>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b04      	cmp	r3, #4
 800d60a:	d003      	beq.n	800d614 <HAL_SPI_TransmitReceive+0x9c>
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2205      	movs	r2, #5
 800d610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	661a      	str	r2, [r3, #96]	; 0x60
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	641a      	str	r2, [r3, #64]	; 0x40
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	887a      	ldrh	r2, [r7, #2]
 800d624:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	887a      	ldrh	r2, [r7, #2]
 800d62c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	68ba      	ldr	r2, [r7, #8]
 800d634:	639a      	str	r2, [r3, #56]	; 0x38
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	887a      	ldrh	r2, [r7, #2]
 800d63a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	887a      	ldrh	r2, [r7, #2]
 800d640:	879a      	strh	r2, [r3, #60]	; 0x3c
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	64da      	str	r2, [r3, #76]	; 0x4c
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	651a      	str	r2, [r3, #80]	; 0x50
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d656:	d802      	bhi.n	800d65e <HAL_SPI_TransmitReceive+0xe6>
 800d658:	8a3b      	ldrh	r3, [r7, #16]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d908      	bls.n	800d670 <HAL_SPI_TransmitReceive+0xf8>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	685a      	ldr	r2, [r3, #4]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d66c:	605a      	str	r2, [r3, #4]
 800d66e:	e007      	b.n	800d680 <HAL_SPI_TransmitReceive+0x108>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d67e:	605a      	str	r2, [r3, #4]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d68a:	2b40      	cmp	r3, #64	; 0x40
 800d68c:	d007      	beq.n	800d69e <HAL_SPI_TransmitReceive+0x126>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6a6:	f240 8081 	bls.w	800d7ac <HAL_SPI_TransmitReceive+0x234>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <HAL_SPI_TransmitReceive+0x140>
 800d6b2:	8a7b      	ldrh	r3, [r7, #18]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d16d      	bne.n	800d794 <HAL_SPI_TransmitReceive+0x21c>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6bc:	881a      	ldrh	r2, [r3, #0]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	60da      	str	r2, [r3, #12]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c8:	1c9a      	adds	r2, r3, #2
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	639a      	str	r2, [r3, #56]	; 0x38
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d6dc:	e05a      	b.n	800d794 <HAL_SPI_TransmitReceive+0x21c>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	f003 0302 	and.w	r3, r3, #2
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d11b      	bne.n	800d724 <HAL_SPI_TransmitReceive+0x1ac>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d016      	beq.n	800d724 <HAL_SPI_TransmitReceive+0x1ac>
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d113      	bne.n	800d724 <HAL_SPI_TransmitReceive+0x1ac>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d700:	881a      	ldrh	r2, [r3, #0]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60da      	str	r2, [r3, #12]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d70c:	1c9a      	adds	r2, r3, #2
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	639a      	str	r2, [r3, #56]	; 0x38
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d716:	b29b      	uxth	r3, r3
 800d718:	3b01      	subs	r3, #1
 800d71a:	b29a      	uxth	r2, r3
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d720:	2300      	movs	r3, #0
 800d722:	627b      	str	r3, [r7, #36]	; 0x24
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d11c      	bne.n	800d76c <HAL_SPI_TransmitReceive+0x1f4>
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d738:	b29b      	uxth	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d016      	beq.n	800d76c <HAL_SPI_TransmitReceive+0x1f4>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68da      	ldr	r2, [r3, #12]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d748:	b292      	uxth	r2, r2
 800d74a:	801a      	strh	r2, [r3, #0]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d750:	1c9a      	adds	r2, r3, #2
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	641a      	str	r2, [r3, #64]	; 0x40
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	3b01      	subs	r3, #1
 800d760:	b29a      	uxth	r2, r3
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d768:	2301      	movs	r3, #1
 800d76a:	627b      	str	r3, [r7, #36]	; 0x24
 800d76c:	f7fc f812 	bl	8009794 <HAL_GetTick>
 800d770:	4602      	mov	r2, r0
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d778:	429a      	cmp	r2, r3
 800d77a:	d80b      	bhi.n	800d794 <HAL_SPI_TransmitReceive+0x21c>
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d782:	d007      	beq.n	800d794 <HAL_SPI_TransmitReceive+0x21c>
 800d784:	2303      	movs	r3, #3
 800d786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d792:	e109      	b.n	800d9a8 <HAL_SPI_TransmitReceive+0x430>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d798:	b29b      	uxth	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d19f      	bne.n	800d6de <HAL_SPI_TransmitReceive+0x166>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d199      	bne.n	800d6de <HAL_SPI_TransmitReceive+0x166>
 800d7aa:	e0e3      	b.n	800d974 <HAL_SPI_TransmitReceive+0x3fc>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d003      	beq.n	800d7bc <HAL_SPI_TransmitReceive+0x244>
 800d7b4:	8a7b      	ldrh	r3, [r7, #18]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	f040 80cf 	bne.w	800d95a <HAL_SPI_TransmitReceive+0x3e2>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d912      	bls.n	800d7ec <HAL_SPI_TransmitReceive+0x274>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	881a      	ldrh	r2, [r3, #0]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	60da      	str	r2, [r3, #12]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d6:	1c9a      	adds	r2, r3, #2
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	639a      	str	r2, [r3, #56]	; 0x38
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	3b02      	subs	r3, #2
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d7ea:	e0b6      	b.n	800d95a <HAL_SPI_TransmitReceive+0x3e2>
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	330c      	adds	r3, #12
 800d7f6:	7812      	ldrb	r2, [r2, #0]
 800d7f8:	701a      	strb	r2, [r3, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fe:	1c5a      	adds	r2, r3, #1
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	639a      	str	r2, [r3, #56]	; 0x38
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d808:	b29b      	uxth	r3, r3
 800d80a:	3b01      	subs	r3, #1
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d812:	e0a2      	b.n	800d95a <HAL_SPI_TransmitReceive+0x3e2>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	f003 0302 	and.w	r3, r3, #2
 800d81e:	2b02      	cmp	r3, #2
 800d820:	d134      	bne.n	800d88c <HAL_SPI_TransmitReceive+0x314>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d826:	b29b      	uxth	r3, r3
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d02f      	beq.n	800d88c <HAL_SPI_TransmitReceive+0x314>
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d12c      	bne.n	800d88c <HAL_SPI_TransmitReceive+0x314>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d836:	b29b      	uxth	r3, r3
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d912      	bls.n	800d862 <HAL_SPI_TransmitReceive+0x2ea>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d840:	881a      	ldrh	r2, [r3, #0]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	60da      	str	r2, [r3, #12]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84c:	1c9a      	adds	r2, r3, #2
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	639a      	str	r2, [r3, #56]	; 0x38
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d856:	b29b      	uxth	r3, r3
 800d858:	3b02      	subs	r3, #2
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d860:	e012      	b.n	800d888 <HAL_SPI_TransmitReceive+0x310>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	330c      	adds	r3, #12
 800d86c:	7812      	ldrb	r2, [r2, #0]
 800d86e:	701a      	strb	r2, [r3, #0]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d874:	1c5a      	adds	r2, r3, #1
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	639a      	str	r2, [r3, #56]	; 0x38
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d87e:	b29b      	uxth	r3, r3
 800d880:	3b01      	subs	r3, #1
 800d882:	b29a      	uxth	r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d888:	2300      	movs	r3, #0
 800d88a:	627b      	str	r3, [r7, #36]	; 0x24
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	f003 0301 	and.w	r3, r3, #1
 800d896:	2b01      	cmp	r3, #1
 800d898:	d148      	bne.n	800d92c <HAL_SPI_TransmitReceive+0x3b4>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d042      	beq.n	800d92c <HAL_SPI_TransmitReceive+0x3b4>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d923      	bls.n	800d8fa <HAL_SPI_TransmitReceive+0x382>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68da      	ldr	r2, [r3, #12]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8bc:	b292      	uxth	r2, r2
 800d8be:	801a      	strh	r2, [r3, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c4:	1c9a      	adds	r2, r3, #2
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	641a      	str	r2, [r3, #64]	; 0x40
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	3b02      	subs	r3, #2
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d81f      	bhi.n	800d928 <HAL_SPI_TransmitReceive+0x3b0>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d8f6:	605a      	str	r2, [r3, #4]
 800d8f8:	e016      	b.n	800d928 <HAL_SPI_TransmitReceive+0x3b0>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f103 020c 	add.w	r2, r3, #12
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d906:	7812      	ldrb	r2, [r2, #0]
 800d908:	b2d2      	uxtb	r2, r2
 800d90a:	701a      	strb	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	641a      	str	r2, [r3, #64]	; 0x40
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	3b01      	subs	r3, #1
 800d920:	b29a      	uxth	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d928:	2301      	movs	r3, #1
 800d92a:	627b      	str	r3, [r7, #36]	; 0x24
 800d92c:	f7fb ff32 	bl	8009794 <HAL_GetTick>
 800d930:	4602      	mov	r2, r0
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d938:	429a      	cmp	r2, r3
 800d93a:	d803      	bhi.n	800d944 <HAL_SPI_TransmitReceive+0x3cc>
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d942:	d102      	bne.n	800d94a <HAL_SPI_TransmitReceive+0x3d2>
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	2b00      	cmp	r3, #0
 800d948:	d107      	bne.n	800d95a <HAL_SPI_TransmitReceive+0x3e2>
 800d94a:	2303      	movs	r3, #3
 800d94c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d958:	e026      	b.n	800d9a8 <HAL_SPI_TransmitReceive+0x430>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d95e:	b29b      	uxth	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	f47f af57 	bne.w	800d814 <HAL_SPI_TransmitReceive+0x29c>
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f47f af50 	bne.w	800d814 <HAL_SPI_TransmitReceive+0x29c>
 800d974:	69fa      	ldr	r2, [r7, #28]
 800d976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f000 fa51 	bl	800de20 <SPI_EndRxTxTransaction>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d005      	beq.n	800d990 <HAL_SPI_TransmitReceive+0x418>
 800d984:	2301      	movs	r3, #1
 800d986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2220      	movs	r2, #32
 800d98e:	661a      	str	r2, [r3, #96]	; 0x60
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <HAL_SPI_TransmitReceive+0x428>
 800d998:	2301      	movs	r3, #1
 800d99a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d99e:	e003      	b.n	800d9a8 <HAL_SPI_TransmitReceive+0x430>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800d9b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3728      	adds	r7, #40	; 0x28
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_SPI_IRQHandler>:
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	61fb      	str	r3, [r7, #28]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	61bb      	str	r3, [r7, #24]
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10e      	bne.n	800d9fc <HAL_SPI_IRQHandler+0x40>
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	f003 0301 	and.w	r3, r3, #1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d009      	beq.n	800d9fc <HAL_SPI_IRQHandler+0x40>
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <HAL_SPI_IRQHandler+0x40>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	4798      	blx	r3
 800d9fa:	e0ce      	b.n	800db9a <HAL_SPI_IRQHandler+0x1de>
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	f003 0302 	and.w	r3, r3, #2
 800da02:	2b00      	cmp	r3, #0
 800da04:	d009      	beq.n	800da1a <HAL_SPI_IRQHandler+0x5e>
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d004      	beq.n	800da1a <HAL_SPI_IRQHandler+0x5e>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	4798      	blx	r3
 800da18:	e0bf      	b.n	800db9a <HAL_SPI_IRQHandler+0x1de>
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	f003 0320 	and.w	r3, r3, #32
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10a      	bne.n	800da3a <HAL_SPI_IRQHandler+0x7e>
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d105      	bne.n	800da3a <HAL_SPI_IRQHandler+0x7e>
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da34:	2b00      	cmp	r3, #0
 800da36:	f000 80b0 	beq.w	800db9a <HAL_SPI_IRQHandler+0x1de>
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	f003 0320 	and.w	r3, r3, #32
 800da40:	2b00      	cmp	r3, #0
 800da42:	f000 80aa 	beq.w	800db9a <HAL_SPI_IRQHandler+0x1de>
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d023      	beq.n	800da98 <HAL_SPI_IRQHandler+0xdc>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da56:	b2db      	uxtb	r3, r3
 800da58:	2b03      	cmp	r3, #3
 800da5a:	d011      	beq.n	800da80 <HAL_SPI_IRQHandler+0xc4>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da60:	f043 0204 	orr.w	r2, r3, #4
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	661a      	str	r2, [r3, #96]	; 0x60
 800da68:	2300      	movs	r3, #0
 800da6a:	617b      	str	r3, [r7, #20]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	617b      	str	r3, [r7, #20]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	617b      	str	r3, [r7, #20]
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	e00b      	b.n	800da98 <HAL_SPI_IRQHandler+0xdc>
 800da80:	2300      	movs	r3, #0
 800da82:	613b      	str	r3, [r7, #16]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	613b      	str	r3, [r7, #16]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	613b      	str	r3, [r7, #16]
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	e080      	b.n	800db9a <HAL_SPI_IRQHandler+0x1de>
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	f003 0320 	and.w	r3, r3, #32
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d014      	beq.n	800dacc <HAL_SPI_IRQHandler+0x110>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daa6:	f043 0201 	orr.w	r2, r3, #1
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	661a      	str	r2, [r3, #96]	; 0x60
 800daae:	2300      	movs	r3, #0
 800dab0:	60fb      	str	r3, [r7, #12]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00c      	beq.n	800daf0 <HAL_SPI_IRQHandler+0x134>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dada:	f043 0208 	orr.w	r2, r3, #8
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	661a      	str	r2, [r3, #96]	; 0x60
 800dae2:	2300      	movs	r3, #0
 800dae4:	60bb      	str	r3, [r7, #8]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	60bb      	str	r3, [r7, #8]
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d04f      	beq.n	800db98 <HAL_SPI_IRQHandler+0x1dc>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800db06:	605a      	str	r2, [r3, #4]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	f003 0302 	and.w	r3, r3, #2
 800db16:	2b00      	cmp	r3, #0
 800db18:	d104      	bne.n	800db24 <HAL_SPI_IRQHandler+0x168>
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	d034      	beq.n	800db8e <HAL_SPI_IRQHandler+0x1d2>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f022 0203 	bic.w	r2, r2, #3
 800db32:	605a      	str	r2, [r3, #4]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d011      	beq.n	800db60 <HAL_SPI_IRQHandler+0x1a4>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db40:	4a17      	ldr	r2, [pc, #92]	; (800dba0 <HAL_SPI_IRQHandler+0x1e4>)
 800db42:	639a      	str	r2, [r3, #56]	; 0x38
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fc f862 	bl	8009c12 <HAL_DMA_Abort_IT>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d005      	beq.n	800db60 <HAL_SPI_IRQHandler+0x1a4>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	661a      	str	r2, [r3, #96]	; 0x60
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db64:	2b00      	cmp	r3, #0
 800db66:	d016      	beq.n	800db96 <HAL_SPI_IRQHandler+0x1da>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db6c:	4a0c      	ldr	r2, [pc, #48]	; (800dba0 <HAL_SPI_IRQHandler+0x1e4>)
 800db6e:	639a      	str	r2, [r3, #56]	; 0x38
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db74:	4618      	mov	r0, r3
 800db76:	f7fc f84c 	bl	8009c12 <HAL_DMA_Abort_IT>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00a      	beq.n	800db96 <HAL_SPI_IRQHandler+0x1da>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	661a      	str	r2, [r3, #96]	; 0x60
 800db8c:	e003      	b.n	800db96 <HAL_SPI_IRQHandler+0x1da>
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f808 	bl	800dba4 <HAL_SPI_ErrorCallback>
 800db94:	e000      	b.n	800db98 <HAL_SPI_IRQHandler+0x1dc>
 800db96:	bf00      	nop
 800db98:	bf00      	nop
 800db9a:	3720      	adds	r7, #32
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	0800dbb9 	.word	0x0800dbb9

0800dba4 <HAL_SPI_ErrorCallback>:
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <SPI_DMAAbortOnError>:
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7ff ffe5 	bl	800dba4 <HAL_SPI_ErrorCallback>
 800dbda:	bf00      	nop
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
	...

0800dbe4 <SPI_WaitFlagStateUntilTimeout>:
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	603b      	str	r3, [r7, #0]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	71fb      	strb	r3, [r7, #7]
 800dbf4:	f7fb fdce 	bl	8009794 <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	1a9b      	subs	r3, r3, r2
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	4413      	add	r3, r2
 800dc02:	61fb      	str	r3, [r7, #28]
 800dc04:	f7fb fdc6 	bl	8009794 <HAL_GetTick>
 800dc08:	61b8      	str	r0, [r7, #24]
 800dc0a:	4b39      	ldr	r3, [pc, #228]	; (800dcf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	015b      	lsls	r3, r3, #5
 800dc10:	0d1b      	lsrs	r3, r3, #20
 800dc12:	69fa      	ldr	r2, [r7, #28]
 800dc14:	fb02 f303 	mul.w	r3, r2, r3
 800dc18:	617b      	str	r3, [r7, #20]
 800dc1a:	e054      	b.n	800dcc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc22:	d050      	beq.n	800dcc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800dc24:	f7fb fdb6 	bl	8009794 <HAL_GetTick>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	69fa      	ldr	r2, [r7, #28]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d902      	bls.n	800dc3a <SPI_WaitFlagStateUntilTimeout+0x56>
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d13d      	bne.n	800dcb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dc48:	605a      	str	r2, [r3, #4]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc52:	d111      	bne.n	800dc78 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc5c:	d004      	beq.n	800dc68 <SPI_WaitFlagStateUntilTimeout+0x84>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc66:	d107      	bne.n	800dc78 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc76:	601a      	str	r2, [r3, #0]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc80:	d10f      	bne.n	800dca2 <SPI_WaitFlagStateUntilTimeout+0xbe>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dc90:	601a      	str	r2, [r3, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dca0:	601a      	str	r2, [r3, #0]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	e017      	b.n	800dce6 <SPI_WaitFlagStateUntilTimeout+0x102>
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	617b      	str	r3, [r7, #20]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	689a      	ldr	r2, [r3, #8]
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	4013      	ands	r3, r2
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	bf0c      	ite	eq
 800dcd6:	2301      	moveq	r3, #1
 800dcd8:	2300      	movne	r3, #0
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	461a      	mov	r2, r3
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d19b      	bne.n	800dc1c <SPI_WaitFlagStateUntilTimeout+0x38>
 800dce4:	2300      	movs	r3, #0
 800dce6:	4618      	mov	r0, r3
 800dce8:	3720      	adds	r7, #32
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	2000006c 	.word	0x2000006c

0800dcf4 <SPI_WaitFifoStateUntilTimeout>:
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08a      	sub	sp, #40	; 0x28
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	603b      	str	r3, [r7, #0]
 800dd02:	2300      	movs	r3, #0
 800dd04:	75fb      	strb	r3, [r7, #23]
 800dd06:	f7fb fd45 	bl	8009794 <HAL_GetTick>
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	1a9b      	subs	r3, r3, r2
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	4413      	add	r3, r2
 800dd14:	627b      	str	r3, [r7, #36]	; 0x24
 800dd16:	f7fb fd3d 	bl	8009794 <HAL_GetTick>
 800dd1a:	6238      	str	r0, [r7, #32]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	330c      	adds	r3, #12
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	4b3d      	ldr	r3, [pc, #244]	; (800de1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	00da      	lsls	r2, r3, #3
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	0d1b      	lsrs	r3, r3, #20
 800dd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd36:	fb02 f303 	mul.w	r3, r2, r3
 800dd3a:	61bb      	str	r3, [r7, #24]
 800dd3c:	e060      	b.n	800de00 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dd44:	d107      	bne.n	800dd56 <SPI_WaitFifoStateUntilTimeout+0x62>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d104      	bne.n	800dd56 <SPI_WaitFifoStateUntilTimeout+0x62>
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	75fb      	strb	r3, [r7, #23]
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5c:	d050      	beq.n	800de00 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800dd5e:	f7fb fd19 	bl	8009794 <HAL_GetTick>
 800dd62:	4602      	mov	r2, r0
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d902      	bls.n	800dd74 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d13d      	bne.n	800ddf0 <SPI_WaitFifoStateUntilTimeout+0xfc>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	685a      	ldr	r2, [r3, #4]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dd82:	605a      	str	r2, [r3, #4]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd8c:	d111      	bne.n	800ddb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd96:	d004      	beq.n	800dda2 <SPI_WaitFifoStateUntilTimeout+0xae>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dda0:	d107      	bne.n	800ddb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddb0:	601a      	str	r2, [r3, #0]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddba:	d10f      	bne.n	800dddc <SPI_WaitFifoStateUntilTimeout+0xe8>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2201      	movs	r2, #1
 800dde0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800ddec:	2303      	movs	r3, #3
 800ddee:	e010      	b.n	800de12 <SPI_WaitFifoStateUntilTimeout+0x11e>
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d101      	bne.n	800ddfa <SPI_WaitFifoStateUntilTimeout+0x106>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	627b      	str	r3, [r7, #36]	; 0x24
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	61bb      	str	r3, [r7, #24]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	689a      	ldr	r2, [r3, #8]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	4013      	ands	r3, r2
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d196      	bne.n	800dd3e <SPI_WaitFifoStateUntilTimeout+0x4a>
 800de10:	2300      	movs	r3, #0
 800de12:	4618      	mov	r0, r3
 800de14:	3728      	adds	r7, #40	; 0x28
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	2000006c 	.word	0x2000006c

0800de20 <SPI_EndRxTxTransaction>:
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af02      	add	r7, sp, #8
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	2200      	movs	r2, #0
 800de34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff ff5b 	bl	800dcf4 <SPI_WaitFifoStateUntilTimeout>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d007      	beq.n	800de54 <SPI_EndRxTxTransaction+0x34>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de48:	f043 0220 	orr.w	r2, r3, #32
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	661a      	str	r2, [r3, #96]	; 0x60
 800de50:	2303      	movs	r3, #3
 800de52:	e027      	b.n	800dea4 <SPI_EndRxTxTransaction+0x84>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2200      	movs	r2, #0
 800de5c:	2180      	movs	r1, #128	; 0x80
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7ff fec0 	bl	800dbe4 <SPI_WaitFlagStateUntilTimeout>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d007      	beq.n	800de7a <SPI_EndRxTxTransaction+0x5a>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de6e:	f043 0220 	orr.w	r2, r3, #32
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	661a      	str	r2, [r3, #96]	; 0x60
 800de76:	2303      	movs	r3, #3
 800de78:	e014      	b.n	800dea4 <SPI_EndRxTxTransaction+0x84>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2200      	movs	r2, #0
 800de82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff ff34 	bl	800dcf4 <SPI_WaitFifoStateUntilTimeout>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d007      	beq.n	800dea2 <SPI_EndRxTxTransaction+0x82>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de96:	f043 0220 	orr.w	r2, r3, #32
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	661a      	str	r2, [r3, #96]	; 0x60
 800de9e:	2303      	movs	r3, #3
 800dea0:	e000      	b.n	800dea4 <SPI_EndRxTxTransaction+0x84>
 800dea2:	2300      	movs	r3, #0
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <HAL_TIM_Encoder_Init>:
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d101      	bne.n	800dec0 <HAL_TIM_Encoder_Init+0x14>
 800debc:	2301      	movs	r3, #1
 800debe:	e097      	b.n	800dff0 <HAL_TIM_Encoder_Init+0x144>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d106      	bne.n	800deda <HAL_TIM_Encoder_Init+0x2e>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7fb f821 	bl	8008f1c <HAL_TIM_Encoder_MspInit>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2202      	movs	r2, #2
 800dede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	6812      	ldr	r2, [r2, #0]
 800deec:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800def0:	f023 0307 	bic.w	r3, r3, #7
 800def4:	6093      	str	r3, [r2, #8]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	3304      	adds	r3, #4
 800defe:	4619      	mov	r1, r3
 800df00:	4610      	mov	r0, r2
 800df02:	f000 f879 	bl	800dff8 <TIM_Base_SetConfig>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	617b      	str	r3, [r7, #20]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	699b      	ldr	r3, [r3, #24]
 800df14:	613b      	str	r3, [r7, #16]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	6a1b      	ldr	r3, [r3, #32]
 800df1c:	60fb      	str	r3, [r7, #12]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	4313      	orrs	r3, r2
 800df26:	617b      	str	r3, [r7, #20]
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df2e:	f023 0303 	bic.w	r3, r3, #3
 800df32:	613b      	str	r3, [r7, #16]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	689a      	ldr	r2, [r3, #8]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	021b      	lsls	r3, r3, #8
 800df3e:	4313      	orrs	r3, r2
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	4313      	orrs	r3, r2
 800df44:	613b      	str	r3, [r7, #16]
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800df4c:	f023 030c 	bic.w	r3, r3, #12
 800df50:	613b      	str	r3, [r7, #16]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df5c:	613b      	str	r3, [r7, #16]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	68da      	ldr	r2, [r3, #12]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	69db      	ldr	r3, [r3, #28]
 800df66:	021b      	lsls	r3, r3, #8
 800df68:	4313      	orrs	r3, r2
 800df6a:	693a      	ldr	r2, [r7, #16]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	613b      	str	r3, [r7, #16]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	011a      	lsls	r2, r3, #4
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	031b      	lsls	r3, r3, #12
 800df7c:	4313      	orrs	r3, r2
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	4313      	orrs	r3, r2
 800df82:	613b      	str	r3, [r7, #16]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	685a      	ldr	r2, [r3, #4]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	695b      	ldr	r3, [r3, #20]
 800df9c:	011b      	lsls	r3, r3, #4
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	60fb      	str	r3, [r7, #12]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	697a      	ldr	r2, [r7, #20]
 800dfac:	609a      	str	r2, [r3, #8]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	693a      	ldr	r2, [r7, #16]
 800dfb4:	619a      	str	r2, [r3, #24]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	621a      	str	r2, [r3, #32]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2201      	movs	r2, #1
 800dfea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dfee:	2300      	movs	r3, #0
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <TIM_Base_SetConfig>:
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	4a4c      	ldr	r2, [pc, #304]	; (800e13c <TIM_Base_SetConfig+0x144>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d017      	beq.n	800e040 <TIM_Base_SetConfig+0x48>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e016:	d013      	beq.n	800e040 <TIM_Base_SetConfig+0x48>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4a49      	ldr	r2, [pc, #292]	; (800e140 <TIM_Base_SetConfig+0x148>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d00f      	beq.n	800e040 <TIM_Base_SetConfig+0x48>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4a48      	ldr	r2, [pc, #288]	; (800e144 <TIM_Base_SetConfig+0x14c>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d00b      	beq.n	800e040 <TIM_Base_SetConfig+0x48>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4a47      	ldr	r2, [pc, #284]	; (800e148 <TIM_Base_SetConfig+0x150>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d007      	beq.n	800e040 <TIM_Base_SetConfig+0x48>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a46      	ldr	r2, [pc, #280]	; (800e14c <TIM_Base_SetConfig+0x154>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d003      	beq.n	800e040 <TIM_Base_SetConfig+0x48>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a45      	ldr	r2, [pc, #276]	; (800e150 <TIM_Base_SetConfig+0x158>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d108      	bne.n	800e052 <TIM_Base_SetConfig+0x5a>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	4313      	orrs	r3, r2
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a39      	ldr	r2, [pc, #228]	; (800e13c <TIM_Base_SetConfig+0x144>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d023      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e060:	d01f      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a36      	ldr	r2, [pc, #216]	; (800e140 <TIM_Base_SetConfig+0x148>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d01b      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4a35      	ldr	r2, [pc, #212]	; (800e144 <TIM_Base_SetConfig+0x14c>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d017      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4a34      	ldr	r2, [pc, #208]	; (800e148 <TIM_Base_SetConfig+0x150>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d013      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4a33      	ldr	r2, [pc, #204]	; (800e14c <TIM_Base_SetConfig+0x154>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d00f      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4a33      	ldr	r2, [pc, #204]	; (800e154 <TIM_Base_SetConfig+0x15c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d00b      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a32      	ldr	r2, [pc, #200]	; (800e158 <TIM_Base_SetConfig+0x160>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d007      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4a31      	ldr	r2, [pc, #196]	; (800e15c <TIM_Base_SetConfig+0x164>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d003      	beq.n	800e0a2 <TIM_Base_SetConfig+0xaa>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a2c      	ldr	r2, [pc, #176]	; (800e150 <TIM_Base_SetConfig+0x158>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d108      	bne.n	800e0b4 <TIM_Base_SetConfig+0xbc>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0a8:	60fb      	str	r3, [r7, #12]
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	695b      	ldr	r3, [r3, #20]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	60fb      	str	r3, [r7, #12]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	689a      	ldr	r2, [r3, #8]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	62da      	str	r2, [r3, #44]	; 0x2c
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	629a      	str	r2, [r3, #40]	; 0x28
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4a18      	ldr	r2, [pc, #96]	; (800e13c <TIM_Base_SetConfig+0x144>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d013      	beq.n	800e108 <TIM_Base_SetConfig+0x110>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a1a      	ldr	r2, [pc, #104]	; (800e14c <TIM_Base_SetConfig+0x154>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d00f      	beq.n	800e108 <TIM_Base_SetConfig+0x110>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4a1a      	ldr	r2, [pc, #104]	; (800e154 <TIM_Base_SetConfig+0x15c>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d00b      	beq.n	800e108 <TIM_Base_SetConfig+0x110>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4a19      	ldr	r2, [pc, #100]	; (800e158 <TIM_Base_SetConfig+0x160>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d007      	beq.n	800e108 <TIM_Base_SetConfig+0x110>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	4a18      	ldr	r2, [pc, #96]	; (800e15c <TIM_Base_SetConfig+0x164>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d003      	beq.n	800e108 <TIM_Base_SetConfig+0x110>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4a13      	ldr	r2, [pc, #76]	; (800e150 <TIM_Base_SetConfig+0x158>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d103      	bne.n	800e110 <TIM_Base_SetConfig+0x118>
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	691a      	ldr	r2, [r3, #16]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	631a      	str	r2, [r3, #48]	; 0x30
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	615a      	str	r2, [r3, #20]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	f003 0301 	and.w	r3, r3, #1
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d105      	bne.n	800e12e <TIM_Base_SetConfig+0x136>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	f023 0201 	bic.w	r2, r3, #1
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	611a      	str	r2, [r3, #16]
 800e12e:	bf00      	nop
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	40012c00 	.word	0x40012c00
 800e140:	40000400 	.word	0x40000400
 800e144:	40000800 	.word	0x40000800
 800e148:	40000c00 	.word	0x40000c00
 800e14c:	40013400 	.word	0x40013400
 800e150:	40015000 	.word	0x40015000
 800e154:	40014000 	.word	0x40014000
 800e158:	40014400 	.word	0x40014400
 800e15c:	40014800 	.word	0x40014800

0800e160 <HAL_TIMEx_MasterConfigSynchronization>:
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e170:	2b01      	cmp	r3, #1
 800e172:	d101      	bne.n	800e178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e174:	2302      	movs	r3, #2
 800e176:	e074      	b.n	800e262 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2202      	movs	r2, #2
 800e184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	60bb      	str	r3, [r7, #8]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a34      	ldr	r2, [pc, #208]	; (800e270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d009      	beq.n	800e1b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a33      	ldr	r2, [pc, #204]	; (800e274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d004      	beq.n	800e1b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a31      	ldr	r2, [pc, #196]	; (800e278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d108      	bne.n	800e1c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e1bc:	60fb      	str	r3, [r7, #12]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	605a      	str	r2, [r3, #4]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a21      	ldr	r2, [pc, #132]	; (800e270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d022      	beq.n	800e236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1f8:	d01d      	beq.n	800e236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a1f      	ldr	r2, [pc, #124]	; (800e27c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d018      	beq.n	800e236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a1d      	ldr	r2, [pc, #116]	; (800e280 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d013      	beq.n	800e236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a1c      	ldr	r2, [pc, #112]	; (800e284 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d00e      	beq.n	800e236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a15      	ldr	r2, [pc, #84]	; (800e274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d009      	beq.n	800e236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a18      	ldr	r2, [pc, #96]	; (800e288 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d004      	beq.n	800e236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a11      	ldr	r2, [pc, #68]	; (800e278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d10c      	bne.n	800e250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e23c:	60bb      	str	r3, [r7, #8]
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	4313      	orrs	r3, r2
 800e246:	60bb      	str	r3, [r7, #8]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	609a      	str	r2, [r3, #8]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e260:	2300      	movs	r3, #0
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	40012c00 	.word	0x40012c00
 800e274:	40013400 	.word	0x40013400
 800e278:	40015000 	.word	0x40015000
 800e27c:	40000400 	.word	0x40000400
 800e280:	40000800 	.word	0x40000800
 800e284:	40000c00 	.word	0x40000c00
 800e288:	40014000 	.word	0x40014000

0800e28c <HAL_UART_Init>:
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <HAL_UART_Init+0x12>
 800e29a:	2301      	movs	r3, #1
 800e29c:	e042      	b.n	800e324 <HAL_UART_Init+0x98>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d106      	bne.n	800e2b6 <HAL_UART_Init+0x2a>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7fb f981 	bl	80095b8 <HAL_UART_MspInit>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2224      	movs	r2, #36	; 0x24
 800e2ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f022 0201 	bic.w	r2, r2, #1
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <HAL_UART_Init+0x50>
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fe68 	bl	800efac <UART_AdvFeatureConfig>
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fb69 	bl	800e9b4 <UART_SetConfig>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d101      	bne.n	800e2ec <HAL_UART_Init+0x60>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e01b      	b.n	800e324 <HAL_UART_Init+0x98>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e2fa:	605a      	str	r2, [r3, #4]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	689a      	ldr	r2, [r3, #8]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e30a:	609a      	str	r2, [r3, #8]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f042 0201 	orr.w	r2, r2, #1
 800e31a:	601a      	str	r2, [r3, #0]
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fee7 	bl	800f0f0 <UART_CheckIdleState>
 800e322:	4603      	mov	r3, r0
 800e324:	4618      	mov	r0, r3
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <HAL_UART_IRQHandler>:
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b0ba      	sub	sp, #232	; 0xe8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	69db      	ldr	r3, [r3, #28]
 800e33a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e356:	f640 030f 	movw	r3, #2063	; 0x80f
 800e35a:	4013      	ands	r3, r2
 800e35c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e364:	2b00      	cmp	r3, #0
 800e366:	d11b      	bne.n	800e3a0 <HAL_UART_IRQHandler+0x74>
 800e368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e36c:	f003 0320 	and.w	r3, r3, #32
 800e370:	2b00      	cmp	r3, #0
 800e372:	d015      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x74>
 800e374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e378:	f003 0320 	and.w	r3, r3, #32
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d105      	bne.n	800e38c <HAL_UART_IRQHandler+0x60>
 800e380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d009      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x74>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 82e3 	beq.w	800e95c <HAL_UART_IRQHandler+0x630>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	4798      	blx	r3
 800e39e:	e2dd      	b.n	800e95c <HAL_UART_IRQHandler+0x630>
 800e3a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 8123 	beq.w	800e5f0 <HAL_UART_IRQHandler+0x2c4>
 800e3aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e3ae:	4b8d      	ldr	r3, [pc, #564]	; (800e5e4 <HAL_UART_IRQHandler+0x2b8>)
 800e3b0:	4013      	ands	r3, r2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <HAL_UART_IRQHandler+0x98>
 800e3b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e3ba:	4b8b      	ldr	r3, [pc, #556]	; (800e5e8 <HAL_UART_IRQHandler+0x2bc>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f000 8116 	beq.w	800e5f0 <HAL_UART_IRQHandler+0x2c4>
 800e3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3c8:	f003 0301 	and.w	r3, r3, #1
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d011      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xc8>
 800e3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00b      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xc8>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	621a      	str	r2, [r3, #32]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ea:	f043 0201 	orr.w	r2, r3, #1
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800e3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3f8:	f003 0302 	and.w	r3, r3, #2
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d011      	beq.n	800e424 <HAL_UART_IRQHandler+0xf8>
 800e400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e404:	f003 0301 	and.w	r3, r3, #1
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <HAL_UART_IRQHandler+0xf8>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2202      	movs	r2, #2
 800e412:	621a      	str	r2, [r3, #32]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e41a:	f043 0204 	orr.w	r2, r3, #4
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800e424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e428:	f003 0304 	and.w	r3, r3, #4
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d011      	beq.n	800e454 <HAL_UART_IRQHandler+0x128>
 800e430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <HAL_UART_IRQHandler+0x128>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2204      	movs	r2, #4
 800e442:	621a      	str	r2, [r3, #32]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e44a:	f043 0202 	orr.w	r2, r3, #2
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800e454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e458:	f003 0308 	and.w	r3, r3, #8
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d017      	beq.n	800e490 <HAL_UART_IRQHandler+0x164>
 800e460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e464:	f003 0320 	and.w	r3, r3, #32
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d105      	bne.n	800e478 <HAL_UART_IRQHandler+0x14c>
 800e46c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e470:	4b5c      	ldr	r3, [pc, #368]	; (800e5e4 <HAL_UART_IRQHandler+0x2b8>)
 800e472:	4013      	ands	r3, r2
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00b      	beq.n	800e490 <HAL_UART_IRQHandler+0x164>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2208      	movs	r2, #8
 800e47e:	621a      	str	r2, [r3, #32]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e486:	f043 0208 	orr.w	r2, r3, #8
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800e490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d012      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x196>
 800e49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00c      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x196>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4b0:	621a      	str	r2, [r3, #32]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4b8:	f043 0220 	orr.w	r2, r3, #32
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 8249 	beq.w	800e960 <HAL_UART_IRQHandler+0x634>
 800e4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4d2:	f003 0320 	and.w	r3, r3, #32
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d013      	beq.n	800e502 <HAL_UART_IRQHandler+0x1d6>
 800e4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4de:	f003 0320 	and.w	r3, r3, #32
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d105      	bne.n	800e4f2 <HAL_UART_IRQHandler+0x1c6>
 800e4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d007      	beq.n	800e502 <HAL_UART_IRQHandler+0x1d6>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d003      	beq.n	800e502 <HAL_UART_IRQHandler+0x1d6>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4798      	blx	r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e516:	2b40      	cmp	r3, #64	; 0x40
 800e518:	d005      	beq.n	800e526 <HAL_UART_IRQHandler+0x1fa>
 800e51a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e51e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e522:	2b00      	cmp	r3, #0
 800e524:	d054      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x2a4>
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 fef9 	bl	800f31e <UART_EndRxTransfer>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e536:	2b40      	cmp	r3, #64	; 0x40
 800e538:	d146      	bne.n	800e5c8 <HAL_UART_IRQHandler+0x29c>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e548:	e853 3f00 	ldrex	r3, [r3]
 800e54c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3308      	adds	r3, #8
 800e562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e56a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e56e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e576:	e841 2300 	strex	r3, r2, [r1]
 800e57a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1d9      	bne.n	800e53a <HAL_UART_IRQHandler+0x20e>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d017      	beq.n	800e5c0 <HAL_UART_IRQHandler+0x294>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e596:	4a15      	ldr	r2, [pc, #84]	; (800e5ec <HAL_UART_IRQHandler+0x2c0>)
 800e598:	639a      	str	r2, [r3, #56]	; 0x38
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fb fb36 	bl	8009c12 <HAL_DMA_Abort_IT>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d019      	beq.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	4798      	blx	r3
 800e5be:	e00f      	b.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 f9e1 	bl	800e988 <HAL_UART_ErrorCallback>
 800e5c6:	e00b      	b.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 f9dd 	bl	800e988 <HAL_UART_ErrorCallback>
 800e5ce:	e007      	b.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 f9d9 	bl	800e988 <HAL_UART_ErrorCallback>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800e5de:	e1bf      	b.n	800e960 <HAL_UART_IRQHandler+0x634>
 800e5e0:	bf00      	nop
 800e5e2:	e1bd      	b.n	800e960 <HAL_UART_IRQHandler+0x634>
 800e5e4:	10000001 	.word	0x10000001
 800e5e8:	04000120 	.word	0x04000120
 800e5ec:	0800f3eb 	.word	0x0800f3eb
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	f040 8153 	bne.w	800e8a0 <HAL_UART_IRQHandler+0x574>
 800e5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5fe:	f003 0310 	and.w	r3, r3, #16
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 814c 	beq.w	800e8a0 <HAL_UART_IRQHandler+0x574>
 800e608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e60c:	f003 0310 	and.w	r3, r3, #16
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 8145 	beq.w	800e8a0 <HAL_UART_IRQHandler+0x574>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2210      	movs	r2, #16
 800e61c:	621a      	str	r2, [r3, #32]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e628:	2b40      	cmp	r3, #64	; 0x40
 800e62a:	f040 80bb 	bne.w	800e7a4 <HAL_UART_IRQHandler+0x478>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800e63c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e640:	2b00      	cmp	r3, #0
 800e642:	f000 818f 	beq.w	800e964 <HAL_UART_IRQHandler+0x638>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e64c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e650:	429a      	cmp	r2, r3
 800e652:	f080 8187 	bcs.w	800e964 <HAL_UART_IRQHandler+0x638>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e65c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f003 0320 	and.w	r3, r3, #32
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f040 8087 	bne.w	800e782 <HAL_UART_IRQHandler+0x456>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e67c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e680:	e853 3f00 	ldrex	r3, [r3]
 800e684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e68c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	461a      	mov	r2, r3
 800e69a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e69e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e6a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e6aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e6ae:	e841 2300 	strex	r3, r2, [r1]
 800e6b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e6b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1da      	bne.n	800e674 <HAL_UART_IRQHandler+0x348>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3308      	adds	r3, #8
 800e6c4:	677b      	str	r3, [r7, #116]	; 0x74
 800e6c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6c8:	e853 3f00 	ldrex	r3, [r3]
 800e6cc:	673b      	str	r3, [r7, #112]	; 0x70
 800e6ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6d0:	f023 0301 	bic.w	r3, r3, #1
 800e6d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3308      	adds	r3, #8
 800e6de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e6e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e6e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e6ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6ee:	e841 2300 	strex	r3, r2, [r1]
 800e6f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800e6f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1e1      	bne.n	800e6be <HAL_UART_IRQHandler+0x392>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3308      	adds	r3, #8
 800e700:	663b      	str	r3, [r7, #96]	; 0x60
 800e702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e704:	e853 3f00 	ldrex	r3, [r3]
 800e708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e70a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e70c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3308      	adds	r3, #8
 800e71a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e71e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e720:	66bb      	str	r3, [r7, #104]	; 0x68
 800e722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e726:	e841 2300 	strex	r3, r2, [r1]
 800e72a:	667b      	str	r3, [r7, #100]	; 0x64
 800e72c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e3      	bne.n	800e6fa <HAL_UART_IRQHandler+0x3ce>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2220      	movs	r2, #32
 800e736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	66da      	str	r2, [r3, #108]	; 0x6c
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e748:	e853 3f00 	ldrex	r3, [r3]
 800e74c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e74e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e750:	f023 0310 	bic.w	r3, r3, #16
 800e754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	461a      	mov	r2, r3
 800e75e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e762:	65bb      	str	r3, [r7, #88]	; 0x58
 800e764:	657a      	str	r2, [r7, #84]	; 0x54
 800e766:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e76a:	e841 2300 	strex	r3, r2, [r1]
 800e76e:	653b      	str	r3, [r7, #80]	; 0x50
 800e770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1e4      	bne.n	800e740 <HAL_UART_IRQHandler+0x414>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fb f9ef 	bl	8009b60 <HAL_DMA_Abort>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2202      	movs	r2, #2
 800e786:	671a      	str	r2, [r3, #112]	; 0x70
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e794:	b29b      	uxth	r3, r3
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	b29b      	uxth	r3, r3
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f8fd 	bl	800e99c <HAL_UARTEx_RxEventCallback>
 800e7a2:	e0df      	b.n	800e964 <HAL_UART_IRQHandler+0x638>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 80d1 	beq.w	800e968 <HAL_UART_IRQHandler+0x63c>
 800e7c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f000 80cc 	beq.w	800e968 <HAL_UART_IRQHandler+0x63c>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	e853 3f00 	ldrex	r3, [r3]
 800e7dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e7f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e7f4:	643a      	str	r2, [r7, #64]	; 0x40
 800e7f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7fa:	e841 2300 	strex	r3, r2, [r1]
 800e7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e802:	2b00      	cmp	r3, #0
 800e804:	d1e4      	bne.n	800e7d0 <HAL_UART_IRQHandler+0x4a4>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	3308      	adds	r3, #8
 800e80c:	627b      	str	r3, [r7, #36]	; 0x24
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	623b      	str	r3, [r7, #32]
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e81c:	f023 0301 	bic.w	r3, r3, #1
 800e820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3308      	adds	r3, #8
 800e82a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e82e:	633a      	str	r2, [r7, #48]	; 0x30
 800e830:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e836:	e841 2300 	strex	r3, r2, [r1]
 800e83a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1e1      	bne.n	800e806 <HAL_UART_IRQHandler+0x4da>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2220      	movs	r2, #32
 800e846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	66da      	str	r2, [r3, #108]	; 0x6c
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	675a      	str	r2, [r3, #116]	; 0x74
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	613b      	str	r3, [r7, #16]
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	e853 3f00 	ldrex	r3, [r3]
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f023 0310 	bic.w	r3, r3, #16
 800e86a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e878:	61fb      	str	r3, [r7, #28]
 800e87a:	61ba      	str	r2, [r7, #24]
 800e87c:	69b9      	ldr	r1, [r7, #24]
 800e87e:	69fa      	ldr	r2, [r7, #28]
 800e880:	e841 2300 	strex	r3, r2, [r1]
 800e884:	617b      	str	r3, [r7, #20]
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1e4      	bne.n	800e856 <HAL_UART_IRQHandler+0x52a>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2202      	movs	r2, #2
 800e890:	671a      	str	r2, [r3, #112]	; 0x70
 800e892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f87f 	bl	800e99c <HAL_UARTEx_RxEventCallback>
 800e89e:	e063      	b.n	800e968 <HAL_UART_IRQHandler+0x63c>
 800e8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00e      	beq.n	800e8ca <HAL_UART_IRQHandler+0x59e>
 800e8ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d008      	beq.n	800e8ca <HAL_UART_IRQHandler+0x59e>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e8c0:	621a      	str	r2, [r3, #32]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fdd2 	bl	800f46c <HAL_UARTEx_WakeupCallback>
 800e8c8:	e051      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d014      	beq.n	800e900 <HAL_UART_IRQHandler+0x5d4>
 800e8d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d105      	bne.n	800e8ee <HAL_UART_IRQHandler+0x5c2>
 800e8e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d008      	beq.n	800e900 <HAL_UART_IRQHandler+0x5d4>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d03a      	beq.n	800e96c <HAL_UART_IRQHandler+0x640>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	4798      	blx	r3
 800e8fe:	e035      	b.n	800e96c <HAL_UART_IRQHandler+0x640>
 800e900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d009      	beq.n	800e920 <HAL_UART_IRQHandler+0x5f4>
 800e90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e914:	2b00      	cmp	r3, #0
 800e916:	d003      	beq.n	800e920 <HAL_UART_IRQHandler+0x5f4>
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 fd7c 	bl	800f416 <UART_EndTransmit_IT>
 800e91e:	e026      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d009      	beq.n	800e940 <HAL_UART_IRQHandler+0x614>
 800e92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <HAL_UART_IRQHandler+0x614>
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fdab 	bl	800f494 <HAL_UARTEx_TxFifoEmptyCallback>
 800e93e:	e016      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d010      	beq.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e950:	2b00      	cmp	r3, #0
 800e952:	da0c      	bge.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 fd93 	bl	800f480 <HAL_UARTEx_RxFifoFullCallback>
 800e95a:	e008      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e95c:	bf00      	nop
 800e95e:	e006      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e960:	bf00      	nop
 800e962:	e004      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e964:	bf00      	nop
 800e966:	e002      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e968:	bf00      	nop
 800e96a:	e000      	b.n	800e96e <HAL_UART_IRQHandler+0x642>
 800e96c:	bf00      	nop
 800e96e:	37e8      	adds	r7, #232	; 0xe8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_UART_TxCpltCallback>:
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <HAL_UART_ErrorCallback>:
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	bf00      	nop
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <HAL_UARTEx_RxEventCallback>:
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	807b      	strh	r3, [r7, #2]
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <UART_SetConfig>:
 800e9b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9b8:	b08c      	sub	sp, #48	; 0x30
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6178      	str	r0, [r7, #20]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	689a      	ldr	r2, [r3, #8]
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	431a      	orrs	r2, r3
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	431a      	orrs	r2, r3
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	69db      	ldr	r3, [r3, #28]
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	4baa      	ldr	r3, [pc, #680]	; (800ec8c <UART_SetConfig+0x2d8>)
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	6812      	ldr	r2, [r2, #0]
 800e9ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9ec:	430b      	orrs	r3, r1
 800e9ee:	6013      	str	r3, [r2, #0]
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	430a      	orrs	r2, r1
 800ea04:	605a      	str	r2, [r3, #4]
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	699b      	ldr	r3, [r3, #24]
 800ea0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a9f      	ldr	r2, [pc, #636]	; (800ec90 <UART_SetConfig+0x2dc>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d004      	beq.n	800ea20 <UART_SetConfig+0x6c>
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	6a1b      	ldr	r3, [r3, #32]
 800ea1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ea2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	6812      	ldr	r2, [r2, #0]
 800ea32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea34:	430b      	orrs	r3, r1
 800ea36:	6093      	str	r3, [r2, #8]
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3e:	f023 010f 	bic.w	r1, r3, #15
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	430a      	orrs	r2, r1
 800ea4c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4a90      	ldr	r2, [pc, #576]	; (800ec94 <UART_SetConfig+0x2e0>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d125      	bne.n	800eaa4 <UART_SetConfig+0xf0>
 800ea58:	4b8f      	ldr	r3, [pc, #572]	; (800ec98 <UART_SetConfig+0x2e4>)
 800ea5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea5e:	f003 0303 	and.w	r3, r3, #3
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d81a      	bhi.n	800ea9c <UART_SetConfig+0xe8>
 800ea66:	a201      	add	r2, pc, #4	; (adr r2, 800ea6c <UART_SetConfig+0xb8>)
 800ea68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6c:	0800ea7d 	.word	0x0800ea7d
 800ea70:	0800ea8d 	.word	0x0800ea8d
 800ea74:	0800ea85 	.word	0x0800ea85
 800ea78:	0800ea95 	.word	0x0800ea95
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea82:	e116      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ea84:	2302      	movs	r3, #2
 800ea86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea8a:	e112      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea92:	e10e      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ea94:	2308      	movs	r3, #8
 800ea96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea9a:	e10a      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ea9c:	2310      	movs	r3, #16
 800ea9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eaa2:	e106      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a7c      	ldr	r2, [pc, #496]	; (800ec9c <UART_SetConfig+0x2e8>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d138      	bne.n	800eb20 <UART_SetConfig+0x16c>
 800eaae:	4b7a      	ldr	r3, [pc, #488]	; (800ec98 <UART_SetConfig+0x2e4>)
 800eab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eab4:	f003 030c 	and.w	r3, r3, #12
 800eab8:	2b0c      	cmp	r3, #12
 800eaba:	d82d      	bhi.n	800eb18 <UART_SetConfig+0x164>
 800eabc:	a201      	add	r2, pc, #4	; (adr r2, 800eac4 <UART_SetConfig+0x110>)
 800eabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac2:	bf00      	nop
 800eac4:	0800eaf9 	.word	0x0800eaf9
 800eac8:	0800eb19 	.word	0x0800eb19
 800eacc:	0800eb19 	.word	0x0800eb19
 800ead0:	0800eb19 	.word	0x0800eb19
 800ead4:	0800eb09 	.word	0x0800eb09
 800ead8:	0800eb19 	.word	0x0800eb19
 800eadc:	0800eb19 	.word	0x0800eb19
 800eae0:	0800eb19 	.word	0x0800eb19
 800eae4:	0800eb01 	.word	0x0800eb01
 800eae8:	0800eb19 	.word	0x0800eb19
 800eaec:	0800eb19 	.word	0x0800eb19
 800eaf0:	0800eb19 	.word	0x0800eb19
 800eaf4:	0800eb11 	.word	0x0800eb11
 800eaf8:	2300      	movs	r3, #0
 800eafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eafe:	e0d8      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb00:	2302      	movs	r3, #2
 800eb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb06:	e0d4      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb08:	2304      	movs	r3, #4
 800eb0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb0e:	e0d0      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb10:	2308      	movs	r3, #8
 800eb12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb16:	e0cc      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb18:	2310      	movs	r3, #16
 800eb1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb1e:	e0c8      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a5e      	ldr	r2, [pc, #376]	; (800eca0 <UART_SetConfig+0x2ec>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d125      	bne.n	800eb76 <UART_SetConfig+0x1c2>
 800eb2a:	4b5b      	ldr	r3, [pc, #364]	; (800ec98 <UART_SetConfig+0x2e4>)
 800eb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eb34:	2b30      	cmp	r3, #48	; 0x30
 800eb36:	d016      	beq.n	800eb66 <UART_SetConfig+0x1b2>
 800eb38:	2b30      	cmp	r3, #48	; 0x30
 800eb3a:	d818      	bhi.n	800eb6e <UART_SetConfig+0x1ba>
 800eb3c:	2b20      	cmp	r3, #32
 800eb3e:	d00a      	beq.n	800eb56 <UART_SetConfig+0x1a2>
 800eb40:	2b20      	cmp	r3, #32
 800eb42:	d814      	bhi.n	800eb6e <UART_SetConfig+0x1ba>
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <UART_SetConfig+0x19a>
 800eb48:	2b10      	cmp	r3, #16
 800eb4a:	d008      	beq.n	800eb5e <UART_SetConfig+0x1aa>
 800eb4c:	e00f      	b.n	800eb6e <UART_SetConfig+0x1ba>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb54:	e0ad      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb56:	2302      	movs	r3, #2
 800eb58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb5c:	e0a9      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb5e:	2304      	movs	r3, #4
 800eb60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb64:	e0a5      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb66:	2308      	movs	r3, #8
 800eb68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb6c:	e0a1      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb6e:	2310      	movs	r3, #16
 800eb70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb74:	e09d      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a4a      	ldr	r2, [pc, #296]	; (800eca4 <UART_SetConfig+0x2f0>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d125      	bne.n	800ebcc <UART_SetConfig+0x218>
 800eb80:	4b45      	ldr	r3, [pc, #276]	; (800ec98 <UART_SetConfig+0x2e4>)
 800eb82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eb8a:	2bc0      	cmp	r3, #192	; 0xc0
 800eb8c:	d016      	beq.n	800ebbc <UART_SetConfig+0x208>
 800eb8e:	2bc0      	cmp	r3, #192	; 0xc0
 800eb90:	d818      	bhi.n	800ebc4 <UART_SetConfig+0x210>
 800eb92:	2b80      	cmp	r3, #128	; 0x80
 800eb94:	d00a      	beq.n	800ebac <UART_SetConfig+0x1f8>
 800eb96:	2b80      	cmp	r3, #128	; 0x80
 800eb98:	d814      	bhi.n	800ebc4 <UART_SetConfig+0x210>
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d002      	beq.n	800eba4 <UART_SetConfig+0x1f0>
 800eb9e:	2b40      	cmp	r3, #64	; 0x40
 800eba0:	d008      	beq.n	800ebb4 <UART_SetConfig+0x200>
 800eba2:	e00f      	b.n	800ebc4 <UART_SetConfig+0x210>
 800eba4:	2300      	movs	r3, #0
 800eba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebaa:	e082      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ebac:	2302      	movs	r3, #2
 800ebae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebb2:	e07e      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ebb4:	2304      	movs	r3, #4
 800ebb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebba:	e07a      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ebbc:	2308      	movs	r3, #8
 800ebbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebc2:	e076      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ebc4:	2310      	movs	r3, #16
 800ebc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebca:	e072      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a35      	ldr	r2, [pc, #212]	; (800eca8 <UART_SetConfig+0x2f4>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d12a      	bne.n	800ec2c <UART_SetConfig+0x278>
 800ebd6:	4b30      	ldr	r3, [pc, #192]	; (800ec98 <UART_SetConfig+0x2e4>)
 800ebd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebe4:	d01a      	beq.n	800ec1c <UART_SetConfig+0x268>
 800ebe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebea:	d81b      	bhi.n	800ec24 <UART_SetConfig+0x270>
 800ebec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebf0:	d00c      	beq.n	800ec0c <UART_SetConfig+0x258>
 800ebf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebf6:	d815      	bhi.n	800ec24 <UART_SetConfig+0x270>
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d003      	beq.n	800ec04 <UART_SetConfig+0x250>
 800ebfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec00:	d008      	beq.n	800ec14 <UART_SetConfig+0x260>
 800ec02:	e00f      	b.n	800ec24 <UART_SetConfig+0x270>
 800ec04:	2300      	movs	r3, #0
 800ec06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec0a:	e052      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec12:	e04e      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec14:	2304      	movs	r3, #4
 800ec16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec1a:	e04a      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec1c:	2308      	movs	r3, #8
 800ec1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec22:	e046      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec24:	2310      	movs	r3, #16
 800ec26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec2a:	e042      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a17      	ldr	r2, [pc, #92]	; (800ec90 <UART_SetConfig+0x2dc>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d13a      	bne.n	800ecac <UART_SetConfig+0x2f8>
 800ec36:	4b18      	ldr	r3, [pc, #96]	; (800ec98 <UART_SetConfig+0x2e4>)
 800ec38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ec40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec44:	d01a      	beq.n	800ec7c <UART_SetConfig+0x2c8>
 800ec46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec4a:	d81b      	bhi.n	800ec84 <UART_SetConfig+0x2d0>
 800ec4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec50:	d00c      	beq.n	800ec6c <UART_SetConfig+0x2b8>
 800ec52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec56:	d815      	bhi.n	800ec84 <UART_SetConfig+0x2d0>
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <UART_SetConfig+0x2b0>
 800ec5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec60:	d008      	beq.n	800ec74 <UART_SetConfig+0x2c0>
 800ec62:	e00f      	b.n	800ec84 <UART_SetConfig+0x2d0>
 800ec64:	2300      	movs	r3, #0
 800ec66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec6a:	e022      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec72:	e01e      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec74:	2304      	movs	r3, #4
 800ec76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec7a:	e01a      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec7c:	2308      	movs	r3, #8
 800ec7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec82:	e016      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec84:	2310      	movs	r3, #16
 800ec86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec8a:	e012      	b.n	800ecb2 <UART_SetConfig+0x2fe>
 800ec8c:	cfff69f3 	.word	0xcfff69f3
 800ec90:	40008000 	.word	0x40008000
 800ec94:	40013800 	.word	0x40013800
 800ec98:	40021000 	.word	0x40021000
 800ec9c:	40004400 	.word	0x40004400
 800eca0:	40004800 	.word	0x40004800
 800eca4:	40004c00 	.word	0x40004c00
 800eca8:	40005000 	.word	0x40005000
 800ecac:	2310      	movs	r3, #16
 800ecae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4aae      	ldr	r2, [pc, #696]	; (800ef70 <UART_SetConfig+0x5bc>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	f040 8097 	bne.w	800edec <UART_SetConfig+0x438>
 800ecbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ecc2:	2b08      	cmp	r3, #8
 800ecc4:	d823      	bhi.n	800ed0e <UART_SetConfig+0x35a>
 800ecc6:	a201      	add	r2, pc, #4	; (adr r2, 800eccc <UART_SetConfig+0x318>)
 800ecc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eccc:	0800ecf1 	.word	0x0800ecf1
 800ecd0:	0800ed0f 	.word	0x0800ed0f
 800ecd4:	0800ecf9 	.word	0x0800ecf9
 800ecd8:	0800ed0f 	.word	0x0800ed0f
 800ecdc:	0800ecff 	.word	0x0800ecff
 800ece0:	0800ed0f 	.word	0x0800ed0f
 800ece4:	0800ed0f 	.word	0x0800ed0f
 800ece8:	0800ed0f 	.word	0x0800ed0f
 800ecec:	0800ed07 	.word	0x0800ed07
 800ecf0:	f7fd ff62 	bl	800cbb8 <HAL_RCC_GetPCLK1Freq>
 800ecf4:	6278      	str	r0, [r7, #36]	; 0x24
 800ecf6:	e010      	b.n	800ed1a <UART_SetConfig+0x366>
 800ecf8:	4b9e      	ldr	r3, [pc, #632]	; (800ef74 <UART_SetConfig+0x5c0>)
 800ecfa:	627b      	str	r3, [r7, #36]	; 0x24
 800ecfc:	e00d      	b.n	800ed1a <UART_SetConfig+0x366>
 800ecfe:	f7fd feed 	bl	800cadc <HAL_RCC_GetSysClockFreq>
 800ed02:	6278      	str	r0, [r7, #36]	; 0x24
 800ed04:	e009      	b.n	800ed1a <UART_SetConfig+0x366>
 800ed06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed0c:	e005      	b.n	800ed1a <UART_SetConfig+0x366>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	627b      	str	r3, [r7, #36]	; 0x24
 800ed12:	2301      	movs	r3, #1
 800ed14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ed18:	bf00      	nop
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 8130 	beq.w	800ef82 <UART_SetConfig+0x5ce>
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed26:	4a94      	ldr	r2, [pc, #592]	; (800ef78 <UART_SetConfig+0x5c4>)
 800ed28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed34:	61bb      	str	r3, [r7, #24]
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	685a      	ldr	r2, [r3, #4]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	005b      	lsls	r3, r3, #1
 800ed3e:	4413      	add	r3, r2
 800ed40:	69ba      	ldr	r2, [r7, #24]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d305      	bcc.n	800ed52 <UART_SetConfig+0x39e>
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	031b      	lsls	r3, r3, #12
 800ed4c:	69ba      	ldr	r2, [r7, #24]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d903      	bls.n	800ed5a <UART_SetConfig+0x3a6>
 800ed52:	2301      	movs	r3, #1
 800ed54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ed58:	e113      	b.n	800ef82 <UART_SetConfig+0x5ce>
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	60bb      	str	r3, [r7, #8]
 800ed60:	60fa      	str	r2, [r7, #12]
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed66:	4a84      	ldr	r2, [pc, #528]	; (800ef78 <UART_SetConfig+0x5c4>)
 800ed68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	2200      	movs	r2, #0
 800ed70:	603b      	str	r3, [r7, #0]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ed7c:	f7f1 ffac 	bl	8000cd8 <__aeabi_uldivmod>
 800ed80:	4602      	mov	r2, r0
 800ed82:	460b      	mov	r3, r1
 800ed84:	4610      	mov	r0, r2
 800ed86:	4619      	mov	r1, r3
 800ed88:	f04f 0200 	mov.w	r2, #0
 800ed8c:	f04f 0300 	mov.w	r3, #0
 800ed90:	020b      	lsls	r3, r1, #8
 800ed92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ed96:	0202      	lsls	r2, r0, #8
 800ed98:	6979      	ldr	r1, [r7, #20]
 800ed9a:	6849      	ldr	r1, [r1, #4]
 800ed9c:	0849      	lsrs	r1, r1, #1
 800ed9e:	2000      	movs	r0, #0
 800eda0:	460c      	mov	r4, r1
 800eda2:	4605      	mov	r5, r0
 800eda4:	eb12 0804 	adds.w	r8, r2, r4
 800eda8:	eb43 0905 	adc.w	r9, r3, r5
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	469a      	mov	sl, r3
 800edb4:	4693      	mov	fp, r2
 800edb6:	4652      	mov	r2, sl
 800edb8:	465b      	mov	r3, fp
 800edba:	4640      	mov	r0, r8
 800edbc:	4649      	mov	r1, r9
 800edbe:	f7f1 ff8b 	bl	8000cd8 <__aeabi_uldivmod>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
 800edc6:	4613      	mov	r3, r2
 800edc8:	623b      	str	r3, [r7, #32]
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edd0:	d308      	bcc.n	800ede4 <UART_SetConfig+0x430>
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edd8:	d204      	bcs.n	800ede4 <UART_SetConfig+0x430>
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	6a3a      	ldr	r2, [r7, #32]
 800ede0:	60da      	str	r2, [r3, #12]
 800ede2:	e0ce      	b.n	800ef82 <UART_SetConfig+0x5ce>
 800ede4:	2301      	movs	r3, #1
 800ede6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800edea:	e0ca      	b.n	800ef82 <UART_SetConfig+0x5ce>
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	69db      	ldr	r3, [r3, #28]
 800edf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edf4:	d166      	bne.n	800eec4 <UART_SetConfig+0x510>
 800edf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800edfa:	2b08      	cmp	r3, #8
 800edfc:	d827      	bhi.n	800ee4e <UART_SetConfig+0x49a>
 800edfe:	a201      	add	r2, pc, #4	; (adr r2, 800ee04 <UART_SetConfig+0x450>)
 800ee00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee04:	0800ee29 	.word	0x0800ee29
 800ee08:	0800ee31 	.word	0x0800ee31
 800ee0c:	0800ee39 	.word	0x0800ee39
 800ee10:	0800ee4f 	.word	0x0800ee4f
 800ee14:	0800ee3f 	.word	0x0800ee3f
 800ee18:	0800ee4f 	.word	0x0800ee4f
 800ee1c:	0800ee4f 	.word	0x0800ee4f
 800ee20:	0800ee4f 	.word	0x0800ee4f
 800ee24:	0800ee47 	.word	0x0800ee47
 800ee28:	f7fd fec6 	bl	800cbb8 <HAL_RCC_GetPCLK1Freq>
 800ee2c:	6278      	str	r0, [r7, #36]	; 0x24
 800ee2e:	e014      	b.n	800ee5a <UART_SetConfig+0x4a6>
 800ee30:	f7fd fed8 	bl	800cbe4 <HAL_RCC_GetPCLK2Freq>
 800ee34:	6278      	str	r0, [r7, #36]	; 0x24
 800ee36:	e010      	b.n	800ee5a <UART_SetConfig+0x4a6>
 800ee38:	4b4e      	ldr	r3, [pc, #312]	; (800ef74 <UART_SetConfig+0x5c0>)
 800ee3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee3c:	e00d      	b.n	800ee5a <UART_SetConfig+0x4a6>
 800ee3e:	f7fd fe4d 	bl	800cadc <HAL_RCC_GetSysClockFreq>
 800ee42:	6278      	str	r0, [r7, #36]	; 0x24
 800ee44:	e009      	b.n	800ee5a <UART_SetConfig+0x4a6>
 800ee46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee4c:	e005      	b.n	800ee5a <UART_SetConfig+0x4a6>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	627b      	str	r3, [r7, #36]	; 0x24
 800ee52:	2301      	movs	r3, #1
 800ee54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ee58:	bf00      	nop
 800ee5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f000 8090 	beq.w	800ef82 <UART_SetConfig+0x5ce>
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee66:	4a44      	ldr	r2, [pc, #272]	; (800ef78 <UART_SetConfig+0x5c4>)
 800ee68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee74:	005a      	lsls	r2, r3, #1
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	085b      	lsrs	r3, r3, #1
 800ee7c:	441a      	add	r2, r3
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee86:	623b      	str	r3, [r7, #32]
 800ee88:	6a3b      	ldr	r3, [r7, #32]
 800ee8a:	2b0f      	cmp	r3, #15
 800ee8c:	d916      	bls.n	800eebc <UART_SetConfig+0x508>
 800ee8e:	6a3b      	ldr	r3, [r7, #32]
 800ee90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee94:	d212      	bcs.n	800eebc <UART_SetConfig+0x508>
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	f023 030f 	bic.w	r3, r3, #15
 800ee9e:	83fb      	strh	r3, [r7, #30]
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	085b      	lsrs	r3, r3, #1
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	f003 0307 	and.w	r3, r3, #7
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	8bfb      	ldrh	r3, [r7, #30]
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	83fb      	strh	r3, [r7, #30]
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	8bfa      	ldrh	r2, [r7, #30]
 800eeb8:	60da      	str	r2, [r3, #12]
 800eeba:	e062      	b.n	800ef82 <UART_SetConfig+0x5ce>
 800eebc:	2301      	movs	r3, #1
 800eebe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800eec2:	e05e      	b.n	800ef82 <UART_SetConfig+0x5ce>
 800eec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eec8:	2b08      	cmp	r3, #8
 800eeca:	d828      	bhi.n	800ef1e <UART_SetConfig+0x56a>
 800eecc:	a201      	add	r2, pc, #4	; (adr r2, 800eed4 <UART_SetConfig+0x520>)
 800eece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed2:	bf00      	nop
 800eed4:	0800eef9 	.word	0x0800eef9
 800eed8:	0800ef01 	.word	0x0800ef01
 800eedc:	0800ef09 	.word	0x0800ef09
 800eee0:	0800ef1f 	.word	0x0800ef1f
 800eee4:	0800ef0f 	.word	0x0800ef0f
 800eee8:	0800ef1f 	.word	0x0800ef1f
 800eeec:	0800ef1f 	.word	0x0800ef1f
 800eef0:	0800ef1f 	.word	0x0800ef1f
 800eef4:	0800ef17 	.word	0x0800ef17
 800eef8:	f7fd fe5e 	bl	800cbb8 <HAL_RCC_GetPCLK1Freq>
 800eefc:	6278      	str	r0, [r7, #36]	; 0x24
 800eefe:	e014      	b.n	800ef2a <UART_SetConfig+0x576>
 800ef00:	f7fd fe70 	bl	800cbe4 <HAL_RCC_GetPCLK2Freq>
 800ef04:	6278      	str	r0, [r7, #36]	; 0x24
 800ef06:	e010      	b.n	800ef2a <UART_SetConfig+0x576>
 800ef08:	4b1a      	ldr	r3, [pc, #104]	; (800ef74 <UART_SetConfig+0x5c0>)
 800ef0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef0c:	e00d      	b.n	800ef2a <UART_SetConfig+0x576>
 800ef0e:	f7fd fde5 	bl	800cadc <HAL_RCC_GetSysClockFreq>
 800ef12:	6278      	str	r0, [r7, #36]	; 0x24
 800ef14:	e009      	b.n	800ef2a <UART_SetConfig+0x576>
 800ef16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef1c:	e005      	b.n	800ef2a <UART_SetConfig+0x576>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	627b      	str	r3, [r7, #36]	; 0x24
 800ef22:	2301      	movs	r3, #1
 800ef24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ef28:	bf00      	nop
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d028      	beq.n	800ef82 <UART_SetConfig+0x5ce>
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef34:	4a10      	ldr	r2, [pc, #64]	; (800ef78 <UART_SetConfig+0x5c4>)
 800ef36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	085b      	lsrs	r3, r3, #1
 800ef48:	441a      	add	r2, r3
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef52:	623b      	str	r3, [r7, #32]
 800ef54:	6a3b      	ldr	r3, [r7, #32]
 800ef56:	2b0f      	cmp	r3, #15
 800ef58:	d910      	bls.n	800ef7c <UART_SetConfig+0x5c8>
 800ef5a:	6a3b      	ldr	r3, [r7, #32]
 800ef5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef60:	d20c      	bcs.n	800ef7c <UART_SetConfig+0x5c8>
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	60da      	str	r2, [r3, #12]
 800ef6c:	e009      	b.n	800ef82 <UART_SetConfig+0x5ce>
 800ef6e:	bf00      	nop
 800ef70:	40008000 	.word	0x40008000
 800ef74:	00f42400 	.word	0x00f42400
 800ef78:	080177a8 	.word	0x080177a8
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	2201      	movs	r2, #1
 800ef86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	2200      	movs	r2, #0
 800ef96:	675a      	str	r2, [r3, #116]	; 0x74
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	679a      	str	r2, [r3, #120]	; 0x78
 800ef9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800efa2:	4618      	mov	r0, r3
 800efa4:	3730      	adds	r7, #48	; 0x30
 800efa6:	46bd      	mov	sp, r7
 800efa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800efac <UART_AdvFeatureConfig>:
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb8:	f003 0308 	and.w	r3, r3, #8
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00a      	beq.n	800efd6 <UART_AdvFeatureConfig+0x2a>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	430a      	orrs	r2, r1
 800efd4:	605a      	str	r2, [r3, #4]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00a      	beq.n	800eff8 <UART_AdvFeatureConfig+0x4c>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	430a      	orrs	r2, r1
 800eff6:	605a      	str	r2, [r3, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effc:	f003 0302 	and.w	r3, r3, #2
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00a      	beq.n	800f01a <UART_AdvFeatureConfig+0x6e>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	430a      	orrs	r2, r1
 800f018:	605a      	str	r2, [r3, #4]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f01e:	f003 0304 	and.w	r3, r3, #4
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <UART_AdvFeatureConfig+0x90>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	430a      	orrs	r2, r1
 800f03a:	605a      	str	r2, [r3, #4]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f040:	f003 0310 	and.w	r3, r3, #16
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00a      	beq.n	800f05e <UART_AdvFeatureConfig+0xb2>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	430a      	orrs	r2, r1
 800f05c:	609a      	str	r2, [r3, #8]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f062:	f003 0320 	and.w	r3, r3, #32
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00a      	beq.n	800f080 <UART_AdvFeatureConfig+0xd4>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	430a      	orrs	r2, r1
 800f07e:	609a      	str	r2, [r3, #8]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d01a      	beq.n	800f0c2 <UART_AdvFeatureConfig+0x116>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	605a      	str	r2, [r3, #4]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0aa:	d10a      	bne.n	800f0c2 <UART_AdvFeatureConfig+0x116>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	605a      	str	r2, [r3, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00a      	beq.n	800f0e4 <UART_AdvFeatureConfig+0x138>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	430a      	orrs	r2, r1
 800f0e2:	605a      	str	r2, [r3, #4]
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <UART_CheckIdleState>:
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b098      	sub	sp, #96	; 0x60
 800f0f4:	af02      	add	r7, sp, #8
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f100:	f7fa fb48 	bl	8009794 <HAL_GetTick>
 800f104:	6578      	str	r0, [r7, #84]	; 0x54
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f003 0308 	and.w	r3, r3, #8
 800f110:	2b08      	cmp	r3, #8
 800f112:	d12f      	bne.n	800f174 <UART_CheckIdleState+0x84>
 800f114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f11c:	2200      	movs	r2, #0
 800f11e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f88e 	bl	800f244 <UART_WaitOnFlagUntilTimeout>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d022      	beq.n	800f174 <UART_CheckIdleState+0x84>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	63bb      	str	r3, [r7, #56]	; 0x38
 800f134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f136:	e853 3f00 	ldrex	r3, [r3]
 800f13a:	637b      	str	r3, [r7, #52]	; 0x34
 800f13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f13e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f142:	653b      	str	r3, [r7, #80]	; 0x50
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	461a      	mov	r2, r3
 800f14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f14c:	647b      	str	r3, [r7, #68]	; 0x44
 800f14e:	643a      	str	r2, [r7, #64]	; 0x40
 800f150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f154:	e841 2300 	strex	r3, r2, [r1]
 800f158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1e6      	bne.n	800f12e <UART_CheckIdleState+0x3e>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2220      	movs	r2, #32
 800f164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f170:	2303      	movs	r3, #3
 800f172:	e063      	b.n	800f23c <UART_CheckIdleState+0x14c>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f003 0304 	and.w	r3, r3, #4
 800f17e:	2b04      	cmp	r3, #4
 800f180:	d149      	bne.n	800f216 <UART_CheckIdleState+0x126>
 800f182:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f18a:	2200      	movs	r2, #0
 800f18c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f857 	bl	800f244 <UART_WaitOnFlagUntilTimeout>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d03c      	beq.n	800f216 <UART_CheckIdleState+0x126>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a4:	e853 3f00 	ldrex	r3, [r3]
 800f1a8:	623b      	str	r3, [r7, #32]
 800f1aa:	6a3b      	ldr	r3, [r7, #32]
 800f1ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1ba:	633b      	str	r3, [r7, #48]	; 0x30
 800f1bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1c2:	e841 2300 	strex	r3, r2, [r1]
 800f1c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1e6      	bne.n	800f19c <UART_CheckIdleState+0xac>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	613b      	str	r3, [r7, #16]
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	e853 3f00 	ldrex	r3, [r3]
 800f1dc:	60fb      	str	r3, [r7, #12]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f023 0301 	bic.w	r3, r3, #1
 800f1e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1ee:	61fa      	str	r2, [r7, #28]
 800f1f0:	61bb      	str	r3, [r7, #24]
 800f1f2:	69b9      	ldr	r1, [r7, #24]
 800f1f4:	69fa      	ldr	r2, [r7, #28]
 800f1f6:	e841 2300 	strex	r3, r2, [r1]
 800f1fa:	617b      	str	r3, [r7, #20]
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1e5      	bne.n	800f1ce <UART_CheckIdleState+0xde>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2220      	movs	r2, #32
 800f206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f212:	2303      	movs	r3, #3
 800f214:	e012      	b.n	800f23c <UART_CheckIdleState+0x14c>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2220      	movs	r2, #32
 800f21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2220      	movs	r2, #32
 800f222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	66da      	str	r2, [r3, #108]	; 0x6c
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	671a      	str	r2, [r3, #112]	; 0x70
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f23a:	2300      	movs	r3, #0
 800f23c:	4618      	mov	r0, r3
 800f23e:	3758      	adds	r7, #88	; 0x58
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <UART_WaitOnFlagUntilTimeout>:
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	603b      	str	r3, [r7, #0]
 800f250:	4613      	mov	r3, r2
 800f252:	71fb      	strb	r3, [r7, #7]
 800f254:	e04f      	b.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25c:	d04b      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f25e:	f7fa fa99 	bl	8009794 <HAL_GetTick>
 800f262:	4602      	mov	r2, r0
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	69ba      	ldr	r2, [r7, #24]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d302      	bcc.n	800f274 <UART_WaitOnFlagUntilTimeout+0x30>
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d101      	bne.n	800f278 <UART_WaitOnFlagUntilTimeout+0x34>
 800f274:	2303      	movs	r3, #3
 800f276:	e04e      	b.n	800f316 <UART_WaitOnFlagUntilTimeout+0xd2>
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f003 0304 	and.w	r3, r3, #4
 800f282:	2b00      	cmp	r3, #0
 800f284:	d037      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b80      	cmp	r3, #128	; 0x80
 800f28a:	d034      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	2b40      	cmp	r3, #64	; 0x40
 800f290:	d031      	beq.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	69db      	ldr	r3, [r3, #28]
 800f298:	f003 0308 	and.w	r3, r3, #8
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d110      	bne.n	800f2c2 <UART_WaitOnFlagUntilTimeout+0x7e>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2208      	movs	r2, #8
 800f2a6:	621a      	str	r2, [r3, #32]
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f000 f838 	bl	800f31e <UART_EndRxTransfer>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2208      	movs	r2, #8
 800f2b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e029      	b.n	800f316 <UART_WaitOnFlagUntilTimeout+0xd2>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2d0:	d111      	bne.n	800f2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2da:	621a      	str	r2, [r3, #32]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f000 f81e 	bl	800f31e <UART_EndRxTransfer>
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2220      	movs	r2, #32
 800f2e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	e00f      	b.n	800f316 <UART_WaitOnFlagUntilTimeout+0xd2>
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	69da      	ldr	r2, [r3, #28]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	4013      	ands	r3, r2
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	429a      	cmp	r2, r3
 800f304:	bf0c      	ite	eq
 800f306:	2301      	moveq	r3, #1
 800f308:	2300      	movne	r3, #0
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	461a      	mov	r2, r3
 800f30e:	79fb      	ldrb	r3, [r7, #7]
 800f310:	429a      	cmp	r2, r3
 800f312:	d0a0      	beq.n	800f256 <UART_WaitOnFlagUntilTimeout+0x12>
 800f314:	2300      	movs	r3, #0
 800f316:	4618      	mov	r0, r3
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <UART_EndRxTransfer>:
 800f31e:	b480      	push	{r7}
 800f320:	b095      	sub	sp, #84	; 0x54
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	637b      	str	r3, [r7, #52]	; 0x34
 800f32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32e:	e853 3f00 	ldrex	r3, [r3]
 800f332:	633b      	str	r3, [r7, #48]	; 0x30
 800f334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f33a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f344:	643b      	str	r3, [r7, #64]	; 0x40
 800f346:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f34a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f34c:	e841 2300 	strex	r3, r2, [r1]
 800f350:	63bb      	str	r3, [r7, #56]	; 0x38
 800f352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1e6      	bne.n	800f326 <UART_EndRxTransfer+0x8>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	3308      	adds	r3, #8
 800f35e:	623b      	str	r3, [r7, #32]
 800f360:	6a3b      	ldr	r3, [r7, #32]
 800f362:	e853 3f00 	ldrex	r3, [r3]
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f36e:	f023 0301 	bic.w	r3, r3, #1
 800f372:	64bb      	str	r3, [r7, #72]	; 0x48
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3308      	adds	r3, #8
 800f37a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f37c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f37e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f384:	e841 2300 	strex	r3, r2, [r1]
 800f388:	627b      	str	r3, [r7, #36]	; 0x24
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1e3      	bne.n	800f358 <UART_EndRxTransfer+0x3a>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f394:	2b01      	cmp	r3, #1
 800f396:	d118      	bne.n	800f3ca <UART_EndRxTransfer+0xac>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	60fb      	str	r3, [r7, #12]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	e853 3f00 	ldrex	r3, [r3]
 800f3a4:	60bb      	str	r3, [r7, #8]
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	f023 0310 	bic.w	r3, r3, #16
 800f3ac:	647b      	str	r3, [r7, #68]	; 0x44
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3b6:	61bb      	str	r3, [r7, #24]
 800f3b8:	617a      	str	r2, [r7, #20]
 800f3ba:	6979      	ldr	r1, [r7, #20]
 800f3bc:	69ba      	ldr	r2, [r7, #24]
 800f3be:	e841 2300 	strex	r3, r2, [r1]
 800f3c2:	613b      	str	r3, [r7, #16]
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1e6      	bne.n	800f398 <UART_EndRxTransfer+0x7a>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2220      	movs	r2, #32
 800f3ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	675a      	str	r2, [r3, #116]	; 0x74
 800f3de:	bf00      	nop
 800f3e0:	3754      	adds	r7, #84	; 0x54
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <UART_DMAAbortOnError>:
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b084      	sub	sp, #16
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2200      	movs	r2, #0
 800f404:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f7ff fabd 	bl	800e988 <HAL_UART_ErrorCallback>
 800f40e:	bf00      	nop
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <UART_EndTransmit_IT>:
 800f416:	b580      	push	{r7, lr}
 800f418:	b088      	sub	sp, #32
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60fb      	str	r3, [r7, #12]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	e853 3f00 	ldrex	r3, [r3]
 800f42a:	60bb      	str	r3, [r7, #8]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f432:	61fb      	str	r3, [r7, #28]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	461a      	mov	r2, r3
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	61bb      	str	r3, [r7, #24]
 800f43e:	617a      	str	r2, [r7, #20]
 800f440:	6979      	ldr	r1, [r7, #20]
 800f442:	69ba      	ldr	r2, [r7, #24]
 800f444:	e841 2300 	strex	r3, r2, [r1]
 800f448:	613b      	str	r3, [r7, #16]
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d1e6      	bne.n	800f41e <UART_EndTransmit_IT+0x8>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2220      	movs	r2, #32
 800f454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	679a      	str	r2, [r3, #120]	; 0x78
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7ff fa88 	bl	800e974 <HAL_UART_TxCpltCallback>
 800f464:	bf00      	nop
 800f466:	3720      	adds	r7, #32
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <HAL_UARTEx_WakeupCallback>:
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	bf00      	nop
 800f476:	370c      	adds	r7, #12
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr

0800f480 <HAL_UARTEx_RxFifoFullCallback>:
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <HAL_UARTEx_TxFifoEmptyCallback>:
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	bf00      	nop
 800f49e:	370c      	adds	r7, #12
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr

0800f4a8 <HAL_UARTEx_DisableFifoMode>:
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d101      	bne.n	800f4be <HAL_UARTEx_DisableFifoMode+0x16>
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	e027      	b.n	800f50e <HAL_UARTEx_DisableFifoMode+0x66>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2224      	movs	r2, #36	; 0x24
 800f4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f022 0201 	bic.w	r2, r2, #1
 800f4e4:	601a      	str	r2, [r3, #0]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f4ec:	60fb      	str	r3, [r7, #12]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	665a      	str	r2, [r3, #100]	; 0x64
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	601a      	str	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2220      	movs	r2, #32
 800f500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f50c:	2300      	movs	r3, #0
 800f50e:	4618      	mov	r0, r3
 800f510:	3714      	adds	r7, #20
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr

0800f51a <HAL_UARTEx_SetTxFifoThreshold>:
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b084      	sub	sp, #16
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
 800f522:	6039      	str	r1, [r7, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d101      	bne.n	800f532 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f52e:	2302      	movs	r3, #2
 800f530:	e02d      	b.n	800f58e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2201      	movs	r2, #1
 800f536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2224      	movs	r2, #36	; 0x24
 800f53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	60fb      	str	r3, [r7, #12]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f022 0201 	bic.w	r2, r2, #1
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	683a      	ldr	r2, [r7, #0]
 800f56a:	430a      	orrs	r2, r1
 800f56c:	609a      	str	r2, [r3, #8]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f850 	bl	800f614 <UARTEx_SetNbDataToProcess>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	601a      	str	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2220      	movs	r2, #32
 800f580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2200      	movs	r2, #0
 800f588:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f58c:	2300      	movs	r3, #0
 800f58e:	4618      	mov	r0, r3
 800f590:	3710      	adds	r7, #16
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <HAL_UARTEx_SetRxFifoThreshold>:
 800f596:	b580      	push	{r7, lr}
 800f598:	b084      	sub	sp, #16
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	6039      	str	r1, [r7, #0]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d101      	bne.n	800f5ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f5aa:	2302      	movs	r3, #2
 800f5ac:	e02d      	b.n	800f60a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2224      	movs	r2, #36	; 0x24
 800f5ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	60fb      	str	r3, [r7, #12]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f022 0201 	bic.w	r2, r2, #1
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	683a      	ldr	r2, [r7, #0]
 800f5e6:	430a      	orrs	r2, r1
 800f5e8:	609a      	str	r2, [r3, #8]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 f812 	bl	800f614 <UARTEx_SetNbDataToProcess>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	601a      	str	r2, [r3, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2220      	movs	r2, #32
 800f5fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f608:	2300      	movs	r3, #0
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
	...

0800f614 <UARTEx_SetNbDataToProcess>:
 800f614:	b480      	push	{r7}
 800f616:	b085      	sub	sp, #20
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f620:	2b00      	cmp	r3, #0
 800f622:	d108      	bne.n	800f636 <UARTEx_SetNbDataToProcess+0x22>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f634:	e031      	b.n	800f69a <UARTEx_SetNbDataToProcess+0x86>
 800f636:	2308      	movs	r3, #8
 800f638:	73fb      	strb	r3, [r7, #15]
 800f63a:	2308      	movs	r3, #8
 800f63c:	73bb      	strb	r3, [r7, #14]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	0e5b      	lsrs	r3, r3, #25
 800f646:	b2db      	uxtb	r3, r3
 800f648:	f003 0307 	and.w	r3, r3, #7
 800f64c:	737b      	strb	r3, [r7, #13]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	0f5b      	lsrs	r3, r3, #29
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 0307 	and.w	r3, r3, #7
 800f65c:	733b      	strb	r3, [r7, #12]
 800f65e:	7bbb      	ldrb	r3, [r7, #14]
 800f660:	7b3a      	ldrb	r2, [r7, #12]
 800f662:	4911      	ldr	r1, [pc, #68]	; (800f6a8 <UARTEx_SetNbDataToProcess+0x94>)
 800f664:	5c8a      	ldrb	r2, [r1, r2]
 800f666:	fb02 f303 	mul.w	r3, r2, r3
 800f66a:	7b3a      	ldrb	r2, [r7, #12]
 800f66c:	490f      	ldr	r1, [pc, #60]	; (800f6ac <UARTEx_SetNbDataToProcess+0x98>)
 800f66e:	5c8a      	ldrb	r2, [r1, r2]
 800f670:	fb93 f3f2 	sdiv	r3, r3, r2
 800f674:	b29a      	uxth	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
 800f67e:	7b7a      	ldrb	r2, [r7, #13]
 800f680:	4909      	ldr	r1, [pc, #36]	; (800f6a8 <UARTEx_SetNbDataToProcess+0x94>)
 800f682:	5c8a      	ldrb	r2, [r1, r2]
 800f684:	fb02 f303 	mul.w	r3, r2, r3
 800f688:	7b7a      	ldrb	r2, [r7, #13]
 800f68a:	4908      	ldr	r1, [pc, #32]	; (800f6ac <UARTEx_SetNbDataToProcess+0x98>)
 800f68c:	5c8a      	ldrb	r2, [r1, r2]
 800f68e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f692:	b29a      	uxth	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f69a:	bf00      	nop
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	080177c0 	.word	0x080177c0
 800f6ac:	080177c8 	.word	0x080177c8

0800f6b0 <_ZN17AbstractAllocatorD1Ev>:
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	4a04      	ldr	r2, [pc, #16]	; (800f6cc <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	601a      	str	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	08017754 	.word	0x08017754

0800f6d0 <_ZN17AbstractAllocatorD0Ev>:
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff ffe9 	bl	800f6b0 <_ZN17AbstractAllocatorD1Ev>
 800f6de:	2108      	movs	r1, #8
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f002 fe7a 	bl	80123da <_ZdlPvj>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f002 fec5 	bl	801248c <malloc>
 800f702:	4603      	mov	r3, r0
 800f704:	617b      	str	r3, [r7, #20]
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d105      	bne.n	800f718 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	3310      	adds	r3, #16
 800f712:	4618      	mov	r0, r3
 800f714:	f7f7 ff76 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	4618      	mov	r0, r3
 800f71c:	3718      	adds	r7, #24
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <_ZN15SystemAllocator4freeEP14CanardInstancePv>:
 800f722:	b580      	push	{r7, lr}
 800f724:	b084      	sub	sp, #16
 800f726:	af00      	add	r7, sp, #0
 800f728:	60f8      	str	r0, [r7, #12]
 800f72a:	60b9      	str	r1, [r7, #8]
 800f72c:	607a      	str	r2, [r7, #4]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f002 feb4 	bl	801249c <free>
 800f734:	bf00      	nop
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <_ZN15SystemAllocatorD1Ev>:
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	4a05      	ldr	r2, [pc, #20]	; (800f75c <_ZN15SystemAllocatorD1Ev+0x20>)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7ff ffaf 	bl	800f6b0 <_ZN17AbstractAllocatorD1Ev>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4618      	mov	r0, r3
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	080177d8 	.word	0x080177d8

0800f760 <_ZN15SystemAllocatorD0Ev>:
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7ff ffe7 	bl	800f73c <_ZN15SystemAllocatorD1Ev>
 800f76e:	2108      	movs	r1, #8
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f002 fe32 	bl	80123da <_ZdlPvj>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4618      	mov	r0, r3
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
 800f780:	b590      	push	{r4, r7, lr}
 800f782:	b08b      	sub	sp, #44	; 0x2c
 800f784:	af04      	add	r7, sp, #16
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	e9c7 2300 	strd	r2, r3, [r7]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	3308      	adds	r3, #8
 800f790:	4618      	mov	r0, r3
 800f792:	f000 f876 	bl	800f882 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800f796:	4603      	mov	r3, r0
 800f798:	f103 040c 	add.w	r4, r3, #12
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	3308      	adds	r3, #8
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f000 f86e 	bl	800f882 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	f103 0120 	add.w	r1, r3, #32
 800f7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ae:	9302      	str	r3, [sp, #8]
 800f7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b2:	9301      	str	r3, [sp, #4]
 800f7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f002 fb65 	bl	8011e8c <canardTxPush>
 800f7c2:	6178      	str	r0, [r7, #20]
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f113 0f03 	cmn.w	r3, #3
 800f7ca:	d106      	bne.n	800f7da <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	3310      	adds	r3, #16
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f7 ff16 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
 800f7d8:	e008      	b.n	800f7ec <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	da05      	bge.n	800f7ec <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	3310      	adds	r3, #16
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7f7 ff0c 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
 800f7ec:	371c      	adds	r7, #28
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd90      	pop	{r4, r7, pc}
	...

0800f7f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
 800f7f4:	b590      	push	{r4, r7, lr}
 800f7f6:	b089      	sub	sp, #36	; 0x24
 800f7f8:	af04      	add	r7, sp, #16
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	607a      	str	r2, [r7, #4]
 800f7fe:	461a      	mov	r2, r3
 800f800:	460b      	mov	r3, r1
 800f802:	817b      	strh	r3, [r7, #10]
 800f804:	4613      	mov	r3, r2
 800f806:	727b      	strb	r3, [r7, #9]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	3308      	adds	r3, #8
 800f80c:	4618      	mov	r0, r3
 800f80e:	f000 f838 	bl	800f882 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800f812:	4603      	mov	r3, r0
 800f814:	f103 0020 	add.w	r0, r3, #32
 800f818:	897c      	ldrh	r4, [r7, #10]
 800f81a:	7a79      	ldrb	r1, [r7, #9]
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	9302      	str	r3, [sp, #8]
 800f820:	4a0d      	ldr	r2, [pc, #52]	; (800f858 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800f822:	f04f 0300 	mov.w	r3, #0
 800f826:	e9cd 2300 	strd	r2, r3, [sp]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4622      	mov	r2, r4
 800f82e:	f002 fc7d 	bl	801212c <canardRxSubscribe>
 800f832:	4603      	mov	r3, r0
 800f834:	2b01      	cmp	r3, #1
 800f836:	bf14      	ite	ne
 800f838:	2301      	movne	r3, #1
 800f83a:	2300      	moveq	r3, #0
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d005      	beq.n	800f84e <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	3310      	adds	r3, #16
 800f848:	4618      	mov	r0, r3
 800f84a:	f7f7 fedb 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
 800f84e:	bf00      	nop
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	bd90      	pop	{r4, r7, pc}
 800f856:	bf00      	nop
 800f858:	001e8480 	.word	0x001e8480

0800f85c <_ZN15CyphalInterface4loopEv>:
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	3308      	adds	r3, #8
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 f80a 	bl	800f882 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800f86e:	4603      	mov	r3, r0
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	3208      	adds	r2, #8
 800f874:	6812      	ldr	r2, [r2, #0]
 800f876:	4618      	mov	r0, r3
 800f878:	4790      	blx	r2
 800f87a:	bf00      	nop
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
 800f882:	b580      	push	{r7, lr}
 800f884:	b082      	sub	sp, #8
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 f805 	bl	800f89a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800f890:	4603      	mov	r3, r0
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b082      	sub	sp, #8
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f000 f805 	bl	800f8b4 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f806 	bl	800f8d0 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 f805 	bl	800f8ea <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3708      	adds	r7, #8
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b082      	sub	sp, #8
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f805 	bl	800f902 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3708      	adds	r7, #8
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}

0800f902 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
 800f902:	b580      	push	{r7, lr}
 800f904:	b082      	sub	sp, #8
 800f906:	af00      	add	r7, sp, #0
 800f908:	6078      	str	r0, [r7, #4]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f000 f805 	bl	800f91c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800f912:	4603      	mov	r3, r0
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	370c      	adds	r7, #12
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr

0800f932 <_Z16fdcan_dlc_to_lenm>:
 800f932:	b480      	push	{r7}
 800f934:	b085      	sub	sp, #20
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	0c1b      	lsrs	r3, r3, #16
 800f93e:	73fb      	strb	r3, [r7, #15]
 800f940:	7bfb      	ldrb	r3, [r7, #15]
 800f942:	2b08      	cmp	r3, #8
 800f944:	d801      	bhi.n	800f94a <_Z16fdcan_dlc_to_lenm+0x18>
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	e009      	b.n	800f95e <_Z16fdcan_dlc_to_lenm+0x2c>
 800f94a:	7bfb      	ldrb	r3, [r7, #15]
 800f94c:	2b0c      	cmp	r3, #12
 800f94e:	d803      	bhi.n	800f958 <_Z16fdcan_dlc_to_lenm+0x26>
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	3b06      	subs	r3, #6
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	e002      	b.n	800f95e <_Z16fdcan_dlc_to_lenm+0x2c>
 800f958:	7bfb      	ldrb	r3, [r7, #15]
 800f95a:	3b0b      	subs	r3, #11
 800f95c:	011b      	lsls	r3, r3, #4
 800f95e:	4618      	mov	r0, r3
 800f960:	3714      	adds	r7, #20
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
	...

0800f96c <_ZL12delay_cyclest>:
 800f96c:	f1a0 0308 	sub.w	r3, r0, #8
 800f970:	4a07      	ldr	r2, [pc, #28]	; (800f990 <_ZL12delay_cyclest+0x24>)
 800f972:	fb82 1203 	smull	r1, r2, r2, r3
 800f976:	17db      	asrs	r3, r3, #31
 800f978:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 800f97c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800f980:	d004      	beq.n	800f98c <_ZL12delay_cyclest+0x20>
 800f982:	bf00      	nop
 800f984:	3b01      	subs	r3, #1
 800f986:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800f98a:	d1fa      	bne.n	800f982 <_ZL12delay_cyclest+0x16>
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	66666667 	.word	0x66666667

0800f994 <_ZN5G4CAN10len_to_dlcEj>:
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
 800f99e:	4a05      	ldr	r2, [pc, #20]	; (800f9b4 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	370c      	adds	r7, #12
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	080177e8 	.word	0x080177e8

0800f9b8 <_ZN5G4CAN10dlc_to_lenEm>:
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
 800f9c2:	6838      	ldr	r0, [r7, #0]
 800f9c4:	f7ff ffb5 	bl	800f932 <_Z16fdcan_dlc_to_lenm>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <_ZN5G4CAN8can_loopEv>:
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b086      	sub	sp, #24
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	e017      	b.n	800fa0c <_ZN5G4CAN8can_loopEv+0x3a>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	330c      	adds	r3, #12
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f107 0208 	add.w	r2, r7, #8
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	4798      	blx	r3
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	75fb      	strb	r3, [r7, #23]
 800f9f2:	7dfb      	ldrb	r3, [r7, #23]
 800f9f4:	f083 0301 	eor.w	r3, r3, #1
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d115      	bne.n	800fa2a <_ZN5G4CAN8can_loopEv+0x58>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f107 0208 	add.w	r2, r7, #8
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f000 f904 	bl	800fc14 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa10:	2140      	movs	r1, #64	; 0x40
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fa fdf2 	bl	800a5fc <HAL_FDCAN_GetRxFifoFillLevel>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	bf14      	ite	ne
 800fa1e:	2301      	movne	r3, #1
 800fa20:	2300      	moveq	r3, #0
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d1d9      	bne.n	800f9dc <_ZN5G4CAN8can_loopEv+0xa>
 800fa28:	e000      	b.n	800fa2c <_ZN5G4CAN8can_loopEv+0x5a>
 800fa2a:	bf00      	nop
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 f944 	bl	800fcbc <_ZN19AbstractCANProvider17process_canard_txEv>
 800fa34:	bf00      	nop
 800fa36:	3718      	adds	r7, #24
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <_ZN5G4CAN10read_frameEP11CanardFrame>:
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b08e      	sub	sp, #56	; 0x38
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
 800fa46:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa50:	2140      	movs	r1, #64	; 0x40
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fa fdd2 	bl	800a5fc <HAL_FDCAN_GetRxFifoFillLevel>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	bf14      	ite	ne
 800fa5e:	2301      	movne	r3, #1
 800fa60:	2300      	moveq	r3, #0
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d002      	beq.n	800fa6e <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
 800fa68:	2340      	movs	r3, #64	; 0x40
 800fa6a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa6c:	e00f      	b.n	800fa8e <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa72:	2141      	movs	r1, #65	; 0x41
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fa fdc1 	bl	800a5fc <HAL_FDCAN_GetRxFifoFillLevel>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	bf14      	ite	ne
 800fa80:	2301      	movne	r3, #1
 800fa82:	2300      	moveq	r3, #0
 800fa84:	b2db      	uxtb	r3, r3
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d001      	beq.n	800fa8e <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 800fa8a:	2341      	movs	r3, #65	; 0x41
 800fa8c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa94:	d101      	bne.n	800fa9a <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
 800fa96:	2300      	movs	r3, #0
 800fa98:	e02e      	b.n	800faf8 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
 800fa9a:	f107 030c 	add.w	r3, r7, #12
 800fa9e:	2228      	movs	r2, #40	; 0x28
 800faa0:	2100      	movs	r1, #0
 800faa2:	4618      	mov	r0, r3
 800faa4:	f003 fd85 	bl	80135b2 <memset>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800faac:	f107 020c 	add.w	r2, r7, #12
 800fab0:	4b13      	ldr	r3, [pc, #76]	; (800fb00 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800fab2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fab4:	f7fa fcc8 	bl	800a448 <HAL_FDCAN_GetRxMessage>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	bf14      	ite	ne
 800fabe:	2301      	movne	r3, #1
 800fac0:	2300      	moveq	r3, #0
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d005      	beq.n	800fad4 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800facc:	3310      	adds	r3, #16
 800face:	4618      	mov	r0, r3
 800fad0:	f7f7 fd98 	bl	8007604 <_ZNKSt8functionIFvvEEclEv>
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	3304      	adds	r3, #4
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	69ba      	ldr	r2, [r7, #24]
 800fae4:	4611      	mov	r1, r2
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	4798      	blx	r3
 800faea:	4602      	mov	r2, r0
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	605a      	str	r2, [r3, #4]
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	4a03      	ldr	r2, [pc, #12]	; (800fb00 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800faf4:	609a      	str	r2, [r3, #8]
 800faf6:	2301      	movs	r3, #1
 800faf8:	4618      	mov	r0, r3
 800fafa:	3738      	adds	r7, #56	; 0x38
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	200008fc 	.word	0x200008fc

0800fb04 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08c      	sub	sp, #48	; 0x30
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	6a1b      	ldr	r3, [r3, #32]
 800fb12:	60bb      	str	r3, [r7, #8]
 800fb14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb18:	60fb      	str	r3, [r7, #12]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	613b      	str	r3, [r7, #16]
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb22:	4a2a      	ldr	r2, [pc, #168]	; (800fbcc <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800fb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb28:	617b      	str	r3, [r7, #20]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	61bb      	str	r3, [r7, #24]
 800fb2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fb32:	61fb      	str	r3, [r7, #28]
 800fb34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fb38:	623b      	str	r3, [r7, #32]
 800fb3a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fb3e:	627b      	str	r3, [r7, #36]	; 0x24
 800fb40:	2300      	movs	r3, #0
 800fb42:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb44:	2300      	movs	r3, #0
 800fb46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb48:	e006      	b.n	800fb58 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
 800fb4a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800fb4e:	f7ff ff0d 	bl	800f96c <_ZL12delay_cyclest>
 800fb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb54:	3301      	adds	r3, #1
 800fb56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fa fd6b 	bl	800a638 <HAL_FDCAN_GetTxFifoFreeLevel>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b03      	cmp	r3, #3
 800fb66:	d004      	beq.n	800fb72 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800fb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	dc01      	bgt.n	800fb72 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e000      	b.n	800fb74 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800fb72:	2300      	movs	r3, #0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d1e8      	bne.n	800fb4a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fa fd5b 	bl	800a638 <HAL_FDCAN_GetTxFifoFreeLevel>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	bf14      	ite	ne
 800fb88:	2301      	movne	r3, #1
 800fb8a:	2300      	moveq	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d002      	beq.n	800fb98 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
 800fb92:	f04f 33ff 	mov.w	r3, #4294967295
 800fb96:	e014      	b.n	800fbc2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fba0:	f107 0308 	add.w	r3, r7, #8
 800fba4:	4619      	mov	r1, r3
 800fba6:	f7fa fc0b 	bl	800a3c0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	bf14      	ite	ne
 800fbb0:	2301      	movne	r3, #1
 800fbb2:	2300      	moveq	r3, #0
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d002      	beq.n	800fbc0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
 800fbba:	f04f 33ff 	mov.w	r3, #4294967295
 800fbbe:	e000      	b.n	800fbc2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3730      	adds	r7, #48	; 0x30
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	080177e8 	.word	0x080177e8

0800fbd0 <_ZN5G4CAND1Ev>:
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	4a05      	ldr	r2, [pc, #20]	; (800fbf0 <_ZN5G4CAND1Ev+0x20>)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	601a      	str	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f000 f8b1 	bl	800fd48 <_ZN19AbstractCANProviderD1Ev>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	080178f4 	.word	0x080178f4

0800fbf4 <_ZN5G4CAND0Ev>:
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff ffe7 	bl	800fbd0 <_ZN5G4CAND1Ev>
 800fc02:	2144      	movs	r1, #68	; 0x44
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f002 fbe8 	bl	80123da <_ZdlPvj>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
 800fc14:	b590      	push	{r4, r7, lr}
 800fc16:	b091      	sub	sp, #68	; 0x44
 800fc18:	af04      	add	r7, sp, #16
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
 800fc1e:	f107 0310 	add.w	r3, r7, #16
 800fc22:	2200      	movs	r2, #0
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	605a      	str	r2, [r3, #4]
 800fc28:	609a      	str	r2, [r3, #8]
 800fc2a:	60da      	str	r2, [r3, #12]
 800fc2c:	611a      	str	r2, [r3, #16]
 800fc2e:	615a      	str	r2, [r3, #20]
 800fc30:	2300      	movs	r3, #0
 800fc32:	60fb      	str	r3, [r7, #12]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f103 0420 	add.w	r4, r3, #32
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7f7 fcf6 	bl	8007630 <_ZNKSt8functionIFyvEEclEv>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	f107 010c 	add.w	r1, r7, #12
 800fc4c:	9103      	str	r1, [sp, #12]
 800fc4e:	f107 0110 	add.w	r1, r7, #16
 800fc52:	9102      	str	r1, [sp, #8]
 800fc54:	2100      	movs	r1, #0
 800fc56:	9101      	str	r1, [sp, #4]
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	9100      	str	r1, [sp, #0]
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f002 f9d5 	bl	801200c <canardRxAccept>
 800fc62:	4603      	mov	r3, r0
 800fc64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fc68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d10e      	bne.n	800fc8e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	6a1b      	ldr	r3, [r3, #32]
 800fc74:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d010      	beq.n	800fc9e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f107 0210 	add.w	r2, r7, #16
 800fc86:	4611      	mov	r1, r2
 800fc88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc8a:	4798      	blx	r3
 800fc8c:	e007      	b.n	800fc9e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 800fc8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00e      	beq.n	800fcb4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 800fc96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	dc0a      	bgt.n	800fcb4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d008      	beq.n	800fcb6 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	3220      	adds	r2, #32
 800fcac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fcae:	4610      	mov	r0, r2
 800fcb0:	4798      	blx	r3
 800fcb2:	e000      	b.n	800fcb6 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 800fcb4:	bf00      	nop
 800fcb6:	3734      	adds	r7, #52	; 0x34
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd90      	pop	{r4, r7, pc}

0800fcbc <_ZN19AbstractCANProvider17process_canard_txEv>:
 800fcbc:	b5b0      	push	{r4, r5, r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	e036      	b.n	800fd34 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	330c      	adds	r3, #12
 800fcca:	4618      	mov	r0, r3
 800fccc:	f002 f968 	bl	8011fa0 <canardTxPeek>
 800fcd0:	60f8      	str	r0, [r7, #12]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	d00c      	beq.n	800fcf6 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7f7 fca2 	bl	8007630 <_ZNKSt8functionIFyvEEclEv>
 800fcec:	4602      	mov	r2, r0
 800fcee:	460b      	mov	r3, r1
 800fcf0:	42a2      	cmp	r2, r4
 800fcf2:	41ab      	sbcs	r3, r5
 800fcf4:	d201      	bcs.n	800fcfa <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e000      	b.n	800fcfc <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d00a      	beq.n	800fd16 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	3310      	adds	r3, #16
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68f9      	ldr	r1, [r7, #12]
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	4798      	blx	r3
 800fd0e:	60b8      	str	r0, [r7, #8]
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	db13      	blt.n	800fd3e <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f103 0520 	add.w	r5, r3, #32
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	330c      	adds	r3, #12
 800fd24:	68f9      	ldr	r1, [r7, #12]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f002 f94f 	bl	8011fca <canardTxPop>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	4619      	mov	r1, r3
 800fd30:	4628      	mov	r0, r5
 800fd32:	47a0      	blx	r4
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d1c4      	bne.n	800fcc6 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
 800fd3c:	e000      	b.n	800fd40 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
 800fd3e:	bf00      	nop
 800fd40:	bf00      	nop
 800fd42:	3710      	adds	r7, #16
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bdb0      	pop	{r4, r5, r7, pc}

0800fd48 <_ZN19AbstractCANProviderD1Ev>:
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	4a04      	ldr	r2, [pc, #16]	; (800fd64 <_ZN19AbstractCANProviderD1Ev+0x1c>)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	601a      	str	r2, [r3, #0]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr
 800fd64:	08017918 	.word	0x08017918

0800fd68 <_Z41__static_initialization_and_destruction_0ii>:
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d107      	bne.n	800fd88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d102      	bne.n	800fd88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800fd82:	4803      	ldr	r0, [pc, #12]	; (800fd90 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800fd84:	f000 f806 	bl	800fd94 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
 800fd88:	bf00      	nop
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	2000093c 	.word	0x2000093c

0800fd94 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
 800fd94:	b590      	push	{r4, r7, lr}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7f8 fb5a 	bl	8008458 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800fda4:	60f8      	str	r0, [r7, #12]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00c      	beq.n	800fdc8 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7f8 fa1f 	bl	80081f2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	68f8      	ldr	r0, [r7, #12]
 800fdb8:	f7f8 faac 	bl	8008314 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7f8 fb55 	bl	8008472 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3714      	adds	r7, #20
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd90      	pop	{r4, r7, pc}

0800fdd8 <_GLOBAL__sub_I_queue>:
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fde0:	2001      	movs	r0, #1
 800fde2:	f7ff ffc1 	bl	800fd68 <_Z41__static_initialization_and_destruction_0ii>
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <_GLOBAL__sub_D_queue>:
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	f7ff ffb9 	bl	800fd68 <_Z41__static_initialization_and_destruction_0ii>
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <cavlFindExtremum>:
 800fdf8:	b480      	push	{r7}
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	460b      	mov	r3, r1
 800fe02:	70fb      	strb	r3, [r7, #3]
 800fe04:	2300      	movs	r3, #0
 800fe06:	60fb      	str	r3, [r7, #12]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	60bb      	str	r3, [r7, #8]
 800fe0c:	e007      	b.n	800fe1e <cavlFindExtremum+0x26>
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	60fb      	str	r3, [r7, #12]
 800fe12:	78fb      	ldrb	r3, [r7, #3]
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4413      	add	r3, r2
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	60bb      	str	r3, [r7, #8]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d1f4      	bne.n	800fe0e <cavlFindExtremum+0x16>
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	4618      	mov	r0, r3
 800fe28:	3714      	adds	r7, #20
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
	...

0800fe34 <cavlPrivateRotate>:
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	70fb      	strb	r3, [r7, #3]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d014      	beq.n	800fe70 <cavlPrivateRotate+0x3c>
 800fe46:	78fb      	ldrb	r3, [r7, #3]
 800fe48:	f083 0301 	eor.w	r3, r3, #1
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4413      	add	r3, r2
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00a      	beq.n	800fe70 <cavlPrivateRotate+0x3c>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fe60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe64:	db04      	blt.n	800fe70 <cavlPrivateRotate+0x3c>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	dd05      	ble.n	800fe7c <cavlPrivateRotate+0x48>
 800fe70:	4b2a      	ldr	r3, [pc, #168]	; (800ff1c <cavlPrivateRotate+0xe8>)
 800fe72:	4a2b      	ldr	r2, [pc, #172]	; (800ff20 <cavlPrivateRotate+0xec>)
 800fe74:	2162      	movs	r1, #98	; 0x62
 800fe76:	482b      	ldr	r0, [pc, #172]	; (800ff24 <cavlPrivateRotate+0xf0>)
 800fe78:	f002 fad8 	bl	801242c <__assert_func>
 800fe7c:	78fb      	ldrb	r3, [r7, #3]
 800fe7e:	f083 0301 	eor.w	r3, r3, #1
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	4413      	add	r3, r2
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	60fb      	str	r3, [r7, #12]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00e      	beq.n	800feb4 <cavlPrivateRotate+0x80>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	6879      	ldr	r1, [r7, #4]
 800fea2:	4299      	cmp	r1, r3
 800fea4:	bf0c      	ite	eq
 800fea6:	2301      	moveq	r3, #1
 800fea8:	2300      	movne	r3, #0
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	4413      	add	r3, r2
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	605a      	str	r2, [r3, #4]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	78fb      	ldrb	r3, [r7, #3]
 800fec4:	78fa      	ldrb	r2, [r7, #3]
 800fec6:	f082 0201 	eor.w	r2, r2, #1
 800feca:	b2d2      	uxtb	r2, r2
 800fecc:	4610      	mov	r0, r2
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	4413      	add	r3, r2
 800fed4:	685a      	ldr	r2, [r3, #4]
 800fed6:	6879      	ldr	r1, [r7, #4]
 800fed8:	0083      	lsls	r3, r0, #2
 800feda:	440b      	add	r3, r1
 800fedc:	605a      	str	r2, [r3, #4]
 800fede:	78fb      	ldrb	r3, [r7, #3]
 800fee0:	f083 0301 	eor.w	r3, r3, #1
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	4413      	add	r3, r2
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d009      	beq.n	800ff06 <cavlPrivateRotate+0xd2>
 800fef2:	78fb      	ldrb	r3, [r7, #3]
 800fef4:	f083 0301 	eor.w	r3, r3, #1
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	4413      	add	r3, r2
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	78fb      	ldrb	r3, [r7, #3]
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4413      	add	r3, r2
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	605a      	str	r2, [r3, #4]
 800ff12:	bf00      	nop
 800ff14:	3710      	adds	r7, #16
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	08016c60 	.word	0x08016c60
 800ff20:	08017ca0 	.word	0x08017ca0
 800ff24:	08016ca8 	.word	0x08016ca8

0800ff28 <cavlPrivateAdjustBalance>:
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b086      	sub	sp, #24
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	460b      	mov	r3, r1
 800ff32:	70fb      	strb	r3, [r7, #3]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00a      	beq.n	800ff50 <cavlPrivateAdjustBalance+0x28>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ff40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff44:	db04      	blt.n	800ff50 <cavlPrivateAdjustBalance+0x28>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	dd05      	ble.n	800ff5c <cavlPrivateAdjustBalance+0x34>
 800ff50:	4b61      	ldr	r3, [pc, #388]	; (80100d8 <cavlPrivateAdjustBalance+0x1b0>)
 800ff52:	4a62      	ldr	r2, [pc, #392]	; (80100dc <cavlPrivateAdjustBalance+0x1b4>)
 800ff54:	2177      	movs	r1, #119	; 0x77
 800ff56:	4862      	ldr	r0, [pc, #392]	; (80100e0 <cavlPrivateAdjustBalance+0x1b8>)
 800ff58:	f002 fa68 	bl	801242c <__assert_func>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	617b      	str	r3, [r7, #20]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	78fa      	ldrb	r2, [r7, #3]
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	d001      	beq.n	800ff72 <cavlPrivateAdjustBalance+0x4a>
 800ff6e:	2201      	movs	r2, #1
 800ff70:	e000      	b.n	800ff74 <cavlPrivateAdjustBalance+0x4c>
 800ff72:	22ff      	movs	r2, #255	; 0xff
 800ff74:	4413      	add	r3, r2
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	74fb      	strb	r3, [r7, #19]
 800ff7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff82:	db04      	blt.n	800ff8e <cavlPrivateAdjustBalance+0x66>
 800ff84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	f340 809c 	ble.w	80100c6 <cavlPrivateAdjustBalance+0x19e>
 800ff8e:	7cfb      	ldrb	r3, [r7, #19]
 800ff90:	09db      	lsrs	r3, r3, #7
 800ff92:	74bb      	strb	r3, [r7, #18]
 800ff94:	7cbb      	ldrb	r3, [r7, #18]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <cavlPrivateAdjustBalance+0x76>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e001      	b.n	800ffa2 <cavlPrivateAdjustBalance+0x7a>
 800ff9e:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa2:	747b      	strb	r3, [r7, #17]
 800ffa4:	7cbb      	ldrb	r3, [r7, #18]
 800ffa6:	f083 0301 	eor.w	r3, r3, #1
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	4413      	add	r3, r2
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	60fb      	str	r3, [r7, #12]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d105      	bne.n	800ffc8 <cavlPrivateAdjustBalance+0xa0>
 800ffbc:	4b49      	ldr	r3, [pc, #292]	; (80100e4 <cavlPrivateAdjustBalance+0x1bc>)
 800ffbe:	4a47      	ldr	r2, [pc, #284]	; (80100dc <cavlPrivateAdjustBalance+0x1b4>)
 800ffc0:	217f      	movs	r1, #127	; 0x7f
 800ffc2:	4847      	ldr	r0, [pc, #284]	; (80100e0 <cavlPrivateAdjustBalance+0x1b8>)
 800ffc4:	f002 fa32 	bl	801242c <__assert_func>
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ffd4:	fb02 f303 	mul.w	r3, r2, r3
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	dc1c      	bgt.n	8010016 <cavlPrivateAdjustBalance+0xee>
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	617b      	str	r3, [r7, #20]
 800ffe0:	7cbb      	ldrb	r3, [r7, #18]
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7ff ff25 	bl	800fe34 <cavlPrivateRotate>
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d109      	bne.n	8010008 <cavlPrivateAdjustBalance+0xe0>
 800fff4:	7c7b      	ldrb	r3, [r7, #17]
 800fff6:	425b      	negs	r3, r3
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	b25a      	sxtb	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	731a      	strb	r2, [r3, #12]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	7c7a      	ldrb	r2, [r7, #17]
 8010004:	731a      	strb	r2, [r3, #12]
 8010006:	e061      	b.n	80100cc <cavlPrivateAdjustBalance+0x1a4>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	731a      	strb	r2, [r3, #12]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2200      	movs	r2, #0
 8010012:	731a      	strb	r2, [r3, #12]
 8010014:	e05a      	b.n	80100cc <cavlPrivateAdjustBalance+0x1a4>
 8010016:	7cbb      	ldrb	r3, [r7, #18]
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4413      	add	r3, r2
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	60bb      	str	r3, [r7, #8]
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d105      	bne.n	8010034 <cavlPrivateAdjustBalance+0x10c>
 8010028:	4b2f      	ldr	r3, [pc, #188]	; (80100e8 <cavlPrivateAdjustBalance+0x1c0>)
 801002a:	4a2c      	ldr	r2, [pc, #176]	; (80100dc <cavlPrivateAdjustBalance+0x1b4>)
 801002c:	2192      	movs	r1, #146	; 0x92
 801002e:	482c      	ldr	r0, [pc, #176]	; (80100e0 <cavlPrivateAdjustBalance+0x1b8>)
 8010030:	f002 f9fc 	bl	801242c <__assert_func>
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	617b      	str	r3, [r7, #20]
 8010038:	7cbb      	ldrb	r3, [r7, #18]
 801003a:	2b00      	cmp	r3, #0
 801003c:	bf14      	ite	ne
 801003e:	2301      	movne	r3, #1
 8010040:	2300      	moveq	r3, #0
 8010042:	b2db      	uxtb	r3, r3
 8010044:	f083 0301 	eor.w	r3, r3, #1
 8010048:	b2db      	uxtb	r3, r3
 801004a:	f003 0301 	and.w	r3, r3, #1
 801004e:	b2db      	uxtb	r3, r3
 8010050:	4619      	mov	r1, r3
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f7ff feee 	bl	800fe34 <cavlPrivateRotate>
 8010058:	7cbb      	ldrb	r3, [r7, #18]
 801005a:	4619      	mov	r1, r3
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff fee9 	bl	800fe34 <cavlPrivateRotate>
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010068:	461a      	mov	r2, r3
 801006a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801006e:	fb02 f303 	mul.w	r3, r2, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	da09      	bge.n	801008a <cavlPrivateAdjustBalance+0x162>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	7c7a      	ldrb	r2, [r7, #17]
 801007a:	731a      	strb	r2, [r3, #12]
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	2200      	movs	r2, #0
 8010080:	731a      	strb	r2, [r3, #12]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2200      	movs	r2, #0
 8010086:	731a      	strb	r2, [r3, #12]
 8010088:	e020      	b.n	80100cc <cavlPrivateAdjustBalance+0x1a4>
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010090:	461a      	mov	r2, r3
 8010092:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8010096:	fb02 f303 	mul.w	r3, r2, r3
 801009a:	2b00      	cmp	r3, #0
 801009c:	dd0c      	ble.n	80100b8 <cavlPrivateAdjustBalance+0x190>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	731a      	strb	r2, [r3, #12]
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	2200      	movs	r2, #0
 80100a8:	731a      	strb	r2, [r3, #12]
 80100aa:	7c7b      	ldrb	r3, [r7, #17]
 80100ac:	425b      	negs	r3, r3
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	b25a      	sxtb	r2, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	731a      	strb	r2, [r3, #12]
 80100b6:	e009      	b.n	80100cc <cavlPrivateAdjustBalance+0x1a4>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	731a      	strb	r2, [r3, #12]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2200      	movs	r2, #0
 80100c2:	731a      	strb	r2, [r3, #12]
 80100c4:	e002      	b.n	80100cc <cavlPrivateAdjustBalance+0x1a4>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	7cfa      	ldrb	r2, [r7, #19]
 80100ca:	731a      	strb	r2, [r3, #12]
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	4618      	mov	r0, r3
 80100d0:	3718      	adds	r7, #24
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	08016cd4 	.word	0x08016cd4
 80100dc:	08017c84 	.word	0x08017c84
 80100e0:	08016ca8 	.word	0x08016ca8
 80100e4:	08016d04 	.word	0x08016d04
 80100e8:	08016d10 	.word	0x08016d10

080100ec <cavlPrivateRetraceOnGrowth>:
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d004      	beq.n	8010104 <cavlPrivateRetraceOnGrowth+0x18>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d005      	beq.n	8010110 <cavlPrivateRetraceOnGrowth+0x24>
 8010104:	4b23      	ldr	r3, [pc, #140]	; (8010194 <cavlPrivateRetraceOnGrowth+0xa8>)
 8010106:	4a24      	ldr	r2, [pc, #144]	; (8010198 <cavlPrivateRetraceOnGrowth+0xac>)
 8010108:	21b5      	movs	r1, #181	; 0xb5
 801010a:	4824      	ldr	r0, [pc, #144]	; (801019c <cavlPrivateRetraceOnGrowth+0xb0>)
 801010c:	f002 f98e 	bl	801242c <__assert_func>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	617b      	str	r3, [r7, #20]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	613b      	str	r3, [r7, #16]
 801011a:	e023      	b.n	8010164 <cavlPrivateRetraceOnGrowth+0x78>
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	697a      	ldr	r2, [r7, #20]
 8010122:	429a      	cmp	r2, r3
 8010124:	bf0c      	ite	eq
 8010126:	2301      	moveq	r3, #1
 8010128:	2300      	movne	r3, #0
 801012a:	73fb      	strb	r3, [r7, #15]
 801012c:	7bfb      	ldrb	r3, [r7, #15]
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	4413      	add	r3, r2
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	429a      	cmp	r2, r3
 801013a:	d005      	beq.n	8010148 <cavlPrivateRetraceOnGrowth+0x5c>
 801013c:	4b18      	ldr	r3, [pc, #96]	; (80101a0 <cavlPrivateRetraceOnGrowth+0xb4>)
 801013e:	4a16      	ldr	r2, [pc, #88]	; (8010198 <cavlPrivateRetraceOnGrowth+0xac>)
 8010140:	21bb      	movs	r1, #187	; 0xbb
 8010142:	4816      	ldr	r0, [pc, #88]	; (801019c <cavlPrivateRetraceOnGrowth+0xb0>)
 8010144:	f002 f972 	bl	801242c <__assert_func>
 8010148:	7bfb      	ldrb	r3, [r7, #15]
 801014a:	4619      	mov	r1, r3
 801014c:	6938      	ldr	r0, [r7, #16]
 801014e:	f7ff feeb 	bl	800ff28 <cavlPrivateAdjustBalance>
 8010152:	6178      	str	r0, [r7, #20]
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	613b      	str	r3, [r7, #16]
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d003      	beq.n	801016c <cavlPrivateRetraceOnGrowth+0x80>
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d1d8      	bne.n	801011c <cavlPrivateRetraceOnGrowth+0x30>
 801016a:	e000      	b.n	801016e <cavlPrivateRetraceOnGrowth+0x82>
 801016c:	bf00      	nop
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d105      	bne.n	8010180 <cavlPrivateRetraceOnGrowth+0x94>
 8010174:	4b0b      	ldr	r3, [pc, #44]	; (80101a4 <cavlPrivateRetraceOnGrowth+0xb8>)
 8010176:	4a08      	ldr	r2, [pc, #32]	; (8010198 <cavlPrivateRetraceOnGrowth+0xac>)
 8010178:	21c3      	movs	r1, #195	; 0xc3
 801017a:	4808      	ldr	r0, [pc, #32]	; (801019c <cavlPrivateRetraceOnGrowth+0xb0>)
 801017c:	f002 f956 	bl	801242c <__assert_func>
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <cavlPrivateRetraceOnGrowth+0x9e>
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	e000      	b.n	801018c <cavlPrivateRetraceOnGrowth+0xa0>
 801018a:	2300      	movs	r3, #0
 801018c:	4618      	mov	r0, r3
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	08016d1c 	.word	0x08016d1c
 8010198:	08017c68 	.word	0x08017c68
 801019c:	08016ca8 	.word	0x08016ca8
 80101a0:	08016d40 	.word	0x08016d40
 80101a4:	08016d50 	.word	0x08016d50

080101a8 <cavlSearch>:
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b08a      	sub	sp, #40	; 0x28
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	607a      	str	r2, [r7, #4]
 80101b4:	603b      	str	r3, [r7, #0]
 80101b6:	2300      	movs	r3, #0
 80101b8:	627b      	str	r3, [r7, #36]	; 0x24
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d065      	beq.n	801028c <cavlSearch+0xe4>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d062      	beq.n	801028c <cavlSearch+0xe4>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	623b      	str	r3, [r7, #32]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	61fb      	str	r3, [r7, #28]
 80101d0:	e02f      	b.n	8010232 <cavlSearch+0x8a>
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4611      	mov	r1, r2
 80101da:	68b8      	ldr	r0, [r7, #8]
 80101dc:	4798      	blx	r3
 80101de:	4603      	mov	r3, r0
 80101e0:	76fb      	strb	r3, [r7, #27]
 80101e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d103      	bne.n	80101f2 <cavlSearch+0x4a>
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	627b      	str	r3, [r7, #36]	; 0x24
 80101f0:	e023      	b.n	801023a <cavlSearch+0x92>
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	623b      	str	r3, [r7, #32]
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010200:	2b00      	cmp	r3, #0
 8010202:	bfcc      	ite	gt
 8010204:	2301      	movgt	r3, #1
 8010206:	2300      	movle	r3, #0
 8010208:	b2db      	uxtb	r3, r3
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	3304      	adds	r3, #4
 8010210:	61fb      	str	r3, [r7, #28]
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00b      	beq.n	8010232 <cavlSearch+0x8a>
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	6a3a      	ldr	r2, [r7, #32]
 8010222:	429a      	cmp	r2, r3
 8010224:	d005      	beq.n	8010232 <cavlSearch+0x8a>
 8010226:	4b1c      	ldr	r3, [pc, #112]	; (8010298 <cavlSearch+0xf0>)
 8010228:	4a1c      	ldr	r2, [pc, #112]	; (801029c <cavlSearch+0xf4>)
 801022a:	21db      	movs	r1, #219	; 0xdb
 801022c:	481c      	ldr	r0, [pc, #112]	; (80102a0 <cavlSearch+0xf8>)
 801022e:	f002 f8fd 	bl	801242c <__assert_func>
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1cb      	bne.n	80101d2 <cavlSearch+0x2a>
 801023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023c:	2b00      	cmp	r3, #0
 801023e:	d125      	bne.n	801028c <cavlSearch+0xe4>
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d004      	beq.n	8010250 <cavlSearch+0xa8>
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	68b8      	ldr	r0, [r7, #8]
 801024a:	4798      	blx	r3
 801024c:	4603      	mov	r3, r0
 801024e:	e000      	b.n	8010252 <cavlSearch+0xaa>
 8010250:	2300      	movs	r3, #0
 8010252:	627b      	str	r3, [r7, #36]	; 0x24
 8010254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010256:	2b00      	cmp	r3, #0
 8010258:	d018      	beq.n	801028c <cavlSearch+0xe4>
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801025e:	601a      	str	r2, [r3, #0]
 8010260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010262:	2200      	movs	r2, #0
 8010264:	605a      	str	r2, [r3, #4]
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	2200      	movs	r2, #0
 801026a:	609a      	str	r2, [r3, #8]
 801026c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026e:	6a3a      	ldr	r2, [r7, #32]
 8010270:	601a      	str	r2, [r3, #0]
 8010272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010274:	2200      	movs	r2, #0
 8010276:	731a      	strb	r2, [r3, #12]
 8010278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801027a:	f7ff ff37 	bl	80100ec <cavlPrivateRetraceOnGrowth>
 801027e:	6178      	str	r0, [r7, #20]
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d002      	beq.n	801028c <cavlSearch+0xe4>
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	697a      	ldr	r2, [r7, #20]
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028e:	4618      	mov	r0, r3
 8010290:	3728      	adds	r7, #40	; 0x28
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	08016d5c 	.word	0x08016d5c
 801029c:	08017c5c 	.word	0x08017c5c
 80102a0:	08016ca8 	.word	0x08016ca8

080102a4 <cavlRemove>:
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 8116 	beq.w	80104e2 <cavlRemove+0x23e>
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 8112 	beq.w	80104e2 <cavlRemove+0x23e>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d105      	bne.n	80102d2 <cavlRemove+0x2e>
 80102c6:	4b89      	ldr	r3, [pc, #548]	; (80104ec <cavlRemove+0x248>)
 80102c8:	4a89      	ldr	r2, [pc, #548]	; (80104f0 <cavlRemove+0x24c>)
 80102ca:	21f6      	movs	r1, #246	; 0xf6
 80102cc:	4889      	ldr	r0, [pc, #548]	; (80104f4 <cavlRemove+0x250>)
 80102ce:	f002 f8ad 	bl	801242c <__assert_func>
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10a      	bne.n	80102f0 <cavlRemove+0x4c>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	683a      	ldr	r2, [r7, #0]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d005      	beq.n	80102f0 <cavlRemove+0x4c>
 80102e4:	4b84      	ldr	r3, [pc, #528]	; (80104f8 <cavlRemove+0x254>)
 80102e6:	4a82      	ldr	r2, [pc, #520]	; (80104f0 <cavlRemove+0x24c>)
 80102e8:	21f7      	movs	r1, #247	; 0xf7
 80102ea:	4882      	ldr	r0, [pc, #520]	; (80104f4 <cavlRemove+0x250>)
 80102ec:	f002 f89e 	bl	801242c <__assert_func>
 80102f0:	2300      	movs	r3, #0
 80102f2:	61fb      	str	r3, [r7, #28]
 80102f4:	2300      	movs	r3, #0
 80102f6:	76fb      	strb	r3, [r7, #27]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d073      	beq.n	80103e8 <cavlRemove+0x144>
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	689b      	ldr	r3, [r3, #8]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d06f      	beq.n	80103e8 <cavlRemove+0x144>
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	2100      	movs	r1, #0
 801030e:	4618      	mov	r0, r3
 8010310:	f7ff fd72 	bl	800fdf8 <cavlFindExtremum>
 8010314:	6178      	str	r0, [r7, #20]
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d007      	beq.n	801032c <cavlRemove+0x88>
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d103      	bne.n	801032c <cavlRemove+0x88>
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d105      	bne.n	8010338 <cavlRemove+0x94>
 801032c:	4b73      	ldr	r3, [pc, #460]	; (80104fc <cavlRemove+0x258>)
 801032e:	4a70      	ldr	r2, [pc, #448]	; (80104f0 <cavlRemove+0x24c>)
 8010330:	21ff      	movs	r1, #255	; 0xff
 8010332:	4870      	ldr	r0, [pc, #448]	; (80104f4 <cavlRemove+0x250>)
 8010334:	f002 f87a 	bl	801242c <__assert_func>
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	731a      	strb	r2, [r3, #12]
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	685a      	ldr	r2, [r3, #4]
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	605a      	str	r2, [r3, #4]
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	697a      	ldr	r2, [r7, #20]
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	683a      	ldr	r2, [r7, #0]
 8010358:	429a      	cmp	r2, r3
 801035a:	d025      	beq.n	80103a8 <cavlRemove+0x104>
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	61fb      	str	r3, [r7, #28]
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	697a      	ldr	r2, [r7, #20]
 8010368:	429a      	cmp	r2, r3
 801036a:	d006      	beq.n	801037a <cavlRemove+0xd6>
 801036c:	4b64      	ldr	r3, [pc, #400]	; (8010500 <cavlRemove+0x25c>)
 801036e:	4a60      	ldr	r2, [pc, #384]	; (80104f0 <cavlRemove+0x24c>)
 8010370:	f44f 7183 	mov.w	r1, #262	; 0x106
 8010374:	485f      	ldr	r0, [pc, #380]	; (80104f4 <cavlRemove+0x250>)
 8010376:	f002 f859 	bl	801242c <__assert_func>
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	689a      	ldr	r2, [r3, #8]
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	605a      	str	r2, [r3, #4]
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d003      	beq.n	8010392 <cavlRemove+0xee>
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	69fa      	ldr	r2, [r7, #28]
 8010390:	601a      	str	r2, [r3, #0]
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	689a      	ldr	r2, [r3, #8]
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	609a      	str	r2, [r3, #8]
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	601a      	str	r2, [r3, #0]
 80103a2:	2300      	movs	r3, #0
 80103a4:	76fb      	strb	r3, [r7, #27]
 80103a6:	e003      	b.n	80103b0 <cavlRemove+0x10c>
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	61fb      	str	r3, [r7, #28]
 80103ac:	2301      	movs	r3, #1
 80103ae:	76fb      	strb	r3, [r7, #27]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	601a      	str	r2, [r3, #0]
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00f      	beq.n	80103e0 <cavlRemove+0x13c>
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	6839      	ldr	r1, [r7, #0]
 80103cc:	4299      	cmp	r1, r3
 80103ce:	bf0c      	ite	eq
 80103d0:	2301      	moveq	r3, #1
 80103d2:	2300      	movne	r3, #0
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4413      	add	r3, r2
 80103da:	697a      	ldr	r2, [r7, #20]
 80103dc:	605a      	str	r2, [r3, #4]
 80103de:	e046      	b.n	801046e <cavlRemove+0x1ca>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	697a      	ldr	r2, [r7, #20]
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	e042      	b.n	801046e <cavlRemove+0x1ca>
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	61fb      	str	r3, [r7, #28]
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	bf14      	ite	ne
 80103f6:	2301      	movne	r3, #1
 80103f8:	2300      	moveq	r3, #0
 80103fa:	74fb      	strb	r3, [r7, #19]
 80103fc:	7cfb      	ldrb	r3, [r7, #19]
 80103fe:	683a      	ldr	r2, [r7, #0]
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4413      	add	r3, r2
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d006      	beq.n	8010418 <cavlRemove+0x174>
 801040a:	7cfb      	ldrb	r3, [r7, #19]
 801040c:	683a      	ldr	r2, [r7, #0]
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	4413      	add	r3, r2
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	69fa      	ldr	r2, [r7, #28]
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d020      	beq.n	8010460 <cavlRemove+0x1bc>
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	683a      	ldr	r2, [r7, #0]
 8010424:	429a      	cmp	r2, r3
 8010426:	bf0c      	ite	eq
 8010428:	2301      	moveq	r3, #1
 801042a:	2300      	movne	r3, #0
 801042c:	76fb      	strb	r3, [r7, #27]
 801042e:	7cfb      	ldrb	r3, [r7, #19]
 8010430:	7ef8      	ldrb	r0, [r7, #27]
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	4413      	add	r3, r2
 8010438:	685a      	ldr	r2, [r3, #4]
 801043a:	69f9      	ldr	r1, [r7, #28]
 801043c:	0083      	lsls	r3, r0, #2
 801043e:	440b      	add	r3, r1
 8010440:	605a      	str	r2, [r3, #4]
 8010442:	7efb      	ldrb	r3, [r7, #27]
 8010444:	69fa      	ldr	r2, [r7, #28]
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00e      	beq.n	801046e <cavlRemove+0x1ca>
 8010450:	7efb      	ldrb	r3, [r7, #27]
 8010452:	69fa      	ldr	r2, [r7, #28]
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	4413      	add	r3, r2
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	69fa      	ldr	r2, [r7, #28]
 801045c:	601a      	str	r2, [r3, #0]
 801045e:	e006      	b.n	801046e <cavlRemove+0x1ca>
 8010460:	7cfb      	ldrb	r3, [r7, #19]
 8010462:	683a      	ldr	r2, [r7, #0]
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	4413      	add	r3, r2
 8010468:	685a      	ldr	r2, [r3, #4]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	601a      	str	r2, [r3, #0]
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d036      	beq.n	80104e2 <cavlRemove+0x23e>
 8010474:	2300      	movs	r3, #0
 8010476:	60fb      	str	r3, [r7, #12]
 8010478:	7efb      	ldrb	r3, [r7, #27]
 801047a:	2b00      	cmp	r3, #0
 801047c:	bf14      	ite	ne
 801047e:	2301      	movne	r3, #1
 8010480:	2300      	moveq	r3, #0
 8010482:	b2db      	uxtb	r3, r3
 8010484:	f083 0301 	eor.w	r3, r3, #1
 8010488:	b2db      	uxtb	r3, r3
 801048a:	f003 0301 	and.w	r3, r3, #1
 801048e:	b2db      	uxtb	r3, r3
 8010490:	4619      	mov	r1, r3
 8010492:	69f8      	ldr	r0, [r7, #28]
 8010494:	f7ff fd48 	bl	800ff28 <cavlPrivateAdjustBalance>
 8010498:	60f8      	str	r0, [r7, #12]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	61fb      	str	r3, [r7, #28]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d10b      	bne.n	80104c2 <cavlRemove+0x21e>
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d008      	beq.n	80104c2 <cavlRemove+0x21e>
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	bf0c      	ite	eq
 80104ba:	2301      	moveq	r3, #1
 80104bc:	2300      	movne	r3, #0
 80104be:	76fb      	strb	r3, [r7, #27]
 80104c0:	e7da      	b.n	8010478 <cavlRemove+0x1d4>
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10c      	bne.n	80104e2 <cavlRemove+0x23e>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d106      	bne.n	80104dc <cavlRemove+0x238>
 80104ce:	4b0d      	ldr	r3, [pc, #52]	; (8010504 <cavlRemove+0x260>)
 80104d0:	4a07      	ldr	r2, [pc, #28]	; (80104f0 <cavlRemove+0x24c>)
 80104d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80104d6:	4807      	ldr	r0, [pc, #28]	; (80104f4 <cavlRemove+0x250>)
 80104d8:	f001 ffa8 	bl	801242c <__assert_func>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	bf00      	nop
 80104e4:	3720      	adds	r7, #32
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	08016d80 	.word	0x08016d80
 80104f0:	08017ce4 	.word	0x08017ce4
 80104f4:	08016ca8 	.word	0x08016ca8
 80104f8:	08016d90 	.word	0x08016d90
 80104fc:	08016db8 	.word	0x08016db8
 8010500:	08016df0 	.word	0x08016df0
 8010504:	08016d50 	.word	0x08016d50

08010508 <avlTrivialFactory>:
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	4618      	mov	r0, r3
 8010514:	370c      	adds	r7, #12
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr
	...

08010520 <crcAddByte>:
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	4603      	mov	r3, r0
 8010528:	460a      	mov	r2, r1
 801052a:	80fb      	strh	r3, [r7, #6]
 801052c:	4613      	mov	r3, r2
 801052e:	717b      	strb	r3, [r7, #5]
 8010530:	88fb      	ldrh	r3, [r7, #6]
 8010532:	021b      	lsls	r3, r3, #8
 8010534:	b29a      	uxth	r2, r3
 8010536:	88fb      	ldrh	r3, [r7, #6]
 8010538:	0a1b      	lsrs	r3, r3, #8
 801053a:	b299      	uxth	r1, r3
 801053c:	797b      	ldrb	r3, [r7, #5]
 801053e:	b29b      	uxth	r3, r3
 8010540:	404b      	eors	r3, r1
 8010542:	b29b      	uxth	r3, r3
 8010544:	b2db      	uxtb	r3, r3
 8010546:	4905      	ldr	r1, [pc, #20]	; (801055c <crcAddByte+0x3c>)
 8010548:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801054c:	4053      	eors	r3, r2
 801054e:	b29b      	uxth	r3, r3
 8010550:	4618      	mov	r0, r3
 8010552:	370c      	adds	r7, #12
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr
 801055c:	08017934 	.word	0x08017934

08010560 <crcAdd>:
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af00      	add	r7, sp, #0
 8010566:	4603      	mov	r3, r0
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
 801056c:	81fb      	strh	r3, [r7, #14]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d108      	bne.n	8010586 <crcAdd+0x26>
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d005      	beq.n	8010586 <crcAdd+0x26>
 801057a:	4b12      	ldr	r3, [pc, #72]	; (80105c4 <crcAdd+0x64>)
 801057c:	4a12      	ldr	r2, [pc, #72]	; (80105c8 <crcAdd+0x68>)
 801057e:	2185      	movs	r1, #133	; 0x85
 8010580:	4812      	ldr	r0, [pc, #72]	; (80105cc <crcAdd+0x6c>)
 8010582:	f001 ff53 	bl	801242c <__assert_func>
 8010586:	89fb      	ldrh	r3, [r7, #14]
 8010588:	83fb      	strh	r3, [r7, #30]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	61bb      	str	r3, [r7, #24]
 801058e:	2300      	movs	r3, #0
 8010590:	617b      	str	r3, [r7, #20]
 8010592:	e00e      	b.n	80105b2 <crcAdd+0x52>
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	781a      	ldrb	r2, [r3, #0]
 8010598:	8bfb      	ldrh	r3, [r7, #30]
 801059a:	4611      	mov	r1, r2
 801059c:	4618      	mov	r0, r3
 801059e:	f7ff ffbf 	bl	8010520 <crcAddByte>
 80105a2:	4603      	mov	r3, r0
 80105a4:	83fb      	strh	r3, [r7, #30]
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	3301      	adds	r3, #1
 80105aa:	61bb      	str	r3, [r7, #24]
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	3301      	adds	r3, #1
 80105b0:	617b      	str	r3, [r7, #20]
 80105b2:	697a      	ldr	r2, [r7, #20]
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d3ec      	bcc.n	8010594 <crcAdd+0x34>
 80105ba:	8bfb      	ldrh	r3, [r7, #30]
 80105bc:	4618      	mov	r0, r3
 80105be:	3720      	adds	r7, #32
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	08016e00 	.word	0x08016e00
 80105c8:	08017bb0 	.word	0x08017bb0
 80105cc:	08016e28 	.word	0x08016e28

080105d0 <txMakeMessageSessionSpecifier>:
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	460a      	mov	r2, r1
 80105da:	80fb      	strh	r3, [r7, #6]
 80105dc:	4613      	mov	r3, r2
 80105de:	717b      	strb	r3, [r7, #5]
 80105e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	da05      	bge.n	80105f4 <txMakeMessageSessionSpecifier+0x24>
 80105e8:	4b0e      	ldr	r3, [pc, #56]	; (8010624 <txMakeMessageSessionSpecifier+0x54>)
 80105ea:	4a0f      	ldr	r2, [pc, #60]	; (8010628 <txMakeMessageSessionSpecifier+0x58>)
 80105ec:	21ac      	movs	r1, #172	; 0xac
 80105ee:	480f      	ldr	r0, [pc, #60]	; (801062c <txMakeMessageSessionSpecifier+0x5c>)
 80105f0:	f001 ff1c 	bl	801242c <__assert_func>
 80105f4:	88fb      	ldrh	r3, [r7, #6]
 80105f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105fa:	d305      	bcc.n	8010608 <txMakeMessageSessionSpecifier+0x38>
 80105fc:	4b0c      	ldr	r3, [pc, #48]	; (8010630 <txMakeMessageSessionSpecifier+0x60>)
 80105fe:	4a0a      	ldr	r2, [pc, #40]	; (8010628 <txMakeMessageSessionSpecifier+0x58>)
 8010600:	21ad      	movs	r1, #173	; 0xad
 8010602:	480a      	ldr	r0, [pc, #40]	; (801062c <txMakeMessageSessionSpecifier+0x5c>)
 8010604:	f001 ff12 	bl	801242c <__assert_func>
 8010608:	88fb      	ldrh	r3, [r7, #6]
 801060a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 801060e:	b29b      	uxth	r3, r3
 8010610:	60fb      	str	r3, [r7, #12]
 8010612:	797a      	ldrb	r2, [r7, #5]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	021b      	lsls	r3, r3, #8
 8010618:	4313      	orrs	r3, r2
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	08016e58 	.word	0x08016e58
 8010628:	08017bb8 	.word	0x08017bb8
 801062c:	08016e28 	.word	0x08016e28
 8010630:	08016e6c 	.word	0x08016e6c

08010634 <txMakeServiceSessionSpecifier>:
 8010634:	b590      	push	{r4, r7, lr}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	4604      	mov	r4, r0
 801063c:	4608      	mov	r0, r1
 801063e:	4611      	mov	r1, r2
 8010640:	461a      	mov	r2, r3
 8010642:	4623      	mov	r3, r4
 8010644:	80fb      	strh	r3, [r7, #6]
 8010646:	4603      	mov	r3, r0
 8010648:	717b      	strb	r3, [r7, #5]
 801064a:	460b      	mov	r3, r1
 801064c:	713b      	strb	r3, [r7, #4]
 801064e:	4613      	mov	r3, r2
 8010650:	70fb      	strb	r3, [r7, #3]
 8010652:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8010656:	2b00      	cmp	r3, #0
 8010658:	da05      	bge.n	8010666 <txMakeServiceSessionSpecifier+0x32>
 801065a:	4b17      	ldr	r3, [pc, #92]	; (80106b8 <txMakeServiceSessionSpecifier+0x84>)
 801065c:	4a17      	ldr	r2, [pc, #92]	; (80106bc <txMakeServiceSessionSpecifier+0x88>)
 801065e:	21b7      	movs	r1, #183	; 0xb7
 8010660:	4817      	ldr	r0, [pc, #92]	; (80106c0 <txMakeServiceSessionSpecifier+0x8c>)
 8010662:	f001 fee3 	bl	801242c <__assert_func>
 8010666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801066a:	2b00      	cmp	r3, #0
 801066c:	da05      	bge.n	801067a <txMakeServiceSessionSpecifier+0x46>
 801066e:	4b15      	ldr	r3, [pc, #84]	; (80106c4 <txMakeServiceSessionSpecifier+0x90>)
 8010670:	4a12      	ldr	r2, [pc, #72]	; (80106bc <txMakeServiceSessionSpecifier+0x88>)
 8010672:	21b8      	movs	r1, #184	; 0xb8
 8010674:	4812      	ldr	r0, [pc, #72]	; (80106c0 <txMakeServiceSessionSpecifier+0x8c>)
 8010676:	f001 fed9 	bl	801242c <__assert_func>
 801067a:	88fb      	ldrh	r3, [r7, #6]
 801067c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010680:	d305      	bcc.n	801068e <txMakeServiceSessionSpecifier+0x5a>
 8010682:	4b11      	ldr	r3, [pc, #68]	; (80106c8 <txMakeServiceSessionSpecifier+0x94>)
 8010684:	4a0d      	ldr	r2, [pc, #52]	; (80106bc <txMakeServiceSessionSpecifier+0x88>)
 8010686:	21b9      	movs	r1, #185	; 0xb9
 8010688:	480d      	ldr	r0, [pc, #52]	; (80106c0 <txMakeServiceSessionSpecifier+0x8c>)
 801068a:	f001 fecf 	bl	801242c <__assert_func>
 801068e:	793a      	ldrb	r2, [r7, #4]
 8010690:	78fb      	ldrb	r3, [r7, #3]
 8010692:	01db      	lsls	r3, r3, #7
 8010694:	431a      	orrs	r2, r3
 8010696:	88fb      	ldrh	r3, [r7, #6]
 8010698:	039b      	lsls	r3, r3, #14
 801069a:	4313      	orrs	r3, r2
 801069c:	797a      	ldrb	r2, [r7, #5]
 801069e:	2a00      	cmp	r2, #0
 80106a0:	d002      	beq.n	80106a8 <txMakeServiceSessionSpecifier+0x74>
 80106a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80106a6:	e000      	b.n	80106aa <txMakeServiceSessionSpecifier+0x76>
 80106a8:	2200      	movs	r2, #0
 80106aa:	4313      	orrs	r3, r2
 80106ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106b0:	4618      	mov	r0, r3
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd90      	pop	{r4, r7, pc}
 80106b8:	08016e58 	.word	0x08016e58
 80106bc:	08017bd8 	.word	0x08017bd8
 80106c0:	08016e28 	.word	0x08016e28
 80106c4:	08016e80 	.word	0x08016e80
 80106c8:	08016e94 	.word	0x08016e94

080106cc <adjustPresentationLayerMTU>:
 80106cc:	b480      	push	{r7}
 80106ce:	b085      	sub	sp, #20
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	2340      	movs	r3, #64	; 0x40
 80106d6:	60bb      	str	r3, [r7, #8]
 80106d8:	2300      	movs	r3, #0
 80106da:	60fb      	str	r3, [r7, #12]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2b07      	cmp	r3, #7
 80106e0:	d802      	bhi.n	80106e8 <adjustPresentationLayerMTU+0x1c>
 80106e2:	2308      	movs	r3, #8
 80106e4:	60fb      	str	r3, [r7, #12]
 80106e6:	e014      	b.n	8010712 <adjustPresentationLayerMTU+0x46>
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d808      	bhi.n	8010702 <adjustPresentationLayerMTU+0x36>
 80106f0:	4a0c      	ldr	r2, [pc, #48]	; (8010724 <adjustPresentationLayerMTU+0x58>)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4413      	add	r3, r2
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	461a      	mov	r2, r3
 80106fa:	4b0b      	ldr	r3, [pc, #44]	; (8010728 <adjustPresentationLayerMTU+0x5c>)
 80106fc:	5c9b      	ldrb	r3, [r3, r2]
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	e007      	b.n	8010712 <adjustPresentationLayerMTU+0x46>
 8010702:	4a08      	ldr	r2, [pc, #32]	; (8010724 <adjustPresentationLayerMTU+0x58>)
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	4413      	add	r3, r2
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	461a      	mov	r2, r3
 801070c:	4b06      	ldr	r3, [pc, #24]	; (8010728 <adjustPresentationLayerMTU+0x5c>)
 801070e:	5c9b      	ldrb	r3, [r3, r2]
 8010710:	60fb      	str	r3, [r7, #12]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	3b01      	subs	r3, #1
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	08017b44 	.word	0x08017b44
 8010728:	08017b34 	.word	0x08017b34

0801072c <txMakeCANID>:
 801072c:	b580      	push	{r7, lr}
 801072e:	b08a      	sub	sp, #40	; 0x28
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	607a      	str	r2, [r7, #4]
 8010738:	70fb      	strb	r3, [r7, #3]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d105      	bne.n	801074c <txMakeCANID+0x20>
 8010740:	4b60      	ldr	r3, [pc, #384]	; (80108c4 <txMakeCANID+0x198>)
 8010742:	4a61      	ldr	r2, [pc, #388]	; (80108c8 <txMakeCANID+0x19c>)
 8010744:	21d9      	movs	r1, #217	; 0xd9
 8010746:	4861      	ldr	r0, [pc, #388]	; (80108cc <txMakeCANID+0x1a0>)
 8010748:	f001 fe70 	bl	801242c <__assert_func>
 801074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074e:	2b00      	cmp	r3, #0
 8010750:	d105      	bne.n	801075e <txMakeCANID+0x32>
 8010752:	4b5f      	ldr	r3, [pc, #380]	; (80108d0 <txMakeCANID+0x1a4>)
 8010754:	4a5c      	ldr	r2, [pc, #368]	; (80108c8 <txMakeCANID+0x19c>)
 8010756:	21da      	movs	r1, #218	; 0xda
 8010758:	485c      	ldr	r0, [pc, #368]	; (80108cc <txMakeCANID+0x1a0>)
 801075a:	f001 fe67 	bl	801242c <__assert_func>
 801075e:	f06f 0301 	mvn.w	r3, #1
 8010762:	627b      	str	r3, [r7, #36]	; 0x24
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	785b      	ldrb	r3, [r3, #1]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d157      	bne.n	801081c <txMakeCANID+0xf0>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	791b      	ldrb	r3, [r3, #4]
 8010770:	2bff      	cmp	r3, #255	; 0xff
 8010772:	d153      	bne.n	801081c <txMakeCANID+0xf0>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	885b      	ldrh	r3, [r3, #2]
 8010778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801077c:	d24e      	bcs.n	801081c <txMakeCANID+0xf0>
 801077e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010782:	2b00      	cmp	r3, #0
 8010784:	db11      	blt.n	80107aa <txMakeCANID+0x7e>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	885b      	ldrh	r3, [r3, #2]
 801078a:	78fa      	ldrb	r2, [r7, #3]
 801078c:	4611      	mov	r1, r2
 801078e:	4618      	mov	r0, r3
 8010790:	f7ff ff1e 	bl	80105d0 <txMakeMessageSessionSpecifier>
 8010794:	4603      	mov	r3, r0
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	2b00      	cmp	r3, #0
 801079c:	da75      	bge.n	801088a <txMakeCANID+0x15e>
 801079e:	4b4d      	ldr	r3, [pc, #308]	; (80108d4 <txMakeCANID+0x1a8>)
 80107a0:	4a49      	ldr	r2, [pc, #292]	; (80108c8 <txMakeCANID+0x19c>)
 80107a2:	21e2      	movs	r1, #226	; 0xe2
 80107a4:	4849      	ldr	r0, [pc, #292]	; (80108cc <txMakeCANID+0x1a0>)
 80107a6:	f001 fe41 	bl	801242c <__assert_func>
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d830      	bhi.n	8010814 <txMakeCANID+0xe8>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d108      	bne.n	80107ca <txMakeCANID+0x9e>
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d005      	beq.n	80107ca <txMakeCANID+0x9e>
 80107be:	4b46      	ldr	r3, [pc, #280]	; (80108d8 <txMakeCANID+0x1ac>)
 80107c0:	4a41      	ldr	r2, [pc, #260]	; (80108c8 <txMakeCANID+0x19c>)
 80107c2:	21e6      	movs	r1, #230	; 0xe6
 80107c4:	4841      	ldr	r0, [pc, #260]	; (80108cc <txMakeCANID+0x1a0>)
 80107c6:	f001 fe31 	bl	801242c <__assert_func>
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	68b9      	ldr	r1, [r7, #8]
 80107ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80107d2:	f7ff fec5 	bl	8010560 <crcAdd>
 80107d6:	4603      	mov	r3, r0
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	885b      	ldrh	r3, [r3, #2]
 80107e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80107ea:	4611      	mov	r1, r2
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ff feef 	bl	80105d0 <txMakeMessageSessionSpecifier>
 80107f2:	4603      	mov	r3, r0
 80107f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80107f8:	61fb      	str	r3, [r7, #28]
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010800:	d305      	bcc.n	801080e <txMakeCANID+0xe2>
 8010802:	4b36      	ldr	r3, [pc, #216]	; (80108dc <txMakeCANID+0x1b0>)
 8010804:	4a30      	ldr	r2, [pc, #192]	; (80108c8 <txMakeCANID+0x19c>)
 8010806:	21e9      	movs	r1, #233	; 0xe9
 8010808:	4830      	ldr	r0, [pc, #192]	; (80108cc <txMakeCANID+0x1a0>)
 801080a:	f001 fe0f 	bl	801242c <__assert_func>
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	627b      	str	r3, [r7, #36]	; 0x24
 8010812:	e03a      	b.n	801088a <txMakeCANID+0x15e>
 8010814:	f06f 0301 	mvn.w	r3, #1
 8010818:	627b      	str	r3, [r7, #36]	; 0x24
 801081a:	e036      	b.n	801088a <txMakeCANID+0x15e>
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	785b      	ldrb	r3, [r3, #1]
 8010820:	2b02      	cmp	r3, #2
 8010822:	d003      	beq.n	801082c <txMakeCANID+0x100>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	785b      	ldrb	r3, [r3, #1]
 8010828:	2b01      	cmp	r3, #1
 801082a:	d12a      	bne.n	8010882 <txMakeCANID+0x156>
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	791b      	ldrb	r3, [r3, #4]
 8010830:	b25b      	sxtb	r3, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	db25      	blt.n	8010882 <txMakeCANID+0x156>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	885b      	ldrh	r3, [r3, #2]
 801083a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801083e:	d220      	bcs.n	8010882 <txMakeCANID+0x156>
 8010840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010844:	2b00      	cmp	r3, #0
 8010846:	db18      	blt.n	801087a <txMakeCANID+0x14e>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	8858      	ldrh	r0, [r3, #2]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	785b      	ldrb	r3, [r3, #1]
 8010850:	2b02      	cmp	r3, #2
 8010852:	bf0c      	ite	eq
 8010854:	2301      	moveq	r3, #1
 8010856:	2300      	movne	r3, #0
 8010858:	b2d9      	uxtb	r1, r3
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	791b      	ldrb	r3, [r3, #4]
 801085e:	78fa      	ldrb	r2, [r7, #3]
 8010860:	f7ff fee8 	bl	8010634 <txMakeServiceSessionSpecifier>
 8010864:	4603      	mov	r3, r0
 8010866:	627b      	str	r3, [r7, #36]	; 0x24
 8010868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086a:	2b00      	cmp	r3, #0
 801086c:	da0f      	bge.n	801088e <txMakeCANID+0x162>
 801086e:	4b19      	ldr	r3, [pc, #100]	; (80108d4 <txMakeCANID+0x1a8>)
 8010870:	4a15      	ldr	r2, [pc, #84]	; (80108c8 <txMakeCANID+0x19c>)
 8010872:	21fa      	movs	r1, #250	; 0xfa
 8010874:	4815      	ldr	r0, [pc, #84]	; (80108cc <txMakeCANID+0x1a0>)
 8010876:	f001 fdd9 	bl	801242c <__assert_func>
 801087a:	f06f 0301 	mvn.w	r3, #1
 801087e:	627b      	str	r3, [r7, #36]	; 0x24
 8010880:	e005      	b.n	801088e <txMakeCANID+0x162>
 8010882:	f06f 0301 	mvn.w	r3, #1
 8010886:	627b      	str	r3, [r7, #36]	; 0x24
 8010888:	e002      	b.n	8010890 <txMakeCANID+0x164>
 801088a:	bf00      	nop
 801088c:	e000      	b.n	8010890 <txMakeCANID+0x164>
 801088e:	bf00      	nop
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	2b00      	cmp	r3, #0
 8010894:	db10      	blt.n	80108b8 <txMakeCANID+0x18c>
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	61bb      	str	r3, [r7, #24]
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	2b07      	cmp	r3, #7
 80108a0:	d807      	bhi.n	80108b2 <txMakeCANID+0x186>
 80108a2:	69bb      	ldr	r3, [r7, #24]
 80108a4:	069a      	lsls	r2, r3, #26
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	4313      	orrs	r3, r2
 80108aa:	617b      	str	r3, [r7, #20]
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	627b      	str	r3, [r7, #36]	; 0x24
 80108b0:	e002      	b.n	80108b8 <txMakeCANID+0x18c>
 80108b2:	f06f 0301 	mvn.w	r3, #1
 80108b6:	627b      	str	r3, [r7, #36]	; 0x24
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	4618      	mov	r0, r3
 80108bc:	3728      	adds	r7, #40	; 0x28
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	08016ea8 	.word	0x08016ea8
 80108c8:	08017ba4 	.word	0x08017ba4
 80108cc:	08016e28 	.word	0x08016e28
 80108d0:	08016ebc 	.word	0x08016ebc
 80108d4:	08016ed8 	.word	0x08016ed8
 80108d8:	08016ee4 	.word	0x08016ee4
 80108dc:	08016f18 	.word	0x08016f18

080108e0 <txMakeTailByte>:
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	4604      	mov	r4, r0
 80108e8:	4608      	mov	r0, r1
 80108ea:	4611      	mov	r1, r2
 80108ec:	461a      	mov	r2, r3
 80108ee:	4623      	mov	r3, r4
 80108f0:	71fb      	strb	r3, [r7, #7]
 80108f2:	4603      	mov	r3, r0
 80108f4:	71bb      	strb	r3, [r7, #6]
 80108f6:	460b      	mov	r3, r1
 80108f8:	717b      	strb	r3, [r7, #5]
 80108fa:	4613      	mov	r3, r2
 80108fc:	713b      	strb	r3, [r7, #4]
 80108fe:	79fb      	ldrb	r3, [r7, #7]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d009      	beq.n	8010918 <txMakeTailByte+0x38>
 8010904:	797b      	ldrb	r3, [r7, #5]
 8010906:	2b01      	cmp	r3, #1
 8010908:	d006      	beq.n	8010918 <txMakeTailByte+0x38>
 801090a:	4b13      	ldr	r3, [pc, #76]	; (8010958 <txMakeTailByte+0x78>)
 801090c:	4a13      	ldr	r2, [pc, #76]	; (801095c <txMakeTailByte+0x7c>)
 801090e:	f240 111b 	movw	r1, #283	; 0x11b
 8010912:	4813      	ldr	r0, [pc, #76]	; (8010960 <txMakeTailByte+0x80>)
 8010914:	f001 fd8a 	bl	801242c <__assert_func>
 8010918:	79fb      	ldrb	r3, [r7, #7]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d001      	beq.n	8010922 <txMakeTailByte+0x42>
 801091e:	2280      	movs	r2, #128	; 0x80
 8010920:	e000      	b.n	8010924 <txMakeTailByte+0x44>
 8010922:	2200      	movs	r2, #0
 8010924:	79bb      	ldrb	r3, [r7, #6]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d001      	beq.n	801092e <txMakeTailByte+0x4e>
 801092a:	2340      	movs	r3, #64	; 0x40
 801092c:	e000      	b.n	8010930 <txMakeTailByte+0x50>
 801092e:	2300      	movs	r3, #0
 8010930:	4313      	orrs	r3, r2
 8010932:	b2db      	uxtb	r3, r3
 8010934:	797a      	ldrb	r2, [r7, #5]
 8010936:	2a00      	cmp	r2, #0
 8010938:	d001      	beq.n	801093e <txMakeTailByte+0x5e>
 801093a:	2220      	movs	r2, #32
 801093c:	e000      	b.n	8010940 <txMakeTailByte+0x60>
 801093e:	2200      	movs	r2, #0
 8010940:	4313      	orrs	r3, r2
 8010942:	b2da      	uxtb	r2, r3
 8010944:	793b      	ldrb	r3, [r7, #4]
 8010946:	f003 031f 	and.w	r3, r3, #31
 801094a:	b2db      	uxtb	r3, r3
 801094c:	4313      	orrs	r3, r2
 801094e:	b2db      	uxtb	r3, r3
 8010950:	4618      	mov	r0, r3
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	bd90      	pop	{r4, r7, pc}
 8010958:	08016f34 	.word	0x08016f34
 801095c:	08017c4c 	.word	0x08017c4c
 8010960:	08016e28 	.word	0x08016e28

08010964 <txRoundFramePayloadSizeUp>:
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b40      	cmp	r3, #64	; 0x40
 8010970:	d906      	bls.n	8010980 <txRoundFramePayloadSizeUp+0x1c>
 8010972:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <txRoundFramePayloadSizeUp+0x4c>)
 8010974:	4a0f      	ldr	r2, [pc, #60]	; (80109b4 <txRoundFramePayloadSizeUp+0x50>)
 8010976:	f44f 7192 	mov.w	r1, #292	; 0x124
 801097a:	480f      	ldr	r0, [pc, #60]	; (80109b8 <txRoundFramePayloadSizeUp+0x54>)
 801097c:	f001 fd56 	bl	801242c <__assert_func>
 8010980:	4a0e      	ldr	r2, [pc, #56]	; (80109bc <txRoundFramePayloadSizeUp+0x58>)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4413      	add	r3, r2
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	60fb      	str	r3, [r7, #12]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2b0f      	cmp	r3, #15
 801098e:	d906      	bls.n	801099e <txRoundFramePayloadSizeUp+0x3a>
 8010990:	4b0b      	ldr	r3, [pc, #44]	; (80109c0 <txRoundFramePayloadSizeUp+0x5c>)
 8010992:	4a08      	ldr	r2, [pc, #32]	; (80109b4 <txRoundFramePayloadSizeUp+0x50>)
 8010994:	f240 1127 	movw	r1, #295	; 0x127
 8010998:	4807      	ldr	r0, [pc, #28]	; (80109b8 <txRoundFramePayloadSizeUp+0x54>)
 801099a:	f001 fd47 	bl	801242c <__assert_func>
 801099e:	4a09      	ldr	r2, [pc, #36]	; (80109c4 <txRoundFramePayloadSizeUp+0x60>)
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	4413      	add	r3, r2
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	4618      	mov	r0, r3
 80109a8:	3710      	adds	r7, #16
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	08016f5c 	.word	0x08016f5c
 80109b4:	08017c1c 	.word	0x08017c1c
 80109b8:	08016e28 	.word	0x08016e28
 80109bc:	08017b44 	.word	0x08017b44
 80109c0:	08016fa4 	.word	0x08016fa4
 80109c4:	08017b34 	.word	0x08017b34

080109c8 <txAllocateQueueItem>:
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	e9c7 2300 	strd	r2, r3, [r7]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d106      	bne.n	80109ea <txAllocateQueueItem+0x22>
 80109dc:	4b1f      	ldr	r3, [pc, #124]	; (8010a5c <txAllocateQueueItem+0x94>)
 80109de:	4a20      	ldr	r2, [pc, #128]	; (8010a60 <txAllocateQueueItem+0x98>)
 80109e0:	f240 1131 	movw	r1, #305	; 0x131
 80109e4:	481f      	ldr	r0, [pc, #124]	; (8010a64 <txAllocateQueueItem+0x9c>)
 80109e6:	f001 fd21 	bl	801242c <__assert_func>
 80109ea:	6a3b      	ldr	r3, [r7, #32]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d106      	bne.n	80109fe <txAllocateQueueItem+0x36>
 80109f0:	4b1d      	ldr	r3, [pc, #116]	; (8010a68 <txAllocateQueueItem+0xa0>)
 80109f2:	4a1b      	ldr	r2, [pc, #108]	; (8010a60 <txAllocateQueueItem+0x98>)
 80109f4:	f44f 7199 	mov.w	r1, #306	; 0x132
 80109f8:	481a      	ldr	r0, [pc, #104]	; (8010a64 <txAllocateQueueItem+0x9c>)
 80109fa:	f001 fd17 	bl	801242c <__assert_func>
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	6a3a      	ldr	r2, [r7, #32]
 8010a04:	3230      	adds	r2, #48	; 0x30
 8010a06:	4611      	mov	r1, r2
 8010a08:	68f8      	ldr	r0, [r7, #12]
 8010a0a:	4798      	blx	r3
 8010a0c:	6178      	str	r0, [r7, #20]
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d01e      	beq.n	8010a52 <txAllocateQueueItem+0x8a>
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	2200      	movs	r2, #0
 8010a18:	601a      	str	r2, [r3, #0]
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	605a      	str	r2, [r3, #4]
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	2200      	movs	r2, #0
 8010a24:	609a      	str	r2, [r3, #8]
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	731a      	strb	r2, [r3, #12]
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	611a      	str	r2, [r3, #16]
 8010a32:	6979      	ldr	r1, [r7, #20]
 8010a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a38:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	6a3a      	ldr	r2, [r7, #32]
 8010a40:	625a      	str	r2, [r3, #36]	; 0x24
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	68ba      	ldr	r2, [r7, #8]
 8010a50:	621a      	str	r2, [r3, #32]
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	4618      	mov	r0, r3
 8010a56:	3718      	adds	r7, #24
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	08016fec 	.word	0x08016fec
 8010a60:	08017c38 	.word	0x08017c38
 8010a64:	08016e28 	.word	0x08016e28
 8010a68:	08017000 	.word	0x08017000

08010a6c <txAVLPredicate>:
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	60fb      	str	r3, [r7, #12]
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	60bb      	str	r3, [r7, #8]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <txAVLPredicate+0x1e>
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d106      	bne.n	8010a98 <txAVLPredicate+0x2c>
 8010a8a:	4b0a      	ldr	r3, [pc, #40]	; (8010ab4 <txAVLPredicate+0x48>)
 8010a8c:	4a0a      	ldr	r2, [pc, #40]	; (8010ab8 <txAVLPredicate+0x4c>)
 8010a8e:	f240 114d 	movw	r1, #333	; 0x14d
 8010a92:	480a      	ldr	r0, [pc, #40]	; (8010abc <txAVLPredicate+0x50>)
 8010a94:	f001 fcca 	bl	801242c <__assert_func>
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6a1a      	ldr	r2, [r3, #32]
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	6a1b      	ldr	r3, [r3, #32]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d301      	bcc.n	8010aa8 <txAVLPredicate+0x3c>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	e001      	b.n	8010aac <txAVLPredicate+0x40>
 8010aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8010aac:	4618      	mov	r0, r3
 8010aae:	3710      	adds	r7, #16
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	08017014 	.word	0x08017014
 8010ab8:	08017c0c 	.word	0x08017c0c
 8010abc:	08016e28 	.word	0x08016e28

08010ac0 <txPushSingleFrame>:
 8010ac0:	b590      	push	{r4, r7, lr}
 8010ac2:	b08d      	sub	sp, #52	; 0x34
 8010ac4:	af02      	add	r7, sp, #8
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	60b9      	str	r1, [r7, #8]
 8010aca:	e9c7 2300 	strd	r2, r3, [r7]
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d106      	bne.n	8010ae2 <txPushSingleFrame+0x22>
 8010ad4:	4b5c      	ldr	r3, [pc, #368]	; (8010c48 <txPushSingleFrame+0x188>)
 8010ad6:	4a5d      	ldr	r2, [pc, #372]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010ad8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8010adc:	485c      	ldr	r0, [pc, #368]	; (8010c50 <txPushSingleFrame+0x190>)
 8010ade:	f001 fca5 	bl	801242c <__assert_func>
 8010ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d109      	bne.n	8010afc <txPushSingleFrame+0x3c>
 8010ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d006      	beq.n	8010afc <txPushSingleFrame+0x3c>
 8010aee:	4b59      	ldr	r3, [pc, #356]	; (8010c54 <txPushSingleFrame+0x194>)
 8010af0:	4a56      	ldr	r2, [pc, #344]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010af2:	f240 115b 	movw	r1, #347	; 0x15b
 8010af6:	4856      	ldr	r0, [pc, #344]	; (8010c50 <txPushSingleFrame+0x190>)
 8010af8:	f001 fc98 	bl	801242c <__assert_func>
 8010afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010afe:	3301      	adds	r3, #1
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7ff ff2f 	bl	8010964 <txRoundFramePayloadSizeUp>
 8010b06:	6238      	str	r0, [r7, #32]
 8010b08:	6a3a      	ldr	r2, [r7, #32]
 8010b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d806      	bhi.n	8010b1e <txPushSingleFrame+0x5e>
 8010b10:	4b51      	ldr	r3, [pc, #324]	; (8010c58 <txPushSingleFrame+0x198>)
 8010b12:	4a4e      	ldr	r2, [pc, #312]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010b14:	f240 115d 	movw	r1, #349	; 0x15d
 8010b18:	484d      	ldr	r0, [pc, #308]	; (8010c50 <txPushSingleFrame+0x190>)
 8010b1a:	f001 fc87 	bl	801242c <__assert_func>
 8010b1e:	6a3a      	ldr	r2, [r7, #32]
 8010b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	3b01      	subs	r3, #1
 8010b26:	61fb      	str	r3, [r7, #28]
 8010b28:	69fa      	ldr	r2, [r7, #28]
 8010b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b2c:	4413      	add	r3, r2
 8010b2e:	3301      	adds	r3, #1
 8010b30:	6a3a      	ldr	r2, [r7, #32]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d006      	beq.n	8010b44 <txPushSingleFrame+0x84>
 8010b36:	4b49      	ldr	r3, [pc, #292]	; (8010c5c <txPushSingleFrame+0x19c>)
 8010b38:	4a44      	ldr	r2, [pc, #272]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010b3a:	f240 115f 	movw	r1, #351	; 0x15f
 8010b3e:	4844      	ldr	r0, [pc, #272]	; (8010c50 <txPushSingleFrame+0x190>)
 8010b40:	f001 fc74 	bl	801242c <__assert_func>
 8010b44:	2300      	movs	r3, #0
 8010b46:	627b      	str	r3, [r7, #36]	; 0x24
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	689a      	ldr	r2, [r3, #8]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d209      	bcs.n	8010b68 <txPushSingleFrame+0xa8>
 8010b54:	6a3b      	ldr	r3, [r7, #32]
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b5e:	68b8      	ldr	r0, [r7, #8]
 8010b60:	f7ff ff32 	bl	80109c8 <txAllocateQueueItem>
 8010b64:	4603      	mov	r3, r0
 8010b66:	e000      	b.n	8010b6a <txPushSingleFrame+0xaa>
 8010b68:	2300      	movs	r3, #0
 8010b6a:	61bb      	str	r3, [r7, #24]
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d054      	beq.n	8010c1c <txPushSingleFrame+0x15c>
 8010b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d010      	beq.n	8010b9a <txPushSingleFrame+0xda>
 8010b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d106      	bne.n	8010b8c <txPushSingleFrame+0xcc>
 8010b7e:	4b38      	ldr	r3, [pc, #224]	; (8010c60 <txPushSingleFrame+0x1a0>)
 8010b80:	4a32      	ldr	r2, [pc, #200]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010b82:	f240 1167 	movw	r1, #359	; 0x167
 8010b86:	4832      	ldr	r0, [pc, #200]	; (8010c50 <txPushSingleFrame+0x190>)
 8010b88:	f001 fc50 	bl	801242c <__assert_func>
 8010b8c:	69bb      	ldr	r3, [r7, #24]
 8010b8e:	3330      	adds	r3, #48	; 0x30
 8010b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b94:	4618      	mov	r0, r3
 8010b96:	f002 fdf2 	bl	801377e <memcpy>
 8010b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b9c:	3330      	adds	r3, #48	; 0x30
 8010b9e:	69ba      	ldr	r2, [r7, #24]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	69fa      	ldr	r2, [r7, #28]
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f002 fd03 	bl	80135b2 <memset>
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	1e5c      	subs	r4, r3, #1
 8010bb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	2101      	movs	r1, #1
 8010bb8:	2001      	movs	r0, #1
 8010bba:	f7ff fe91 	bl	80108e0 <txMakeTailByte>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	4423      	add	r3, r4
 8010bc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f103 000c 	add.w	r0, r3, #12
 8010bd0:	69b9      	ldr	r1, [r7, #24]
 8010bd2:	4b24      	ldr	r3, [pc, #144]	; (8010c64 <txPushSingleFrame+0x1a4>)
 8010bd4:	4a24      	ldr	r2, [pc, #144]	; (8010c68 <txPushSingleFrame+0x1a8>)
 8010bd6:	f7ff fae7 	bl	80101a8 <cavlSearch>
 8010bda:	6178      	str	r0, [r7, #20]
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	697a      	ldr	r2, [r7, #20]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d006      	beq.n	8010bf2 <txPushSingleFrame+0x132>
 8010be4:	4b21      	ldr	r3, [pc, #132]	; (8010c6c <txPushSingleFrame+0x1ac>)
 8010be6:	4a19      	ldr	r2, [pc, #100]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010be8:	f240 1173 	movw	r1, #371	; 0x173
 8010bec:	4818      	ldr	r0, [pc, #96]	; (8010c50 <txPushSingleFrame+0x190>)
 8010bee:	f001 fc1d 	bl	801242c <__assert_func>
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	1c5a      	adds	r2, r3, #1
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	609a      	str	r2, [r3, #8]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	689a      	ldr	r2, [r3, #8]
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d906      	bls.n	8010c16 <txPushSingleFrame+0x156>
 8010c08:	4b19      	ldr	r3, [pc, #100]	; (8010c70 <txPushSingleFrame+0x1b0>)
 8010c0a:	4a10      	ldr	r2, [pc, #64]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010c0c:	f240 1175 	movw	r1, #373	; 0x175
 8010c10:	480f      	ldr	r0, [pc, #60]	; (8010c50 <txPushSingleFrame+0x190>)
 8010c12:	f001 fc0b 	bl	801242c <__assert_func>
 8010c16:	2301      	movs	r3, #1
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
 8010c1a:	e002      	b.n	8010c22 <txPushSingleFrame+0x162>
 8010c1c:	f06f 0302 	mvn.w	r3, #2
 8010c20:	627b      	str	r3, [r7, #36]	; 0x24
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	db09      	blt.n	8010c3c <txPushSingleFrame+0x17c>
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d006      	beq.n	8010c3c <txPushSingleFrame+0x17c>
 8010c2e:	4b11      	ldr	r3, [pc, #68]	; (8010c74 <txPushSingleFrame+0x1b4>)
 8010c30:	4a06      	ldr	r2, [pc, #24]	; (8010c4c <txPushSingleFrame+0x18c>)
 8010c32:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8010c36:	4806      	ldr	r0, [pc, #24]	; (8010c50 <txPushSingleFrame+0x190>)
 8010c38:	f001 fbf8 	bl	801242c <__assert_func>
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	4618      	mov	r0, r3
 8010c40:	372c      	adds	r7, #44	; 0x2c
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd90      	pop	{r4, r7, pc}
 8010c46:	bf00      	nop
 8010c48:	08016fec 	.word	0x08016fec
 8010c4c:	08017bf8 	.word	0x08017bf8
 8010c50:	08016e28 	.word	0x08016e28
 8010c54:	08017048 	.word	0x08017048
 8010c58:	08017078 	.word	0x08017078
 8010c5c:	0801709c 	.word	0x0801709c
 8010c60:	080170d8 	.word	0x080170d8
 8010c64:	08010509 	.word	0x08010509
 8010c68:	08010a6d 	.word	0x08010a6d
 8010c6c:	080170f0 	.word	0x080170f0
 8010c70:	08017108 	.word	0x08017108
 8010c74:	08017124 	.word	0x08017124

08010c78 <txGenerateMultiFrameChain>:
 8010c78:	b590      	push	{r4, r7, lr}
 8010c7a:	b093      	sub	sp, #76	; 0x4c
 8010c7c:	af02      	add	r7, sp, #8
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <txGenerateMultiFrameChain+0x20>
 8010c8a:	4b93      	ldr	r3, [pc, #588]	; (8010ed8 <txGenerateMultiFrameChain+0x260>)
 8010c8c:	4a93      	ldr	r2, [pc, #588]	; (8010edc <txGenerateMultiFrameChain+0x264>)
 8010c8e:	f240 1189 	movw	r1, #393	; 0x189
 8010c92:	4893      	ldr	r0, [pc, #588]	; (8010ee0 <txGenerateMultiFrameChain+0x268>)
 8010c94:	f001 fbca 	bl	801242c <__assert_func>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d106      	bne.n	8010cac <txGenerateMultiFrameChain+0x34>
 8010c9e:	4b91      	ldr	r3, [pc, #580]	; (8010ee4 <txGenerateMultiFrameChain+0x26c>)
 8010ca0:	4a8e      	ldr	r2, [pc, #568]	; (8010edc <txGenerateMultiFrameChain+0x264>)
 8010ca2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8010ca6:	488e      	ldr	r0, [pc, #568]	; (8010ee0 <txGenerateMultiFrameChain+0x268>)
 8010ca8:	f001 fbc0 	bl	801242c <__assert_func>
 8010cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d806      	bhi.n	8010cc2 <txGenerateMultiFrameChain+0x4a>
 8010cb4:	4b8c      	ldr	r3, [pc, #560]	; (8010ee8 <txGenerateMultiFrameChain+0x270>)
 8010cb6:	4a89      	ldr	r2, [pc, #548]	; (8010edc <txGenerateMultiFrameChain+0x264>)
 8010cb8:	f240 118b 	movw	r1, #395	; 0x18b
 8010cbc:	4888      	ldr	r0, [pc, #544]	; (8010ee0 <txGenerateMultiFrameChain+0x268>)
 8010cbe:	f001 fbb5 	bl	801242c <__assert_func>
 8010cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d106      	bne.n	8010cd6 <txGenerateMultiFrameChain+0x5e>
 8010cc8:	4b88      	ldr	r3, [pc, #544]	; (8010eec <txGenerateMultiFrameChain+0x274>)
 8010cca:	4a84      	ldr	r2, [pc, #528]	; (8010edc <txGenerateMultiFrameChain+0x264>)
 8010ccc:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8010cd0:	4883      	ldr	r0, [pc, #524]	; (8010ee0 <txGenerateMultiFrameChain+0x268>)
 8010cd2:	f001 fbab 	bl	801242c <__assert_func>
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	613b      	str	r3, [r7, #16]
 8010cda:	2300      	movs	r3, #0
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	61bb      	str	r3, [r7, #24]
 8010ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ce4:	3302      	adds	r3, #2
 8010ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ce8:	2300      	movs	r3, #0
 8010cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010cee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010cf0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010cf4:	f7ff fc34 	bl	8010560 <crcAdd>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d04:	637b      	str	r3, [r7, #52]	; 0x34
 8010d06:	e0d4      	b.n	8010eb2 <txGenerateMultiFrameChain+0x23a>
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	61bb      	str	r3, [r7, #24]
 8010d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d908      	bls.n	8010d2c <txGenerateMultiFrameChain+0xb4>
 8010d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	3301      	adds	r3, #1
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7ff fe1e 	bl	8010964 <txRoundFramePayloadSizeUp>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	e001      	b.n	8010d30 <txGenerateMultiFrameChain+0xb8>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	627b      	str	r3, [r7, #36]	; 0x24
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010d3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d3c:	68b8      	ldr	r0, [r7, #8]
 8010d3e:	f7ff fe43 	bl	80109c8 <txAllocateQueueItem>
 8010d42:	6238      	str	r0, [r7, #32]
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d102      	bne.n	8010d50 <txGenerateMultiFrameChain+0xd8>
 8010d4a:	6a3b      	ldr	r3, [r7, #32]
 8010d4c:	613b      	str	r3, [r7, #16]
 8010d4e:	e002      	b.n	8010d56 <txGenerateMultiFrameChain+0xde>
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	6a3a      	ldr	r2, [r7, #32]
 8010d54:	611a      	str	r2, [r3, #16]
 8010d56:	6a3b      	ldr	r3, [r7, #32]
 8010d58:	617b      	str	r3, [r7, #20]
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 80ae 	beq.w	8010ebe <txGenerateMultiFrameChain+0x246>
 8010d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d64:	3b01      	subs	r3, #1
 8010d66:	61fb      	str	r3, [r7, #28]
 8010d68:	2300      	movs	r3, #0
 8010d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8010d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d21c      	bcs.n	8010dae <txGenerateMultiFrameChain+0x136>
 8010d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d7e:	69fb      	ldr	r3, [r7, #28]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d901      	bls.n	8010d88 <txGenerateMultiFrameChain+0x110>
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	3330      	adds	r3, #48	; 0x30
 8010d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d90:	4618      	mov	r0, r3
 8010d92:	f002 fcf4 	bl	801377e <memcpy>
 8010d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9a:	4413      	add	r3, r2
 8010d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8010d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da2:	4413      	add	r3, r2
 8010da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010daa:	4413      	add	r3, r2
 8010dac:	637b      	str	r3, [r7, #52]	; 0x34
 8010dae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d343      	bcc.n	8010e3e <txGenerateMultiFrameChain+0x1c6>
 8010db6:	e00f      	b.n	8010dd8 <txGenerateMultiFrameChain+0x160>
 8010db8:	697a      	ldr	r2, [r7, #20]
 8010dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dbc:	4413      	add	r3, r2
 8010dbe:	3330      	adds	r3, #48	; 0x30
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	701a      	strb	r2, [r3, #0]
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8010dca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dcc:	2100      	movs	r1, #0
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7ff fba6 	bl	8010520 <crcAddByte>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dda:	3302      	adds	r3, #2
 8010ddc:	69fa      	ldr	r2, [r7, #28]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d8ea      	bhi.n	8010db8 <txGenerateMultiFrameChain+0x140>
 8010de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d213      	bcs.n	8010e12 <txGenerateMultiFrameChain+0x19a>
 8010dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d10f      	bne.n	8010e12 <txGenerateMultiFrameChain+0x19a>
 8010df2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010df4:	0a1b      	lsrs	r3, r3, #8
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	b2d9      	uxtb	r1, r3
 8010dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfe:	4413      	add	r3, r2
 8010e00:	3330      	adds	r3, #48	; 0x30
 8010e02:	460a      	mov	r2, r1
 8010e04:	701a      	strb	r2, [r3, #0]
 8010e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e08:	3301      	adds	r3, #1
 8010e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8010e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0e:	3301      	adds	r3, #1
 8010e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d211      	bcs.n	8010e3e <txGenerateMultiFrameChain+0x1c6>
 8010e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d90d      	bls.n	8010e3e <txGenerateMultiFrameChain+0x1c6>
 8010e22:	697a      	ldr	r2, [r7, #20]
 8010e24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e26:	b2d9      	uxtb	r1, r3
 8010e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2a:	4413      	add	r3, r2
 8010e2c:	3330      	adds	r3, #48	; 0x30
 8010e2e:	460a      	mov	r2, r1
 8010e30:	701a      	strb	r2, [r3, #0]
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	3301      	adds	r3, #1
 8010e36:	633b      	str	r3, [r7, #48]	; 0x30
 8010e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e40:	1c5a      	adds	r2, r3, #1
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d006      	beq.n	8010e58 <txGenerateMultiFrameChain+0x1e0>
 8010e4a:	4b29      	ldr	r3, [pc, #164]	; (8010ef0 <txGenerateMultiFrameChain+0x278>)
 8010e4c:	4a23      	ldr	r2, [pc, #140]	; (8010edc <txGenerateMultiFrameChain+0x264>)
 8010e4e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010e52:	4823      	ldr	r0, [pc, #140]	; (8010ee0 <txGenerateMultiFrameChain+0x268>)
 8010e54:	f001 faea 	bl	801242c <__assert_func>
 8010e58:	693a      	ldr	r2, [r7, #16]
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	bf0c      	ite	eq
 8010e60:	2301      	moveq	r3, #1
 8010e62:	2300      	movne	r3, #0
 8010e64:	b2d8      	uxtb	r0, r3
 8010e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	bf2c      	ite	cs
 8010e6e:	2301      	movcs	r3, #1
 8010e70:	2300      	movcc	r3, #0
 8010e72:	b2d9      	uxtb	r1, r3
 8010e74:	697c      	ldr	r4, [r7, #20]
 8010e76:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8010e7a:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010e7e:	f7ff fd2f 	bl	80108e0 <txMakeTailByte>
 8010e82:	4603      	mov	r3, r0
 8010e84:	461a      	mov	r2, r3
 8010e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e88:	4423      	add	r3, r4
 8010e8a:	3330      	adds	r3, #48	; 0x30
 8010e8c:	701a      	strb	r2, [r3, #0]
 8010e8e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	bf14      	ite	ne
 8010e96:	2301      	movne	r3, #1
 8010e98:	2300      	moveq	r3, #0
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	f083 0301 	eor.w	r3, r3, #1
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010ea6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010eaa:	f003 0301 	and.w	r3, r3, #1
 8010eae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	f4ff af26 	bcc.w	8010d08 <txGenerateMultiFrameChain+0x90>
 8010ebc:	e000      	b.n	8010ec0 <txGenerateMultiFrameChain+0x248>
 8010ebe:	bf00      	nop
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	461c      	mov	r4, r3
 8010ec4:	f107 0310 	add.w	r3, r7, #16
 8010ec8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010ecc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	3744      	adds	r7, #68	; 0x44
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd90      	pop	{r4, r7, pc}
 8010ed8:	08016fec 	.word	0x08016fec
 8010edc:	08017cc8 	.word	0x08017cc8
 8010ee0:	08016e28 	.word	0x08016e28
 8010ee4:	0801713c 	.word	0x0801713c
 8010ee8:	08017158 	.word	0x08017158
 8010eec:	080170d8 	.word	0x080170d8
 8010ef0:	08017180 	.word	0x08017180

08010ef4 <txPushMultiFrame>:
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b094      	sub	sp, #80	; 0x50
 8010ef8:	af06      	add	r7, sp, #24
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d002      	beq.n	8010f0c <txPushMultiFrame+0x18>
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d106      	bne.n	8010f1a <txPushMultiFrame+0x26>
 8010f0c:	4b65      	ldr	r3, [pc, #404]	; (80110a4 <txPushMultiFrame+0x1b0>)
 8010f0e:	4a66      	ldr	r2, [pc, #408]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8010f10:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8010f14:	4865      	ldr	r0, [pc, #404]	; (80110ac <txPushMultiFrame+0x1b8>)
 8010f16:	f001 fa89 	bl	801242c <__assert_func>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d106      	bne.n	8010f2e <txPushMultiFrame+0x3a>
 8010f20:	4b63      	ldr	r3, [pc, #396]	; (80110b0 <txPushMultiFrame+0x1bc>)
 8010f22:	4a61      	ldr	r2, [pc, #388]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8010f24:	f240 11ed 	movw	r1, #493	; 0x1ed
 8010f28:	4860      	ldr	r0, [pc, #384]	; (80110ac <txPushMultiFrame+0x1b8>)
 8010f2a:	f001 fa7f 	bl	801242c <__assert_func>
 8010f2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d806      	bhi.n	8010f44 <txPushMultiFrame+0x50>
 8010f36:	4b5f      	ldr	r3, [pc, #380]	; (80110b4 <txPushMultiFrame+0x1c0>)
 8010f38:	4a5b      	ldr	r2, [pc, #364]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8010f3a:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8010f3e:	485b      	ldr	r0, [pc, #364]	; (80110ac <txPushMultiFrame+0x1b8>)
 8010f40:	f001 fa74 	bl	801242c <__assert_func>
 8010f44:	2300      	movs	r3, #0
 8010f46:	637b      	str	r3, [r7, #52]	; 0x34
 8010f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f4a:	3302      	adds	r3, #2
 8010f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	4413      	add	r3, r2
 8010f54:	1e5a      	subs	r2, r3, #1
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8010f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d806      	bhi.n	8010f72 <txPushMultiFrame+0x7e>
 8010f64:	4b54      	ldr	r3, [pc, #336]	; (80110b8 <txPushMultiFrame+0x1c4>)
 8010f66:	4a50      	ldr	r2, [pc, #320]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8010f68:	f240 11f3 	movw	r1, #499	; 0x1f3
 8010f6c:	484f      	ldr	r0, [pc, #316]	; (80110ac <txPushMultiFrame+0x1b8>)
 8010f6e:	f001 fa5d 	bl	801242c <__assert_func>
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	689a      	ldr	r2, [r3, #8]
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	441a      	add	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d87b      	bhi.n	801107a <txPushMultiFrame+0x186>
 8010f82:	f107 0010 	add.w	r0, r7, #16
 8010f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f88:	9305      	str	r3, [sp, #20]
 8010f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f8c:	9304      	str	r3, [sp, #16]
 8010f8e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010f92:	9303      	str	r3, [sp, #12]
 8010f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f96:	9302      	str	r3, [sp, #8]
 8010f98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	68b9      	ldr	r1, [r7, #8]
 8010fa4:	f7ff fe68 	bl	8010c78 <txGenerateMultiFrameChain>
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d051      	beq.n	8011052 <txPushMultiFrame+0x15e>
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f103 000c 	add.w	r0, r3, #12
 8010fb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010fba:	4b40      	ldr	r3, [pc, #256]	; (80110bc <txPushMultiFrame+0x1c8>)
 8010fbc:	4a40      	ldr	r2, [pc, #256]	; (80110c0 <txPushMultiFrame+0x1cc>)
 8010fbe:	f7ff f8f3 	bl	80101a8 <cavlSearch>
 8010fc2:	61f8      	str	r0, [r7, #28]
 8010fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc6:	69fa      	ldr	r2, [r7, #28]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d006      	beq.n	8010fda <txPushMultiFrame+0xe6>
 8010fcc:	4b3d      	ldr	r3, [pc, #244]	; (80110c4 <txPushMultiFrame+0x1d0>)
 8010fce:	4a36      	ldr	r2, [pc, #216]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8010fd0:	f240 2105 	movw	r1, #517	; 0x205
 8010fd4:	4835      	ldr	r0, [pc, #212]	; (80110ac <txPushMultiFrame+0x1b8>)
 8010fd6:	f001 fa29 	bl	801242c <__assert_func>
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d106      	bne.n	8010ff0 <txPushMultiFrame+0xfc>
 8010fe2:	4b39      	ldr	r3, [pc, #228]	; (80110c8 <txPushMultiFrame+0x1d4>)
 8010fe4:	4a30      	ldr	r2, [pc, #192]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8010fe6:	f240 2106 	movw	r1, #518	; 0x206
 8010fea:	4830      	ldr	r0, [pc, #192]	; (80110ac <txPushMultiFrame+0x1b8>)
 8010fec:	f001 fa1e 	bl	801242c <__assert_func>
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d1da      	bne.n	8010fb2 <txPushMultiFrame+0xbe>
 8010ffc:	69bb      	ldr	r3, [r7, #24]
 8010ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011000:	429a      	cmp	r2, r3
 8011002:	d006      	beq.n	8011012 <txPushMultiFrame+0x11e>
 8011004:	4b31      	ldr	r3, [pc, #196]	; (80110cc <txPushMultiFrame+0x1d8>)
 8011006:	4a28      	ldr	r2, [pc, #160]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8011008:	f240 2109 	movw	r1, #521	; 0x209
 801100c:	4827      	ldr	r0, [pc, #156]	; (80110ac <txPushMultiFrame+0x1b8>)
 801100e:	f001 fa0d 	bl	801242c <__assert_func>
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	689a      	ldr	r2, [r3, #8]
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	441a      	add	r2, r3
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	609a      	str	r2, [r3, #8]
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	689a      	ldr	r2, [r3, #8]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	429a      	cmp	r2, r3
 8011028:	d906      	bls.n	8011038 <txPushMultiFrame+0x144>
 801102a:	4b29      	ldr	r3, [pc, #164]	; (80110d0 <txPushMultiFrame+0x1dc>)
 801102c:	4a1e      	ldr	r2, [pc, #120]	; (80110a8 <txPushMultiFrame+0x1b4>)
 801102e:	f240 210b 	movw	r1, #523	; 0x20b
 8011032:	481e      	ldr	r0, [pc, #120]	; (80110ac <txPushMultiFrame+0x1b8>)
 8011034:	f001 f9fa 	bl	801242c <__assert_func>
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	2b00      	cmp	r3, #0
 801103c:	da06      	bge.n	801104c <txPushMultiFrame+0x158>
 801103e:	4b25      	ldr	r3, [pc, #148]	; (80110d4 <txPushMultiFrame+0x1e0>)
 8011040:	4a19      	ldr	r2, [pc, #100]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8011042:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8011046:	4819      	ldr	r0, [pc, #100]	; (80110ac <txPushMultiFrame+0x1b8>)
 8011048:	f001 f9f0 	bl	801242c <__assert_func>
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	637b      	str	r3, [r7, #52]	; 0x34
 8011050:	e016      	b.n	8011080 <txPushMultiFrame+0x18c>
 8011052:	f06f 0302 	mvn.w	r3, #2
 8011056:	637b      	str	r3, [r7, #52]	; 0x34
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801105c:	e009      	b.n	8011072 <txPushMultiFrame+0x17e>
 801105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011060:	691b      	ldr	r3, [r3, #16]
 8011062:	623b      	str	r3, [r7, #32]
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801106a:	68b8      	ldr	r0, [r7, #8]
 801106c:	4798      	blx	r3
 801106e:	6a3b      	ldr	r3, [r7, #32]
 8011070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1f2      	bne.n	801105e <txPushMultiFrame+0x16a>
 8011078:	e002      	b.n	8011080 <txPushMultiFrame+0x18c>
 801107a:	f06f 0302 	mvn.w	r3, #2
 801107e:	637b      	str	r3, [r7, #52]	; 0x34
 8011080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011082:	2b00      	cmp	r3, #0
 8011084:	db09      	blt.n	801109a <txPushMultiFrame+0x1a6>
 8011086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011088:	2b01      	cmp	r3, #1
 801108a:	dc06      	bgt.n	801109a <txPushMultiFrame+0x1a6>
 801108c:	4b12      	ldr	r3, [pc, #72]	; (80110d8 <txPushMultiFrame+0x1e4>)
 801108e:	4a06      	ldr	r2, [pc, #24]	; (80110a8 <txPushMultiFrame+0x1b4>)
 8011090:	f240 211f 	movw	r1, #543	; 0x21f
 8011094:	4805      	ldr	r0, [pc, #20]	; (80110ac <txPushMultiFrame+0x1b8>)
 8011096:	f001 f9c9 	bl	801242c <__assert_func>
 801109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109c:	4618      	mov	r0, r3
 801109e:	3738      	adds	r7, #56	; 0x38
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	080171bc 	.word	0x080171bc
 80110a8:	08017cb4 	.word	0x08017cb4
 80110ac:	08016e28 	.word	0x08016e28
 80110b0:	0801713c 	.word	0x0801713c
 80110b4:	08017158 	.word	0x08017158
 80110b8:	080171ec 	.word	0x080171ec
 80110bc:	08010509 	.word	0x08010509
 80110c0:	08010a6d 	.word	0x08010a6d
 80110c4:	080171fc 	.word	0x080171fc
 80110c8:	08017210 	.word	0x08017210
 80110cc:	0801722c 	.word	0x0801722c
 80110d0:	08017108 	.word	0x08017108
 80110d4:	08017244 	.word	0x08017244
 80110d8:	08017268 	.word	0x08017268

080110dc <rxTryParseFrame>:
 80110dc:	b580      	push	{r7, lr}
 80110de:	b088      	sub	sp, #32
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
 80110e8:	603b      	str	r3, [r7, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d106      	bne.n	80110fe <rxTryParseFrame+0x22>
 80110f0:	4b96      	ldr	r3, [pc, #600]	; (801134c <rxTryParseFrame+0x270>)
 80110f2:	4a97      	ldr	r2, [pc, #604]	; (8011350 <rxTryParseFrame+0x274>)
 80110f4:	f240 214e 	movw	r1, #590	; 0x24e
 80110f8:	4896      	ldr	r0, [pc, #600]	; (8011354 <rxTryParseFrame+0x278>)
 80110fa:	f001 f997 	bl	801242c <__assert_func>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011106:	d306      	bcc.n	8011116 <rxTryParseFrame+0x3a>
 8011108:	4b93      	ldr	r3, [pc, #588]	; (8011358 <rxTryParseFrame+0x27c>)
 801110a:	4a91      	ldr	r2, [pc, #580]	; (8011350 <rxTryParseFrame+0x274>)
 801110c:	f240 214f 	movw	r1, #591	; 0x24f
 8011110:	4890      	ldr	r0, [pc, #576]	; (8011354 <rxTryParseFrame+0x278>)
 8011112:	f001 f98b 	bl	801242c <__assert_func>
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d106      	bne.n	801112a <rxTryParseFrame+0x4e>
 801111c:	4b8f      	ldr	r3, [pc, #572]	; (801135c <rxTryParseFrame+0x280>)
 801111e:	4a8c      	ldr	r2, [pc, #560]	; (8011350 <rxTryParseFrame+0x274>)
 8011120:	f44f 7114 	mov.w	r1, #592	; 0x250
 8011124:	488b      	ldr	r0, [pc, #556]	; (8011354 <rxTryParseFrame+0x278>)
 8011126:	f001 f981 	bl	801242c <__assert_func>
 801112a:	2300      	movs	r3, #0
 801112c:	77fb      	strb	r3, [r7, #31]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	f000 8105 	beq.w	8011342 <rxTryParseFrame+0x266>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	689b      	ldr	r3, [r3, #8]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d106      	bne.n	801114e <rxTryParseFrame+0x72>
 8011140:	4b87      	ldr	r3, [pc, #540]	; (8011360 <rxTryParseFrame+0x284>)
 8011142:	4a83      	ldr	r2, [pc, #524]	; (8011350 <rxTryParseFrame+0x274>)
 8011144:	f44f 7115 	mov.w	r1, #596	; 0x254
 8011148:	4882      	ldr	r0, [pc, #520]	; (8011354 <rxTryParseFrame+0x278>)
 801114a:	f001 f96f 	bl	801242c <__assert_func>
 801114e:	6839      	ldr	r1, [r7, #0]
 8011150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011154:	e9c1 2300 	strd	r2, r3, [r1]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	61bb      	str	r3, [r7, #24]
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	0e9b      	lsrs	r3, r3, #26
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f003 0307 	and.w	r3, r3, #7
 8011168:	b2da      	uxtb	r2, r3
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	721a      	strb	r2, [r3, #8]
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	b2db      	uxtb	r3, r3
 8011172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011176:	b2da      	uxtb	r2, r3
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	731a      	strb	r2, [r3, #12]
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011182:	2b00      	cmp	r3, #0
 8011184:	d128      	bne.n	80111d8 <rxTryParseFrame+0xfc>
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	2200      	movs	r2, #0
 801118a:	725a      	strb	r2, [r3, #9]
 801118c:	69bb      	ldr	r3, [r7, #24]
 801118e:	0a1b      	lsrs	r3, r3, #8
 8011190:	b29b      	uxth	r3, r3
 8011192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011196:	b29a      	uxth	r2, r3
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	815a      	strh	r2, [r3, #10]
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d002      	beq.n	80111ac <rxTryParseFrame+0xd0>
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	22ff      	movs	r2, #255	; 0xff
 80111aa:	731a      	strb	r2, [r3, #12]
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	22ff      	movs	r2, #255	; 0xff
 80111b0:	735a      	strb	r2, [r3, #13]
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d106      	bne.n	80111ca <rxTryParseFrame+0xee>
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d101      	bne.n	80111ca <rxTryParseFrame+0xee>
 80111c6:	2301      	movs	r3, #1
 80111c8:	e000      	b.n	80111cc <rxTryParseFrame+0xf0>
 80111ca:	2300      	movs	r3, #0
 80111cc:	77fb      	strb	r3, [r7, #31]
 80111ce:	7ffb      	ldrb	r3, [r7, #31]
 80111d0:	f003 0301 	and.w	r3, r3, #1
 80111d4:	77fb      	strb	r3, [r7, #31]
 80111d6:	e02c      	b.n	8011232 <rxTryParseFrame+0x156>
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <rxTryParseFrame+0x10a>
 80111e2:	2202      	movs	r2, #2
 80111e4:	e000      	b.n	80111e8 <rxTryParseFrame+0x10c>
 80111e6:	2201      	movs	r2, #1
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	725a      	strb	r2, [r3, #9]
 80111ec:	69bb      	ldr	r3, [r7, #24]
 80111ee:	0b9b      	lsrs	r3, r3, #14
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	815a      	strh	r2, [r3, #10]
 80111fc:	69bb      	ldr	r3, [r7, #24]
 80111fe:	09db      	lsrs	r3, r3, #7
 8011200:	b2db      	uxtb	r3, r3
 8011202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011206:	b2da      	uxtb	r2, r3
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	735a      	strb	r2, [r3, #13]
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011212:	2b00      	cmp	r3, #0
 8011214:	d107      	bne.n	8011226 <rxTryParseFrame+0x14a>
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	7b1a      	ldrb	r2, [r3, #12]
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	7b5b      	ldrb	r3, [r3, #13]
 801121e:	429a      	cmp	r2, r3
 8011220:	d001      	beq.n	8011226 <rxTryParseFrame+0x14a>
 8011222:	2301      	movs	r3, #1
 8011224:	e000      	b.n	8011228 <rxTryParseFrame+0x14c>
 8011226:	2300      	movs	r3, #0
 8011228:	77fb      	strb	r3, [r7, #31]
 801122a:	7ffb      	ldrb	r3, [r7, #31]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	77fb      	strb	r3, [r7, #31]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	1e5a      	subs	r2, r3, #1
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	615a      	str	r2, [r3, #20]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	689a      	ldr	r2, [r3, #8]
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	619a      	str	r2, [r3, #24]
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	699a      	ldr	r2, [r3, #24]
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	695b      	ldr	r3, [r3, #20]
 801124c:	4413      	add	r3, r2
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	75fb      	strb	r3, [r7, #23]
 8011252:	7dfb      	ldrb	r3, [r7, #23]
 8011254:	f003 031f 	and.w	r3, r3, #31
 8011258:	b2da      	uxtb	r2, r3
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	739a      	strb	r2, [r3, #14]
 801125e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011262:	b2db      	uxtb	r3, r3
 8011264:	09db      	lsrs	r3, r3, #7
 8011266:	b2da      	uxtb	r2, r3
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	73da      	strb	r2, [r3, #15]
 801126c:	7dfb      	ldrb	r3, [r7, #23]
 801126e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011272:	2b00      	cmp	r3, #0
 8011274:	bf14      	ite	ne
 8011276:	2301      	movne	r3, #1
 8011278:	2300      	moveq	r3, #0
 801127a:	b2da      	uxtb	r2, r3
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	741a      	strb	r2, [r3, #16]
 8011280:	7dfb      	ldrb	r3, [r7, #23]
 8011282:	f003 0320 	and.w	r3, r3, #32
 8011286:	2b00      	cmp	r3, #0
 8011288:	bf14      	ite	ne
 801128a:	2301      	movne	r3, #1
 801128c:	2300      	moveq	r3, #0
 801128e:	b2da      	uxtb	r2, r3
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	745a      	strb	r2, [r3, #17]
 8011294:	7ffb      	ldrb	r3, [r7, #31]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00c      	beq.n	80112b4 <rxTryParseFrame+0x1d8>
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	7bdb      	ldrb	r3, [r3, #15]
 801129e:	f083 0301 	eor.w	r3, r3, #1
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d103      	bne.n	80112b0 <rxTryParseFrame+0x1d4>
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	7c5b      	ldrb	r3, [r3, #17]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d001      	beq.n	80112b4 <rxTryParseFrame+0x1d8>
 80112b0:	2301      	movs	r3, #1
 80112b2:	e000      	b.n	80112b6 <rxTryParseFrame+0x1da>
 80112b4:	2300      	movs	r3, #0
 80112b6:	77fb      	strb	r3, [r7, #31]
 80112b8:	7ffb      	ldrb	r3, [r7, #31]
 80112ba:	f003 0301 	and.w	r3, r3, #1
 80112be:	77fb      	strb	r3, [r7, #31]
 80112c0:	7ffb      	ldrb	r3, [r7, #31]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d00d      	beq.n	80112e2 <rxTryParseFrame+0x206>
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	7bdb      	ldrb	r3, [r3, #15]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d003      	beq.n	80112d6 <rxTryParseFrame+0x1fa>
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	7c1b      	ldrb	r3, [r3, #16]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d103      	bne.n	80112de <rxTryParseFrame+0x202>
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	7b1b      	ldrb	r3, [r3, #12]
 80112da:	2bff      	cmp	r3, #255	; 0xff
 80112dc:	d001      	beq.n	80112e2 <rxTryParseFrame+0x206>
 80112de:	2301      	movs	r3, #1
 80112e0:	e000      	b.n	80112e4 <rxTryParseFrame+0x208>
 80112e2:	2300      	movs	r3, #0
 80112e4:	77fb      	strb	r3, [r7, #31]
 80112e6:	7ffb      	ldrb	r3, [r7, #31]
 80112e8:	f003 0301 	and.w	r3, r3, #1
 80112ec:	77fb      	strb	r3, [r7, #31]
 80112ee:	7ffb      	ldrb	r3, [r7, #31]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d009      	beq.n	8011308 <rxTryParseFrame+0x22c>
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	695b      	ldr	r3, [r3, #20]
 80112f8:	2b06      	cmp	r3, #6
 80112fa:	d803      	bhi.n	8011304 <rxTryParseFrame+0x228>
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	7c1b      	ldrb	r3, [r3, #16]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d001      	beq.n	8011308 <rxTryParseFrame+0x22c>
 8011304:	2301      	movs	r3, #1
 8011306:	e000      	b.n	801130a <rxTryParseFrame+0x22e>
 8011308:	2300      	movs	r3, #0
 801130a:	77fb      	strb	r3, [r7, #31]
 801130c:	7ffb      	ldrb	r3, [r7, #31]
 801130e:	f003 0301 	and.w	r3, r3, #1
 8011312:	77fb      	strb	r3, [r7, #31]
 8011314:	7ffb      	ldrb	r3, [r7, #31]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00d      	beq.n	8011336 <rxTryParseFrame+0x25a>
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	695b      	ldr	r3, [r3, #20]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d107      	bne.n	8011332 <rxTryParseFrame+0x256>
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	7bdb      	ldrb	r3, [r3, #15]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d005      	beq.n	8011336 <rxTryParseFrame+0x25a>
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	7c1b      	ldrb	r3, [r3, #16]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <rxTryParseFrame+0x25a>
 8011332:	2301      	movs	r3, #1
 8011334:	e000      	b.n	8011338 <rxTryParseFrame+0x25c>
 8011336:	2300      	movs	r3, #0
 8011338:	77fb      	strb	r3, [r7, #31]
 801133a:	7ffb      	ldrb	r3, [r7, #31]
 801133c:	f003 0301 	and.w	r3, r3, #1
 8011340:	77fb      	strb	r3, [r7, #31]
 8011342:	7ffb      	ldrb	r3, [r7, #31]
 8011344:	4618      	mov	r0, r3
 8011346:	3720      	adds	r7, #32
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	08017280 	.word	0x08017280
 8011350:	08017d04 	.word	0x08017d04
 8011354:	08016e28 	.word	0x08016e28
 8011358:	08017298 	.word	0x08017298
 801135c:	080172c8 	.word	0x080172c8
 8011360:	080172dc 	.word	0x080172dc

08011364 <rxInitTransferMetadataFromFrame>:
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d106      	bne.n	8011382 <rxInitTransferMetadataFromFrame+0x1e>
 8011374:	4b19      	ldr	r3, [pc, #100]	; (80113dc <rxInitTransferMetadataFromFrame+0x78>)
 8011376:	4a1a      	ldr	r2, [pc, #104]	; (80113e0 <rxInitTransferMetadataFromFrame+0x7c>)
 8011378:	f240 218f 	movw	r1, #655	; 0x28f
 801137c:	4819      	ldr	r0, [pc, #100]	; (80113e4 <rxInitTransferMetadataFromFrame+0x80>)
 801137e:	f001 f855 	bl	801242c <__assert_func>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	699b      	ldr	r3, [r3, #24]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d106      	bne.n	8011398 <rxInitTransferMetadataFromFrame+0x34>
 801138a:	4b17      	ldr	r3, [pc, #92]	; (80113e8 <rxInitTransferMetadataFromFrame+0x84>)
 801138c:	4a14      	ldr	r2, [pc, #80]	; (80113e0 <rxInitTransferMetadataFromFrame+0x7c>)
 801138e:	f44f 7124 	mov.w	r1, #656	; 0x290
 8011392:	4814      	ldr	r0, [pc, #80]	; (80113e4 <rxInitTransferMetadataFromFrame+0x80>)
 8011394:	f001 f84a 	bl	801242c <__assert_func>
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <rxInitTransferMetadataFromFrame+0x48>
 801139e:	4b13      	ldr	r3, [pc, #76]	; (80113ec <rxInitTransferMetadataFromFrame+0x88>)
 80113a0:	4a0f      	ldr	r2, [pc, #60]	; (80113e0 <rxInitTransferMetadataFromFrame+0x7c>)
 80113a2:	f240 2191 	movw	r1, #657	; 0x291
 80113a6:	480f      	ldr	r0, [pc, #60]	; (80113e4 <rxInitTransferMetadataFromFrame+0x80>)
 80113a8:	f001 f840 	bl	801242c <__assert_func>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	7a1a      	ldrb	r2, [r3, #8]
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	701a      	strb	r2, [r3, #0]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	7a5a      	ldrb	r2, [r3, #9]
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	705a      	strb	r2, [r3, #1]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	895a      	ldrh	r2, [r3, #10]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	805a      	strh	r2, [r3, #2]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	7b1a      	ldrb	r2, [r3, #12]
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	711a      	strb	r2, [r3, #4]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7b9a      	ldrb	r2, [r3, #14]
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	715a      	strb	r2, [r3, #5]
 80113d4:	bf00      	nop
 80113d6:	3708      	adds	r7, #8
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	08017280 	.word	0x08017280
 80113e0:	08017d98 	.word	0x08017d98
 80113e4:	08016e28 	.word	0x08016e28
 80113e8:	080172dc 	.word	0x080172dc
 80113ec:	080172fc 	.word	0x080172fc

080113f0 <rxComputeTransferIDDifference>:
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	4603      	mov	r3, r0
 80113f8:	460a      	mov	r2, r1
 80113fa:	71fb      	strb	r3, [r7, #7]
 80113fc:	4613      	mov	r3, r2
 80113fe:	71bb      	strb	r3, [r7, #6]
 8011400:	79fb      	ldrb	r3, [r7, #7]
 8011402:	2b1f      	cmp	r3, #31
 8011404:	d906      	bls.n	8011414 <rxComputeTransferIDDifference+0x24>
 8011406:	4b15      	ldr	r3, [pc, #84]	; (801145c <rxComputeTransferIDDifference+0x6c>)
 8011408:	4a15      	ldr	r2, [pc, #84]	; (8011460 <rxComputeTransferIDDifference+0x70>)
 801140a:	f44f 7127 	mov.w	r1, #668	; 0x29c
 801140e:	4815      	ldr	r0, [pc, #84]	; (8011464 <rxComputeTransferIDDifference+0x74>)
 8011410:	f001 f80c 	bl	801242c <__assert_func>
 8011414:	79bb      	ldrb	r3, [r7, #6]
 8011416:	2b1f      	cmp	r3, #31
 8011418:	d906      	bls.n	8011428 <rxComputeTransferIDDifference+0x38>
 801141a:	4b13      	ldr	r3, [pc, #76]	; (8011468 <rxComputeTransferIDDifference+0x78>)
 801141c:	4a10      	ldr	r2, [pc, #64]	; (8011460 <rxComputeTransferIDDifference+0x70>)
 801141e:	f240 219d 	movw	r1, #669	; 0x29d
 8011422:	4810      	ldr	r0, [pc, #64]	; (8011464 <rxComputeTransferIDDifference+0x74>)
 8011424:	f001 f802 	bl	801242c <__assert_func>
 8011428:	79fb      	ldrb	r3, [r7, #7]
 801142a:	b29a      	uxth	r2, r3
 801142c:	79bb      	ldrb	r3, [r7, #6]
 801142e:	b29b      	uxth	r3, r3
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	b29b      	uxth	r3, r3
 8011434:	81fb      	strh	r3, [r7, #14]
 8011436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801143a:	2b00      	cmp	r3, #0
 801143c:	da07      	bge.n	801144e <rxComputeTransferIDDifference+0x5e>
 801143e:	2320      	movs	r3, #32
 8011440:	737b      	strb	r3, [r7, #13]
 8011442:	7b7b      	ldrb	r3, [r7, #13]
 8011444:	b29a      	uxth	r2, r3
 8011446:	89fb      	ldrh	r3, [r7, #14]
 8011448:	4413      	add	r3, r2
 801144a:	b29b      	uxth	r3, r3
 801144c:	81fb      	strh	r3, [r7, #14]
 801144e:	89fb      	ldrh	r3, [r7, #14]
 8011450:	b2db      	uxtb	r3, r3
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	08017318 	.word	0x08017318
 8011460:	08017d34 	.word	0x08017d34
 8011464:	08016e28 	.word	0x08016e28
 8011468:	08017330 	.word	0x08017330

0801146c <rxSessionWritePayload>:
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
 8011478:	603b      	str	r3, [r7, #0]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d106      	bne.n	801148e <rxSessionWritePayload+0x22>
 8011480:	4b67      	ldr	r3, [pc, #412]	; (8011620 <rxSessionWritePayload+0x1b4>)
 8011482:	4a68      	ldr	r2, [pc, #416]	; (8011624 <rxSessionWritePayload+0x1b8>)
 8011484:	f240 21ad 	movw	r1, #685	; 0x2ad
 8011488:	4867      	ldr	r0, [pc, #412]	; (8011628 <rxSessionWritePayload+0x1bc>)
 801148a:	f000 ffcf 	bl	801242c <__assert_func>
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d106      	bne.n	80114a2 <rxSessionWritePayload+0x36>
 8011494:	4b65      	ldr	r3, [pc, #404]	; (801162c <rxSessionWritePayload+0x1c0>)
 8011496:	4a63      	ldr	r2, [pc, #396]	; (8011624 <rxSessionWritePayload+0x1b8>)
 8011498:	f240 21ae 	movw	r1, #686	; 0x2ae
 801149c:	4862      	ldr	r0, [pc, #392]	; (8011628 <rxSessionWritePayload+0x1bc>)
 801149e:	f000 ffc5 	bl	801242c <__assert_func>
 80114a2:	6a3b      	ldr	r3, [r7, #32]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d109      	bne.n	80114bc <rxSessionWritePayload+0x50>
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d006      	beq.n	80114bc <rxSessionWritePayload+0x50>
 80114ae:	4b60      	ldr	r3, [pc, #384]	; (8011630 <rxSessionWritePayload+0x1c4>)
 80114b0:	4a5c      	ldr	r2, [pc, #368]	; (8011624 <rxSessionWritePayload+0x1b8>)
 80114b2:	f240 21af 	movw	r1, #687	; 0x2af
 80114b6:	485c      	ldr	r0, [pc, #368]	; (8011628 <rxSessionWritePayload+0x1bc>)
 80114b8:	f000 ffb8 	bl	801242c <__assert_func>
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d206      	bcs.n	80114d4 <rxSessionWritePayload+0x68>
 80114c6:	4b5b      	ldr	r3, [pc, #364]	; (8011634 <rxSessionWritePayload+0x1c8>)
 80114c8:	4a56      	ldr	r2, [pc, #344]	; (8011624 <rxSessionWritePayload+0x1b8>)
 80114ca:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80114ce:	4856      	ldr	r0, [pc, #344]	; (8011628 <rxSessionWritePayload+0x1bc>)
 80114d0:	f000 ffac 	bl	801242c <__assert_func>
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	68da      	ldr	r2, [r3, #12]
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d906      	bls.n	80114ee <rxSessionWritePayload+0x82>
 80114e0:	4b55      	ldr	r3, [pc, #340]	; (8011638 <rxSessionWritePayload+0x1cc>)
 80114e2:	4a50      	ldr	r2, [pc, #320]	; (8011624 <rxSessionWritePayload+0x1b8>)
 80114e4:	f240 21b1 	movw	r1, #689	; 0x2b1
 80114e8:	484f      	ldr	r0, [pc, #316]	; (8011628 <rxSessionWritePayload+0x1bc>)
 80114ea:	f000 ff9f 	bl	801242c <__assert_func>
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	689a      	ldr	r2, [r3, #8]
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	441a      	add	r2, r3
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	609a      	str	r2, [r3, #8]
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d115      	bne.n	801152e <rxSessionWritePayload+0xc2>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d012      	beq.n	801152e <rxSessionWritePayload+0xc2>
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d006      	beq.n	801151e <rxSessionWritePayload+0xb2>
 8011510:	4b4a      	ldr	r3, [pc, #296]	; (801163c <rxSessionWritePayload+0x1d0>)
 8011512:	4a44      	ldr	r2, [pc, #272]	; (8011624 <rxSessionWritePayload+0x1b8>)
 8011514:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8011518:	4843      	ldr	r0, [pc, #268]	; (8011628 <rxSessionWritePayload+0x1bc>)
 801151a:	f000 ff87 	bl	801242c <__assert_func>
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	6879      	ldr	r1, [r7, #4]
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	4798      	blx	r3
 8011528:	4602      	mov	r2, r0
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	611a      	str	r2, [r3, #16]
 801152e:	2300      	movs	r3, #0
 8011530:	75fb      	strb	r3, [r7, #23]
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	691b      	ldr	r3, [r3, #16]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d04e      	beq.n	80115d8 <rxSessionWritePayload+0x16c>
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	613b      	str	r3, [r7, #16]
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	68da      	ldr	r2, [r3, #12]
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	4413      	add	r3, r2
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	429a      	cmp	r2, r3
 801154a:	d229      	bcs.n	80115a0 <rxSessionWritePayload+0x134>
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	429a      	cmp	r2, r3
 8011554:	d206      	bcs.n	8011564 <rxSessionWritePayload+0xf8>
 8011556:	4b37      	ldr	r3, [pc, #220]	; (8011634 <rxSessionWritePayload+0x1c8>)
 8011558:	4a32      	ldr	r2, [pc, #200]	; (8011624 <rxSessionWritePayload+0x1b8>)
 801155a:	f240 21c3 	movw	r1, #707	; 0x2c3
 801155e:	4832      	ldr	r0, [pc, #200]	; (8011628 <rxSessionWritePayload+0x1bc>)
 8011560:	f000 ff64 	bl	801242c <__assert_func>
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	1ad3      	subs	r3, r2, r3
 801156c:	613b      	str	r3, [r7, #16]
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	68da      	ldr	r2, [r3, #12]
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	4413      	add	r3, r2
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	429a      	cmp	r2, r3
 801157a:	d006      	beq.n	801158a <rxSessionWritePayload+0x11e>
 801157c:	4b30      	ldr	r3, [pc, #192]	; (8011640 <rxSessionWritePayload+0x1d4>)
 801157e:	4a29      	ldr	r2, [pc, #164]	; (8011624 <rxSessionWritePayload+0x1b8>)
 8011580:	f240 21c5 	movw	r1, #709	; 0x2c5
 8011584:	4828      	ldr	r0, [pc, #160]	; (8011628 <rxSessionWritePayload+0x1bc>)
 8011586:	f000 ff51 	bl	801242c <__assert_func>
 801158a:	693a      	ldr	r2, [r7, #16]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	d306      	bcc.n	80115a0 <rxSessionWritePayload+0x134>
 8011592:	4b2c      	ldr	r3, [pc, #176]	; (8011644 <rxSessionWritePayload+0x1d8>)
 8011594:	4a23      	ldr	r2, [pc, #140]	; (8011624 <rxSessionWritePayload+0x1b8>)
 8011596:	f240 21c6 	movw	r1, #710	; 0x2c6
 801159a:	4823      	ldr	r0, [pc, #140]	; (8011628 <rxSessionWritePayload+0x1bc>)
 801159c:	f000 ff46 	bl	801242c <__assert_func>
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	691a      	ldr	r2, [r3, #16]
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	4413      	add	r3, r2
 80115aa:	693a      	ldr	r2, [r7, #16]
 80115ac:	6a39      	ldr	r1, [r7, #32]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f002 f8e5 	bl	801377e <memcpy>
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	68da      	ldr	r2, [r3, #12]
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	441a      	add	r2, r3
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	60da      	str	r2, [r3, #12]
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d219      	bcs.n	80115fe <rxSessionWritePayload+0x192>
 80115ca:	4b1a      	ldr	r3, [pc, #104]	; (8011634 <rxSessionWritePayload+0x1c8>)
 80115cc:	4a15      	ldr	r2, [pc, #84]	; (8011624 <rxSessionWritePayload+0x1b8>)
 80115ce:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80115d2:	4815      	ldr	r0, [pc, #84]	; (8011628 <rxSessionWritePayload+0x1bc>)
 80115d4:	f000 ff2a 	bl	801242c <__assert_func>
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d006      	beq.n	80115ee <rxSessionWritePayload+0x182>
 80115e0:	4b16      	ldr	r3, [pc, #88]	; (801163c <rxSessionWritePayload+0x1d0>)
 80115e2:	4a10      	ldr	r2, [pc, #64]	; (8011624 <rxSessionWritePayload+0x1b8>)
 80115e4:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80115e8:	480f      	ldr	r0, [pc, #60]	; (8011628 <rxSessionWritePayload+0x1bc>)
 80115ea:	f000 ff1f 	bl	801242c <__assert_func>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d002      	beq.n	80115fa <rxSessionWritePayload+0x18e>
 80115f4:	f06f 0302 	mvn.w	r3, #2
 80115f8:	e000      	b.n	80115fc <rxSessionWritePayload+0x190>
 80115fa:	2300      	movs	r3, #0
 80115fc:	75fb      	strb	r3, [r7, #23]
 80115fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011602:	2b00      	cmp	r3, #0
 8011604:	dd06      	ble.n	8011614 <rxSessionWritePayload+0x1a8>
 8011606:	4b10      	ldr	r3, [pc, #64]	; (8011648 <rxSessionWritePayload+0x1dc>)
 8011608:	4a06      	ldr	r2, [pc, #24]	; (8011624 <rxSessionWritePayload+0x1b8>)
 801160a:	f240 21d7 	movw	r1, #727	; 0x2d7
 801160e:	4806      	ldr	r0, [pc, #24]	; (8011628 <rxSessionWritePayload+0x1bc>)
 8011610:	f000 ff0c 	bl	801242c <__assert_func>
 8011614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011618:	4618      	mov	r0, r3
 801161a:	3718      	adds	r7, #24
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	08016fec 	.word	0x08016fec
 8011624:	08017d80 	.word	0x08017d80
 8011628:	08016e28 	.word	0x08016e28
 801162c:	08017348 	.word	0x08017348
 8011630:	08016ee4 	.word	0x08016ee4
 8011634:	0801735c 	.word	0x0801735c
 8011638:	08017378 	.word	0x08017378
 801163c:	080173a8 	.word	0x080173a8
 8011640:	080173c0 	.word	0x080173c0
 8011644:	080173f0 	.word	0x080173f0
 8011648:	08017410 	.word	0x08017410

0801164c <rxSessionRestart>:
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d106      	bne.n	801166a <rxSessionRestart+0x1e>
 801165c:	4b1a      	ldr	r3, [pc, #104]	; (80116c8 <rxSessionRestart+0x7c>)
 801165e:	4a1b      	ldr	r2, [pc, #108]	; (80116cc <rxSessionRestart+0x80>)
 8011660:	f240 21dd 	movw	r1, #733	; 0x2dd
 8011664:	481a      	ldr	r0, [pc, #104]	; (80116d0 <rxSessionRestart+0x84>)
 8011666:	f000 fee1 	bl	801242c <__assert_func>
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d106      	bne.n	801167e <rxSessionRestart+0x32>
 8011670:	4b18      	ldr	r3, [pc, #96]	; (80116d4 <rxSessionRestart+0x88>)
 8011672:	4a16      	ldr	r2, [pc, #88]	; (80116cc <rxSessionRestart+0x80>)
 8011674:	f240 21de 	movw	r1, #734	; 0x2de
 8011678:	4815      	ldr	r0, [pc, #84]	; (80116d0 <rxSessionRestart+0x84>)
 801167a:	f000 fed7 	bl	801242c <__assert_func>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	683a      	ldr	r2, [r7, #0]
 8011684:	6912      	ldr	r2, [r2, #16]
 8011686:	4611      	mov	r1, r2
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	4798      	blx	r3
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	2200      	movs	r2, #0
 8011690:	609a      	str	r2, [r3, #8]
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	2200      	movs	r2, #0
 8011696:	60da      	str	r2, [r3, #12]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	2200      	movs	r2, #0
 801169c:	611a      	str	r2, [r3, #16]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116a4:	829a      	strh	r2, [r3, #20]
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	7d9b      	ldrb	r3, [r3, #22]
 80116aa:	3301      	adds	r3, #1
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	f003 031f 	and.w	r3, r3, #31
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	759a      	strb	r2, [r3, #22]
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	2201      	movs	r2, #1
 80116bc:	761a      	strb	r2, [r3, #24]
 80116be:	bf00      	nop
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	08016fec 	.word	0x08016fec
 80116cc:	08017d54 	.word	0x08017d54
 80116d0:	08016e28 	.word	0x08016e28
 80116d4:	08017348 	.word	0x08017348

080116d8 <rxSessionAcceptFrame>:
 80116d8:	b580      	push	{r7, lr}
 80116da:	b088      	sub	sp, #32
 80116dc:	af02      	add	r7, sp, #8
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
 80116e4:	603b      	str	r3, [r7, #0]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d106      	bne.n	80116fa <rxSessionAcceptFrame+0x22>
 80116ec:	4b81      	ldr	r3, [pc, #516]	; (80118f4 <rxSessionAcceptFrame+0x21c>)
 80116ee:	4a82      	ldr	r2, [pc, #520]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 80116f0:	f240 21ef 	movw	r1, #751	; 0x2ef
 80116f4:	4881      	ldr	r0, [pc, #516]	; (80118fc <rxSessionAcceptFrame+0x224>)
 80116f6:	f000 fe99 	bl	801242c <__assert_func>
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d106      	bne.n	801170e <rxSessionAcceptFrame+0x36>
 8011700:	4b7f      	ldr	r3, [pc, #508]	; (8011900 <rxSessionAcceptFrame+0x228>)
 8011702:	4a7d      	ldr	r2, [pc, #500]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 8011704:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8011708:	487c      	ldr	r0, [pc, #496]	; (80118fc <rxSessionAcceptFrame+0x224>)
 801170a:	f000 fe8f 	bl	801242c <__assert_func>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d106      	bne.n	8011722 <rxSessionAcceptFrame+0x4a>
 8011714:	4b7b      	ldr	r3, [pc, #492]	; (8011904 <rxSessionAcceptFrame+0x22c>)
 8011716:	4a78      	ldr	r2, [pc, #480]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 8011718:	f240 21f1 	movw	r1, #753	; 0x2f1
 801171c:	4877      	ldr	r0, [pc, #476]	; (80118fc <rxSessionAcceptFrame+0x224>)
 801171e:	f000 fe85 	bl	801242c <__assert_func>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	699b      	ldr	r3, [r3, #24]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d106      	bne.n	8011738 <rxSessionAcceptFrame+0x60>
 801172a:	4b77      	ldr	r3, [pc, #476]	; (8011908 <rxSessionAcceptFrame+0x230>)
 801172c:	4a72      	ldr	r2, [pc, #456]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 801172e:	f240 21f2 	movw	r1, #754	; 0x2f2
 8011732:	4872      	ldr	r0, [pc, #456]	; (80118fc <rxSessionAcceptFrame+0x224>)
 8011734:	f000 fe7a 	bl	801242c <__assert_func>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	7b9b      	ldrb	r3, [r3, #14]
 801173c:	2b1f      	cmp	r3, #31
 801173e:	d906      	bls.n	801174e <rxSessionAcceptFrame+0x76>
 8011740:	4b72      	ldr	r3, [pc, #456]	; (801190c <rxSessionAcceptFrame+0x234>)
 8011742:	4a6d      	ldr	r2, [pc, #436]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 8011744:	f240 21f3 	movw	r1, #755	; 0x2f3
 8011748:	486c      	ldr	r0, [pc, #432]	; (80118fc <rxSessionAcceptFrame+0x224>)
 801174a:	f000 fe6f 	bl	801242c <__assert_func>
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d106      	bne.n	8011762 <rxSessionAcceptFrame+0x8a>
 8011754:	4b6e      	ldr	r3, [pc, #440]	; (8011910 <rxSessionAcceptFrame+0x238>)
 8011756:	4a68      	ldr	r2, [pc, #416]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 8011758:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 801175c:	4867      	ldr	r0, [pc, #412]	; (80118fc <rxSessionAcceptFrame+0x224>)
 801175e:	f000 fe65 	bl	801242c <__assert_func>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	7bdb      	ldrb	r3, [r3, #15]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d005      	beq.n	8011776 <rxSessionAcceptFrame+0x9e>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011770:	68b9      	ldr	r1, [r7, #8]
 8011772:	e9c1 2300 	strd	r2, r3, [r1]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	7bdb      	ldrb	r3, [r3, #15]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d005      	beq.n	801178a <rxSessionAcceptFrame+0xb2>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7c1b      	ldrb	r3, [r3, #16]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d001      	beq.n	801178a <rxSessionAcceptFrame+0xb2>
 8011786:	2301      	movs	r3, #1
 8011788:	e000      	b.n	801178c <rxSessionAcceptFrame+0xb4>
 801178a:	2300      	movs	r3, #0
 801178c:	75bb      	strb	r3, [r7, #22]
 801178e:	7dbb      	ldrb	r3, [r7, #22]
 8011790:	f003 0301 	and.w	r3, r3, #1
 8011794:	75bb      	strb	r3, [r7, #22]
 8011796:	7dbb      	ldrb	r3, [r7, #22]
 8011798:	f083 0301 	eor.w	r3, r3, #1
 801179c:	b2db      	uxtb	r3, r3
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d00c      	beq.n	80117bc <rxSessionAcceptFrame+0xe4>
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	8a98      	ldrh	r0, [r3, #20]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6959      	ldr	r1, [r3, #20]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	699b      	ldr	r3, [r3, #24]
 80117ae:	461a      	mov	r2, r3
 80117b0:	f7fe fed6 	bl	8010560 <crcAdd>
 80117b4:	4603      	mov	r3, r0
 80117b6:	461a      	mov	r2, r3
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	829a      	strh	r2, [r3, #20]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	695a      	ldr	r2, [r3, #20]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	699b      	ldr	r3, [r3, #24]
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	4613      	mov	r3, r2
 80117c8:	683a      	ldr	r2, [r7, #0]
 80117ca:	68b9      	ldr	r1, [r7, #8]
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f7ff fe4d 	bl	801146c <rxSessionWritePayload>
 80117d2:	4603      	mov	r3, r0
 80117d4:	75fb      	strb	r3, [r7, #23]
 80117d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	da10      	bge.n	8011800 <rxSessionAcceptFrame+0x128>
 80117de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117e2:	f113 0f03 	cmn.w	r3, #3
 80117e6:	d006      	beq.n	80117f6 <rxSessionAcceptFrame+0x11e>
 80117e8:	4b4a      	ldr	r3, [pc, #296]	; (8011914 <rxSessionAcceptFrame+0x23c>)
 80117ea:	4a43      	ldr	r2, [pc, #268]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 80117ec:	f240 3106 	movw	r1, #774	; 0x306
 80117f0:	4842      	ldr	r0, [pc, #264]	; (80118fc <rxSessionAcceptFrame+0x224>)
 80117f2:	f000 fe1b 	bl	801242c <__assert_func>
 80117f6:	68b9      	ldr	r1, [r7, #8]
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f7ff ff27 	bl	801164c <rxSessionRestart>
 80117fe:	e072      	b.n	80118e6 <rxSessionAcceptFrame+0x20e>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	7c1b      	ldrb	r3, [r3, #16]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d05f      	beq.n	80118c8 <rxSessionAcceptFrame+0x1f0>
 8011808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d006      	beq.n	801181e <rxSessionAcceptFrame+0x146>
 8011810:	4b41      	ldr	r3, [pc, #260]	; (8011918 <rxSessionAcceptFrame+0x240>)
 8011812:	4a39      	ldr	r2, [pc, #228]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 8011814:	f240 310b 	movw	r1, #779	; 0x30b
 8011818:	4838      	ldr	r0, [pc, #224]	; (80118fc <rxSessionAcceptFrame+0x224>)
 801181a:	f000 fe07 	bl	801242c <__assert_func>
 801181e:	7dbb      	ldrb	r3, [r7, #22]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d103      	bne.n	801182c <rxSessionAcceptFrame+0x154>
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	8a9b      	ldrh	r3, [r3, #20]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d148      	bne.n	80118be <rxSessionAcceptFrame+0x1e6>
 801182c:	2301      	movs	r3, #1
 801182e:	75fb      	strb	r3, [r7, #23]
 8011830:	6a3b      	ldr	r3, [r7, #32]
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff fd95 	bl	8011364 <rxInitTransferMetadataFromFrame>
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011840:	6a39      	ldr	r1, [r7, #32]
 8011842:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	68da      	ldr	r2, [r3, #12]
 801184a:	6a3b      	ldr	r3, [r7, #32]
 801184c:	611a      	str	r2, [r3, #16]
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	691a      	ldr	r2, [r3, #16]
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	615a      	str	r2, [r3, #20]
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	689a      	ldr	r2, [r3, #8]
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	429a      	cmp	r2, r3
 8011860:	d206      	bcs.n	8011870 <rxSessionAcceptFrame+0x198>
 8011862:	4b2e      	ldr	r3, [pc, #184]	; (801191c <rxSessionAcceptFrame+0x244>)
 8011864:	4a24      	ldr	r2, [pc, #144]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 8011866:	f240 3115 	movw	r1, #789	; 0x315
 801186a:	4824      	ldr	r0, [pc, #144]	; (80118fc <rxSessionAcceptFrame+0x224>)
 801186c:	f000 fdde 	bl	801242c <__assert_func>
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	689a      	ldr	r2, [r3, #8]
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	1ad3      	subs	r3, r2, r3
 801187a:	613b      	str	r3, [r7, #16]
 801187c:	7dbb      	ldrb	r3, [r7, #22]
 801187e:	f083 0301 	eor.w	r3, r3, #1
 8011882:	b2db      	uxtb	r3, r3
 8011884:	2b00      	cmp	r3, #0
 8011886:	d017      	beq.n	80118b8 <rxSessionAcceptFrame+0x1e0>
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d814      	bhi.n	80118b8 <rxSessionAcceptFrame+0x1e0>
 801188e:	6a3b      	ldr	r3, [r7, #32]
 8011890:	691a      	ldr	r2, [r3, #16]
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	f1c3 0302 	rsb	r3, r3, #2
 8011898:	429a      	cmp	r2, r3
 801189a:	d206      	bcs.n	80118aa <rxSessionAcceptFrame+0x1d2>
 801189c:	4b20      	ldr	r3, [pc, #128]	; (8011920 <rxSessionAcceptFrame+0x248>)
 801189e:	4a16      	ldr	r2, [pc, #88]	; (80118f8 <rxSessionAcceptFrame+0x220>)
 80118a0:	f240 3119 	movw	r1, #793	; 0x319
 80118a4:	4815      	ldr	r0, [pc, #84]	; (80118fc <rxSessionAcceptFrame+0x224>)
 80118a6:	f000 fdc1 	bl	801242c <__assert_func>
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	691a      	ldr	r2, [r3, #16]
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	4413      	add	r3, r2
 80118b2:	1e9a      	subs	r2, r3, #2
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	611a      	str	r2, [r3, #16]
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	2200      	movs	r2, #0
 80118bc:	611a      	str	r2, [r3, #16]
 80118be:	68b9      	ldr	r1, [r7, #8]
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f7ff fec3 	bl	801164c <rxSessionRestart>
 80118c6:	e00e      	b.n	80118e6 <rxSessionAcceptFrame+0x20e>
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	7e1b      	ldrb	r3, [r3, #24]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	bf14      	ite	ne
 80118d0:	2301      	movne	r3, #1
 80118d2:	2300      	moveq	r3, #0
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	f083 0301 	eor.w	r3, r3, #1
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	f003 0301 	and.w	r3, r3, #1
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	761a      	strb	r2, [r3, #24]
 80118e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118ea:	4618      	mov	r0, r3
 80118ec:	3718      	adds	r7, #24
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	08016fec 	.word	0x08016fec
 80118f8:	08017d68 	.word	0x08017d68
 80118fc:	08016e28 	.word	0x08016e28
 8011900:	08017348 	.word	0x08017348
 8011904:	08017280 	.word	0x08017280
 8011908:	080172dc 	.word	0x080172dc
 801190c:	0801741c 	.word	0x0801741c
 8011910:	080172fc 	.word	0x080172fc
 8011914:	08017444 	.word	0x08017444
 8011918:	08017450 	.word	0x08017450
 801191c:	0801745c 	.word	0x0801745c
 8011920:	0801748c 	.word	0x0801748c

08011924 <rxSessionUpdate>:
 8011924:	b5b0      	push	{r4, r5, r7, lr}
 8011926:	b088      	sub	sp, #32
 8011928:	af02      	add	r7, sp, #8
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	70fb      	strb	r3, [r7, #3]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d106      	bne.n	8011946 <rxSessionUpdate+0x22>
 8011938:	4b6d      	ldr	r3, [pc, #436]	; (8011af0 <rxSessionUpdate+0x1cc>)
 801193a:	4a6e      	ldr	r2, [pc, #440]	; (8011af4 <rxSessionUpdate+0x1d0>)
 801193c:	f240 3137 	movw	r1, #823	; 0x337
 8011940:	486d      	ldr	r0, [pc, #436]	; (8011af8 <rxSessionUpdate+0x1d4>)
 8011942:	f000 fd73 	bl	801242c <__assert_func>
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d106      	bne.n	801195a <rxSessionUpdate+0x36>
 801194c:	4b6b      	ldr	r3, [pc, #428]	; (8011afc <rxSessionUpdate+0x1d8>)
 801194e:	4a69      	ldr	r2, [pc, #420]	; (8011af4 <rxSessionUpdate+0x1d0>)
 8011950:	f44f 714e 	mov.w	r1, #824	; 0x338
 8011954:	4868      	ldr	r0, [pc, #416]	; (8011af8 <rxSessionUpdate+0x1d4>)
 8011956:	f000 fd69 	bl	801242c <__assert_func>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d106      	bne.n	801196e <rxSessionUpdate+0x4a>
 8011960:	4b67      	ldr	r3, [pc, #412]	; (8011b00 <rxSessionUpdate+0x1dc>)
 8011962:	4a64      	ldr	r2, [pc, #400]	; (8011af4 <rxSessionUpdate+0x1d0>)
 8011964:	f240 3139 	movw	r1, #825	; 0x339
 8011968:	4863      	ldr	r0, [pc, #396]	; (8011af8 <rxSessionUpdate+0x1d4>)
 801196a:	f000 fd5f 	bl	801242c <__assert_func>
 801196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011970:	2b00      	cmp	r3, #0
 8011972:	d106      	bne.n	8011982 <rxSessionUpdate+0x5e>
 8011974:	4b63      	ldr	r3, [pc, #396]	; (8011b04 <rxSessionUpdate+0x1e0>)
 8011976:	4a5f      	ldr	r2, [pc, #380]	; (8011af4 <rxSessionUpdate+0x1d0>)
 8011978:	f240 313a 	movw	r1, #826	; 0x33a
 801197c:	485e      	ldr	r0, [pc, #376]	; (8011af8 <rxSessionUpdate+0x1d4>)
 801197e:	f000 fd55 	bl	801242c <__assert_func>
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	7d9b      	ldrb	r3, [r3, #22]
 8011986:	2b1f      	cmp	r3, #31
 8011988:	d906      	bls.n	8011998 <rxSessionUpdate+0x74>
 801198a:	4b5f      	ldr	r3, [pc, #380]	; (8011b08 <rxSessionUpdate+0x1e4>)
 801198c:	4a59      	ldr	r2, [pc, #356]	; (8011af4 <rxSessionUpdate+0x1d0>)
 801198e:	f240 313b 	movw	r1, #827	; 0x33b
 8011992:	4859      	ldr	r0, [pc, #356]	; (8011af8 <rxSessionUpdate+0x1d4>)
 8011994:	f000 fd4a 	bl	801242c <__assert_func>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	7b9b      	ldrb	r3, [r3, #14]
 801199c:	2b1f      	cmp	r3, #31
 801199e:	d906      	bls.n	80119ae <rxSessionUpdate+0x8a>
 80119a0:	4b5a      	ldr	r3, [pc, #360]	; (8011b0c <rxSessionUpdate+0x1e8>)
 80119a2:	4a54      	ldr	r2, [pc, #336]	; (8011af4 <rxSessionUpdate+0x1d0>)
 80119a4:	f44f 714f 	mov.w	r1, #828	; 0x33c
 80119a8:	4853      	ldr	r0, [pc, #332]	; (8011af8 <rxSessionUpdate+0x1d4>)
 80119aa:	f000 fd3f 	bl	801242c <__assert_func>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b4:	68b9      	ldr	r1, [r7, #8]
 80119b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119ba:	4290      	cmp	r0, r2
 80119bc:	eb71 0303 	sbcs.w	r3, r1, r3
 80119c0:	d20f      	bcs.n	80119e2 <rxSessionUpdate+0xbe>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ce:	1a84      	subs	r4, r0, r2
 80119d0:	eb61 0503 	sbc.w	r5, r1, r3
 80119d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80119d8:	42a2      	cmp	r2, r4
 80119da:	41ab      	sbcs	r3, r5
 80119dc:	d201      	bcs.n	80119e2 <rxSessionUpdate+0xbe>
 80119de:	2301      	movs	r3, #1
 80119e0:	e000      	b.n	80119e4 <rxSessionUpdate+0xc0>
 80119e2:	2300      	movs	r3, #0
 80119e4:	75bb      	strb	r3, [r7, #22]
 80119e6:	7dbb      	ldrb	r3, [r7, #22]
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	75bb      	strb	r3, [r7, #22]
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	7d9a      	ldrb	r2, [r3, #22]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	7b9b      	ldrb	r3, [r3, #14]
 80119f6:	4619      	mov	r1, r3
 80119f8:	4610      	mov	r0, r2
 80119fa:	f7ff fcf9 	bl	80113f0 <rxComputeTransferIDDifference>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	bf8c      	ite	hi
 8011a04:	2301      	movhi	r3, #1
 8011a06:	2300      	movls	r3, #0
 8011a08:	757b      	strb	r3, [r7, #21]
 8011a0a:	7dbb      	ldrb	r3, [r7, #22]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d10b      	bne.n	8011a28 <rxSessionUpdate+0x104>
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	7ddb      	ldrb	r3, [r3, #23]
 8011a14:	78fa      	ldrb	r2, [r7, #3]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d108      	bne.n	8011a2c <rxSessionUpdate+0x108>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	7bdb      	ldrb	r3, [r3, #15]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d004      	beq.n	8011a2c <rxSessionUpdate+0x108>
 8011a22:	7d7b      	ldrb	r3, [r7, #21]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d001      	beq.n	8011a2c <rxSessionUpdate+0x108>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e000      	b.n	8011a2e <rxSessionUpdate+0x10a>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	753b      	strb	r3, [r7, #20]
 8011a30:	7d3b      	ldrb	r3, [r7, #20]
 8011a32:	f003 0301 	and.w	r3, r3, #1
 8011a36:	753b      	strb	r3, [r7, #20]
 8011a38:	7d3b      	ldrb	r3, [r7, #20]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d013      	beq.n	8011a66 <rxSessionUpdate+0x142>
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	2200      	movs	r2, #0
 8011a42:	609a      	str	r2, [r3, #8]
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	2200      	movs	r2, #0
 8011a48:	60da      	str	r2, [r3, #12]
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a50:	829a      	strh	r2, [r3, #20]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	7b9a      	ldrb	r2, [r3, #14]
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	759a      	strb	r2, [r3, #22]
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	761a      	strb	r2, [r3, #24]
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	78fa      	ldrb	r2, [r7, #3]
 8011a64:	75da      	strb	r2, [r3, #23]
 8011a66:	2300      	movs	r3, #0
 8011a68:	75fb      	strb	r3, [r7, #23]
 8011a6a:	7d3b      	ldrb	r3, [r7, #20]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d00b      	beq.n	8011a88 <rxSessionUpdate+0x164>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	7bdb      	ldrb	r3, [r3, #15]
 8011a74:	f083 0301 	eor.w	r3, r3, #1
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d004      	beq.n	8011a88 <rxSessionUpdate+0x164>
 8011a7e:	68b9      	ldr	r1, [r7, #8]
 8011a80:	68f8      	ldr	r0, [r7, #12]
 8011a82:	f7ff fde3 	bl	801164c <rxSessionRestart>
 8011a86:	e02c      	b.n	8011ae2 <rxSessionUpdate+0x1be>
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	7ddb      	ldrb	r3, [r3, #23]
 8011a8c:	78fa      	ldrb	r2, [r7, #3]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	bf0c      	ite	eq
 8011a92:	2301      	moveq	r3, #1
 8011a94:	2300      	movne	r3, #0
 8011a96:	74fb      	strb	r3, [r7, #19]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	7c5a      	ldrb	r2, [r3, #17]
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	7e1b      	ldrb	r3, [r3, #24]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	bf0c      	ite	eq
 8011aa4:	2301      	moveq	r3, #1
 8011aa6:	2300      	movne	r3, #0
 8011aa8:	74bb      	strb	r3, [r7, #18]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	7b9a      	ldrb	r2, [r3, #14]
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	7d9b      	ldrb	r3, [r3, #22]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	bf0c      	ite	eq
 8011ab6:	2301      	moveq	r3, #1
 8011ab8:	2300      	movne	r3, #0
 8011aba:	747b      	strb	r3, [r7, #17]
 8011abc:	7cfb      	ldrb	r3, [r7, #19]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d00f      	beq.n	8011ae2 <rxSessionUpdate+0x1be>
 8011ac2:	7cbb      	ldrb	r3, [r7, #18]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d00c      	beq.n	8011ae2 <rxSessionUpdate+0x1be>
 8011ac8:	7c7b      	ldrb	r3, [r7, #17]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d009      	beq.n	8011ae2 <rxSessionUpdate+0x1be>
 8011ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	68b9      	ldr	r1, [r7, #8]
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f7ff fdfd 	bl	80116d8 <rxSessionAcceptFrame>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	75fb      	strb	r3, [r7, #23]
 8011ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3718      	adds	r7, #24
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bdb0      	pop	{r4, r5, r7, pc}
 8011aee:	bf00      	nop
 8011af0:	08016fec 	.word	0x08016fec
 8011af4:	08017d24 	.word	0x08017d24
 8011af8:	08016e28 	.word	0x08016e28
 8011afc:	08017348 	.word	0x08017348
 8011b00:	08017280 	.word	0x08017280
 8011b04:	080172fc 	.word	0x080172fc
 8011b08:	080174c4 	.word	0x080174c4
 8011b0c:	0801741c 	.word	0x0801741c

08011b10 <rxAcceptFrame>:
 8011b10:	b5b0      	push	{r4, r5, r7, lr}
 8011b12:	b08c      	sub	sp, #48	; 0x30
 8011b14:	af04      	add	r7, sp, #16
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
 8011b1c:	70fb      	strb	r3, [r7, #3]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d106      	bne.n	8011b32 <rxAcceptFrame+0x22>
 8011b24:	4b85      	ldr	r3, [pc, #532]	; (8011d3c <rxAcceptFrame+0x22c>)
 8011b26:	4a86      	ldr	r2, [pc, #536]	; (8011d40 <rxAcceptFrame+0x230>)
 8011b28:	f44f 715a 	mov.w	r1, #872	; 0x368
 8011b2c:	4885      	ldr	r0, [pc, #532]	; (8011d44 <rxAcceptFrame+0x234>)
 8011b2e:	f000 fc7d 	bl	801242c <__assert_func>
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d106      	bne.n	8011b46 <rxAcceptFrame+0x36>
 8011b38:	4b83      	ldr	r3, [pc, #524]	; (8011d48 <rxAcceptFrame+0x238>)
 8011b3a:	4a81      	ldr	r2, [pc, #516]	; (8011d40 <rxAcceptFrame+0x230>)
 8011b3c:	f240 3169 	movw	r1, #873	; 0x369
 8011b40:	4880      	ldr	r0, [pc, #512]	; (8011d44 <rxAcceptFrame+0x234>)
 8011b42:	f000 fc73 	bl	801242c <__assert_func>
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	8b9a      	ldrh	r2, [r3, #28]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	895b      	ldrh	r3, [r3, #10]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d006      	beq.n	8011b60 <rxAcceptFrame+0x50>
 8011b52:	4b7e      	ldr	r3, [pc, #504]	; (8011d4c <rxAcceptFrame+0x23c>)
 8011b54:	4a7a      	ldr	r2, [pc, #488]	; (8011d40 <rxAcceptFrame+0x230>)
 8011b56:	f240 316a 	movw	r1, #874	; 0x36a
 8011b5a:	487a      	ldr	r0, [pc, #488]	; (8011d44 <rxAcceptFrame+0x234>)
 8011b5c:	f000 fc66 	bl	801242c <__assert_func>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d106      	bne.n	8011b74 <rxAcceptFrame+0x64>
 8011b66:	4b7a      	ldr	r3, [pc, #488]	; (8011d50 <rxAcceptFrame+0x240>)
 8011b68:	4a75      	ldr	r2, [pc, #468]	; (8011d40 <rxAcceptFrame+0x230>)
 8011b6a:	f240 316b 	movw	r1, #875	; 0x36b
 8011b6e:	4875      	ldr	r0, [pc, #468]	; (8011d44 <rxAcceptFrame+0x234>)
 8011b70:	f000 fc5c 	bl	801242c <__assert_func>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	699b      	ldr	r3, [r3, #24]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d106      	bne.n	8011b8a <rxAcceptFrame+0x7a>
 8011b7c:	4b75      	ldr	r3, [pc, #468]	; (8011d54 <rxAcceptFrame+0x244>)
 8011b7e:	4a70      	ldr	r2, [pc, #448]	; (8011d40 <rxAcceptFrame+0x230>)
 8011b80:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8011b84:	486f      	ldr	r0, [pc, #444]	; (8011d44 <rxAcceptFrame+0x234>)
 8011b86:	f000 fc51 	bl	801242c <__assert_func>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	7b9b      	ldrb	r3, [r3, #14]
 8011b8e:	2b1f      	cmp	r3, #31
 8011b90:	d906      	bls.n	8011ba0 <rxAcceptFrame+0x90>
 8011b92:	4b71      	ldr	r3, [pc, #452]	; (8011d58 <rxAcceptFrame+0x248>)
 8011b94:	4a6a      	ldr	r2, [pc, #424]	; (8011d40 <rxAcceptFrame+0x230>)
 8011b96:	f240 316d 	movw	r1, #877	; 0x36d
 8011b9a:	486a      	ldr	r0, [pc, #424]	; (8011d44 <rxAcceptFrame+0x234>)
 8011b9c:	f000 fc46 	bl	801242c <__assert_func>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	7b5b      	ldrb	r3, [r3, #13]
 8011ba4:	2bff      	cmp	r3, #255	; 0xff
 8011ba6:	d00c      	beq.n	8011bc2 <rxAcceptFrame+0xb2>
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	791a      	ldrb	r2, [r3, #4]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	7b5b      	ldrb	r3, [r3, #13]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d006      	beq.n	8011bc2 <rxAcceptFrame+0xb2>
 8011bb4:	4b69      	ldr	r3, [pc, #420]	; (8011d5c <rxAcceptFrame+0x24c>)
 8011bb6:	4a62      	ldr	r2, [pc, #392]	; (8011d40 <rxAcceptFrame+0x230>)
 8011bb8:	f240 316e 	movw	r1, #878	; 0x36e
 8011bbc:	4861      	ldr	r0, [pc, #388]	; (8011d44 <rxAcceptFrame+0x234>)
 8011bbe:	f000 fc35 	bl	801242c <__assert_func>
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d106      	bne.n	8011bd6 <rxAcceptFrame+0xc6>
 8011bc8:	4b65      	ldr	r3, [pc, #404]	; (8011d60 <rxAcceptFrame+0x250>)
 8011bca:	4a5d      	ldr	r2, [pc, #372]	; (8011d40 <rxAcceptFrame+0x230>)
 8011bcc:	f240 316f 	movw	r1, #879	; 0x36f
 8011bd0:	485c      	ldr	r0, [pc, #368]	; (8011d44 <rxAcceptFrame+0x234>)
 8011bd2:	f000 fc2b 	bl	801242c <__assert_func>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	77fb      	strb	r3, [r7, #31]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	7b1b      	ldrb	r3, [r3, #12]
 8011bde:	b25b      	sxtb	r3, r3
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	db6c      	blt.n	8011cbe <rxAcceptFrame+0x1ae>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	7b1b      	ldrb	r3, [r3, #12]
 8011be8:	68ba      	ldr	r2, [r7, #8]
 8011bea:	3308      	adds	r3, #8
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	4413      	add	r3, r2
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d134      	bne.n	8011c60 <rxAcceptFrame+0x150>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	7bdb      	ldrb	r3, [r3, #15]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d030      	beq.n	8011c60 <rxAcceptFrame+0x150>
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	689b      	ldr	r3, [r3, #8]
 8011c02:	2120      	movs	r1, #32
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	4798      	blx	r3
 8011c08:	6138      	str	r0, [r7, #16]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	7b1b      	ldrb	r3, [r3, #12]
 8011c0e:	68ba      	ldr	r2, [r7, #8]
 8011c10:	3308      	adds	r3, #8
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	4413      	add	r3, r2
 8011c16:	693a      	ldr	r2, [r7, #16]
 8011c18:	605a      	str	r2, [r3, #4]
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d01d      	beq.n	8011c5c <rxAcceptFrame+0x14c>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	6939      	ldr	r1, [r7, #16]
 8011c28:	e9c1 2300 	strd	r2, r3, [r1]
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	609a      	str	r2, [r3, #8]
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	2200      	movs	r2, #0
 8011c36:	60da      	str	r2, [r3, #12]
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	611a      	str	r2, [r3, #16]
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c44:	829a      	strh	r2, [r3, #20]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	7b9a      	ldrb	r2, [r3, #14]
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	759a      	strb	r2, [r3, #22]
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	78fa      	ldrb	r2, [r7, #3]
 8011c52:	75da      	strb	r2, [r3, #23]
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	2201      	movs	r2, #1
 8011c58:	761a      	strb	r2, [r3, #24]
 8011c5a:	e001      	b.n	8011c60 <rxAcceptFrame+0x150>
 8011c5c:	23fd      	movs	r3, #253	; 0xfd
 8011c5e:	77fb      	strb	r3, [r7, #31]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	7b1b      	ldrb	r3, [r3, #12]
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	3308      	adds	r3, #8
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	4413      	add	r3, r2
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d05e      	beq.n	8011d30 <rxAcceptFrame+0x220>
 8011c72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d006      	beq.n	8011c88 <rxAcceptFrame+0x178>
 8011c7a:	4b3a      	ldr	r3, [pc, #232]	; (8011d64 <rxAcceptFrame+0x254>)
 8011c7c:	4a30      	ldr	r2, [pc, #192]	; (8011d40 <rxAcceptFrame+0x230>)
 8011c7e:	f240 318e 	movw	r1, #910	; 0x38e
 8011c82:	4830      	ldr	r0, [pc, #192]	; (8011d44 <rxAcceptFrame+0x234>)
 8011c84:	f000 fbd2 	bl	801242c <__assert_func>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	7b1b      	ldrb	r3, [r3, #12]
 8011c8c:	68ba      	ldr	r2, [r7, #8]
 8011c8e:	3308      	adds	r3, #8
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	4413      	add	r3, r2
 8011c94:	685c      	ldr	r4, [r3, #4]
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011c9c:	68b9      	ldr	r1, [r7, #8]
 8011c9e:	6989      	ldr	r1, [r1, #24]
 8011ca0:	78fd      	ldrb	r5, [r7, #3]
 8011ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ca4:	9003      	str	r0, [sp, #12]
 8011ca6:	9102      	str	r1, [sp, #8]
 8011ca8:	e9cd 2300 	strd	r2, r3, [sp]
 8011cac:	462b      	mov	r3, r5
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	68f8      	ldr	r0, [r7, #12]
 8011cb4:	f7ff fe36 	bl	8011924 <rxSessionUpdate>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	77fb      	strb	r3, [r7, #31]
 8011cbc:	e038      	b.n	8011d30 <rxAcceptFrame+0x220>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	7b1b      	ldrb	r3, [r3, #12]
 8011cc2:	2bff      	cmp	r3, #255	; 0xff
 8011cc4:	d006      	beq.n	8011cd4 <rxAcceptFrame+0x1c4>
 8011cc6:	4b28      	ldr	r3, [pc, #160]	; (8011d68 <rxAcceptFrame+0x258>)
 8011cc8:	4a1d      	ldr	r2, [pc, #116]	; (8011d40 <rxAcceptFrame+0x230>)
 8011cca:	f240 319a 	movw	r1, #922	; 0x39a
 8011cce:	481d      	ldr	r0, [pc, #116]	; (8011d44 <rxAcceptFrame+0x234>)
 8011cd0:	f000 fbac 	bl	801242c <__assert_func>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	695a      	ldr	r2, [r3, #20]
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	bf28      	it	cs
 8011ce0:	4613      	movcs	r3, r2
 8011ce2:	61bb      	str	r3, [r7, #24]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	69b9      	ldr	r1, [r7, #24]
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	4798      	blx	r3
 8011cee:	6178      	str	r0, [r7, #20]
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d01a      	beq.n	8011d2c <rxAcceptFrame+0x21c>
 8011cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7ff fb32 	bl	8011364 <rxInitTransferMetadataFromFrame>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d08:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8011d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0e:	69ba      	ldr	r2, [r7, #24]
 8011d10:	611a      	str	r2, [r3, #16]
 8011d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d14:	697a      	ldr	r2, [r7, #20]
 8011d16:	615a      	str	r2, [r3, #20]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	699b      	ldr	r3, [r3, #24]
 8011d1c:	69ba      	ldr	r2, [r7, #24]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	6978      	ldr	r0, [r7, #20]
 8011d22:	f001 fd2c 	bl	801377e <memcpy>
 8011d26:	2301      	movs	r3, #1
 8011d28:	77fb      	strb	r3, [r7, #31]
 8011d2a:	e001      	b.n	8011d30 <rxAcceptFrame+0x220>
 8011d2c:	23fd      	movs	r3, #253	; 0xfd
 8011d2e:	77fb      	strb	r3, [r7, #31]
 8011d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d34:	4618      	mov	r0, r3
 8011d36:	3720      	adds	r7, #32
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8011d3c:	08016fec 	.word	0x08016fec
 8011d40:	08017d14 	.word	0x08017d14
 8011d44:	08016e28 	.word	0x08016e28
 8011d48:	080174ec 	.word	0x080174ec
 8011d4c:	08017508 	.word	0x08017508
 8011d50:	08017280 	.word	0x08017280
 8011d54:	080172dc 	.word	0x080172dc
 8011d58:	0801741c 	.word	0x0801741c
 8011d5c:	08017530 	.word	0x08017530
 8011d60:	080172fc 	.word	0x080172fc
 8011d64:	08017588 	.word	0x08017588
 8011d68:	08017594 	.word	0x08017594

08011d6c <rxSubscriptionPredicateOnPortID>:
 8011d6c:	b480      	push	{r7}
 8011d6e:	b085      	sub	sp, #20
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	881b      	ldrh	r3, [r3, #0]
 8011d7a:	81fb      	strh	r3, [r7, #14]
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	8b9b      	ldrh	r3, [r3, #28]
 8011d80:	81bb      	strh	r3, [r7, #12]
 8011d82:	89fa      	ldrh	r2, [r7, #14]
 8011d84:	89bb      	ldrh	r3, [r7, #12]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d00a      	beq.n	8011da0 <rxSubscriptionPredicateOnPortID+0x34>
 8011d8a:	89fa      	ldrh	r2, [r7, #14]
 8011d8c:	89bb      	ldrh	r3, [r7, #12]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	bf8c      	ite	hi
 8011d92:	2301      	movhi	r3, #1
 8011d94:	2300      	movls	r3, #0
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	461a      	mov	r2, r3
 8011d9a:	4b05      	ldr	r3, [pc, #20]	; (8011db0 <rxSubscriptionPredicateOnPortID+0x44>)
 8011d9c:	569b      	ldrsb	r3, [r3, r2]
 8011d9e:	e000      	b.n	8011da2 <rxSubscriptionPredicateOnPortID+0x36>
 8011da0:	2300      	movs	r3, #0
 8011da2:	4618      	mov	r0, r3
 8011da4:	3714      	adds	r7, #20
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr
 8011dae:	bf00      	nop
 8011db0:	08017d00 	.word	0x08017d00

08011db4 <rxSubscriptionPredicateOnStruct>:
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	331c      	adds	r3, #28
 8011dc2:	6839      	ldr	r1, [r7, #0]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff ffd1 	bl	8011d6c <rxSubscriptionPredicateOnPortID>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3708      	adds	r7, #8
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <canardInit>:
 8011dd4:	b5b0      	push	{r4, r5, r7, lr}
 8011dd6:	b08c      	sub	sp, #48	; 0x30
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	60b9      	str	r1, [r7, #8]
 8011dde:	607a      	str	r2, [r7, #4]
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d106      	bne.n	8011df4 <canardInit+0x20>
 8011de6:	4b16      	ldr	r3, [pc, #88]	; (8011e40 <canardInit+0x6c>)
 8011de8:	4a16      	ldr	r2, [pc, #88]	; (8011e44 <canardInit+0x70>)
 8011dea:	f240 31d6 	movw	r1, #982	; 0x3d6
 8011dee:	4816      	ldr	r0, [pc, #88]	; (8011e48 <canardInit+0x74>)
 8011df0:	f000 fb1c 	bl	801242c <__assert_func>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d106      	bne.n	8011e08 <canardInit+0x34>
 8011dfa:	4b14      	ldr	r3, [pc, #80]	; (8011e4c <canardInit+0x78>)
 8011dfc:	4a11      	ldr	r2, [pc, #68]	; (8011e44 <canardInit+0x70>)
 8011dfe:	f240 31d7 	movw	r1, #983	; 0x3d7
 8011e02:	4811      	ldr	r0, [pc, #68]	; (8011e48 <canardInit+0x74>)
 8011e04:	f000 fb12 	bl	801242c <__assert_func>
 8011e08:	2300      	movs	r3, #0
 8011e0a:	617b      	str	r3, [r7, #20]
 8011e0c:	23ff      	movs	r3, #255	; 0xff
 8011e0e:	763b      	strb	r3, [r7, #24]
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	61fb      	str	r3, [r7, #28]
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	623b      	str	r3, [r7, #32]
 8011e18:	2300      	movs	r3, #0
 8011e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e20:	2300      	movs	r3, #0
 8011e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	461d      	mov	r5, r3
 8011e28:	f107 0414 	add.w	r4, r7, #20
 8011e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011e34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	3730      	adds	r7, #48	; 0x30
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8011e40:	080175b4 	.word	0x080175b4
 8011e44:	08017b88 	.word	0x08017b88
 8011e48:	08016e28 	.word	0x08016e28
 8011e4c:	080175d4 	.word	0x080175d4

08011e50 <canardTxInit>:
 8011e50:	b4b0      	push	{r4, r5, r7}
 8011e52:	b08b      	sub	sp, #44	; 0x2c
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	617b      	str	r3, [r7, #20]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	61bb      	str	r3, [r7, #24]
 8011e64:	2300      	movs	r3, #0
 8011e66:	61fb      	str	r3, [r7, #28]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	623b      	str	r3, [r7, #32]
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	461d      	mov	r5, r3
 8011e74:	f107 0414 	add.w	r4, r7, #20
 8011e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e7c:	6823      	ldr	r3, [r4, #0]
 8011e7e:	602b      	str	r3, [r5, #0]
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	372c      	adds	r7, #44	; 0x2c
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bcb0      	pop	{r4, r5, r7}
 8011e88:	4770      	bx	lr
	...

08011e8c <canardTxPush>:
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b08e      	sub	sp, #56	; 0x38
 8011e90:	af06      	add	r7, sp, #24
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	e9c7 2300 	strd	r2, r3, [r7]
 8011e9a:	f06f 0301 	mvn.w	r3, #1
 8011e9e:	61fb      	str	r3, [r7, #28]
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d062      	beq.n	8011f6c <canardTxPush+0xe0>
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d05f      	beq.n	8011f6c <canardTxPush+0xe0>
 8011eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d05c      	beq.n	8011f6c <canardTxPush+0xe0>
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d102      	bne.n	8011ebe <canardTxPush+0x32>
 8011eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d156      	bne.n	8011f6c <canardTxPush+0xe0>
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fe fc02 	bl	80106cc <adjustPresentationLayerMTU>
 8011ec8:	61b8      	str	r0, [r7, #24]
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	791a      	ldrb	r2, [r3, #4]
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	4613      	mov	r3, r2
 8011ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eda:	f7fe fc27 	bl	801072c <txMakeCANID>
 8011ede:	6178      	str	r0, [r7, #20]
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	db40      	blt.n	8011f68 <canardTxPush+0xdc>
 8011ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ee8:	69bb      	ldr	r3, [r7, #24]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d81c      	bhi.n	8011f28 <canardTxPush+0x9c>
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ef2:	7952      	ldrb	r2, [r2, #5]
 8011ef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ef6:	9103      	str	r1, [sp, #12]
 8011ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011efa:	9102      	str	r1, [sp, #8]
 8011efc:	9201      	str	r2, [sp, #4]
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f04:	68b9      	ldr	r1, [r7, #8]
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7fe fdda 	bl	8010ac0 <txPushSingleFrame>
 8011f0c:	61f8      	str	r0, [r7, #28]
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	db2b      	blt.n	8011f6c <canardTxPush+0xe0>
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d028      	beq.n	8011f6c <canardTxPush+0xe0>
 8011f1a:	4b1c      	ldr	r3, [pc, #112]	; (8011f8c <canardTxPush+0x100>)
 8011f1c:	4a1c      	ldr	r2, [pc, #112]	; (8011f90 <canardTxPush+0x104>)
 8011f1e:	f240 4105 	movw	r1, #1029	; 0x405
 8011f22:	481c      	ldr	r0, [pc, #112]	; (8011f94 <canardTxPush+0x108>)
 8011f24:	f000 fa82 	bl	801242c <__assert_func>
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f2c:	7952      	ldrb	r2, [r2, #5]
 8011f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f30:	9105      	str	r1, [sp, #20]
 8011f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f34:	9104      	str	r1, [sp, #16]
 8011f36:	9203      	str	r2, [sp, #12]
 8011f38:	9302      	str	r3, [sp, #8]
 8011f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8011f42:	69ba      	ldr	r2, [r7, #24]
 8011f44:	68b9      	ldr	r1, [r7, #8]
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f7fe ffd4 	bl	8010ef4 <txPushMultiFrame>
 8011f4c:	61f8      	str	r0, [r7, #28]
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	db0b      	blt.n	8011f6c <canardTxPush+0xe0>
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	2b01      	cmp	r3, #1
 8011f58:	dc08      	bgt.n	8011f6c <canardTxPush+0xe0>
 8011f5a:	4b0f      	ldr	r3, [pc, #60]	; (8011f98 <canardTxPush+0x10c>)
 8011f5c:	4a0c      	ldr	r2, [pc, #48]	; (8011f90 <canardTxPush+0x104>)
 8011f5e:	f240 4111 	movw	r1, #1041	; 0x411
 8011f62:	480c      	ldr	r0, [pc, #48]	; (8011f94 <canardTxPush+0x108>)
 8011f64:	f000 fa62 	bl	801242c <__assert_func>
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	61fb      	str	r3, [r7, #28]
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <canardTxPush+0xf4>
 8011f72:	4b0a      	ldr	r3, [pc, #40]	; (8011f9c <canardTxPush+0x110>)
 8011f74:	4a06      	ldr	r2, [pc, #24]	; (8011f90 <canardTxPush+0x104>)
 8011f76:	f240 4119 	movw	r1, #1049	; 0x419
 8011f7a:	4806      	ldr	r0, [pc, #24]	; (8011f94 <canardTxPush+0x108>)
 8011f7c:	f000 fa56 	bl	801242c <__assert_func>
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	4618      	mov	r0, r3
 8011f84:	3720      	adds	r7, #32
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	bf00      	nop
 8011f8c:	08017124 	.word	0x08017124
 8011f90:	08017b94 	.word	0x08017b94
 8011f94:	08016e28 	.word	0x08016e28
 8011f98:	08017268 	.word	0x08017268
 8011f9c:	080175f0 	.word	0x080175f0

08011fa0 <canardTxPeek>:
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	2300      	movs	r3, #0
 8011faa:	60fb      	str	r3, [r7, #12]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d006      	beq.n	8011fc0 <canardTxPeek+0x20>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7fd ff1d 	bl	800fdf8 <cavlFindExtremum>
 8011fbe:	60f8      	str	r0, [r7, #12]
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <canardTxPop>:
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b084      	sub	sp, #16
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
 8011fd2:	6039      	str	r1, [r7, #0]
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	60fb      	str	r3, [r7, #12]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d010      	beq.n	8012000 <canardTxPop+0x36>
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d00d      	beq.n	8012000 <canardTxPop+0x36>
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	60fb      	str	r3, [r7, #12]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	330c      	adds	r3, #12
 8011fec:	683a      	ldr	r2, [r7, #0]
 8011fee:	4611      	mov	r1, r2
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7fe f957 	bl	80102a4 <cavlRemove>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	689b      	ldr	r3, [r3, #8]
 8011ffa:	1e5a      	subs	r2, r3, #1
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	609a      	str	r2, [r3, #8]
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	4618      	mov	r0, r3
 8012004:	3710      	adds	r7, #16
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
	...

0801200c <canardRxAccept>:
 801200c:	b580      	push	{r7, lr}
 801200e:	b090      	sub	sp, #64	; 0x40
 8012010:	af02      	add	r7, sp, #8
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	e9c7 2300 	strd	r2, r3, [r7]
 8012018:	23fe      	movs	r3, #254	; 0xfe
 801201a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d068      	beq.n	80120f6 <canardRxAccept+0xea>
 8012024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012026:	2b00      	cmp	r3, #0
 8012028:	d065      	beq.n	80120f6 <canardRxAccept+0xea>
 801202a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801202c:	2b00      	cmp	r3, #0
 801202e:	d062      	beq.n	80120f6 <canardRxAccept+0xea>
 8012030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012038:	d25d      	bcs.n	80120f6 <canardRxAccept+0xea>
 801203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801203c:	689b      	ldr	r3, [r3, #8]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d103      	bne.n	801204a <canardRxAccept+0x3e>
 8012042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d155      	bne.n	80120f6 <canardRxAccept+0xea>
 801204a:	f107 0310 	add.w	r3, r7, #16
 801204e:	2220      	movs	r2, #32
 8012050:	2100      	movs	r1, #0
 8012052:	4618      	mov	r0, r3
 8012054:	f001 faad 	bl	80135b2 <memset>
 8012058:	f107 0310 	add.w	r3, r7, #16
 801205c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801205e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012062:	f7ff f83b 	bl	80110dc <rxTryParseFrame>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d041      	beq.n	80120f0 <canardRxAccept+0xe4>
 801206c:	7f7b      	ldrb	r3, [r7, #29]
 801206e:	2bff      	cmp	r3, #255	; 0xff
 8012070:	d004      	beq.n	801207c <canardRxAccept+0x70>
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	791a      	ldrb	r2, [r3, #4]
 8012076:	7f7b      	ldrb	r3, [r7, #29]
 8012078:	429a      	cmp	r2, r3
 801207a:	d135      	bne.n	80120e8 <canardRxAccept+0xdc>
 801207c:	7e7b      	ldrb	r3, [r7, #25]
 801207e:	3304      	adds	r3, #4
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	18d0      	adds	r0, r2, r3
 8012086:	f107 0310 	add.w	r3, r7, #16
 801208a:	f103 010a 	add.w	r1, r3, #10
 801208e:	2300      	movs	r3, #0
 8012090:	4a21      	ldr	r2, [pc, #132]	; (8012118 <canardRxAccept+0x10c>)
 8012092:	f7fe f889 	bl	80101a8 <cavlSearch>
 8012096:	6338      	str	r0, [r7, #48]	; 0x30
 8012098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <canardRxAccept+0x98>
 801209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120a2:	601a      	str	r2, [r3, #0]
 80120a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d01a      	beq.n	80120e0 <canardRxAccept+0xd4>
 80120aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ac:	8b9a      	ldrh	r2, [r3, #28]
 80120ae:	8b7b      	ldrh	r3, [r7, #26]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d006      	beq.n	80120c2 <canardRxAccept+0xb6>
 80120b4:	4b19      	ldr	r3, [pc, #100]	; (801211c <canardRxAccept+0x110>)
 80120b6:	4a1a      	ldr	r2, [pc, #104]	; (8012120 <canardRxAccept+0x114>)
 80120b8:	f240 415a 	movw	r1, #1114	; 0x45a
 80120bc:	4819      	ldr	r0, [pc, #100]	; (8012124 <canardRxAccept+0x118>)
 80120be:	f000 f9b5 	bl	801242c <__assert_func>
 80120c2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80120c6:	f107 0210 	add.w	r2, r7, #16
 80120ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120cc:	9300      	str	r3, [sp, #0]
 80120ce:	460b      	mov	r3, r1
 80120d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f7ff fd1c 	bl	8011b10 <rxAcceptFrame>
 80120d8:	4603      	mov	r3, r0
 80120da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120de:	e00a      	b.n	80120f6 <canardRxAccept+0xea>
 80120e0:	2300      	movs	r3, #0
 80120e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120e6:	e006      	b.n	80120f6 <canardRxAccept+0xea>
 80120e8:	2300      	movs	r3, #0
 80120ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120ee:	e002      	b.n	80120f6 <canardRxAccept+0xea>
 80120f0:	2300      	movs	r3, #0
 80120f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80120fa:	2b01      	cmp	r3, #1
 80120fc:	dd06      	ble.n	801210c <canardRxAccept+0x100>
 80120fe:	4b0a      	ldr	r3, [pc, #40]	; (8012128 <canardRxAccept+0x11c>)
 8012100:	4a07      	ldr	r2, [pc, #28]	; (8012120 <canardRxAccept+0x114>)
 8012102:	f240 416c 	movw	r1, #1132	; 0x46c
 8012106:	4807      	ldr	r0, [pc, #28]	; (8012124 <canardRxAccept+0x118>)
 8012108:	f000 f990 	bl	801242c <__assert_func>
 801210c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012110:	4618      	mov	r0, r3
 8012112:	3738      	adds	r7, #56	; 0x38
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	08011d6d 	.word	0x08011d6d
 801211c:	080175fc 	.word	0x080175fc
 8012120:	08017cf0 	.word	0x08017cf0
 8012124:	08016e28 	.word	0x08016e28
 8012128:	0801761c 	.word	0x0801761c

0801212c <canardRxSubscribe>:
 801212c:	b580      	push	{r7, lr}
 801212e:	b088      	sub	sp, #32
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	607b      	str	r3, [r7, #4]
 8012136:	460b      	mov	r3, r1
 8012138:	72fb      	strb	r3, [r7, #11]
 801213a:	4613      	mov	r3, r2
 801213c:	813b      	strh	r3, [r7, #8]
 801213e:	23fe      	movs	r3, #254	; 0xfe
 8012140:	77fb      	strb	r3, [r7, #31]
 8012142:	7afb      	ldrb	r3, [r7, #11]
 8012144:	617b      	str	r3, [r7, #20]
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d04a      	beq.n	80121e2 <canardRxSubscribe+0xb6>
 801214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214e:	2b00      	cmp	r3, #0
 8012150:	d047      	beq.n	80121e2 <canardRxSubscribe+0xb6>
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	2b02      	cmp	r3, #2
 8012156:	d844      	bhi.n	80121e2 <canardRxSubscribe+0xb6>
 8012158:	893a      	ldrh	r2, [r7, #8]
 801215a:	7afb      	ldrb	r3, [r7, #11]
 801215c:	4619      	mov	r1, r3
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f000 f850 	bl	8012204 <canardRxUnsubscribe>
 8012164:	4603      	mov	r3, r0
 8012166:	77fb      	strb	r3, [r7, #31]
 8012168:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801216c:	2b00      	cmp	r3, #0
 801216e:	db38      	blt.n	80121e2 <canardRxSubscribe+0xb6>
 8012170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012176:	e9c1 2304 	strd	r2, r3, [r1, #16]
 801217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	619a      	str	r2, [r3, #24]
 8012180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012182:	893a      	ldrh	r2, [r7, #8]
 8012184:	839a      	strh	r2, [r3, #28]
 8012186:	2300      	movs	r3, #0
 8012188:	61bb      	str	r3, [r7, #24]
 801218a:	e009      	b.n	80121a0 <canardRxSubscribe+0x74>
 801218c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	3308      	adds	r3, #8
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	4413      	add	r3, r2
 8012196:	2200      	movs	r2, #0
 8012198:	605a      	str	r2, [r3, #4]
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	3301      	adds	r3, #1
 801219e:	61bb      	str	r3, [r7, #24]
 80121a0:	69bb      	ldr	r3, [r7, #24]
 80121a2:	2b7f      	cmp	r3, #127	; 0x7f
 80121a4:	d9f2      	bls.n	801218c <canardRxSubscribe+0x60>
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	3304      	adds	r3, #4
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	18d0      	adds	r0, r2, r3
 80121b0:	4b0f      	ldr	r3, [pc, #60]	; (80121f0 <canardRxSubscribe+0xc4>)
 80121b2:	4a10      	ldr	r2, [pc, #64]	; (80121f4 <canardRxSubscribe+0xc8>)
 80121b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80121b6:	f7fd fff7 	bl	80101a8 <cavlSearch>
 80121ba:	6138      	str	r0, [r7, #16]
 80121bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121be:	693a      	ldr	r2, [r7, #16]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d006      	beq.n	80121d2 <canardRxSubscribe+0xa6>
 80121c4:	4b0c      	ldr	r3, [pc, #48]	; (80121f8 <canardRxSubscribe+0xcc>)
 80121c6:	4a0d      	ldr	r2, [pc, #52]	; (80121fc <canardRxSubscribe+0xd0>)
 80121c8:	f44f 6192 	mov.w	r1, #1168	; 0x490
 80121cc:	480c      	ldr	r0, [pc, #48]	; (8012200 <canardRxSubscribe+0xd4>)
 80121ce:	f000 f92d 	bl	801242c <__assert_func>
 80121d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	bfd4      	ite	le
 80121da:	2301      	movle	r3, #1
 80121dc:	2300      	movgt	r3, #0
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	77fb      	strb	r3, [r7, #31]
 80121e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80121e6:	4618      	mov	r0, r3
 80121e8:	3720      	adds	r7, #32
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
 80121ee:	bf00      	nop
 80121f0:	08010509 	.word	0x08010509
 80121f4:	08011db5 	.word	0x08011db5
 80121f8:	08017628 	.word	0x08017628
 80121fc:	08017db8 	.word	0x08017db8
 8012200:	08016e28 	.word	0x08016e28

08012204 <canardRxUnsubscribe>:
 8012204:	b580      	push	{r7, lr}
 8012206:	b088      	sub	sp, #32
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	460b      	mov	r3, r1
 801220e:	70fb      	strb	r3, [r7, #3]
 8012210:	4613      	mov	r3, r2
 8012212:	803b      	strh	r3, [r7, #0]
 8012214:	23fe      	movs	r3, #254	; 0xfe
 8012216:	77fb      	strb	r3, [r7, #31]
 8012218:	78fb      	ldrb	r3, [r7, #3]
 801221a:	617b      	str	r3, [r7, #20]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d05f      	beq.n	80122e2 <canardRxUnsubscribe+0xde>
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b02      	cmp	r3, #2
 8012226:	d85c      	bhi.n	80122e2 <canardRxUnsubscribe+0xde>
 8012228:	883b      	ldrh	r3, [r7, #0]
 801222a:	81fb      	strh	r3, [r7, #14]
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	3304      	adds	r3, #4
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	18d0      	adds	r0, r2, r3
 8012236:	f107 010e 	add.w	r1, r7, #14
 801223a:	2300      	movs	r3, #0
 801223c:	4a2c      	ldr	r2, [pc, #176]	; (80122f0 <canardRxUnsubscribe+0xec>)
 801223e:	f7fd ffb3 	bl	80101a8 <cavlSearch>
 8012242:	6138      	str	r0, [r7, #16]
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d049      	beq.n	80122de <canardRxUnsubscribe+0xda>
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	3304      	adds	r3, #4
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	687a      	ldr	r2, [r7, #4]
 8012252:	4413      	add	r3, r2
 8012254:	693a      	ldr	r2, [r7, #16]
 8012256:	4611      	mov	r1, r2
 8012258:	4618      	mov	r0, r3
 801225a:	f7fe f823 	bl	80102a4 <cavlRemove>
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	8b9b      	ldrh	r3, [r3, #28]
 8012262:	883a      	ldrh	r2, [r7, #0]
 8012264:	429a      	cmp	r2, r3
 8012266:	d006      	beq.n	8012276 <canardRxUnsubscribe+0x72>
 8012268:	4b22      	ldr	r3, [pc, #136]	; (80122f4 <canardRxUnsubscribe+0xf0>)
 801226a:	4a23      	ldr	r2, [pc, #140]	; (80122f8 <canardRxUnsubscribe+0xf4>)
 801226c:	f240 41a5 	movw	r1, #1189	; 0x4a5
 8012270:	4822      	ldr	r0, [pc, #136]	; (80122fc <canardRxUnsubscribe+0xf8>)
 8012272:	f000 f8db 	bl	801242c <__assert_func>
 8012276:	2301      	movs	r3, #1
 8012278:	77fb      	strb	r3, [r7, #31]
 801227a:	2300      	movs	r3, #0
 801227c:	61bb      	str	r3, [r7, #24]
 801227e:	e02a      	b.n	80122d6 <canardRxUnsubscribe+0xd2>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	68da      	ldr	r2, [r3, #12]
 8012284:	6939      	ldr	r1, [r7, #16]
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	3308      	adds	r3, #8
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	440b      	add	r3, r1
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d007      	beq.n	80122a4 <canardRxUnsubscribe+0xa0>
 8012294:	6939      	ldr	r1, [r7, #16]
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	3308      	adds	r3, #8
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	440b      	add	r3, r1
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	691b      	ldr	r3, [r3, #16]
 80122a2:	e000      	b.n	80122a6 <canardRxUnsubscribe+0xa2>
 80122a4:	2300      	movs	r3, #0
 80122a6:	4619      	mov	r1, r3
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	4790      	blx	r2
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	68da      	ldr	r2, [r3, #12]
 80122b0:	6939      	ldr	r1, [r7, #16]
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	3308      	adds	r3, #8
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	440b      	add	r3, r1
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	4619      	mov	r1, r3
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	4790      	blx	r2
 80122c2:	693a      	ldr	r2, [r7, #16]
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	3308      	adds	r3, #8
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	4413      	add	r3, r2
 80122cc:	2200      	movs	r2, #0
 80122ce:	605a      	str	r2, [r3, #4]
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	3301      	adds	r3, #1
 80122d4:	61bb      	str	r3, [r7, #24]
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	2b7f      	cmp	r3, #127	; 0x7f
 80122da:	d9d1      	bls.n	8012280 <canardRxUnsubscribe+0x7c>
 80122dc:	e001      	b.n	80122e2 <canardRxUnsubscribe+0xde>
 80122de:	2300      	movs	r3, #0
 80122e0:	77fb      	strb	r3, [r7, #31]
 80122e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80122e6:	4618      	mov	r0, r3
 80122e8:	3720      	adds	r7, #32
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	08011d6d 	.word	0x08011d6d
 80122f4:	08017648 	.word	0x08017648
 80122f8:	08017dcc 	.word	0x08017dcc
 80122fc:	08016e28 	.word	0x08016e28

08012300 <canardMakeFilterForSubject>:
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	460b      	mov	r3, r1
 801230a:	807b      	strh	r3, [r7, #2]
 801230c:	f107 0308 	add.w	r3, r7, #8
 8012310:	2200      	movs	r2, #0
 8012312:	601a      	str	r2, [r3, #0]
 8012314:	605a      	str	r2, [r3, #4]
 8012316:	887b      	ldrh	r3, [r7, #2]
 8012318:	021b      	lsls	r3, r3, #8
 801231a:	60bb      	str	r3, [r7, #8]
 801231c:	4b07      	ldr	r3, [pc, #28]	; (801233c <canardMakeFilterForSubject+0x3c>)
 801231e:	60fb      	str	r3, [r7, #12]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	461a      	mov	r2, r3
 8012324:	f107 0308 	add.w	r3, r7, #8
 8012328:	e893 0003 	ldmia.w	r3, {r0, r1}
 801232c:	e882 0003 	stmia.w	r2, {r0, r1}
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	3714      	adds	r7, #20
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr
 801233c:	021fff80 	.word	0x021fff80

08012340 <canardMakeFilterForServices>:
 8012340:	b480      	push	{r7}
 8012342:	b085      	sub	sp, #20
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	460b      	mov	r3, r1
 801234a:	70fb      	strb	r3, [r7, #3]
 801234c:	f107 0308 	add.w	r3, r7, #8
 8012350:	2200      	movs	r2, #0
 8012352:	601a      	str	r2, [r3, #0]
 8012354:	605a      	str	r2, [r3, #4]
 8012356:	78fb      	ldrb	r3, [r7, #3]
 8012358:	01db      	lsls	r3, r3, #7
 801235a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801235e:	60bb      	str	r3, [r7, #8]
 8012360:	4b07      	ldr	r3, [pc, #28]	; (8012380 <canardMakeFilterForServices+0x40>)
 8012362:	60fb      	str	r3, [r7, #12]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	461a      	mov	r2, r3
 8012368:	f107 0308 	add.w	r3, r7, #8
 801236c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012370:	e882 0003 	stmia.w	r2, {r0, r1}
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	3714      	adds	r7, #20
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr
 8012380:	02803f80 	.word	0x02803f80

08012384 <canardConsolidateFilters>:
 8012384:	b480      	push	{r7}
 8012386:	b087      	sub	sp, #28
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
 8012390:	f107 0310 	add.w	r3, r7, #16
 8012394:	2200      	movs	r2, #0
 8012396:	601a      	str	r2, [r3, #0]
 8012398:	605a      	str	r2, [r3, #4]
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	685a      	ldr	r2, [r3, #4]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	401a      	ands	r2, r3
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	6819      	ldr	r1, [r3, #0]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	404b      	eors	r3, r1
 80123ae:	43db      	mvns	r3, r3
 80123b0:	4013      	ands	r3, r2
 80123b2:	617b      	str	r3, [r7, #20]
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	4013      	ands	r3, r2
 80123bc:	613b      	str	r3, [r7, #16]
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	461a      	mov	r2, r3
 80123c2:	f107 0310 	add.w	r3, r7, #16
 80123c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	371c      	adds	r7, #28
 80123d2:	46bd      	mov	sp, r7
 80123d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d8:	4770      	bx	lr

080123da <_ZdlPvj>:
 80123da:	f000 b814 	b.w	8012406 <_ZdlPv>

080123de <_Znwj>:
 80123de:	2801      	cmp	r0, #1
 80123e0:	bf38      	it	cc
 80123e2:	2001      	movcc	r0, #1
 80123e4:	b510      	push	{r4, lr}
 80123e6:	4604      	mov	r4, r0
 80123e8:	4620      	mov	r0, r4
 80123ea:	f000 f84f 	bl	801248c <malloc>
 80123ee:	b100      	cbz	r0, 80123f2 <_Znwj+0x14>
 80123f0:	bd10      	pop	{r4, pc}
 80123f2:	f000 f80b 	bl	801240c <_ZSt15get_new_handlerv>
 80123f6:	b908      	cbnz	r0, 80123fc <_Znwj+0x1e>
 80123f8:	f000 f810 	bl	801241c <abort>
 80123fc:	4780      	blx	r0
 80123fe:	e7f3      	b.n	80123e8 <_Znwj+0xa>

08012400 <_ZSt25__throw_bad_function_callv>:
 8012400:	b508      	push	{r3, lr}
 8012402:	f000 f80b 	bl	801241c <abort>

08012406 <_ZdlPv>:
 8012406:	f000 b849 	b.w	801249c <free>
	...

0801240c <_ZSt15get_new_handlerv>:
 801240c:	4b02      	ldr	r3, [pc, #8]	; (8012418 <_ZSt15get_new_handlerv+0xc>)
 801240e:	6818      	ldr	r0, [r3, #0]
 8012410:	f3bf 8f5b 	dmb	ish
 8012414:	4770      	bx	lr
 8012416:	bf00      	nop
 8012418:	20000940 	.word	0x20000940

0801241c <abort>:
 801241c:	b508      	push	{r3, lr}
 801241e:	2006      	movs	r0, #6
 8012420:	f001 f90a 	bl	8013638 <raise>
 8012424:	2001      	movs	r0, #1
 8012426:	f7f6 fc5f 	bl	8008ce8 <_exit>
	...

0801242c <__assert_func>:
 801242c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801242e:	4614      	mov	r4, r2
 8012430:	461a      	mov	r2, r3
 8012432:	4b09      	ldr	r3, [pc, #36]	; (8012458 <__assert_func+0x2c>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	4605      	mov	r5, r0
 8012438:	68d8      	ldr	r0, [r3, #12]
 801243a:	b14c      	cbz	r4, 8012450 <__assert_func+0x24>
 801243c:	4b07      	ldr	r3, [pc, #28]	; (801245c <__assert_func+0x30>)
 801243e:	9100      	str	r1, [sp, #0]
 8012440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012444:	4906      	ldr	r1, [pc, #24]	; (8012460 <__assert_func+0x34>)
 8012446:	462b      	mov	r3, r5
 8012448:	f000 fff6 	bl	8013438 <fiprintf>
 801244c:	f7ff ffe6 	bl	801241c <abort>
 8012450:	4b04      	ldr	r3, [pc, #16]	; (8012464 <__assert_func+0x38>)
 8012452:	461c      	mov	r4, r3
 8012454:	e7f3      	b.n	801243e <__assert_func+0x12>
 8012456:	bf00      	nop
 8012458:	200000d0 	.word	0x200000d0
 801245c:	08017de0 	.word	0x08017de0
 8012460:	08017ded 	.word	0x08017ded
 8012464:	08017e1b 	.word	0x08017e1b

08012468 <exit>:
 8012468:	b508      	push	{r3, lr}
 801246a:	4b06      	ldr	r3, [pc, #24]	; (8012484 <exit+0x1c>)
 801246c:	4604      	mov	r4, r0
 801246e:	b113      	cbz	r3, 8012476 <exit+0xe>
 8012470:	2100      	movs	r1, #0
 8012472:	f3af 8000 	nop.w
 8012476:	4b04      	ldr	r3, [pc, #16]	; (8012488 <exit+0x20>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	b103      	cbz	r3, 801247e <exit+0x16>
 801247c:	4798      	blx	r3
 801247e:	4620      	mov	r0, r4
 8012480:	f7f6 fc32 	bl	8008ce8 <_exit>
 8012484:	00000000 	.word	0x00000000
 8012488:	20000a84 	.word	0x20000a84

0801248c <malloc>:
 801248c:	4b02      	ldr	r3, [pc, #8]	; (8012498 <malloc+0xc>)
 801248e:	4601      	mov	r1, r0
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	f000 b82b 	b.w	80124ec <_malloc_r>
 8012496:	bf00      	nop
 8012498:	200000d0 	.word	0x200000d0

0801249c <free>:
 801249c:	4b02      	ldr	r3, [pc, #8]	; (80124a8 <free+0xc>)
 801249e:	4601      	mov	r1, r0
 80124a0:	6818      	ldr	r0, [r3, #0]
 80124a2:	f001 bffb 	b.w	801449c <_free_r>
 80124a6:	bf00      	nop
 80124a8:	200000d0 	.word	0x200000d0

080124ac <sbrk_aligned>:
 80124ac:	b570      	push	{r4, r5, r6, lr}
 80124ae:	4e0e      	ldr	r6, [pc, #56]	; (80124e8 <sbrk_aligned+0x3c>)
 80124b0:	460c      	mov	r4, r1
 80124b2:	6831      	ldr	r1, [r6, #0]
 80124b4:	4605      	mov	r5, r0
 80124b6:	b911      	cbnz	r1, 80124be <sbrk_aligned+0x12>
 80124b8:	f001 f912 	bl	80136e0 <_sbrk_r>
 80124bc:	6030      	str	r0, [r6, #0]
 80124be:	4621      	mov	r1, r4
 80124c0:	4628      	mov	r0, r5
 80124c2:	f001 f90d 	bl	80136e0 <_sbrk_r>
 80124c6:	1c43      	adds	r3, r0, #1
 80124c8:	d00a      	beq.n	80124e0 <sbrk_aligned+0x34>
 80124ca:	1cc4      	adds	r4, r0, #3
 80124cc:	f024 0403 	bic.w	r4, r4, #3
 80124d0:	42a0      	cmp	r0, r4
 80124d2:	d007      	beq.n	80124e4 <sbrk_aligned+0x38>
 80124d4:	1a21      	subs	r1, r4, r0
 80124d6:	4628      	mov	r0, r5
 80124d8:	f001 f902 	bl	80136e0 <_sbrk_r>
 80124dc:	3001      	adds	r0, #1
 80124de:	d101      	bne.n	80124e4 <sbrk_aligned+0x38>
 80124e0:	f04f 34ff 	mov.w	r4, #4294967295
 80124e4:	4620      	mov	r0, r4
 80124e6:	bd70      	pop	{r4, r5, r6, pc}
 80124e8:	20000948 	.word	0x20000948

080124ec <_malloc_r>:
 80124ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124f0:	1ccd      	adds	r5, r1, #3
 80124f2:	f025 0503 	bic.w	r5, r5, #3
 80124f6:	3508      	adds	r5, #8
 80124f8:	2d0c      	cmp	r5, #12
 80124fa:	bf38      	it	cc
 80124fc:	250c      	movcc	r5, #12
 80124fe:	2d00      	cmp	r5, #0
 8012500:	4607      	mov	r7, r0
 8012502:	db01      	blt.n	8012508 <_malloc_r+0x1c>
 8012504:	42a9      	cmp	r1, r5
 8012506:	d905      	bls.n	8012514 <_malloc_r+0x28>
 8012508:	230c      	movs	r3, #12
 801250a:	603b      	str	r3, [r7, #0]
 801250c:	2600      	movs	r6, #0
 801250e:	4630      	mov	r0, r6
 8012510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012514:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80125e8 <_malloc_r+0xfc>
 8012518:	f000 f868 	bl	80125ec <__malloc_lock>
 801251c:	f8d8 3000 	ldr.w	r3, [r8]
 8012520:	461c      	mov	r4, r3
 8012522:	bb5c      	cbnz	r4, 801257c <_malloc_r+0x90>
 8012524:	4629      	mov	r1, r5
 8012526:	4638      	mov	r0, r7
 8012528:	f7ff ffc0 	bl	80124ac <sbrk_aligned>
 801252c:	1c43      	adds	r3, r0, #1
 801252e:	4604      	mov	r4, r0
 8012530:	d155      	bne.n	80125de <_malloc_r+0xf2>
 8012532:	f8d8 4000 	ldr.w	r4, [r8]
 8012536:	4626      	mov	r6, r4
 8012538:	2e00      	cmp	r6, #0
 801253a:	d145      	bne.n	80125c8 <_malloc_r+0xdc>
 801253c:	2c00      	cmp	r4, #0
 801253e:	d048      	beq.n	80125d2 <_malloc_r+0xe6>
 8012540:	6823      	ldr	r3, [r4, #0]
 8012542:	4631      	mov	r1, r6
 8012544:	4638      	mov	r0, r7
 8012546:	eb04 0903 	add.w	r9, r4, r3
 801254a:	f001 f8c9 	bl	80136e0 <_sbrk_r>
 801254e:	4581      	cmp	r9, r0
 8012550:	d13f      	bne.n	80125d2 <_malloc_r+0xe6>
 8012552:	6821      	ldr	r1, [r4, #0]
 8012554:	1a6d      	subs	r5, r5, r1
 8012556:	4629      	mov	r1, r5
 8012558:	4638      	mov	r0, r7
 801255a:	f7ff ffa7 	bl	80124ac <sbrk_aligned>
 801255e:	3001      	adds	r0, #1
 8012560:	d037      	beq.n	80125d2 <_malloc_r+0xe6>
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	442b      	add	r3, r5
 8012566:	6023      	str	r3, [r4, #0]
 8012568:	f8d8 3000 	ldr.w	r3, [r8]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d038      	beq.n	80125e2 <_malloc_r+0xf6>
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	42a2      	cmp	r2, r4
 8012574:	d12b      	bne.n	80125ce <_malloc_r+0xe2>
 8012576:	2200      	movs	r2, #0
 8012578:	605a      	str	r2, [r3, #4]
 801257a:	e00f      	b.n	801259c <_malloc_r+0xb0>
 801257c:	6822      	ldr	r2, [r4, #0]
 801257e:	1b52      	subs	r2, r2, r5
 8012580:	d41f      	bmi.n	80125c2 <_malloc_r+0xd6>
 8012582:	2a0b      	cmp	r2, #11
 8012584:	d917      	bls.n	80125b6 <_malloc_r+0xca>
 8012586:	1961      	adds	r1, r4, r5
 8012588:	42a3      	cmp	r3, r4
 801258a:	6025      	str	r5, [r4, #0]
 801258c:	bf18      	it	ne
 801258e:	6059      	strne	r1, [r3, #4]
 8012590:	6863      	ldr	r3, [r4, #4]
 8012592:	bf08      	it	eq
 8012594:	f8c8 1000 	streq.w	r1, [r8]
 8012598:	5162      	str	r2, [r4, r5]
 801259a:	604b      	str	r3, [r1, #4]
 801259c:	4638      	mov	r0, r7
 801259e:	f104 060b 	add.w	r6, r4, #11
 80125a2:	f000 f829 	bl	80125f8 <__malloc_unlock>
 80125a6:	f026 0607 	bic.w	r6, r6, #7
 80125aa:	1d23      	adds	r3, r4, #4
 80125ac:	1af2      	subs	r2, r6, r3
 80125ae:	d0ae      	beq.n	801250e <_malloc_r+0x22>
 80125b0:	1b9b      	subs	r3, r3, r6
 80125b2:	50a3      	str	r3, [r4, r2]
 80125b4:	e7ab      	b.n	801250e <_malloc_r+0x22>
 80125b6:	42a3      	cmp	r3, r4
 80125b8:	6862      	ldr	r2, [r4, #4]
 80125ba:	d1dd      	bne.n	8012578 <_malloc_r+0x8c>
 80125bc:	f8c8 2000 	str.w	r2, [r8]
 80125c0:	e7ec      	b.n	801259c <_malloc_r+0xb0>
 80125c2:	4623      	mov	r3, r4
 80125c4:	6864      	ldr	r4, [r4, #4]
 80125c6:	e7ac      	b.n	8012522 <_malloc_r+0x36>
 80125c8:	4634      	mov	r4, r6
 80125ca:	6876      	ldr	r6, [r6, #4]
 80125cc:	e7b4      	b.n	8012538 <_malloc_r+0x4c>
 80125ce:	4613      	mov	r3, r2
 80125d0:	e7cc      	b.n	801256c <_malloc_r+0x80>
 80125d2:	230c      	movs	r3, #12
 80125d4:	603b      	str	r3, [r7, #0]
 80125d6:	4638      	mov	r0, r7
 80125d8:	f000 f80e 	bl	80125f8 <__malloc_unlock>
 80125dc:	e797      	b.n	801250e <_malloc_r+0x22>
 80125de:	6025      	str	r5, [r4, #0]
 80125e0:	e7dc      	b.n	801259c <_malloc_r+0xb0>
 80125e2:	605b      	str	r3, [r3, #4]
 80125e4:	deff      	udf	#255	; 0xff
 80125e6:	bf00      	nop
 80125e8:	20000944 	.word	0x20000944

080125ec <__malloc_lock>:
 80125ec:	4801      	ldr	r0, [pc, #4]	; (80125f4 <__malloc_lock+0x8>)
 80125ee:	f001 b8c4 	b.w	801377a <__retarget_lock_acquire_recursive>
 80125f2:	bf00      	nop
 80125f4:	20000a8c 	.word	0x20000a8c

080125f8 <__malloc_unlock>:
 80125f8:	4801      	ldr	r0, [pc, #4]	; (8012600 <__malloc_unlock+0x8>)
 80125fa:	f001 b8bf 	b.w	801377c <__retarget_lock_release_recursive>
 80125fe:	bf00      	nop
 8012600:	20000a8c 	.word	0x20000a8c

08012604 <__cvt>:
 8012604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012608:	ec55 4b10 	vmov	r4, r5, d0
 801260c:	2d00      	cmp	r5, #0
 801260e:	460e      	mov	r6, r1
 8012610:	4619      	mov	r1, r3
 8012612:	462b      	mov	r3, r5
 8012614:	bfbb      	ittet	lt
 8012616:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801261a:	461d      	movlt	r5, r3
 801261c:	2300      	movge	r3, #0
 801261e:	232d      	movlt	r3, #45	; 0x2d
 8012620:	700b      	strb	r3, [r1, #0]
 8012622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012624:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012628:	4691      	mov	r9, r2
 801262a:	f023 0820 	bic.w	r8, r3, #32
 801262e:	bfbc      	itt	lt
 8012630:	4622      	movlt	r2, r4
 8012632:	4614      	movlt	r4, r2
 8012634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012638:	d005      	beq.n	8012646 <__cvt+0x42>
 801263a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801263e:	d100      	bne.n	8012642 <__cvt+0x3e>
 8012640:	3601      	adds	r6, #1
 8012642:	2102      	movs	r1, #2
 8012644:	e000      	b.n	8012648 <__cvt+0x44>
 8012646:	2103      	movs	r1, #3
 8012648:	ab03      	add	r3, sp, #12
 801264a:	9301      	str	r3, [sp, #4]
 801264c:	ab02      	add	r3, sp, #8
 801264e:	9300      	str	r3, [sp, #0]
 8012650:	ec45 4b10 	vmov	d0, r4, r5
 8012654:	4653      	mov	r3, sl
 8012656:	4632      	mov	r2, r6
 8012658:	f001 f92e 	bl	80138b8 <_dtoa_r>
 801265c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012660:	4607      	mov	r7, r0
 8012662:	d102      	bne.n	801266a <__cvt+0x66>
 8012664:	f019 0f01 	tst.w	r9, #1
 8012668:	d022      	beq.n	80126b0 <__cvt+0xac>
 801266a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801266e:	eb07 0906 	add.w	r9, r7, r6
 8012672:	d110      	bne.n	8012696 <__cvt+0x92>
 8012674:	783b      	ldrb	r3, [r7, #0]
 8012676:	2b30      	cmp	r3, #48	; 0x30
 8012678:	d10a      	bne.n	8012690 <__cvt+0x8c>
 801267a:	2200      	movs	r2, #0
 801267c:	2300      	movs	r3, #0
 801267e:	4620      	mov	r0, r4
 8012680:	4629      	mov	r1, r5
 8012682:	f7ee fa49 	bl	8000b18 <__aeabi_dcmpeq>
 8012686:	b918      	cbnz	r0, 8012690 <__cvt+0x8c>
 8012688:	f1c6 0601 	rsb	r6, r6, #1
 801268c:	f8ca 6000 	str.w	r6, [sl]
 8012690:	f8da 3000 	ldr.w	r3, [sl]
 8012694:	4499      	add	r9, r3
 8012696:	2200      	movs	r2, #0
 8012698:	2300      	movs	r3, #0
 801269a:	4620      	mov	r0, r4
 801269c:	4629      	mov	r1, r5
 801269e:	f7ee fa3b 	bl	8000b18 <__aeabi_dcmpeq>
 80126a2:	b108      	cbz	r0, 80126a8 <__cvt+0xa4>
 80126a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80126a8:	2230      	movs	r2, #48	; 0x30
 80126aa:	9b03      	ldr	r3, [sp, #12]
 80126ac:	454b      	cmp	r3, r9
 80126ae:	d307      	bcc.n	80126c0 <__cvt+0xbc>
 80126b0:	9b03      	ldr	r3, [sp, #12]
 80126b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80126b4:	1bdb      	subs	r3, r3, r7
 80126b6:	4638      	mov	r0, r7
 80126b8:	6013      	str	r3, [r2, #0]
 80126ba:	b004      	add	sp, #16
 80126bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126c0:	1c59      	adds	r1, r3, #1
 80126c2:	9103      	str	r1, [sp, #12]
 80126c4:	701a      	strb	r2, [r3, #0]
 80126c6:	e7f0      	b.n	80126aa <__cvt+0xa6>

080126c8 <__exponent>:
 80126c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126ca:	4603      	mov	r3, r0
 80126cc:	2900      	cmp	r1, #0
 80126ce:	bfb8      	it	lt
 80126d0:	4249      	neglt	r1, r1
 80126d2:	f803 2b02 	strb.w	r2, [r3], #2
 80126d6:	bfb4      	ite	lt
 80126d8:	222d      	movlt	r2, #45	; 0x2d
 80126da:	222b      	movge	r2, #43	; 0x2b
 80126dc:	2909      	cmp	r1, #9
 80126de:	7042      	strb	r2, [r0, #1]
 80126e0:	dd2a      	ble.n	8012738 <__exponent+0x70>
 80126e2:	f10d 0207 	add.w	r2, sp, #7
 80126e6:	4617      	mov	r7, r2
 80126e8:	260a      	movs	r6, #10
 80126ea:	4694      	mov	ip, r2
 80126ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80126f0:	fb06 1415 	mls	r4, r6, r5, r1
 80126f4:	3430      	adds	r4, #48	; 0x30
 80126f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80126fa:	460c      	mov	r4, r1
 80126fc:	2c63      	cmp	r4, #99	; 0x63
 80126fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8012702:	4629      	mov	r1, r5
 8012704:	dcf1      	bgt.n	80126ea <__exponent+0x22>
 8012706:	3130      	adds	r1, #48	; 0x30
 8012708:	f1ac 0402 	sub.w	r4, ip, #2
 801270c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012710:	1c41      	adds	r1, r0, #1
 8012712:	4622      	mov	r2, r4
 8012714:	42ba      	cmp	r2, r7
 8012716:	d30a      	bcc.n	801272e <__exponent+0x66>
 8012718:	f10d 0209 	add.w	r2, sp, #9
 801271c:	eba2 020c 	sub.w	r2, r2, ip
 8012720:	42bc      	cmp	r4, r7
 8012722:	bf88      	it	hi
 8012724:	2200      	movhi	r2, #0
 8012726:	4413      	add	r3, r2
 8012728:	1a18      	subs	r0, r3, r0
 801272a:	b003      	add	sp, #12
 801272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801272e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012732:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012736:	e7ed      	b.n	8012714 <__exponent+0x4c>
 8012738:	2330      	movs	r3, #48	; 0x30
 801273a:	3130      	adds	r1, #48	; 0x30
 801273c:	7083      	strb	r3, [r0, #2]
 801273e:	70c1      	strb	r1, [r0, #3]
 8012740:	1d03      	adds	r3, r0, #4
 8012742:	e7f1      	b.n	8012728 <__exponent+0x60>

08012744 <_printf_float>:
 8012744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012748:	ed2d 8b02 	vpush	{d8}
 801274c:	b08d      	sub	sp, #52	; 0x34
 801274e:	460c      	mov	r4, r1
 8012750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012754:	4616      	mov	r6, r2
 8012756:	461f      	mov	r7, r3
 8012758:	4605      	mov	r5, r0
 801275a:	f000 ff75 	bl	8013648 <_localeconv_r>
 801275e:	f8d0 a000 	ldr.w	sl, [r0]
 8012762:	4650      	mov	r0, sl
 8012764:	f7ed fdac 	bl	80002c0 <strlen>
 8012768:	2300      	movs	r3, #0
 801276a:	930a      	str	r3, [sp, #40]	; 0x28
 801276c:	6823      	ldr	r3, [r4, #0]
 801276e:	9305      	str	r3, [sp, #20]
 8012770:	f8d8 3000 	ldr.w	r3, [r8]
 8012774:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012778:	3307      	adds	r3, #7
 801277a:	f023 0307 	bic.w	r3, r3, #7
 801277e:	f103 0208 	add.w	r2, r3, #8
 8012782:	f8c8 2000 	str.w	r2, [r8]
 8012786:	e9d3 8900 	ldrd	r8, r9, [r3]
 801278a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801278e:	9307      	str	r3, [sp, #28]
 8012790:	f8cd 8018 	str.w	r8, [sp, #24]
 8012794:	ee08 0a10 	vmov	s16, r0
 8012798:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801279c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127a0:	4b9e      	ldr	r3, [pc, #632]	; (8012a1c <_printf_float+0x2d8>)
 80127a2:	f04f 32ff 	mov.w	r2, #4294967295
 80127a6:	f7ee f9e9 	bl	8000b7c <__aeabi_dcmpun>
 80127aa:	bb88      	cbnz	r0, 8012810 <_printf_float+0xcc>
 80127ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127b0:	4b9a      	ldr	r3, [pc, #616]	; (8012a1c <_printf_float+0x2d8>)
 80127b2:	f04f 32ff 	mov.w	r2, #4294967295
 80127b6:	f7ee f9c3 	bl	8000b40 <__aeabi_dcmple>
 80127ba:	bb48      	cbnz	r0, 8012810 <_printf_float+0xcc>
 80127bc:	2200      	movs	r2, #0
 80127be:	2300      	movs	r3, #0
 80127c0:	4640      	mov	r0, r8
 80127c2:	4649      	mov	r1, r9
 80127c4:	f7ee f9b2 	bl	8000b2c <__aeabi_dcmplt>
 80127c8:	b110      	cbz	r0, 80127d0 <_printf_float+0x8c>
 80127ca:	232d      	movs	r3, #45	; 0x2d
 80127cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127d0:	4a93      	ldr	r2, [pc, #588]	; (8012a20 <_printf_float+0x2dc>)
 80127d2:	4b94      	ldr	r3, [pc, #592]	; (8012a24 <_printf_float+0x2e0>)
 80127d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80127d8:	bf94      	ite	ls
 80127da:	4690      	movls	r8, r2
 80127dc:	4698      	movhi	r8, r3
 80127de:	2303      	movs	r3, #3
 80127e0:	6123      	str	r3, [r4, #16]
 80127e2:	9b05      	ldr	r3, [sp, #20]
 80127e4:	f023 0304 	bic.w	r3, r3, #4
 80127e8:	6023      	str	r3, [r4, #0]
 80127ea:	f04f 0900 	mov.w	r9, #0
 80127ee:	9700      	str	r7, [sp, #0]
 80127f0:	4633      	mov	r3, r6
 80127f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80127f4:	4621      	mov	r1, r4
 80127f6:	4628      	mov	r0, r5
 80127f8:	f000 f9da 	bl	8012bb0 <_printf_common>
 80127fc:	3001      	adds	r0, #1
 80127fe:	f040 8090 	bne.w	8012922 <_printf_float+0x1de>
 8012802:	f04f 30ff 	mov.w	r0, #4294967295
 8012806:	b00d      	add	sp, #52	; 0x34
 8012808:	ecbd 8b02 	vpop	{d8}
 801280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012810:	4642      	mov	r2, r8
 8012812:	464b      	mov	r3, r9
 8012814:	4640      	mov	r0, r8
 8012816:	4649      	mov	r1, r9
 8012818:	f7ee f9b0 	bl	8000b7c <__aeabi_dcmpun>
 801281c:	b140      	cbz	r0, 8012830 <_printf_float+0xec>
 801281e:	464b      	mov	r3, r9
 8012820:	2b00      	cmp	r3, #0
 8012822:	bfbc      	itt	lt
 8012824:	232d      	movlt	r3, #45	; 0x2d
 8012826:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801282a:	4a7f      	ldr	r2, [pc, #508]	; (8012a28 <_printf_float+0x2e4>)
 801282c:	4b7f      	ldr	r3, [pc, #508]	; (8012a2c <_printf_float+0x2e8>)
 801282e:	e7d1      	b.n	80127d4 <_printf_float+0x90>
 8012830:	6863      	ldr	r3, [r4, #4]
 8012832:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012836:	9206      	str	r2, [sp, #24]
 8012838:	1c5a      	adds	r2, r3, #1
 801283a:	d13f      	bne.n	80128bc <_printf_float+0x178>
 801283c:	2306      	movs	r3, #6
 801283e:	6063      	str	r3, [r4, #4]
 8012840:	9b05      	ldr	r3, [sp, #20]
 8012842:	6861      	ldr	r1, [r4, #4]
 8012844:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012848:	2300      	movs	r3, #0
 801284a:	9303      	str	r3, [sp, #12]
 801284c:	ab0a      	add	r3, sp, #40	; 0x28
 801284e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012852:	ab09      	add	r3, sp, #36	; 0x24
 8012854:	ec49 8b10 	vmov	d0, r8, r9
 8012858:	9300      	str	r3, [sp, #0]
 801285a:	6022      	str	r2, [r4, #0]
 801285c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012860:	4628      	mov	r0, r5
 8012862:	f7ff fecf 	bl	8012604 <__cvt>
 8012866:	9b06      	ldr	r3, [sp, #24]
 8012868:	9909      	ldr	r1, [sp, #36]	; 0x24
 801286a:	2b47      	cmp	r3, #71	; 0x47
 801286c:	4680      	mov	r8, r0
 801286e:	d108      	bne.n	8012882 <_printf_float+0x13e>
 8012870:	1cc8      	adds	r0, r1, #3
 8012872:	db02      	blt.n	801287a <_printf_float+0x136>
 8012874:	6863      	ldr	r3, [r4, #4]
 8012876:	4299      	cmp	r1, r3
 8012878:	dd41      	ble.n	80128fe <_printf_float+0x1ba>
 801287a:	f1ab 0302 	sub.w	r3, fp, #2
 801287e:	fa5f fb83 	uxtb.w	fp, r3
 8012882:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012886:	d820      	bhi.n	80128ca <_printf_float+0x186>
 8012888:	3901      	subs	r1, #1
 801288a:	465a      	mov	r2, fp
 801288c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012890:	9109      	str	r1, [sp, #36]	; 0x24
 8012892:	f7ff ff19 	bl	80126c8 <__exponent>
 8012896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012898:	1813      	adds	r3, r2, r0
 801289a:	2a01      	cmp	r2, #1
 801289c:	4681      	mov	r9, r0
 801289e:	6123      	str	r3, [r4, #16]
 80128a0:	dc02      	bgt.n	80128a8 <_printf_float+0x164>
 80128a2:	6822      	ldr	r2, [r4, #0]
 80128a4:	07d2      	lsls	r2, r2, #31
 80128a6:	d501      	bpl.n	80128ac <_printf_float+0x168>
 80128a8:	3301      	adds	r3, #1
 80128aa:	6123      	str	r3, [r4, #16]
 80128ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d09c      	beq.n	80127ee <_printf_float+0xaa>
 80128b4:	232d      	movs	r3, #45	; 0x2d
 80128b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128ba:	e798      	b.n	80127ee <_printf_float+0xaa>
 80128bc:	9a06      	ldr	r2, [sp, #24]
 80128be:	2a47      	cmp	r2, #71	; 0x47
 80128c0:	d1be      	bne.n	8012840 <_printf_float+0xfc>
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1bc      	bne.n	8012840 <_printf_float+0xfc>
 80128c6:	2301      	movs	r3, #1
 80128c8:	e7b9      	b.n	801283e <_printf_float+0xfa>
 80128ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80128ce:	d118      	bne.n	8012902 <_printf_float+0x1be>
 80128d0:	2900      	cmp	r1, #0
 80128d2:	6863      	ldr	r3, [r4, #4]
 80128d4:	dd0b      	ble.n	80128ee <_printf_float+0x1aa>
 80128d6:	6121      	str	r1, [r4, #16]
 80128d8:	b913      	cbnz	r3, 80128e0 <_printf_float+0x19c>
 80128da:	6822      	ldr	r2, [r4, #0]
 80128dc:	07d0      	lsls	r0, r2, #31
 80128de:	d502      	bpl.n	80128e6 <_printf_float+0x1a2>
 80128e0:	3301      	adds	r3, #1
 80128e2:	440b      	add	r3, r1
 80128e4:	6123      	str	r3, [r4, #16]
 80128e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80128e8:	f04f 0900 	mov.w	r9, #0
 80128ec:	e7de      	b.n	80128ac <_printf_float+0x168>
 80128ee:	b913      	cbnz	r3, 80128f6 <_printf_float+0x1b2>
 80128f0:	6822      	ldr	r2, [r4, #0]
 80128f2:	07d2      	lsls	r2, r2, #31
 80128f4:	d501      	bpl.n	80128fa <_printf_float+0x1b6>
 80128f6:	3302      	adds	r3, #2
 80128f8:	e7f4      	b.n	80128e4 <_printf_float+0x1a0>
 80128fa:	2301      	movs	r3, #1
 80128fc:	e7f2      	b.n	80128e4 <_printf_float+0x1a0>
 80128fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012904:	4299      	cmp	r1, r3
 8012906:	db05      	blt.n	8012914 <_printf_float+0x1d0>
 8012908:	6823      	ldr	r3, [r4, #0]
 801290a:	6121      	str	r1, [r4, #16]
 801290c:	07d8      	lsls	r0, r3, #31
 801290e:	d5ea      	bpl.n	80128e6 <_printf_float+0x1a2>
 8012910:	1c4b      	adds	r3, r1, #1
 8012912:	e7e7      	b.n	80128e4 <_printf_float+0x1a0>
 8012914:	2900      	cmp	r1, #0
 8012916:	bfd4      	ite	le
 8012918:	f1c1 0202 	rsble	r2, r1, #2
 801291c:	2201      	movgt	r2, #1
 801291e:	4413      	add	r3, r2
 8012920:	e7e0      	b.n	80128e4 <_printf_float+0x1a0>
 8012922:	6823      	ldr	r3, [r4, #0]
 8012924:	055a      	lsls	r2, r3, #21
 8012926:	d407      	bmi.n	8012938 <_printf_float+0x1f4>
 8012928:	6923      	ldr	r3, [r4, #16]
 801292a:	4642      	mov	r2, r8
 801292c:	4631      	mov	r1, r6
 801292e:	4628      	mov	r0, r5
 8012930:	47b8      	blx	r7
 8012932:	3001      	adds	r0, #1
 8012934:	d12c      	bne.n	8012990 <_printf_float+0x24c>
 8012936:	e764      	b.n	8012802 <_printf_float+0xbe>
 8012938:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801293c:	f240 80e0 	bls.w	8012b00 <_printf_float+0x3bc>
 8012940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012944:	2200      	movs	r2, #0
 8012946:	2300      	movs	r3, #0
 8012948:	f7ee f8e6 	bl	8000b18 <__aeabi_dcmpeq>
 801294c:	2800      	cmp	r0, #0
 801294e:	d034      	beq.n	80129ba <_printf_float+0x276>
 8012950:	4a37      	ldr	r2, [pc, #220]	; (8012a30 <_printf_float+0x2ec>)
 8012952:	2301      	movs	r3, #1
 8012954:	4631      	mov	r1, r6
 8012956:	4628      	mov	r0, r5
 8012958:	47b8      	blx	r7
 801295a:	3001      	adds	r0, #1
 801295c:	f43f af51 	beq.w	8012802 <_printf_float+0xbe>
 8012960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012964:	429a      	cmp	r2, r3
 8012966:	db02      	blt.n	801296e <_printf_float+0x22a>
 8012968:	6823      	ldr	r3, [r4, #0]
 801296a:	07d8      	lsls	r0, r3, #31
 801296c:	d510      	bpl.n	8012990 <_printf_float+0x24c>
 801296e:	ee18 3a10 	vmov	r3, s16
 8012972:	4652      	mov	r2, sl
 8012974:	4631      	mov	r1, r6
 8012976:	4628      	mov	r0, r5
 8012978:	47b8      	blx	r7
 801297a:	3001      	adds	r0, #1
 801297c:	f43f af41 	beq.w	8012802 <_printf_float+0xbe>
 8012980:	f04f 0800 	mov.w	r8, #0
 8012984:	f104 091a 	add.w	r9, r4, #26
 8012988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801298a:	3b01      	subs	r3, #1
 801298c:	4543      	cmp	r3, r8
 801298e:	dc09      	bgt.n	80129a4 <_printf_float+0x260>
 8012990:	6823      	ldr	r3, [r4, #0]
 8012992:	079b      	lsls	r3, r3, #30
 8012994:	f100 8107 	bmi.w	8012ba6 <_printf_float+0x462>
 8012998:	68e0      	ldr	r0, [r4, #12]
 801299a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801299c:	4298      	cmp	r0, r3
 801299e:	bfb8      	it	lt
 80129a0:	4618      	movlt	r0, r3
 80129a2:	e730      	b.n	8012806 <_printf_float+0xc2>
 80129a4:	2301      	movs	r3, #1
 80129a6:	464a      	mov	r2, r9
 80129a8:	4631      	mov	r1, r6
 80129aa:	4628      	mov	r0, r5
 80129ac:	47b8      	blx	r7
 80129ae:	3001      	adds	r0, #1
 80129b0:	f43f af27 	beq.w	8012802 <_printf_float+0xbe>
 80129b4:	f108 0801 	add.w	r8, r8, #1
 80129b8:	e7e6      	b.n	8012988 <_printf_float+0x244>
 80129ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dc39      	bgt.n	8012a34 <_printf_float+0x2f0>
 80129c0:	4a1b      	ldr	r2, [pc, #108]	; (8012a30 <_printf_float+0x2ec>)
 80129c2:	2301      	movs	r3, #1
 80129c4:	4631      	mov	r1, r6
 80129c6:	4628      	mov	r0, r5
 80129c8:	47b8      	blx	r7
 80129ca:	3001      	adds	r0, #1
 80129cc:	f43f af19 	beq.w	8012802 <_printf_float+0xbe>
 80129d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80129d4:	4313      	orrs	r3, r2
 80129d6:	d102      	bne.n	80129de <_printf_float+0x29a>
 80129d8:	6823      	ldr	r3, [r4, #0]
 80129da:	07d9      	lsls	r1, r3, #31
 80129dc:	d5d8      	bpl.n	8012990 <_printf_float+0x24c>
 80129de:	ee18 3a10 	vmov	r3, s16
 80129e2:	4652      	mov	r2, sl
 80129e4:	4631      	mov	r1, r6
 80129e6:	4628      	mov	r0, r5
 80129e8:	47b8      	blx	r7
 80129ea:	3001      	adds	r0, #1
 80129ec:	f43f af09 	beq.w	8012802 <_printf_float+0xbe>
 80129f0:	f04f 0900 	mov.w	r9, #0
 80129f4:	f104 0a1a 	add.w	sl, r4, #26
 80129f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129fa:	425b      	negs	r3, r3
 80129fc:	454b      	cmp	r3, r9
 80129fe:	dc01      	bgt.n	8012a04 <_printf_float+0x2c0>
 8012a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a02:	e792      	b.n	801292a <_printf_float+0x1e6>
 8012a04:	2301      	movs	r3, #1
 8012a06:	4652      	mov	r2, sl
 8012a08:	4631      	mov	r1, r6
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	47b8      	blx	r7
 8012a0e:	3001      	adds	r0, #1
 8012a10:	f43f aef7 	beq.w	8012802 <_printf_float+0xbe>
 8012a14:	f109 0901 	add.w	r9, r9, #1
 8012a18:	e7ee      	b.n	80129f8 <_printf_float+0x2b4>
 8012a1a:	bf00      	nop
 8012a1c:	7fefffff 	.word	0x7fefffff
 8012a20:	08017e1c 	.word	0x08017e1c
 8012a24:	08017e20 	.word	0x08017e20
 8012a28:	08017e24 	.word	0x08017e24
 8012a2c:	08017e28 	.word	0x08017e28
 8012a30:	08017e2c 	.word	0x08017e2c
 8012a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	bfa8      	it	ge
 8012a3c:	461a      	movge	r2, r3
 8012a3e:	2a00      	cmp	r2, #0
 8012a40:	4691      	mov	r9, r2
 8012a42:	dc37      	bgt.n	8012ab4 <_printf_float+0x370>
 8012a44:	f04f 0b00 	mov.w	fp, #0
 8012a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a4c:	f104 021a 	add.w	r2, r4, #26
 8012a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a52:	9305      	str	r3, [sp, #20]
 8012a54:	eba3 0309 	sub.w	r3, r3, r9
 8012a58:	455b      	cmp	r3, fp
 8012a5a:	dc33      	bgt.n	8012ac4 <_printf_float+0x380>
 8012a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a60:	429a      	cmp	r2, r3
 8012a62:	db3b      	blt.n	8012adc <_printf_float+0x398>
 8012a64:	6823      	ldr	r3, [r4, #0]
 8012a66:	07da      	lsls	r2, r3, #31
 8012a68:	d438      	bmi.n	8012adc <_printf_float+0x398>
 8012a6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012a6e:	eba2 0903 	sub.w	r9, r2, r3
 8012a72:	9b05      	ldr	r3, [sp, #20]
 8012a74:	1ad2      	subs	r2, r2, r3
 8012a76:	4591      	cmp	r9, r2
 8012a78:	bfa8      	it	ge
 8012a7a:	4691      	movge	r9, r2
 8012a7c:	f1b9 0f00 	cmp.w	r9, #0
 8012a80:	dc35      	bgt.n	8012aee <_printf_float+0x3aa>
 8012a82:	f04f 0800 	mov.w	r8, #0
 8012a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a8a:	f104 0a1a 	add.w	sl, r4, #26
 8012a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a92:	1a9b      	subs	r3, r3, r2
 8012a94:	eba3 0309 	sub.w	r3, r3, r9
 8012a98:	4543      	cmp	r3, r8
 8012a9a:	f77f af79 	ble.w	8012990 <_printf_float+0x24c>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	4652      	mov	r2, sl
 8012aa2:	4631      	mov	r1, r6
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	47b8      	blx	r7
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	f43f aeaa 	beq.w	8012802 <_printf_float+0xbe>
 8012aae:	f108 0801 	add.w	r8, r8, #1
 8012ab2:	e7ec      	b.n	8012a8e <_printf_float+0x34a>
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	4642      	mov	r2, r8
 8012aba:	4628      	mov	r0, r5
 8012abc:	47b8      	blx	r7
 8012abe:	3001      	adds	r0, #1
 8012ac0:	d1c0      	bne.n	8012a44 <_printf_float+0x300>
 8012ac2:	e69e      	b.n	8012802 <_printf_float+0xbe>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	4631      	mov	r1, r6
 8012ac8:	4628      	mov	r0, r5
 8012aca:	9205      	str	r2, [sp, #20]
 8012acc:	47b8      	blx	r7
 8012ace:	3001      	adds	r0, #1
 8012ad0:	f43f ae97 	beq.w	8012802 <_printf_float+0xbe>
 8012ad4:	9a05      	ldr	r2, [sp, #20]
 8012ad6:	f10b 0b01 	add.w	fp, fp, #1
 8012ada:	e7b9      	b.n	8012a50 <_printf_float+0x30c>
 8012adc:	ee18 3a10 	vmov	r3, s16
 8012ae0:	4652      	mov	r2, sl
 8012ae2:	4631      	mov	r1, r6
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	47b8      	blx	r7
 8012ae8:	3001      	adds	r0, #1
 8012aea:	d1be      	bne.n	8012a6a <_printf_float+0x326>
 8012aec:	e689      	b.n	8012802 <_printf_float+0xbe>
 8012aee:	9a05      	ldr	r2, [sp, #20]
 8012af0:	464b      	mov	r3, r9
 8012af2:	4442      	add	r2, r8
 8012af4:	4631      	mov	r1, r6
 8012af6:	4628      	mov	r0, r5
 8012af8:	47b8      	blx	r7
 8012afa:	3001      	adds	r0, #1
 8012afc:	d1c1      	bne.n	8012a82 <_printf_float+0x33e>
 8012afe:	e680      	b.n	8012802 <_printf_float+0xbe>
 8012b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b02:	2a01      	cmp	r2, #1
 8012b04:	dc01      	bgt.n	8012b0a <_printf_float+0x3c6>
 8012b06:	07db      	lsls	r3, r3, #31
 8012b08:	d53a      	bpl.n	8012b80 <_printf_float+0x43c>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	4642      	mov	r2, r8
 8012b0e:	4631      	mov	r1, r6
 8012b10:	4628      	mov	r0, r5
 8012b12:	47b8      	blx	r7
 8012b14:	3001      	adds	r0, #1
 8012b16:	f43f ae74 	beq.w	8012802 <_printf_float+0xbe>
 8012b1a:	ee18 3a10 	vmov	r3, s16
 8012b1e:	4652      	mov	r2, sl
 8012b20:	4631      	mov	r1, r6
 8012b22:	4628      	mov	r0, r5
 8012b24:	47b8      	blx	r7
 8012b26:	3001      	adds	r0, #1
 8012b28:	f43f ae6b 	beq.w	8012802 <_printf_float+0xbe>
 8012b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b30:	2200      	movs	r2, #0
 8012b32:	2300      	movs	r3, #0
 8012b34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012b38:	f7ed ffee 	bl	8000b18 <__aeabi_dcmpeq>
 8012b3c:	b9d8      	cbnz	r0, 8012b76 <_printf_float+0x432>
 8012b3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012b42:	f108 0201 	add.w	r2, r8, #1
 8012b46:	4631      	mov	r1, r6
 8012b48:	4628      	mov	r0, r5
 8012b4a:	47b8      	blx	r7
 8012b4c:	3001      	adds	r0, #1
 8012b4e:	d10e      	bne.n	8012b6e <_printf_float+0x42a>
 8012b50:	e657      	b.n	8012802 <_printf_float+0xbe>
 8012b52:	2301      	movs	r3, #1
 8012b54:	4652      	mov	r2, sl
 8012b56:	4631      	mov	r1, r6
 8012b58:	4628      	mov	r0, r5
 8012b5a:	47b8      	blx	r7
 8012b5c:	3001      	adds	r0, #1
 8012b5e:	f43f ae50 	beq.w	8012802 <_printf_float+0xbe>
 8012b62:	f108 0801 	add.w	r8, r8, #1
 8012b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	4543      	cmp	r3, r8
 8012b6c:	dcf1      	bgt.n	8012b52 <_printf_float+0x40e>
 8012b6e:	464b      	mov	r3, r9
 8012b70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012b74:	e6da      	b.n	801292c <_printf_float+0x1e8>
 8012b76:	f04f 0800 	mov.w	r8, #0
 8012b7a:	f104 0a1a 	add.w	sl, r4, #26
 8012b7e:	e7f2      	b.n	8012b66 <_printf_float+0x422>
 8012b80:	2301      	movs	r3, #1
 8012b82:	4642      	mov	r2, r8
 8012b84:	e7df      	b.n	8012b46 <_printf_float+0x402>
 8012b86:	2301      	movs	r3, #1
 8012b88:	464a      	mov	r2, r9
 8012b8a:	4631      	mov	r1, r6
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	47b8      	blx	r7
 8012b90:	3001      	adds	r0, #1
 8012b92:	f43f ae36 	beq.w	8012802 <_printf_float+0xbe>
 8012b96:	f108 0801 	add.w	r8, r8, #1
 8012b9a:	68e3      	ldr	r3, [r4, #12]
 8012b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b9e:	1a5b      	subs	r3, r3, r1
 8012ba0:	4543      	cmp	r3, r8
 8012ba2:	dcf0      	bgt.n	8012b86 <_printf_float+0x442>
 8012ba4:	e6f8      	b.n	8012998 <_printf_float+0x254>
 8012ba6:	f04f 0800 	mov.w	r8, #0
 8012baa:	f104 0919 	add.w	r9, r4, #25
 8012bae:	e7f4      	b.n	8012b9a <_printf_float+0x456>

08012bb0 <_printf_common>:
 8012bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb4:	4616      	mov	r6, r2
 8012bb6:	4699      	mov	r9, r3
 8012bb8:	688a      	ldr	r2, [r1, #8]
 8012bba:	690b      	ldr	r3, [r1, #16]
 8012bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	bfb8      	it	lt
 8012bc4:	4613      	movlt	r3, r2
 8012bc6:	6033      	str	r3, [r6, #0]
 8012bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012bcc:	4607      	mov	r7, r0
 8012bce:	460c      	mov	r4, r1
 8012bd0:	b10a      	cbz	r2, 8012bd6 <_printf_common+0x26>
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	6033      	str	r3, [r6, #0]
 8012bd6:	6823      	ldr	r3, [r4, #0]
 8012bd8:	0699      	lsls	r1, r3, #26
 8012bda:	bf42      	ittt	mi
 8012bdc:	6833      	ldrmi	r3, [r6, #0]
 8012bde:	3302      	addmi	r3, #2
 8012be0:	6033      	strmi	r3, [r6, #0]
 8012be2:	6825      	ldr	r5, [r4, #0]
 8012be4:	f015 0506 	ands.w	r5, r5, #6
 8012be8:	d106      	bne.n	8012bf8 <_printf_common+0x48>
 8012bea:	f104 0a19 	add.w	sl, r4, #25
 8012bee:	68e3      	ldr	r3, [r4, #12]
 8012bf0:	6832      	ldr	r2, [r6, #0]
 8012bf2:	1a9b      	subs	r3, r3, r2
 8012bf4:	42ab      	cmp	r3, r5
 8012bf6:	dc26      	bgt.n	8012c46 <_printf_common+0x96>
 8012bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012bfc:	1e13      	subs	r3, r2, #0
 8012bfe:	6822      	ldr	r2, [r4, #0]
 8012c00:	bf18      	it	ne
 8012c02:	2301      	movne	r3, #1
 8012c04:	0692      	lsls	r2, r2, #26
 8012c06:	d42b      	bmi.n	8012c60 <_printf_common+0xb0>
 8012c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c0c:	4649      	mov	r1, r9
 8012c0e:	4638      	mov	r0, r7
 8012c10:	47c0      	blx	r8
 8012c12:	3001      	adds	r0, #1
 8012c14:	d01e      	beq.n	8012c54 <_printf_common+0xa4>
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	6922      	ldr	r2, [r4, #16]
 8012c1a:	f003 0306 	and.w	r3, r3, #6
 8012c1e:	2b04      	cmp	r3, #4
 8012c20:	bf02      	ittt	eq
 8012c22:	68e5      	ldreq	r5, [r4, #12]
 8012c24:	6833      	ldreq	r3, [r6, #0]
 8012c26:	1aed      	subeq	r5, r5, r3
 8012c28:	68a3      	ldr	r3, [r4, #8]
 8012c2a:	bf0c      	ite	eq
 8012c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c30:	2500      	movne	r5, #0
 8012c32:	4293      	cmp	r3, r2
 8012c34:	bfc4      	itt	gt
 8012c36:	1a9b      	subgt	r3, r3, r2
 8012c38:	18ed      	addgt	r5, r5, r3
 8012c3a:	2600      	movs	r6, #0
 8012c3c:	341a      	adds	r4, #26
 8012c3e:	42b5      	cmp	r5, r6
 8012c40:	d11a      	bne.n	8012c78 <_printf_common+0xc8>
 8012c42:	2000      	movs	r0, #0
 8012c44:	e008      	b.n	8012c58 <_printf_common+0xa8>
 8012c46:	2301      	movs	r3, #1
 8012c48:	4652      	mov	r2, sl
 8012c4a:	4649      	mov	r1, r9
 8012c4c:	4638      	mov	r0, r7
 8012c4e:	47c0      	blx	r8
 8012c50:	3001      	adds	r0, #1
 8012c52:	d103      	bne.n	8012c5c <_printf_common+0xac>
 8012c54:	f04f 30ff 	mov.w	r0, #4294967295
 8012c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c5c:	3501      	adds	r5, #1
 8012c5e:	e7c6      	b.n	8012bee <_printf_common+0x3e>
 8012c60:	18e1      	adds	r1, r4, r3
 8012c62:	1c5a      	adds	r2, r3, #1
 8012c64:	2030      	movs	r0, #48	; 0x30
 8012c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c6a:	4422      	add	r2, r4
 8012c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c74:	3302      	adds	r3, #2
 8012c76:	e7c7      	b.n	8012c08 <_printf_common+0x58>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	4622      	mov	r2, r4
 8012c7c:	4649      	mov	r1, r9
 8012c7e:	4638      	mov	r0, r7
 8012c80:	47c0      	blx	r8
 8012c82:	3001      	adds	r0, #1
 8012c84:	d0e6      	beq.n	8012c54 <_printf_common+0xa4>
 8012c86:	3601      	adds	r6, #1
 8012c88:	e7d9      	b.n	8012c3e <_printf_common+0x8e>
	...

08012c8c <_printf_i>:
 8012c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c90:	7e0f      	ldrb	r7, [r1, #24]
 8012c92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c94:	2f78      	cmp	r7, #120	; 0x78
 8012c96:	4691      	mov	r9, r2
 8012c98:	4680      	mov	r8, r0
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	469a      	mov	sl, r3
 8012c9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012ca2:	d807      	bhi.n	8012cb4 <_printf_i+0x28>
 8012ca4:	2f62      	cmp	r7, #98	; 0x62
 8012ca6:	d80a      	bhi.n	8012cbe <_printf_i+0x32>
 8012ca8:	2f00      	cmp	r7, #0
 8012caa:	f000 80d4 	beq.w	8012e56 <_printf_i+0x1ca>
 8012cae:	2f58      	cmp	r7, #88	; 0x58
 8012cb0:	f000 80c0 	beq.w	8012e34 <_printf_i+0x1a8>
 8012cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012cbc:	e03a      	b.n	8012d34 <_printf_i+0xa8>
 8012cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012cc2:	2b15      	cmp	r3, #21
 8012cc4:	d8f6      	bhi.n	8012cb4 <_printf_i+0x28>
 8012cc6:	a101      	add	r1, pc, #4	; (adr r1, 8012ccc <_printf_i+0x40>)
 8012cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ccc:	08012d25 	.word	0x08012d25
 8012cd0:	08012d39 	.word	0x08012d39
 8012cd4:	08012cb5 	.word	0x08012cb5
 8012cd8:	08012cb5 	.word	0x08012cb5
 8012cdc:	08012cb5 	.word	0x08012cb5
 8012ce0:	08012cb5 	.word	0x08012cb5
 8012ce4:	08012d39 	.word	0x08012d39
 8012ce8:	08012cb5 	.word	0x08012cb5
 8012cec:	08012cb5 	.word	0x08012cb5
 8012cf0:	08012cb5 	.word	0x08012cb5
 8012cf4:	08012cb5 	.word	0x08012cb5
 8012cf8:	08012e3d 	.word	0x08012e3d
 8012cfc:	08012d65 	.word	0x08012d65
 8012d00:	08012df7 	.word	0x08012df7
 8012d04:	08012cb5 	.word	0x08012cb5
 8012d08:	08012cb5 	.word	0x08012cb5
 8012d0c:	08012e5f 	.word	0x08012e5f
 8012d10:	08012cb5 	.word	0x08012cb5
 8012d14:	08012d65 	.word	0x08012d65
 8012d18:	08012cb5 	.word	0x08012cb5
 8012d1c:	08012cb5 	.word	0x08012cb5
 8012d20:	08012dff 	.word	0x08012dff
 8012d24:	682b      	ldr	r3, [r5, #0]
 8012d26:	1d1a      	adds	r2, r3, #4
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	602a      	str	r2, [r5, #0]
 8012d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d34:	2301      	movs	r3, #1
 8012d36:	e09f      	b.n	8012e78 <_printf_i+0x1ec>
 8012d38:	6820      	ldr	r0, [r4, #0]
 8012d3a:	682b      	ldr	r3, [r5, #0]
 8012d3c:	0607      	lsls	r7, r0, #24
 8012d3e:	f103 0104 	add.w	r1, r3, #4
 8012d42:	6029      	str	r1, [r5, #0]
 8012d44:	d501      	bpl.n	8012d4a <_printf_i+0xbe>
 8012d46:	681e      	ldr	r6, [r3, #0]
 8012d48:	e003      	b.n	8012d52 <_printf_i+0xc6>
 8012d4a:	0646      	lsls	r6, r0, #25
 8012d4c:	d5fb      	bpl.n	8012d46 <_printf_i+0xba>
 8012d4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012d52:	2e00      	cmp	r6, #0
 8012d54:	da03      	bge.n	8012d5e <_printf_i+0xd2>
 8012d56:	232d      	movs	r3, #45	; 0x2d
 8012d58:	4276      	negs	r6, r6
 8012d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d5e:	485a      	ldr	r0, [pc, #360]	; (8012ec8 <_printf_i+0x23c>)
 8012d60:	230a      	movs	r3, #10
 8012d62:	e012      	b.n	8012d8a <_printf_i+0xfe>
 8012d64:	682b      	ldr	r3, [r5, #0]
 8012d66:	6820      	ldr	r0, [r4, #0]
 8012d68:	1d19      	adds	r1, r3, #4
 8012d6a:	6029      	str	r1, [r5, #0]
 8012d6c:	0605      	lsls	r5, r0, #24
 8012d6e:	d501      	bpl.n	8012d74 <_printf_i+0xe8>
 8012d70:	681e      	ldr	r6, [r3, #0]
 8012d72:	e002      	b.n	8012d7a <_printf_i+0xee>
 8012d74:	0641      	lsls	r1, r0, #25
 8012d76:	d5fb      	bpl.n	8012d70 <_printf_i+0xe4>
 8012d78:	881e      	ldrh	r6, [r3, #0]
 8012d7a:	4853      	ldr	r0, [pc, #332]	; (8012ec8 <_printf_i+0x23c>)
 8012d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8012d7e:	bf0c      	ite	eq
 8012d80:	2308      	moveq	r3, #8
 8012d82:	230a      	movne	r3, #10
 8012d84:	2100      	movs	r1, #0
 8012d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d8a:	6865      	ldr	r5, [r4, #4]
 8012d8c:	60a5      	str	r5, [r4, #8]
 8012d8e:	2d00      	cmp	r5, #0
 8012d90:	bfa2      	ittt	ge
 8012d92:	6821      	ldrge	r1, [r4, #0]
 8012d94:	f021 0104 	bicge.w	r1, r1, #4
 8012d98:	6021      	strge	r1, [r4, #0]
 8012d9a:	b90e      	cbnz	r6, 8012da0 <_printf_i+0x114>
 8012d9c:	2d00      	cmp	r5, #0
 8012d9e:	d04b      	beq.n	8012e38 <_printf_i+0x1ac>
 8012da0:	4615      	mov	r5, r2
 8012da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8012da6:	fb03 6711 	mls	r7, r3, r1, r6
 8012daa:	5dc7      	ldrb	r7, [r0, r7]
 8012dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012db0:	4637      	mov	r7, r6
 8012db2:	42bb      	cmp	r3, r7
 8012db4:	460e      	mov	r6, r1
 8012db6:	d9f4      	bls.n	8012da2 <_printf_i+0x116>
 8012db8:	2b08      	cmp	r3, #8
 8012dba:	d10b      	bne.n	8012dd4 <_printf_i+0x148>
 8012dbc:	6823      	ldr	r3, [r4, #0]
 8012dbe:	07de      	lsls	r6, r3, #31
 8012dc0:	d508      	bpl.n	8012dd4 <_printf_i+0x148>
 8012dc2:	6923      	ldr	r3, [r4, #16]
 8012dc4:	6861      	ldr	r1, [r4, #4]
 8012dc6:	4299      	cmp	r1, r3
 8012dc8:	bfde      	ittt	le
 8012dca:	2330      	movle	r3, #48	; 0x30
 8012dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012dd4:	1b52      	subs	r2, r2, r5
 8012dd6:	6122      	str	r2, [r4, #16]
 8012dd8:	f8cd a000 	str.w	sl, [sp]
 8012ddc:	464b      	mov	r3, r9
 8012dde:	aa03      	add	r2, sp, #12
 8012de0:	4621      	mov	r1, r4
 8012de2:	4640      	mov	r0, r8
 8012de4:	f7ff fee4 	bl	8012bb0 <_printf_common>
 8012de8:	3001      	adds	r0, #1
 8012dea:	d14a      	bne.n	8012e82 <_printf_i+0x1f6>
 8012dec:	f04f 30ff 	mov.w	r0, #4294967295
 8012df0:	b004      	add	sp, #16
 8012df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012df6:	6823      	ldr	r3, [r4, #0]
 8012df8:	f043 0320 	orr.w	r3, r3, #32
 8012dfc:	6023      	str	r3, [r4, #0]
 8012dfe:	4833      	ldr	r0, [pc, #204]	; (8012ecc <_printf_i+0x240>)
 8012e00:	2778      	movs	r7, #120	; 0x78
 8012e02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012e06:	6823      	ldr	r3, [r4, #0]
 8012e08:	6829      	ldr	r1, [r5, #0]
 8012e0a:	061f      	lsls	r7, r3, #24
 8012e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012e10:	d402      	bmi.n	8012e18 <_printf_i+0x18c>
 8012e12:	065f      	lsls	r7, r3, #25
 8012e14:	bf48      	it	mi
 8012e16:	b2b6      	uxthmi	r6, r6
 8012e18:	07df      	lsls	r7, r3, #31
 8012e1a:	bf48      	it	mi
 8012e1c:	f043 0320 	orrmi.w	r3, r3, #32
 8012e20:	6029      	str	r1, [r5, #0]
 8012e22:	bf48      	it	mi
 8012e24:	6023      	strmi	r3, [r4, #0]
 8012e26:	b91e      	cbnz	r6, 8012e30 <_printf_i+0x1a4>
 8012e28:	6823      	ldr	r3, [r4, #0]
 8012e2a:	f023 0320 	bic.w	r3, r3, #32
 8012e2e:	6023      	str	r3, [r4, #0]
 8012e30:	2310      	movs	r3, #16
 8012e32:	e7a7      	b.n	8012d84 <_printf_i+0xf8>
 8012e34:	4824      	ldr	r0, [pc, #144]	; (8012ec8 <_printf_i+0x23c>)
 8012e36:	e7e4      	b.n	8012e02 <_printf_i+0x176>
 8012e38:	4615      	mov	r5, r2
 8012e3a:	e7bd      	b.n	8012db8 <_printf_i+0x12c>
 8012e3c:	682b      	ldr	r3, [r5, #0]
 8012e3e:	6826      	ldr	r6, [r4, #0]
 8012e40:	6961      	ldr	r1, [r4, #20]
 8012e42:	1d18      	adds	r0, r3, #4
 8012e44:	6028      	str	r0, [r5, #0]
 8012e46:	0635      	lsls	r5, r6, #24
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	d501      	bpl.n	8012e50 <_printf_i+0x1c4>
 8012e4c:	6019      	str	r1, [r3, #0]
 8012e4e:	e002      	b.n	8012e56 <_printf_i+0x1ca>
 8012e50:	0670      	lsls	r0, r6, #25
 8012e52:	d5fb      	bpl.n	8012e4c <_printf_i+0x1c0>
 8012e54:	8019      	strh	r1, [r3, #0]
 8012e56:	2300      	movs	r3, #0
 8012e58:	6123      	str	r3, [r4, #16]
 8012e5a:	4615      	mov	r5, r2
 8012e5c:	e7bc      	b.n	8012dd8 <_printf_i+0x14c>
 8012e5e:	682b      	ldr	r3, [r5, #0]
 8012e60:	1d1a      	adds	r2, r3, #4
 8012e62:	602a      	str	r2, [r5, #0]
 8012e64:	681d      	ldr	r5, [r3, #0]
 8012e66:	6862      	ldr	r2, [r4, #4]
 8012e68:	2100      	movs	r1, #0
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	f7ed f9d8 	bl	8000220 <memchr>
 8012e70:	b108      	cbz	r0, 8012e76 <_printf_i+0x1ea>
 8012e72:	1b40      	subs	r0, r0, r5
 8012e74:	6060      	str	r0, [r4, #4]
 8012e76:	6863      	ldr	r3, [r4, #4]
 8012e78:	6123      	str	r3, [r4, #16]
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e80:	e7aa      	b.n	8012dd8 <_printf_i+0x14c>
 8012e82:	6923      	ldr	r3, [r4, #16]
 8012e84:	462a      	mov	r2, r5
 8012e86:	4649      	mov	r1, r9
 8012e88:	4640      	mov	r0, r8
 8012e8a:	47d0      	blx	sl
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	d0ad      	beq.n	8012dec <_printf_i+0x160>
 8012e90:	6823      	ldr	r3, [r4, #0]
 8012e92:	079b      	lsls	r3, r3, #30
 8012e94:	d413      	bmi.n	8012ebe <_printf_i+0x232>
 8012e96:	68e0      	ldr	r0, [r4, #12]
 8012e98:	9b03      	ldr	r3, [sp, #12]
 8012e9a:	4298      	cmp	r0, r3
 8012e9c:	bfb8      	it	lt
 8012e9e:	4618      	movlt	r0, r3
 8012ea0:	e7a6      	b.n	8012df0 <_printf_i+0x164>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	4632      	mov	r2, r6
 8012ea6:	4649      	mov	r1, r9
 8012ea8:	4640      	mov	r0, r8
 8012eaa:	47d0      	blx	sl
 8012eac:	3001      	adds	r0, #1
 8012eae:	d09d      	beq.n	8012dec <_printf_i+0x160>
 8012eb0:	3501      	adds	r5, #1
 8012eb2:	68e3      	ldr	r3, [r4, #12]
 8012eb4:	9903      	ldr	r1, [sp, #12]
 8012eb6:	1a5b      	subs	r3, r3, r1
 8012eb8:	42ab      	cmp	r3, r5
 8012eba:	dcf2      	bgt.n	8012ea2 <_printf_i+0x216>
 8012ebc:	e7eb      	b.n	8012e96 <_printf_i+0x20a>
 8012ebe:	2500      	movs	r5, #0
 8012ec0:	f104 0619 	add.w	r6, r4, #25
 8012ec4:	e7f5      	b.n	8012eb2 <_printf_i+0x226>
 8012ec6:	bf00      	nop
 8012ec8:	08017e2e 	.word	0x08017e2e
 8012ecc:	08017e3f 	.word	0x08017e3f

08012ed0 <_scanf_float>:
 8012ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ed4:	b087      	sub	sp, #28
 8012ed6:	4617      	mov	r7, r2
 8012ed8:	9303      	str	r3, [sp, #12]
 8012eda:	688b      	ldr	r3, [r1, #8]
 8012edc:	1e5a      	subs	r2, r3, #1
 8012ede:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012ee2:	bf83      	ittte	hi
 8012ee4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012ee8:	195b      	addhi	r3, r3, r5
 8012eea:	9302      	strhi	r3, [sp, #8]
 8012eec:	2300      	movls	r3, #0
 8012eee:	bf86      	itte	hi
 8012ef0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012ef4:	608b      	strhi	r3, [r1, #8]
 8012ef6:	9302      	strls	r3, [sp, #8]
 8012ef8:	680b      	ldr	r3, [r1, #0]
 8012efa:	468b      	mov	fp, r1
 8012efc:	2500      	movs	r5, #0
 8012efe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012f02:	f84b 3b1c 	str.w	r3, [fp], #28
 8012f06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012f0a:	4680      	mov	r8, r0
 8012f0c:	460c      	mov	r4, r1
 8012f0e:	465e      	mov	r6, fp
 8012f10:	46aa      	mov	sl, r5
 8012f12:	46a9      	mov	r9, r5
 8012f14:	9501      	str	r5, [sp, #4]
 8012f16:	68a2      	ldr	r2, [r4, #8]
 8012f18:	b152      	cbz	r2, 8012f30 <_scanf_float+0x60>
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b4e      	cmp	r3, #78	; 0x4e
 8012f20:	d864      	bhi.n	8012fec <_scanf_float+0x11c>
 8012f22:	2b40      	cmp	r3, #64	; 0x40
 8012f24:	d83c      	bhi.n	8012fa0 <_scanf_float+0xd0>
 8012f26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012f2a:	b2c8      	uxtb	r0, r1
 8012f2c:	280e      	cmp	r0, #14
 8012f2e:	d93a      	bls.n	8012fa6 <_scanf_float+0xd6>
 8012f30:	f1b9 0f00 	cmp.w	r9, #0
 8012f34:	d003      	beq.n	8012f3e <_scanf_float+0x6e>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f3c:	6023      	str	r3, [r4, #0]
 8012f3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f42:	f1ba 0f01 	cmp.w	sl, #1
 8012f46:	f200 8113 	bhi.w	8013170 <_scanf_float+0x2a0>
 8012f4a:	455e      	cmp	r6, fp
 8012f4c:	f200 8105 	bhi.w	801315a <_scanf_float+0x28a>
 8012f50:	2501      	movs	r5, #1
 8012f52:	4628      	mov	r0, r5
 8012f54:	b007      	add	sp, #28
 8012f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012f5e:	2a0d      	cmp	r2, #13
 8012f60:	d8e6      	bhi.n	8012f30 <_scanf_float+0x60>
 8012f62:	a101      	add	r1, pc, #4	; (adr r1, 8012f68 <_scanf_float+0x98>)
 8012f64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012f68:	080130a7 	.word	0x080130a7
 8012f6c:	08012f31 	.word	0x08012f31
 8012f70:	08012f31 	.word	0x08012f31
 8012f74:	08012f31 	.word	0x08012f31
 8012f78:	08013107 	.word	0x08013107
 8012f7c:	080130df 	.word	0x080130df
 8012f80:	08012f31 	.word	0x08012f31
 8012f84:	08012f31 	.word	0x08012f31
 8012f88:	080130b5 	.word	0x080130b5
 8012f8c:	08012f31 	.word	0x08012f31
 8012f90:	08012f31 	.word	0x08012f31
 8012f94:	08012f31 	.word	0x08012f31
 8012f98:	08012f31 	.word	0x08012f31
 8012f9c:	0801306d 	.word	0x0801306d
 8012fa0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012fa4:	e7db      	b.n	8012f5e <_scanf_float+0x8e>
 8012fa6:	290e      	cmp	r1, #14
 8012fa8:	d8c2      	bhi.n	8012f30 <_scanf_float+0x60>
 8012faa:	a001      	add	r0, pc, #4	; (adr r0, 8012fb0 <_scanf_float+0xe0>)
 8012fac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012fb0:	0801305f 	.word	0x0801305f
 8012fb4:	08012f31 	.word	0x08012f31
 8012fb8:	0801305f 	.word	0x0801305f
 8012fbc:	080130f3 	.word	0x080130f3
 8012fc0:	08012f31 	.word	0x08012f31
 8012fc4:	0801300d 	.word	0x0801300d
 8012fc8:	08013049 	.word	0x08013049
 8012fcc:	08013049 	.word	0x08013049
 8012fd0:	08013049 	.word	0x08013049
 8012fd4:	08013049 	.word	0x08013049
 8012fd8:	08013049 	.word	0x08013049
 8012fdc:	08013049 	.word	0x08013049
 8012fe0:	08013049 	.word	0x08013049
 8012fe4:	08013049 	.word	0x08013049
 8012fe8:	08013049 	.word	0x08013049
 8012fec:	2b6e      	cmp	r3, #110	; 0x6e
 8012fee:	d809      	bhi.n	8013004 <_scanf_float+0x134>
 8012ff0:	2b60      	cmp	r3, #96	; 0x60
 8012ff2:	d8b2      	bhi.n	8012f5a <_scanf_float+0x8a>
 8012ff4:	2b54      	cmp	r3, #84	; 0x54
 8012ff6:	d077      	beq.n	80130e8 <_scanf_float+0x218>
 8012ff8:	2b59      	cmp	r3, #89	; 0x59
 8012ffa:	d199      	bne.n	8012f30 <_scanf_float+0x60>
 8012ffc:	2d07      	cmp	r5, #7
 8012ffe:	d197      	bne.n	8012f30 <_scanf_float+0x60>
 8013000:	2508      	movs	r5, #8
 8013002:	e029      	b.n	8013058 <_scanf_float+0x188>
 8013004:	2b74      	cmp	r3, #116	; 0x74
 8013006:	d06f      	beq.n	80130e8 <_scanf_float+0x218>
 8013008:	2b79      	cmp	r3, #121	; 0x79
 801300a:	e7f6      	b.n	8012ffa <_scanf_float+0x12a>
 801300c:	6821      	ldr	r1, [r4, #0]
 801300e:	05c8      	lsls	r0, r1, #23
 8013010:	d51a      	bpl.n	8013048 <_scanf_float+0x178>
 8013012:	9b02      	ldr	r3, [sp, #8]
 8013014:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013018:	6021      	str	r1, [r4, #0]
 801301a:	f109 0901 	add.w	r9, r9, #1
 801301e:	b11b      	cbz	r3, 8013028 <_scanf_float+0x158>
 8013020:	3b01      	subs	r3, #1
 8013022:	3201      	adds	r2, #1
 8013024:	9302      	str	r3, [sp, #8]
 8013026:	60a2      	str	r2, [r4, #8]
 8013028:	68a3      	ldr	r3, [r4, #8]
 801302a:	3b01      	subs	r3, #1
 801302c:	60a3      	str	r3, [r4, #8]
 801302e:	6923      	ldr	r3, [r4, #16]
 8013030:	3301      	adds	r3, #1
 8013032:	6123      	str	r3, [r4, #16]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	3b01      	subs	r3, #1
 8013038:	2b00      	cmp	r3, #0
 801303a:	607b      	str	r3, [r7, #4]
 801303c:	f340 8084 	ble.w	8013148 <_scanf_float+0x278>
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	3301      	adds	r3, #1
 8013044:	603b      	str	r3, [r7, #0]
 8013046:	e766      	b.n	8012f16 <_scanf_float+0x46>
 8013048:	eb1a 0f05 	cmn.w	sl, r5
 801304c:	f47f af70 	bne.w	8012f30 <_scanf_float+0x60>
 8013050:	6822      	ldr	r2, [r4, #0]
 8013052:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013056:	6022      	str	r2, [r4, #0]
 8013058:	f806 3b01 	strb.w	r3, [r6], #1
 801305c:	e7e4      	b.n	8013028 <_scanf_float+0x158>
 801305e:	6822      	ldr	r2, [r4, #0]
 8013060:	0610      	lsls	r0, r2, #24
 8013062:	f57f af65 	bpl.w	8012f30 <_scanf_float+0x60>
 8013066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801306a:	e7f4      	b.n	8013056 <_scanf_float+0x186>
 801306c:	f1ba 0f00 	cmp.w	sl, #0
 8013070:	d10e      	bne.n	8013090 <_scanf_float+0x1c0>
 8013072:	f1b9 0f00 	cmp.w	r9, #0
 8013076:	d10e      	bne.n	8013096 <_scanf_float+0x1c6>
 8013078:	6822      	ldr	r2, [r4, #0]
 801307a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801307e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013082:	d108      	bne.n	8013096 <_scanf_float+0x1c6>
 8013084:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013088:	6022      	str	r2, [r4, #0]
 801308a:	f04f 0a01 	mov.w	sl, #1
 801308e:	e7e3      	b.n	8013058 <_scanf_float+0x188>
 8013090:	f1ba 0f02 	cmp.w	sl, #2
 8013094:	d055      	beq.n	8013142 <_scanf_float+0x272>
 8013096:	2d01      	cmp	r5, #1
 8013098:	d002      	beq.n	80130a0 <_scanf_float+0x1d0>
 801309a:	2d04      	cmp	r5, #4
 801309c:	f47f af48 	bne.w	8012f30 <_scanf_float+0x60>
 80130a0:	3501      	adds	r5, #1
 80130a2:	b2ed      	uxtb	r5, r5
 80130a4:	e7d8      	b.n	8013058 <_scanf_float+0x188>
 80130a6:	f1ba 0f01 	cmp.w	sl, #1
 80130aa:	f47f af41 	bne.w	8012f30 <_scanf_float+0x60>
 80130ae:	f04f 0a02 	mov.w	sl, #2
 80130b2:	e7d1      	b.n	8013058 <_scanf_float+0x188>
 80130b4:	b97d      	cbnz	r5, 80130d6 <_scanf_float+0x206>
 80130b6:	f1b9 0f00 	cmp.w	r9, #0
 80130ba:	f47f af3c 	bne.w	8012f36 <_scanf_float+0x66>
 80130be:	6822      	ldr	r2, [r4, #0]
 80130c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80130c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80130c8:	f47f af39 	bne.w	8012f3e <_scanf_float+0x6e>
 80130cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80130d0:	6022      	str	r2, [r4, #0]
 80130d2:	2501      	movs	r5, #1
 80130d4:	e7c0      	b.n	8013058 <_scanf_float+0x188>
 80130d6:	2d03      	cmp	r5, #3
 80130d8:	d0e2      	beq.n	80130a0 <_scanf_float+0x1d0>
 80130da:	2d05      	cmp	r5, #5
 80130dc:	e7de      	b.n	801309c <_scanf_float+0x1cc>
 80130de:	2d02      	cmp	r5, #2
 80130e0:	f47f af26 	bne.w	8012f30 <_scanf_float+0x60>
 80130e4:	2503      	movs	r5, #3
 80130e6:	e7b7      	b.n	8013058 <_scanf_float+0x188>
 80130e8:	2d06      	cmp	r5, #6
 80130ea:	f47f af21 	bne.w	8012f30 <_scanf_float+0x60>
 80130ee:	2507      	movs	r5, #7
 80130f0:	e7b2      	b.n	8013058 <_scanf_float+0x188>
 80130f2:	6822      	ldr	r2, [r4, #0]
 80130f4:	0591      	lsls	r1, r2, #22
 80130f6:	f57f af1b 	bpl.w	8012f30 <_scanf_float+0x60>
 80130fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80130fe:	6022      	str	r2, [r4, #0]
 8013100:	f8cd 9004 	str.w	r9, [sp, #4]
 8013104:	e7a8      	b.n	8013058 <_scanf_float+0x188>
 8013106:	6822      	ldr	r2, [r4, #0]
 8013108:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801310c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013110:	d006      	beq.n	8013120 <_scanf_float+0x250>
 8013112:	0550      	lsls	r0, r2, #21
 8013114:	f57f af0c 	bpl.w	8012f30 <_scanf_float+0x60>
 8013118:	f1b9 0f00 	cmp.w	r9, #0
 801311c:	f43f af0f 	beq.w	8012f3e <_scanf_float+0x6e>
 8013120:	0591      	lsls	r1, r2, #22
 8013122:	bf58      	it	pl
 8013124:	9901      	ldrpl	r1, [sp, #4]
 8013126:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801312a:	bf58      	it	pl
 801312c:	eba9 0101 	subpl.w	r1, r9, r1
 8013130:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013134:	bf58      	it	pl
 8013136:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801313a:	6022      	str	r2, [r4, #0]
 801313c:	f04f 0900 	mov.w	r9, #0
 8013140:	e78a      	b.n	8013058 <_scanf_float+0x188>
 8013142:	f04f 0a03 	mov.w	sl, #3
 8013146:	e787      	b.n	8013058 <_scanf_float+0x188>
 8013148:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801314c:	4639      	mov	r1, r7
 801314e:	4640      	mov	r0, r8
 8013150:	4798      	blx	r3
 8013152:	2800      	cmp	r0, #0
 8013154:	f43f aedf 	beq.w	8012f16 <_scanf_float+0x46>
 8013158:	e6ea      	b.n	8012f30 <_scanf_float+0x60>
 801315a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801315e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013162:	463a      	mov	r2, r7
 8013164:	4640      	mov	r0, r8
 8013166:	4798      	blx	r3
 8013168:	6923      	ldr	r3, [r4, #16]
 801316a:	3b01      	subs	r3, #1
 801316c:	6123      	str	r3, [r4, #16]
 801316e:	e6ec      	b.n	8012f4a <_scanf_float+0x7a>
 8013170:	1e6b      	subs	r3, r5, #1
 8013172:	2b06      	cmp	r3, #6
 8013174:	d825      	bhi.n	80131c2 <_scanf_float+0x2f2>
 8013176:	2d02      	cmp	r5, #2
 8013178:	d836      	bhi.n	80131e8 <_scanf_float+0x318>
 801317a:	455e      	cmp	r6, fp
 801317c:	f67f aee8 	bls.w	8012f50 <_scanf_float+0x80>
 8013180:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013184:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013188:	463a      	mov	r2, r7
 801318a:	4640      	mov	r0, r8
 801318c:	4798      	blx	r3
 801318e:	6923      	ldr	r3, [r4, #16]
 8013190:	3b01      	subs	r3, #1
 8013192:	6123      	str	r3, [r4, #16]
 8013194:	e7f1      	b.n	801317a <_scanf_float+0x2aa>
 8013196:	9802      	ldr	r0, [sp, #8]
 8013198:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801319c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80131a0:	9002      	str	r0, [sp, #8]
 80131a2:	463a      	mov	r2, r7
 80131a4:	4640      	mov	r0, r8
 80131a6:	4798      	blx	r3
 80131a8:	6923      	ldr	r3, [r4, #16]
 80131aa:	3b01      	subs	r3, #1
 80131ac:	6123      	str	r3, [r4, #16]
 80131ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131b2:	fa5f fa8a 	uxtb.w	sl, sl
 80131b6:	f1ba 0f02 	cmp.w	sl, #2
 80131ba:	d1ec      	bne.n	8013196 <_scanf_float+0x2c6>
 80131bc:	3d03      	subs	r5, #3
 80131be:	b2ed      	uxtb	r5, r5
 80131c0:	1b76      	subs	r6, r6, r5
 80131c2:	6823      	ldr	r3, [r4, #0]
 80131c4:	05da      	lsls	r2, r3, #23
 80131c6:	d52f      	bpl.n	8013228 <_scanf_float+0x358>
 80131c8:	055b      	lsls	r3, r3, #21
 80131ca:	d510      	bpl.n	80131ee <_scanf_float+0x31e>
 80131cc:	455e      	cmp	r6, fp
 80131ce:	f67f aebf 	bls.w	8012f50 <_scanf_float+0x80>
 80131d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80131da:	463a      	mov	r2, r7
 80131dc:	4640      	mov	r0, r8
 80131de:	4798      	blx	r3
 80131e0:	6923      	ldr	r3, [r4, #16]
 80131e2:	3b01      	subs	r3, #1
 80131e4:	6123      	str	r3, [r4, #16]
 80131e6:	e7f1      	b.n	80131cc <_scanf_float+0x2fc>
 80131e8:	46aa      	mov	sl, r5
 80131ea:	9602      	str	r6, [sp, #8]
 80131ec:	e7df      	b.n	80131ae <_scanf_float+0x2de>
 80131ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80131f2:	6923      	ldr	r3, [r4, #16]
 80131f4:	2965      	cmp	r1, #101	; 0x65
 80131f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80131fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80131fe:	6123      	str	r3, [r4, #16]
 8013200:	d00c      	beq.n	801321c <_scanf_float+0x34c>
 8013202:	2945      	cmp	r1, #69	; 0x45
 8013204:	d00a      	beq.n	801321c <_scanf_float+0x34c>
 8013206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801320a:	463a      	mov	r2, r7
 801320c:	4640      	mov	r0, r8
 801320e:	4798      	blx	r3
 8013210:	6923      	ldr	r3, [r4, #16]
 8013212:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013216:	3b01      	subs	r3, #1
 8013218:	1eb5      	subs	r5, r6, #2
 801321a:	6123      	str	r3, [r4, #16]
 801321c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013220:	463a      	mov	r2, r7
 8013222:	4640      	mov	r0, r8
 8013224:	4798      	blx	r3
 8013226:	462e      	mov	r6, r5
 8013228:	6825      	ldr	r5, [r4, #0]
 801322a:	f015 0510 	ands.w	r5, r5, #16
 801322e:	d158      	bne.n	80132e2 <_scanf_float+0x412>
 8013230:	7035      	strb	r5, [r6, #0]
 8013232:	6823      	ldr	r3, [r4, #0]
 8013234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801323c:	d11c      	bne.n	8013278 <_scanf_float+0x3a8>
 801323e:	9b01      	ldr	r3, [sp, #4]
 8013240:	454b      	cmp	r3, r9
 8013242:	eba3 0209 	sub.w	r2, r3, r9
 8013246:	d124      	bne.n	8013292 <_scanf_float+0x3c2>
 8013248:	2200      	movs	r2, #0
 801324a:	4659      	mov	r1, fp
 801324c:	4640      	mov	r0, r8
 801324e:	f002 fc2b 	bl	8015aa8 <_strtod_r>
 8013252:	9b03      	ldr	r3, [sp, #12]
 8013254:	6821      	ldr	r1, [r4, #0]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f011 0f02 	tst.w	r1, #2
 801325c:	ec57 6b10 	vmov	r6, r7, d0
 8013260:	f103 0204 	add.w	r2, r3, #4
 8013264:	d020      	beq.n	80132a8 <_scanf_float+0x3d8>
 8013266:	9903      	ldr	r1, [sp, #12]
 8013268:	600a      	str	r2, [r1, #0]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	e9c3 6700 	strd	r6, r7, [r3]
 8013270:	68e3      	ldr	r3, [r4, #12]
 8013272:	3301      	adds	r3, #1
 8013274:	60e3      	str	r3, [r4, #12]
 8013276:	e66c      	b.n	8012f52 <_scanf_float+0x82>
 8013278:	9b04      	ldr	r3, [sp, #16]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d0e4      	beq.n	8013248 <_scanf_float+0x378>
 801327e:	9905      	ldr	r1, [sp, #20]
 8013280:	230a      	movs	r3, #10
 8013282:	462a      	mov	r2, r5
 8013284:	3101      	adds	r1, #1
 8013286:	4640      	mov	r0, r8
 8013288:	f002 fc96 	bl	8015bb8 <_strtol_r>
 801328c:	9b04      	ldr	r3, [sp, #16]
 801328e:	9e05      	ldr	r6, [sp, #20]
 8013290:	1ac2      	subs	r2, r0, r3
 8013292:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013296:	429e      	cmp	r6, r3
 8013298:	bf28      	it	cs
 801329a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801329e:	4912      	ldr	r1, [pc, #72]	; (80132e8 <_scanf_float+0x418>)
 80132a0:	4630      	mov	r0, r6
 80132a2:	f000 f8f9 	bl	8013498 <siprintf>
 80132a6:	e7cf      	b.n	8013248 <_scanf_float+0x378>
 80132a8:	f011 0f04 	tst.w	r1, #4
 80132ac:	9903      	ldr	r1, [sp, #12]
 80132ae:	600a      	str	r2, [r1, #0]
 80132b0:	d1db      	bne.n	801326a <_scanf_float+0x39a>
 80132b2:	f8d3 8000 	ldr.w	r8, [r3]
 80132b6:	ee10 2a10 	vmov	r2, s0
 80132ba:	ee10 0a10 	vmov	r0, s0
 80132be:	463b      	mov	r3, r7
 80132c0:	4639      	mov	r1, r7
 80132c2:	f7ed fc5b 	bl	8000b7c <__aeabi_dcmpun>
 80132c6:	b128      	cbz	r0, 80132d4 <_scanf_float+0x404>
 80132c8:	4808      	ldr	r0, [pc, #32]	; (80132ec <_scanf_float+0x41c>)
 80132ca:	f000 fa67 	bl	801379c <nanf>
 80132ce:	ed88 0a00 	vstr	s0, [r8]
 80132d2:	e7cd      	b.n	8013270 <_scanf_float+0x3a0>
 80132d4:	4630      	mov	r0, r6
 80132d6:	4639      	mov	r1, r7
 80132d8:	f7ed fcae 	bl	8000c38 <__aeabi_d2f>
 80132dc:	f8c8 0000 	str.w	r0, [r8]
 80132e0:	e7c6      	b.n	8013270 <_scanf_float+0x3a0>
 80132e2:	2500      	movs	r5, #0
 80132e4:	e635      	b.n	8012f52 <_scanf_float+0x82>
 80132e6:	bf00      	nop
 80132e8:	08017e50 	.word	0x08017e50
 80132ec:	08017e1b 	.word	0x08017e1b

080132f0 <std>:
 80132f0:	2300      	movs	r3, #0
 80132f2:	b510      	push	{r4, lr}
 80132f4:	4604      	mov	r4, r0
 80132f6:	e9c0 3300 	strd	r3, r3, [r0]
 80132fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132fe:	6083      	str	r3, [r0, #8]
 8013300:	8181      	strh	r1, [r0, #12]
 8013302:	6643      	str	r3, [r0, #100]	; 0x64
 8013304:	81c2      	strh	r2, [r0, #14]
 8013306:	6183      	str	r3, [r0, #24]
 8013308:	4619      	mov	r1, r3
 801330a:	2208      	movs	r2, #8
 801330c:	305c      	adds	r0, #92	; 0x5c
 801330e:	f000 f950 	bl	80135b2 <memset>
 8013312:	4b0d      	ldr	r3, [pc, #52]	; (8013348 <std+0x58>)
 8013314:	6263      	str	r3, [r4, #36]	; 0x24
 8013316:	4b0d      	ldr	r3, [pc, #52]	; (801334c <std+0x5c>)
 8013318:	62a3      	str	r3, [r4, #40]	; 0x28
 801331a:	4b0d      	ldr	r3, [pc, #52]	; (8013350 <std+0x60>)
 801331c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801331e:	4b0d      	ldr	r3, [pc, #52]	; (8013354 <std+0x64>)
 8013320:	6323      	str	r3, [r4, #48]	; 0x30
 8013322:	4b0d      	ldr	r3, [pc, #52]	; (8013358 <std+0x68>)
 8013324:	6224      	str	r4, [r4, #32]
 8013326:	429c      	cmp	r4, r3
 8013328:	d006      	beq.n	8013338 <std+0x48>
 801332a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801332e:	4294      	cmp	r4, r2
 8013330:	d002      	beq.n	8013338 <std+0x48>
 8013332:	33d0      	adds	r3, #208	; 0xd0
 8013334:	429c      	cmp	r4, r3
 8013336:	d105      	bne.n	8013344 <std+0x54>
 8013338:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013340:	f000 ba1a 	b.w	8013778 <__retarget_lock_init_recursive>
 8013344:	bd10      	pop	{r4, pc}
 8013346:	bf00      	nop
 8013348:	080134d9 	.word	0x080134d9
 801334c:	080134fb 	.word	0x080134fb
 8013350:	08013533 	.word	0x08013533
 8013354:	08013557 	.word	0x08013557
 8013358:	2000094c 	.word	0x2000094c

0801335c <stdio_exit_handler>:
 801335c:	4a02      	ldr	r2, [pc, #8]	; (8013368 <stdio_exit_handler+0xc>)
 801335e:	4903      	ldr	r1, [pc, #12]	; (801336c <stdio_exit_handler+0x10>)
 8013360:	4803      	ldr	r0, [pc, #12]	; (8013370 <stdio_exit_handler+0x14>)
 8013362:	f000 b87b 	b.w	801345c <_fwalk_sglue>
 8013366:	bf00      	nop
 8013368:	20000078 	.word	0x20000078
 801336c:	08016201 	.word	0x08016201
 8013370:	20000084 	.word	0x20000084

08013374 <cleanup_stdio>:
 8013374:	6841      	ldr	r1, [r0, #4]
 8013376:	4b0c      	ldr	r3, [pc, #48]	; (80133a8 <cleanup_stdio+0x34>)
 8013378:	4299      	cmp	r1, r3
 801337a:	b510      	push	{r4, lr}
 801337c:	4604      	mov	r4, r0
 801337e:	d001      	beq.n	8013384 <cleanup_stdio+0x10>
 8013380:	f002 ff3e 	bl	8016200 <_fflush_r>
 8013384:	68a1      	ldr	r1, [r4, #8]
 8013386:	4b09      	ldr	r3, [pc, #36]	; (80133ac <cleanup_stdio+0x38>)
 8013388:	4299      	cmp	r1, r3
 801338a:	d002      	beq.n	8013392 <cleanup_stdio+0x1e>
 801338c:	4620      	mov	r0, r4
 801338e:	f002 ff37 	bl	8016200 <_fflush_r>
 8013392:	68e1      	ldr	r1, [r4, #12]
 8013394:	4b06      	ldr	r3, [pc, #24]	; (80133b0 <cleanup_stdio+0x3c>)
 8013396:	4299      	cmp	r1, r3
 8013398:	d004      	beq.n	80133a4 <cleanup_stdio+0x30>
 801339a:	4620      	mov	r0, r4
 801339c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133a0:	f002 bf2e 	b.w	8016200 <_fflush_r>
 80133a4:	bd10      	pop	{r4, pc}
 80133a6:	bf00      	nop
 80133a8:	2000094c 	.word	0x2000094c
 80133ac:	200009b4 	.word	0x200009b4
 80133b0:	20000a1c 	.word	0x20000a1c

080133b4 <global_stdio_init.part.0>:
 80133b4:	b510      	push	{r4, lr}
 80133b6:	4b0b      	ldr	r3, [pc, #44]	; (80133e4 <global_stdio_init.part.0+0x30>)
 80133b8:	4c0b      	ldr	r4, [pc, #44]	; (80133e8 <global_stdio_init.part.0+0x34>)
 80133ba:	4a0c      	ldr	r2, [pc, #48]	; (80133ec <global_stdio_init.part.0+0x38>)
 80133bc:	601a      	str	r2, [r3, #0]
 80133be:	4620      	mov	r0, r4
 80133c0:	2200      	movs	r2, #0
 80133c2:	2104      	movs	r1, #4
 80133c4:	f7ff ff94 	bl	80132f0 <std>
 80133c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80133cc:	2201      	movs	r2, #1
 80133ce:	2109      	movs	r1, #9
 80133d0:	f7ff ff8e 	bl	80132f0 <std>
 80133d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80133d8:	2202      	movs	r2, #2
 80133da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133de:	2112      	movs	r1, #18
 80133e0:	f7ff bf86 	b.w	80132f0 <std>
 80133e4:	20000a84 	.word	0x20000a84
 80133e8:	2000094c 	.word	0x2000094c
 80133ec:	0801335d 	.word	0x0801335d

080133f0 <__sfp_lock_acquire>:
 80133f0:	4801      	ldr	r0, [pc, #4]	; (80133f8 <__sfp_lock_acquire+0x8>)
 80133f2:	f000 b9c2 	b.w	801377a <__retarget_lock_acquire_recursive>
 80133f6:	bf00      	nop
 80133f8:	20000a8d 	.word	0x20000a8d

080133fc <__sfp_lock_release>:
 80133fc:	4801      	ldr	r0, [pc, #4]	; (8013404 <__sfp_lock_release+0x8>)
 80133fe:	f000 b9bd 	b.w	801377c <__retarget_lock_release_recursive>
 8013402:	bf00      	nop
 8013404:	20000a8d 	.word	0x20000a8d

08013408 <__sinit>:
 8013408:	b510      	push	{r4, lr}
 801340a:	4604      	mov	r4, r0
 801340c:	f7ff fff0 	bl	80133f0 <__sfp_lock_acquire>
 8013410:	6a23      	ldr	r3, [r4, #32]
 8013412:	b11b      	cbz	r3, 801341c <__sinit+0x14>
 8013414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013418:	f7ff bff0 	b.w	80133fc <__sfp_lock_release>
 801341c:	4b04      	ldr	r3, [pc, #16]	; (8013430 <__sinit+0x28>)
 801341e:	6223      	str	r3, [r4, #32]
 8013420:	4b04      	ldr	r3, [pc, #16]	; (8013434 <__sinit+0x2c>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d1f5      	bne.n	8013414 <__sinit+0xc>
 8013428:	f7ff ffc4 	bl	80133b4 <global_stdio_init.part.0>
 801342c:	e7f2      	b.n	8013414 <__sinit+0xc>
 801342e:	bf00      	nop
 8013430:	08013375 	.word	0x08013375
 8013434:	20000a84 	.word	0x20000a84

08013438 <fiprintf>:
 8013438:	b40e      	push	{r1, r2, r3}
 801343a:	b503      	push	{r0, r1, lr}
 801343c:	4601      	mov	r1, r0
 801343e:	ab03      	add	r3, sp, #12
 8013440:	4805      	ldr	r0, [pc, #20]	; (8013458 <fiprintf+0x20>)
 8013442:	f853 2b04 	ldr.w	r2, [r3], #4
 8013446:	6800      	ldr	r0, [r0, #0]
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	f002 fd39 	bl	8015ec0 <_vfiprintf_r>
 801344e:	b002      	add	sp, #8
 8013450:	f85d eb04 	ldr.w	lr, [sp], #4
 8013454:	b003      	add	sp, #12
 8013456:	4770      	bx	lr
 8013458:	200000d0 	.word	0x200000d0

0801345c <_fwalk_sglue>:
 801345c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013460:	4607      	mov	r7, r0
 8013462:	4688      	mov	r8, r1
 8013464:	4614      	mov	r4, r2
 8013466:	2600      	movs	r6, #0
 8013468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801346c:	f1b9 0901 	subs.w	r9, r9, #1
 8013470:	d505      	bpl.n	801347e <_fwalk_sglue+0x22>
 8013472:	6824      	ldr	r4, [r4, #0]
 8013474:	2c00      	cmp	r4, #0
 8013476:	d1f7      	bne.n	8013468 <_fwalk_sglue+0xc>
 8013478:	4630      	mov	r0, r6
 801347a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801347e:	89ab      	ldrh	r3, [r5, #12]
 8013480:	2b01      	cmp	r3, #1
 8013482:	d907      	bls.n	8013494 <_fwalk_sglue+0x38>
 8013484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013488:	3301      	adds	r3, #1
 801348a:	d003      	beq.n	8013494 <_fwalk_sglue+0x38>
 801348c:	4629      	mov	r1, r5
 801348e:	4638      	mov	r0, r7
 8013490:	47c0      	blx	r8
 8013492:	4306      	orrs	r6, r0
 8013494:	3568      	adds	r5, #104	; 0x68
 8013496:	e7e9      	b.n	801346c <_fwalk_sglue+0x10>

08013498 <siprintf>:
 8013498:	b40e      	push	{r1, r2, r3}
 801349a:	b500      	push	{lr}
 801349c:	b09c      	sub	sp, #112	; 0x70
 801349e:	ab1d      	add	r3, sp, #116	; 0x74
 80134a0:	9002      	str	r0, [sp, #8]
 80134a2:	9006      	str	r0, [sp, #24]
 80134a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80134a8:	4809      	ldr	r0, [pc, #36]	; (80134d0 <siprintf+0x38>)
 80134aa:	9107      	str	r1, [sp, #28]
 80134ac:	9104      	str	r1, [sp, #16]
 80134ae:	4909      	ldr	r1, [pc, #36]	; (80134d4 <siprintf+0x3c>)
 80134b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80134b4:	9105      	str	r1, [sp, #20]
 80134b6:	6800      	ldr	r0, [r0, #0]
 80134b8:	9301      	str	r3, [sp, #4]
 80134ba:	a902      	add	r1, sp, #8
 80134bc:	f002 fbd8 	bl	8015c70 <_svfiprintf_r>
 80134c0:	9b02      	ldr	r3, [sp, #8]
 80134c2:	2200      	movs	r2, #0
 80134c4:	701a      	strb	r2, [r3, #0]
 80134c6:	b01c      	add	sp, #112	; 0x70
 80134c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80134cc:	b003      	add	sp, #12
 80134ce:	4770      	bx	lr
 80134d0:	200000d0 	.word	0x200000d0
 80134d4:	ffff0208 	.word	0xffff0208

080134d8 <__sread>:
 80134d8:	b510      	push	{r4, lr}
 80134da:	460c      	mov	r4, r1
 80134dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134e0:	f000 f8d8 	bl	8013694 <_read_r>
 80134e4:	2800      	cmp	r0, #0
 80134e6:	bfab      	itete	ge
 80134e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134ea:	89a3      	ldrhlt	r3, [r4, #12]
 80134ec:	181b      	addge	r3, r3, r0
 80134ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134f2:	bfac      	ite	ge
 80134f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80134f6:	81a3      	strhlt	r3, [r4, #12]
 80134f8:	bd10      	pop	{r4, pc}

080134fa <__swrite>:
 80134fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134fe:	461f      	mov	r7, r3
 8013500:	898b      	ldrh	r3, [r1, #12]
 8013502:	05db      	lsls	r3, r3, #23
 8013504:	4605      	mov	r5, r0
 8013506:	460c      	mov	r4, r1
 8013508:	4616      	mov	r6, r2
 801350a:	d505      	bpl.n	8013518 <__swrite+0x1e>
 801350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013510:	2302      	movs	r3, #2
 8013512:	2200      	movs	r2, #0
 8013514:	f000 f8ac 	bl	8013670 <_lseek_r>
 8013518:	89a3      	ldrh	r3, [r4, #12]
 801351a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801351e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013522:	81a3      	strh	r3, [r4, #12]
 8013524:	4632      	mov	r2, r6
 8013526:	463b      	mov	r3, r7
 8013528:	4628      	mov	r0, r5
 801352a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801352e:	f000 b8e7 	b.w	8013700 <_write_r>

08013532 <__sseek>:
 8013532:	b510      	push	{r4, lr}
 8013534:	460c      	mov	r4, r1
 8013536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801353a:	f000 f899 	bl	8013670 <_lseek_r>
 801353e:	1c43      	adds	r3, r0, #1
 8013540:	89a3      	ldrh	r3, [r4, #12]
 8013542:	bf15      	itete	ne
 8013544:	6560      	strne	r0, [r4, #84]	; 0x54
 8013546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801354a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801354e:	81a3      	strheq	r3, [r4, #12]
 8013550:	bf18      	it	ne
 8013552:	81a3      	strhne	r3, [r4, #12]
 8013554:	bd10      	pop	{r4, pc}

08013556 <__sclose>:
 8013556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801355a:	f000 b879 	b.w	8013650 <_close_r>

0801355e <memcmp>:
 801355e:	b510      	push	{r4, lr}
 8013560:	3901      	subs	r1, #1
 8013562:	4402      	add	r2, r0
 8013564:	4290      	cmp	r0, r2
 8013566:	d101      	bne.n	801356c <memcmp+0xe>
 8013568:	2000      	movs	r0, #0
 801356a:	e005      	b.n	8013578 <memcmp+0x1a>
 801356c:	7803      	ldrb	r3, [r0, #0]
 801356e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013572:	42a3      	cmp	r3, r4
 8013574:	d001      	beq.n	801357a <memcmp+0x1c>
 8013576:	1b18      	subs	r0, r3, r4
 8013578:	bd10      	pop	{r4, pc}
 801357a:	3001      	adds	r0, #1
 801357c:	e7f2      	b.n	8013564 <memcmp+0x6>

0801357e <memmove>:
 801357e:	4288      	cmp	r0, r1
 8013580:	b510      	push	{r4, lr}
 8013582:	eb01 0402 	add.w	r4, r1, r2
 8013586:	d902      	bls.n	801358e <memmove+0x10>
 8013588:	4284      	cmp	r4, r0
 801358a:	4623      	mov	r3, r4
 801358c:	d807      	bhi.n	801359e <memmove+0x20>
 801358e:	1e43      	subs	r3, r0, #1
 8013590:	42a1      	cmp	r1, r4
 8013592:	d008      	beq.n	80135a6 <memmove+0x28>
 8013594:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013598:	f803 2f01 	strb.w	r2, [r3, #1]!
 801359c:	e7f8      	b.n	8013590 <memmove+0x12>
 801359e:	4402      	add	r2, r0
 80135a0:	4601      	mov	r1, r0
 80135a2:	428a      	cmp	r2, r1
 80135a4:	d100      	bne.n	80135a8 <memmove+0x2a>
 80135a6:	bd10      	pop	{r4, pc}
 80135a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80135ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80135b0:	e7f7      	b.n	80135a2 <memmove+0x24>

080135b2 <memset>:
 80135b2:	4402      	add	r2, r0
 80135b4:	4603      	mov	r3, r0
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d100      	bne.n	80135bc <memset+0xa>
 80135ba:	4770      	bx	lr
 80135bc:	f803 1b01 	strb.w	r1, [r3], #1
 80135c0:	e7f9      	b.n	80135b6 <memset+0x4>

080135c2 <strncpy>:
 80135c2:	b510      	push	{r4, lr}
 80135c4:	3901      	subs	r1, #1
 80135c6:	4603      	mov	r3, r0
 80135c8:	b132      	cbz	r2, 80135d8 <strncpy+0x16>
 80135ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80135ce:	f803 4b01 	strb.w	r4, [r3], #1
 80135d2:	3a01      	subs	r2, #1
 80135d4:	2c00      	cmp	r4, #0
 80135d6:	d1f7      	bne.n	80135c8 <strncpy+0x6>
 80135d8:	441a      	add	r2, r3
 80135da:	2100      	movs	r1, #0
 80135dc:	4293      	cmp	r3, r2
 80135de:	d100      	bne.n	80135e2 <strncpy+0x20>
 80135e0:	bd10      	pop	{r4, pc}
 80135e2:	f803 1b01 	strb.w	r1, [r3], #1
 80135e6:	e7f9      	b.n	80135dc <strncpy+0x1a>

080135e8 <_raise_r>:
 80135e8:	291f      	cmp	r1, #31
 80135ea:	b538      	push	{r3, r4, r5, lr}
 80135ec:	4604      	mov	r4, r0
 80135ee:	460d      	mov	r5, r1
 80135f0:	d904      	bls.n	80135fc <_raise_r+0x14>
 80135f2:	2316      	movs	r3, #22
 80135f4:	6003      	str	r3, [r0, #0]
 80135f6:	f04f 30ff 	mov.w	r0, #4294967295
 80135fa:	bd38      	pop	{r3, r4, r5, pc}
 80135fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80135fe:	b112      	cbz	r2, 8013606 <_raise_r+0x1e>
 8013600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013604:	b94b      	cbnz	r3, 801361a <_raise_r+0x32>
 8013606:	4620      	mov	r0, r4
 8013608:	f000 f868 	bl	80136dc <_getpid_r>
 801360c:	462a      	mov	r2, r5
 801360e:	4601      	mov	r1, r0
 8013610:	4620      	mov	r0, r4
 8013612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013616:	f000 b84f 	b.w	80136b8 <_kill_r>
 801361a:	2b01      	cmp	r3, #1
 801361c:	d00a      	beq.n	8013634 <_raise_r+0x4c>
 801361e:	1c59      	adds	r1, r3, #1
 8013620:	d103      	bne.n	801362a <_raise_r+0x42>
 8013622:	2316      	movs	r3, #22
 8013624:	6003      	str	r3, [r0, #0]
 8013626:	2001      	movs	r0, #1
 8013628:	e7e7      	b.n	80135fa <_raise_r+0x12>
 801362a:	2400      	movs	r4, #0
 801362c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013630:	4628      	mov	r0, r5
 8013632:	4798      	blx	r3
 8013634:	2000      	movs	r0, #0
 8013636:	e7e0      	b.n	80135fa <_raise_r+0x12>

08013638 <raise>:
 8013638:	4b02      	ldr	r3, [pc, #8]	; (8013644 <raise+0xc>)
 801363a:	4601      	mov	r1, r0
 801363c:	6818      	ldr	r0, [r3, #0]
 801363e:	f7ff bfd3 	b.w	80135e8 <_raise_r>
 8013642:	bf00      	nop
 8013644:	200000d0 	.word	0x200000d0

08013648 <_localeconv_r>:
 8013648:	4800      	ldr	r0, [pc, #0]	; (801364c <_localeconv_r+0x4>)
 801364a:	4770      	bx	lr
 801364c:	200001c4 	.word	0x200001c4

08013650 <_close_r>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	4d06      	ldr	r5, [pc, #24]	; (801366c <_close_r+0x1c>)
 8013654:	2300      	movs	r3, #0
 8013656:	4604      	mov	r4, r0
 8013658:	4608      	mov	r0, r1
 801365a:	602b      	str	r3, [r5, #0]
 801365c:	f7f5 fb87 	bl	8008d6e <_close>
 8013660:	1c43      	adds	r3, r0, #1
 8013662:	d102      	bne.n	801366a <_close_r+0x1a>
 8013664:	682b      	ldr	r3, [r5, #0]
 8013666:	b103      	cbz	r3, 801366a <_close_r+0x1a>
 8013668:	6023      	str	r3, [r4, #0]
 801366a:	bd38      	pop	{r3, r4, r5, pc}
 801366c:	20000a88 	.word	0x20000a88

08013670 <_lseek_r>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	4d07      	ldr	r5, [pc, #28]	; (8013690 <_lseek_r+0x20>)
 8013674:	4604      	mov	r4, r0
 8013676:	4608      	mov	r0, r1
 8013678:	4611      	mov	r1, r2
 801367a:	2200      	movs	r2, #0
 801367c:	602a      	str	r2, [r5, #0]
 801367e:	461a      	mov	r2, r3
 8013680:	f7f5 fb9c 	bl	8008dbc <_lseek>
 8013684:	1c43      	adds	r3, r0, #1
 8013686:	d102      	bne.n	801368e <_lseek_r+0x1e>
 8013688:	682b      	ldr	r3, [r5, #0]
 801368a:	b103      	cbz	r3, 801368e <_lseek_r+0x1e>
 801368c:	6023      	str	r3, [r4, #0]
 801368e:	bd38      	pop	{r3, r4, r5, pc}
 8013690:	20000a88 	.word	0x20000a88

08013694 <_read_r>:
 8013694:	b538      	push	{r3, r4, r5, lr}
 8013696:	4d07      	ldr	r5, [pc, #28]	; (80136b4 <_read_r+0x20>)
 8013698:	4604      	mov	r4, r0
 801369a:	4608      	mov	r0, r1
 801369c:	4611      	mov	r1, r2
 801369e:	2200      	movs	r2, #0
 80136a0:	602a      	str	r2, [r5, #0]
 80136a2:	461a      	mov	r2, r3
 80136a4:	f7f5 fb2a 	bl	8008cfc <_read>
 80136a8:	1c43      	adds	r3, r0, #1
 80136aa:	d102      	bne.n	80136b2 <_read_r+0x1e>
 80136ac:	682b      	ldr	r3, [r5, #0]
 80136ae:	b103      	cbz	r3, 80136b2 <_read_r+0x1e>
 80136b0:	6023      	str	r3, [r4, #0]
 80136b2:	bd38      	pop	{r3, r4, r5, pc}
 80136b4:	20000a88 	.word	0x20000a88

080136b8 <_kill_r>:
 80136b8:	b538      	push	{r3, r4, r5, lr}
 80136ba:	4d07      	ldr	r5, [pc, #28]	; (80136d8 <_kill_r+0x20>)
 80136bc:	2300      	movs	r3, #0
 80136be:	4604      	mov	r4, r0
 80136c0:	4608      	mov	r0, r1
 80136c2:	4611      	mov	r1, r2
 80136c4:	602b      	str	r3, [r5, #0]
 80136c6:	f7f5 faff 	bl	8008cc8 <_kill>
 80136ca:	1c43      	adds	r3, r0, #1
 80136cc:	d102      	bne.n	80136d4 <_kill_r+0x1c>
 80136ce:	682b      	ldr	r3, [r5, #0]
 80136d0:	b103      	cbz	r3, 80136d4 <_kill_r+0x1c>
 80136d2:	6023      	str	r3, [r4, #0]
 80136d4:	bd38      	pop	{r3, r4, r5, pc}
 80136d6:	bf00      	nop
 80136d8:	20000a88 	.word	0x20000a88

080136dc <_getpid_r>:
 80136dc:	f7f5 baec 	b.w	8008cb8 <_getpid>

080136e0 <_sbrk_r>:
 80136e0:	b538      	push	{r3, r4, r5, lr}
 80136e2:	4d06      	ldr	r5, [pc, #24]	; (80136fc <_sbrk_r+0x1c>)
 80136e4:	2300      	movs	r3, #0
 80136e6:	4604      	mov	r4, r0
 80136e8:	4608      	mov	r0, r1
 80136ea:	602b      	str	r3, [r5, #0]
 80136ec:	f7f5 fb74 	bl	8008dd8 <_sbrk>
 80136f0:	1c43      	adds	r3, r0, #1
 80136f2:	d102      	bne.n	80136fa <_sbrk_r+0x1a>
 80136f4:	682b      	ldr	r3, [r5, #0]
 80136f6:	b103      	cbz	r3, 80136fa <_sbrk_r+0x1a>
 80136f8:	6023      	str	r3, [r4, #0]
 80136fa:	bd38      	pop	{r3, r4, r5, pc}
 80136fc:	20000a88 	.word	0x20000a88

08013700 <_write_r>:
 8013700:	b538      	push	{r3, r4, r5, lr}
 8013702:	4d07      	ldr	r5, [pc, #28]	; (8013720 <_write_r+0x20>)
 8013704:	4604      	mov	r4, r0
 8013706:	4608      	mov	r0, r1
 8013708:	4611      	mov	r1, r2
 801370a:	2200      	movs	r2, #0
 801370c:	602a      	str	r2, [r5, #0]
 801370e:	461a      	mov	r2, r3
 8013710:	f7f5 fb11 	bl	8008d36 <_write>
 8013714:	1c43      	adds	r3, r0, #1
 8013716:	d102      	bne.n	801371e <_write_r+0x1e>
 8013718:	682b      	ldr	r3, [r5, #0]
 801371a:	b103      	cbz	r3, 801371e <_write_r+0x1e>
 801371c:	6023      	str	r3, [r4, #0]
 801371e:	bd38      	pop	{r3, r4, r5, pc}
 8013720:	20000a88 	.word	0x20000a88

08013724 <__errno>:
 8013724:	4b01      	ldr	r3, [pc, #4]	; (801372c <__errno+0x8>)
 8013726:	6818      	ldr	r0, [r3, #0]
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop
 801372c:	200000d0 	.word	0x200000d0

08013730 <__libc_init_array>:
 8013730:	b570      	push	{r4, r5, r6, lr}
 8013732:	4d0d      	ldr	r5, [pc, #52]	; (8013768 <__libc_init_array+0x38>)
 8013734:	4c0d      	ldr	r4, [pc, #52]	; (801376c <__libc_init_array+0x3c>)
 8013736:	1b64      	subs	r4, r4, r5
 8013738:	10a4      	asrs	r4, r4, #2
 801373a:	2600      	movs	r6, #0
 801373c:	42a6      	cmp	r6, r4
 801373e:	d109      	bne.n	8013754 <__libc_init_array+0x24>
 8013740:	4d0b      	ldr	r5, [pc, #44]	; (8013770 <__libc_init_array+0x40>)
 8013742:	4c0c      	ldr	r4, [pc, #48]	; (8013774 <__libc_init_array+0x44>)
 8013744:	f003 fa7c 	bl	8016c40 <_init>
 8013748:	1b64      	subs	r4, r4, r5
 801374a:	10a4      	asrs	r4, r4, #2
 801374c:	2600      	movs	r6, #0
 801374e:	42a6      	cmp	r6, r4
 8013750:	d105      	bne.n	801375e <__libc_init_array+0x2e>
 8013752:	bd70      	pop	{r4, r5, r6, pc}
 8013754:	f855 3b04 	ldr.w	r3, [r5], #4
 8013758:	4798      	blx	r3
 801375a:	3601      	adds	r6, #1
 801375c:	e7ee      	b.n	801373c <__libc_init_array+0xc>
 801375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013762:	4798      	blx	r3
 8013764:	3601      	adds	r6, #1
 8013766:	e7f2      	b.n	801374e <__libc_init_array+0x1e>
 8013768:	08018214 	.word	0x08018214
 801376c:	08018214 	.word	0x08018214
 8013770:	08018214 	.word	0x08018214
 8013774:	08018224 	.word	0x08018224

08013778 <__retarget_lock_init_recursive>:
 8013778:	4770      	bx	lr

0801377a <__retarget_lock_acquire_recursive>:
 801377a:	4770      	bx	lr

0801377c <__retarget_lock_release_recursive>:
 801377c:	4770      	bx	lr

0801377e <memcpy>:
 801377e:	440a      	add	r2, r1
 8013780:	4291      	cmp	r1, r2
 8013782:	f100 33ff 	add.w	r3, r0, #4294967295
 8013786:	d100      	bne.n	801378a <memcpy+0xc>
 8013788:	4770      	bx	lr
 801378a:	b510      	push	{r4, lr}
 801378c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013794:	4291      	cmp	r1, r2
 8013796:	d1f9      	bne.n	801378c <memcpy+0xe>
 8013798:	bd10      	pop	{r4, pc}
	...

0801379c <nanf>:
 801379c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80137a4 <nanf+0x8>
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop
 80137a4:	7fc00000 	.word	0x7fc00000

080137a8 <quorem>:
 80137a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ac:	6903      	ldr	r3, [r0, #16]
 80137ae:	690c      	ldr	r4, [r1, #16]
 80137b0:	42a3      	cmp	r3, r4
 80137b2:	4607      	mov	r7, r0
 80137b4:	db7e      	blt.n	80138b4 <quorem+0x10c>
 80137b6:	3c01      	subs	r4, #1
 80137b8:	f101 0814 	add.w	r8, r1, #20
 80137bc:	f100 0514 	add.w	r5, r0, #20
 80137c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137c4:	9301      	str	r3, [sp, #4]
 80137c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80137ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137ce:	3301      	adds	r3, #1
 80137d0:	429a      	cmp	r2, r3
 80137d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80137d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80137da:	fbb2 f6f3 	udiv	r6, r2, r3
 80137de:	d331      	bcc.n	8013844 <quorem+0x9c>
 80137e0:	f04f 0e00 	mov.w	lr, #0
 80137e4:	4640      	mov	r0, r8
 80137e6:	46ac      	mov	ip, r5
 80137e8:	46f2      	mov	sl, lr
 80137ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80137ee:	b293      	uxth	r3, r2
 80137f0:	fb06 e303 	mla	r3, r6, r3, lr
 80137f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80137f8:	0c1a      	lsrs	r2, r3, #16
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	ebaa 0303 	sub.w	r3, sl, r3
 8013800:	f8dc a000 	ldr.w	sl, [ip]
 8013804:	fa13 f38a 	uxtah	r3, r3, sl
 8013808:	fb06 220e 	mla	r2, r6, lr, r2
 801380c:	9300      	str	r3, [sp, #0]
 801380e:	9b00      	ldr	r3, [sp, #0]
 8013810:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013814:	b292      	uxth	r2, r2
 8013816:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801381a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801381e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013822:	4581      	cmp	r9, r0
 8013824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013828:	f84c 3b04 	str.w	r3, [ip], #4
 801382c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013830:	d2db      	bcs.n	80137ea <quorem+0x42>
 8013832:	f855 300b 	ldr.w	r3, [r5, fp]
 8013836:	b92b      	cbnz	r3, 8013844 <quorem+0x9c>
 8013838:	9b01      	ldr	r3, [sp, #4]
 801383a:	3b04      	subs	r3, #4
 801383c:	429d      	cmp	r5, r3
 801383e:	461a      	mov	r2, r3
 8013840:	d32c      	bcc.n	801389c <quorem+0xf4>
 8013842:	613c      	str	r4, [r7, #16]
 8013844:	4638      	mov	r0, r7
 8013846:	f001 f93b 	bl	8014ac0 <__mcmp>
 801384a:	2800      	cmp	r0, #0
 801384c:	db22      	blt.n	8013894 <quorem+0xec>
 801384e:	3601      	adds	r6, #1
 8013850:	4629      	mov	r1, r5
 8013852:	2000      	movs	r0, #0
 8013854:	f858 2b04 	ldr.w	r2, [r8], #4
 8013858:	f8d1 c000 	ldr.w	ip, [r1]
 801385c:	b293      	uxth	r3, r2
 801385e:	1ac3      	subs	r3, r0, r3
 8013860:	0c12      	lsrs	r2, r2, #16
 8013862:	fa13 f38c 	uxtah	r3, r3, ip
 8013866:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801386a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801386e:	b29b      	uxth	r3, r3
 8013870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013874:	45c1      	cmp	r9, r8
 8013876:	f841 3b04 	str.w	r3, [r1], #4
 801387a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801387e:	d2e9      	bcs.n	8013854 <quorem+0xac>
 8013880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013888:	b922      	cbnz	r2, 8013894 <quorem+0xec>
 801388a:	3b04      	subs	r3, #4
 801388c:	429d      	cmp	r5, r3
 801388e:	461a      	mov	r2, r3
 8013890:	d30a      	bcc.n	80138a8 <quorem+0x100>
 8013892:	613c      	str	r4, [r7, #16]
 8013894:	4630      	mov	r0, r6
 8013896:	b003      	add	sp, #12
 8013898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801389c:	6812      	ldr	r2, [r2, #0]
 801389e:	3b04      	subs	r3, #4
 80138a0:	2a00      	cmp	r2, #0
 80138a2:	d1ce      	bne.n	8013842 <quorem+0x9a>
 80138a4:	3c01      	subs	r4, #1
 80138a6:	e7c9      	b.n	801383c <quorem+0x94>
 80138a8:	6812      	ldr	r2, [r2, #0]
 80138aa:	3b04      	subs	r3, #4
 80138ac:	2a00      	cmp	r2, #0
 80138ae:	d1f0      	bne.n	8013892 <quorem+0xea>
 80138b0:	3c01      	subs	r4, #1
 80138b2:	e7eb      	b.n	801388c <quorem+0xe4>
 80138b4:	2000      	movs	r0, #0
 80138b6:	e7ee      	b.n	8013896 <quorem+0xee>

080138b8 <_dtoa_r>:
 80138b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138bc:	ed2d 8b04 	vpush	{d8-d9}
 80138c0:	69c5      	ldr	r5, [r0, #28]
 80138c2:	b093      	sub	sp, #76	; 0x4c
 80138c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80138c8:	ec57 6b10 	vmov	r6, r7, d0
 80138cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80138d0:	9107      	str	r1, [sp, #28]
 80138d2:	4604      	mov	r4, r0
 80138d4:	920a      	str	r2, [sp, #40]	; 0x28
 80138d6:	930d      	str	r3, [sp, #52]	; 0x34
 80138d8:	b975      	cbnz	r5, 80138f8 <_dtoa_r+0x40>
 80138da:	2010      	movs	r0, #16
 80138dc:	f7fe fdd6 	bl	801248c <malloc>
 80138e0:	4602      	mov	r2, r0
 80138e2:	61e0      	str	r0, [r4, #28]
 80138e4:	b920      	cbnz	r0, 80138f0 <_dtoa_r+0x38>
 80138e6:	4bae      	ldr	r3, [pc, #696]	; (8013ba0 <_dtoa_r+0x2e8>)
 80138e8:	21ef      	movs	r1, #239	; 0xef
 80138ea:	48ae      	ldr	r0, [pc, #696]	; (8013ba4 <_dtoa_r+0x2ec>)
 80138ec:	f7fe fd9e 	bl	801242c <__assert_func>
 80138f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80138f4:	6005      	str	r5, [r0, #0]
 80138f6:	60c5      	str	r5, [r0, #12]
 80138f8:	69e3      	ldr	r3, [r4, #28]
 80138fa:	6819      	ldr	r1, [r3, #0]
 80138fc:	b151      	cbz	r1, 8013914 <_dtoa_r+0x5c>
 80138fe:	685a      	ldr	r2, [r3, #4]
 8013900:	604a      	str	r2, [r1, #4]
 8013902:	2301      	movs	r3, #1
 8013904:	4093      	lsls	r3, r2
 8013906:	608b      	str	r3, [r1, #8]
 8013908:	4620      	mov	r0, r4
 801390a:	f000 fe53 	bl	80145b4 <_Bfree>
 801390e:	69e3      	ldr	r3, [r4, #28]
 8013910:	2200      	movs	r2, #0
 8013912:	601a      	str	r2, [r3, #0]
 8013914:	1e3b      	subs	r3, r7, #0
 8013916:	bfbb      	ittet	lt
 8013918:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801391c:	9303      	strlt	r3, [sp, #12]
 801391e:	2300      	movge	r3, #0
 8013920:	2201      	movlt	r2, #1
 8013922:	bfac      	ite	ge
 8013924:	f8c8 3000 	strge.w	r3, [r8]
 8013928:	f8c8 2000 	strlt.w	r2, [r8]
 801392c:	4b9e      	ldr	r3, [pc, #632]	; (8013ba8 <_dtoa_r+0x2f0>)
 801392e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013932:	ea33 0308 	bics.w	r3, r3, r8
 8013936:	d11b      	bne.n	8013970 <_dtoa_r+0xb8>
 8013938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801393a:	f242 730f 	movw	r3, #9999	; 0x270f
 801393e:	6013      	str	r3, [r2, #0]
 8013940:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8013944:	4333      	orrs	r3, r6
 8013946:	f000 8593 	beq.w	8014470 <_dtoa_r+0xbb8>
 801394a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801394c:	b963      	cbnz	r3, 8013968 <_dtoa_r+0xb0>
 801394e:	4b97      	ldr	r3, [pc, #604]	; (8013bac <_dtoa_r+0x2f4>)
 8013950:	e027      	b.n	80139a2 <_dtoa_r+0xea>
 8013952:	4b97      	ldr	r3, [pc, #604]	; (8013bb0 <_dtoa_r+0x2f8>)
 8013954:	9300      	str	r3, [sp, #0]
 8013956:	3308      	adds	r3, #8
 8013958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801395a:	6013      	str	r3, [r2, #0]
 801395c:	9800      	ldr	r0, [sp, #0]
 801395e:	b013      	add	sp, #76	; 0x4c
 8013960:	ecbd 8b04 	vpop	{d8-d9}
 8013964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013968:	4b90      	ldr	r3, [pc, #576]	; (8013bac <_dtoa_r+0x2f4>)
 801396a:	9300      	str	r3, [sp, #0]
 801396c:	3303      	adds	r3, #3
 801396e:	e7f3      	b.n	8013958 <_dtoa_r+0xa0>
 8013970:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013974:	2200      	movs	r2, #0
 8013976:	ec51 0b17 	vmov	r0, r1, d7
 801397a:	eeb0 8a47 	vmov.f32	s16, s14
 801397e:	eef0 8a67 	vmov.f32	s17, s15
 8013982:	2300      	movs	r3, #0
 8013984:	f7ed f8c8 	bl	8000b18 <__aeabi_dcmpeq>
 8013988:	4681      	mov	r9, r0
 801398a:	b160      	cbz	r0, 80139a6 <_dtoa_r+0xee>
 801398c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801398e:	2301      	movs	r3, #1
 8013990:	6013      	str	r3, [r2, #0]
 8013992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013994:	2b00      	cmp	r3, #0
 8013996:	f000 8568 	beq.w	801446a <_dtoa_r+0xbb2>
 801399a:	4b86      	ldr	r3, [pc, #536]	; (8013bb4 <_dtoa_r+0x2fc>)
 801399c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801399e:	6013      	str	r3, [r2, #0]
 80139a0:	3b01      	subs	r3, #1
 80139a2:	9300      	str	r3, [sp, #0]
 80139a4:	e7da      	b.n	801395c <_dtoa_r+0xa4>
 80139a6:	aa10      	add	r2, sp, #64	; 0x40
 80139a8:	a911      	add	r1, sp, #68	; 0x44
 80139aa:	4620      	mov	r0, r4
 80139ac:	eeb0 0a48 	vmov.f32	s0, s16
 80139b0:	eef0 0a68 	vmov.f32	s1, s17
 80139b4:	f001 f99a 	bl	8014cec <__d2b>
 80139b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80139bc:	4682      	mov	sl, r0
 80139be:	2d00      	cmp	r5, #0
 80139c0:	d07f      	beq.n	8013ac2 <_dtoa_r+0x20a>
 80139c2:	ee18 3a90 	vmov	r3, s17
 80139c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80139ce:	ec51 0b18 	vmov	r0, r1, d8
 80139d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80139d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80139da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80139de:	4619      	mov	r1, r3
 80139e0:	2200      	movs	r2, #0
 80139e2:	4b75      	ldr	r3, [pc, #468]	; (8013bb8 <_dtoa_r+0x300>)
 80139e4:	f7ec fc78 	bl	80002d8 <__aeabi_dsub>
 80139e8:	a367      	add	r3, pc, #412	; (adr r3, 8013b88 <_dtoa_r+0x2d0>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	f7ec fe2b 	bl	8000648 <__aeabi_dmul>
 80139f2:	a367      	add	r3, pc, #412	; (adr r3, 8013b90 <_dtoa_r+0x2d8>)
 80139f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f8:	f7ec fc70 	bl	80002dc <__adddf3>
 80139fc:	4606      	mov	r6, r0
 80139fe:	4628      	mov	r0, r5
 8013a00:	460f      	mov	r7, r1
 8013a02:	f7ec fdb7 	bl	8000574 <__aeabi_i2d>
 8013a06:	a364      	add	r3, pc, #400	; (adr r3, 8013b98 <_dtoa_r+0x2e0>)
 8013a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0c:	f7ec fe1c 	bl	8000648 <__aeabi_dmul>
 8013a10:	4602      	mov	r2, r0
 8013a12:	460b      	mov	r3, r1
 8013a14:	4630      	mov	r0, r6
 8013a16:	4639      	mov	r1, r7
 8013a18:	f7ec fc60 	bl	80002dc <__adddf3>
 8013a1c:	4606      	mov	r6, r0
 8013a1e:	460f      	mov	r7, r1
 8013a20:	f7ed f8c2 	bl	8000ba8 <__aeabi_d2iz>
 8013a24:	2200      	movs	r2, #0
 8013a26:	4683      	mov	fp, r0
 8013a28:	2300      	movs	r3, #0
 8013a2a:	4630      	mov	r0, r6
 8013a2c:	4639      	mov	r1, r7
 8013a2e:	f7ed f87d 	bl	8000b2c <__aeabi_dcmplt>
 8013a32:	b148      	cbz	r0, 8013a48 <_dtoa_r+0x190>
 8013a34:	4658      	mov	r0, fp
 8013a36:	f7ec fd9d 	bl	8000574 <__aeabi_i2d>
 8013a3a:	4632      	mov	r2, r6
 8013a3c:	463b      	mov	r3, r7
 8013a3e:	f7ed f86b 	bl	8000b18 <__aeabi_dcmpeq>
 8013a42:	b908      	cbnz	r0, 8013a48 <_dtoa_r+0x190>
 8013a44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a48:	f1bb 0f16 	cmp.w	fp, #22
 8013a4c:	d857      	bhi.n	8013afe <_dtoa_r+0x246>
 8013a4e:	4b5b      	ldr	r3, [pc, #364]	; (8013bbc <_dtoa_r+0x304>)
 8013a50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a58:	ec51 0b18 	vmov	r0, r1, d8
 8013a5c:	f7ed f866 	bl	8000b2c <__aeabi_dcmplt>
 8013a60:	2800      	cmp	r0, #0
 8013a62:	d04e      	beq.n	8013b02 <_dtoa_r+0x24a>
 8013a64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a68:	2300      	movs	r3, #0
 8013a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8013a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a6e:	1b5b      	subs	r3, r3, r5
 8013a70:	1e5a      	subs	r2, r3, #1
 8013a72:	bf45      	ittet	mi
 8013a74:	f1c3 0301 	rsbmi	r3, r3, #1
 8013a78:	9305      	strmi	r3, [sp, #20]
 8013a7a:	2300      	movpl	r3, #0
 8013a7c:	2300      	movmi	r3, #0
 8013a7e:	9206      	str	r2, [sp, #24]
 8013a80:	bf54      	ite	pl
 8013a82:	9305      	strpl	r3, [sp, #20]
 8013a84:	9306      	strmi	r3, [sp, #24]
 8013a86:	f1bb 0f00 	cmp.w	fp, #0
 8013a8a:	db3c      	blt.n	8013b06 <_dtoa_r+0x24e>
 8013a8c:	9b06      	ldr	r3, [sp, #24]
 8013a8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013a92:	445b      	add	r3, fp
 8013a94:	9306      	str	r3, [sp, #24]
 8013a96:	2300      	movs	r3, #0
 8013a98:	9308      	str	r3, [sp, #32]
 8013a9a:	9b07      	ldr	r3, [sp, #28]
 8013a9c:	2b09      	cmp	r3, #9
 8013a9e:	d868      	bhi.n	8013b72 <_dtoa_r+0x2ba>
 8013aa0:	2b05      	cmp	r3, #5
 8013aa2:	bfc4      	itt	gt
 8013aa4:	3b04      	subgt	r3, #4
 8013aa6:	9307      	strgt	r3, [sp, #28]
 8013aa8:	9b07      	ldr	r3, [sp, #28]
 8013aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8013aae:	bfcc      	ite	gt
 8013ab0:	2500      	movgt	r5, #0
 8013ab2:	2501      	movle	r5, #1
 8013ab4:	2b03      	cmp	r3, #3
 8013ab6:	f200 8085 	bhi.w	8013bc4 <_dtoa_r+0x30c>
 8013aba:	e8df f003 	tbb	[pc, r3]
 8013abe:	3b2e      	.short	0x3b2e
 8013ac0:	5839      	.short	0x5839
 8013ac2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013ac6:	441d      	add	r5, r3
 8013ac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013acc:	2b20      	cmp	r3, #32
 8013ace:	bfc1      	itttt	gt
 8013ad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013ad4:	fa08 f803 	lslgt.w	r8, r8, r3
 8013ad8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8013adc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013ae0:	bfd6      	itet	le
 8013ae2:	f1c3 0320 	rsble	r3, r3, #32
 8013ae6:	ea48 0003 	orrgt.w	r0, r8, r3
 8013aea:	fa06 f003 	lslle.w	r0, r6, r3
 8013aee:	f7ec fd31 	bl	8000554 <__aeabi_ui2d>
 8013af2:	2201      	movs	r2, #1
 8013af4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013af8:	3d01      	subs	r5, #1
 8013afa:	920e      	str	r2, [sp, #56]	; 0x38
 8013afc:	e76f      	b.n	80139de <_dtoa_r+0x126>
 8013afe:	2301      	movs	r3, #1
 8013b00:	e7b3      	b.n	8013a6a <_dtoa_r+0x1b2>
 8013b02:	900c      	str	r0, [sp, #48]	; 0x30
 8013b04:	e7b2      	b.n	8013a6c <_dtoa_r+0x1b4>
 8013b06:	9b05      	ldr	r3, [sp, #20]
 8013b08:	eba3 030b 	sub.w	r3, r3, fp
 8013b0c:	9305      	str	r3, [sp, #20]
 8013b0e:	f1cb 0300 	rsb	r3, fp, #0
 8013b12:	9308      	str	r3, [sp, #32]
 8013b14:	2300      	movs	r3, #0
 8013b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b18:	e7bf      	b.n	8013a9a <_dtoa_r+0x1e2>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	dc52      	bgt.n	8013bca <_dtoa_r+0x312>
 8013b24:	2301      	movs	r3, #1
 8013b26:	9301      	str	r3, [sp, #4]
 8013b28:	9304      	str	r3, [sp, #16]
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8013b2e:	e00b      	b.n	8013b48 <_dtoa_r+0x290>
 8013b30:	2301      	movs	r3, #1
 8013b32:	e7f3      	b.n	8013b1c <_dtoa_r+0x264>
 8013b34:	2300      	movs	r3, #0
 8013b36:	9309      	str	r3, [sp, #36]	; 0x24
 8013b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b3a:	445b      	add	r3, fp
 8013b3c:	9301      	str	r3, [sp, #4]
 8013b3e:	3301      	adds	r3, #1
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	9304      	str	r3, [sp, #16]
 8013b44:	bfb8      	it	lt
 8013b46:	2301      	movlt	r3, #1
 8013b48:	69e0      	ldr	r0, [r4, #28]
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	2204      	movs	r2, #4
 8013b4e:	f102 0614 	add.w	r6, r2, #20
 8013b52:	429e      	cmp	r6, r3
 8013b54:	d93d      	bls.n	8013bd2 <_dtoa_r+0x31a>
 8013b56:	6041      	str	r1, [r0, #4]
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f000 fceb 	bl	8014534 <_Balloc>
 8013b5e:	9000      	str	r0, [sp, #0]
 8013b60:	2800      	cmp	r0, #0
 8013b62:	d139      	bne.n	8013bd8 <_dtoa_r+0x320>
 8013b64:	4b16      	ldr	r3, [pc, #88]	; (8013bc0 <_dtoa_r+0x308>)
 8013b66:	4602      	mov	r2, r0
 8013b68:	f240 11af 	movw	r1, #431	; 0x1af
 8013b6c:	e6bd      	b.n	80138ea <_dtoa_r+0x32>
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e7e1      	b.n	8013b36 <_dtoa_r+0x27e>
 8013b72:	2501      	movs	r5, #1
 8013b74:	2300      	movs	r3, #0
 8013b76:	9307      	str	r3, [sp, #28]
 8013b78:	9509      	str	r5, [sp, #36]	; 0x24
 8013b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b7e:	9301      	str	r3, [sp, #4]
 8013b80:	9304      	str	r3, [sp, #16]
 8013b82:	2200      	movs	r2, #0
 8013b84:	2312      	movs	r3, #18
 8013b86:	e7d1      	b.n	8013b2c <_dtoa_r+0x274>
 8013b88:	636f4361 	.word	0x636f4361
 8013b8c:	3fd287a7 	.word	0x3fd287a7
 8013b90:	8b60c8b3 	.word	0x8b60c8b3
 8013b94:	3fc68a28 	.word	0x3fc68a28
 8013b98:	509f79fb 	.word	0x509f79fb
 8013b9c:	3fd34413 	.word	0x3fd34413
 8013ba0:	08017e62 	.word	0x08017e62
 8013ba4:	08017e79 	.word	0x08017e79
 8013ba8:	7ff00000 	.word	0x7ff00000
 8013bac:	08017e5e 	.word	0x08017e5e
 8013bb0:	08017e55 	.word	0x08017e55
 8013bb4:	08017e2d 	.word	0x08017e2d
 8013bb8:	3ff80000 	.word	0x3ff80000
 8013bbc:	08017f68 	.word	0x08017f68
 8013bc0:	08017ed1 	.word	0x08017ed1
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc8:	e7d7      	b.n	8013b7a <_dtoa_r+0x2c2>
 8013bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bcc:	9301      	str	r3, [sp, #4]
 8013bce:	9304      	str	r3, [sp, #16]
 8013bd0:	e7ba      	b.n	8013b48 <_dtoa_r+0x290>
 8013bd2:	3101      	adds	r1, #1
 8013bd4:	0052      	lsls	r2, r2, #1
 8013bd6:	e7ba      	b.n	8013b4e <_dtoa_r+0x296>
 8013bd8:	69e3      	ldr	r3, [r4, #28]
 8013bda:	9a00      	ldr	r2, [sp, #0]
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	9b04      	ldr	r3, [sp, #16]
 8013be0:	2b0e      	cmp	r3, #14
 8013be2:	f200 80a8 	bhi.w	8013d36 <_dtoa_r+0x47e>
 8013be6:	2d00      	cmp	r5, #0
 8013be8:	f000 80a5 	beq.w	8013d36 <_dtoa_r+0x47e>
 8013bec:	f1bb 0f00 	cmp.w	fp, #0
 8013bf0:	dd38      	ble.n	8013c64 <_dtoa_r+0x3ac>
 8013bf2:	4bc0      	ldr	r3, [pc, #768]	; (8013ef4 <_dtoa_r+0x63c>)
 8013bf4:	f00b 020f 	and.w	r2, fp, #15
 8013bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013bfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013c00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013c04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013c08:	d019      	beq.n	8013c3e <_dtoa_r+0x386>
 8013c0a:	4bbb      	ldr	r3, [pc, #748]	; (8013ef8 <_dtoa_r+0x640>)
 8013c0c:	ec51 0b18 	vmov	r0, r1, d8
 8013c10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013c14:	f7ec fe42 	bl	800089c <__aeabi_ddiv>
 8013c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c1c:	f008 080f 	and.w	r8, r8, #15
 8013c20:	2503      	movs	r5, #3
 8013c22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013ef8 <_dtoa_r+0x640>
 8013c26:	f1b8 0f00 	cmp.w	r8, #0
 8013c2a:	d10a      	bne.n	8013c42 <_dtoa_r+0x38a>
 8013c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c30:	4632      	mov	r2, r6
 8013c32:	463b      	mov	r3, r7
 8013c34:	f7ec fe32 	bl	800089c <__aeabi_ddiv>
 8013c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c3c:	e02b      	b.n	8013c96 <_dtoa_r+0x3de>
 8013c3e:	2502      	movs	r5, #2
 8013c40:	e7ef      	b.n	8013c22 <_dtoa_r+0x36a>
 8013c42:	f018 0f01 	tst.w	r8, #1
 8013c46:	d008      	beq.n	8013c5a <_dtoa_r+0x3a2>
 8013c48:	4630      	mov	r0, r6
 8013c4a:	4639      	mov	r1, r7
 8013c4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013c50:	f7ec fcfa 	bl	8000648 <__aeabi_dmul>
 8013c54:	3501      	adds	r5, #1
 8013c56:	4606      	mov	r6, r0
 8013c58:	460f      	mov	r7, r1
 8013c5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c5e:	f109 0908 	add.w	r9, r9, #8
 8013c62:	e7e0      	b.n	8013c26 <_dtoa_r+0x36e>
 8013c64:	f000 809f 	beq.w	8013da6 <_dtoa_r+0x4ee>
 8013c68:	f1cb 0600 	rsb	r6, fp, #0
 8013c6c:	4ba1      	ldr	r3, [pc, #644]	; (8013ef4 <_dtoa_r+0x63c>)
 8013c6e:	4fa2      	ldr	r7, [pc, #648]	; (8013ef8 <_dtoa_r+0x640>)
 8013c70:	f006 020f 	and.w	r2, r6, #15
 8013c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7c:	ec51 0b18 	vmov	r0, r1, d8
 8013c80:	f7ec fce2 	bl	8000648 <__aeabi_dmul>
 8013c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c88:	1136      	asrs	r6, r6, #4
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	2502      	movs	r5, #2
 8013c8e:	2e00      	cmp	r6, #0
 8013c90:	d17e      	bne.n	8013d90 <_dtoa_r+0x4d8>
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1d0      	bne.n	8013c38 <_dtoa_r+0x380>
 8013c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	f000 8084 	beq.w	8013daa <_dtoa_r+0x4f2>
 8013ca2:	4b96      	ldr	r3, [pc, #600]	; (8013efc <_dtoa_r+0x644>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	4640      	mov	r0, r8
 8013ca8:	4649      	mov	r1, r9
 8013caa:	f7ec ff3f 	bl	8000b2c <__aeabi_dcmplt>
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	d07b      	beq.n	8013daa <_dtoa_r+0x4f2>
 8013cb2:	9b04      	ldr	r3, [sp, #16]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d078      	beq.n	8013daa <_dtoa_r+0x4f2>
 8013cb8:	9b01      	ldr	r3, [sp, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	dd39      	ble.n	8013d32 <_dtoa_r+0x47a>
 8013cbe:	4b90      	ldr	r3, [pc, #576]	; (8013f00 <_dtoa_r+0x648>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	4640      	mov	r0, r8
 8013cc4:	4649      	mov	r1, r9
 8013cc6:	f7ec fcbf 	bl	8000648 <__aeabi_dmul>
 8013cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013cce:	9e01      	ldr	r6, [sp, #4]
 8013cd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013cd4:	3501      	adds	r5, #1
 8013cd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013cda:	4628      	mov	r0, r5
 8013cdc:	f7ec fc4a 	bl	8000574 <__aeabi_i2d>
 8013ce0:	4642      	mov	r2, r8
 8013ce2:	464b      	mov	r3, r9
 8013ce4:	f7ec fcb0 	bl	8000648 <__aeabi_dmul>
 8013ce8:	4b86      	ldr	r3, [pc, #536]	; (8013f04 <_dtoa_r+0x64c>)
 8013cea:	2200      	movs	r2, #0
 8013cec:	f7ec faf6 	bl	80002dc <__adddf3>
 8013cf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013cf8:	9303      	str	r3, [sp, #12]
 8013cfa:	2e00      	cmp	r6, #0
 8013cfc:	d158      	bne.n	8013db0 <_dtoa_r+0x4f8>
 8013cfe:	4b82      	ldr	r3, [pc, #520]	; (8013f08 <_dtoa_r+0x650>)
 8013d00:	2200      	movs	r2, #0
 8013d02:	4640      	mov	r0, r8
 8013d04:	4649      	mov	r1, r9
 8013d06:	f7ec fae7 	bl	80002d8 <__aeabi_dsub>
 8013d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d0e:	4680      	mov	r8, r0
 8013d10:	4689      	mov	r9, r1
 8013d12:	f7ec ff29 	bl	8000b68 <__aeabi_dcmpgt>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	f040 8296 	bne.w	8014248 <_dtoa_r+0x990>
 8013d1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013d20:	4640      	mov	r0, r8
 8013d22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d26:	4649      	mov	r1, r9
 8013d28:	f7ec ff00 	bl	8000b2c <__aeabi_dcmplt>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	f040 8289 	bne.w	8014244 <_dtoa_r+0x98c>
 8013d32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	f2c0 814e 	blt.w	8013fda <_dtoa_r+0x722>
 8013d3e:	f1bb 0f0e 	cmp.w	fp, #14
 8013d42:	f300 814a 	bgt.w	8013fda <_dtoa_r+0x722>
 8013d46:	4b6b      	ldr	r3, [pc, #428]	; (8013ef4 <_dtoa_r+0x63c>)
 8013d48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	f280 80dc 	bge.w	8013f10 <_dtoa_r+0x658>
 8013d58:	9b04      	ldr	r3, [sp, #16]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	f300 80d8 	bgt.w	8013f10 <_dtoa_r+0x658>
 8013d60:	f040 826f 	bne.w	8014242 <_dtoa_r+0x98a>
 8013d64:	4b68      	ldr	r3, [pc, #416]	; (8013f08 <_dtoa_r+0x650>)
 8013d66:	2200      	movs	r2, #0
 8013d68:	4640      	mov	r0, r8
 8013d6a:	4649      	mov	r1, r9
 8013d6c:	f7ec fc6c 	bl	8000648 <__aeabi_dmul>
 8013d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d74:	f7ec feee 	bl	8000b54 <__aeabi_dcmpge>
 8013d78:	9e04      	ldr	r6, [sp, #16]
 8013d7a:	4637      	mov	r7, r6
 8013d7c:	2800      	cmp	r0, #0
 8013d7e:	f040 8245 	bne.w	801420c <_dtoa_r+0x954>
 8013d82:	9d00      	ldr	r5, [sp, #0]
 8013d84:	2331      	movs	r3, #49	; 0x31
 8013d86:	f805 3b01 	strb.w	r3, [r5], #1
 8013d8a:	f10b 0b01 	add.w	fp, fp, #1
 8013d8e:	e241      	b.n	8014214 <_dtoa_r+0x95c>
 8013d90:	07f2      	lsls	r2, r6, #31
 8013d92:	d505      	bpl.n	8013da0 <_dtoa_r+0x4e8>
 8013d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d98:	f7ec fc56 	bl	8000648 <__aeabi_dmul>
 8013d9c:	3501      	adds	r5, #1
 8013d9e:	2301      	movs	r3, #1
 8013da0:	1076      	asrs	r6, r6, #1
 8013da2:	3708      	adds	r7, #8
 8013da4:	e773      	b.n	8013c8e <_dtoa_r+0x3d6>
 8013da6:	2502      	movs	r5, #2
 8013da8:	e775      	b.n	8013c96 <_dtoa_r+0x3de>
 8013daa:	9e04      	ldr	r6, [sp, #16]
 8013dac:	465f      	mov	r7, fp
 8013dae:	e792      	b.n	8013cd6 <_dtoa_r+0x41e>
 8013db0:	9900      	ldr	r1, [sp, #0]
 8013db2:	4b50      	ldr	r3, [pc, #320]	; (8013ef4 <_dtoa_r+0x63c>)
 8013db4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013db8:	4431      	add	r1, r6
 8013dba:	9102      	str	r1, [sp, #8]
 8013dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dbe:	eeb0 9a47 	vmov.f32	s18, s14
 8013dc2:	eef0 9a67 	vmov.f32	s19, s15
 8013dc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013dca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013dce:	2900      	cmp	r1, #0
 8013dd0:	d044      	beq.n	8013e5c <_dtoa_r+0x5a4>
 8013dd2:	494e      	ldr	r1, [pc, #312]	; (8013f0c <_dtoa_r+0x654>)
 8013dd4:	2000      	movs	r0, #0
 8013dd6:	f7ec fd61 	bl	800089c <__aeabi_ddiv>
 8013dda:	ec53 2b19 	vmov	r2, r3, d9
 8013dde:	f7ec fa7b 	bl	80002d8 <__aeabi_dsub>
 8013de2:	9d00      	ldr	r5, [sp, #0]
 8013de4:	ec41 0b19 	vmov	d9, r0, r1
 8013de8:	4649      	mov	r1, r9
 8013dea:	4640      	mov	r0, r8
 8013dec:	f7ec fedc 	bl	8000ba8 <__aeabi_d2iz>
 8013df0:	4606      	mov	r6, r0
 8013df2:	f7ec fbbf 	bl	8000574 <__aeabi_i2d>
 8013df6:	4602      	mov	r2, r0
 8013df8:	460b      	mov	r3, r1
 8013dfa:	4640      	mov	r0, r8
 8013dfc:	4649      	mov	r1, r9
 8013dfe:	f7ec fa6b 	bl	80002d8 <__aeabi_dsub>
 8013e02:	3630      	adds	r6, #48	; 0x30
 8013e04:	f805 6b01 	strb.w	r6, [r5], #1
 8013e08:	ec53 2b19 	vmov	r2, r3, d9
 8013e0c:	4680      	mov	r8, r0
 8013e0e:	4689      	mov	r9, r1
 8013e10:	f7ec fe8c 	bl	8000b2c <__aeabi_dcmplt>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	d164      	bne.n	8013ee2 <_dtoa_r+0x62a>
 8013e18:	4642      	mov	r2, r8
 8013e1a:	464b      	mov	r3, r9
 8013e1c:	4937      	ldr	r1, [pc, #220]	; (8013efc <_dtoa_r+0x644>)
 8013e1e:	2000      	movs	r0, #0
 8013e20:	f7ec fa5a 	bl	80002d8 <__aeabi_dsub>
 8013e24:	ec53 2b19 	vmov	r2, r3, d9
 8013e28:	f7ec fe80 	bl	8000b2c <__aeabi_dcmplt>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	f040 80b6 	bne.w	8013f9e <_dtoa_r+0x6e6>
 8013e32:	9b02      	ldr	r3, [sp, #8]
 8013e34:	429d      	cmp	r5, r3
 8013e36:	f43f af7c 	beq.w	8013d32 <_dtoa_r+0x47a>
 8013e3a:	4b31      	ldr	r3, [pc, #196]	; (8013f00 <_dtoa_r+0x648>)
 8013e3c:	ec51 0b19 	vmov	r0, r1, d9
 8013e40:	2200      	movs	r2, #0
 8013e42:	f7ec fc01 	bl	8000648 <__aeabi_dmul>
 8013e46:	4b2e      	ldr	r3, [pc, #184]	; (8013f00 <_dtoa_r+0x648>)
 8013e48:	ec41 0b19 	vmov	d9, r0, r1
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	4640      	mov	r0, r8
 8013e50:	4649      	mov	r1, r9
 8013e52:	f7ec fbf9 	bl	8000648 <__aeabi_dmul>
 8013e56:	4680      	mov	r8, r0
 8013e58:	4689      	mov	r9, r1
 8013e5a:	e7c5      	b.n	8013de8 <_dtoa_r+0x530>
 8013e5c:	ec51 0b17 	vmov	r0, r1, d7
 8013e60:	f7ec fbf2 	bl	8000648 <__aeabi_dmul>
 8013e64:	9b02      	ldr	r3, [sp, #8]
 8013e66:	9d00      	ldr	r5, [sp, #0]
 8013e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e6a:	ec41 0b19 	vmov	d9, r0, r1
 8013e6e:	4649      	mov	r1, r9
 8013e70:	4640      	mov	r0, r8
 8013e72:	f7ec fe99 	bl	8000ba8 <__aeabi_d2iz>
 8013e76:	4606      	mov	r6, r0
 8013e78:	f7ec fb7c 	bl	8000574 <__aeabi_i2d>
 8013e7c:	3630      	adds	r6, #48	; 0x30
 8013e7e:	4602      	mov	r2, r0
 8013e80:	460b      	mov	r3, r1
 8013e82:	4640      	mov	r0, r8
 8013e84:	4649      	mov	r1, r9
 8013e86:	f7ec fa27 	bl	80002d8 <__aeabi_dsub>
 8013e8a:	f805 6b01 	strb.w	r6, [r5], #1
 8013e8e:	9b02      	ldr	r3, [sp, #8]
 8013e90:	429d      	cmp	r5, r3
 8013e92:	4680      	mov	r8, r0
 8013e94:	4689      	mov	r9, r1
 8013e96:	f04f 0200 	mov.w	r2, #0
 8013e9a:	d124      	bne.n	8013ee6 <_dtoa_r+0x62e>
 8013e9c:	4b1b      	ldr	r3, [pc, #108]	; (8013f0c <_dtoa_r+0x654>)
 8013e9e:	ec51 0b19 	vmov	r0, r1, d9
 8013ea2:	f7ec fa1b 	bl	80002dc <__adddf3>
 8013ea6:	4602      	mov	r2, r0
 8013ea8:	460b      	mov	r3, r1
 8013eaa:	4640      	mov	r0, r8
 8013eac:	4649      	mov	r1, r9
 8013eae:	f7ec fe5b 	bl	8000b68 <__aeabi_dcmpgt>
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	d173      	bne.n	8013f9e <_dtoa_r+0x6e6>
 8013eb6:	ec53 2b19 	vmov	r2, r3, d9
 8013eba:	4914      	ldr	r1, [pc, #80]	; (8013f0c <_dtoa_r+0x654>)
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	f7ec fa0b 	bl	80002d8 <__aeabi_dsub>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	4649      	mov	r1, r9
 8013eca:	f7ec fe2f 	bl	8000b2c <__aeabi_dcmplt>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	f43f af2f 	beq.w	8013d32 <_dtoa_r+0x47a>
 8013ed4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013ed6:	1e6b      	subs	r3, r5, #1
 8013ed8:	930f      	str	r3, [sp, #60]	; 0x3c
 8013eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013ede:	2b30      	cmp	r3, #48	; 0x30
 8013ee0:	d0f8      	beq.n	8013ed4 <_dtoa_r+0x61c>
 8013ee2:	46bb      	mov	fp, r7
 8013ee4:	e04a      	b.n	8013f7c <_dtoa_r+0x6c4>
 8013ee6:	4b06      	ldr	r3, [pc, #24]	; (8013f00 <_dtoa_r+0x648>)
 8013ee8:	f7ec fbae 	bl	8000648 <__aeabi_dmul>
 8013eec:	4680      	mov	r8, r0
 8013eee:	4689      	mov	r9, r1
 8013ef0:	e7bd      	b.n	8013e6e <_dtoa_r+0x5b6>
 8013ef2:	bf00      	nop
 8013ef4:	08017f68 	.word	0x08017f68
 8013ef8:	08017f40 	.word	0x08017f40
 8013efc:	3ff00000 	.word	0x3ff00000
 8013f00:	40240000 	.word	0x40240000
 8013f04:	401c0000 	.word	0x401c0000
 8013f08:	40140000 	.word	0x40140000
 8013f0c:	3fe00000 	.word	0x3fe00000
 8013f10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f14:	9d00      	ldr	r5, [sp, #0]
 8013f16:	4642      	mov	r2, r8
 8013f18:	464b      	mov	r3, r9
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	4639      	mov	r1, r7
 8013f1e:	f7ec fcbd 	bl	800089c <__aeabi_ddiv>
 8013f22:	f7ec fe41 	bl	8000ba8 <__aeabi_d2iz>
 8013f26:	9001      	str	r0, [sp, #4]
 8013f28:	f7ec fb24 	bl	8000574 <__aeabi_i2d>
 8013f2c:	4642      	mov	r2, r8
 8013f2e:	464b      	mov	r3, r9
 8013f30:	f7ec fb8a 	bl	8000648 <__aeabi_dmul>
 8013f34:	4602      	mov	r2, r0
 8013f36:	460b      	mov	r3, r1
 8013f38:	4630      	mov	r0, r6
 8013f3a:	4639      	mov	r1, r7
 8013f3c:	f7ec f9cc 	bl	80002d8 <__aeabi_dsub>
 8013f40:	9e01      	ldr	r6, [sp, #4]
 8013f42:	9f04      	ldr	r7, [sp, #16]
 8013f44:	3630      	adds	r6, #48	; 0x30
 8013f46:	f805 6b01 	strb.w	r6, [r5], #1
 8013f4a:	9e00      	ldr	r6, [sp, #0]
 8013f4c:	1bae      	subs	r6, r5, r6
 8013f4e:	42b7      	cmp	r7, r6
 8013f50:	4602      	mov	r2, r0
 8013f52:	460b      	mov	r3, r1
 8013f54:	d134      	bne.n	8013fc0 <_dtoa_r+0x708>
 8013f56:	f7ec f9c1 	bl	80002dc <__adddf3>
 8013f5a:	4642      	mov	r2, r8
 8013f5c:	464b      	mov	r3, r9
 8013f5e:	4606      	mov	r6, r0
 8013f60:	460f      	mov	r7, r1
 8013f62:	f7ec fe01 	bl	8000b68 <__aeabi_dcmpgt>
 8013f66:	b9c8      	cbnz	r0, 8013f9c <_dtoa_r+0x6e4>
 8013f68:	4642      	mov	r2, r8
 8013f6a:	464b      	mov	r3, r9
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	4639      	mov	r1, r7
 8013f70:	f7ec fdd2 	bl	8000b18 <__aeabi_dcmpeq>
 8013f74:	b110      	cbz	r0, 8013f7c <_dtoa_r+0x6c4>
 8013f76:	9b01      	ldr	r3, [sp, #4]
 8013f78:	07db      	lsls	r3, r3, #31
 8013f7a:	d40f      	bmi.n	8013f9c <_dtoa_r+0x6e4>
 8013f7c:	4651      	mov	r1, sl
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f000 fb18 	bl	80145b4 <_Bfree>
 8013f84:	2300      	movs	r3, #0
 8013f86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f88:	702b      	strb	r3, [r5, #0]
 8013f8a:	f10b 0301 	add.w	r3, fp, #1
 8013f8e:	6013      	str	r3, [r2, #0]
 8013f90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	f43f ace2 	beq.w	801395c <_dtoa_r+0xa4>
 8013f98:	601d      	str	r5, [r3, #0]
 8013f9a:	e4df      	b.n	801395c <_dtoa_r+0xa4>
 8013f9c:	465f      	mov	r7, fp
 8013f9e:	462b      	mov	r3, r5
 8013fa0:	461d      	mov	r5, r3
 8013fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013fa6:	2a39      	cmp	r2, #57	; 0x39
 8013fa8:	d106      	bne.n	8013fb8 <_dtoa_r+0x700>
 8013faa:	9a00      	ldr	r2, [sp, #0]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d1f7      	bne.n	8013fa0 <_dtoa_r+0x6e8>
 8013fb0:	9900      	ldr	r1, [sp, #0]
 8013fb2:	2230      	movs	r2, #48	; 0x30
 8013fb4:	3701      	adds	r7, #1
 8013fb6:	700a      	strb	r2, [r1, #0]
 8013fb8:	781a      	ldrb	r2, [r3, #0]
 8013fba:	3201      	adds	r2, #1
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	e790      	b.n	8013ee2 <_dtoa_r+0x62a>
 8013fc0:	4ba3      	ldr	r3, [pc, #652]	; (8014250 <_dtoa_r+0x998>)
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	f7ec fb40 	bl	8000648 <__aeabi_dmul>
 8013fc8:	2200      	movs	r2, #0
 8013fca:	2300      	movs	r3, #0
 8013fcc:	4606      	mov	r6, r0
 8013fce:	460f      	mov	r7, r1
 8013fd0:	f7ec fda2 	bl	8000b18 <__aeabi_dcmpeq>
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d09e      	beq.n	8013f16 <_dtoa_r+0x65e>
 8013fd8:	e7d0      	b.n	8013f7c <_dtoa_r+0x6c4>
 8013fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fdc:	2a00      	cmp	r2, #0
 8013fde:	f000 80ca 	beq.w	8014176 <_dtoa_r+0x8be>
 8013fe2:	9a07      	ldr	r2, [sp, #28]
 8013fe4:	2a01      	cmp	r2, #1
 8013fe6:	f300 80ad 	bgt.w	8014144 <_dtoa_r+0x88c>
 8013fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013fec:	2a00      	cmp	r2, #0
 8013fee:	f000 80a5 	beq.w	801413c <_dtoa_r+0x884>
 8013ff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ff6:	9e08      	ldr	r6, [sp, #32]
 8013ff8:	9d05      	ldr	r5, [sp, #20]
 8013ffa:	9a05      	ldr	r2, [sp, #20]
 8013ffc:	441a      	add	r2, r3
 8013ffe:	9205      	str	r2, [sp, #20]
 8014000:	9a06      	ldr	r2, [sp, #24]
 8014002:	2101      	movs	r1, #1
 8014004:	441a      	add	r2, r3
 8014006:	4620      	mov	r0, r4
 8014008:	9206      	str	r2, [sp, #24]
 801400a:	f000 fbd3 	bl	80147b4 <__i2b>
 801400e:	4607      	mov	r7, r0
 8014010:	b165      	cbz	r5, 801402c <_dtoa_r+0x774>
 8014012:	9b06      	ldr	r3, [sp, #24]
 8014014:	2b00      	cmp	r3, #0
 8014016:	dd09      	ble.n	801402c <_dtoa_r+0x774>
 8014018:	42ab      	cmp	r3, r5
 801401a:	9a05      	ldr	r2, [sp, #20]
 801401c:	bfa8      	it	ge
 801401e:	462b      	movge	r3, r5
 8014020:	1ad2      	subs	r2, r2, r3
 8014022:	9205      	str	r2, [sp, #20]
 8014024:	9a06      	ldr	r2, [sp, #24]
 8014026:	1aed      	subs	r5, r5, r3
 8014028:	1ad3      	subs	r3, r2, r3
 801402a:	9306      	str	r3, [sp, #24]
 801402c:	9b08      	ldr	r3, [sp, #32]
 801402e:	b1f3      	cbz	r3, 801406e <_dtoa_r+0x7b6>
 8014030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014032:	2b00      	cmp	r3, #0
 8014034:	f000 80a3 	beq.w	801417e <_dtoa_r+0x8c6>
 8014038:	2e00      	cmp	r6, #0
 801403a:	dd10      	ble.n	801405e <_dtoa_r+0x7a6>
 801403c:	4639      	mov	r1, r7
 801403e:	4632      	mov	r2, r6
 8014040:	4620      	mov	r0, r4
 8014042:	f000 fc77 	bl	8014934 <__pow5mult>
 8014046:	4652      	mov	r2, sl
 8014048:	4601      	mov	r1, r0
 801404a:	4607      	mov	r7, r0
 801404c:	4620      	mov	r0, r4
 801404e:	f000 fbc7 	bl	80147e0 <__multiply>
 8014052:	4651      	mov	r1, sl
 8014054:	4680      	mov	r8, r0
 8014056:	4620      	mov	r0, r4
 8014058:	f000 faac 	bl	80145b4 <_Bfree>
 801405c:	46c2      	mov	sl, r8
 801405e:	9b08      	ldr	r3, [sp, #32]
 8014060:	1b9a      	subs	r2, r3, r6
 8014062:	d004      	beq.n	801406e <_dtoa_r+0x7b6>
 8014064:	4651      	mov	r1, sl
 8014066:	4620      	mov	r0, r4
 8014068:	f000 fc64 	bl	8014934 <__pow5mult>
 801406c:	4682      	mov	sl, r0
 801406e:	2101      	movs	r1, #1
 8014070:	4620      	mov	r0, r4
 8014072:	f000 fb9f 	bl	80147b4 <__i2b>
 8014076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014078:	2b00      	cmp	r3, #0
 801407a:	4606      	mov	r6, r0
 801407c:	f340 8081 	ble.w	8014182 <_dtoa_r+0x8ca>
 8014080:	461a      	mov	r2, r3
 8014082:	4601      	mov	r1, r0
 8014084:	4620      	mov	r0, r4
 8014086:	f000 fc55 	bl	8014934 <__pow5mult>
 801408a:	9b07      	ldr	r3, [sp, #28]
 801408c:	2b01      	cmp	r3, #1
 801408e:	4606      	mov	r6, r0
 8014090:	dd7a      	ble.n	8014188 <_dtoa_r+0x8d0>
 8014092:	f04f 0800 	mov.w	r8, #0
 8014096:	6933      	ldr	r3, [r6, #16]
 8014098:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801409c:	6918      	ldr	r0, [r3, #16]
 801409e:	f000 fb3b 	bl	8014718 <__hi0bits>
 80140a2:	f1c0 0020 	rsb	r0, r0, #32
 80140a6:	9b06      	ldr	r3, [sp, #24]
 80140a8:	4418      	add	r0, r3
 80140aa:	f010 001f 	ands.w	r0, r0, #31
 80140ae:	f000 8094 	beq.w	80141da <_dtoa_r+0x922>
 80140b2:	f1c0 0320 	rsb	r3, r0, #32
 80140b6:	2b04      	cmp	r3, #4
 80140b8:	f340 8085 	ble.w	80141c6 <_dtoa_r+0x90e>
 80140bc:	9b05      	ldr	r3, [sp, #20]
 80140be:	f1c0 001c 	rsb	r0, r0, #28
 80140c2:	4403      	add	r3, r0
 80140c4:	9305      	str	r3, [sp, #20]
 80140c6:	9b06      	ldr	r3, [sp, #24]
 80140c8:	4403      	add	r3, r0
 80140ca:	4405      	add	r5, r0
 80140cc:	9306      	str	r3, [sp, #24]
 80140ce:	9b05      	ldr	r3, [sp, #20]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	dd05      	ble.n	80140e0 <_dtoa_r+0x828>
 80140d4:	4651      	mov	r1, sl
 80140d6:	461a      	mov	r2, r3
 80140d8:	4620      	mov	r0, r4
 80140da:	f000 fc85 	bl	80149e8 <__lshift>
 80140de:	4682      	mov	sl, r0
 80140e0:	9b06      	ldr	r3, [sp, #24]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	dd05      	ble.n	80140f2 <_dtoa_r+0x83a>
 80140e6:	4631      	mov	r1, r6
 80140e8:	461a      	mov	r2, r3
 80140ea:	4620      	mov	r0, r4
 80140ec:	f000 fc7c 	bl	80149e8 <__lshift>
 80140f0:	4606      	mov	r6, r0
 80140f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d072      	beq.n	80141de <_dtoa_r+0x926>
 80140f8:	4631      	mov	r1, r6
 80140fa:	4650      	mov	r0, sl
 80140fc:	f000 fce0 	bl	8014ac0 <__mcmp>
 8014100:	2800      	cmp	r0, #0
 8014102:	da6c      	bge.n	80141de <_dtoa_r+0x926>
 8014104:	2300      	movs	r3, #0
 8014106:	4651      	mov	r1, sl
 8014108:	220a      	movs	r2, #10
 801410a:	4620      	mov	r0, r4
 801410c:	f000 fa74 	bl	80145f8 <__multadd>
 8014110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014112:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014116:	4682      	mov	sl, r0
 8014118:	2b00      	cmp	r3, #0
 801411a:	f000 81b0 	beq.w	801447e <_dtoa_r+0xbc6>
 801411e:	2300      	movs	r3, #0
 8014120:	4639      	mov	r1, r7
 8014122:	220a      	movs	r2, #10
 8014124:	4620      	mov	r0, r4
 8014126:	f000 fa67 	bl	80145f8 <__multadd>
 801412a:	9b01      	ldr	r3, [sp, #4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	4607      	mov	r7, r0
 8014130:	f300 8096 	bgt.w	8014260 <_dtoa_r+0x9a8>
 8014134:	9b07      	ldr	r3, [sp, #28]
 8014136:	2b02      	cmp	r3, #2
 8014138:	dc59      	bgt.n	80141ee <_dtoa_r+0x936>
 801413a:	e091      	b.n	8014260 <_dtoa_r+0x9a8>
 801413c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801413e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014142:	e758      	b.n	8013ff6 <_dtoa_r+0x73e>
 8014144:	9b04      	ldr	r3, [sp, #16]
 8014146:	1e5e      	subs	r6, r3, #1
 8014148:	9b08      	ldr	r3, [sp, #32]
 801414a:	42b3      	cmp	r3, r6
 801414c:	bfbf      	itttt	lt
 801414e:	9b08      	ldrlt	r3, [sp, #32]
 8014150:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014152:	9608      	strlt	r6, [sp, #32]
 8014154:	1af3      	sublt	r3, r6, r3
 8014156:	bfb4      	ite	lt
 8014158:	18d2      	addlt	r2, r2, r3
 801415a:	1b9e      	subge	r6, r3, r6
 801415c:	9b04      	ldr	r3, [sp, #16]
 801415e:	bfbc      	itt	lt
 8014160:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014162:	2600      	movlt	r6, #0
 8014164:	2b00      	cmp	r3, #0
 8014166:	bfb7      	itett	lt
 8014168:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801416c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014170:	1a9d      	sublt	r5, r3, r2
 8014172:	2300      	movlt	r3, #0
 8014174:	e741      	b.n	8013ffa <_dtoa_r+0x742>
 8014176:	9e08      	ldr	r6, [sp, #32]
 8014178:	9d05      	ldr	r5, [sp, #20]
 801417a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801417c:	e748      	b.n	8014010 <_dtoa_r+0x758>
 801417e:	9a08      	ldr	r2, [sp, #32]
 8014180:	e770      	b.n	8014064 <_dtoa_r+0x7ac>
 8014182:	9b07      	ldr	r3, [sp, #28]
 8014184:	2b01      	cmp	r3, #1
 8014186:	dc19      	bgt.n	80141bc <_dtoa_r+0x904>
 8014188:	9b02      	ldr	r3, [sp, #8]
 801418a:	b9bb      	cbnz	r3, 80141bc <_dtoa_r+0x904>
 801418c:	9b03      	ldr	r3, [sp, #12]
 801418e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014192:	b99b      	cbnz	r3, 80141bc <_dtoa_r+0x904>
 8014194:	9b03      	ldr	r3, [sp, #12]
 8014196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801419a:	0d1b      	lsrs	r3, r3, #20
 801419c:	051b      	lsls	r3, r3, #20
 801419e:	b183      	cbz	r3, 80141c2 <_dtoa_r+0x90a>
 80141a0:	9b05      	ldr	r3, [sp, #20]
 80141a2:	3301      	adds	r3, #1
 80141a4:	9305      	str	r3, [sp, #20]
 80141a6:	9b06      	ldr	r3, [sp, #24]
 80141a8:	3301      	adds	r3, #1
 80141aa:	9306      	str	r3, [sp, #24]
 80141ac:	f04f 0801 	mov.w	r8, #1
 80141b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	f47f af6f 	bne.w	8014096 <_dtoa_r+0x7de>
 80141b8:	2001      	movs	r0, #1
 80141ba:	e774      	b.n	80140a6 <_dtoa_r+0x7ee>
 80141bc:	f04f 0800 	mov.w	r8, #0
 80141c0:	e7f6      	b.n	80141b0 <_dtoa_r+0x8f8>
 80141c2:	4698      	mov	r8, r3
 80141c4:	e7f4      	b.n	80141b0 <_dtoa_r+0x8f8>
 80141c6:	d082      	beq.n	80140ce <_dtoa_r+0x816>
 80141c8:	9a05      	ldr	r2, [sp, #20]
 80141ca:	331c      	adds	r3, #28
 80141cc:	441a      	add	r2, r3
 80141ce:	9205      	str	r2, [sp, #20]
 80141d0:	9a06      	ldr	r2, [sp, #24]
 80141d2:	441a      	add	r2, r3
 80141d4:	441d      	add	r5, r3
 80141d6:	9206      	str	r2, [sp, #24]
 80141d8:	e779      	b.n	80140ce <_dtoa_r+0x816>
 80141da:	4603      	mov	r3, r0
 80141dc:	e7f4      	b.n	80141c8 <_dtoa_r+0x910>
 80141de:	9b04      	ldr	r3, [sp, #16]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	dc37      	bgt.n	8014254 <_dtoa_r+0x99c>
 80141e4:	9b07      	ldr	r3, [sp, #28]
 80141e6:	2b02      	cmp	r3, #2
 80141e8:	dd34      	ble.n	8014254 <_dtoa_r+0x99c>
 80141ea:	9b04      	ldr	r3, [sp, #16]
 80141ec:	9301      	str	r3, [sp, #4]
 80141ee:	9b01      	ldr	r3, [sp, #4]
 80141f0:	b963      	cbnz	r3, 801420c <_dtoa_r+0x954>
 80141f2:	4631      	mov	r1, r6
 80141f4:	2205      	movs	r2, #5
 80141f6:	4620      	mov	r0, r4
 80141f8:	f000 f9fe 	bl	80145f8 <__multadd>
 80141fc:	4601      	mov	r1, r0
 80141fe:	4606      	mov	r6, r0
 8014200:	4650      	mov	r0, sl
 8014202:	f000 fc5d 	bl	8014ac0 <__mcmp>
 8014206:	2800      	cmp	r0, #0
 8014208:	f73f adbb 	bgt.w	8013d82 <_dtoa_r+0x4ca>
 801420c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801420e:	9d00      	ldr	r5, [sp, #0]
 8014210:	ea6f 0b03 	mvn.w	fp, r3
 8014214:	f04f 0800 	mov.w	r8, #0
 8014218:	4631      	mov	r1, r6
 801421a:	4620      	mov	r0, r4
 801421c:	f000 f9ca 	bl	80145b4 <_Bfree>
 8014220:	2f00      	cmp	r7, #0
 8014222:	f43f aeab 	beq.w	8013f7c <_dtoa_r+0x6c4>
 8014226:	f1b8 0f00 	cmp.w	r8, #0
 801422a:	d005      	beq.n	8014238 <_dtoa_r+0x980>
 801422c:	45b8      	cmp	r8, r7
 801422e:	d003      	beq.n	8014238 <_dtoa_r+0x980>
 8014230:	4641      	mov	r1, r8
 8014232:	4620      	mov	r0, r4
 8014234:	f000 f9be 	bl	80145b4 <_Bfree>
 8014238:	4639      	mov	r1, r7
 801423a:	4620      	mov	r0, r4
 801423c:	f000 f9ba 	bl	80145b4 <_Bfree>
 8014240:	e69c      	b.n	8013f7c <_dtoa_r+0x6c4>
 8014242:	2600      	movs	r6, #0
 8014244:	4637      	mov	r7, r6
 8014246:	e7e1      	b.n	801420c <_dtoa_r+0x954>
 8014248:	46bb      	mov	fp, r7
 801424a:	4637      	mov	r7, r6
 801424c:	e599      	b.n	8013d82 <_dtoa_r+0x4ca>
 801424e:	bf00      	nop
 8014250:	40240000 	.word	0x40240000
 8014254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014256:	2b00      	cmp	r3, #0
 8014258:	f000 80c8 	beq.w	80143ec <_dtoa_r+0xb34>
 801425c:	9b04      	ldr	r3, [sp, #16]
 801425e:	9301      	str	r3, [sp, #4]
 8014260:	2d00      	cmp	r5, #0
 8014262:	dd05      	ble.n	8014270 <_dtoa_r+0x9b8>
 8014264:	4639      	mov	r1, r7
 8014266:	462a      	mov	r2, r5
 8014268:	4620      	mov	r0, r4
 801426a:	f000 fbbd 	bl	80149e8 <__lshift>
 801426e:	4607      	mov	r7, r0
 8014270:	f1b8 0f00 	cmp.w	r8, #0
 8014274:	d05b      	beq.n	801432e <_dtoa_r+0xa76>
 8014276:	6879      	ldr	r1, [r7, #4]
 8014278:	4620      	mov	r0, r4
 801427a:	f000 f95b 	bl	8014534 <_Balloc>
 801427e:	4605      	mov	r5, r0
 8014280:	b928      	cbnz	r0, 801428e <_dtoa_r+0x9d6>
 8014282:	4b83      	ldr	r3, [pc, #524]	; (8014490 <_dtoa_r+0xbd8>)
 8014284:	4602      	mov	r2, r0
 8014286:	f240 21ef 	movw	r1, #751	; 0x2ef
 801428a:	f7ff bb2e 	b.w	80138ea <_dtoa_r+0x32>
 801428e:	693a      	ldr	r2, [r7, #16]
 8014290:	3202      	adds	r2, #2
 8014292:	0092      	lsls	r2, r2, #2
 8014294:	f107 010c 	add.w	r1, r7, #12
 8014298:	300c      	adds	r0, #12
 801429a:	f7ff fa70 	bl	801377e <memcpy>
 801429e:	2201      	movs	r2, #1
 80142a0:	4629      	mov	r1, r5
 80142a2:	4620      	mov	r0, r4
 80142a4:	f000 fba0 	bl	80149e8 <__lshift>
 80142a8:	9b00      	ldr	r3, [sp, #0]
 80142aa:	3301      	adds	r3, #1
 80142ac:	9304      	str	r3, [sp, #16]
 80142ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142b2:	4413      	add	r3, r2
 80142b4:	9308      	str	r3, [sp, #32]
 80142b6:	9b02      	ldr	r3, [sp, #8]
 80142b8:	f003 0301 	and.w	r3, r3, #1
 80142bc:	46b8      	mov	r8, r7
 80142be:	9306      	str	r3, [sp, #24]
 80142c0:	4607      	mov	r7, r0
 80142c2:	9b04      	ldr	r3, [sp, #16]
 80142c4:	4631      	mov	r1, r6
 80142c6:	3b01      	subs	r3, #1
 80142c8:	4650      	mov	r0, sl
 80142ca:	9301      	str	r3, [sp, #4]
 80142cc:	f7ff fa6c 	bl	80137a8 <quorem>
 80142d0:	4641      	mov	r1, r8
 80142d2:	9002      	str	r0, [sp, #8]
 80142d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80142d8:	4650      	mov	r0, sl
 80142da:	f000 fbf1 	bl	8014ac0 <__mcmp>
 80142de:	463a      	mov	r2, r7
 80142e0:	9005      	str	r0, [sp, #20]
 80142e2:	4631      	mov	r1, r6
 80142e4:	4620      	mov	r0, r4
 80142e6:	f000 fc07 	bl	8014af8 <__mdiff>
 80142ea:	68c2      	ldr	r2, [r0, #12]
 80142ec:	4605      	mov	r5, r0
 80142ee:	bb02      	cbnz	r2, 8014332 <_dtoa_r+0xa7a>
 80142f0:	4601      	mov	r1, r0
 80142f2:	4650      	mov	r0, sl
 80142f4:	f000 fbe4 	bl	8014ac0 <__mcmp>
 80142f8:	4602      	mov	r2, r0
 80142fa:	4629      	mov	r1, r5
 80142fc:	4620      	mov	r0, r4
 80142fe:	9209      	str	r2, [sp, #36]	; 0x24
 8014300:	f000 f958 	bl	80145b4 <_Bfree>
 8014304:	9b07      	ldr	r3, [sp, #28]
 8014306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014308:	9d04      	ldr	r5, [sp, #16]
 801430a:	ea43 0102 	orr.w	r1, r3, r2
 801430e:	9b06      	ldr	r3, [sp, #24]
 8014310:	4319      	orrs	r1, r3
 8014312:	d110      	bne.n	8014336 <_dtoa_r+0xa7e>
 8014314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014318:	d029      	beq.n	801436e <_dtoa_r+0xab6>
 801431a:	9b05      	ldr	r3, [sp, #20]
 801431c:	2b00      	cmp	r3, #0
 801431e:	dd02      	ble.n	8014326 <_dtoa_r+0xa6e>
 8014320:	9b02      	ldr	r3, [sp, #8]
 8014322:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014326:	9b01      	ldr	r3, [sp, #4]
 8014328:	f883 9000 	strb.w	r9, [r3]
 801432c:	e774      	b.n	8014218 <_dtoa_r+0x960>
 801432e:	4638      	mov	r0, r7
 8014330:	e7ba      	b.n	80142a8 <_dtoa_r+0x9f0>
 8014332:	2201      	movs	r2, #1
 8014334:	e7e1      	b.n	80142fa <_dtoa_r+0xa42>
 8014336:	9b05      	ldr	r3, [sp, #20]
 8014338:	2b00      	cmp	r3, #0
 801433a:	db04      	blt.n	8014346 <_dtoa_r+0xa8e>
 801433c:	9907      	ldr	r1, [sp, #28]
 801433e:	430b      	orrs	r3, r1
 8014340:	9906      	ldr	r1, [sp, #24]
 8014342:	430b      	orrs	r3, r1
 8014344:	d120      	bne.n	8014388 <_dtoa_r+0xad0>
 8014346:	2a00      	cmp	r2, #0
 8014348:	dded      	ble.n	8014326 <_dtoa_r+0xa6e>
 801434a:	4651      	mov	r1, sl
 801434c:	2201      	movs	r2, #1
 801434e:	4620      	mov	r0, r4
 8014350:	f000 fb4a 	bl	80149e8 <__lshift>
 8014354:	4631      	mov	r1, r6
 8014356:	4682      	mov	sl, r0
 8014358:	f000 fbb2 	bl	8014ac0 <__mcmp>
 801435c:	2800      	cmp	r0, #0
 801435e:	dc03      	bgt.n	8014368 <_dtoa_r+0xab0>
 8014360:	d1e1      	bne.n	8014326 <_dtoa_r+0xa6e>
 8014362:	f019 0f01 	tst.w	r9, #1
 8014366:	d0de      	beq.n	8014326 <_dtoa_r+0xa6e>
 8014368:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801436c:	d1d8      	bne.n	8014320 <_dtoa_r+0xa68>
 801436e:	9a01      	ldr	r2, [sp, #4]
 8014370:	2339      	movs	r3, #57	; 0x39
 8014372:	7013      	strb	r3, [r2, #0]
 8014374:	462b      	mov	r3, r5
 8014376:	461d      	mov	r5, r3
 8014378:	3b01      	subs	r3, #1
 801437a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801437e:	2a39      	cmp	r2, #57	; 0x39
 8014380:	d06c      	beq.n	801445c <_dtoa_r+0xba4>
 8014382:	3201      	adds	r2, #1
 8014384:	701a      	strb	r2, [r3, #0]
 8014386:	e747      	b.n	8014218 <_dtoa_r+0x960>
 8014388:	2a00      	cmp	r2, #0
 801438a:	dd07      	ble.n	801439c <_dtoa_r+0xae4>
 801438c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014390:	d0ed      	beq.n	801436e <_dtoa_r+0xab6>
 8014392:	9a01      	ldr	r2, [sp, #4]
 8014394:	f109 0301 	add.w	r3, r9, #1
 8014398:	7013      	strb	r3, [r2, #0]
 801439a:	e73d      	b.n	8014218 <_dtoa_r+0x960>
 801439c:	9b04      	ldr	r3, [sp, #16]
 801439e:	9a08      	ldr	r2, [sp, #32]
 80143a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d043      	beq.n	8014430 <_dtoa_r+0xb78>
 80143a8:	4651      	mov	r1, sl
 80143aa:	2300      	movs	r3, #0
 80143ac:	220a      	movs	r2, #10
 80143ae:	4620      	mov	r0, r4
 80143b0:	f000 f922 	bl	80145f8 <__multadd>
 80143b4:	45b8      	cmp	r8, r7
 80143b6:	4682      	mov	sl, r0
 80143b8:	f04f 0300 	mov.w	r3, #0
 80143bc:	f04f 020a 	mov.w	r2, #10
 80143c0:	4641      	mov	r1, r8
 80143c2:	4620      	mov	r0, r4
 80143c4:	d107      	bne.n	80143d6 <_dtoa_r+0xb1e>
 80143c6:	f000 f917 	bl	80145f8 <__multadd>
 80143ca:	4680      	mov	r8, r0
 80143cc:	4607      	mov	r7, r0
 80143ce:	9b04      	ldr	r3, [sp, #16]
 80143d0:	3301      	adds	r3, #1
 80143d2:	9304      	str	r3, [sp, #16]
 80143d4:	e775      	b.n	80142c2 <_dtoa_r+0xa0a>
 80143d6:	f000 f90f 	bl	80145f8 <__multadd>
 80143da:	4639      	mov	r1, r7
 80143dc:	4680      	mov	r8, r0
 80143de:	2300      	movs	r3, #0
 80143e0:	220a      	movs	r2, #10
 80143e2:	4620      	mov	r0, r4
 80143e4:	f000 f908 	bl	80145f8 <__multadd>
 80143e8:	4607      	mov	r7, r0
 80143ea:	e7f0      	b.n	80143ce <_dtoa_r+0xb16>
 80143ec:	9b04      	ldr	r3, [sp, #16]
 80143ee:	9301      	str	r3, [sp, #4]
 80143f0:	9d00      	ldr	r5, [sp, #0]
 80143f2:	4631      	mov	r1, r6
 80143f4:	4650      	mov	r0, sl
 80143f6:	f7ff f9d7 	bl	80137a8 <quorem>
 80143fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80143fe:	9b00      	ldr	r3, [sp, #0]
 8014400:	f805 9b01 	strb.w	r9, [r5], #1
 8014404:	1aea      	subs	r2, r5, r3
 8014406:	9b01      	ldr	r3, [sp, #4]
 8014408:	4293      	cmp	r3, r2
 801440a:	dd07      	ble.n	801441c <_dtoa_r+0xb64>
 801440c:	4651      	mov	r1, sl
 801440e:	2300      	movs	r3, #0
 8014410:	220a      	movs	r2, #10
 8014412:	4620      	mov	r0, r4
 8014414:	f000 f8f0 	bl	80145f8 <__multadd>
 8014418:	4682      	mov	sl, r0
 801441a:	e7ea      	b.n	80143f2 <_dtoa_r+0xb3a>
 801441c:	9b01      	ldr	r3, [sp, #4]
 801441e:	2b00      	cmp	r3, #0
 8014420:	bfc8      	it	gt
 8014422:	461d      	movgt	r5, r3
 8014424:	9b00      	ldr	r3, [sp, #0]
 8014426:	bfd8      	it	le
 8014428:	2501      	movle	r5, #1
 801442a:	441d      	add	r5, r3
 801442c:	f04f 0800 	mov.w	r8, #0
 8014430:	4651      	mov	r1, sl
 8014432:	2201      	movs	r2, #1
 8014434:	4620      	mov	r0, r4
 8014436:	f000 fad7 	bl	80149e8 <__lshift>
 801443a:	4631      	mov	r1, r6
 801443c:	4682      	mov	sl, r0
 801443e:	f000 fb3f 	bl	8014ac0 <__mcmp>
 8014442:	2800      	cmp	r0, #0
 8014444:	dc96      	bgt.n	8014374 <_dtoa_r+0xabc>
 8014446:	d102      	bne.n	801444e <_dtoa_r+0xb96>
 8014448:	f019 0f01 	tst.w	r9, #1
 801444c:	d192      	bne.n	8014374 <_dtoa_r+0xabc>
 801444e:	462b      	mov	r3, r5
 8014450:	461d      	mov	r5, r3
 8014452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014456:	2a30      	cmp	r2, #48	; 0x30
 8014458:	d0fa      	beq.n	8014450 <_dtoa_r+0xb98>
 801445a:	e6dd      	b.n	8014218 <_dtoa_r+0x960>
 801445c:	9a00      	ldr	r2, [sp, #0]
 801445e:	429a      	cmp	r2, r3
 8014460:	d189      	bne.n	8014376 <_dtoa_r+0xabe>
 8014462:	f10b 0b01 	add.w	fp, fp, #1
 8014466:	2331      	movs	r3, #49	; 0x31
 8014468:	e796      	b.n	8014398 <_dtoa_r+0xae0>
 801446a:	4b0a      	ldr	r3, [pc, #40]	; (8014494 <_dtoa_r+0xbdc>)
 801446c:	f7ff ba99 	b.w	80139a2 <_dtoa_r+0xea>
 8014470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014472:	2b00      	cmp	r3, #0
 8014474:	f47f aa6d 	bne.w	8013952 <_dtoa_r+0x9a>
 8014478:	4b07      	ldr	r3, [pc, #28]	; (8014498 <_dtoa_r+0xbe0>)
 801447a:	f7ff ba92 	b.w	80139a2 <_dtoa_r+0xea>
 801447e:	9b01      	ldr	r3, [sp, #4]
 8014480:	2b00      	cmp	r3, #0
 8014482:	dcb5      	bgt.n	80143f0 <_dtoa_r+0xb38>
 8014484:	9b07      	ldr	r3, [sp, #28]
 8014486:	2b02      	cmp	r3, #2
 8014488:	f73f aeb1 	bgt.w	80141ee <_dtoa_r+0x936>
 801448c:	e7b0      	b.n	80143f0 <_dtoa_r+0xb38>
 801448e:	bf00      	nop
 8014490:	08017ed1 	.word	0x08017ed1
 8014494:	08017e2c 	.word	0x08017e2c
 8014498:	08017e55 	.word	0x08017e55

0801449c <_free_r>:
 801449c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801449e:	2900      	cmp	r1, #0
 80144a0:	d044      	beq.n	801452c <_free_r+0x90>
 80144a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144a6:	9001      	str	r0, [sp, #4]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	f1a1 0404 	sub.w	r4, r1, #4
 80144ae:	bfb8      	it	lt
 80144b0:	18e4      	addlt	r4, r4, r3
 80144b2:	f7fe f89b 	bl	80125ec <__malloc_lock>
 80144b6:	4a1e      	ldr	r2, [pc, #120]	; (8014530 <_free_r+0x94>)
 80144b8:	9801      	ldr	r0, [sp, #4]
 80144ba:	6813      	ldr	r3, [r2, #0]
 80144bc:	b933      	cbnz	r3, 80144cc <_free_r+0x30>
 80144be:	6063      	str	r3, [r4, #4]
 80144c0:	6014      	str	r4, [r2, #0]
 80144c2:	b003      	add	sp, #12
 80144c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144c8:	f7fe b896 	b.w	80125f8 <__malloc_unlock>
 80144cc:	42a3      	cmp	r3, r4
 80144ce:	d908      	bls.n	80144e2 <_free_r+0x46>
 80144d0:	6825      	ldr	r5, [r4, #0]
 80144d2:	1961      	adds	r1, r4, r5
 80144d4:	428b      	cmp	r3, r1
 80144d6:	bf01      	itttt	eq
 80144d8:	6819      	ldreq	r1, [r3, #0]
 80144da:	685b      	ldreq	r3, [r3, #4]
 80144dc:	1949      	addeq	r1, r1, r5
 80144de:	6021      	streq	r1, [r4, #0]
 80144e0:	e7ed      	b.n	80144be <_free_r+0x22>
 80144e2:	461a      	mov	r2, r3
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	b10b      	cbz	r3, 80144ec <_free_r+0x50>
 80144e8:	42a3      	cmp	r3, r4
 80144ea:	d9fa      	bls.n	80144e2 <_free_r+0x46>
 80144ec:	6811      	ldr	r1, [r2, #0]
 80144ee:	1855      	adds	r5, r2, r1
 80144f0:	42a5      	cmp	r5, r4
 80144f2:	d10b      	bne.n	801450c <_free_r+0x70>
 80144f4:	6824      	ldr	r4, [r4, #0]
 80144f6:	4421      	add	r1, r4
 80144f8:	1854      	adds	r4, r2, r1
 80144fa:	42a3      	cmp	r3, r4
 80144fc:	6011      	str	r1, [r2, #0]
 80144fe:	d1e0      	bne.n	80144c2 <_free_r+0x26>
 8014500:	681c      	ldr	r4, [r3, #0]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	6053      	str	r3, [r2, #4]
 8014506:	440c      	add	r4, r1
 8014508:	6014      	str	r4, [r2, #0]
 801450a:	e7da      	b.n	80144c2 <_free_r+0x26>
 801450c:	d902      	bls.n	8014514 <_free_r+0x78>
 801450e:	230c      	movs	r3, #12
 8014510:	6003      	str	r3, [r0, #0]
 8014512:	e7d6      	b.n	80144c2 <_free_r+0x26>
 8014514:	6825      	ldr	r5, [r4, #0]
 8014516:	1961      	adds	r1, r4, r5
 8014518:	428b      	cmp	r3, r1
 801451a:	bf04      	itt	eq
 801451c:	6819      	ldreq	r1, [r3, #0]
 801451e:	685b      	ldreq	r3, [r3, #4]
 8014520:	6063      	str	r3, [r4, #4]
 8014522:	bf04      	itt	eq
 8014524:	1949      	addeq	r1, r1, r5
 8014526:	6021      	streq	r1, [r4, #0]
 8014528:	6054      	str	r4, [r2, #4]
 801452a:	e7ca      	b.n	80144c2 <_free_r+0x26>
 801452c:	b003      	add	sp, #12
 801452e:	bd30      	pop	{r4, r5, pc}
 8014530:	20000944 	.word	0x20000944

08014534 <_Balloc>:
 8014534:	b570      	push	{r4, r5, r6, lr}
 8014536:	69c6      	ldr	r6, [r0, #28]
 8014538:	4604      	mov	r4, r0
 801453a:	460d      	mov	r5, r1
 801453c:	b976      	cbnz	r6, 801455c <_Balloc+0x28>
 801453e:	2010      	movs	r0, #16
 8014540:	f7fd ffa4 	bl	801248c <malloc>
 8014544:	4602      	mov	r2, r0
 8014546:	61e0      	str	r0, [r4, #28]
 8014548:	b920      	cbnz	r0, 8014554 <_Balloc+0x20>
 801454a:	4b18      	ldr	r3, [pc, #96]	; (80145ac <_Balloc+0x78>)
 801454c:	4818      	ldr	r0, [pc, #96]	; (80145b0 <_Balloc+0x7c>)
 801454e:	216b      	movs	r1, #107	; 0x6b
 8014550:	f7fd ff6c 	bl	801242c <__assert_func>
 8014554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014558:	6006      	str	r6, [r0, #0]
 801455a:	60c6      	str	r6, [r0, #12]
 801455c:	69e6      	ldr	r6, [r4, #28]
 801455e:	68f3      	ldr	r3, [r6, #12]
 8014560:	b183      	cbz	r3, 8014584 <_Balloc+0x50>
 8014562:	69e3      	ldr	r3, [r4, #28]
 8014564:	68db      	ldr	r3, [r3, #12]
 8014566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801456a:	b9b8      	cbnz	r0, 801459c <_Balloc+0x68>
 801456c:	2101      	movs	r1, #1
 801456e:	fa01 f605 	lsl.w	r6, r1, r5
 8014572:	1d72      	adds	r2, r6, #5
 8014574:	0092      	lsls	r2, r2, #2
 8014576:	4620      	mov	r0, r4
 8014578:	f001 ff1a 	bl	80163b0 <_calloc_r>
 801457c:	b160      	cbz	r0, 8014598 <_Balloc+0x64>
 801457e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014582:	e00e      	b.n	80145a2 <_Balloc+0x6e>
 8014584:	2221      	movs	r2, #33	; 0x21
 8014586:	2104      	movs	r1, #4
 8014588:	4620      	mov	r0, r4
 801458a:	f001 ff11 	bl	80163b0 <_calloc_r>
 801458e:	69e3      	ldr	r3, [r4, #28]
 8014590:	60f0      	str	r0, [r6, #12]
 8014592:	68db      	ldr	r3, [r3, #12]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d1e4      	bne.n	8014562 <_Balloc+0x2e>
 8014598:	2000      	movs	r0, #0
 801459a:	bd70      	pop	{r4, r5, r6, pc}
 801459c:	6802      	ldr	r2, [r0, #0]
 801459e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145a2:	2300      	movs	r3, #0
 80145a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145a8:	e7f7      	b.n	801459a <_Balloc+0x66>
 80145aa:	bf00      	nop
 80145ac:	08017e62 	.word	0x08017e62
 80145b0:	08017ee2 	.word	0x08017ee2

080145b4 <_Bfree>:
 80145b4:	b570      	push	{r4, r5, r6, lr}
 80145b6:	69c6      	ldr	r6, [r0, #28]
 80145b8:	4605      	mov	r5, r0
 80145ba:	460c      	mov	r4, r1
 80145bc:	b976      	cbnz	r6, 80145dc <_Bfree+0x28>
 80145be:	2010      	movs	r0, #16
 80145c0:	f7fd ff64 	bl	801248c <malloc>
 80145c4:	4602      	mov	r2, r0
 80145c6:	61e8      	str	r0, [r5, #28]
 80145c8:	b920      	cbnz	r0, 80145d4 <_Bfree+0x20>
 80145ca:	4b09      	ldr	r3, [pc, #36]	; (80145f0 <_Bfree+0x3c>)
 80145cc:	4809      	ldr	r0, [pc, #36]	; (80145f4 <_Bfree+0x40>)
 80145ce:	218f      	movs	r1, #143	; 0x8f
 80145d0:	f7fd ff2c 	bl	801242c <__assert_func>
 80145d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145d8:	6006      	str	r6, [r0, #0]
 80145da:	60c6      	str	r6, [r0, #12]
 80145dc:	b13c      	cbz	r4, 80145ee <_Bfree+0x3a>
 80145de:	69eb      	ldr	r3, [r5, #28]
 80145e0:	6862      	ldr	r2, [r4, #4]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80145e8:	6021      	str	r1, [r4, #0]
 80145ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80145ee:	bd70      	pop	{r4, r5, r6, pc}
 80145f0:	08017e62 	.word	0x08017e62
 80145f4:	08017ee2 	.word	0x08017ee2

080145f8 <__multadd>:
 80145f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145fc:	690d      	ldr	r5, [r1, #16]
 80145fe:	4607      	mov	r7, r0
 8014600:	460c      	mov	r4, r1
 8014602:	461e      	mov	r6, r3
 8014604:	f101 0c14 	add.w	ip, r1, #20
 8014608:	2000      	movs	r0, #0
 801460a:	f8dc 3000 	ldr.w	r3, [ip]
 801460e:	b299      	uxth	r1, r3
 8014610:	fb02 6101 	mla	r1, r2, r1, r6
 8014614:	0c1e      	lsrs	r6, r3, #16
 8014616:	0c0b      	lsrs	r3, r1, #16
 8014618:	fb02 3306 	mla	r3, r2, r6, r3
 801461c:	b289      	uxth	r1, r1
 801461e:	3001      	adds	r0, #1
 8014620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014624:	4285      	cmp	r5, r0
 8014626:	f84c 1b04 	str.w	r1, [ip], #4
 801462a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801462e:	dcec      	bgt.n	801460a <__multadd+0x12>
 8014630:	b30e      	cbz	r6, 8014676 <__multadd+0x7e>
 8014632:	68a3      	ldr	r3, [r4, #8]
 8014634:	42ab      	cmp	r3, r5
 8014636:	dc19      	bgt.n	801466c <__multadd+0x74>
 8014638:	6861      	ldr	r1, [r4, #4]
 801463a:	4638      	mov	r0, r7
 801463c:	3101      	adds	r1, #1
 801463e:	f7ff ff79 	bl	8014534 <_Balloc>
 8014642:	4680      	mov	r8, r0
 8014644:	b928      	cbnz	r0, 8014652 <__multadd+0x5a>
 8014646:	4602      	mov	r2, r0
 8014648:	4b0c      	ldr	r3, [pc, #48]	; (801467c <__multadd+0x84>)
 801464a:	480d      	ldr	r0, [pc, #52]	; (8014680 <__multadd+0x88>)
 801464c:	21ba      	movs	r1, #186	; 0xba
 801464e:	f7fd feed 	bl	801242c <__assert_func>
 8014652:	6922      	ldr	r2, [r4, #16]
 8014654:	3202      	adds	r2, #2
 8014656:	f104 010c 	add.w	r1, r4, #12
 801465a:	0092      	lsls	r2, r2, #2
 801465c:	300c      	adds	r0, #12
 801465e:	f7ff f88e 	bl	801377e <memcpy>
 8014662:	4621      	mov	r1, r4
 8014664:	4638      	mov	r0, r7
 8014666:	f7ff ffa5 	bl	80145b4 <_Bfree>
 801466a:	4644      	mov	r4, r8
 801466c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014670:	3501      	adds	r5, #1
 8014672:	615e      	str	r6, [r3, #20]
 8014674:	6125      	str	r5, [r4, #16]
 8014676:	4620      	mov	r0, r4
 8014678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801467c:	08017ed1 	.word	0x08017ed1
 8014680:	08017ee2 	.word	0x08017ee2

08014684 <__s2b>:
 8014684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014688:	460c      	mov	r4, r1
 801468a:	4615      	mov	r5, r2
 801468c:	461f      	mov	r7, r3
 801468e:	2209      	movs	r2, #9
 8014690:	3308      	adds	r3, #8
 8014692:	4606      	mov	r6, r0
 8014694:	fb93 f3f2 	sdiv	r3, r3, r2
 8014698:	2100      	movs	r1, #0
 801469a:	2201      	movs	r2, #1
 801469c:	429a      	cmp	r2, r3
 801469e:	db09      	blt.n	80146b4 <__s2b+0x30>
 80146a0:	4630      	mov	r0, r6
 80146a2:	f7ff ff47 	bl	8014534 <_Balloc>
 80146a6:	b940      	cbnz	r0, 80146ba <__s2b+0x36>
 80146a8:	4602      	mov	r2, r0
 80146aa:	4b19      	ldr	r3, [pc, #100]	; (8014710 <__s2b+0x8c>)
 80146ac:	4819      	ldr	r0, [pc, #100]	; (8014714 <__s2b+0x90>)
 80146ae:	21d3      	movs	r1, #211	; 0xd3
 80146b0:	f7fd febc 	bl	801242c <__assert_func>
 80146b4:	0052      	lsls	r2, r2, #1
 80146b6:	3101      	adds	r1, #1
 80146b8:	e7f0      	b.n	801469c <__s2b+0x18>
 80146ba:	9b08      	ldr	r3, [sp, #32]
 80146bc:	6143      	str	r3, [r0, #20]
 80146be:	2d09      	cmp	r5, #9
 80146c0:	f04f 0301 	mov.w	r3, #1
 80146c4:	6103      	str	r3, [r0, #16]
 80146c6:	dd16      	ble.n	80146f6 <__s2b+0x72>
 80146c8:	f104 0909 	add.w	r9, r4, #9
 80146cc:	46c8      	mov	r8, r9
 80146ce:	442c      	add	r4, r5
 80146d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80146d4:	4601      	mov	r1, r0
 80146d6:	3b30      	subs	r3, #48	; 0x30
 80146d8:	220a      	movs	r2, #10
 80146da:	4630      	mov	r0, r6
 80146dc:	f7ff ff8c 	bl	80145f8 <__multadd>
 80146e0:	45a0      	cmp	r8, r4
 80146e2:	d1f5      	bne.n	80146d0 <__s2b+0x4c>
 80146e4:	f1a5 0408 	sub.w	r4, r5, #8
 80146e8:	444c      	add	r4, r9
 80146ea:	1b2d      	subs	r5, r5, r4
 80146ec:	1963      	adds	r3, r4, r5
 80146ee:	42bb      	cmp	r3, r7
 80146f0:	db04      	blt.n	80146fc <__s2b+0x78>
 80146f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146f6:	340a      	adds	r4, #10
 80146f8:	2509      	movs	r5, #9
 80146fa:	e7f6      	b.n	80146ea <__s2b+0x66>
 80146fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014700:	4601      	mov	r1, r0
 8014702:	3b30      	subs	r3, #48	; 0x30
 8014704:	220a      	movs	r2, #10
 8014706:	4630      	mov	r0, r6
 8014708:	f7ff ff76 	bl	80145f8 <__multadd>
 801470c:	e7ee      	b.n	80146ec <__s2b+0x68>
 801470e:	bf00      	nop
 8014710:	08017ed1 	.word	0x08017ed1
 8014714:	08017ee2 	.word	0x08017ee2

08014718 <__hi0bits>:
 8014718:	0c03      	lsrs	r3, r0, #16
 801471a:	041b      	lsls	r3, r3, #16
 801471c:	b9d3      	cbnz	r3, 8014754 <__hi0bits+0x3c>
 801471e:	0400      	lsls	r0, r0, #16
 8014720:	2310      	movs	r3, #16
 8014722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014726:	bf04      	itt	eq
 8014728:	0200      	lsleq	r0, r0, #8
 801472a:	3308      	addeq	r3, #8
 801472c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014730:	bf04      	itt	eq
 8014732:	0100      	lsleq	r0, r0, #4
 8014734:	3304      	addeq	r3, #4
 8014736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801473a:	bf04      	itt	eq
 801473c:	0080      	lsleq	r0, r0, #2
 801473e:	3302      	addeq	r3, #2
 8014740:	2800      	cmp	r0, #0
 8014742:	db05      	blt.n	8014750 <__hi0bits+0x38>
 8014744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014748:	f103 0301 	add.w	r3, r3, #1
 801474c:	bf08      	it	eq
 801474e:	2320      	moveq	r3, #32
 8014750:	4618      	mov	r0, r3
 8014752:	4770      	bx	lr
 8014754:	2300      	movs	r3, #0
 8014756:	e7e4      	b.n	8014722 <__hi0bits+0xa>

08014758 <__lo0bits>:
 8014758:	6803      	ldr	r3, [r0, #0]
 801475a:	f013 0207 	ands.w	r2, r3, #7
 801475e:	d00c      	beq.n	801477a <__lo0bits+0x22>
 8014760:	07d9      	lsls	r1, r3, #31
 8014762:	d422      	bmi.n	80147aa <__lo0bits+0x52>
 8014764:	079a      	lsls	r2, r3, #30
 8014766:	bf49      	itett	mi
 8014768:	085b      	lsrmi	r3, r3, #1
 801476a:	089b      	lsrpl	r3, r3, #2
 801476c:	6003      	strmi	r3, [r0, #0]
 801476e:	2201      	movmi	r2, #1
 8014770:	bf5c      	itt	pl
 8014772:	6003      	strpl	r3, [r0, #0]
 8014774:	2202      	movpl	r2, #2
 8014776:	4610      	mov	r0, r2
 8014778:	4770      	bx	lr
 801477a:	b299      	uxth	r1, r3
 801477c:	b909      	cbnz	r1, 8014782 <__lo0bits+0x2a>
 801477e:	0c1b      	lsrs	r3, r3, #16
 8014780:	2210      	movs	r2, #16
 8014782:	b2d9      	uxtb	r1, r3
 8014784:	b909      	cbnz	r1, 801478a <__lo0bits+0x32>
 8014786:	3208      	adds	r2, #8
 8014788:	0a1b      	lsrs	r3, r3, #8
 801478a:	0719      	lsls	r1, r3, #28
 801478c:	bf04      	itt	eq
 801478e:	091b      	lsreq	r3, r3, #4
 8014790:	3204      	addeq	r2, #4
 8014792:	0799      	lsls	r1, r3, #30
 8014794:	bf04      	itt	eq
 8014796:	089b      	lsreq	r3, r3, #2
 8014798:	3202      	addeq	r2, #2
 801479a:	07d9      	lsls	r1, r3, #31
 801479c:	d403      	bmi.n	80147a6 <__lo0bits+0x4e>
 801479e:	085b      	lsrs	r3, r3, #1
 80147a0:	f102 0201 	add.w	r2, r2, #1
 80147a4:	d003      	beq.n	80147ae <__lo0bits+0x56>
 80147a6:	6003      	str	r3, [r0, #0]
 80147a8:	e7e5      	b.n	8014776 <__lo0bits+0x1e>
 80147aa:	2200      	movs	r2, #0
 80147ac:	e7e3      	b.n	8014776 <__lo0bits+0x1e>
 80147ae:	2220      	movs	r2, #32
 80147b0:	e7e1      	b.n	8014776 <__lo0bits+0x1e>
	...

080147b4 <__i2b>:
 80147b4:	b510      	push	{r4, lr}
 80147b6:	460c      	mov	r4, r1
 80147b8:	2101      	movs	r1, #1
 80147ba:	f7ff febb 	bl	8014534 <_Balloc>
 80147be:	4602      	mov	r2, r0
 80147c0:	b928      	cbnz	r0, 80147ce <__i2b+0x1a>
 80147c2:	4b05      	ldr	r3, [pc, #20]	; (80147d8 <__i2b+0x24>)
 80147c4:	4805      	ldr	r0, [pc, #20]	; (80147dc <__i2b+0x28>)
 80147c6:	f240 1145 	movw	r1, #325	; 0x145
 80147ca:	f7fd fe2f 	bl	801242c <__assert_func>
 80147ce:	2301      	movs	r3, #1
 80147d0:	6144      	str	r4, [r0, #20]
 80147d2:	6103      	str	r3, [r0, #16]
 80147d4:	bd10      	pop	{r4, pc}
 80147d6:	bf00      	nop
 80147d8:	08017ed1 	.word	0x08017ed1
 80147dc:	08017ee2 	.word	0x08017ee2

080147e0 <__multiply>:
 80147e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e4:	4691      	mov	r9, r2
 80147e6:	690a      	ldr	r2, [r1, #16]
 80147e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	bfb8      	it	lt
 80147f0:	460b      	movlt	r3, r1
 80147f2:	460c      	mov	r4, r1
 80147f4:	bfbc      	itt	lt
 80147f6:	464c      	movlt	r4, r9
 80147f8:	4699      	movlt	r9, r3
 80147fa:	6927      	ldr	r7, [r4, #16]
 80147fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014800:	68a3      	ldr	r3, [r4, #8]
 8014802:	6861      	ldr	r1, [r4, #4]
 8014804:	eb07 060a 	add.w	r6, r7, sl
 8014808:	42b3      	cmp	r3, r6
 801480a:	b085      	sub	sp, #20
 801480c:	bfb8      	it	lt
 801480e:	3101      	addlt	r1, #1
 8014810:	f7ff fe90 	bl	8014534 <_Balloc>
 8014814:	b930      	cbnz	r0, 8014824 <__multiply+0x44>
 8014816:	4602      	mov	r2, r0
 8014818:	4b44      	ldr	r3, [pc, #272]	; (801492c <__multiply+0x14c>)
 801481a:	4845      	ldr	r0, [pc, #276]	; (8014930 <__multiply+0x150>)
 801481c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014820:	f7fd fe04 	bl	801242c <__assert_func>
 8014824:	f100 0514 	add.w	r5, r0, #20
 8014828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801482c:	462b      	mov	r3, r5
 801482e:	2200      	movs	r2, #0
 8014830:	4543      	cmp	r3, r8
 8014832:	d321      	bcc.n	8014878 <__multiply+0x98>
 8014834:	f104 0314 	add.w	r3, r4, #20
 8014838:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801483c:	f109 0314 	add.w	r3, r9, #20
 8014840:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014844:	9202      	str	r2, [sp, #8]
 8014846:	1b3a      	subs	r2, r7, r4
 8014848:	3a15      	subs	r2, #21
 801484a:	f022 0203 	bic.w	r2, r2, #3
 801484e:	3204      	adds	r2, #4
 8014850:	f104 0115 	add.w	r1, r4, #21
 8014854:	428f      	cmp	r7, r1
 8014856:	bf38      	it	cc
 8014858:	2204      	movcc	r2, #4
 801485a:	9201      	str	r2, [sp, #4]
 801485c:	9a02      	ldr	r2, [sp, #8]
 801485e:	9303      	str	r3, [sp, #12]
 8014860:	429a      	cmp	r2, r3
 8014862:	d80c      	bhi.n	801487e <__multiply+0x9e>
 8014864:	2e00      	cmp	r6, #0
 8014866:	dd03      	ble.n	8014870 <__multiply+0x90>
 8014868:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801486c:	2b00      	cmp	r3, #0
 801486e:	d05b      	beq.n	8014928 <__multiply+0x148>
 8014870:	6106      	str	r6, [r0, #16]
 8014872:	b005      	add	sp, #20
 8014874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014878:	f843 2b04 	str.w	r2, [r3], #4
 801487c:	e7d8      	b.n	8014830 <__multiply+0x50>
 801487e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014882:	f1ba 0f00 	cmp.w	sl, #0
 8014886:	d024      	beq.n	80148d2 <__multiply+0xf2>
 8014888:	f104 0e14 	add.w	lr, r4, #20
 801488c:	46a9      	mov	r9, r5
 801488e:	f04f 0c00 	mov.w	ip, #0
 8014892:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014896:	f8d9 1000 	ldr.w	r1, [r9]
 801489a:	fa1f fb82 	uxth.w	fp, r2
 801489e:	b289      	uxth	r1, r1
 80148a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80148a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80148a8:	f8d9 2000 	ldr.w	r2, [r9]
 80148ac:	4461      	add	r1, ip
 80148ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80148b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80148b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80148ba:	b289      	uxth	r1, r1
 80148bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80148c0:	4577      	cmp	r7, lr
 80148c2:	f849 1b04 	str.w	r1, [r9], #4
 80148c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80148ca:	d8e2      	bhi.n	8014892 <__multiply+0xb2>
 80148cc:	9a01      	ldr	r2, [sp, #4]
 80148ce:	f845 c002 	str.w	ip, [r5, r2]
 80148d2:	9a03      	ldr	r2, [sp, #12]
 80148d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80148d8:	3304      	adds	r3, #4
 80148da:	f1b9 0f00 	cmp.w	r9, #0
 80148de:	d021      	beq.n	8014924 <__multiply+0x144>
 80148e0:	6829      	ldr	r1, [r5, #0]
 80148e2:	f104 0c14 	add.w	ip, r4, #20
 80148e6:	46ae      	mov	lr, r5
 80148e8:	f04f 0a00 	mov.w	sl, #0
 80148ec:	f8bc b000 	ldrh.w	fp, [ip]
 80148f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80148f4:	fb09 220b 	mla	r2, r9, fp, r2
 80148f8:	4452      	add	r2, sl
 80148fa:	b289      	uxth	r1, r1
 80148fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014900:	f84e 1b04 	str.w	r1, [lr], #4
 8014904:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801490c:	f8be 1000 	ldrh.w	r1, [lr]
 8014910:	fb09 110a 	mla	r1, r9, sl, r1
 8014914:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014918:	4567      	cmp	r7, ip
 801491a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801491e:	d8e5      	bhi.n	80148ec <__multiply+0x10c>
 8014920:	9a01      	ldr	r2, [sp, #4]
 8014922:	50a9      	str	r1, [r5, r2]
 8014924:	3504      	adds	r5, #4
 8014926:	e799      	b.n	801485c <__multiply+0x7c>
 8014928:	3e01      	subs	r6, #1
 801492a:	e79b      	b.n	8014864 <__multiply+0x84>
 801492c:	08017ed1 	.word	0x08017ed1
 8014930:	08017ee2 	.word	0x08017ee2

08014934 <__pow5mult>:
 8014934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014938:	4615      	mov	r5, r2
 801493a:	f012 0203 	ands.w	r2, r2, #3
 801493e:	4606      	mov	r6, r0
 8014940:	460f      	mov	r7, r1
 8014942:	d007      	beq.n	8014954 <__pow5mult+0x20>
 8014944:	4c25      	ldr	r4, [pc, #148]	; (80149dc <__pow5mult+0xa8>)
 8014946:	3a01      	subs	r2, #1
 8014948:	2300      	movs	r3, #0
 801494a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801494e:	f7ff fe53 	bl	80145f8 <__multadd>
 8014952:	4607      	mov	r7, r0
 8014954:	10ad      	asrs	r5, r5, #2
 8014956:	d03d      	beq.n	80149d4 <__pow5mult+0xa0>
 8014958:	69f4      	ldr	r4, [r6, #28]
 801495a:	b97c      	cbnz	r4, 801497c <__pow5mult+0x48>
 801495c:	2010      	movs	r0, #16
 801495e:	f7fd fd95 	bl	801248c <malloc>
 8014962:	4602      	mov	r2, r0
 8014964:	61f0      	str	r0, [r6, #28]
 8014966:	b928      	cbnz	r0, 8014974 <__pow5mult+0x40>
 8014968:	4b1d      	ldr	r3, [pc, #116]	; (80149e0 <__pow5mult+0xac>)
 801496a:	481e      	ldr	r0, [pc, #120]	; (80149e4 <__pow5mult+0xb0>)
 801496c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014970:	f7fd fd5c 	bl	801242c <__assert_func>
 8014974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014978:	6004      	str	r4, [r0, #0]
 801497a:	60c4      	str	r4, [r0, #12]
 801497c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014984:	b94c      	cbnz	r4, 801499a <__pow5mult+0x66>
 8014986:	f240 2171 	movw	r1, #625	; 0x271
 801498a:	4630      	mov	r0, r6
 801498c:	f7ff ff12 	bl	80147b4 <__i2b>
 8014990:	2300      	movs	r3, #0
 8014992:	f8c8 0008 	str.w	r0, [r8, #8]
 8014996:	4604      	mov	r4, r0
 8014998:	6003      	str	r3, [r0, #0]
 801499a:	f04f 0900 	mov.w	r9, #0
 801499e:	07eb      	lsls	r3, r5, #31
 80149a0:	d50a      	bpl.n	80149b8 <__pow5mult+0x84>
 80149a2:	4639      	mov	r1, r7
 80149a4:	4622      	mov	r2, r4
 80149a6:	4630      	mov	r0, r6
 80149a8:	f7ff ff1a 	bl	80147e0 <__multiply>
 80149ac:	4639      	mov	r1, r7
 80149ae:	4680      	mov	r8, r0
 80149b0:	4630      	mov	r0, r6
 80149b2:	f7ff fdff 	bl	80145b4 <_Bfree>
 80149b6:	4647      	mov	r7, r8
 80149b8:	106d      	asrs	r5, r5, #1
 80149ba:	d00b      	beq.n	80149d4 <__pow5mult+0xa0>
 80149bc:	6820      	ldr	r0, [r4, #0]
 80149be:	b938      	cbnz	r0, 80149d0 <__pow5mult+0x9c>
 80149c0:	4622      	mov	r2, r4
 80149c2:	4621      	mov	r1, r4
 80149c4:	4630      	mov	r0, r6
 80149c6:	f7ff ff0b 	bl	80147e0 <__multiply>
 80149ca:	6020      	str	r0, [r4, #0]
 80149cc:	f8c0 9000 	str.w	r9, [r0]
 80149d0:	4604      	mov	r4, r0
 80149d2:	e7e4      	b.n	801499e <__pow5mult+0x6a>
 80149d4:	4638      	mov	r0, r7
 80149d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149da:	bf00      	nop
 80149dc:	08018030 	.word	0x08018030
 80149e0:	08017e62 	.word	0x08017e62
 80149e4:	08017ee2 	.word	0x08017ee2

080149e8 <__lshift>:
 80149e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149ec:	460c      	mov	r4, r1
 80149ee:	6849      	ldr	r1, [r1, #4]
 80149f0:	6923      	ldr	r3, [r4, #16]
 80149f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80149f6:	68a3      	ldr	r3, [r4, #8]
 80149f8:	4607      	mov	r7, r0
 80149fa:	4691      	mov	r9, r2
 80149fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014a00:	f108 0601 	add.w	r6, r8, #1
 8014a04:	42b3      	cmp	r3, r6
 8014a06:	db0b      	blt.n	8014a20 <__lshift+0x38>
 8014a08:	4638      	mov	r0, r7
 8014a0a:	f7ff fd93 	bl	8014534 <_Balloc>
 8014a0e:	4605      	mov	r5, r0
 8014a10:	b948      	cbnz	r0, 8014a26 <__lshift+0x3e>
 8014a12:	4602      	mov	r2, r0
 8014a14:	4b28      	ldr	r3, [pc, #160]	; (8014ab8 <__lshift+0xd0>)
 8014a16:	4829      	ldr	r0, [pc, #164]	; (8014abc <__lshift+0xd4>)
 8014a18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014a1c:	f7fd fd06 	bl	801242c <__assert_func>
 8014a20:	3101      	adds	r1, #1
 8014a22:	005b      	lsls	r3, r3, #1
 8014a24:	e7ee      	b.n	8014a04 <__lshift+0x1c>
 8014a26:	2300      	movs	r3, #0
 8014a28:	f100 0114 	add.w	r1, r0, #20
 8014a2c:	f100 0210 	add.w	r2, r0, #16
 8014a30:	4618      	mov	r0, r3
 8014a32:	4553      	cmp	r3, sl
 8014a34:	db33      	blt.n	8014a9e <__lshift+0xb6>
 8014a36:	6920      	ldr	r0, [r4, #16]
 8014a38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014a3c:	f104 0314 	add.w	r3, r4, #20
 8014a40:	f019 091f 	ands.w	r9, r9, #31
 8014a44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014a48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014a4c:	d02b      	beq.n	8014aa6 <__lshift+0xbe>
 8014a4e:	f1c9 0e20 	rsb	lr, r9, #32
 8014a52:	468a      	mov	sl, r1
 8014a54:	2200      	movs	r2, #0
 8014a56:	6818      	ldr	r0, [r3, #0]
 8014a58:	fa00 f009 	lsl.w	r0, r0, r9
 8014a5c:	4310      	orrs	r0, r2
 8014a5e:	f84a 0b04 	str.w	r0, [sl], #4
 8014a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a66:	459c      	cmp	ip, r3
 8014a68:	fa22 f20e 	lsr.w	r2, r2, lr
 8014a6c:	d8f3      	bhi.n	8014a56 <__lshift+0x6e>
 8014a6e:	ebac 0304 	sub.w	r3, ip, r4
 8014a72:	3b15      	subs	r3, #21
 8014a74:	f023 0303 	bic.w	r3, r3, #3
 8014a78:	3304      	adds	r3, #4
 8014a7a:	f104 0015 	add.w	r0, r4, #21
 8014a7e:	4584      	cmp	ip, r0
 8014a80:	bf38      	it	cc
 8014a82:	2304      	movcc	r3, #4
 8014a84:	50ca      	str	r2, [r1, r3]
 8014a86:	b10a      	cbz	r2, 8014a8c <__lshift+0xa4>
 8014a88:	f108 0602 	add.w	r6, r8, #2
 8014a8c:	3e01      	subs	r6, #1
 8014a8e:	4638      	mov	r0, r7
 8014a90:	612e      	str	r6, [r5, #16]
 8014a92:	4621      	mov	r1, r4
 8014a94:	f7ff fd8e 	bl	80145b4 <_Bfree>
 8014a98:	4628      	mov	r0, r5
 8014a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	e7c5      	b.n	8014a32 <__lshift+0x4a>
 8014aa6:	3904      	subs	r1, #4
 8014aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aac:	f841 2f04 	str.w	r2, [r1, #4]!
 8014ab0:	459c      	cmp	ip, r3
 8014ab2:	d8f9      	bhi.n	8014aa8 <__lshift+0xc0>
 8014ab4:	e7ea      	b.n	8014a8c <__lshift+0xa4>
 8014ab6:	bf00      	nop
 8014ab8:	08017ed1 	.word	0x08017ed1
 8014abc:	08017ee2 	.word	0x08017ee2

08014ac0 <__mcmp>:
 8014ac0:	b530      	push	{r4, r5, lr}
 8014ac2:	6902      	ldr	r2, [r0, #16]
 8014ac4:	690c      	ldr	r4, [r1, #16]
 8014ac6:	1b12      	subs	r2, r2, r4
 8014ac8:	d10e      	bne.n	8014ae8 <__mcmp+0x28>
 8014aca:	f100 0314 	add.w	r3, r0, #20
 8014ace:	3114      	adds	r1, #20
 8014ad0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014ad4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014ad8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014adc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014ae0:	42a5      	cmp	r5, r4
 8014ae2:	d003      	beq.n	8014aec <__mcmp+0x2c>
 8014ae4:	d305      	bcc.n	8014af2 <__mcmp+0x32>
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	4610      	mov	r0, r2
 8014aea:	bd30      	pop	{r4, r5, pc}
 8014aec:	4283      	cmp	r3, r0
 8014aee:	d3f3      	bcc.n	8014ad8 <__mcmp+0x18>
 8014af0:	e7fa      	b.n	8014ae8 <__mcmp+0x28>
 8014af2:	f04f 32ff 	mov.w	r2, #4294967295
 8014af6:	e7f7      	b.n	8014ae8 <__mcmp+0x28>

08014af8 <__mdiff>:
 8014af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	460c      	mov	r4, r1
 8014afe:	4606      	mov	r6, r0
 8014b00:	4611      	mov	r1, r2
 8014b02:	4620      	mov	r0, r4
 8014b04:	4690      	mov	r8, r2
 8014b06:	f7ff ffdb 	bl	8014ac0 <__mcmp>
 8014b0a:	1e05      	subs	r5, r0, #0
 8014b0c:	d110      	bne.n	8014b30 <__mdiff+0x38>
 8014b0e:	4629      	mov	r1, r5
 8014b10:	4630      	mov	r0, r6
 8014b12:	f7ff fd0f 	bl	8014534 <_Balloc>
 8014b16:	b930      	cbnz	r0, 8014b26 <__mdiff+0x2e>
 8014b18:	4b3a      	ldr	r3, [pc, #232]	; (8014c04 <__mdiff+0x10c>)
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	f240 2137 	movw	r1, #567	; 0x237
 8014b20:	4839      	ldr	r0, [pc, #228]	; (8014c08 <__mdiff+0x110>)
 8014b22:	f7fd fc83 	bl	801242c <__assert_func>
 8014b26:	2301      	movs	r3, #1
 8014b28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b30:	bfa4      	itt	ge
 8014b32:	4643      	movge	r3, r8
 8014b34:	46a0      	movge	r8, r4
 8014b36:	4630      	mov	r0, r6
 8014b38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014b3c:	bfa6      	itte	ge
 8014b3e:	461c      	movge	r4, r3
 8014b40:	2500      	movge	r5, #0
 8014b42:	2501      	movlt	r5, #1
 8014b44:	f7ff fcf6 	bl	8014534 <_Balloc>
 8014b48:	b920      	cbnz	r0, 8014b54 <__mdiff+0x5c>
 8014b4a:	4b2e      	ldr	r3, [pc, #184]	; (8014c04 <__mdiff+0x10c>)
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	f240 2145 	movw	r1, #581	; 0x245
 8014b52:	e7e5      	b.n	8014b20 <__mdiff+0x28>
 8014b54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014b58:	6926      	ldr	r6, [r4, #16]
 8014b5a:	60c5      	str	r5, [r0, #12]
 8014b5c:	f104 0914 	add.w	r9, r4, #20
 8014b60:	f108 0514 	add.w	r5, r8, #20
 8014b64:	f100 0e14 	add.w	lr, r0, #20
 8014b68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014b6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014b70:	f108 0210 	add.w	r2, r8, #16
 8014b74:	46f2      	mov	sl, lr
 8014b76:	2100      	movs	r1, #0
 8014b78:	f859 3b04 	ldr.w	r3, [r9], #4
 8014b7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014b80:	fa11 f88b 	uxtah	r8, r1, fp
 8014b84:	b299      	uxth	r1, r3
 8014b86:	0c1b      	lsrs	r3, r3, #16
 8014b88:	eba8 0801 	sub.w	r8, r8, r1
 8014b8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014b90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014b94:	fa1f f888 	uxth.w	r8, r8
 8014b98:	1419      	asrs	r1, r3, #16
 8014b9a:	454e      	cmp	r6, r9
 8014b9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014ba0:	f84a 3b04 	str.w	r3, [sl], #4
 8014ba4:	d8e8      	bhi.n	8014b78 <__mdiff+0x80>
 8014ba6:	1b33      	subs	r3, r6, r4
 8014ba8:	3b15      	subs	r3, #21
 8014baa:	f023 0303 	bic.w	r3, r3, #3
 8014bae:	3304      	adds	r3, #4
 8014bb0:	3415      	adds	r4, #21
 8014bb2:	42a6      	cmp	r6, r4
 8014bb4:	bf38      	it	cc
 8014bb6:	2304      	movcc	r3, #4
 8014bb8:	441d      	add	r5, r3
 8014bba:	4473      	add	r3, lr
 8014bbc:	469e      	mov	lr, r3
 8014bbe:	462e      	mov	r6, r5
 8014bc0:	4566      	cmp	r6, ip
 8014bc2:	d30e      	bcc.n	8014be2 <__mdiff+0xea>
 8014bc4:	f10c 0203 	add.w	r2, ip, #3
 8014bc8:	1b52      	subs	r2, r2, r5
 8014bca:	f022 0203 	bic.w	r2, r2, #3
 8014bce:	3d03      	subs	r5, #3
 8014bd0:	45ac      	cmp	ip, r5
 8014bd2:	bf38      	it	cc
 8014bd4:	2200      	movcc	r2, #0
 8014bd6:	4413      	add	r3, r2
 8014bd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014bdc:	b17a      	cbz	r2, 8014bfe <__mdiff+0x106>
 8014bde:	6107      	str	r7, [r0, #16]
 8014be0:	e7a4      	b.n	8014b2c <__mdiff+0x34>
 8014be2:	f856 8b04 	ldr.w	r8, [r6], #4
 8014be6:	fa11 f288 	uxtah	r2, r1, r8
 8014bea:	1414      	asrs	r4, r2, #16
 8014bec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014bf0:	b292      	uxth	r2, r2
 8014bf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014bf6:	f84e 2b04 	str.w	r2, [lr], #4
 8014bfa:	1421      	asrs	r1, r4, #16
 8014bfc:	e7e0      	b.n	8014bc0 <__mdiff+0xc8>
 8014bfe:	3f01      	subs	r7, #1
 8014c00:	e7ea      	b.n	8014bd8 <__mdiff+0xe0>
 8014c02:	bf00      	nop
 8014c04:	08017ed1 	.word	0x08017ed1
 8014c08:	08017ee2 	.word	0x08017ee2

08014c0c <__ulp>:
 8014c0c:	b082      	sub	sp, #8
 8014c0e:	ed8d 0b00 	vstr	d0, [sp]
 8014c12:	9a01      	ldr	r2, [sp, #4]
 8014c14:	4b0f      	ldr	r3, [pc, #60]	; (8014c54 <__ulp+0x48>)
 8014c16:	4013      	ands	r3, r2
 8014c18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	dc08      	bgt.n	8014c32 <__ulp+0x26>
 8014c20:	425b      	negs	r3, r3
 8014c22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014c26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014c2a:	da04      	bge.n	8014c36 <__ulp+0x2a>
 8014c2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014c30:	4113      	asrs	r3, r2
 8014c32:	2200      	movs	r2, #0
 8014c34:	e008      	b.n	8014c48 <__ulp+0x3c>
 8014c36:	f1a2 0314 	sub.w	r3, r2, #20
 8014c3a:	2b1e      	cmp	r3, #30
 8014c3c:	bfda      	itte	le
 8014c3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014c42:	40da      	lsrle	r2, r3
 8014c44:	2201      	movgt	r2, #1
 8014c46:	2300      	movs	r3, #0
 8014c48:	4619      	mov	r1, r3
 8014c4a:	4610      	mov	r0, r2
 8014c4c:	ec41 0b10 	vmov	d0, r0, r1
 8014c50:	b002      	add	sp, #8
 8014c52:	4770      	bx	lr
 8014c54:	7ff00000 	.word	0x7ff00000

08014c58 <__b2d>:
 8014c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c5c:	6906      	ldr	r6, [r0, #16]
 8014c5e:	f100 0814 	add.w	r8, r0, #20
 8014c62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014c66:	1f37      	subs	r7, r6, #4
 8014c68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014c6c:	4610      	mov	r0, r2
 8014c6e:	f7ff fd53 	bl	8014718 <__hi0bits>
 8014c72:	f1c0 0320 	rsb	r3, r0, #32
 8014c76:	280a      	cmp	r0, #10
 8014c78:	600b      	str	r3, [r1, #0]
 8014c7a:	491b      	ldr	r1, [pc, #108]	; (8014ce8 <__b2d+0x90>)
 8014c7c:	dc15      	bgt.n	8014caa <__b2d+0x52>
 8014c7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8014c82:	fa22 f30c 	lsr.w	r3, r2, ip
 8014c86:	45b8      	cmp	r8, r7
 8014c88:	ea43 0501 	orr.w	r5, r3, r1
 8014c8c:	bf34      	ite	cc
 8014c8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014c92:	2300      	movcs	r3, #0
 8014c94:	3015      	adds	r0, #21
 8014c96:	fa02 f000 	lsl.w	r0, r2, r0
 8014c9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8014c9e:	4303      	orrs	r3, r0
 8014ca0:	461c      	mov	r4, r3
 8014ca2:	ec45 4b10 	vmov	d0, r4, r5
 8014ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014caa:	45b8      	cmp	r8, r7
 8014cac:	bf3a      	itte	cc
 8014cae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014cb2:	f1a6 0708 	subcc.w	r7, r6, #8
 8014cb6:	2300      	movcs	r3, #0
 8014cb8:	380b      	subs	r0, #11
 8014cba:	d012      	beq.n	8014ce2 <__b2d+0x8a>
 8014cbc:	f1c0 0120 	rsb	r1, r0, #32
 8014cc0:	fa23 f401 	lsr.w	r4, r3, r1
 8014cc4:	4082      	lsls	r2, r0
 8014cc6:	4322      	orrs	r2, r4
 8014cc8:	4547      	cmp	r7, r8
 8014cca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014cce:	bf8c      	ite	hi
 8014cd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014cd4:	2200      	movls	r2, #0
 8014cd6:	4083      	lsls	r3, r0
 8014cd8:	40ca      	lsrs	r2, r1
 8014cda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014cde:	4313      	orrs	r3, r2
 8014ce0:	e7de      	b.n	8014ca0 <__b2d+0x48>
 8014ce2:	ea42 0501 	orr.w	r5, r2, r1
 8014ce6:	e7db      	b.n	8014ca0 <__b2d+0x48>
 8014ce8:	3ff00000 	.word	0x3ff00000

08014cec <__d2b>:
 8014cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014cf0:	460f      	mov	r7, r1
 8014cf2:	2101      	movs	r1, #1
 8014cf4:	ec59 8b10 	vmov	r8, r9, d0
 8014cf8:	4616      	mov	r6, r2
 8014cfa:	f7ff fc1b 	bl	8014534 <_Balloc>
 8014cfe:	4604      	mov	r4, r0
 8014d00:	b930      	cbnz	r0, 8014d10 <__d2b+0x24>
 8014d02:	4602      	mov	r2, r0
 8014d04:	4b24      	ldr	r3, [pc, #144]	; (8014d98 <__d2b+0xac>)
 8014d06:	4825      	ldr	r0, [pc, #148]	; (8014d9c <__d2b+0xb0>)
 8014d08:	f240 310f 	movw	r1, #783	; 0x30f
 8014d0c:	f7fd fb8e 	bl	801242c <__assert_func>
 8014d10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014d14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014d18:	bb2d      	cbnz	r5, 8014d66 <__d2b+0x7a>
 8014d1a:	9301      	str	r3, [sp, #4]
 8014d1c:	f1b8 0300 	subs.w	r3, r8, #0
 8014d20:	d026      	beq.n	8014d70 <__d2b+0x84>
 8014d22:	4668      	mov	r0, sp
 8014d24:	9300      	str	r3, [sp, #0]
 8014d26:	f7ff fd17 	bl	8014758 <__lo0bits>
 8014d2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014d2e:	b1e8      	cbz	r0, 8014d6c <__d2b+0x80>
 8014d30:	f1c0 0320 	rsb	r3, r0, #32
 8014d34:	fa02 f303 	lsl.w	r3, r2, r3
 8014d38:	430b      	orrs	r3, r1
 8014d3a:	40c2      	lsrs	r2, r0
 8014d3c:	6163      	str	r3, [r4, #20]
 8014d3e:	9201      	str	r2, [sp, #4]
 8014d40:	9b01      	ldr	r3, [sp, #4]
 8014d42:	61a3      	str	r3, [r4, #24]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	bf14      	ite	ne
 8014d48:	2202      	movne	r2, #2
 8014d4a:	2201      	moveq	r2, #1
 8014d4c:	6122      	str	r2, [r4, #16]
 8014d4e:	b1bd      	cbz	r5, 8014d80 <__d2b+0x94>
 8014d50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014d54:	4405      	add	r5, r0
 8014d56:	603d      	str	r5, [r7, #0]
 8014d58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014d5c:	6030      	str	r0, [r6, #0]
 8014d5e:	4620      	mov	r0, r4
 8014d60:	b003      	add	sp, #12
 8014d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d6a:	e7d6      	b.n	8014d1a <__d2b+0x2e>
 8014d6c:	6161      	str	r1, [r4, #20]
 8014d6e:	e7e7      	b.n	8014d40 <__d2b+0x54>
 8014d70:	a801      	add	r0, sp, #4
 8014d72:	f7ff fcf1 	bl	8014758 <__lo0bits>
 8014d76:	9b01      	ldr	r3, [sp, #4]
 8014d78:	6163      	str	r3, [r4, #20]
 8014d7a:	3020      	adds	r0, #32
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	e7e5      	b.n	8014d4c <__d2b+0x60>
 8014d80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014d84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014d88:	6038      	str	r0, [r7, #0]
 8014d8a:	6918      	ldr	r0, [r3, #16]
 8014d8c:	f7ff fcc4 	bl	8014718 <__hi0bits>
 8014d90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014d94:	e7e2      	b.n	8014d5c <__d2b+0x70>
 8014d96:	bf00      	nop
 8014d98:	08017ed1 	.word	0x08017ed1
 8014d9c:	08017ee2 	.word	0x08017ee2

08014da0 <__ratio>:
 8014da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da4:	4688      	mov	r8, r1
 8014da6:	4669      	mov	r1, sp
 8014da8:	4681      	mov	r9, r0
 8014daa:	f7ff ff55 	bl	8014c58 <__b2d>
 8014dae:	a901      	add	r1, sp, #4
 8014db0:	4640      	mov	r0, r8
 8014db2:	ec55 4b10 	vmov	r4, r5, d0
 8014db6:	f7ff ff4f 	bl	8014c58 <__b2d>
 8014dba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014dbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014dc2:	eba3 0c02 	sub.w	ip, r3, r2
 8014dc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014dca:	1a9b      	subs	r3, r3, r2
 8014dcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014dd0:	ec51 0b10 	vmov	r0, r1, d0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	bfd6      	itet	le
 8014dd8:	460a      	movle	r2, r1
 8014dda:	462a      	movgt	r2, r5
 8014ddc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014de0:	468b      	mov	fp, r1
 8014de2:	462f      	mov	r7, r5
 8014de4:	bfd4      	ite	le
 8014de6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014dea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014dee:	4620      	mov	r0, r4
 8014df0:	ee10 2a10 	vmov	r2, s0
 8014df4:	465b      	mov	r3, fp
 8014df6:	4639      	mov	r1, r7
 8014df8:	f7eb fd50 	bl	800089c <__aeabi_ddiv>
 8014dfc:	ec41 0b10 	vmov	d0, r0, r1
 8014e00:	b003      	add	sp, #12
 8014e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e06 <__copybits>:
 8014e06:	3901      	subs	r1, #1
 8014e08:	b570      	push	{r4, r5, r6, lr}
 8014e0a:	1149      	asrs	r1, r1, #5
 8014e0c:	6914      	ldr	r4, [r2, #16]
 8014e0e:	3101      	adds	r1, #1
 8014e10:	f102 0314 	add.w	r3, r2, #20
 8014e14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014e18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014e1c:	1f05      	subs	r5, r0, #4
 8014e1e:	42a3      	cmp	r3, r4
 8014e20:	d30c      	bcc.n	8014e3c <__copybits+0x36>
 8014e22:	1aa3      	subs	r3, r4, r2
 8014e24:	3b11      	subs	r3, #17
 8014e26:	f023 0303 	bic.w	r3, r3, #3
 8014e2a:	3211      	adds	r2, #17
 8014e2c:	42a2      	cmp	r2, r4
 8014e2e:	bf88      	it	hi
 8014e30:	2300      	movhi	r3, #0
 8014e32:	4418      	add	r0, r3
 8014e34:	2300      	movs	r3, #0
 8014e36:	4288      	cmp	r0, r1
 8014e38:	d305      	bcc.n	8014e46 <__copybits+0x40>
 8014e3a:	bd70      	pop	{r4, r5, r6, pc}
 8014e3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014e40:	f845 6f04 	str.w	r6, [r5, #4]!
 8014e44:	e7eb      	b.n	8014e1e <__copybits+0x18>
 8014e46:	f840 3b04 	str.w	r3, [r0], #4
 8014e4a:	e7f4      	b.n	8014e36 <__copybits+0x30>

08014e4c <__any_on>:
 8014e4c:	f100 0214 	add.w	r2, r0, #20
 8014e50:	6900      	ldr	r0, [r0, #16]
 8014e52:	114b      	asrs	r3, r1, #5
 8014e54:	4298      	cmp	r0, r3
 8014e56:	b510      	push	{r4, lr}
 8014e58:	db11      	blt.n	8014e7e <__any_on+0x32>
 8014e5a:	dd0a      	ble.n	8014e72 <__any_on+0x26>
 8014e5c:	f011 011f 	ands.w	r1, r1, #31
 8014e60:	d007      	beq.n	8014e72 <__any_on+0x26>
 8014e62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014e66:	fa24 f001 	lsr.w	r0, r4, r1
 8014e6a:	fa00 f101 	lsl.w	r1, r0, r1
 8014e6e:	428c      	cmp	r4, r1
 8014e70:	d10b      	bne.n	8014e8a <__any_on+0x3e>
 8014e72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e76:	4293      	cmp	r3, r2
 8014e78:	d803      	bhi.n	8014e82 <__any_on+0x36>
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	bd10      	pop	{r4, pc}
 8014e7e:	4603      	mov	r3, r0
 8014e80:	e7f7      	b.n	8014e72 <__any_on+0x26>
 8014e82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e86:	2900      	cmp	r1, #0
 8014e88:	d0f5      	beq.n	8014e76 <__any_on+0x2a>
 8014e8a:	2001      	movs	r0, #1
 8014e8c:	e7f6      	b.n	8014e7c <__any_on+0x30>

08014e8e <sulp>:
 8014e8e:	b570      	push	{r4, r5, r6, lr}
 8014e90:	4604      	mov	r4, r0
 8014e92:	460d      	mov	r5, r1
 8014e94:	ec45 4b10 	vmov	d0, r4, r5
 8014e98:	4616      	mov	r6, r2
 8014e9a:	f7ff feb7 	bl	8014c0c <__ulp>
 8014e9e:	ec51 0b10 	vmov	r0, r1, d0
 8014ea2:	b17e      	cbz	r6, 8014ec4 <sulp+0x36>
 8014ea4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014ea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	dd09      	ble.n	8014ec4 <sulp+0x36>
 8014eb0:	051b      	lsls	r3, r3, #20
 8014eb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014eb6:	2400      	movs	r4, #0
 8014eb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014ebc:	4622      	mov	r2, r4
 8014ebe:	462b      	mov	r3, r5
 8014ec0:	f7eb fbc2 	bl	8000648 <__aeabi_dmul>
 8014ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014ec8 <_strtod_l>:
 8014ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ecc:	ed2d 8b02 	vpush	{d8}
 8014ed0:	b09b      	sub	sp, #108	; 0x6c
 8014ed2:	4604      	mov	r4, r0
 8014ed4:	9213      	str	r2, [sp, #76]	; 0x4c
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	9216      	str	r2, [sp, #88]	; 0x58
 8014eda:	460d      	mov	r5, r1
 8014edc:	f04f 0800 	mov.w	r8, #0
 8014ee0:	f04f 0900 	mov.w	r9, #0
 8014ee4:	460a      	mov	r2, r1
 8014ee6:	9215      	str	r2, [sp, #84]	; 0x54
 8014ee8:	7811      	ldrb	r1, [r2, #0]
 8014eea:	292b      	cmp	r1, #43	; 0x2b
 8014eec:	d04c      	beq.n	8014f88 <_strtod_l+0xc0>
 8014eee:	d83a      	bhi.n	8014f66 <_strtod_l+0x9e>
 8014ef0:	290d      	cmp	r1, #13
 8014ef2:	d834      	bhi.n	8014f5e <_strtod_l+0x96>
 8014ef4:	2908      	cmp	r1, #8
 8014ef6:	d834      	bhi.n	8014f62 <_strtod_l+0x9a>
 8014ef8:	2900      	cmp	r1, #0
 8014efa:	d03d      	beq.n	8014f78 <_strtod_l+0xb0>
 8014efc:	2200      	movs	r2, #0
 8014efe:	920a      	str	r2, [sp, #40]	; 0x28
 8014f00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014f02:	7832      	ldrb	r2, [r6, #0]
 8014f04:	2a30      	cmp	r2, #48	; 0x30
 8014f06:	f040 80b4 	bne.w	8015072 <_strtod_l+0x1aa>
 8014f0a:	7872      	ldrb	r2, [r6, #1]
 8014f0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014f10:	2a58      	cmp	r2, #88	; 0x58
 8014f12:	d170      	bne.n	8014ff6 <_strtod_l+0x12e>
 8014f14:	9302      	str	r3, [sp, #8]
 8014f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f18:	9301      	str	r3, [sp, #4]
 8014f1a:	ab16      	add	r3, sp, #88	; 0x58
 8014f1c:	9300      	str	r3, [sp, #0]
 8014f1e:	4a8e      	ldr	r2, [pc, #568]	; (8015158 <_strtod_l+0x290>)
 8014f20:	ab17      	add	r3, sp, #92	; 0x5c
 8014f22:	a915      	add	r1, sp, #84	; 0x54
 8014f24:	4620      	mov	r0, r4
 8014f26:	f001 fac1 	bl	80164ac <__gethex>
 8014f2a:	f010 070f 	ands.w	r7, r0, #15
 8014f2e:	4605      	mov	r5, r0
 8014f30:	d005      	beq.n	8014f3e <_strtod_l+0x76>
 8014f32:	2f06      	cmp	r7, #6
 8014f34:	d12a      	bne.n	8014f8c <_strtod_l+0xc4>
 8014f36:	3601      	adds	r6, #1
 8014f38:	2300      	movs	r3, #0
 8014f3a:	9615      	str	r6, [sp, #84]	; 0x54
 8014f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8014f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	f040 857f 	bne.w	8015a44 <_strtod_l+0xb7c>
 8014f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f48:	b1db      	cbz	r3, 8014f82 <_strtod_l+0xba>
 8014f4a:	4642      	mov	r2, r8
 8014f4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014f50:	ec43 2b10 	vmov	d0, r2, r3
 8014f54:	b01b      	add	sp, #108	; 0x6c
 8014f56:	ecbd 8b02 	vpop	{d8}
 8014f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5e:	2920      	cmp	r1, #32
 8014f60:	d1cc      	bne.n	8014efc <_strtod_l+0x34>
 8014f62:	3201      	adds	r2, #1
 8014f64:	e7bf      	b.n	8014ee6 <_strtod_l+0x1e>
 8014f66:	292d      	cmp	r1, #45	; 0x2d
 8014f68:	d1c8      	bne.n	8014efc <_strtod_l+0x34>
 8014f6a:	2101      	movs	r1, #1
 8014f6c:	910a      	str	r1, [sp, #40]	; 0x28
 8014f6e:	1c51      	adds	r1, r2, #1
 8014f70:	9115      	str	r1, [sp, #84]	; 0x54
 8014f72:	7852      	ldrb	r2, [r2, #1]
 8014f74:	2a00      	cmp	r2, #0
 8014f76:	d1c3      	bne.n	8014f00 <_strtod_l+0x38>
 8014f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f7a:	9515      	str	r5, [sp, #84]	; 0x54
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f040 855f 	bne.w	8015a40 <_strtod_l+0xb78>
 8014f82:	4642      	mov	r2, r8
 8014f84:	464b      	mov	r3, r9
 8014f86:	e7e3      	b.n	8014f50 <_strtod_l+0x88>
 8014f88:	2100      	movs	r1, #0
 8014f8a:	e7ef      	b.n	8014f6c <_strtod_l+0xa4>
 8014f8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f8e:	b13a      	cbz	r2, 8014fa0 <_strtod_l+0xd8>
 8014f90:	2135      	movs	r1, #53	; 0x35
 8014f92:	a818      	add	r0, sp, #96	; 0x60
 8014f94:	f7ff ff37 	bl	8014e06 <__copybits>
 8014f98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	f7ff fb0a 	bl	80145b4 <_Bfree>
 8014fa0:	3f01      	subs	r7, #1
 8014fa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014fa4:	2f04      	cmp	r7, #4
 8014fa6:	d806      	bhi.n	8014fb6 <_strtod_l+0xee>
 8014fa8:	e8df f007 	tbb	[pc, r7]
 8014fac:	201d0314 	.word	0x201d0314
 8014fb0:	14          	.byte	0x14
 8014fb1:	00          	.byte	0x00
 8014fb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014fb6:	05e9      	lsls	r1, r5, #23
 8014fb8:	bf48      	it	mi
 8014fba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014fbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014fc2:	0d1b      	lsrs	r3, r3, #20
 8014fc4:	051b      	lsls	r3, r3, #20
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d1b9      	bne.n	8014f3e <_strtod_l+0x76>
 8014fca:	f7fe fbab 	bl	8013724 <__errno>
 8014fce:	2322      	movs	r3, #34	; 0x22
 8014fd0:	6003      	str	r3, [r0, #0]
 8014fd2:	e7b4      	b.n	8014f3e <_strtod_l+0x76>
 8014fd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014fd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014fdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014fe0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014fe4:	e7e7      	b.n	8014fb6 <_strtod_l+0xee>
 8014fe6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015160 <_strtod_l+0x298>
 8014fea:	e7e4      	b.n	8014fb6 <_strtod_l+0xee>
 8014fec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014ff0:	f04f 38ff 	mov.w	r8, #4294967295
 8014ff4:	e7df      	b.n	8014fb6 <_strtod_l+0xee>
 8014ff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ff8:	1c5a      	adds	r2, r3, #1
 8014ffa:	9215      	str	r2, [sp, #84]	; 0x54
 8014ffc:	785b      	ldrb	r3, [r3, #1]
 8014ffe:	2b30      	cmp	r3, #48	; 0x30
 8015000:	d0f9      	beq.n	8014ff6 <_strtod_l+0x12e>
 8015002:	2b00      	cmp	r3, #0
 8015004:	d09b      	beq.n	8014f3e <_strtod_l+0x76>
 8015006:	2301      	movs	r3, #1
 8015008:	f04f 0a00 	mov.w	sl, #0
 801500c:	9304      	str	r3, [sp, #16]
 801500e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015010:	930b      	str	r3, [sp, #44]	; 0x2c
 8015012:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015016:	46d3      	mov	fp, sl
 8015018:	220a      	movs	r2, #10
 801501a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801501c:	7806      	ldrb	r6, [r0, #0]
 801501e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015022:	b2d9      	uxtb	r1, r3
 8015024:	2909      	cmp	r1, #9
 8015026:	d926      	bls.n	8015076 <_strtod_l+0x1ae>
 8015028:	494c      	ldr	r1, [pc, #304]	; (801515c <_strtod_l+0x294>)
 801502a:	2201      	movs	r2, #1
 801502c:	f001 f9a6 	bl	801637c <strncmp>
 8015030:	2800      	cmp	r0, #0
 8015032:	d030      	beq.n	8015096 <_strtod_l+0x1ce>
 8015034:	2000      	movs	r0, #0
 8015036:	4632      	mov	r2, r6
 8015038:	9005      	str	r0, [sp, #20]
 801503a:	465e      	mov	r6, fp
 801503c:	4603      	mov	r3, r0
 801503e:	2a65      	cmp	r2, #101	; 0x65
 8015040:	d001      	beq.n	8015046 <_strtod_l+0x17e>
 8015042:	2a45      	cmp	r2, #69	; 0x45
 8015044:	d113      	bne.n	801506e <_strtod_l+0x1a6>
 8015046:	b91e      	cbnz	r6, 8015050 <_strtod_l+0x188>
 8015048:	9a04      	ldr	r2, [sp, #16]
 801504a:	4302      	orrs	r2, r0
 801504c:	d094      	beq.n	8014f78 <_strtod_l+0xb0>
 801504e:	2600      	movs	r6, #0
 8015050:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015052:	1c6a      	adds	r2, r5, #1
 8015054:	9215      	str	r2, [sp, #84]	; 0x54
 8015056:	786a      	ldrb	r2, [r5, #1]
 8015058:	2a2b      	cmp	r2, #43	; 0x2b
 801505a:	d074      	beq.n	8015146 <_strtod_l+0x27e>
 801505c:	2a2d      	cmp	r2, #45	; 0x2d
 801505e:	d078      	beq.n	8015152 <_strtod_l+0x28a>
 8015060:	f04f 0c00 	mov.w	ip, #0
 8015064:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015068:	2909      	cmp	r1, #9
 801506a:	d97f      	bls.n	801516c <_strtod_l+0x2a4>
 801506c:	9515      	str	r5, [sp, #84]	; 0x54
 801506e:	2700      	movs	r7, #0
 8015070:	e09e      	b.n	80151b0 <_strtod_l+0x2e8>
 8015072:	2300      	movs	r3, #0
 8015074:	e7c8      	b.n	8015008 <_strtod_l+0x140>
 8015076:	f1bb 0f08 	cmp.w	fp, #8
 801507a:	bfd8      	it	le
 801507c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801507e:	f100 0001 	add.w	r0, r0, #1
 8015082:	bfda      	itte	le
 8015084:	fb02 3301 	mlale	r3, r2, r1, r3
 8015088:	9309      	strle	r3, [sp, #36]	; 0x24
 801508a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801508e:	f10b 0b01 	add.w	fp, fp, #1
 8015092:	9015      	str	r0, [sp, #84]	; 0x54
 8015094:	e7c1      	b.n	801501a <_strtod_l+0x152>
 8015096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015098:	1c5a      	adds	r2, r3, #1
 801509a:	9215      	str	r2, [sp, #84]	; 0x54
 801509c:	785a      	ldrb	r2, [r3, #1]
 801509e:	f1bb 0f00 	cmp.w	fp, #0
 80150a2:	d037      	beq.n	8015114 <_strtod_l+0x24c>
 80150a4:	9005      	str	r0, [sp, #20]
 80150a6:	465e      	mov	r6, fp
 80150a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80150ac:	2b09      	cmp	r3, #9
 80150ae:	d912      	bls.n	80150d6 <_strtod_l+0x20e>
 80150b0:	2301      	movs	r3, #1
 80150b2:	e7c4      	b.n	801503e <_strtod_l+0x176>
 80150b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150b6:	1c5a      	adds	r2, r3, #1
 80150b8:	9215      	str	r2, [sp, #84]	; 0x54
 80150ba:	785a      	ldrb	r2, [r3, #1]
 80150bc:	3001      	adds	r0, #1
 80150be:	2a30      	cmp	r2, #48	; 0x30
 80150c0:	d0f8      	beq.n	80150b4 <_strtod_l+0x1ec>
 80150c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80150c6:	2b08      	cmp	r3, #8
 80150c8:	f200 84c1 	bhi.w	8015a4e <_strtod_l+0xb86>
 80150cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150ce:	9005      	str	r0, [sp, #20]
 80150d0:	2000      	movs	r0, #0
 80150d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80150d4:	4606      	mov	r6, r0
 80150d6:	3a30      	subs	r2, #48	; 0x30
 80150d8:	f100 0301 	add.w	r3, r0, #1
 80150dc:	d014      	beq.n	8015108 <_strtod_l+0x240>
 80150de:	9905      	ldr	r1, [sp, #20]
 80150e0:	4419      	add	r1, r3
 80150e2:	9105      	str	r1, [sp, #20]
 80150e4:	4633      	mov	r3, r6
 80150e6:	eb00 0c06 	add.w	ip, r0, r6
 80150ea:	210a      	movs	r1, #10
 80150ec:	4563      	cmp	r3, ip
 80150ee:	d113      	bne.n	8015118 <_strtod_l+0x250>
 80150f0:	1833      	adds	r3, r6, r0
 80150f2:	2b08      	cmp	r3, #8
 80150f4:	f106 0601 	add.w	r6, r6, #1
 80150f8:	4406      	add	r6, r0
 80150fa:	dc1a      	bgt.n	8015132 <_strtod_l+0x26a>
 80150fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80150fe:	230a      	movs	r3, #10
 8015100:	fb03 2301 	mla	r3, r3, r1, r2
 8015104:	9309      	str	r3, [sp, #36]	; 0x24
 8015106:	2300      	movs	r3, #0
 8015108:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801510a:	1c51      	adds	r1, r2, #1
 801510c:	9115      	str	r1, [sp, #84]	; 0x54
 801510e:	7852      	ldrb	r2, [r2, #1]
 8015110:	4618      	mov	r0, r3
 8015112:	e7c9      	b.n	80150a8 <_strtod_l+0x1e0>
 8015114:	4658      	mov	r0, fp
 8015116:	e7d2      	b.n	80150be <_strtod_l+0x1f6>
 8015118:	2b08      	cmp	r3, #8
 801511a:	f103 0301 	add.w	r3, r3, #1
 801511e:	dc03      	bgt.n	8015128 <_strtod_l+0x260>
 8015120:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015122:	434f      	muls	r7, r1
 8015124:	9709      	str	r7, [sp, #36]	; 0x24
 8015126:	e7e1      	b.n	80150ec <_strtod_l+0x224>
 8015128:	2b10      	cmp	r3, #16
 801512a:	bfd8      	it	le
 801512c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015130:	e7dc      	b.n	80150ec <_strtod_l+0x224>
 8015132:	2e10      	cmp	r6, #16
 8015134:	bfdc      	itt	le
 8015136:	230a      	movle	r3, #10
 8015138:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801513c:	e7e3      	b.n	8015106 <_strtod_l+0x23e>
 801513e:	2300      	movs	r3, #0
 8015140:	9305      	str	r3, [sp, #20]
 8015142:	2301      	movs	r3, #1
 8015144:	e780      	b.n	8015048 <_strtod_l+0x180>
 8015146:	f04f 0c00 	mov.w	ip, #0
 801514a:	1caa      	adds	r2, r5, #2
 801514c:	9215      	str	r2, [sp, #84]	; 0x54
 801514e:	78aa      	ldrb	r2, [r5, #2]
 8015150:	e788      	b.n	8015064 <_strtod_l+0x19c>
 8015152:	f04f 0c01 	mov.w	ip, #1
 8015156:	e7f8      	b.n	801514a <_strtod_l+0x282>
 8015158:	08018040 	.word	0x08018040
 801515c:	0801803c 	.word	0x0801803c
 8015160:	7ff00000 	.word	0x7ff00000
 8015164:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015166:	1c51      	adds	r1, r2, #1
 8015168:	9115      	str	r1, [sp, #84]	; 0x54
 801516a:	7852      	ldrb	r2, [r2, #1]
 801516c:	2a30      	cmp	r2, #48	; 0x30
 801516e:	d0f9      	beq.n	8015164 <_strtod_l+0x29c>
 8015170:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015174:	2908      	cmp	r1, #8
 8015176:	f63f af7a 	bhi.w	801506e <_strtod_l+0x1a6>
 801517a:	3a30      	subs	r2, #48	; 0x30
 801517c:	9208      	str	r2, [sp, #32]
 801517e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015180:	920c      	str	r2, [sp, #48]	; 0x30
 8015182:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015184:	1c57      	adds	r7, r2, #1
 8015186:	9715      	str	r7, [sp, #84]	; 0x54
 8015188:	7852      	ldrb	r2, [r2, #1]
 801518a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801518e:	f1be 0f09 	cmp.w	lr, #9
 8015192:	d938      	bls.n	8015206 <_strtod_l+0x33e>
 8015194:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015196:	1a7f      	subs	r7, r7, r1
 8015198:	2f08      	cmp	r7, #8
 801519a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801519e:	dc03      	bgt.n	80151a8 <_strtod_l+0x2e0>
 80151a0:	9908      	ldr	r1, [sp, #32]
 80151a2:	428f      	cmp	r7, r1
 80151a4:	bfa8      	it	ge
 80151a6:	460f      	movge	r7, r1
 80151a8:	f1bc 0f00 	cmp.w	ip, #0
 80151ac:	d000      	beq.n	80151b0 <_strtod_l+0x2e8>
 80151ae:	427f      	negs	r7, r7
 80151b0:	2e00      	cmp	r6, #0
 80151b2:	d14f      	bne.n	8015254 <_strtod_l+0x38c>
 80151b4:	9904      	ldr	r1, [sp, #16]
 80151b6:	4301      	orrs	r1, r0
 80151b8:	f47f aec1 	bne.w	8014f3e <_strtod_l+0x76>
 80151bc:	2b00      	cmp	r3, #0
 80151be:	f47f aedb 	bne.w	8014f78 <_strtod_l+0xb0>
 80151c2:	2a69      	cmp	r2, #105	; 0x69
 80151c4:	d029      	beq.n	801521a <_strtod_l+0x352>
 80151c6:	dc26      	bgt.n	8015216 <_strtod_l+0x34e>
 80151c8:	2a49      	cmp	r2, #73	; 0x49
 80151ca:	d026      	beq.n	801521a <_strtod_l+0x352>
 80151cc:	2a4e      	cmp	r2, #78	; 0x4e
 80151ce:	f47f aed3 	bne.w	8014f78 <_strtod_l+0xb0>
 80151d2:	499b      	ldr	r1, [pc, #620]	; (8015440 <_strtod_l+0x578>)
 80151d4:	a815      	add	r0, sp, #84	; 0x54
 80151d6:	f001 fba9 	bl	801692c <__match>
 80151da:	2800      	cmp	r0, #0
 80151dc:	f43f aecc 	beq.w	8014f78 <_strtod_l+0xb0>
 80151e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	2b28      	cmp	r3, #40	; 0x28
 80151e6:	d12f      	bne.n	8015248 <_strtod_l+0x380>
 80151e8:	4996      	ldr	r1, [pc, #600]	; (8015444 <_strtod_l+0x57c>)
 80151ea:	aa18      	add	r2, sp, #96	; 0x60
 80151ec:	a815      	add	r0, sp, #84	; 0x54
 80151ee:	f001 fbb1 	bl	8016954 <__hexnan>
 80151f2:	2805      	cmp	r0, #5
 80151f4:	d128      	bne.n	8015248 <_strtod_l+0x380>
 80151f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80151f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80151fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015200:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015204:	e69b      	b.n	8014f3e <_strtod_l+0x76>
 8015206:	9f08      	ldr	r7, [sp, #32]
 8015208:	210a      	movs	r1, #10
 801520a:	fb01 2107 	mla	r1, r1, r7, r2
 801520e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015212:	9208      	str	r2, [sp, #32]
 8015214:	e7b5      	b.n	8015182 <_strtod_l+0x2ba>
 8015216:	2a6e      	cmp	r2, #110	; 0x6e
 8015218:	e7d9      	b.n	80151ce <_strtod_l+0x306>
 801521a:	498b      	ldr	r1, [pc, #556]	; (8015448 <_strtod_l+0x580>)
 801521c:	a815      	add	r0, sp, #84	; 0x54
 801521e:	f001 fb85 	bl	801692c <__match>
 8015222:	2800      	cmp	r0, #0
 8015224:	f43f aea8 	beq.w	8014f78 <_strtod_l+0xb0>
 8015228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801522a:	4988      	ldr	r1, [pc, #544]	; (801544c <_strtod_l+0x584>)
 801522c:	3b01      	subs	r3, #1
 801522e:	a815      	add	r0, sp, #84	; 0x54
 8015230:	9315      	str	r3, [sp, #84]	; 0x54
 8015232:	f001 fb7b 	bl	801692c <__match>
 8015236:	b910      	cbnz	r0, 801523e <_strtod_l+0x376>
 8015238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801523a:	3301      	adds	r3, #1
 801523c:	9315      	str	r3, [sp, #84]	; 0x54
 801523e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801545c <_strtod_l+0x594>
 8015242:	f04f 0800 	mov.w	r8, #0
 8015246:	e67a      	b.n	8014f3e <_strtod_l+0x76>
 8015248:	4881      	ldr	r0, [pc, #516]	; (8015450 <_strtod_l+0x588>)
 801524a:	f001 f8a9 	bl	80163a0 <nan>
 801524e:	ec59 8b10 	vmov	r8, r9, d0
 8015252:	e674      	b.n	8014f3e <_strtod_l+0x76>
 8015254:	9b05      	ldr	r3, [sp, #20]
 8015256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015258:	1afb      	subs	r3, r7, r3
 801525a:	f1bb 0f00 	cmp.w	fp, #0
 801525e:	bf08      	it	eq
 8015260:	46b3      	moveq	fp, r6
 8015262:	2e10      	cmp	r6, #16
 8015264:	9308      	str	r3, [sp, #32]
 8015266:	4635      	mov	r5, r6
 8015268:	bfa8      	it	ge
 801526a:	2510      	movge	r5, #16
 801526c:	f7eb f972 	bl	8000554 <__aeabi_ui2d>
 8015270:	2e09      	cmp	r6, #9
 8015272:	4680      	mov	r8, r0
 8015274:	4689      	mov	r9, r1
 8015276:	dd13      	ble.n	80152a0 <_strtod_l+0x3d8>
 8015278:	4b76      	ldr	r3, [pc, #472]	; (8015454 <_strtod_l+0x58c>)
 801527a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801527e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015282:	f7eb f9e1 	bl	8000648 <__aeabi_dmul>
 8015286:	4680      	mov	r8, r0
 8015288:	4650      	mov	r0, sl
 801528a:	4689      	mov	r9, r1
 801528c:	f7eb f962 	bl	8000554 <__aeabi_ui2d>
 8015290:	4602      	mov	r2, r0
 8015292:	460b      	mov	r3, r1
 8015294:	4640      	mov	r0, r8
 8015296:	4649      	mov	r1, r9
 8015298:	f7eb f820 	bl	80002dc <__adddf3>
 801529c:	4680      	mov	r8, r0
 801529e:	4689      	mov	r9, r1
 80152a0:	2e0f      	cmp	r6, #15
 80152a2:	dc38      	bgt.n	8015316 <_strtod_l+0x44e>
 80152a4:	9b08      	ldr	r3, [sp, #32]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	f43f ae49 	beq.w	8014f3e <_strtod_l+0x76>
 80152ac:	dd24      	ble.n	80152f8 <_strtod_l+0x430>
 80152ae:	2b16      	cmp	r3, #22
 80152b0:	dc0b      	bgt.n	80152ca <_strtod_l+0x402>
 80152b2:	4968      	ldr	r1, [pc, #416]	; (8015454 <_strtod_l+0x58c>)
 80152b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80152b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152bc:	4642      	mov	r2, r8
 80152be:	464b      	mov	r3, r9
 80152c0:	f7eb f9c2 	bl	8000648 <__aeabi_dmul>
 80152c4:	4680      	mov	r8, r0
 80152c6:	4689      	mov	r9, r1
 80152c8:	e639      	b.n	8014f3e <_strtod_l+0x76>
 80152ca:	9a08      	ldr	r2, [sp, #32]
 80152cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80152d0:	4293      	cmp	r3, r2
 80152d2:	db20      	blt.n	8015316 <_strtod_l+0x44e>
 80152d4:	4c5f      	ldr	r4, [pc, #380]	; (8015454 <_strtod_l+0x58c>)
 80152d6:	f1c6 060f 	rsb	r6, r6, #15
 80152da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80152de:	4642      	mov	r2, r8
 80152e0:	464b      	mov	r3, r9
 80152e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152e6:	f7eb f9af 	bl	8000648 <__aeabi_dmul>
 80152ea:	9b08      	ldr	r3, [sp, #32]
 80152ec:	1b9e      	subs	r6, r3, r6
 80152ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80152f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80152f6:	e7e3      	b.n	80152c0 <_strtod_l+0x3f8>
 80152f8:	9b08      	ldr	r3, [sp, #32]
 80152fa:	3316      	adds	r3, #22
 80152fc:	db0b      	blt.n	8015316 <_strtod_l+0x44e>
 80152fe:	9b05      	ldr	r3, [sp, #20]
 8015300:	1bdf      	subs	r7, r3, r7
 8015302:	4b54      	ldr	r3, [pc, #336]	; (8015454 <_strtod_l+0x58c>)
 8015304:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015308:	e9d7 2300 	ldrd	r2, r3, [r7]
 801530c:	4640      	mov	r0, r8
 801530e:	4649      	mov	r1, r9
 8015310:	f7eb fac4 	bl	800089c <__aeabi_ddiv>
 8015314:	e7d6      	b.n	80152c4 <_strtod_l+0x3fc>
 8015316:	9b08      	ldr	r3, [sp, #32]
 8015318:	1b75      	subs	r5, r6, r5
 801531a:	441d      	add	r5, r3
 801531c:	2d00      	cmp	r5, #0
 801531e:	dd70      	ble.n	8015402 <_strtod_l+0x53a>
 8015320:	f015 030f 	ands.w	r3, r5, #15
 8015324:	d00a      	beq.n	801533c <_strtod_l+0x474>
 8015326:	494b      	ldr	r1, [pc, #300]	; (8015454 <_strtod_l+0x58c>)
 8015328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801532c:	4642      	mov	r2, r8
 801532e:	464b      	mov	r3, r9
 8015330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015334:	f7eb f988 	bl	8000648 <__aeabi_dmul>
 8015338:	4680      	mov	r8, r0
 801533a:	4689      	mov	r9, r1
 801533c:	f035 050f 	bics.w	r5, r5, #15
 8015340:	d04d      	beq.n	80153de <_strtod_l+0x516>
 8015342:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015346:	dd22      	ble.n	801538e <_strtod_l+0x4c6>
 8015348:	2500      	movs	r5, #0
 801534a:	46ab      	mov	fp, r5
 801534c:	9509      	str	r5, [sp, #36]	; 0x24
 801534e:	9505      	str	r5, [sp, #20]
 8015350:	2322      	movs	r3, #34	; 0x22
 8015352:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801545c <_strtod_l+0x594>
 8015356:	6023      	str	r3, [r4, #0]
 8015358:	f04f 0800 	mov.w	r8, #0
 801535c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801535e:	2b00      	cmp	r3, #0
 8015360:	f43f aded 	beq.w	8014f3e <_strtod_l+0x76>
 8015364:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015366:	4620      	mov	r0, r4
 8015368:	f7ff f924 	bl	80145b4 <_Bfree>
 801536c:	9905      	ldr	r1, [sp, #20]
 801536e:	4620      	mov	r0, r4
 8015370:	f7ff f920 	bl	80145b4 <_Bfree>
 8015374:	4659      	mov	r1, fp
 8015376:	4620      	mov	r0, r4
 8015378:	f7ff f91c 	bl	80145b4 <_Bfree>
 801537c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801537e:	4620      	mov	r0, r4
 8015380:	f7ff f918 	bl	80145b4 <_Bfree>
 8015384:	4629      	mov	r1, r5
 8015386:	4620      	mov	r0, r4
 8015388:	f7ff f914 	bl	80145b4 <_Bfree>
 801538c:	e5d7      	b.n	8014f3e <_strtod_l+0x76>
 801538e:	4b32      	ldr	r3, [pc, #200]	; (8015458 <_strtod_l+0x590>)
 8015390:	9304      	str	r3, [sp, #16]
 8015392:	2300      	movs	r3, #0
 8015394:	112d      	asrs	r5, r5, #4
 8015396:	4640      	mov	r0, r8
 8015398:	4649      	mov	r1, r9
 801539a:	469a      	mov	sl, r3
 801539c:	2d01      	cmp	r5, #1
 801539e:	dc21      	bgt.n	80153e4 <_strtod_l+0x51c>
 80153a0:	b10b      	cbz	r3, 80153a6 <_strtod_l+0x4de>
 80153a2:	4680      	mov	r8, r0
 80153a4:	4689      	mov	r9, r1
 80153a6:	492c      	ldr	r1, [pc, #176]	; (8015458 <_strtod_l+0x590>)
 80153a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80153ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80153b0:	4642      	mov	r2, r8
 80153b2:	464b      	mov	r3, r9
 80153b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80153b8:	f7eb f946 	bl	8000648 <__aeabi_dmul>
 80153bc:	4b27      	ldr	r3, [pc, #156]	; (801545c <_strtod_l+0x594>)
 80153be:	460a      	mov	r2, r1
 80153c0:	400b      	ands	r3, r1
 80153c2:	4927      	ldr	r1, [pc, #156]	; (8015460 <_strtod_l+0x598>)
 80153c4:	428b      	cmp	r3, r1
 80153c6:	4680      	mov	r8, r0
 80153c8:	d8be      	bhi.n	8015348 <_strtod_l+0x480>
 80153ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80153ce:	428b      	cmp	r3, r1
 80153d0:	bf86      	itte	hi
 80153d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015464 <_strtod_l+0x59c>
 80153d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80153da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80153de:	2300      	movs	r3, #0
 80153e0:	9304      	str	r3, [sp, #16]
 80153e2:	e07b      	b.n	80154dc <_strtod_l+0x614>
 80153e4:	07ea      	lsls	r2, r5, #31
 80153e6:	d505      	bpl.n	80153f4 <_strtod_l+0x52c>
 80153e8:	9b04      	ldr	r3, [sp, #16]
 80153ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ee:	f7eb f92b 	bl	8000648 <__aeabi_dmul>
 80153f2:	2301      	movs	r3, #1
 80153f4:	9a04      	ldr	r2, [sp, #16]
 80153f6:	3208      	adds	r2, #8
 80153f8:	f10a 0a01 	add.w	sl, sl, #1
 80153fc:	106d      	asrs	r5, r5, #1
 80153fe:	9204      	str	r2, [sp, #16]
 8015400:	e7cc      	b.n	801539c <_strtod_l+0x4d4>
 8015402:	d0ec      	beq.n	80153de <_strtod_l+0x516>
 8015404:	426d      	negs	r5, r5
 8015406:	f015 020f 	ands.w	r2, r5, #15
 801540a:	d00a      	beq.n	8015422 <_strtod_l+0x55a>
 801540c:	4b11      	ldr	r3, [pc, #68]	; (8015454 <_strtod_l+0x58c>)
 801540e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015412:	4640      	mov	r0, r8
 8015414:	4649      	mov	r1, r9
 8015416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541a:	f7eb fa3f 	bl	800089c <__aeabi_ddiv>
 801541e:	4680      	mov	r8, r0
 8015420:	4689      	mov	r9, r1
 8015422:	112d      	asrs	r5, r5, #4
 8015424:	d0db      	beq.n	80153de <_strtod_l+0x516>
 8015426:	2d1f      	cmp	r5, #31
 8015428:	dd1e      	ble.n	8015468 <_strtod_l+0x5a0>
 801542a:	2500      	movs	r5, #0
 801542c:	46ab      	mov	fp, r5
 801542e:	9509      	str	r5, [sp, #36]	; 0x24
 8015430:	9505      	str	r5, [sp, #20]
 8015432:	2322      	movs	r3, #34	; 0x22
 8015434:	f04f 0800 	mov.w	r8, #0
 8015438:	f04f 0900 	mov.w	r9, #0
 801543c:	6023      	str	r3, [r4, #0]
 801543e:	e78d      	b.n	801535c <_strtod_l+0x494>
 8015440:	08017e29 	.word	0x08017e29
 8015444:	08018054 	.word	0x08018054
 8015448:	08017e21 	.word	0x08017e21
 801544c:	08017e58 	.word	0x08017e58
 8015450:	08017e1b 	.word	0x08017e1b
 8015454:	08017f68 	.word	0x08017f68
 8015458:	08017f40 	.word	0x08017f40
 801545c:	7ff00000 	.word	0x7ff00000
 8015460:	7ca00000 	.word	0x7ca00000
 8015464:	7fefffff 	.word	0x7fefffff
 8015468:	f015 0310 	ands.w	r3, r5, #16
 801546c:	bf18      	it	ne
 801546e:	236a      	movne	r3, #106	; 0x6a
 8015470:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015814 <_strtod_l+0x94c>
 8015474:	9304      	str	r3, [sp, #16]
 8015476:	4640      	mov	r0, r8
 8015478:	4649      	mov	r1, r9
 801547a:	2300      	movs	r3, #0
 801547c:	07ea      	lsls	r2, r5, #31
 801547e:	d504      	bpl.n	801548a <_strtod_l+0x5c2>
 8015480:	e9da 2300 	ldrd	r2, r3, [sl]
 8015484:	f7eb f8e0 	bl	8000648 <__aeabi_dmul>
 8015488:	2301      	movs	r3, #1
 801548a:	106d      	asrs	r5, r5, #1
 801548c:	f10a 0a08 	add.w	sl, sl, #8
 8015490:	d1f4      	bne.n	801547c <_strtod_l+0x5b4>
 8015492:	b10b      	cbz	r3, 8015498 <_strtod_l+0x5d0>
 8015494:	4680      	mov	r8, r0
 8015496:	4689      	mov	r9, r1
 8015498:	9b04      	ldr	r3, [sp, #16]
 801549a:	b1bb      	cbz	r3, 80154cc <_strtod_l+0x604>
 801549c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80154a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	4649      	mov	r1, r9
 80154a8:	dd10      	ble.n	80154cc <_strtod_l+0x604>
 80154aa:	2b1f      	cmp	r3, #31
 80154ac:	f340 811e 	ble.w	80156ec <_strtod_l+0x824>
 80154b0:	2b34      	cmp	r3, #52	; 0x34
 80154b2:	bfde      	ittt	le
 80154b4:	f04f 33ff 	movle.w	r3, #4294967295
 80154b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80154bc:	4093      	lslle	r3, r2
 80154be:	f04f 0800 	mov.w	r8, #0
 80154c2:	bfcc      	ite	gt
 80154c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80154c8:	ea03 0901 	andle.w	r9, r3, r1
 80154cc:	2200      	movs	r2, #0
 80154ce:	2300      	movs	r3, #0
 80154d0:	4640      	mov	r0, r8
 80154d2:	4649      	mov	r1, r9
 80154d4:	f7eb fb20 	bl	8000b18 <__aeabi_dcmpeq>
 80154d8:	2800      	cmp	r0, #0
 80154da:	d1a6      	bne.n	801542a <_strtod_l+0x562>
 80154dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154e2:	4633      	mov	r3, r6
 80154e4:	465a      	mov	r2, fp
 80154e6:	4620      	mov	r0, r4
 80154e8:	f7ff f8cc 	bl	8014684 <__s2b>
 80154ec:	9009      	str	r0, [sp, #36]	; 0x24
 80154ee:	2800      	cmp	r0, #0
 80154f0:	f43f af2a 	beq.w	8015348 <_strtod_l+0x480>
 80154f4:	9a08      	ldr	r2, [sp, #32]
 80154f6:	9b05      	ldr	r3, [sp, #20]
 80154f8:	2a00      	cmp	r2, #0
 80154fa:	eba3 0307 	sub.w	r3, r3, r7
 80154fe:	bfa8      	it	ge
 8015500:	2300      	movge	r3, #0
 8015502:	930c      	str	r3, [sp, #48]	; 0x30
 8015504:	2500      	movs	r5, #0
 8015506:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801550a:	9312      	str	r3, [sp, #72]	; 0x48
 801550c:	46ab      	mov	fp, r5
 801550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015510:	4620      	mov	r0, r4
 8015512:	6859      	ldr	r1, [r3, #4]
 8015514:	f7ff f80e 	bl	8014534 <_Balloc>
 8015518:	9005      	str	r0, [sp, #20]
 801551a:	2800      	cmp	r0, #0
 801551c:	f43f af18 	beq.w	8015350 <_strtod_l+0x488>
 8015520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015522:	691a      	ldr	r2, [r3, #16]
 8015524:	3202      	adds	r2, #2
 8015526:	f103 010c 	add.w	r1, r3, #12
 801552a:	0092      	lsls	r2, r2, #2
 801552c:	300c      	adds	r0, #12
 801552e:	f7fe f926 	bl	801377e <memcpy>
 8015532:	ec49 8b10 	vmov	d0, r8, r9
 8015536:	aa18      	add	r2, sp, #96	; 0x60
 8015538:	a917      	add	r1, sp, #92	; 0x5c
 801553a:	4620      	mov	r0, r4
 801553c:	f7ff fbd6 	bl	8014cec <__d2b>
 8015540:	ec49 8b18 	vmov	d8, r8, r9
 8015544:	9016      	str	r0, [sp, #88]	; 0x58
 8015546:	2800      	cmp	r0, #0
 8015548:	f43f af02 	beq.w	8015350 <_strtod_l+0x488>
 801554c:	2101      	movs	r1, #1
 801554e:	4620      	mov	r0, r4
 8015550:	f7ff f930 	bl	80147b4 <__i2b>
 8015554:	4683      	mov	fp, r0
 8015556:	2800      	cmp	r0, #0
 8015558:	f43f aefa 	beq.w	8015350 <_strtod_l+0x488>
 801555c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801555e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015560:	2e00      	cmp	r6, #0
 8015562:	bfab      	itete	ge
 8015564:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015566:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015568:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801556a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801556e:	bfac      	ite	ge
 8015570:	eb06 0a03 	addge.w	sl, r6, r3
 8015574:	1b9f      	sublt	r7, r3, r6
 8015576:	9b04      	ldr	r3, [sp, #16]
 8015578:	1af6      	subs	r6, r6, r3
 801557a:	4416      	add	r6, r2
 801557c:	4ba0      	ldr	r3, [pc, #640]	; (8015800 <_strtod_l+0x938>)
 801557e:	3e01      	subs	r6, #1
 8015580:	429e      	cmp	r6, r3
 8015582:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015586:	f280 80c4 	bge.w	8015712 <_strtod_l+0x84a>
 801558a:	1b9b      	subs	r3, r3, r6
 801558c:	2b1f      	cmp	r3, #31
 801558e:	eba2 0203 	sub.w	r2, r2, r3
 8015592:	f04f 0101 	mov.w	r1, #1
 8015596:	f300 80b0 	bgt.w	80156fa <_strtod_l+0x832>
 801559a:	fa01 f303 	lsl.w	r3, r1, r3
 801559e:	930e      	str	r3, [sp, #56]	; 0x38
 80155a0:	2300      	movs	r3, #0
 80155a2:	930d      	str	r3, [sp, #52]	; 0x34
 80155a4:	eb0a 0602 	add.w	r6, sl, r2
 80155a8:	9b04      	ldr	r3, [sp, #16]
 80155aa:	45b2      	cmp	sl, r6
 80155ac:	4417      	add	r7, r2
 80155ae:	441f      	add	r7, r3
 80155b0:	4653      	mov	r3, sl
 80155b2:	bfa8      	it	ge
 80155b4:	4633      	movge	r3, r6
 80155b6:	42bb      	cmp	r3, r7
 80155b8:	bfa8      	it	ge
 80155ba:	463b      	movge	r3, r7
 80155bc:	2b00      	cmp	r3, #0
 80155be:	bfc2      	ittt	gt
 80155c0:	1af6      	subgt	r6, r6, r3
 80155c2:	1aff      	subgt	r7, r7, r3
 80155c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80155c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	dd17      	ble.n	80155fe <_strtod_l+0x736>
 80155ce:	4659      	mov	r1, fp
 80155d0:	461a      	mov	r2, r3
 80155d2:	4620      	mov	r0, r4
 80155d4:	f7ff f9ae 	bl	8014934 <__pow5mult>
 80155d8:	4683      	mov	fp, r0
 80155da:	2800      	cmp	r0, #0
 80155dc:	f43f aeb8 	beq.w	8015350 <_strtod_l+0x488>
 80155e0:	4601      	mov	r1, r0
 80155e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80155e4:	4620      	mov	r0, r4
 80155e6:	f7ff f8fb 	bl	80147e0 <__multiply>
 80155ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80155ec:	2800      	cmp	r0, #0
 80155ee:	f43f aeaf 	beq.w	8015350 <_strtod_l+0x488>
 80155f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80155f4:	4620      	mov	r0, r4
 80155f6:	f7fe ffdd 	bl	80145b4 <_Bfree>
 80155fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155fc:	9316      	str	r3, [sp, #88]	; 0x58
 80155fe:	2e00      	cmp	r6, #0
 8015600:	f300 808c 	bgt.w	801571c <_strtod_l+0x854>
 8015604:	9b08      	ldr	r3, [sp, #32]
 8015606:	2b00      	cmp	r3, #0
 8015608:	dd08      	ble.n	801561c <_strtod_l+0x754>
 801560a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801560c:	9905      	ldr	r1, [sp, #20]
 801560e:	4620      	mov	r0, r4
 8015610:	f7ff f990 	bl	8014934 <__pow5mult>
 8015614:	9005      	str	r0, [sp, #20]
 8015616:	2800      	cmp	r0, #0
 8015618:	f43f ae9a 	beq.w	8015350 <_strtod_l+0x488>
 801561c:	2f00      	cmp	r7, #0
 801561e:	dd08      	ble.n	8015632 <_strtod_l+0x76a>
 8015620:	9905      	ldr	r1, [sp, #20]
 8015622:	463a      	mov	r2, r7
 8015624:	4620      	mov	r0, r4
 8015626:	f7ff f9df 	bl	80149e8 <__lshift>
 801562a:	9005      	str	r0, [sp, #20]
 801562c:	2800      	cmp	r0, #0
 801562e:	f43f ae8f 	beq.w	8015350 <_strtod_l+0x488>
 8015632:	f1ba 0f00 	cmp.w	sl, #0
 8015636:	dd08      	ble.n	801564a <_strtod_l+0x782>
 8015638:	4659      	mov	r1, fp
 801563a:	4652      	mov	r2, sl
 801563c:	4620      	mov	r0, r4
 801563e:	f7ff f9d3 	bl	80149e8 <__lshift>
 8015642:	4683      	mov	fp, r0
 8015644:	2800      	cmp	r0, #0
 8015646:	f43f ae83 	beq.w	8015350 <_strtod_l+0x488>
 801564a:	9a05      	ldr	r2, [sp, #20]
 801564c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801564e:	4620      	mov	r0, r4
 8015650:	f7ff fa52 	bl	8014af8 <__mdiff>
 8015654:	4605      	mov	r5, r0
 8015656:	2800      	cmp	r0, #0
 8015658:	f43f ae7a 	beq.w	8015350 <_strtod_l+0x488>
 801565c:	68c3      	ldr	r3, [r0, #12]
 801565e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015660:	2300      	movs	r3, #0
 8015662:	60c3      	str	r3, [r0, #12]
 8015664:	4659      	mov	r1, fp
 8015666:	f7ff fa2b 	bl	8014ac0 <__mcmp>
 801566a:	2800      	cmp	r0, #0
 801566c:	da60      	bge.n	8015730 <_strtod_l+0x868>
 801566e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015670:	ea53 0308 	orrs.w	r3, r3, r8
 8015674:	f040 8084 	bne.w	8015780 <_strtod_l+0x8b8>
 8015678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801567c:	2b00      	cmp	r3, #0
 801567e:	d17f      	bne.n	8015780 <_strtod_l+0x8b8>
 8015680:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015684:	0d1b      	lsrs	r3, r3, #20
 8015686:	051b      	lsls	r3, r3, #20
 8015688:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801568c:	d978      	bls.n	8015780 <_strtod_l+0x8b8>
 801568e:	696b      	ldr	r3, [r5, #20]
 8015690:	b913      	cbnz	r3, 8015698 <_strtod_l+0x7d0>
 8015692:	692b      	ldr	r3, [r5, #16]
 8015694:	2b01      	cmp	r3, #1
 8015696:	dd73      	ble.n	8015780 <_strtod_l+0x8b8>
 8015698:	4629      	mov	r1, r5
 801569a:	2201      	movs	r2, #1
 801569c:	4620      	mov	r0, r4
 801569e:	f7ff f9a3 	bl	80149e8 <__lshift>
 80156a2:	4659      	mov	r1, fp
 80156a4:	4605      	mov	r5, r0
 80156a6:	f7ff fa0b 	bl	8014ac0 <__mcmp>
 80156aa:	2800      	cmp	r0, #0
 80156ac:	dd68      	ble.n	8015780 <_strtod_l+0x8b8>
 80156ae:	9904      	ldr	r1, [sp, #16]
 80156b0:	4a54      	ldr	r2, [pc, #336]	; (8015804 <_strtod_l+0x93c>)
 80156b2:	464b      	mov	r3, r9
 80156b4:	2900      	cmp	r1, #0
 80156b6:	f000 8084 	beq.w	80157c2 <_strtod_l+0x8fa>
 80156ba:	ea02 0109 	and.w	r1, r2, r9
 80156be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80156c2:	dc7e      	bgt.n	80157c2 <_strtod_l+0x8fa>
 80156c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80156c8:	f77f aeb3 	ble.w	8015432 <_strtod_l+0x56a>
 80156cc:	4b4e      	ldr	r3, [pc, #312]	; (8015808 <_strtod_l+0x940>)
 80156ce:	4640      	mov	r0, r8
 80156d0:	4649      	mov	r1, r9
 80156d2:	2200      	movs	r2, #0
 80156d4:	f7ea ffb8 	bl	8000648 <__aeabi_dmul>
 80156d8:	4b4a      	ldr	r3, [pc, #296]	; (8015804 <_strtod_l+0x93c>)
 80156da:	400b      	ands	r3, r1
 80156dc:	4680      	mov	r8, r0
 80156de:	4689      	mov	r9, r1
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	f47f ae3f 	bne.w	8015364 <_strtod_l+0x49c>
 80156e6:	2322      	movs	r3, #34	; 0x22
 80156e8:	6023      	str	r3, [r4, #0]
 80156ea:	e63b      	b.n	8015364 <_strtod_l+0x49c>
 80156ec:	f04f 32ff 	mov.w	r2, #4294967295
 80156f0:	fa02 f303 	lsl.w	r3, r2, r3
 80156f4:	ea03 0808 	and.w	r8, r3, r8
 80156f8:	e6e8      	b.n	80154cc <_strtod_l+0x604>
 80156fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80156fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015702:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015706:	36e2      	adds	r6, #226	; 0xe2
 8015708:	fa01 f306 	lsl.w	r3, r1, r6
 801570c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015710:	e748      	b.n	80155a4 <_strtod_l+0x6dc>
 8015712:	2100      	movs	r1, #0
 8015714:	2301      	movs	r3, #1
 8015716:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801571a:	e743      	b.n	80155a4 <_strtod_l+0x6dc>
 801571c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801571e:	4632      	mov	r2, r6
 8015720:	4620      	mov	r0, r4
 8015722:	f7ff f961 	bl	80149e8 <__lshift>
 8015726:	9016      	str	r0, [sp, #88]	; 0x58
 8015728:	2800      	cmp	r0, #0
 801572a:	f47f af6b 	bne.w	8015604 <_strtod_l+0x73c>
 801572e:	e60f      	b.n	8015350 <_strtod_l+0x488>
 8015730:	46ca      	mov	sl, r9
 8015732:	d171      	bne.n	8015818 <_strtod_l+0x950>
 8015734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015736:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801573a:	b352      	cbz	r2, 8015792 <_strtod_l+0x8ca>
 801573c:	4a33      	ldr	r2, [pc, #204]	; (801580c <_strtod_l+0x944>)
 801573e:	4293      	cmp	r3, r2
 8015740:	d12a      	bne.n	8015798 <_strtod_l+0x8d0>
 8015742:	9b04      	ldr	r3, [sp, #16]
 8015744:	4641      	mov	r1, r8
 8015746:	b1fb      	cbz	r3, 8015788 <_strtod_l+0x8c0>
 8015748:	4b2e      	ldr	r3, [pc, #184]	; (8015804 <_strtod_l+0x93c>)
 801574a:	ea09 0303 	and.w	r3, r9, r3
 801574e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015752:	f04f 32ff 	mov.w	r2, #4294967295
 8015756:	d81a      	bhi.n	801578e <_strtod_l+0x8c6>
 8015758:	0d1b      	lsrs	r3, r3, #20
 801575a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801575e:	fa02 f303 	lsl.w	r3, r2, r3
 8015762:	4299      	cmp	r1, r3
 8015764:	d118      	bne.n	8015798 <_strtod_l+0x8d0>
 8015766:	4b2a      	ldr	r3, [pc, #168]	; (8015810 <_strtod_l+0x948>)
 8015768:	459a      	cmp	sl, r3
 801576a:	d102      	bne.n	8015772 <_strtod_l+0x8aa>
 801576c:	3101      	adds	r1, #1
 801576e:	f43f adef 	beq.w	8015350 <_strtod_l+0x488>
 8015772:	4b24      	ldr	r3, [pc, #144]	; (8015804 <_strtod_l+0x93c>)
 8015774:	ea0a 0303 	and.w	r3, sl, r3
 8015778:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801577c:	f04f 0800 	mov.w	r8, #0
 8015780:	9b04      	ldr	r3, [sp, #16]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d1a2      	bne.n	80156cc <_strtod_l+0x804>
 8015786:	e5ed      	b.n	8015364 <_strtod_l+0x49c>
 8015788:	f04f 33ff 	mov.w	r3, #4294967295
 801578c:	e7e9      	b.n	8015762 <_strtod_l+0x89a>
 801578e:	4613      	mov	r3, r2
 8015790:	e7e7      	b.n	8015762 <_strtod_l+0x89a>
 8015792:	ea53 0308 	orrs.w	r3, r3, r8
 8015796:	d08a      	beq.n	80156ae <_strtod_l+0x7e6>
 8015798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801579a:	b1e3      	cbz	r3, 80157d6 <_strtod_l+0x90e>
 801579c:	ea13 0f0a 	tst.w	r3, sl
 80157a0:	d0ee      	beq.n	8015780 <_strtod_l+0x8b8>
 80157a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157a4:	9a04      	ldr	r2, [sp, #16]
 80157a6:	4640      	mov	r0, r8
 80157a8:	4649      	mov	r1, r9
 80157aa:	b1c3      	cbz	r3, 80157de <_strtod_l+0x916>
 80157ac:	f7ff fb6f 	bl	8014e8e <sulp>
 80157b0:	4602      	mov	r2, r0
 80157b2:	460b      	mov	r3, r1
 80157b4:	ec51 0b18 	vmov	r0, r1, d8
 80157b8:	f7ea fd90 	bl	80002dc <__adddf3>
 80157bc:	4680      	mov	r8, r0
 80157be:	4689      	mov	r9, r1
 80157c0:	e7de      	b.n	8015780 <_strtod_l+0x8b8>
 80157c2:	4013      	ands	r3, r2
 80157c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80157c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80157cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80157d0:	f04f 38ff 	mov.w	r8, #4294967295
 80157d4:	e7d4      	b.n	8015780 <_strtod_l+0x8b8>
 80157d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157d8:	ea13 0f08 	tst.w	r3, r8
 80157dc:	e7e0      	b.n	80157a0 <_strtod_l+0x8d8>
 80157de:	f7ff fb56 	bl	8014e8e <sulp>
 80157e2:	4602      	mov	r2, r0
 80157e4:	460b      	mov	r3, r1
 80157e6:	ec51 0b18 	vmov	r0, r1, d8
 80157ea:	f7ea fd75 	bl	80002d8 <__aeabi_dsub>
 80157ee:	2200      	movs	r2, #0
 80157f0:	2300      	movs	r3, #0
 80157f2:	4680      	mov	r8, r0
 80157f4:	4689      	mov	r9, r1
 80157f6:	f7eb f98f 	bl	8000b18 <__aeabi_dcmpeq>
 80157fa:	2800      	cmp	r0, #0
 80157fc:	d0c0      	beq.n	8015780 <_strtod_l+0x8b8>
 80157fe:	e618      	b.n	8015432 <_strtod_l+0x56a>
 8015800:	fffffc02 	.word	0xfffffc02
 8015804:	7ff00000 	.word	0x7ff00000
 8015808:	39500000 	.word	0x39500000
 801580c:	000fffff 	.word	0x000fffff
 8015810:	7fefffff 	.word	0x7fefffff
 8015814:	08018068 	.word	0x08018068
 8015818:	4659      	mov	r1, fp
 801581a:	4628      	mov	r0, r5
 801581c:	f7ff fac0 	bl	8014da0 <__ratio>
 8015820:	ec57 6b10 	vmov	r6, r7, d0
 8015824:	ee10 0a10 	vmov	r0, s0
 8015828:	2200      	movs	r2, #0
 801582a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801582e:	4639      	mov	r1, r7
 8015830:	f7eb f986 	bl	8000b40 <__aeabi_dcmple>
 8015834:	2800      	cmp	r0, #0
 8015836:	d071      	beq.n	801591c <_strtod_l+0xa54>
 8015838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801583a:	2b00      	cmp	r3, #0
 801583c:	d17c      	bne.n	8015938 <_strtod_l+0xa70>
 801583e:	f1b8 0f00 	cmp.w	r8, #0
 8015842:	d15a      	bne.n	80158fa <_strtod_l+0xa32>
 8015844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015848:	2b00      	cmp	r3, #0
 801584a:	d15d      	bne.n	8015908 <_strtod_l+0xa40>
 801584c:	4b90      	ldr	r3, [pc, #576]	; (8015a90 <_strtod_l+0xbc8>)
 801584e:	2200      	movs	r2, #0
 8015850:	4630      	mov	r0, r6
 8015852:	4639      	mov	r1, r7
 8015854:	f7eb f96a 	bl	8000b2c <__aeabi_dcmplt>
 8015858:	2800      	cmp	r0, #0
 801585a:	d15c      	bne.n	8015916 <_strtod_l+0xa4e>
 801585c:	4630      	mov	r0, r6
 801585e:	4639      	mov	r1, r7
 8015860:	4b8c      	ldr	r3, [pc, #560]	; (8015a94 <_strtod_l+0xbcc>)
 8015862:	2200      	movs	r2, #0
 8015864:	f7ea fef0 	bl	8000648 <__aeabi_dmul>
 8015868:	4606      	mov	r6, r0
 801586a:	460f      	mov	r7, r1
 801586c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015870:	9606      	str	r6, [sp, #24]
 8015872:	9307      	str	r3, [sp, #28]
 8015874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801587c:	4b86      	ldr	r3, [pc, #536]	; (8015a98 <_strtod_l+0xbd0>)
 801587e:	ea0a 0303 	and.w	r3, sl, r3
 8015882:	930d      	str	r3, [sp, #52]	; 0x34
 8015884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015886:	4b85      	ldr	r3, [pc, #532]	; (8015a9c <_strtod_l+0xbd4>)
 8015888:	429a      	cmp	r2, r3
 801588a:	f040 8090 	bne.w	80159ae <_strtod_l+0xae6>
 801588e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8015892:	ec49 8b10 	vmov	d0, r8, r9
 8015896:	f7ff f9b9 	bl	8014c0c <__ulp>
 801589a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801589e:	ec51 0b10 	vmov	r0, r1, d0
 80158a2:	f7ea fed1 	bl	8000648 <__aeabi_dmul>
 80158a6:	4642      	mov	r2, r8
 80158a8:	464b      	mov	r3, r9
 80158aa:	f7ea fd17 	bl	80002dc <__adddf3>
 80158ae:	460b      	mov	r3, r1
 80158b0:	4979      	ldr	r1, [pc, #484]	; (8015a98 <_strtod_l+0xbd0>)
 80158b2:	4a7b      	ldr	r2, [pc, #492]	; (8015aa0 <_strtod_l+0xbd8>)
 80158b4:	4019      	ands	r1, r3
 80158b6:	4291      	cmp	r1, r2
 80158b8:	4680      	mov	r8, r0
 80158ba:	d944      	bls.n	8015946 <_strtod_l+0xa7e>
 80158bc:	ee18 2a90 	vmov	r2, s17
 80158c0:	4b78      	ldr	r3, [pc, #480]	; (8015aa4 <_strtod_l+0xbdc>)
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d104      	bne.n	80158d0 <_strtod_l+0xa08>
 80158c6:	ee18 3a10 	vmov	r3, s16
 80158ca:	3301      	adds	r3, #1
 80158cc:	f43f ad40 	beq.w	8015350 <_strtod_l+0x488>
 80158d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8015aa4 <_strtod_l+0xbdc>
 80158d4:	f04f 38ff 	mov.w	r8, #4294967295
 80158d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80158da:	4620      	mov	r0, r4
 80158dc:	f7fe fe6a 	bl	80145b4 <_Bfree>
 80158e0:	9905      	ldr	r1, [sp, #20]
 80158e2:	4620      	mov	r0, r4
 80158e4:	f7fe fe66 	bl	80145b4 <_Bfree>
 80158e8:	4659      	mov	r1, fp
 80158ea:	4620      	mov	r0, r4
 80158ec:	f7fe fe62 	bl	80145b4 <_Bfree>
 80158f0:	4629      	mov	r1, r5
 80158f2:	4620      	mov	r0, r4
 80158f4:	f7fe fe5e 	bl	80145b4 <_Bfree>
 80158f8:	e609      	b.n	801550e <_strtod_l+0x646>
 80158fa:	f1b8 0f01 	cmp.w	r8, #1
 80158fe:	d103      	bne.n	8015908 <_strtod_l+0xa40>
 8015900:	f1b9 0f00 	cmp.w	r9, #0
 8015904:	f43f ad95 	beq.w	8015432 <_strtod_l+0x56a>
 8015908:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015a60 <_strtod_l+0xb98>
 801590c:	4f60      	ldr	r7, [pc, #384]	; (8015a90 <_strtod_l+0xbc8>)
 801590e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015912:	2600      	movs	r6, #0
 8015914:	e7ae      	b.n	8015874 <_strtod_l+0x9ac>
 8015916:	4f5f      	ldr	r7, [pc, #380]	; (8015a94 <_strtod_l+0xbcc>)
 8015918:	2600      	movs	r6, #0
 801591a:	e7a7      	b.n	801586c <_strtod_l+0x9a4>
 801591c:	4b5d      	ldr	r3, [pc, #372]	; (8015a94 <_strtod_l+0xbcc>)
 801591e:	4630      	mov	r0, r6
 8015920:	4639      	mov	r1, r7
 8015922:	2200      	movs	r2, #0
 8015924:	f7ea fe90 	bl	8000648 <__aeabi_dmul>
 8015928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801592a:	4606      	mov	r6, r0
 801592c:	460f      	mov	r7, r1
 801592e:	2b00      	cmp	r3, #0
 8015930:	d09c      	beq.n	801586c <_strtod_l+0x9a4>
 8015932:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015936:	e79d      	b.n	8015874 <_strtod_l+0x9ac>
 8015938:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015a68 <_strtod_l+0xba0>
 801593c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015940:	ec57 6b17 	vmov	r6, r7, d7
 8015944:	e796      	b.n	8015874 <_strtod_l+0x9ac>
 8015946:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801594a:	9b04      	ldr	r3, [sp, #16]
 801594c:	46ca      	mov	sl, r9
 801594e:	2b00      	cmp	r3, #0
 8015950:	d1c2      	bne.n	80158d8 <_strtod_l+0xa10>
 8015952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015958:	0d1b      	lsrs	r3, r3, #20
 801595a:	051b      	lsls	r3, r3, #20
 801595c:	429a      	cmp	r2, r3
 801595e:	d1bb      	bne.n	80158d8 <_strtod_l+0xa10>
 8015960:	4630      	mov	r0, r6
 8015962:	4639      	mov	r1, r7
 8015964:	f7eb f9d0 	bl	8000d08 <__aeabi_d2lz>
 8015968:	f7ea fe40 	bl	80005ec <__aeabi_l2d>
 801596c:	4602      	mov	r2, r0
 801596e:	460b      	mov	r3, r1
 8015970:	4630      	mov	r0, r6
 8015972:	4639      	mov	r1, r7
 8015974:	f7ea fcb0 	bl	80002d8 <__aeabi_dsub>
 8015978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801597a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801597e:	ea43 0308 	orr.w	r3, r3, r8
 8015982:	4313      	orrs	r3, r2
 8015984:	4606      	mov	r6, r0
 8015986:	460f      	mov	r7, r1
 8015988:	d054      	beq.n	8015a34 <_strtod_l+0xb6c>
 801598a:	a339      	add	r3, pc, #228	; (adr r3, 8015a70 <_strtod_l+0xba8>)
 801598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015990:	f7eb f8cc 	bl	8000b2c <__aeabi_dcmplt>
 8015994:	2800      	cmp	r0, #0
 8015996:	f47f ace5 	bne.w	8015364 <_strtod_l+0x49c>
 801599a:	a337      	add	r3, pc, #220	; (adr r3, 8015a78 <_strtod_l+0xbb0>)
 801599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a0:	4630      	mov	r0, r6
 80159a2:	4639      	mov	r1, r7
 80159a4:	f7eb f8e0 	bl	8000b68 <__aeabi_dcmpgt>
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d095      	beq.n	80158d8 <_strtod_l+0xa10>
 80159ac:	e4da      	b.n	8015364 <_strtod_l+0x49c>
 80159ae:	9b04      	ldr	r3, [sp, #16]
 80159b0:	b333      	cbz	r3, 8015a00 <_strtod_l+0xb38>
 80159b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80159b8:	d822      	bhi.n	8015a00 <_strtod_l+0xb38>
 80159ba:	a331      	add	r3, pc, #196	; (adr r3, 8015a80 <_strtod_l+0xbb8>)
 80159bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c0:	4630      	mov	r0, r6
 80159c2:	4639      	mov	r1, r7
 80159c4:	f7eb f8bc 	bl	8000b40 <__aeabi_dcmple>
 80159c8:	b1a0      	cbz	r0, 80159f4 <_strtod_l+0xb2c>
 80159ca:	4639      	mov	r1, r7
 80159cc:	4630      	mov	r0, r6
 80159ce:	f7eb f913 	bl	8000bf8 <__aeabi_d2uiz>
 80159d2:	2801      	cmp	r0, #1
 80159d4:	bf38      	it	cc
 80159d6:	2001      	movcc	r0, #1
 80159d8:	f7ea fdbc 	bl	8000554 <__aeabi_ui2d>
 80159dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159de:	4606      	mov	r6, r0
 80159e0:	460f      	mov	r7, r1
 80159e2:	bb23      	cbnz	r3, 8015a2e <_strtod_l+0xb66>
 80159e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80159e8:	9010      	str	r0, [sp, #64]	; 0x40
 80159ea:	9311      	str	r3, [sp, #68]	; 0x44
 80159ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80159f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80159f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80159f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80159fc:	1a9b      	subs	r3, r3, r2
 80159fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015a04:	eeb0 0a48 	vmov.f32	s0, s16
 8015a08:	eef0 0a68 	vmov.f32	s1, s17
 8015a0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015a10:	f7ff f8fc 	bl	8014c0c <__ulp>
 8015a14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015a18:	ec53 2b10 	vmov	r2, r3, d0
 8015a1c:	f7ea fe14 	bl	8000648 <__aeabi_dmul>
 8015a20:	ec53 2b18 	vmov	r2, r3, d8
 8015a24:	f7ea fc5a 	bl	80002dc <__adddf3>
 8015a28:	4680      	mov	r8, r0
 8015a2a:	4689      	mov	r9, r1
 8015a2c:	e78d      	b.n	801594a <_strtod_l+0xa82>
 8015a2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015a32:	e7db      	b.n	80159ec <_strtod_l+0xb24>
 8015a34:	a314      	add	r3, pc, #80	; (adr r3, 8015a88 <_strtod_l+0xbc0>)
 8015a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3a:	f7eb f877 	bl	8000b2c <__aeabi_dcmplt>
 8015a3e:	e7b3      	b.n	80159a8 <_strtod_l+0xae0>
 8015a40:	2300      	movs	r3, #0
 8015a42:	930a      	str	r3, [sp, #40]	; 0x28
 8015a44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a48:	6013      	str	r3, [r2, #0]
 8015a4a:	f7ff ba7c 	b.w	8014f46 <_strtod_l+0x7e>
 8015a4e:	2a65      	cmp	r2, #101	; 0x65
 8015a50:	f43f ab75 	beq.w	801513e <_strtod_l+0x276>
 8015a54:	2a45      	cmp	r2, #69	; 0x45
 8015a56:	f43f ab72 	beq.w	801513e <_strtod_l+0x276>
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	f7ff bbaa 	b.w	80151b4 <_strtod_l+0x2ec>
 8015a60:	00000000 	.word	0x00000000
 8015a64:	bff00000 	.word	0xbff00000
 8015a68:	00000000 	.word	0x00000000
 8015a6c:	3ff00000 	.word	0x3ff00000
 8015a70:	94a03595 	.word	0x94a03595
 8015a74:	3fdfffff 	.word	0x3fdfffff
 8015a78:	35afe535 	.word	0x35afe535
 8015a7c:	3fe00000 	.word	0x3fe00000
 8015a80:	ffc00000 	.word	0xffc00000
 8015a84:	41dfffff 	.word	0x41dfffff
 8015a88:	94a03595 	.word	0x94a03595
 8015a8c:	3fcfffff 	.word	0x3fcfffff
 8015a90:	3ff00000 	.word	0x3ff00000
 8015a94:	3fe00000 	.word	0x3fe00000
 8015a98:	7ff00000 	.word	0x7ff00000
 8015a9c:	7fe00000 	.word	0x7fe00000
 8015aa0:	7c9fffff 	.word	0x7c9fffff
 8015aa4:	7fefffff 	.word	0x7fefffff

08015aa8 <_strtod_r>:
 8015aa8:	4b01      	ldr	r3, [pc, #4]	; (8015ab0 <_strtod_r+0x8>)
 8015aaa:	f7ff ba0d 	b.w	8014ec8 <_strtod_l>
 8015aae:	bf00      	nop
 8015ab0:	200000d4 	.word	0x200000d4

08015ab4 <_strtol_l.constprop.0>:
 8015ab4:	2b01      	cmp	r3, #1
 8015ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015aba:	d001      	beq.n	8015ac0 <_strtol_l.constprop.0+0xc>
 8015abc:	2b24      	cmp	r3, #36	; 0x24
 8015abe:	d906      	bls.n	8015ace <_strtol_l.constprop.0+0x1a>
 8015ac0:	f7fd fe30 	bl	8013724 <__errno>
 8015ac4:	2316      	movs	r3, #22
 8015ac6:	6003      	str	r3, [r0, #0]
 8015ac8:	2000      	movs	r0, #0
 8015aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ace:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015bb4 <_strtol_l.constprop.0+0x100>
 8015ad2:	460d      	mov	r5, r1
 8015ad4:	462e      	mov	r6, r5
 8015ad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015ada:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8015ade:	f017 0708 	ands.w	r7, r7, #8
 8015ae2:	d1f7      	bne.n	8015ad4 <_strtol_l.constprop.0+0x20>
 8015ae4:	2c2d      	cmp	r4, #45	; 0x2d
 8015ae6:	d132      	bne.n	8015b4e <_strtol_l.constprop.0+0x9a>
 8015ae8:	782c      	ldrb	r4, [r5, #0]
 8015aea:	2701      	movs	r7, #1
 8015aec:	1cb5      	adds	r5, r6, #2
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d05b      	beq.n	8015baa <_strtol_l.constprop.0+0xf6>
 8015af2:	2b10      	cmp	r3, #16
 8015af4:	d109      	bne.n	8015b0a <_strtol_l.constprop.0+0x56>
 8015af6:	2c30      	cmp	r4, #48	; 0x30
 8015af8:	d107      	bne.n	8015b0a <_strtol_l.constprop.0+0x56>
 8015afa:	782c      	ldrb	r4, [r5, #0]
 8015afc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015b00:	2c58      	cmp	r4, #88	; 0x58
 8015b02:	d14d      	bne.n	8015ba0 <_strtol_l.constprop.0+0xec>
 8015b04:	786c      	ldrb	r4, [r5, #1]
 8015b06:	2310      	movs	r3, #16
 8015b08:	3502      	adds	r5, #2
 8015b0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015b0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015b12:	f04f 0e00 	mov.w	lr, #0
 8015b16:	fbb8 f9f3 	udiv	r9, r8, r3
 8015b1a:	4676      	mov	r6, lr
 8015b1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015b20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015b24:	f1bc 0f09 	cmp.w	ip, #9
 8015b28:	d816      	bhi.n	8015b58 <_strtol_l.constprop.0+0xa4>
 8015b2a:	4664      	mov	r4, ip
 8015b2c:	42a3      	cmp	r3, r4
 8015b2e:	dd24      	ble.n	8015b7a <_strtol_l.constprop.0+0xc6>
 8015b30:	f1be 3fff 	cmp.w	lr, #4294967295
 8015b34:	d008      	beq.n	8015b48 <_strtol_l.constprop.0+0x94>
 8015b36:	45b1      	cmp	r9, r6
 8015b38:	d31c      	bcc.n	8015b74 <_strtol_l.constprop.0+0xc0>
 8015b3a:	d101      	bne.n	8015b40 <_strtol_l.constprop.0+0x8c>
 8015b3c:	45a2      	cmp	sl, r4
 8015b3e:	db19      	blt.n	8015b74 <_strtol_l.constprop.0+0xc0>
 8015b40:	fb06 4603 	mla	r6, r6, r3, r4
 8015b44:	f04f 0e01 	mov.w	lr, #1
 8015b48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b4c:	e7e8      	b.n	8015b20 <_strtol_l.constprop.0+0x6c>
 8015b4e:	2c2b      	cmp	r4, #43	; 0x2b
 8015b50:	bf04      	itt	eq
 8015b52:	782c      	ldrbeq	r4, [r5, #0]
 8015b54:	1cb5      	addeq	r5, r6, #2
 8015b56:	e7ca      	b.n	8015aee <_strtol_l.constprop.0+0x3a>
 8015b58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015b5c:	f1bc 0f19 	cmp.w	ip, #25
 8015b60:	d801      	bhi.n	8015b66 <_strtol_l.constprop.0+0xb2>
 8015b62:	3c37      	subs	r4, #55	; 0x37
 8015b64:	e7e2      	b.n	8015b2c <_strtol_l.constprop.0+0x78>
 8015b66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015b6a:	f1bc 0f19 	cmp.w	ip, #25
 8015b6e:	d804      	bhi.n	8015b7a <_strtol_l.constprop.0+0xc6>
 8015b70:	3c57      	subs	r4, #87	; 0x57
 8015b72:	e7db      	b.n	8015b2c <_strtol_l.constprop.0+0x78>
 8015b74:	f04f 3eff 	mov.w	lr, #4294967295
 8015b78:	e7e6      	b.n	8015b48 <_strtol_l.constprop.0+0x94>
 8015b7a:	f1be 3fff 	cmp.w	lr, #4294967295
 8015b7e:	d105      	bne.n	8015b8c <_strtol_l.constprop.0+0xd8>
 8015b80:	2322      	movs	r3, #34	; 0x22
 8015b82:	6003      	str	r3, [r0, #0]
 8015b84:	4646      	mov	r6, r8
 8015b86:	b942      	cbnz	r2, 8015b9a <_strtol_l.constprop.0+0xe6>
 8015b88:	4630      	mov	r0, r6
 8015b8a:	e79e      	b.n	8015aca <_strtol_l.constprop.0+0x16>
 8015b8c:	b107      	cbz	r7, 8015b90 <_strtol_l.constprop.0+0xdc>
 8015b8e:	4276      	negs	r6, r6
 8015b90:	2a00      	cmp	r2, #0
 8015b92:	d0f9      	beq.n	8015b88 <_strtol_l.constprop.0+0xd4>
 8015b94:	f1be 0f00 	cmp.w	lr, #0
 8015b98:	d000      	beq.n	8015b9c <_strtol_l.constprop.0+0xe8>
 8015b9a:	1e69      	subs	r1, r5, #1
 8015b9c:	6011      	str	r1, [r2, #0]
 8015b9e:	e7f3      	b.n	8015b88 <_strtol_l.constprop.0+0xd4>
 8015ba0:	2430      	movs	r4, #48	; 0x30
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d1b1      	bne.n	8015b0a <_strtol_l.constprop.0+0x56>
 8015ba6:	2308      	movs	r3, #8
 8015ba8:	e7af      	b.n	8015b0a <_strtol_l.constprop.0+0x56>
 8015baa:	2c30      	cmp	r4, #48	; 0x30
 8015bac:	d0a5      	beq.n	8015afa <_strtol_l.constprop.0+0x46>
 8015bae:	230a      	movs	r3, #10
 8015bb0:	e7ab      	b.n	8015b0a <_strtol_l.constprop.0+0x56>
 8015bb2:	bf00      	nop
 8015bb4:	08018091 	.word	0x08018091

08015bb8 <_strtol_r>:
 8015bb8:	f7ff bf7c 	b.w	8015ab4 <_strtol_l.constprop.0>

08015bbc <__ssputs_r>:
 8015bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bc0:	688e      	ldr	r6, [r1, #8]
 8015bc2:	461f      	mov	r7, r3
 8015bc4:	42be      	cmp	r6, r7
 8015bc6:	680b      	ldr	r3, [r1, #0]
 8015bc8:	4682      	mov	sl, r0
 8015bca:	460c      	mov	r4, r1
 8015bcc:	4690      	mov	r8, r2
 8015bce:	d82c      	bhi.n	8015c2a <__ssputs_r+0x6e>
 8015bd0:	898a      	ldrh	r2, [r1, #12]
 8015bd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015bd6:	d026      	beq.n	8015c26 <__ssputs_r+0x6a>
 8015bd8:	6965      	ldr	r5, [r4, #20]
 8015bda:	6909      	ldr	r1, [r1, #16]
 8015bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015be0:	eba3 0901 	sub.w	r9, r3, r1
 8015be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015be8:	1c7b      	adds	r3, r7, #1
 8015bea:	444b      	add	r3, r9
 8015bec:	106d      	asrs	r5, r5, #1
 8015bee:	429d      	cmp	r5, r3
 8015bf0:	bf38      	it	cc
 8015bf2:	461d      	movcc	r5, r3
 8015bf4:	0553      	lsls	r3, r2, #21
 8015bf6:	d527      	bpl.n	8015c48 <__ssputs_r+0x8c>
 8015bf8:	4629      	mov	r1, r5
 8015bfa:	f7fc fc77 	bl	80124ec <_malloc_r>
 8015bfe:	4606      	mov	r6, r0
 8015c00:	b360      	cbz	r0, 8015c5c <__ssputs_r+0xa0>
 8015c02:	6921      	ldr	r1, [r4, #16]
 8015c04:	464a      	mov	r2, r9
 8015c06:	f7fd fdba 	bl	801377e <memcpy>
 8015c0a:	89a3      	ldrh	r3, [r4, #12]
 8015c0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c14:	81a3      	strh	r3, [r4, #12]
 8015c16:	6126      	str	r6, [r4, #16]
 8015c18:	6165      	str	r5, [r4, #20]
 8015c1a:	444e      	add	r6, r9
 8015c1c:	eba5 0509 	sub.w	r5, r5, r9
 8015c20:	6026      	str	r6, [r4, #0]
 8015c22:	60a5      	str	r5, [r4, #8]
 8015c24:	463e      	mov	r6, r7
 8015c26:	42be      	cmp	r6, r7
 8015c28:	d900      	bls.n	8015c2c <__ssputs_r+0x70>
 8015c2a:	463e      	mov	r6, r7
 8015c2c:	6820      	ldr	r0, [r4, #0]
 8015c2e:	4632      	mov	r2, r6
 8015c30:	4641      	mov	r1, r8
 8015c32:	f7fd fca4 	bl	801357e <memmove>
 8015c36:	68a3      	ldr	r3, [r4, #8]
 8015c38:	1b9b      	subs	r3, r3, r6
 8015c3a:	60a3      	str	r3, [r4, #8]
 8015c3c:	6823      	ldr	r3, [r4, #0]
 8015c3e:	4433      	add	r3, r6
 8015c40:	6023      	str	r3, [r4, #0]
 8015c42:	2000      	movs	r0, #0
 8015c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c48:	462a      	mov	r2, r5
 8015c4a:	f000 ff30 	bl	8016aae <_realloc_r>
 8015c4e:	4606      	mov	r6, r0
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d1e0      	bne.n	8015c16 <__ssputs_r+0x5a>
 8015c54:	6921      	ldr	r1, [r4, #16]
 8015c56:	4650      	mov	r0, sl
 8015c58:	f7fe fc20 	bl	801449c <_free_r>
 8015c5c:	230c      	movs	r3, #12
 8015c5e:	f8ca 3000 	str.w	r3, [sl]
 8015c62:	89a3      	ldrh	r3, [r4, #12]
 8015c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c68:	81a3      	strh	r3, [r4, #12]
 8015c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c6e:	e7e9      	b.n	8015c44 <__ssputs_r+0x88>

08015c70 <_svfiprintf_r>:
 8015c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c74:	4698      	mov	r8, r3
 8015c76:	898b      	ldrh	r3, [r1, #12]
 8015c78:	061b      	lsls	r3, r3, #24
 8015c7a:	b09d      	sub	sp, #116	; 0x74
 8015c7c:	4607      	mov	r7, r0
 8015c7e:	460d      	mov	r5, r1
 8015c80:	4614      	mov	r4, r2
 8015c82:	d50e      	bpl.n	8015ca2 <_svfiprintf_r+0x32>
 8015c84:	690b      	ldr	r3, [r1, #16]
 8015c86:	b963      	cbnz	r3, 8015ca2 <_svfiprintf_r+0x32>
 8015c88:	2140      	movs	r1, #64	; 0x40
 8015c8a:	f7fc fc2f 	bl	80124ec <_malloc_r>
 8015c8e:	6028      	str	r0, [r5, #0]
 8015c90:	6128      	str	r0, [r5, #16]
 8015c92:	b920      	cbnz	r0, 8015c9e <_svfiprintf_r+0x2e>
 8015c94:	230c      	movs	r3, #12
 8015c96:	603b      	str	r3, [r7, #0]
 8015c98:	f04f 30ff 	mov.w	r0, #4294967295
 8015c9c:	e0d0      	b.n	8015e40 <_svfiprintf_r+0x1d0>
 8015c9e:	2340      	movs	r3, #64	; 0x40
 8015ca0:	616b      	str	r3, [r5, #20]
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ca6:	2320      	movs	r3, #32
 8015ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cb0:	2330      	movs	r3, #48	; 0x30
 8015cb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015e58 <_svfiprintf_r+0x1e8>
 8015cb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015cba:	f04f 0901 	mov.w	r9, #1
 8015cbe:	4623      	mov	r3, r4
 8015cc0:	469a      	mov	sl, r3
 8015cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cc6:	b10a      	cbz	r2, 8015ccc <_svfiprintf_r+0x5c>
 8015cc8:	2a25      	cmp	r2, #37	; 0x25
 8015cca:	d1f9      	bne.n	8015cc0 <_svfiprintf_r+0x50>
 8015ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8015cd0:	d00b      	beq.n	8015cea <_svfiprintf_r+0x7a>
 8015cd2:	465b      	mov	r3, fp
 8015cd4:	4622      	mov	r2, r4
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	4638      	mov	r0, r7
 8015cda:	f7ff ff6f 	bl	8015bbc <__ssputs_r>
 8015cde:	3001      	adds	r0, #1
 8015ce0:	f000 80a9 	beq.w	8015e36 <_svfiprintf_r+0x1c6>
 8015ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ce6:	445a      	add	r2, fp
 8015ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8015cea:	f89a 3000 	ldrb.w	r3, [sl]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f000 80a1 	beq.w	8015e36 <_svfiprintf_r+0x1c6>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8015cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cfe:	f10a 0a01 	add.w	sl, sl, #1
 8015d02:	9304      	str	r3, [sp, #16]
 8015d04:	9307      	str	r3, [sp, #28]
 8015d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8015d0c:	4654      	mov	r4, sl
 8015d0e:	2205      	movs	r2, #5
 8015d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d14:	4850      	ldr	r0, [pc, #320]	; (8015e58 <_svfiprintf_r+0x1e8>)
 8015d16:	f7ea fa83 	bl	8000220 <memchr>
 8015d1a:	9a04      	ldr	r2, [sp, #16]
 8015d1c:	b9d8      	cbnz	r0, 8015d56 <_svfiprintf_r+0xe6>
 8015d1e:	06d0      	lsls	r0, r2, #27
 8015d20:	bf44      	itt	mi
 8015d22:	2320      	movmi	r3, #32
 8015d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d28:	0711      	lsls	r1, r2, #28
 8015d2a:	bf44      	itt	mi
 8015d2c:	232b      	movmi	r3, #43	; 0x2b
 8015d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d32:	f89a 3000 	ldrb.w	r3, [sl]
 8015d36:	2b2a      	cmp	r3, #42	; 0x2a
 8015d38:	d015      	beq.n	8015d66 <_svfiprintf_r+0xf6>
 8015d3a:	9a07      	ldr	r2, [sp, #28]
 8015d3c:	4654      	mov	r4, sl
 8015d3e:	2000      	movs	r0, #0
 8015d40:	f04f 0c0a 	mov.w	ip, #10
 8015d44:	4621      	mov	r1, r4
 8015d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d4a:	3b30      	subs	r3, #48	; 0x30
 8015d4c:	2b09      	cmp	r3, #9
 8015d4e:	d94d      	bls.n	8015dec <_svfiprintf_r+0x17c>
 8015d50:	b1b0      	cbz	r0, 8015d80 <_svfiprintf_r+0x110>
 8015d52:	9207      	str	r2, [sp, #28]
 8015d54:	e014      	b.n	8015d80 <_svfiprintf_r+0x110>
 8015d56:	eba0 0308 	sub.w	r3, r0, r8
 8015d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8015d5e:	4313      	orrs	r3, r2
 8015d60:	9304      	str	r3, [sp, #16]
 8015d62:	46a2      	mov	sl, r4
 8015d64:	e7d2      	b.n	8015d0c <_svfiprintf_r+0x9c>
 8015d66:	9b03      	ldr	r3, [sp, #12]
 8015d68:	1d19      	adds	r1, r3, #4
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	9103      	str	r1, [sp, #12]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	bfbb      	ittet	lt
 8015d72:	425b      	neglt	r3, r3
 8015d74:	f042 0202 	orrlt.w	r2, r2, #2
 8015d78:	9307      	strge	r3, [sp, #28]
 8015d7a:	9307      	strlt	r3, [sp, #28]
 8015d7c:	bfb8      	it	lt
 8015d7e:	9204      	strlt	r2, [sp, #16]
 8015d80:	7823      	ldrb	r3, [r4, #0]
 8015d82:	2b2e      	cmp	r3, #46	; 0x2e
 8015d84:	d10c      	bne.n	8015da0 <_svfiprintf_r+0x130>
 8015d86:	7863      	ldrb	r3, [r4, #1]
 8015d88:	2b2a      	cmp	r3, #42	; 0x2a
 8015d8a:	d134      	bne.n	8015df6 <_svfiprintf_r+0x186>
 8015d8c:	9b03      	ldr	r3, [sp, #12]
 8015d8e:	1d1a      	adds	r2, r3, #4
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	9203      	str	r2, [sp, #12]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	bfb8      	it	lt
 8015d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d9c:	3402      	adds	r4, #2
 8015d9e:	9305      	str	r3, [sp, #20]
 8015da0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015e68 <_svfiprintf_r+0x1f8>
 8015da4:	7821      	ldrb	r1, [r4, #0]
 8015da6:	2203      	movs	r2, #3
 8015da8:	4650      	mov	r0, sl
 8015daa:	f7ea fa39 	bl	8000220 <memchr>
 8015dae:	b138      	cbz	r0, 8015dc0 <_svfiprintf_r+0x150>
 8015db0:	9b04      	ldr	r3, [sp, #16]
 8015db2:	eba0 000a 	sub.w	r0, r0, sl
 8015db6:	2240      	movs	r2, #64	; 0x40
 8015db8:	4082      	lsls	r2, r0
 8015dba:	4313      	orrs	r3, r2
 8015dbc:	3401      	adds	r4, #1
 8015dbe:	9304      	str	r3, [sp, #16]
 8015dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dc4:	4825      	ldr	r0, [pc, #148]	; (8015e5c <_svfiprintf_r+0x1ec>)
 8015dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015dca:	2206      	movs	r2, #6
 8015dcc:	f7ea fa28 	bl	8000220 <memchr>
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d038      	beq.n	8015e46 <_svfiprintf_r+0x1d6>
 8015dd4:	4b22      	ldr	r3, [pc, #136]	; (8015e60 <_svfiprintf_r+0x1f0>)
 8015dd6:	bb1b      	cbnz	r3, 8015e20 <_svfiprintf_r+0x1b0>
 8015dd8:	9b03      	ldr	r3, [sp, #12]
 8015dda:	3307      	adds	r3, #7
 8015ddc:	f023 0307 	bic.w	r3, r3, #7
 8015de0:	3308      	adds	r3, #8
 8015de2:	9303      	str	r3, [sp, #12]
 8015de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de6:	4433      	add	r3, r6
 8015de8:	9309      	str	r3, [sp, #36]	; 0x24
 8015dea:	e768      	b.n	8015cbe <_svfiprintf_r+0x4e>
 8015dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8015df0:	460c      	mov	r4, r1
 8015df2:	2001      	movs	r0, #1
 8015df4:	e7a6      	b.n	8015d44 <_svfiprintf_r+0xd4>
 8015df6:	2300      	movs	r3, #0
 8015df8:	3401      	adds	r4, #1
 8015dfa:	9305      	str	r3, [sp, #20]
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	f04f 0c0a 	mov.w	ip, #10
 8015e02:	4620      	mov	r0, r4
 8015e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e08:	3a30      	subs	r2, #48	; 0x30
 8015e0a:	2a09      	cmp	r2, #9
 8015e0c:	d903      	bls.n	8015e16 <_svfiprintf_r+0x1a6>
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d0c6      	beq.n	8015da0 <_svfiprintf_r+0x130>
 8015e12:	9105      	str	r1, [sp, #20]
 8015e14:	e7c4      	b.n	8015da0 <_svfiprintf_r+0x130>
 8015e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	2301      	movs	r3, #1
 8015e1e:	e7f0      	b.n	8015e02 <_svfiprintf_r+0x192>
 8015e20:	ab03      	add	r3, sp, #12
 8015e22:	9300      	str	r3, [sp, #0]
 8015e24:	462a      	mov	r2, r5
 8015e26:	4b0f      	ldr	r3, [pc, #60]	; (8015e64 <_svfiprintf_r+0x1f4>)
 8015e28:	a904      	add	r1, sp, #16
 8015e2a:	4638      	mov	r0, r7
 8015e2c:	f7fc fc8a 	bl	8012744 <_printf_float>
 8015e30:	1c42      	adds	r2, r0, #1
 8015e32:	4606      	mov	r6, r0
 8015e34:	d1d6      	bne.n	8015de4 <_svfiprintf_r+0x174>
 8015e36:	89ab      	ldrh	r3, [r5, #12]
 8015e38:	065b      	lsls	r3, r3, #25
 8015e3a:	f53f af2d 	bmi.w	8015c98 <_svfiprintf_r+0x28>
 8015e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e40:	b01d      	add	sp, #116	; 0x74
 8015e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e46:	ab03      	add	r3, sp, #12
 8015e48:	9300      	str	r3, [sp, #0]
 8015e4a:	462a      	mov	r2, r5
 8015e4c:	4b05      	ldr	r3, [pc, #20]	; (8015e64 <_svfiprintf_r+0x1f4>)
 8015e4e:	a904      	add	r1, sp, #16
 8015e50:	4638      	mov	r0, r7
 8015e52:	f7fc ff1b 	bl	8012c8c <_printf_i>
 8015e56:	e7eb      	b.n	8015e30 <_svfiprintf_r+0x1c0>
 8015e58:	08018191 	.word	0x08018191
 8015e5c:	0801819b 	.word	0x0801819b
 8015e60:	08012745 	.word	0x08012745
 8015e64:	08015bbd 	.word	0x08015bbd
 8015e68:	08018197 	.word	0x08018197

08015e6c <__sfputc_r>:
 8015e6c:	6893      	ldr	r3, [r2, #8]
 8015e6e:	3b01      	subs	r3, #1
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	b410      	push	{r4}
 8015e74:	6093      	str	r3, [r2, #8]
 8015e76:	da08      	bge.n	8015e8a <__sfputc_r+0x1e>
 8015e78:	6994      	ldr	r4, [r2, #24]
 8015e7a:	42a3      	cmp	r3, r4
 8015e7c:	db01      	blt.n	8015e82 <__sfputc_r+0x16>
 8015e7e:	290a      	cmp	r1, #10
 8015e80:	d103      	bne.n	8015e8a <__sfputc_r+0x1e>
 8015e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e86:	f000 b9e3 	b.w	8016250 <__swbuf_r>
 8015e8a:	6813      	ldr	r3, [r2, #0]
 8015e8c:	1c58      	adds	r0, r3, #1
 8015e8e:	6010      	str	r0, [r2, #0]
 8015e90:	7019      	strb	r1, [r3, #0]
 8015e92:	4608      	mov	r0, r1
 8015e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e98:	4770      	bx	lr

08015e9a <__sfputs_r>:
 8015e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e9c:	4606      	mov	r6, r0
 8015e9e:	460f      	mov	r7, r1
 8015ea0:	4614      	mov	r4, r2
 8015ea2:	18d5      	adds	r5, r2, r3
 8015ea4:	42ac      	cmp	r4, r5
 8015ea6:	d101      	bne.n	8015eac <__sfputs_r+0x12>
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	e007      	b.n	8015ebc <__sfputs_r+0x22>
 8015eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eb0:	463a      	mov	r2, r7
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	f7ff ffda 	bl	8015e6c <__sfputc_r>
 8015eb8:	1c43      	adds	r3, r0, #1
 8015eba:	d1f3      	bne.n	8015ea4 <__sfputs_r+0xa>
 8015ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ec0 <_vfiprintf_r>:
 8015ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ec4:	460d      	mov	r5, r1
 8015ec6:	b09d      	sub	sp, #116	; 0x74
 8015ec8:	4614      	mov	r4, r2
 8015eca:	4698      	mov	r8, r3
 8015ecc:	4606      	mov	r6, r0
 8015ece:	b118      	cbz	r0, 8015ed8 <_vfiprintf_r+0x18>
 8015ed0:	6a03      	ldr	r3, [r0, #32]
 8015ed2:	b90b      	cbnz	r3, 8015ed8 <_vfiprintf_r+0x18>
 8015ed4:	f7fd fa98 	bl	8013408 <__sinit>
 8015ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015eda:	07d9      	lsls	r1, r3, #31
 8015edc:	d405      	bmi.n	8015eea <_vfiprintf_r+0x2a>
 8015ede:	89ab      	ldrh	r3, [r5, #12]
 8015ee0:	059a      	lsls	r2, r3, #22
 8015ee2:	d402      	bmi.n	8015eea <_vfiprintf_r+0x2a>
 8015ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ee6:	f7fd fc48 	bl	801377a <__retarget_lock_acquire_recursive>
 8015eea:	89ab      	ldrh	r3, [r5, #12]
 8015eec:	071b      	lsls	r3, r3, #28
 8015eee:	d501      	bpl.n	8015ef4 <_vfiprintf_r+0x34>
 8015ef0:	692b      	ldr	r3, [r5, #16]
 8015ef2:	b99b      	cbnz	r3, 8015f1c <_vfiprintf_r+0x5c>
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	f000 f9e8 	bl	80162cc <__swsetup_r>
 8015efc:	b170      	cbz	r0, 8015f1c <_vfiprintf_r+0x5c>
 8015efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f00:	07dc      	lsls	r4, r3, #31
 8015f02:	d504      	bpl.n	8015f0e <_vfiprintf_r+0x4e>
 8015f04:	f04f 30ff 	mov.w	r0, #4294967295
 8015f08:	b01d      	add	sp, #116	; 0x74
 8015f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f0e:	89ab      	ldrh	r3, [r5, #12]
 8015f10:	0598      	lsls	r0, r3, #22
 8015f12:	d4f7      	bmi.n	8015f04 <_vfiprintf_r+0x44>
 8015f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f16:	f7fd fc31 	bl	801377c <__retarget_lock_release_recursive>
 8015f1a:	e7f3      	b.n	8015f04 <_vfiprintf_r+0x44>
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8015f20:	2320      	movs	r3, #32
 8015f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f2a:	2330      	movs	r3, #48	; 0x30
 8015f2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80160e0 <_vfiprintf_r+0x220>
 8015f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f34:	f04f 0901 	mov.w	r9, #1
 8015f38:	4623      	mov	r3, r4
 8015f3a:	469a      	mov	sl, r3
 8015f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f40:	b10a      	cbz	r2, 8015f46 <_vfiprintf_r+0x86>
 8015f42:	2a25      	cmp	r2, #37	; 0x25
 8015f44:	d1f9      	bne.n	8015f3a <_vfiprintf_r+0x7a>
 8015f46:	ebba 0b04 	subs.w	fp, sl, r4
 8015f4a:	d00b      	beq.n	8015f64 <_vfiprintf_r+0xa4>
 8015f4c:	465b      	mov	r3, fp
 8015f4e:	4622      	mov	r2, r4
 8015f50:	4629      	mov	r1, r5
 8015f52:	4630      	mov	r0, r6
 8015f54:	f7ff ffa1 	bl	8015e9a <__sfputs_r>
 8015f58:	3001      	adds	r0, #1
 8015f5a:	f000 80a9 	beq.w	80160b0 <_vfiprintf_r+0x1f0>
 8015f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f60:	445a      	add	r2, fp
 8015f62:	9209      	str	r2, [sp, #36]	; 0x24
 8015f64:	f89a 3000 	ldrb.w	r3, [sl]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	f000 80a1 	beq.w	80160b0 <_vfiprintf_r+0x1f0>
 8015f6e:	2300      	movs	r3, #0
 8015f70:	f04f 32ff 	mov.w	r2, #4294967295
 8015f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f78:	f10a 0a01 	add.w	sl, sl, #1
 8015f7c:	9304      	str	r3, [sp, #16]
 8015f7e:	9307      	str	r3, [sp, #28]
 8015f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f84:	931a      	str	r3, [sp, #104]	; 0x68
 8015f86:	4654      	mov	r4, sl
 8015f88:	2205      	movs	r2, #5
 8015f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f8e:	4854      	ldr	r0, [pc, #336]	; (80160e0 <_vfiprintf_r+0x220>)
 8015f90:	f7ea f946 	bl	8000220 <memchr>
 8015f94:	9a04      	ldr	r2, [sp, #16]
 8015f96:	b9d8      	cbnz	r0, 8015fd0 <_vfiprintf_r+0x110>
 8015f98:	06d1      	lsls	r1, r2, #27
 8015f9a:	bf44      	itt	mi
 8015f9c:	2320      	movmi	r3, #32
 8015f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fa2:	0713      	lsls	r3, r2, #28
 8015fa4:	bf44      	itt	mi
 8015fa6:	232b      	movmi	r3, #43	; 0x2b
 8015fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fac:	f89a 3000 	ldrb.w	r3, [sl]
 8015fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8015fb2:	d015      	beq.n	8015fe0 <_vfiprintf_r+0x120>
 8015fb4:	9a07      	ldr	r2, [sp, #28]
 8015fb6:	4654      	mov	r4, sl
 8015fb8:	2000      	movs	r0, #0
 8015fba:	f04f 0c0a 	mov.w	ip, #10
 8015fbe:	4621      	mov	r1, r4
 8015fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fc4:	3b30      	subs	r3, #48	; 0x30
 8015fc6:	2b09      	cmp	r3, #9
 8015fc8:	d94d      	bls.n	8016066 <_vfiprintf_r+0x1a6>
 8015fca:	b1b0      	cbz	r0, 8015ffa <_vfiprintf_r+0x13a>
 8015fcc:	9207      	str	r2, [sp, #28]
 8015fce:	e014      	b.n	8015ffa <_vfiprintf_r+0x13a>
 8015fd0:	eba0 0308 	sub.w	r3, r0, r8
 8015fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8015fd8:	4313      	orrs	r3, r2
 8015fda:	9304      	str	r3, [sp, #16]
 8015fdc:	46a2      	mov	sl, r4
 8015fde:	e7d2      	b.n	8015f86 <_vfiprintf_r+0xc6>
 8015fe0:	9b03      	ldr	r3, [sp, #12]
 8015fe2:	1d19      	adds	r1, r3, #4
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	9103      	str	r1, [sp, #12]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	bfbb      	ittet	lt
 8015fec:	425b      	neglt	r3, r3
 8015fee:	f042 0202 	orrlt.w	r2, r2, #2
 8015ff2:	9307      	strge	r3, [sp, #28]
 8015ff4:	9307      	strlt	r3, [sp, #28]
 8015ff6:	bfb8      	it	lt
 8015ff8:	9204      	strlt	r2, [sp, #16]
 8015ffa:	7823      	ldrb	r3, [r4, #0]
 8015ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8015ffe:	d10c      	bne.n	801601a <_vfiprintf_r+0x15a>
 8016000:	7863      	ldrb	r3, [r4, #1]
 8016002:	2b2a      	cmp	r3, #42	; 0x2a
 8016004:	d134      	bne.n	8016070 <_vfiprintf_r+0x1b0>
 8016006:	9b03      	ldr	r3, [sp, #12]
 8016008:	1d1a      	adds	r2, r3, #4
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	9203      	str	r2, [sp, #12]
 801600e:	2b00      	cmp	r3, #0
 8016010:	bfb8      	it	lt
 8016012:	f04f 33ff 	movlt.w	r3, #4294967295
 8016016:	3402      	adds	r4, #2
 8016018:	9305      	str	r3, [sp, #20]
 801601a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80160f0 <_vfiprintf_r+0x230>
 801601e:	7821      	ldrb	r1, [r4, #0]
 8016020:	2203      	movs	r2, #3
 8016022:	4650      	mov	r0, sl
 8016024:	f7ea f8fc 	bl	8000220 <memchr>
 8016028:	b138      	cbz	r0, 801603a <_vfiprintf_r+0x17a>
 801602a:	9b04      	ldr	r3, [sp, #16]
 801602c:	eba0 000a 	sub.w	r0, r0, sl
 8016030:	2240      	movs	r2, #64	; 0x40
 8016032:	4082      	lsls	r2, r0
 8016034:	4313      	orrs	r3, r2
 8016036:	3401      	adds	r4, #1
 8016038:	9304      	str	r3, [sp, #16]
 801603a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801603e:	4829      	ldr	r0, [pc, #164]	; (80160e4 <_vfiprintf_r+0x224>)
 8016040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016044:	2206      	movs	r2, #6
 8016046:	f7ea f8eb 	bl	8000220 <memchr>
 801604a:	2800      	cmp	r0, #0
 801604c:	d03f      	beq.n	80160ce <_vfiprintf_r+0x20e>
 801604e:	4b26      	ldr	r3, [pc, #152]	; (80160e8 <_vfiprintf_r+0x228>)
 8016050:	bb1b      	cbnz	r3, 801609a <_vfiprintf_r+0x1da>
 8016052:	9b03      	ldr	r3, [sp, #12]
 8016054:	3307      	adds	r3, #7
 8016056:	f023 0307 	bic.w	r3, r3, #7
 801605a:	3308      	adds	r3, #8
 801605c:	9303      	str	r3, [sp, #12]
 801605e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016060:	443b      	add	r3, r7
 8016062:	9309      	str	r3, [sp, #36]	; 0x24
 8016064:	e768      	b.n	8015f38 <_vfiprintf_r+0x78>
 8016066:	fb0c 3202 	mla	r2, ip, r2, r3
 801606a:	460c      	mov	r4, r1
 801606c:	2001      	movs	r0, #1
 801606e:	e7a6      	b.n	8015fbe <_vfiprintf_r+0xfe>
 8016070:	2300      	movs	r3, #0
 8016072:	3401      	adds	r4, #1
 8016074:	9305      	str	r3, [sp, #20]
 8016076:	4619      	mov	r1, r3
 8016078:	f04f 0c0a 	mov.w	ip, #10
 801607c:	4620      	mov	r0, r4
 801607e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016082:	3a30      	subs	r2, #48	; 0x30
 8016084:	2a09      	cmp	r2, #9
 8016086:	d903      	bls.n	8016090 <_vfiprintf_r+0x1d0>
 8016088:	2b00      	cmp	r3, #0
 801608a:	d0c6      	beq.n	801601a <_vfiprintf_r+0x15a>
 801608c:	9105      	str	r1, [sp, #20]
 801608e:	e7c4      	b.n	801601a <_vfiprintf_r+0x15a>
 8016090:	fb0c 2101 	mla	r1, ip, r1, r2
 8016094:	4604      	mov	r4, r0
 8016096:	2301      	movs	r3, #1
 8016098:	e7f0      	b.n	801607c <_vfiprintf_r+0x1bc>
 801609a:	ab03      	add	r3, sp, #12
 801609c:	9300      	str	r3, [sp, #0]
 801609e:	462a      	mov	r2, r5
 80160a0:	4b12      	ldr	r3, [pc, #72]	; (80160ec <_vfiprintf_r+0x22c>)
 80160a2:	a904      	add	r1, sp, #16
 80160a4:	4630      	mov	r0, r6
 80160a6:	f7fc fb4d 	bl	8012744 <_printf_float>
 80160aa:	4607      	mov	r7, r0
 80160ac:	1c78      	adds	r0, r7, #1
 80160ae:	d1d6      	bne.n	801605e <_vfiprintf_r+0x19e>
 80160b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160b2:	07d9      	lsls	r1, r3, #31
 80160b4:	d405      	bmi.n	80160c2 <_vfiprintf_r+0x202>
 80160b6:	89ab      	ldrh	r3, [r5, #12]
 80160b8:	059a      	lsls	r2, r3, #22
 80160ba:	d402      	bmi.n	80160c2 <_vfiprintf_r+0x202>
 80160bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160be:	f7fd fb5d 	bl	801377c <__retarget_lock_release_recursive>
 80160c2:	89ab      	ldrh	r3, [r5, #12]
 80160c4:	065b      	lsls	r3, r3, #25
 80160c6:	f53f af1d 	bmi.w	8015f04 <_vfiprintf_r+0x44>
 80160ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80160cc:	e71c      	b.n	8015f08 <_vfiprintf_r+0x48>
 80160ce:	ab03      	add	r3, sp, #12
 80160d0:	9300      	str	r3, [sp, #0]
 80160d2:	462a      	mov	r2, r5
 80160d4:	4b05      	ldr	r3, [pc, #20]	; (80160ec <_vfiprintf_r+0x22c>)
 80160d6:	a904      	add	r1, sp, #16
 80160d8:	4630      	mov	r0, r6
 80160da:	f7fc fdd7 	bl	8012c8c <_printf_i>
 80160de:	e7e4      	b.n	80160aa <_vfiprintf_r+0x1ea>
 80160e0:	08018191 	.word	0x08018191
 80160e4:	0801819b 	.word	0x0801819b
 80160e8:	08012745 	.word	0x08012745
 80160ec:	08015e9b 	.word	0x08015e9b
 80160f0:	08018197 	.word	0x08018197

080160f4 <__sflush_r>:
 80160f4:	898a      	ldrh	r2, [r1, #12]
 80160f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160fa:	4605      	mov	r5, r0
 80160fc:	0710      	lsls	r0, r2, #28
 80160fe:	460c      	mov	r4, r1
 8016100:	d458      	bmi.n	80161b4 <__sflush_r+0xc0>
 8016102:	684b      	ldr	r3, [r1, #4]
 8016104:	2b00      	cmp	r3, #0
 8016106:	dc05      	bgt.n	8016114 <__sflush_r+0x20>
 8016108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801610a:	2b00      	cmp	r3, #0
 801610c:	dc02      	bgt.n	8016114 <__sflush_r+0x20>
 801610e:	2000      	movs	r0, #0
 8016110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016116:	2e00      	cmp	r6, #0
 8016118:	d0f9      	beq.n	801610e <__sflush_r+0x1a>
 801611a:	2300      	movs	r3, #0
 801611c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016120:	682f      	ldr	r7, [r5, #0]
 8016122:	6a21      	ldr	r1, [r4, #32]
 8016124:	602b      	str	r3, [r5, #0]
 8016126:	d032      	beq.n	801618e <__sflush_r+0x9a>
 8016128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801612a:	89a3      	ldrh	r3, [r4, #12]
 801612c:	075a      	lsls	r2, r3, #29
 801612e:	d505      	bpl.n	801613c <__sflush_r+0x48>
 8016130:	6863      	ldr	r3, [r4, #4]
 8016132:	1ac0      	subs	r0, r0, r3
 8016134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016136:	b10b      	cbz	r3, 801613c <__sflush_r+0x48>
 8016138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801613a:	1ac0      	subs	r0, r0, r3
 801613c:	2300      	movs	r3, #0
 801613e:	4602      	mov	r2, r0
 8016140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016142:	6a21      	ldr	r1, [r4, #32]
 8016144:	4628      	mov	r0, r5
 8016146:	47b0      	blx	r6
 8016148:	1c43      	adds	r3, r0, #1
 801614a:	89a3      	ldrh	r3, [r4, #12]
 801614c:	d106      	bne.n	801615c <__sflush_r+0x68>
 801614e:	6829      	ldr	r1, [r5, #0]
 8016150:	291d      	cmp	r1, #29
 8016152:	d82b      	bhi.n	80161ac <__sflush_r+0xb8>
 8016154:	4a29      	ldr	r2, [pc, #164]	; (80161fc <__sflush_r+0x108>)
 8016156:	410a      	asrs	r2, r1
 8016158:	07d6      	lsls	r6, r2, #31
 801615a:	d427      	bmi.n	80161ac <__sflush_r+0xb8>
 801615c:	2200      	movs	r2, #0
 801615e:	6062      	str	r2, [r4, #4]
 8016160:	04d9      	lsls	r1, r3, #19
 8016162:	6922      	ldr	r2, [r4, #16]
 8016164:	6022      	str	r2, [r4, #0]
 8016166:	d504      	bpl.n	8016172 <__sflush_r+0x7e>
 8016168:	1c42      	adds	r2, r0, #1
 801616a:	d101      	bne.n	8016170 <__sflush_r+0x7c>
 801616c:	682b      	ldr	r3, [r5, #0]
 801616e:	b903      	cbnz	r3, 8016172 <__sflush_r+0x7e>
 8016170:	6560      	str	r0, [r4, #84]	; 0x54
 8016172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016174:	602f      	str	r7, [r5, #0]
 8016176:	2900      	cmp	r1, #0
 8016178:	d0c9      	beq.n	801610e <__sflush_r+0x1a>
 801617a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801617e:	4299      	cmp	r1, r3
 8016180:	d002      	beq.n	8016188 <__sflush_r+0x94>
 8016182:	4628      	mov	r0, r5
 8016184:	f7fe f98a 	bl	801449c <_free_r>
 8016188:	2000      	movs	r0, #0
 801618a:	6360      	str	r0, [r4, #52]	; 0x34
 801618c:	e7c0      	b.n	8016110 <__sflush_r+0x1c>
 801618e:	2301      	movs	r3, #1
 8016190:	4628      	mov	r0, r5
 8016192:	47b0      	blx	r6
 8016194:	1c41      	adds	r1, r0, #1
 8016196:	d1c8      	bne.n	801612a <__sflush_r+0x36>
 8016198:	682b      	ldr	r3, [r5, #0]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d0c5      	beq.n	801612a <__sflush_r+0x36>
 801619e:	2b1d      	cmp	r3, #29
 80161a0:	d001      	beq.n	80161a6 <__sflush_r+0xb2>
 80161a2:	2b16      	cmp	r3, #22
 80161a4:	d101      	bne.n	80161aa <__sflush_r+0xb6>
 80161a6:	602f      	str	r7, [r5, #0]
 80161a8:	e7b1      	b.n	801610e <__sflush_r+0x1a>
 80161aa:	89a3      	ldrh	r3, [r4, #12]
 80161ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161b0:	81a3      	strh	r3, [r4, #12]
 80161b2:	e7ad      	b.n	8016110 <__sflush_r+0x1c>
 80161b4:	690f      	ldr	r7, [r1, #16]
 80161b6:	2f00      	cmp	r7, #0
 80161b8:	d0a9      	beq.n	801610e <__sflush_r+0x1a>
 80161ba:	0793      	lsls	r3, r2, #30
 80161bc:	680e      	ldr	r6, [r1, #0]
 80161be:	bf08      	it	eq
 80161c0:	694b      	ldreq	r3, [r1, #20]
 80161c2:	600f      	str	r7, [r1, #0]
 80161c4:	bf18      	it	ne
 80161c6:	2300      	movne	r3, #0
 80161c8:	eba6 0807 	sub.w	r8, r6, r7
 80161cc:	608b      	str	r3, [r1, #8]
 80161ce:	f1b8 0f00 	cmp.w	r8, #0
 80161d2:	dd9c      	ble.n	801610e <__sflush_r+0x1a>
 80161d4:	6a21      	ldr	r1, [r4, #32]
 80161d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80161d8:	4643      	mov	r3, r8
 80161da:	463a      	mov	r2, r7
 80161dc:	4628      	mov	r0, r5
 80161de:	47b0      	blx	r6
 80161e0:	2800      	cmp	r0, #0
 80161e2:	dc06      	bgt.n	80161f2 <__sflush_r+0xfe>
 80161e4:	89a3      	ldrh	r3, [r4, #12]
 80161e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161ea:	81a3      	strh	r3, [r4, #12]
 80161ec:	f04f 30ff 	mov.w	r0, #4294967295
 80161f0:	e78e      	b.n	8016110 <__sflush_r+0x1c>
 80161f2:	4407      	add	r7, r0
 80161f4:	eba8 0800 	sub.w	r8, r8, r0
 80161f8:	e7e9      	b.n	80161ce <__sflush_r+0xda>
 80161fa:	bf00      	nop
 80161fc:	dfbffffe 	.word	0xdfbffffe

08016200 <_fflush_r>:
 8016200:	b538      	push	{r3, r4, r5, lr}
 8016202:	690b      	ldr	r3, [r1, #16]
 8016204:	4605      	mov	r5, r0
 8016206:	460c      	mov	r4, r1
 8016208:	b913      	cbnz	r3, 8016210 <_fflush_r+0x10>
 801620a:	2500      	movs	r5, #0
 801620c:	4628      	mov	r0, r5
 801620e:	bd38      	pop	{r3, r4, r5, pc}
 8016210:	b118      	cbz	r0, 801621a <_fflush_r+0x1a>
 8016212:	6a03      	ldr	r3, [r0, #32]
 8016214:	b90b      	cbnz	r3, 801621a <_fflush_r+0x1a>
 8016216:	f7fd f8f7 	bl	8013408 <__sinit>
 801621a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d0f3      	beq.n	801620a <_fflush_r+0xa>
 8016222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016224:	07d0      	lsls	r0, r2, #31
 8016226:	d404      	bmi.n	8016232 <_fflush_r+0x32>
 8016228:	0599      	lsls	r1, r3, #22
 801622a:	d402      	bmi.n	8016232 <_fflush_r+0x32>
 801622c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801622e:	f7fd faa4 	bl	801377a <__retarget_lock_acquire_recursive>
 8016232:	4628      	mov	r0, r5
 8016234:	4621      	mov	r1, r4
 8016236:	f7ff ff5d 	bl	80160f4 <__sflush_r>
 801623a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801623c:	07da      	lsls	r2, r3, #31
 801623e:	4605      	mov	r5, r0
 8016240:	d4e4      	bmi.n	801620c <_fflush_r+0xc>
 8016242:	89a3      	ldrh	r3, [r4, #12]
 8016244:	059b      	lsls	r3, r3, #22
 8016246:	d4e1      	bmi.n	801620c <_fflush_r+0xc>
 8016248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801624a:	f7fd fa97 	bl	801377c <__retarget_lock_release_recursive>
 801624e:	e7dd      	b.n	801620c <_fflush_r+0xc>

08016250 <__swbuf_r>:
 8016250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016252:	460e      	mov	r6, r1
 8016254:	4614      	mov	r4, r2
 8016256:	4605      	mov	r5, r0
 8016258:	b118      	cbz	r0, 8016262 <__swbuf_r+0x12>
 801625a:	6a03      	ldr	r3, [r0, #32]
 801625c:	b90b      	cbnz	r3, 8016262 <__swbuf_r+0x12>
 801625e:	f7fd f8d3 	bl	8013408 <__sinit>
 8016262:	69a3      	ldr	r3, [r4, #24]
 8016264:	60a3      	str	r3, [r4, #8]
 8016266:	89a3      	ldrh	r3, [r4, #12]
 8016268:	071a      	lsls	r2, r3, #28
 801626a:	d525      	bpl.n	80162b8 <__swbuf_r+0x68>
 801626c:	6923      	ldr	r3, [r4, #16]
 801626e:	b31b      	cbz	r3, 80162b8 <__swbuf_r+0x68>
 8016270:	6823      	ldr	r3, [r4, #0]
 8016272:	6922      	ldr	r2, [r4, #16]
 8016274:	1a98      	subs	r0, r3, r2
 8016276:	6963      	ldr	r3, [r4, #20]
 8016278:	b2f6      	uxtb	r6, r6
 801627a:	4283      	cmp	r3, r0
 801627c:	4637      	mov	r7, r6
 801627e:	dc04      	bgt.n	801628a <__swbuf_r+0x3a>
 8016280:	4621      	mov	r1, r4
 8016282:	4628      	mov	r0, r5
 8016284:	f7ff ffbc 	bl	8016200 <_fflush_r>
 8016288:	b9e0      	cbnz	r0, 80162c4 <__swbuf_r+0x74>
 801628a:	68a3      	ldr	r3, [r4, #8]
 801628c:	3b01      	subs	r3, #1
 801628e:	60a3      	str	r3, [r4, #8]
 8016290:	6823      	ldr	r3, [r4, #0]
 8016292:	1c5a      	adds	r2, r3, #1
 8016294:	6022      	str	r2, [r4, #0]
 8016296:	701e      	strb	r6, [r3, #0]
 8016298:	6962      	ldr	r2, [r4, #20]
 801629a:	1c43      	adds	r3, r0, #1
 801629c:	429a      	cmp	r2, r3
 801629e:	d004      	beq.n	80162aa <__swbuf_r+0x5a>
 80162a0:	89a3      	ldrh	r3, [r4, #12]
 80162a2:	07db      	lsls	r3, r3, #31
 80162a4:	d506      	bpl.n	80162b4 <__swbuf_r+0x64>
 80162a6:	2e0a      	cmp	r6, #10
 80162a8:	d104      	bne.n	80162b4 <__swbuf_r+0x64>
 80162aa:	4621      	mov	r1, r4
 80162ac:	4628      	mov	r0, r5
 80162ae:	f7ff ffa7 	bl	8016200 <_fflush_r>
 80162b2:	b938      	cbnz	r0, 80162c4 <__swbuf_r+0x74>
 80162b4:	4638      	mov	r0, r7
 80162b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162b8:	4621      	mov	r1, r4
 80162ba:	4628      	mov	r0, r5
 80162bc:	f000 f806 	bl	80162cc <__swsetup_r>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d0d5      	beq.n	8016270 <__swbuf_r+0x20>
 80162c4:	f04f 37ff 	mov.w	r7, #4294967295
 80162c8:	e7f4      	b.n	80162b4 <__swbuf_r+0x64>
	...

080162cc <__swsetup_r>:
 80162cc:	b538      	push	{r3, r4, r5, lr}
 80162ce:	4b2a      	ldr	r3, [pc, #168]	; (8016378 <__swsetup_r+0xac>)
 80162d0:	4605      	mov	r5, r0
 80162d2:	6818      	ldr	r0, [r3, #0]
 80162d4:	460c      	mov	r4, r1
 80162d6:	b118      	cbz	r0, 80162e0 <__swsetup_r+0x14>
 80162d8:	6a03      	ldr	r3, [r0, #32]
 80162da:	b90b      	cbnz	r3, 80162e0 <__swsetup_r+0x14>
 80162dc:	f7fd f894 	bl	8013408 <__sinit>
 80162e0:	89a3      	ldrh	r3, [r4, #12]
 80162e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80162e6:	0718      	lsls	r0, r3, #28
 80162e8:	d422      	bmi.n	8016330 <__swsetup_r+0x64>
 80162ea:	06d9      	lsls	r1, r3, #27
 80162ec:	d407      	bmi.n	80162fe <__swsetup_r+0x32>
 80162ee:	2309      	movs	r3, #9
 80162f0:	602b      	str	r3, [r5, #0]
 80162f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80162f6:	81a3      	strh	r3, [r4, #12]
 80162f8:	f04f 30ff 	mov.w	r0, #4294967295
 80162fc:	e034      	b.n	8016368 <__swsetup_r+0x9c>
 80162fe:	0758      	lsls	r0, r3, #29
 8016300:	d512      	bpl.n	8016328 <__swsetup_r+0x5c>
 8016302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016304:	b141      	cbz	r1, 8016318 <__swsetup_r+0x4c>
 8016306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801630a:	4299      	cmp	r1, r3
 801630c:	d002      	beq.n	8016314 <__swsetup_r+0x48>
 801630e:	4628      	mov	r0, r5
 8016310:	f7fe f8c4 	bl	801449c <_free_r>
 8016314:	2300      	movs	r3, #0
 8016316:	6363      	str	r3, [r4, #52]	; 0x34
 8016318:	89a3      	ldrh	r3, [r4, #12]
 801631a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801631e:	81a3      	strh	r3, [r4, #12]
 8016320:	2300      	movs	r3, #0
 8016322:	6063      	str	r3, [r4, #4]
 8016324:	6923      	ldr	r3, [r4, #16]
 8016326:	6023      	str	r3, [r4, #0]
 8016328:	89a3      	ldrh	r3, [r4, #12]
 801632a:	f043 0308 	orr.w	r3, r3, #8
 801632e:	81a3      	strh	r3, [r4, #12]
 8016330:	6923      	ldr	r3, [r4, #16]
 8016332:	b94b      	cbnz	r3, 8016348 <__swsetup_r+0x7c>
 8016334:	89a3      	ldrh	r3, [r4, #12]
 8016336:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801633a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801633e:	d003      	beq.n	8016348 <__swsetup_r+0x7c>
 8016340:	4621      	mov	r1, r4
 8016342:	4628      	mov	r0, r5
 8016344:	f000 fc15 	bl	8016b72 <__smakebuf_r>
 8016348:	89a0      	ldrh	r0, [r4, #12]
 801634a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801634e:	f010 0301 	ands.w	r3, r0, #1
 8016352:	d00a      	beq.n	801636a <__swsetup_r+0x9e>
 8016354:	2300      	movs	r3, #0
 8016356:	60a3      	str	r3, [r4, #8]
 8016358:	6963      	ldr	r3, [r4, #20]
 801635a:	425b      	negs	r3, r3
 801635c:	61a3      	str	r3, [r4, #24]
 801635e:	6923      	ldr	r3, [r4, #16]
 8016360:	b943      	cbnz	r3, 8016374 <__swsetup_r+0xa8>
 8016362:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016366:	d1c4      	bne.n	80162f2 <__swsetup_r+0x26>
 8016368:	bd38      	pop	{r3, r4, r5, pc}
 801636a:	0781      	lsls	r1, r0, #30
 801636c:	bf58      	it	pl
 801636e:	6963      	ldrpl	r3, [r4, #20]
 8016370:	60a3      	str	r3, [r4, #8]
 8016372:	e7f4      	b.n	801635e <__swsetup_r+0x92>
 8016374:	2000      	movs	r0, #0
 8016376:	e7f7      	b.n	8016368 <__swsetup_r+0x9c>
 8016378:	200000d0 	.word	0x200000d0

0801637c <strncmp>:
 801637c:	b510      	push	{r4, lr}
 801637e:	b16a      	cbz	r2, 801639c <strncmp+0x20>
 8016380:	3901      	subs	r1, #1
 8016382:	1884      	adds	r4, r0, r2
 8016384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016388:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801638c:	429a      	cmp	r2, r3
 801638e:	d103      	bne.n	8016398 <strncmp+0x1c>
 8016390:	42a0      	cmp	r0, r4
 8016392:	d001      	beq.n	8016398 <strncmp+0x1c>
 8016394:	2a00      	cmp	r2, #0
 8016396:	d1f5      	bne.n	8016384 <strncmp+0x8>
 8016398:	1ad0      	subs	r0, r2, r3
 801639a:	bd10      	pop	{r4, pc}
 801639c:	4610      	mov	r0, r2
 801639e:	e7fc      	b.n	801639a <strncmp+0x1e>

080163a0 <nan>:
 80163a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80163a8 <nan+0x8>
 80163a4:	4770      	bx	lr
 80163a6:	bf00      	nop
 80163a8:	00000000 	.word	0x00000000
 80163ac:	7ff80000 	.word	0x7ff80000

080163b0 <_calloc_r>:
 80163b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163b2:	fba1 2402 	umull	r2, r4, r1, r2
 80163b6:	b94c      	cbnz	r4, 80163cc <_calloc_r+0x1c>
 80163b8:	4611      	mov	r1, r2
 80163ba:	9201      	str	r2, [sp, #4]
 80163bc:	f7fc f896 	bl	80124ec <_malloc_r>
 80163c0:	9a01      	ldr	r2, [sp, #4]
 80163c2:	4605      	mov	r5, r0
 80163c4:	b930      	cbnz	r0, 80163d4 <_calloc_r+0x24>
 80163c6:	4628      	mov	r0, r5
 80163c8:	b003      	add	sp, #12
 80163ca:	bd30      	pop	{r4, r5, pc}
 80163cc:	220c      	movs	r2, #12
 80163ce:	6002      	str	r2, [r0, #0]
 80163d0:	2500      	movs	r5, #0
 80163d2:	e7f8      	b.n	80163c6 <_calloc_r+0x16>
 80163d4:	4621      	mov	r1, r4
 80163d6:	f7fd f8ec 	bl	80135b2 <memset>
 80163da:	e7f4      	b.n	80163c6 <_calloc_r+0x16>

080163dc <rshift>:
 80163dc:	6903      	ldr	r3, [r0, #16]
 80163de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80163e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80163ea:	f100 0414 	add.w	r4, r0, #20
 80163ee:	dd45      	ble.n	801647c <rshift+0xa0>
 80163f0:	f011 011f 	ands.w	r1, r1, #31
 80163f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80163f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80163fc:	d10c      	bne.n	8016418 <rshift+0x3c>
 80163fe:	f100 0710 	add.w	r7, r0, #16
 8016402:	4629      	mov	r1, r5
 8016404:	42b1      	cmp	r1, r6
 8016406:	d334      	bcc.n	8016472 <rshift+0x96>
 8016408:	1a9b      	subs	r3, r3, r2
 801640a:	009b      	lsls	r3, r3, #2
 801640c:	1eea      	subs	r2, r5, #3
 801640e:	4296      	cmp	r6, r2
 8016410:	bf38      	it	cc
 8016412:	2300      	movcc	r3, #0
 8016414:	4423      	add	r3, r4
 8016416:	e015      	b.n	8016444 <rshift+0x68>
 8016418:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801641c:	f1c1 0820 	rsb	r8, r1, #32
 8016420:	40cf      	lsrs	r7, r1
 8016422:	f105 0e04 	add.w	lr, r5, #4
 8016426:	46a1      	mov	r9, r4
 8016428:	4576      	cmp	r6, lr
 801642a:	46f4      	mov	ip, lr
 801642c:	d815      	bhi.n	801645a <rshift+0x7e>
 801642e:	1a9a      	subs	r2, r3, r2
 8016430:	0092      	lsls	r2, r2, #2
 8016432:	3a04      	subs	r2, #4
 8016434:	3501      	adds	r5, #1
 8016436:	42ae      	cmp	r6, r5
 8016438:	bf38      	it	cc
 801643a:	2200      	movcc	r2, #0
 801643c:	18a3      	adds	r3, r4, r2
 801643e:	50a7      	str	r7, [r4, r2]
 8016440:	b107      	cbz	r7, 8016444 <rshift+0x68>
 8016442:	3304      	adds	r3, #4
 8016444:	1b1a      	subs	r2, r3, r4
 8016446:	42a3      	cmp	r3, r4
 8016448:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801644c:	bf08      	it	eq
 801644e:	2300      	moveq	r3, #0
 8016450:	6102      	str	r2, [r0, #16]
 8016452:	bf08      	it	eq
 8016454:	6143      	streq	r3, [r0, #20]
 8016456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801645a:	f8dc c000 	ldr.w	ip, [ip]
 801645e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016462:	ea4c 0707 	orr.w	r7, ip, r7
 8016466:	f849 7b04 	str.w	r7, [r9], #4
 801646a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801646e:	40cf      	lsrs	r7, r1
 8016470:	e7da      	b.n	8016428 <rshift+0x4c>
 8016472:	f851 cb04 	ldr.w	ip, [r1], #4
 8016476:	f847 cf04 	str.w	ip, [r7, #4]!
 801647a:	e7c3      	b.n	8016404 <rshift+0x28>
 801647c:	4623      	mov	r3, r4
 801647e:	e7e1      	b.n	8016444 <rshift+0x68>

08016480 <__hexdig_fun>:
 8016480:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016484:	2b09      	cmp	r3, #9
 8016486:	d802      	bhi.n	801648e <__hexdig_fun+0xe>
 8016488:	3820      	subs	r0, #32
 801648a:	b2c0      	uxtb	r0, r0
 801648c:	4770      	bx	lr
 801648e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016492:	2b05      	cmp	r3, #5
 8016494:	d801      	bhi.n	801649a <__hexdig_fun+0x1a>
 8016496:	3847      	subs	r0, #71	; 0x47
 8016498:	e7f7      	b.n	801648a <__hexdig_fun+0xa>
 801649a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801649e:	2b05      	cmp	r3, #5
 80164a0:	d801      	bhi.n	80164a6 <__hexdig_fun+0x26>
 80164a2:	3827      	subs	r0, #39	; 0x27
 80164a4:	e7f1      	b.n	801648a <__hexdig_fun+0xa>
 80164a6:	2000      	movs	r0, #0
 80164a8:	4770      	bx	lr
	...

080164ac <__gethex>:
 80164ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b0:	4617      	mov	r7, r2
 80164b2:	680a      	ldr	r2, [r1, #0]
 80164b4:	b085      	sub	sp, #20
 80164b6:	f102 0b02 	add.w	fp, r2, #2
 80164ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80164be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80164c2:	4681      	mov	r9, r0
 80164c4:	468a      	mov	sl, r1
 80164c6:	9302      	str	r3, [sp, #8]
 80164c8:	32fe      	adds	r2, #254	; 0xfe
 80164ca:	eb02 030b 	add.w	r3, r2, fp
 80164ce:	46d8      	mov	r8, fp
 80164d0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80164d4:	9301      	str	r3, [sp, #4]
 80164d6:	2830      	cmp	r0, #48	; 0x30
 80164d8:	d0f7      	beq.n	80164ca <__gethex+0x1e>
 80164da:	f7ff ffd1 	bl	8016480 <__hexdig_fun>
 80164de:	4604      	mov	r4, r0
 80164e0:	2800      	cmp	r0, #0
 80164e2:	d138      	bne.n	8016556 <__gethex+0xaa>
 80164e4:	49a7      	ldr	r1, [pc, #668]	; (8016784 <__gethex+0x2d8>)
 80164e6:	2201      	movs	r2, #1
 80164e8:	4640      	mov	r0, r8
 80164ea:	f7ff ff47 	bl	801637c <strncmp>
 80164ee:	4606      	mov	r6, r0
 80164f0:	2800      	cmp	r0, #0
 80164f2:	d169      	bne.n	80165c8 <__gethex+0x11c>
 80164f4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80164f8:	465d      	mov	r5, fp
 80164fa:	f7ff ffc1 	bl	8016480 <__hexdig_fun>
 80164fe:	2800      	cmp	r0, #0
 8016500:	d064      	beq.n	80165cc <__gethex+0x120>
 8016502:	465a      	mov	r2, fp
 8016504:	7810      	ldrb	r0, [r2, #0]
 8016506:	2830      	cmp	r0, #48	; 0x30
 8016508:	4690      	mov	r8, r2
 801650a:	f102 0201 	add.w	r2, r2, #1
 801650e:	d0f9      	beq.n	8016504 <__gethex+0x58>
 8016510:	f7ff ffb6 	bl	8016480 <__hexdig_fun>
 8016514:	2301      	movs	r3, #1
 8016516:	fab0 f480 	clz	r4, r0
 801651a:	0964      	lsrs	r4, r4, #5
 801651c:	465e      	mov	r6, fp
 801651e:	9301      	str	r3, [sp, #4]
 8016520:	4642      	mov	r2, r8
 8016522:	4615      	mov	r5, r2
 8016524:	3201      	adds	r2, #1
 8016526:	7828      	ldrb	r0, [r5, #0]
 8016528:	f7ff ffaa 	bl	8016480 <__hexdig_fun>
 801652c:	2800      	cmp	r0, #0
 801652e:	d1f8      	bne.n	8016522 <__gethex+0x76>
 8016530:	4994      	ldr	r1, [pc, #592]	; (8016784 <__gethex+0x2d8>)
 8016532:	2201      	movs	r2, #1
 8016534:	4628      	mov	r0, r5
 8016536:	f7ff ff21 	bl	801637c <strncmp>
 801653a:	b978      	cbnz	r0, 801655c <__gethex+0xb0>
 801653c:	b946      	cbnz	r6, 8016550 <__gethex+0xa4>
 801653e:	1c6e      	adds	r6, r5, #1
 8016540:	4632      	mov	r2, r6
 8016542:	4615      	mov	r5, r2
 8016544:	3201      	adds	r2, #1
 8016546:	7828      	ldrb	r0, [r5, #0]
 8016548:	f7ff ff9a 	bl	8016480 <__hexdig_fun>
 801654c:	2800      	cmp	r0, #0
 801654e:	d1f8      	bne.n	8016542 <__gethex+0x96>
 8016550:	1b73      	subs	r3, r6, r5
 8016552:	009e      	lsls	r6, r3, #2
 8016554:	e004      	b.n	8016560 <__gethex+0xb4>
 8016556:	2400      	movs	r4, #0
 8016558:	4626      	mov	r6, r4
 801655a:	e7e1      	b.n	8016520 <__gethex+0x74>
 801655c:	2e00      	cmp	r6, #0
 801655e:	d1f7      	bne.n	8016550 <__gethex+0xa4>
 8016560:	782b      	ldrb	r3, [r5, #0]
 8016562:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016566:	2b50      	cmp	r3, #80	; 0x50
 8016568:	d13d      	bne.n	80165e6 <__gethex+0x13a>
 801656a:	786b      	ldrb	r3, [r5, #1]
 801656c:	2b2b      	cmp	r3, #43	; 0x2b
 801656e:	d02f      	beq.n	80165d0 <__gethex+0x124>
 8016570:	2b2d      	cmp	r3, #45	; 0x2d
 8016572:	d031      	beq.n	80165d8 <__gethex+0x12c>
 8016574:	1c69      	adds	r1, r5, #1
 8016576:	f04f 0b00 	mov.w	fp, #0
 801657a:	7808      	ldrb	r0, [r1, #0]
 801657c:	f7ff ff80 	bl	8016480 <__hexdig_fun>
 8016580:	1e42      	subs	r2, r0, #1
 8016582:	b2d2      	uxtb	r2, r2
 8016584:	2a18      	cmp	r2, #24
 8016586:	d82e      	bhi.n	80165e6 <__gethex+0x13a>
 8016588:	f1a0 0210 	sub.w	r2, r0, #16
 801658c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016590:	f7ff ff76 	bl	8016480 <__hexdig_fun>
 8016594:	f100 3cff 	add.w	ip, r0, #4294967295
 8016598:	fa5f fc8c 	uxtb.w	ip, ip
 801659c:	f1bc 0f18 	cmp.w	ip, #24
 80165a0:	d91d      	bls.n	80165de <__gethex+0x132>
 80165a2:	f1bb 0f00 	cmp.w	fp, #0
 80165a6:	d000      	beq.n	80165aa <__gethex+0xfe>
 80165a8:	4252      	negs	r2, r2
 80165aa:	4416      	add	r6, r2
 80165ac:	f8ca 1000 	str.w	r1, [sl]
 80165b0:	b1dc      	cbz	r4, 80165ea <__gethex+0x13e>
 80165b2:	9b01      	ldr	r3, [sp, #4]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	bf14      	ite	ne
 80165b8:	f04f 0800 	movne.w	r8, #0
 80165bc:	f04f 0806 	moveq.w	r8, #6
 80165c0:	4640      	mov	r0, r8
 80165c2:	b005      	add	sp, #20
 80165c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c8:	4645      	mov	r5, r8
 80165ca:	4626      	mov	r6, r4
 80165cc:	2401      	movs	r4, #1
 80165ce:	e7c7      	b.n	8016560 <__gethex+0xb4>
 80165d0:	f04f 0b00 	mov.w	fp, #0
 80165d4:	1ca9      	adds	r1, r5, #2
 80165d6:	e7d0      	b.n	801657a <__gethex+0xce>
 80165d8:	f04f 0b01 	mov.w	fp, #1
 80165dc:	e7fa      	b.n	80165d4 <__gethex+0x128>
 80165de:	230a      	movs	r3, #10
 80165e0:	fb03 0002 	mla	r0, r3, r2, r0
 80165e4:	e7d0      	b.n	8016588 <__gethex+0xdc>
 80165e6:	4629      	mov	r1, r5
 80165e8:	e7e0      	b.n	80165ac <__gethex+0x100>
 80165ea:	eba5 0308 	sub.w	r3, r5, r8
 80165ee:	3b01      	subs	r3, #1
 80165f0:	4621      	mov	r1, r4
 80165f2:	2b07      	cmp	r3, #7
 80165f4:	dc0a      	bgt.n	801660c <__gethex+0x160>
 80165f6:	4648      	mov	r0, r9
 80165f8:	f7fd ff9c 	bl	8014534 <_Balloc>
 80165fc:	4604      	mov	r4, r0
 80165fe:	b940      	cbnz	r0, 8016612 <__gethex+0x166>
 8016600:	4b61      	ldr	r3, [pc, #388]	; (8016788 <__gethex+0x2dc>)
 8016602:	4602      	mov	r2, r0
 8016604:	21e4      	movs	r1, #228	; 0xe4
 8016606:	4861      	ldr	r0, [pc, #388]	; (801678c <__gethex+0x2e0>)
 8016608:	f7fb ff10 	bl	801242c <__assert_func>
 801660c:	3101      	adds	r1, #1
 801660e:	105b      	asrs	r3, r3, #1
 8016610:	e7ef      	b.n	80165f2 <__gethex+0x146>
 8016612:	f100 0a14 	add.w	sl, r0, #20
 8016616:	2300      	movs	r3, #0
 8016618:	495a      	ldr	r1, [pc, #360]	; (8016784 <__gethex+0x2d8>)
 801661a:	f8cd a004 	str.w	sl, [sp, #4]
 801661e:	469b      	mov	fp, r3
 8016620:	45a8      	cmp	r8, r5
 8016622:	d342      	bcc.n	80166aa <__gethex+0x1fe>
 8016624:	9801      	ldr	r0, [sp, #4]
 8016626:	f840 bb04 	str.w	fp, [r0], #4
 801662a:	eba0 000a 	sub.w	r0, r0, sl
 801662e:	1080      	asrs	r0, r0, #2
 8016630:	6120      	str	r0, [r4, #16]
 8016632:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016636:	4658      	mov	r0, fp
 8016638:	f7fe f86e 	bl	8014718 <__hi0bits>
 801663c:	683d      	ldr	r5, [r7, #0]
 801663e:	eba8 0000 	sub.w	r0, r8, r0
 8016642:	42a8      	cmp	r0, r5
 8016644:	dd59      	ble.n	80166fa <__gethex+0x24e>
 8016646:	eba0 0805 	sub.w	r8, r0, r5
 801664a:	4641      	mov	r1, r8
 801664c:	4620      	mov	r0, r4
 801664e:	f7fe fbfd 	bl	8014e4c <__any_on>
 8016652:	4683      	mov	fp, r0
 8016654:	b1b8      	cbz	r0, 8016686 <__gethex+0x1da>
 8016656:	f108 33ff 	add.w	r3, r8, #4294967295
 801665a:	1159      	asrs	r1, r3, #5
 801665c:	f003 021f 	and.w	r2, r3, #31
 8016660:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016664:	f04f 0b01 	mov.w	fp, #1
 8016668:	fa0b f202 	lsl.w	r2, fp, r2
 801666c:	420a      	tst	r2, r1
 801666e:	d00a      	beq.n	8016686 <__gethex+0x1da>
 8016670:	455b      	cmp	r3, fp
 8016672:	dd06      	ble.n	8016682 <__gethex+0x1d6>
 8016674:	f1a8 0102 	sub.w	r1, r8, #2
 8016678:	4620      	mov	r0, r4
 801667a:	f7fe fbe7 	bl	8014e4c <__any_on>
 801667e:	2800      	cmp	r0, #0
 8016680:	d138      	bne.n	80166f4 <__gethex+0x248>
 8016682:	f04f 0b02 	mov.w	fp, #2
 8016686:	4641      	mov	r1, r8
 8016688:	4620      	mov	r0, r4
 801668a:	f7ff fea7 	bl	80163dc <rshift>
 801668e:	4446      	add	r6, r8
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	42b3      	cmp	r3, r6
 8016694:	da41      	bge.n	801671a <__gethex+0x26e>
 8016696:	4621      	mov	r1, r4
 8016698:	4648      	mov	r0, r9
 801669a:	f7fd ff8b 	bl	80145b4 <_Bfree>
 801669e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80166a0:	2300      	movs	r3, #0
 80166a2:	6013      	str	r3, [r2, #0]
 80166a4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80166a8:	e78a      	b.n	80165c0 <__gethex+0x114>
 80166aa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80166ae:	2a2e      	cmp	r2, #46	; 0x2e
 80166b0:	d014      	beq.n	80166dc <__gethex+0x230>
 80166b2:	2b20      	cmp	r3, #32
 80166b4:	d106      	bne.n	80166c4 <__gethex+0x218>
 80166b6:	9b01      	ldr	r3, [sp, #4]
 80166b8:	f843 bb04 	str.w	fp, [r3], #4
 80166bc:	f04f 0b00 	mov.w	fp, #0
 80166c0:	9301      	str	r3, [sp, #4]
 80166c2:	465b      	mov	r3, fp
 80166c4:	7828      	ldrb	r0, [r5, #0]
 80166c6:	9303      	str	r3, [sp, #12]
 80166c8:	f7ff feda 	bl	8016480 <__hexdig_fun>
 80166cc:	9b03      	ldr	r3, [sp, #12]
 80166ce:	f000 000f 	and.w	r0, r0, #15
 80166d2:	4098      	lsls	r0, r3
 80166d4:	ea4b 0b00 	orr.w	fp, fp, r0
 80166d8:	3304      	adds	r3, #4
 80166da:	e7a1      	b.n	8016620 <__gethex+0x174>
 80166dc:	45a8      	cmp	r8, r5
 80166de:	d8e8      	bhi.n	80166b2 <__gethex+0x206>
 80166e0:	2201      	movs	r2, #1
 80166e2:	4628      	mov	r0, r5
 80166e4:	9303      	str	r3, [sp, #12]
 80166e6:	f7ff fe49 	bl	801637c <strncmp>
 80166ea:	4926      	ldr	r1, [pc, #152]	; (8016784 <__gethex+0x2d8>)
 80166ec:	9b03      	ldr	r3, [sp, #12]
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d1df      	bne.n	80166b2 <__gethex+0x206>
 80166f2:	e795      	b.n	8016620 <__gethex+0x174>
 80166f4:	f04f 0b03 	mov.w	fp, #3
 80166f8:	e7c5      	b.n	8016686 <__gethex+0x1da>
 80166fa:	da0b      	bge.n	8016714 <__gethex+0x268>
 80166fc:	eba5 0800 	sub.w	r8, r5, r0
 8016700:	4621      	mov	r1, r4
 8016702:	4642      	mov	r2, r8
 8016704:	4648      	mov	r0, r9
 8016706:	f7fe f96f 	bl	80149e8 <__lshift>
 801670a:	eba6 0608 	sub.w	r6, r6, r8
 801670e:	4604      	mov	r4, r0
 8016710:	f100 0a14 	add.w	sl, r0, #20
 8016714:	f04f 0b00 	mov.w	fp, #0
 8016718:	e7ba      	b.n	8016690 <__gethex+0x1e4>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	42b3      	cmp	r3, r6
 801671e:	dd73      	ble.n	8016808 <__gethex+0x35c>
 8016720:	1b9e      	subs	r6, r3, r6
 8016722:	42b5      	cmp	r5, r6
 8016724:	dc34      	bgt.n	8016790 <__gethex+0x2e4>
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2b02      	cmp	r3, #2
 801672a:	d023      	beq.n	8016774 <__gethex+0x2c8>
 801672c:	2b03      	cmp	r3, #3
 801672e:	d025      	beq.n	801677c <__gethex+0x2d0>
 8016730:	2b01      	cmp	r3, #1
 8016732:	d115      	bne.n	8016760 <__gethex+0x2b4>
 8016734:	42b5      	cmp	r5, r6
 8016736:	d113      	bne.n	8016760 <__gethex+0x2b4>
 8016738:	2d01      	cmp	r5, #1
 801673a:	d10b      	bne.n	8016754 <__gethex+0x2a8>
 801673c:	9a02      	ldr	r2, [sp, #8]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	6013      	str	r3, [r2, #0]
 8016742:	2301      	movs	r3, #1
 8016744:	6123      	str	r3, [r4, #16]
 8016746:	f8ca 3000 	str.w	r3, [sl]
 801674a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801674c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016750:	601c      	str	r4, [r3, #0]
 8016752:	e735      	b.n	80165c0 <__gethex+0x114>
 8016754:	1e69      	subs	r1, r5, #1
 8016756:	4620      	mov	r0, r4
 8016758:	f7fe fb78 	bl	8014e4c <__any_on>
 801675c:	2800      	cmp	r0, #0
 801675e:	d1ed      	bne.n	801673c <__gethex+0x290>
 8016760:	4621      	mov	r1, r4
 8016762:	4648      	mov	r0, r9
 8016764:	f7fd ff26 	bl	80145b4 <_Bfree>
 8016768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801676a:	2300      	movs	r3, #0
 801676c:	6013      	str	r3, [r2, #0]
 801676e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016772:	e725      	b.n	80165c0 <__gethex+0x114>
 8016774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016776:	2b00      	cmp	r3, #0
 8016778:	d1f2      	bne.n	8016760 <__gethex+0x2b4>
 801677a:	e7df      	b.n	801673c <__gethex+0x290>
 801677c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801677e:	2b00      	cmp	r3, #0
 8016780:	d1dc      	bne.n	801673c <__gethex+0x290>
 8016782:	e7ed      	b.n	8016760 <__gethex+0x2b4>
 8016784:	0801803c 	.word	0x0801803c
 8016788:	08017ed1 	.word	0x08017ed1
 801678c:	080181aa 	.word	0x080181aa
 8016790:	f106 38ff 	add.w	r8, r6, #4294967295
 8016794:	f1bb 0f00 	cmp.w	fp, #0
 8016798:	d133      	bne.n	8016802 <__gethex+0x356>
 801679a:	f1b8 0f00 	cmp.w	r8, #0
 801679e:	d004      	beq.n	80167aa <__gethex+0x2fe>
 80167a0:	4641      	mov	r1, r8
 80167a2:	4620      	mov	r0, r4
 80167a4:	f7fe fb52 	bl	8014e4c <__any_on>
 80167a8:	4683      	mov	fp, r0
 80167aa:	ea4f 1268 	mov.w	r2, r8, asr #5
 80167ae:	2301      	movs	r3, #1
 80167b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80167b4:	f008 081f 	and.w	r8, r8, #31
 80167b8:	fa03 f308 	lsl.w	r3, r3, r8
 80167bc:	4213      	tst	r3, r2
 80167be:	4631      	mov	r1, r6
 80167c0:	4620      	mov	r0, r4
 80167c2:	bf18      	it	ne
 80167c4:	f04b 0b02 	orrne.w	fp, fp, #2
 80167c8:	1bad      	subs	r5, r5, r6
 80167ca:	f7ff fe07 	bl	80163dc <rshift>
 80167ce:	687e      	ldr	r6, [r7, #4]
 80167d0:	f04f 0802 	mov.w	r8, #2
 80167d4:	f1bb 0f00 	cmp.w	fp, #0
 80167d8:	d04a      	beq.n	8016870 <__gethex+0x3c4>
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	2b02      	cmp	r3, #2
 80167de:	d016      	beq.n	801680e <__gethex+0x362>
 80167e0:	2b03      	cmp	r3, #3
 80167e2:	d018      	beq.n	8016816 <__gethex+0x36a>
 80167e4:	2b01      	cmp	r3, #1
 80167e6:	d109      	bne.n	80167fc <__gethex+0x350>
 80167e8:	f01b 0f02 	tst.w	fp, #2
 80167ec:	d006      	beq.n	80167fc <__gethex+0x350>
 80167ee:	f8da 3000 	ldr.w	r3, [sl]
 80167f2:	ea4b 0b03 	orr.w	fp, fp, r3
 80167f6:	f01b 0f01 	tst.w	fp, #1
 80167fa:	d10f      	bne.n	801681c <__gethex+0x370>
 80167fc:	f048 0810 	orr.w	r8, r8, #16
 8016800:	e036      	b.n	8016870 <__gethex+0x3c4>
 8016802:	f04f 0b01 	mov.w	fp, #1
 8016806:	e7d0      	b.n	80167aa <__gethex+0x2fe>
 8016808:	f04f 0801 	mov.w	r8, #1
 801680c:	e7e2      	b.n	80167d4 <__gethex+0x328>
 801680e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016810:	f1c3 0301 	rsb	r3, r3, #1
 8016814:	930f      	str	r3, [sp, #60]	; 0x3c
 8016816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016818:	2b00      	cmp	r3, #0
 801681a:	d0ef      	beq.n	80167fc <__gethex+0x350>
 801681c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016820:	f104 0214 	add.w	r2, r4, #20
 8016824:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016828:	9301      	str	r3, [sp, #4]
 801682a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801682e:	2300      	movs	r3, #0
 8016830:	4694      	mov	ip, r2
 8016832:	f852 1b04 	ldr.w	r1, [r2], #4
 8016836:	f1b1 3fff 	cmp.w	r1, #4294967295
 801683a:	d01e      	beq.n	801687a <__gethex+0x3ce>
 801683c:	3101      	adds	r1, #1
 801683e:	f8cc 1000 	str.w	r1, [ip]
 8016842:	f1b8 0f02 	cmp.w	r8, #2
 8016846:	f104 0214 	add.w	r2, r4, #20
 801684a:	d13d      	bne.n	80168c8 <__gethex+0x41c>
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	3b01      	subs	r3, #1
 8016850:	42ab      	cmp	r3, r5
 8016852:	d10b      	bne.n	801686c <__gethex+0x3c0>
 8016854:	1169      	asrs	r1, r5, #5
 8016856:	2301      	movs	r3, #1
 8016858:	f005 051f 	and.w	r5, r5, #31
 801685c:	fa03 f505 	lsl.w	r5, r3, r5
 8016860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016864:	421d      	tst	r5, r3
 8016866:	bf18      	it	ne
 8016868:	f04f 0801 	movne.w	r8, #1
 801686c:	f048 0820 	orr.w	r8, r8, #32
 8016870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016872:	601c      	str	r4, [r3, #0]
 8016874:	9b02      	ldr	r3, [sp, #8]
 8016876:	601e      	str	r6, [r3, #0]
 8016878:	e6a2      	b.n	80165c0 <__gethex+0x114>
 801687a:	4290      	cmp	r0, r2
 801687c:	f842 3c04 	str.w	r3, [r2, #-4]
 8016880:	d8d6      	bhi.n	8016830 <__gethex+0x384>
 8016882:	68a2      	ldr	r2, [r4, #8]
 8016884:	4593      	cmp	fp, r2
 8016886:	db17      	blt.n	80168b8 <__gethex+0x40c>
 8016888:	6861      	ldr	r1, [r4, #4]
 801688a:	4648      	mov	r0, r9
 801688c:	3101      	adds	r1, #1
 801688e:	f7fd fe51 	bl	8014534 <_Balloc>
 8016892:	4682      	mov	sl, r0
 8016894:	b918      	cbnz	r0, 801689e <__gethex+0x3f2>
 8016896:	4b1b      	ldr	r3, [pc, #108]	; (8016904 <__gethex+0x458>)
 8016898:	4602      	mov	r2, r0
 801689a:	2184      	movs	r1, #132	; 0x84
 801689c:	e6b3      	b.n	8016606 <__gethex+0x15a>
 801689e:	6922      	ldr	r2, [r4, #16]
 80168a0:	3202      	adds	r2, #2
 80168a2:	f104 010c 	add.w	r1, r4, #12
 80168a6:	0092      	lsls	r2, r2, #2
 80168a8:	300c      	adds	r0, #12
 80168aa:	f7fc ff68 	bl	801377e <memcpy>
 80168ae:	4621      	mov	r1, r4
 80168b0:	4648      	mov	r0, r9
 80168b2:	f7fd fe7f 	bl	80145b4 <_Bfree>
 80168b6:	4654      	mov	r4, sl
 80168b8:	6922      	ldr	r2, [r4, #16]
 80168ba:	1c51      	adds	r1, r2, #1
 80168bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80168c0:	6121      	str	r1, [r4, #16]
 80168c2:	2101      	movs	r1, #1
 80168c4:	6151      	str	r1, [r2, #20]
 80168c6:	e7bc      	b.n	8016842 <__gethex+0x396>
 80168c8:	6921      	ldr	r1, [r4, #16]
 80168ca:	4559      	cmp	r1, fp
 80168cc:	dd0b      	ble.n	80168e6 <__gethex+0x43a>
 80168ce:	2101      	movs	r1, #1
 80168d0:	4620      	mov	r0, r4
 80168d2:	f7ff fd83 	bl	80163dc <rshift>
 80168d6:	68bb      	ldr	r3, [r7, #8]
 80168d8:	3601      	adds	r6, #1
 80168da:	42b3      	cmp	r3, r6
 80168dc:	f6ff aedb 	blt.w	8016696 <__gethex+0x1ea>
 80168e0:	f04f 0801 	mov.w	r8, #1
 80168e4:	e7c2      	b.n	801686c <__gethex+0x3c0>
 80168e6:	f015 051f 	ands.w	r5, r5, #31
 80168ea:	d0f9      	beq.n	80168e0 <__gethex+0x434>
 80168ec:	9b01      	ldr	r3, [sp, #4]
 80168ee:	441a      	add	r2, r3
 80168f0:	f1c5 0520 	rsb	r5, r5, #32
 80168f4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80168f8:	f7fd ff0e 	bl	8014718 <__hi0bits>
 80168fc:	42a8      	cmp	r0, r5
 80168fe:	dbe6      	blt.n	80168ce <__gethex+0x422>
 8016900:	e7ee      	b.n	80168e0 <__gethex+0x434>
 8016902:	bf00      	nop
 8016904:	08017ed1 	.word	0x08017ed1

08016908 <L_shift>:
 8016908:	f1c2 0208 	rsb	r2, r2, #8
 801690c:	0092      	lsls	r2, r2, #2
 801690e:	b570      	push	{r4, r5, r6, lr}
 8016910:	f1c2 0620 	rsb	r6, r2, #32
 8016914:	6843      	ldr	r3, [r0, #4]
 8016916:	6804      	ldr	r4, [r0, #0]
 8016918:	fa03 f506 	lsl.w	r5, r3, r6
 801691c:	432c      	orrs	r4, r5
 801691e:	40d3      	lsrs	r3, r2
 8016920:	6004      	str	r4, [r0, #0]
 8016922:	f840 3f04 	str.w	r3, [r0, #4]!
 8016926:	4288      	cmp	r0, r1
 8016928:	d3f4      	bcc.n	8016914 <L_shift+0xc>
 801692a:	bd70      	pop	{r4, r5, r6, pc}

0801692c <__match>:
 801692c:	b530      	push	{r4, r5, lr}
 801692e:	6803      	ldr	r3, [r0, #0]
 8016930:	3301      	adds	r3, #1
 8016932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016936:	b914      	cbnz	r4, 801693e <__match+0x12>
 8016938:	6003      	str	r3, [r0, #0]
 801693a:	2001      	movs	r0, #1
 801693c:	bd30      	pop	{r4, r5, pc}
 801693e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016942:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016946:	2d19      	cmp	r5, #25
 8016948:	bf98      	it	ls
 801694a:	3220      	addls	r2, #32
 801694c:	42a2      	cmp	r2, r4
 801694e:	d0f0      	beq.n	8016932 <__match+0x6>
 8016950:	2000      	movs	r0, #0
 8016952:	e7f3      	b.n	801693c <__match+0x10>

08016954 <__hexnan>:
 8016954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016958:	680b      	ldr	r3, [r1, #0]
 801695a:	6801      	ldr	r1, [r0, #0]
 801695c:	115e      	asrs	r6, r3, #5
 801695e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016962:	f013 031f 	ands.w	r3, r3, #31
 8016966:	b087      	sub	sp, #28
 8016968:	bf18      	it	ne
 801696a:	3604      	addne	r6, #4
 801696c:	2500      	movs	r5, #0
 801696e:	1f37      	subs	r7, r6, #4
 8016970:	4682      	mov	sl, r0
 8016972:	4690      	mov	r8, r2
 8016974:	9301      	str	r3, [sp, #4]
 8016976:	f846 5c04 	str.w	r5, [r6, #-4]
 801697a:	46b9      	mov	r9, r7
 801697c:	463c      	mov	r4, r7
 801697e:	9502      	str	r5, [sp, #8]
 8016980:	46ab      	mov	fp, r5
 8016982:	784a      	ldrb	r2, [r1, #1]
 8016984:	1c4b      	adds	r3, r1, #1
 8016986:	9303      	str	r3, [sp, #12]
 8016988:	b342      	cbz	r2, 80169dc <__hexnan+0x88>
 801698a:	4610      	mov	r0, r2
 801698c:	9105      	str	r1, [sp, #20]
 801698e:	9204      	str	r2, [sp, #16]
 8016990:	f7ff fd76 	bl	8016480 <__hexdig_fun>
 8016994:	2800      	cmp	r0, #0
 8016996:	d14f      	bne.n	8016a38 <__hexnan+0xe4>
 8016998:	9a04      	ldr	r2, [sp, #16]
 801699a:	9905      	ldr	r1, [sp, #20]
 801699c:	2a20      	cmp	r2, #32
 801699e:	d818      	bhi.n	80169d2 <__hexnan+0x7e>
 80169a0:	9b02      	ldr	r3, [sp, #8]
 80169a2:	459b      	cmp	fp, r3
 80169a4:	dd13      	ble.n	80169ce <__hexnan+0x7a>
 80169a6:	454c      	cmp	r4, r9
 80169a8:	d206      	bcs.n	80169b8 <__hexnan+0x64>
 80169aa:	2d07      	cmp	r5, #7
 80169ac:	dc04      	bgt.n	80169b8 <__hexnan+0x64>
 80169ae:	462a      	mov	r2, r5
 80169b0:	4649      	mov	r1, r9
 80169b2:	4620      	mov	r0, r4
 80169b4:	f7ff ffa8 	bl	8016908 <L_shift>
 80169b8:	4544      	cmp	r4, r8
 80169ba:	d950      	bls.n	8016a5e <__hexnan+0x10a>
 80169bc:	2300      	movs	r3, #0
 80169be:	f1a4 0904 	sub.w	r9, r4, #4
 80169c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80169c6:	f8cd b008 	str.w	fp, [sp, #8]
 80169ca:	464c      	mov	r4, r9
 80169cc:	461d      	mov	r5, r3
 80169ce:	9903      	ldr	r1, [sp, #12]
 80169d0:	e7d7      	b.n	8016982 <__hexnan+0x2e>
 80169d2:	2a29      	cmp	r2, #41	; 0x29
 80169d4:	d155      	bne.n	8016a82 <__hexnan+0x12e>
 80169d6:	3102      	adds	r1, #2
 80169d8:	f8ca 1000 	str.w	r1, [sl]
 80169dc:	f1bb 0f00 	cmp.w	fp, #0
 80169e0:	d04f      	beq.n	8016a82 <__hexnan+0x12e>
 80169e2:	454c      	cmp	r4, r9
 80169e4:	d206      	bcs.n	80169f4 <__hexnan+0xa0>
 80169e6:	2d07      	cmp	r5, #7
 80169e8:	dc04      	bgt.n	80169f4 <__hexnan+0xa0>
 80169ea:	462a      	mov	r2, r5
 80169ec:	4649      	mov	r1, r9
 80169ee:	4620      	mov	r0, r4
 80169f0:	f7ff ff8a 	bl	8016908 <L_shift>
 80169f4:	4544      	cmp	r4, r8
 80169f6:	d934      	bls.n	8016a62 <__hexnan+0x10e>
 80169f8:	f1a8 0204 	sub.w	r2, r8, #4
 80169fc:	4623      	mov	r3, r4
 80169fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8016a02:	f842 1f04 	str.w	r1, [r2, #4]!
 8016a06:	429f      	cmp	r7, r3
 8016a08:	d2f9      	bcs.n	80169fe <__hexnan+0xaa>
 8016a0a:	1b3b      	subs	r3, r7, r4
 8016a0c:	f023 0303 	bic.w	r3, r3, #3
 8016a10:	3304      	adds	r3, #4
 8016a12:	3e03      	subs	r6, #3
 8016a14:	3401      	adds	r4, #1
 8016a16:	42a6      	cmp	r6, r4
 8016a18:	bf38      	it	cc
 8016a1a:	2304      	movcc	r3, #4
 8016a1c:	4443      	add	r3, r8
 8016a1e:	2200      	movs	r2, #0
 8016a20:	f843 2b04 	str.w	r2, [r3], #4
 8016a24:	429f      	cmp	r7, r3
 8016a26:	d2fb      	bcs.n	8016a20 <__hexnan+0xcc>
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	b91b      	cbnz	r3, 8016a34 <__hexnan+0xe0>
 8016a2c:	4547      	cmp	r7, r8
 8016a2e:	d126      	bne.n	8016a7e <__hexnan+0x12a>
 8016a30:	2301      	movs	r3, #1
 8016a32:	603b      	str	r3, [r7, #0]
 8016a34:	2005      	movs	r0, #5
 8016a36:	e025      	b.n	8016a84 <__hexnan+0x130>
 8016a38:	3501      	adds	r5, #1
 8016a3a:	2d08      	cmp	r5, #8
 8016a3c:	f10b 0b01 	add.w	fp, fp, #1
 8016a40:	dd06      	ble.n	8016a50 <__hexnan+0xfc>
 8016a42:	4544      	cmp	r4, r8
 8016a44:	d9c3      	bls.n	80169ce <__hexnan+0x7a>
 8016a46:	2300      	movs	r3, #0
 8016a48:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a4c:	2501      	movs	r5, #1
 8016a4e:	3c04      	subs	r4, #4
 8016a50:	6822      	ldr	r2, [r4, #0]
 8016a52:	f000 000f 	and.w	r0, r0, #15
 8016a56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016a5a:	6020      	str	r0, [r4, #0]
 8016a5c:	e7b7      	b.n	80169ce <__hexnan+0x7a>
 8016a5e:	2508      	movs	r5, #8
 8016a60:	e7b5      	b.n	80169ce <__hexnan+0x7a>
 8016a62:	9b01      	ldr	r3, [sp, #4]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d0df      	beq.n	8016a28 <__hexnan+0xd4>
 8016a68:	f1c3 0320 	rsb	r3, r3, #32
 8016a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a70:	40da      	lsrs	r2, r3
 8016a72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016a76:	4013      	ands	r3, r2
 8016a78:	f846 3c04 	str.w	r3, [r6, #-4]
 8016a7c:	e7d4      	b.n	8016a28 <__hexnan+0xd4>
 8016a7e:	3f04      	subs	r7, #4
 8016a80:	e7d2      	b.n	8016a28 <__hexnan+0xd4>
 8016a82:	2004      	movs	r0, #4
 8016a84:	b007      	add	sp, #28
 8016a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a8a <__ascii_mbtowc>:
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	b901      	cbnz	r1, 8016a90 <__ascii_mbtowc+0x6>
 8016a8e:	a901      	add	r1, sp, #4
 8016a90:	b142      	cbz	r2, 8016aa4 <__ascii_mbtowc+0x1a>
 8016a92:	b14b      	cbz	r3, 8016aa8 <__ascii_mbtowc+0x1e>
 8016a94:	7813      	ldrb	r3, [r2, #0]
 8016a96:	600b      	str	r3, [r1, #0]
 8016a98:	7812      	ldrb	r2, [r2, #0]
 8016a9a:	1e10      	subs	r0, r2, #0
 8016a9c:	bf18      	it	ne
 8016a9e:	2001      	movne	r0, #1
 8016aa0:	b002      	add	sp, #8
 8016aa2:	4770      	bx	lr
 8016aa4:	4610      	mov	r0, r2
 8016aa6:	e7fb      	b.n	8016aa0 <__ascii_mbtowc+0x16>
 8016aa8:	f06f 0001 	mvn.w	r0, #1
 8016aac:	e7f8      	b.n	8016aa0 <__ascii_mbtowc+0x16>

08016aae <_realloc_r>:
 8016aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab2:	4680      	mov	r8, r0
 8016ab4:	4614      	mov	r4, r2
 8016ab6:	460e      	mov	r6, r1
 8016ab8:	b921      	cbnz	r1, 8016ac4 <_realloc_r+0x16>
 8016aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016abe:	4611      	mov	r1, r2
 8016ac0:	f7fb bd14 	b.w	80124ec <_malloc_r>
 8016ac4:	b92a      	cbnz	r2, 8016ad2 <_realloc_r+0x24>
 8016ac6:	f7fd fce9 	bl	801449c <_free_r>
 8016aca:	4625      	mov	r5, r4
 8016acc:	4628      	mov	r0, r5
 8016ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad2:	f000 f8ad 	bl	8016c30 <_malloc_usable_size_r>
 8016ad6:	4284      	cmp	r4, r0
 8016ad8:	4607      	mov	r7, r0
 8016ada:	d802      	bhi.n	8016ae2 <_realloc_r+0x34>
 8016adc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016ae0:	d812      	bhi.n	8016b08 <_realloc_r+0x5a>
 8016ae2:	4621      	mov	r1, r4
 8016ae4:	4640      	mov	r0, r8
 8016ae6:	f7fb fd01 	bl	80124ec <_malloc_r>
 8016aea:	4605      	mov	r5, r0
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d0ed      	beq.n	8016acc <_realloc_r+0x1e>
 8016af0:	42bc      	cmp	r4, r7
 8016af2:	4622      	mov	r2, r4
 8016af4:	4631      	mov	r1, r6
 8016af6:	bf28      	it	cs
 8016af8:	463a      	movcs	r2, r7
 8016afa:	f7fc fe40 	bl	801377e <memcpy>
 8016afe:	4631      	mov	r1, r6
 8016b00:	4640      	mov	r0, r8
 8016b02:	f7fd fccb 	bl	801449c <_free_r>
 8016b06:	e7e1      	b.n	8016acc <_realloc_r+0x1e>
 8016b08:	4635      	mov	r5, r6
 8016b0a:	e7df      	b.n	8016acc <_realloc_r+0x1e>

08016b0c <__ascii_wctomb>:
 8016b0c:	b149      	cbz	r1, 8016b22 <__ascii_wctomb+0x16>
 8016b0e:	2aff      	cmp	r2, #255	; 0xff
 8016b10:	bf85      	ittet	hi
 8016b12:	238a      	movhi	r3, #138	; 0x8a
 8016b14:	6003      	strhi	r3, [r0, #0]
 8016b16:	700a      	strbls	r2, [r1, #0]
 8016b18:	f04f 30ff 	movhi.w	r0, #4294967295
 8016b1c:	bf98      	it	ls
 8016b1e:	2001      	movls	r0, #1
 8016b20:	4770      	bx	lr
 8016b22:	4608      	mov	r0, r1
 8016b24:	4770      	bx	lr

08016b26 <__swhatbuf_r>:
 8016b26:	b570      	push	{r4, r5, r6, lr}
 8016b28:	460c      	mov	r4, r1
 8016b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b2e:	2900      	cmp	r1, #0
 8016b30:	b096      	sub	sp, #88	; 0x58
 8016b32:	4615      	mov	r5, r2
 8016b34:	461e      	mov	r6, r3
 8016b36:	da0d      	bge.n	8016b54 <__swhatbuf_r+0x2e>
 8016b38:	89a3      	ldrh	r3, [r4, #12]
 8016b3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016b3e:	f04f 0100 	mov.w	r1, #0
 8016b42:	bf0c      	ite	eq
 8016b44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016b48:	2340      	movne	r3, #64	; 0x40
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	6031      	str	r1, [r6, #0]
 8016b4e:	602b      	str	r3, [r5, #0]
 8016b50:	b016      	add	sp, #88	; 0x58
 8016b52:	bd70      	pop	{r4, r5, r6, pc}
 8016b54:	466a      	mov	r2, sp
 8016b56:	f000 f849 	bl	8016bec <_fstat_r>
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	dbec      	blt.n	8016b38 <__swhatbuf_r+0x12>
 8016b5e:	9901      	ldr	r1, [sp, #4]
 8016b60:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016b64:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016b68:	4259      	negs	r1, r3
 8016b6a:	4159      	adcs	r1, r3
 8016b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b70:	e7eb      	b.n	8016b4a <__swhatbuf_r+0x24>

08016b72 <__smakebuf_r>:
 8016b72:	898b      	ldrh	r3, [r1, #12]
 8016b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b76:	079d      	lsls	r5, r3, #30
 8016b78:	4606      	mov	r6, r0
 8016b7a:	460c      	mov	r4, r1
 8016b7c:	d507      	bpl.n	8016b8e <__smakebuf_r+0x1c>
 8016b7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b82:	6023      	str	r3, [r4, #0]
 8016b84:	6123      	str	r3, [r4, #16]
 8016b86:	2301      	movs	r3, #1
 8016b88:	6163      	str	r3, [r4, #20]
 8016b8a:	b002      	add	sp, #8
 8016b8c:	bd70      	pop	{r4, r5, r6, pc}
 8016b8e:	ab01      	add	r3, sp, #4
 8016b90:	466a      	mov	r2, sp
 8016b92:	f7ff ffc8 	bl	8016b26 <__swhatbuf_r>
 8016b96:	9900      	ldr	r1, [sp, #0]
 8016b98:	4605      	mov	r5, r0
 8016b9a:	4630      	mov	r0, r6
 8016b9c:	f7fb fca6 	bl	80124ec <_malloc_r>
 8016ba0:	b948      	cbnz	r0, 8016bb6 <__smakebuf_r+0x44>
 8016ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ba6:	059a      	lsls	r2, r3, #22
 8016ba8:	d4ef      	bmi.n	8016b8a <__smakebuf_r+0x18>
 8016baa:	f023 0303 	bic.w	r3, r3, #3
 8016bae:	f043 0302 	orr.w	r3, r3, #2
 8016bb2:	81a3      	strh	r3, [r4, #12]
 8016bb4:	e7e3      	b.n	8016b7e <__smakebuf_r+0xc>
 8016bb6:	89a3      	ldrh	r3, [r4, #12]
 8016bb8:	6020      	str	r0, [r4, #0]
 8016bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bbe:	81a3      	strh	r3, [r4, #12]
 8016bc0:	9b00      	ldr	r3, [sp, #0]
 8016bc2:	6163      	str	r3, [r4, #20]
 8016bc4:	9b01      	ldr	r3, [sp, #4]
 8016bc6:	6120      	str	r0, [r4, #16]
 8016bc8:	b15b      	cbz	r3, 8016be2 <__smakebuf_r+0x70>
 8016bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bce:	4630      	mov	r0, r6
 8016bd0:	f000 f81e 	bl	8016c10 <_isatty_r>
 8016bd4:	b128      	cbz	r0, 8016be2 <__smakebuf_r+0x70>
 8016bd6:	89a3      	ldrh	r3, [r4, #12]
 8016bd8:	f023 0303 	bic.w	r3, r3, #3
 8016bdc:	f043 0301 	orr.w	r3, r3, #1
 8016be0:	81a3      	strh	r3, [r4, #12]
 8016be2:	89a3      	ldrh	r3, [r4, #12]
 8016be4:	431d      	orrs	r5, r3
 8016be6:	81a5      	strh	r5, [r4, #12]
 8016be8:	e7cf      	b.n	8016b8a <__smakebuf_r+0x18>
	...

08016bec <_fstat_r>:
 8016bec:	b538      	push	{r3, r4, r5, lr}
 8016bee:	4d07      	ldr	r5, [pc, #28]	; (8016c0c <_fstat_r+0x20>)
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	4604      	mov	r4, r0
 8016bf4:	4608      	mov	r0, r1
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	602b      	str	r3, [r5, #0]
 8016bfa:	f7f2 f8c4 	bl	8008d86 <_fstat>
 8016bfe:	1c43      	adds	r3, r0, #1
 8016c00:	d102      	bne.n	8016c08 <_fstat_r+0x1c>
 8016c02:	682b      	ldr	r3, [r5, #0]
 8016c04:	b103      	cbz	r3, 8016c08 <_fstat_r+0x1c>
 8016c06:	6023      	str	r3, [r4, #0]
 8016c08:	bd38      	pop	{r3, r4, r5, pc}
 8016c0a:	bf00      	nop
 8016c0c:	20000a88 	.word	0x20000a88

08016c10 <_isatty_r>:
 8016c10:	b538      	push	{r3, r4, r5, lr}
 8016c12:	4d06      	ldr	r5, [pc, #24]	; (8016c2c <_isatty_r+0x1c>)
 8016c14:	2300      	movs	r3, #0
 8016c16:	4604      	mov	r4, r0
 8016c18:	4608      	mov	r0, r1
 8016c1a:	602b      	str	r3, [r5, #0]
 8016c1c:	f7f2 f8c3 	bl	8008da6 <_isatty>
 8016c20:	1c43      	adds	r3, r0, #1
 8016c22:	d102      	bne.n	8016c2a <_isatty_r+0x1a>
 8016c24:	682b      	ldr	r3, [r5, #0]
 8016c26:	b103      	cbz	r3, 8016c2a <_isatty_r+0x1a>
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	bd38      	pop	{r3, r4, r5, pc}
 8016c2c:	20000a88 	.word	0x20000a88

08016c30 <_malloc_usable_size_r>:
 8016c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c34:	1f18      	subs	r0, r3, #4
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	bfbc      	itt	lt
 8016c3a:	580b      	ldrlt	r3, [r1, r0]
 8016c3c:	18c0      	addlt	r0, r0, r3
 8016c3e:	4770      	bx	lr

08016c40 <_init>:
 8016c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c42:	bf00      	nop
 8016c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c46:	bc08      	pop	{r3}
 8016c48:	469e      	mov	lr, r3
 8016c4a:	4770      	bx	lr

08016c4c <_fini>:
 8016c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c4e:	bf00      	nop
 8016c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c52:	bc08      	pop	{r3}
 8016c54:	469e      	mov	lr, r3
 8016c56:	4770      	bx	lr
