
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000186a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  08018888  08018888  00019888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e3c  08019e3c  0001b24c  2**0
                  CONTENTS
  4 .ARM          00000008  08019e3c  08019e3c  0001ae3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e44  08019e44  0001b24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08019e44  08019e44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08019e58  08019e58  0001ae58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08019e68  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000964  20000250  0801a0b4  0001b250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0801a0b4  0001bbb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cf20  00000000  00000000  0001b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000928f  00000000  00000000  0006819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af0  00000000  00000000  00071430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002189  00000000  00000000  00073f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034883  00000000  00000000  000760a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b116  00000000  00000000  000aa92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129d2f  00000000  00000000  000e5a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020f771  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ceac  00000000  00000000  0020f7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0021c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000037  00000000  00000000  0021c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801886c 	.word	0x0801886c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	0801886c 	.word	0x0801886c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	080192b4 	.word	0x080192b4

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	080192b4 	.word	0x080192b4

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f013 f828 	bl	80140da <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffb9 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	609a      	str	r2, [r3, #8]
  _address = address;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	715a      	strb	r2, [r3, #5]
}
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08019298 	.word	0x08019298

080010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fa5c 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2206      	movs	r2, #6
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f014 f8ce 	bl	80152a2 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	83fb      	strh	r3, [r7, #30]
 800110a:	8bfb      	ldrh	r3, [r7, #30]
 800110c:	83bb      	strh	r3, [r7, #28]
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	2306      	movs	r3, #6
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f000 fa05 	bl	800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	b21a      	sxth	r2, r3
 8001124:	7d7b      	ldrb	r3, [r7, #21]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	b21a      	sxth	r2, r3
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800113c:	7e3b      	ldrb	r3, [r7, #24]
 800113e:	b21a      	sxth	r2, r3
 8001140:	7e7b      	ldrb	r3, [r7, #25]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3b08      	subs	r3, #8
 800114e:	2b26      	cmp	r3, #38	@ 0x26
 8001150:	f200 8152 	bhi.w	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001379 	.word	0x08001379
 8001160:	080013f9 	.word	0x080013f9
 8001164:	080013f9 	.word	0x080013f9
 8001168:	080013f9 	.word	0x080013f9
 800116c:	080013f9 	.word	0x080013f9
 8001170:	080013f9 	.word	0x080013f9
 8001174:	080011f9 	.word	0x080011f9
 8001178:	080013f9 	.word	0x080013f9
 800117c:	080013f9 	.word	0x080013f9
 8001180:	080013f9 	.word	0x080013f9
 8001184:	080013f9 	.word	0x080013f9
 8001188:	080013f9 	.word	0x080013f9
 800118c:	08001279 	.word	0x08001279
 8001190:	080013f9 	.word	0x080013f9
 8001194:	080013f9 	.word	0x080013f9
 8001198:	080013f9 	.word	0x080013f9
 800119c:	080013f9 	.word	0x080013f9
 80011a0:	080013f9 	.word	0x080013f9
 80011a4:	080012f9 	.word	0x080012f9
 80011a8:	080013f9 	.word	0x080013f9
 80011ac:	080013f9 	.word	0x080013f9
 80011b0:	080013f9 	.word	0x080013f9
 80011b4:	080013f9 	.word	0x080013f9
 80011b8:	080013f9 	.word	0x080013f9
 80011bc:	080013f9 	.word	0x080013f9
 80011c0:	080013f9 	.word	0x080013f9
 80011c4:	080013f9 	.word	0x080013f9
 80011c8:	080013f9 	.word	0x080013f9
 80011cc:	080013f9 	.word	0x080013f9
 80011d0:	080013f9 	.word	0x080013f9
 80011d4:	080013f9 	.word	0x080013f9
 80011d8:	080013f9 	.word	0x080013f9
 80011dc:	08001379 	.word	0x08001379
 80011e0:	080013f9 	.word	0x080013f9
 80011e4:	080013f9 	.word	0x080013f9
 80011e8:	080013f9 	.word	0x080013f9
 80011ec:	080013f9 	.word	0x080013f9
 80011f0:	080013f9 	.word	0x080013f9
 80011f4:	08001379 	.word	0x08001379
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 80011f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b9 	bl	8000574 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001208:	f7ff fb48 	bl	800089c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	2100      	movs	r1, #0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f9d9 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800121c:	4603      	mov	r3, r0
 800121e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 8001222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9a4 	bl	8000574 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001232:	f7ff fb33 	bl	800089c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	2101      	movs	r1, #1
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f9c4 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001246:	4603      	mov	r3, r0
 8001248:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 800124c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f98f 	bl	8000574 <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800125c:	f7ff fb1e 	bl	800089c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	2102      	movs	r1, #2
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f9af 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001270:	4603      	mov	r3, r0
 8001272:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001276:	e0bf      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f979 	bl	8000574 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001288:	f7ff fb08 	bl	800089c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	2100      	movs	r1, #0
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f999 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800129c:	4603      	mov	r3, r0
 800129e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f964 	bl	8000574 <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012b2:	f7ff faf3 	bl	800089c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f984 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f94f 	bl	8000574 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	2102      	movs	r1, #2
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f96f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012f0:	4603      	mov	r3, r0
 80012f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80012f6:	e07f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80012f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f939 	bl	8000574 <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	461d      	mov	r5, r3
 8001314:	2100      	movs	r1, #0
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f959 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800131c:	4603      	mov	r3, r0
 800131e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 8001322:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f924 	bl	8000574 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001332:	f7ff fab3 	bl	800089c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	2101      	movs	r1, #1
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f944 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001346:	4603      	mov	r3, r0
 8001348:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 800134c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f90f 	bl	8000574 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800135c:	f7ff fa9e 	bl	800089c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	2102      	movs	r1, #2
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f92f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001370:	4603      	mov	r3, r0
 8001372:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001376:	e03f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001378:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8f9 	bl	8000574 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001388:	f7ff fa88 	bl	800089c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f919 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800139c:	4603      	mov	r3, r0
 800139e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	2101      	movs	r1, #1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f904 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8cf 	bl	8000574 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013dc:	f7ff fa5e 	bl	800089c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	2102      	movs	r1, #2
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f8ef 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013f6:	bf00      	nop
  }

  return xyz;
 80013f8:	bf00      	nop
}
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdb0      	pop	{r4, r5, r7, pc}
 8001402:	bf00      	nop
 8001404:	40300000 	.word	0x40300000
 8001408:	408c2000 	.word	0x408c2000
 800140c:	40590000 	.word	0x40590000

08001410 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 800141a:	2228      	movs	r2, #40	@ 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f013 ff3f 	bl	80152a2 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	220b      	movs	r2, #11
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f013 ff41 	bl	80152b2 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2203      	movs	r2, #3
 8001448:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001464:	621a      	str	r2, [r3, #32]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08018888 	.word	0x08018888
 8001474:	3c23d70a 	.word	0x3c23d70a

08001478 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f013 ff0b 	bl	80152a2 <memset>

  event->version   = sizeof(sensors_event_t);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2203      	movs	r2, #3
 800149e:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014a0:	f009 fae8 	bl	800aa74 <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	221a      	movs	r2, #26
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe15 	bl	80010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f853 	bl	800156a <_ZN3imu6VectorILh3EE1xEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbb3 	bl	8000c38 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f84f 	bl	8001580 <_ZN3imu6VectorILh3EE1yEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fba4 	bl	8000c38 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f84c 	bl	8001598 <_ZN3imu6VectorILh3EE1zEv>
 8001500:	4603      	mov	r3, r0
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	61da      	str	r2, [r3, #28]

  return true;
 8001514:	2401      	movs	r4, #1
}
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f81a 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8001520:	4623      	mov	r3, r4
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	461a      	mov	r2, r3
 8001536:	460b      	mov	r3, r1
 8001538:	72fb      	strb	r3, [r7, #11]
 800153a:	4613      	mov	r3, r2
 800153c:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800153e:	7aba      	ldrb	r2, [r7, #10]
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f89b 	bl	8001680 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    {
    }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3310      	adds	r3, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2218      	movs	r2, #24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f013 fe6f 	bl	80152a2 <memset>
    }
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
    }
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_ZN15Adafruit_BNO055D1Ev+0x20>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd29 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08019298 	.word	0x08019298

08001610 <_ZN15Adafruit_BNO055D0Ev>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
 800161e:	2110      	movs	r1, #16
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f012 fd5a 	bl	80140da <_ZdlPvj>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	3ff00000 	.word	0x3ff00000

08001680 <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b29a      	uxth	r2, r3
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29b      	uxth	r3, r3
 8001698:	2164      	movs	r1, #100	@ 0x64
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2152      	movs	r1, #82	@ 0x52
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016a8:	f00a fdc2 	bl	800c230 <HAL_I2C_Mem_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016b0:	bf00      	nop
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016b4:	f00b f877 	bl	800c7a6 <HAL_I2C_GetState>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f4      	bne.n	80016b2 <I2C_n_byte_receive+0x32>

  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000678 	.word	0x20000678

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016f2:	2229      	movs	r2, #41	@ 0x29
 80016f4:	2137      	movs	r1, #55	@ 0x37
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016f8:	f7ff fcd8 	bl	80010ac <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fe:	f7ff ff97 	bl	8001630 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001704:	f7ff ff54 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d105      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171a:	f7ff ff1b 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001720:	f7ff ff64 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000026c 	.word	0x2000026c
 8001730:	20000280 	.word	0x20000280
 8001734:	200002a0 	.word	0x200002a0

08001738 <_GLOBAL__sub_I_bno>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffc9 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <_GLOBAL__sub_D_bno>:
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
 800174c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffc1 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001756:	bd80      	pop	{r7, pc}

08001758 <as50_readAngle>:

	return (parity & 0x1);
}

void as50_readAngle(uint16_t * data, uint32_t timeout)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af02      	add	r7, sp, #8
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f00a fb7e 	bl	800be6c <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4910      	ldr	r1, [pc, #64]	@ (80017bc <as50_readAngle+0x64>)
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <as50_readAngle+0x68>)
 800177c:	f00d faee 	bl	800ed5c <HAL_SPI_TransmitReceive>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <as50_readAngle+0x4c>
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f00a fb6c 	bl	800be6c <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	801a      	strh	r2, [r3, #0]
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
	  }
}
 80017a2:	e006      	b.n	80017b2 <as50_readAngle+0x5a>
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ae:	f00a fb5d 	bl	800be6c <HAL_GPIO_WritePin>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000
 80017c0:	2000083c 	.word	0x2000083c

080017c4 <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
int at24_isConnected(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 80017c8:	2364      	movs	r3, #100	@ 0x64
 80017ca:	2202      	movs	r2, #2
 80017cc:	21a0      	movs	r1, #160	@ 0xa0
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <at24_isConnected+0x20>)
 80017d0:	f00a fe48 	bl	800c464 <HAL_I2C_IsDeviceReady>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <at24_isConnected+0x1a>
    return true;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <at24_isConnected+0x1c>
  else
    return false;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000678 	.word	0x20000678

080017e8 <at24_write>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
int at24_write(uint16_t address, uint8_t *data, uint8_t len, uint32_t timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af04      	add	r7, sp, #16
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4603      	mov	r3, r0
 80017f4:	81fb      	strh	r3, [r7, #14]
 80017f6:	4613      	mov	r3, r2
 80017f8:	737b      	strb	r3, [r7, #13]
  if (at24_lock == 1)
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <at24_write+0xc0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <at24_write+0x1e>
    return false;
 8001802:	2300      	movs	r3, #0
 8001804:	e04b      	b.n	800189e <at24_write+0xb6>

  at24_lock = 1;
 8001806:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <at24_write+0xc0>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 800180c:	f009 f932 	bl	800aa74 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]
  while (1)
  {
	#if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
	#endif
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	b29b      	uxth	r3, r3
 800181a:	f1c3 0320 	rsb	r3, r3, #32
 800181e:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	b29b      	uxth	r3, r3
 8001824:	8afa      	ldrh	r2, [r7, #22]
 8001826:	429a      	cmp	r2, r3
 8001828:	d901      	bls.n	800182e <at24_write+0x46>
      w = len;
 800182a:	7b7b      	ldrb	r3, [r7, #13]
 800182c:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 800182e:	89fa      	ldrh	r2, [r7, #14]
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	8afb      	ldrh	r3, [r7, #22]
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2302      	movs	r3, #2
 800183e:	21a0      	movs	r1, #160	@ 0xa0
 8001840:	481a      	ldr	r0, [pc, #104]	@ (80018ac <at24_write+0xc4>)
 8001842:	f00a fbe1 	bl	800c008 <HAL_I2C_Mem_Write>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d124      	bne.n	8001896 <at24_write+0xae>
    #endif
    {
      at24_delay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f009 f91d 	bl	800aa8c <HAL_Delay>
      len -= w;
 8001852:	8afb      	ldrh	r3, [r7, #22]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	7b7a      	ldrb	r2, [r7, #13]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	737b      	strb	r3, [r7, #13]
      data += w;
 800185c:	8afb      	ldrh	r3, [r7, #22]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	4413      	add	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
      address += w;
 8001864:	89fa      	ldrh	r2, [r7, #14]
 8001866:	8afb      	ldrh	r3, [r7, #22]
 8001868:	4413      	add	r3, r2
 800186a:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <at24_write+0x94>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        at24_lock = 0;
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <at24_write+0xc0>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
        return true;
 8001878:	2301      	movs	r3, #1
 800187a:	e010      	b.n	800189e <at24_write+0xb6>
      }
      if (HAL_GetTick() - startTime >= timeout)
 800187c:	f009 f8fa 	bl	800aa74 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8c2      	bhi.n	8001812 <at24_write+0x2a>
      {
        at24_lock = 0;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <at24_write+0xc0>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
        return false;
 8001892:	2300      	movs	r3, #0
 8001894:	e003      	b.n	800189e <at24_write+0xb6>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      at24_lock = 0;
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <at24_write+0xc0>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
      return false;
 800189c:	2300      	movs	r3, #0
    }
  }
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002b8 	.word	0x200002b8
 80018ac:	20000678 	.word	0x20000678

080018b0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d019      	beq.n	800193e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3308      	adds	r3, #8
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	330c      	adds	r3, #12
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
        }
    }
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	4798      	blx	r3
    }
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffd4 	bl	8001972 <_ZNSt14_Function_baseD1Ev>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZNSt8functionIFvvEED1Ev>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffc7 	bl	8001972 <_ZNSt14_Function_baseD1Ev>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fa46 	bl	8006e90 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3310      	adds	r3, #16
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fa6b 	bl	8006ee6 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	08019384 	.word	0x08019384

08001a48 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001a52:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001a54:	f005 fa72 	bl	8006f3c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f083 0301 	eor.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f012 fb7f 	bl	8014168 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8001a6a:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001a6c:	f005 fa77 	bl	8006f5e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001a70:	4603      	mov	r3, r0
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	6814      	ldr	r4, [r2, #0]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	47a0      	blx	r4
 8001a7e:	4603      	mov	r3, r0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	20000a60 	.word	0x20000a60

08001a8c <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <_Z6free_fP14CanardInstancePv+0x40>)
 8001a98:	f005 fa50 	bl	8006f3c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f083 0301 	eor.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f012 fb5d 	bl	8014168 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8001aae:	4807      	ldr	r0, [pc, #28]	@ (8001acc <_Z6free_fP14CanardInstancePv+0x40>)
 8001ab0:	f005 fa55 	bl	8006f5e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	3204      	adds	r2, #4
 8001aba:	6814      	ldr	r4, [r2, #0]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	47a0      	blx	r4
 8001ac4:	bf00      	nop
}
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	20000a60 	.word	0x20000a60

08001ad0 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8001ade:	4a0c      	ldr	r2, [pc, #48]	@ (8001b10 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	330c      	adds	r3, #12
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f012 f828 	bl	8013b50 <canardTxInit>
        utilities(utilities)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	63da      	str	r2, [r3, #60]	@ 0x3c
    {};
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08019548 	.word	0x08019548

08001b14 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	460b      	mov	r3, r1
 8001b22:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	7afa      	ldrb	r2, [r7, #11]
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3308      	adds	r3, #8
 8001b34:	6839      	ldr	r1, [r7, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 fa2d 	bl	8006f96 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2248      	movs	r2, #72	@ 0x48
 8001b60:	2140      	movs	r1, #64	@ 0x40
 8001b62:	f7ff ffb5 	bl	8001ad0 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08019524 	.word	0x08019524

08001b80 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff42 	bl	8001a1c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8001b98:	4a03      	ldr	r2, [pc, #12]	@ (8001ba8 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	08019408 	.word	0x08019408

08001bac <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bba:	eef0 7ae7 	vabs.f32	s15, s15
 8001bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bda:	eef0 7ae7 	vabs.f32	s15, s15
 8001bde:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001c10 <_ZSt8isfinitef+0x44>
 8001be2:	eef4 7a47 	vcmp.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	bf8c      	ite	hi
 8001bec:	2301      	movhi	r3, #1
 8001bee:	2300      	movls	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	7f7fffff 	.word	0x7f7fffff

08001c14 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d201      	bcs.n	8001c2a <nunavutChooseMin+0x16>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	e000      	b.n	8001c2c <nunavutChooseMin+0x18>
 8001c2a:	683b      	ldr	r3, [r7, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	f7ff ffe1 	bl	8001c14 <nunavutChooseMin>
 8001c52:	4602      	mov	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8001c5a:	6939      	ldr	r1, [r7, #16]
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ffd9 	bl	8001c14 <nunavutChooseMin>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b092      	sub	sp, #72	@ 0x48
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8001c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d145      	bne.n	8001d10 <nunavutCopyBits+0xa4>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d140      	bne.n	8001d10 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8001c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8001ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001caa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001cae:	f013 fade 	bl	801526e <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8001cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 808a 	beq.w	8001ddc <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8001cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ccc:	4413      	add	r3, r2
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8001cd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd4:	4413      	add	r3, r2
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8001cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cdc:	2201      	movs	r2, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8001cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfc:	7819      	ldrb	r1, [r3, #0]
 8001cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d02:	400b      	ands	r3, r1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d0e:	e065      	b.n	8001ddc <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8001d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 8001d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8001d28:	e053      	b.n	8001dd2 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8001d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8001d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8001d3e:	7dfa      	ldrb	r2, [r7, #23]
 8001d40:	7dbb      	ldrb	r3, [r7, #22]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d901      	bls.n	8001d4a <nunavutCopyBits+0xde>
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	e000      	b.n	8001d4c <nunavutCopyBits+0xe0>
 8001d4a:	7dbb      	ldrb	r3, [r7, #22]
 8001d4c:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8001d4e:	7d7b      	ldrb	r3, [r7, #21]
 8001d50:	f1c3 0008 	rsb	r0, r3, #8
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7ff ff5a 	bl	8001c14 <nunavutChooseMin>
 8001d60:	4603      	mov	r3, r0
 8001d62:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8001d64:	7d3b      	ldrb	r3, [r7, #20]
 8001d66:	2201      	movs	r2, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	7dbb      	ldrb	r3, [r7, #22]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	6a3a      	ldr	r2, [r7, #32]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	fa42 f303 	asr.w	r3, r2, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	7dbb      	ldrb	r3, [r7, #22]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4013      	ands	r3, r2
 8001da6:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001da8:	7cba      	ldrb	r2, [r7, #18]
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	4013      	ands	r3, r2
 8001dae:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8001db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	7c79      	ldrb	r1, [r7, #17]
 8001dba:	7c3a      	ldrb	r2, [r7, #16]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8001dc2:	7d3b      	ldrb	r3, [r7, #20]
 8001dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dc6:	4413      	add	r3, r2
 8001dc8:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 8001dca:	7d3b      	ldrb	r3, [r7, #20]
 8001dcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dce:	4413      	add	r3, r2
 8001dd0:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d8a7      	bhi.n	8001d2a <nunavutCopyBits+0xbe>
        }

    }
}
 8001dda:	e000      	b.n	8001dde <nunavutCopyBits+0x172>
    }
 8001ddc:	bf00      	nop
}
 8001dde:	bf00      	nop
 8001de0:	3748      	adds	r7, #72	@ 0x48
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff1d 	bl	8001c38 <nunavutSaturateBufferFragmentBitLength>
 8001dfe:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	18d0      	adds	r0, r2, r3
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	3307      	adds	r3, #7
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	2100      	movs	r1, #0
 8001e18:	f013 fa43 	bl	80152a2 <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	2100      	movs	r1, #0
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff ff20 	bl	8001c6c <nunavutCopyBits>
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	00da      	lsls	r2, r3, #3
 8001e44:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	440b      	add	r3, r1
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d202      	bcs.n	8001e56 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001e50:	f06f 0302 	mvn.w	r3, #2
 8001e54:	e010      	b.n	8001e78 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8001e56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e5a:	2140      	movs	r1, #64	@ 0x40
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fed9 	bl	8001c14 <nunavutChooseMin>
 8001e62:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fefb 	bl	8001c6c <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	2110      	movs	r1, #16
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff febe 	bl	8001c14 <nunavutChooseMin>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f7ff feca 	bl	8001c38 <nunavutSaturateBufferFragmentBitLength>
 8001ea4:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8001eaa:	f107 0012 	add.w	r0, r7, #18
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	f7ff fed8 	bl	8001c6c <nunavutCopyBits>
    return val;
 8001ebc:	8a7b      	ldrh	r3, [r7, #18]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b088      	sub	sp, #32
 8001eca:	af02      	add	r7, sp, #8
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe9b 	bl	8001c14 <nunavutChooseMin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68b8      	ldr	r0, [r7, #8]
 8001ee6:	f7ff fea7 	bl	8001c38 <nunavutSaturateBufferFragmentBitLength>
 8001eea:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8001ef0:	f107 0010 	add.w	r0, r7, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	2100      	movs	r1, #0
 8001efe:	f7ff feb5 	bl	8001c6c <nunavutCopyBits>
    return val;
 8001f02:	693b      	ldr	r3, [r7, #16]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	@ 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8001f16:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <nunavutFloat16Pack+0xb8>)
 8001f18:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8001f1a:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8001f1e:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8001f20:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 8001f24:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8001f26:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 8001f2a:	613b      	str	r3, [r7, #16]
    in.real = value;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f36:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4053      	eors	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (in.bits >= f32inf.bits)
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d313      	bcc.n	8001f74 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 8001f56:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 8001f5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f5c:	e025      	b.n	8001faa <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d902      	bls.n	8001f6c <nunavutFloat16Pack+0x60>
 8001f66:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001f6a:	e001      	b.n	8001f70 <nunavutFloat16Pack+0x64>
 8001f6c:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001f70:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f72:	e01a      	b.n	8001faa <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 8001f80:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f96:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d901      	bls.n	8001fa4 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    return out;
 8001fb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	372c      	adds	r7, #44	@ 0x2c
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	fffff000 	.word	0xfffff000

08001fc8 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 8001fd2:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 8001fd6:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 8001fd8:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 8001fdc:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	035a      	lsls	r2, r3, #13
 8001fe2:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <nunavutFloat16Unpack+0x6c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8001fe8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8001ff8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ffc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002008:	db03      	blt.n	8002012 <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8002010:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
    return out.real;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	ee07 3a90 	vmov	s15, r3
}
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	0fffe000 	.word	0x0fffe000

08002038 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8002044:	2310      	movs	r3, #16
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff ff18 	bl	8001e80 <nunavutGetU16>
 8002050:	4603      	mov	r3, r0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffb8 	bl	8001fc8 <nunavutFloat16Unpack>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
}
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8002072:	2320      	movs	r3, #32
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff ff24 	bl	8001ec6 <nunavutGetU32>
 800207e:	4603      	mov	r3, r0
 8002080:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	ee07 3a90 	vmov	s15, r3
}
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08c      	sub	sp, #48	@ 0x30
 8002096:	af04      	add	r7, sp, #16
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <uavcan_node_Health_1_0_serialize_+0x1e>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <uavcan_node_Health_1_0_serialize_+0x1e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80020b0:	f06f 0301 	mvn.w	r3, #1
 80020b4:	e048      	b.n	8002148 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	2b07      	cmp	r3, #7
 80020c2:	d802      	bhi.n	80020ca <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80020c4:	f06f 0302 	mvn.w	r3, #2
 80020c8:	e03e      	b.n	8002148 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 80020d4:	7efb      	ldrb	r3, [r7, #27]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d901      	bls.n	80020de <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 80020da:	2303      	movs	r3, #3
 80020dc:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4413      	add	r3, r2
 80020e6:	7efa      	ldrb	r2, [r7, #27]
 80020e8:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3302      	adds	r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d021      	beq.n	800213e <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f1c3 0308 	rsb	r3, r3, #8
 8002108:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9cd 2300 	strd	r2, r3, [sp]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	6979      	ldr	r1, [r7, #20]
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	f7ff fe88 	bl	8001e34 <nunavutSetUxx>
 8002124:	4603      	mov	r3, r0
 8002126:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002128:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800212c:	2b00      	cmp	r3, #0
 800212e:	da02      	bge.n	8002136 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002130:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002134:	e008      	b.n	8002148 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	4413      	add	r3, r2
 800213c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	08da      	lsrs	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <uavcan_node_Health_1_0_deserialize_+0x2c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002176:	f06f 0301 	mvn.w	r3, #1
 800217a:	e030      	b.n	80021de <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002184:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3302      	adds	r3, #2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	429a      	cmp	r2, r3
 800219e:	d30a      	bcc.n	80021b6 <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e002      	b.n	80021bc <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3302      	adds	r3, #2
 80021c0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3307      	adds	r3, #7
 80021c6:	f023 0307 	bic.w	r3, r3, #7
 80021ca:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff fd20 	bl	8001c14 <nunavutChooseMin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	080192d0 	.word	0x080192d0

080021ec <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	@ 0x30
 80021f0:	af04      	add	r7, sp, #16
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <uavcan_node_Mode_1_0_serialize_+0x1e>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800220a:	f06f 0301 	mvn.w	r3, #1
 800220e:	e048      	b.n	80022a2 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	2b07      	cmp	r3, #7
 800221c:	d802      	bhi.n	8002224 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800221e:	f06f 0302 	mvn.w	r3, #2
 8002222:	e03e      	b.n	80022a2 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 800222e:	7efb      	ldrb	r3, [r7, #27]
 8002230:	2b07      	cmp	r3, #7
 8002232:	d901      	bls.n	8002238 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002234:	2307      	movs	r3, #7
 8002236:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	08db      	lsrs	r3, r3, #3
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	4413      	add	r3, r2
 8002240:	7efa      	ldrb	r2, [r7, #27]
 8002242:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3303      	adds	r3, #3
 8002248:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	2b00      	cmp	r3, #0
 8002252:	d021      	beq.n	8002298 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f1c3 0308 	rsb	r3, r3, #8
 8002262:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9cd 2300 	strd	r2, r3, [sp]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	68b8      	ldr	r0, [r7, #8]
 800227a:	f7ff fddb 	bl	8001e34 <nunavutSetUxx>
 800227e:	4603      	mov	r3, r0
 8002280:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002282:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002286:	2b00      	cmp	r3, #0
 8002288:	da02      	bge.n	8002290 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 800228a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800228e:	e008      	b.n	80022a2 <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <uavcan_node_Mode_1_0_deserialize_+0x26>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <uavcan_node_Mode_1_0_deserialize_+0x26>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80022d2:	f06f 0301 	mvn.w	r3, #1
 80022d6:	e030      	b.n	800233a <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 80022e0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3303      	adds	r3, #3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d30a      	bcc.n	8002312 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	08db      	lsrs	r3, r3, #3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e002      	b.n	8002318 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3303      	adds	r3, #3
 800231c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3307      	adds	r3, #7
 8002322:	f023 0307 	bic.w	r3, r3, #7
 8002326:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff fc72 	bl	8001c14 <nunavutChooseMin>
 8002330:	4603      	mov	r3, r0
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	080192d0 	.word	0x080192d0

08002348 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	@ 0x38
 800234c:	af04      	add	r7, sp, #16
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002366:	f06f 0301 	mvn.w	r3, #1
 800236a:	e0cf      	b.n	800250c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	2b37      	cmp	r3, #55	@ 0x37
 8002378:	d802      	bhi.n	8002380 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800237a:	f06f 0302 	mvn.w	r3, #2
 800237e:	e0c5      	b.n	800250c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	08db      	lsrs	r3, r3, #3
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	4413      	add	r3, r2
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	3320      	adds	r3, #32
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d021      	beq.n	80023e6 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f1c3 0308 	rsb	r3, r3, #8
 80023b0:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9cd 2300 	strd	r2, r3, [sp]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c4:	6a39      	ldr	r1, [r7, #32]
 80023c6:	68b8      	ldr	r0, [r7, #8]
 80023c8:	f7ff fd34 	bl	8001e34 <nunavutSetUxx>
 80023cc:	4603      	mov	r3, r0
 80023ce:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 80023d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da02      	bge.n	80023de <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 80023d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80023dc:	e096      	b.n	800250c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e2:	4413      	add	r3, r2
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 80023e6:	2301      	movs	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4413      	add	r3, r2
 80023f6:	f107 0214 	add.w	r2, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7ff fe49 	bl	8002092 <uavcan_node_Health_1_0_serialize_>
 8002400:	4603      	mov	r3, r0
 8002402:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002404:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da02      	bge.n	8002412 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 800240c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002410:	e07c      	b.n	800250c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002418:	4413      	add	r3, r2
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	2b00      	cmp	r3, #0
 8002424:	d021      	beq.n	800246a <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f1c3 0308 	rsb	r3, r3, #8
 8002434:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002436:	7f3b      	ldrb	r3, [r7, #28]
 8002438:	9302      	str	r3, [sp, #8]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9cd 2300 	strd	r2, r3, [sp]
 8002446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	68b8      	ldr	r0, [r7, #8]
 800244c:	f7ff fcf2 	bl	8001e34 <nunavutSetUxx>
 8002450:	4603      	mov	r3, r0
 8002452:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002458:	2b00      	cmp	r3, #0
 800245a:	da02      	bge.n	8002462 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 800245c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002460:	e054      	b.n	800250c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002462:	7f3b      	ldrb	r3, [r7, #28]
 8002464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002466:	4413      	add	r3, r2
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 800246a:	2301      	movs	r3, #1
 800246c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4413      	add	r3, r2
 800247a:	f107 0210 	add.w	r2, r7, #16
 800247e:	4619      	mov	r1, r3
 8002480:	f7ff feb4 	bl	80021ec <uavcan_node_Mode_1_0_serialize_>
 8002484:	4603      	mov	r3, r0
 8002486:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002488:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da02      	bge.n	8002496 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002490:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002494:	e03a      	b.n	800250c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249c:	4413      	add	r3, r2
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	08db      	lsrs	r3, r3, #3
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	4413      	add	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	7992      	ldrb	r2, [r2, #6]
 80024ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	3308      	adds	r3, #8
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d021      	beq.n	8002502 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f1c3 0308 	rsb	r3, r3, #8
 80024cc:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80024ce:	7e7b      	ldrb	r3, [r7, #25]
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9cd 2300 	strd	r2, r3, [sp]
 80024de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e0:	6a39      	ldr	r1, [r7, #32]
 80024e2:	68b8      	ldr	r0, [r7, #8]
 80024e4:	f7ff fca6 	bl	8001e34 <nunavutSetUxx>
 80024e8:	4603      	mov	r3, r0
 80024ea:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 80024ec:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da02      	bge.n	80024fa <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 80024f4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80024f8:	e008      	b.n	800250c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 80024fa:	7e7b      	ldrb	r3, [r7, #25]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fe:	4413      	add	r3, r2
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3728      	adds	r7, #40	@ 0x28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	@ 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800253a:	f06f 0301 	mvn.w	r3, #1
 800253e:	e089      	b.n	8002654 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002546:	4b45      	ldr	r3, [pc, #276]	@ (800265c <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002548:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 800255a:	2320      	movs	r3, #32
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002560:	68b8      	ldr	r0, [r7, #8]
 8002562:	f7ff fcb0 	bl	8001ec6 <nunavutGetU32>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3320      	adds	r3, #32
 8002570:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3307      	adds	r3, #7
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fb46 	bl	8001c14 <nunavutChooseMin>
 8002588:	4602      	mov	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	4413      	add	r3, r2
 800259c:	f107 0214 	add.w	r2, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7ff fdd5 	bl	8002150 <uavcan_node_Health_1_0_deserialize_>
 80025a6:	4603      	mov	r3, r0
 80025a8:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 80025aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da02      	bge.n	80025b8 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 80025b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80025b6:	e04d      	b.n	8002654 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3307      	adds	r3, #7
 80025c6:	f023 0307 	bic.w	r3, r3, #7
 80025ca:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fb1e 	bl	8001c14 <nunavutChooseMin>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	4413      	add	r3, r2
 80025ec:	f107 0210 	add.w	r2, r7, #16
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7ff fe5b 	bl	80022ac <uavcan_node_Mode_1_0_deserialize_>
 80025f6:	4603      	mov	r3, r0
 80025f8:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 80025fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da02      	bge.n	8002608 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002602:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002606:	e025      	b.n	8002654 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3308      	adds	r3, #8
 8002616:	6a3a      	ldr	r2, [r7, #32]
 8002618:	429a      	cmp	r2, r3
 800261a:	d307      	bcc.n	800262c <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	4413      	add	r3, r2
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	719a      	strb	r2, [r3, #6]
 800262a:	e002      	b.n	8002632 <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3308      	adds	r3, #8
 8002636:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3307      	adds	r3, #7
 800263c:	f023 0307 	bic.w	r3, r3, #7
 8002640:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	69f8      	ldr	r0, [r7, #28]
 8002646:	f7ff fae5 	bl	8001c14 <nunavutChooseMin>
 800264a:	4603      	mov	r3, r0
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	@ 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	080192d0 	.word	0x080192d0

08002660 <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	@ 0x30
 8002664:	af04      	add	r7, sp, #16
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800267e:	f06f 0301 	mvn.w	r3, #1
 8002682:	e041      	b.n	8002708 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	2b1f      	cmp	r3, #31
 8002690:	d802      	bhi.n	8002698 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002692:	f06f 0302 	mvn.w	r3, #2
 8002696:	e037      	b.n	8002708 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	4413      	add	r3, r2
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3320      	adds	r3, #32
 80026ae:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d021      	beq.n	80026fe <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f1c3 0308 	rsb	r3, r3, #8
 80026c8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9cd 2300 	strd	r2, r3, [sp]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f7ff fba8 	bl	8001e34 <nunavutSetUxx>
 80026e4:	4603      	mov	r3, r0
 80026e6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80026e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da02      	bge.n	80026f6 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 80026f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80026f4:	e008      	b.n	8002708 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002736:	f06f 0301 	mvn.w	r3, #1
 800273a:	e027      	b.n	800278c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002742:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002744:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	68b8      	ldr	r0, [r7, #8]
 800275c:	f7ff fc83 	bl	8002066 <nunavutGetF32>
 8002760:	eef0 7a40 	vmov.f32	s15, s0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3320      	adds	r3, #32
 800276e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3307      	adds	r3, #7
 8002774:	f023 0307 	bic.w	r3, r3, #7
 8002778:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	6978      	ldr	r0, [r7, #20]
 800277e:	f7ff fa49 	bl	8001c14 <nunavutChooseMin>
 8002782:	4603      	mov	r3, r0
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	080192d0 	.word	0x080192d0

08002798 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	@ 0x30
 800279c:	af04      	add	r7, sp, #16
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027b6:	f06f 0301 	mvn.w	r3, #1
 80027ba:	e041      	b.n	8002840 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	2b1f      	cmp	r3, #31
 80027c8:	d802      	bhi.n	80027d0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80027ca:	f06f 0302 	mvn.w	r3, #2
 80027ce:	e037      	b.n	8002840 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4413      	add	r3, r2
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3320      	adds	r3, #32
 80027e6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d021      	beq.n	8002836 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f1c3 0308 	rsb	r3, r3, #8
 8002800:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	9302      	str	r3, [sp, #8]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9cd 2300 	strd	r2, r3, [sp]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	69b9      	ldr	r1, [r7, #24]
 8002816:	68b8      	ldr	r0, [r7, #8]
 8002818:	f7ff fb0c 	bl	8001e34 <nunavutSetUxx>
 800281c:	4603      	mov	r3, r0
 800281e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002820:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002824:	2b00      	cmp	r3, #0
 8002826:	da02      	bge.n	800282e <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002828:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800282c:	e008      	b.n	8002840 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800286e:	f06f 0301 	mvn.w	r3, #1
 8002872:	e027      	b.n	80028c4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 800287c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	69f9      	ldr	r1, [r7, #28]
 8002892:	68b8      	ldr	r0, [r7, #8]
 8002894:	f7ff fbe7 	bl	8002066 <nunavutGetF32>
 8002898:	eef0 7a40 	vmov.f32	s15, s0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3320      	adds	r3, #32
 80028a6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3307      	adds	r3, #7
 80028ac:	f023 0307 	bic.w	r3, r3, #7
 80028b0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	6978      	ldr	r0, [r7, #20]
 80028b6:	f7ff f9ad 	bl	8001c14 <nunavutChooseMin>
 80028ba:	4603      	mov	r3, r0
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	080192d0 	.word	0x080192d0

080028d0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08c      	sub	sp, #48	@ 0x30
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80028ee:	f06f 0301 	mvn.w	r3, #1
 80028f2:	e041      	b.n	8002978 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	2b1f      	cmp	r3, #31
 8002900:	d802      	bhi.n	8002908 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002902:	f06f 0302 	mvn.w	r3, #2
 8002906:	e037      	b.n	8002978 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08db      	lsrs	r3, r3, #3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	4413      	add	r3, r2
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3320      	adds	r3, #32
 800291e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	2b00      	cmp	r3, #0
 8002928:	d021      	beq.n	800296e <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f1c3 0308 	rsb	r3, r3, #8
 8002938:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	9302      	str	r3, [sp, #8]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9cd 2300 	strd	r2, r3, [sp]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	68b8      	ldr	r0, [r7, #8]
 8002950:	f7ff fa70 	bl	8001e34 <nunavutSetUxx>
 8002954:	4603      	mov	r3, r0
 8002956:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002958:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da02      	bge.n	8002966 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002960:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002964:	e008      	b.n	8002978 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80029a6:	f06f 0301 	mvn.w	r3, #1
 80029aa:	e027      	b.n	80029fc <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 80029b4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	69f9      	ldr	r1, [r7, #28]
 80029ca:	68b8      	ldr	r0, [r7, #8]
 80029cc:	f7ff fb4b 	bl	8002066 <nunavutGetF32>
 80029d0:	eef0 7a40 	vmov.f32	s15, s0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3320      	adds	r3, #32
 80029de:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3307      	adds	r3, #7
 80029e4:	f023 0307 	bic.w	r3, r3, #7
 80029e8:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	6978      	ldr	r0, [r7, #20]
 80029ee:	f7ff f911 	bl	8001c14 <nunavutChooseMin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	080192d0 	.word	0x080192d0

08002a08 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b090      	sub	sp, #64	@ 0x40
 8002a0c:	af04      	add	r7, sp, #16
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a26:	f06f 0301 	mvn.w	r3, #1
 8002a2a:	e0e4      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	2b5f      	cmp	r3, #95	@ 0x5f
 8002a38:	d802      	bhi.n	8002a40 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002a3a:	f06f 0302 	mvn.w	r3, #2
 8002a3e:	e0da      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 8002a44:	2304      	movs	r3, #4
 8002a46:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 8002a48:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4413      	add	r3, r2
 8002a52:	f107 0218 	add.w	r2, r7, #24
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7ff fe02 	bl	8002660 <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 8002a62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da02      	bge.n	8002a70 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 8002a6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002a6e:	e0c2      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a76:	4413      	add	r3, r2
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d025      	beq.n	8002ad0 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f1c3 0308 	rsb	r3, r3, #8
 8002a92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002a96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9cd 2300 	strd	r2, r3, [sp]
 8002aa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aac:	68b8      	ldr	r0, [r7, #8]
 8002aae:	f7ff f9c1 	bl	8001e34 <nunavutSetUxx>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 8002ab8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	da02      	bge.n	8002ac6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 8002ac0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8002ac4:	e097      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 8002ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002acc:	4413      	add	r3, r2
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ada:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f107 0214 	add.w	r2, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7ff fef3 	bl	80028d0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 8002af0:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da02      	bge.n	8002afe <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 8002af8:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8002afc:	e07b      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b04:	4413      	add	r3, r2
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d025      	beq.n	8002b5e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f1c3 0308 	rsb	r3, r3, #8
 8002b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002b24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9cd 2300 	strd	r2, r3, [sp]
 8002b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b3a:	68b8      	ldr	r0, [r7, #8]
 8002b3c:	f7ff f97a 	bl	8001e34 <nunavutSetUxx>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 8002b46:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da02      	bge.n	8002b54 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 8002b4e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002b52:	e050      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 8002b54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5a:	4413      	add	r3, r2
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 8002b5e:	2304      	movs	r3, #4
 8002b60:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f107 0210 	add.w	r2, r7, #16
 8002b74:	4619      	mov	r1, r3
 8002b76:	f7ff fe0f 	bl	8002798 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 8002b80:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da02      	bge.n	8002b8e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 8002b88:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002b8c:	e033      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b94:	4413      	add	r3, r2
 8002b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d024      	beq.n	8002bec <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f1c3 0308 	rsb	r3, r3, #8
 8002bb0:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002bb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9cd 2300 	strd	r2, r3, [sp]
 8002bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bca:	68b8      	ldr	r0, [r7, #8]
 8002bcc:	f7ff f932 	bl	8001e34 <nunavutSetUxx>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8002bd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da02      	bge.n	8002be2 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 8002bdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002be0:	e009      	b.n	8002bf6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 8002be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be8:	4413      	add	r3, r2
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3730      	adds	r7, #48	@ 0x30
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	@ 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c26:	f06f 0301 	mvn.w	r3, #1
 8002c2a:	e090      	b.n	8002d4e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002c32:	4b49      	ldr	r3, [pc, #292]	@ (8002d58 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8002c34:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t offset_bits = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe ffe1 	bl	8001c14 <nunavutChooseMin>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002c5a:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5e:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	4413      	add	r3, r2
 8002c64:	f107 021c 	add.w	r2, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7ff fd51 	bl	8002710 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (_err6_ < 0)
 8002c74:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da02      	bge.n	8002c82 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8002c7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002c80:	e065      	b.n	8002d4e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c88:	4413      	add	r3, r2
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	3307      	adds	r3, #7
 8002c90:	f023 0307 	bic.w	r3, r3, #7
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe ffb9 	bl	8001c14 <nunavutChooseMin>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f107 0218 	add.w	r2, r7, #24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f7ff fe60 	bl	8002980 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err7_ < 0)
 8002cc6:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da02      	bge.n	8002cd4 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8002cce:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002cd2:	e03c      	b.n	8002d4e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cda:	4413      	add	r3, r2
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	3307      	adds	r3, #7
 8002ce2:	f023 0307 	bic.w	r3, r3, #7
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	08db      	lsrs	r3, r3, #3
 8002cec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff90 	bl	8001c14 <nunavutChooseMin>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f107 0214 	add.w	r2, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7ff fd9a 	bl	8002848 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err8_ < 0)
 8002d1a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	da02      	bge.n	8002d28 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 8002d22:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002d26:	e012      	b.n	8002d4e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2e:	4413      	add	r3, r2
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	3307      	adds	r3, #7
 8002d36:	f023 0307 	bic.w	r3, r3, #7
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d40:	f7fe ff68 	bl	8001c14 <nunavutChooseMin>
 8002d44:	4603      	mov	r3, r0
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3730      	adds	r7, #48	@ 0x30
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	080192d0 	.word	0x080192d0

08002d5c <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <uavcan_register_Name_1_0_deserialize_+0x26>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <uavcan_register_Name_1_0_deserialize_+0x26>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <uavcan_register_Name_1_0_deserialize_+0x2c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d82:	f06f 0301 	mvn.w	r3, #1
 8002d86:	e04a      	b.n	8002e1e <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002d8e:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 8002d90:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3308      	adds	r3, #8
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d309      	bcc.n	8002dc0 <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	08db      	lsrs	r3, r3, #3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8002dbe:	e003      	b.n	8002dc8 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002dd4:	2bff      	cmp	r3, #255	@ 0xff
 8002dd6:	d902      	bls.n	8002dde <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002dd8:	f06f 0309 	mvn.w	r3, #9
 8002ddc:	e01f      	b.n	8002e1e <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	f7fe fff9 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4413      	add	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3307      	adds	r3, #7
 8002e06:	f023 0307 	bic.w	r3, r3, #7
 8002e0a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002e0c:	69b9      	ldr	r1, [r7, #24]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7fe ff00 	bl	8001c14 <nunavutChooseMin>
 8002e14:	4603      	mov	r3, r0
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	080192d0 	.word	0x080192d0

08002e2c <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	@ 0x30
 8002e30:	af04      	add	r7, sp, #16
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e4a:	f06f 0301 	mvn.w	r3, #1
 8002e4e:	e05e      	b.n	8002f0e <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8002e5e:	d202      	bcs.n	8002e66 <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002e60:	f06f 0302 	mvn.w	r3, #2
 8002e64:	e053      	b.n	8002f0e <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e74:	d902      	bls.n	8002e7c <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002e76:	f06f 0309 	mvn.w	r3, #9
 8002e7a:	e048      	b.n	8002f0e <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	4413      	add	r3, r2
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002e8a:	8812      	ldrh	r2, [r2, #0]
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3310      	adds	r3, #16
 8002e94:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	9100      	str	r1, [sp, #0]
 8002ea2:	69f9      	ldr	r1, [r7, #28]
 8002ea4:	68b8      	ldr	r0, [r7, #8]
 8002ea6:	f7fe fee1 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d021      	beq.n	8002f04 <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f1c3 0308 	rsb	r3, r3, #8
 8002ece:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9cd 2300 	strd	r2, r3, [sp]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	68b8      	ldr	r0, [r7, #8]
 8002ee6:	f7fe ffa5 	bl	8001e34 <nunavutSetUxx>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002eee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da02      	bge.n	8002efc <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 8002ef6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002efa:	e008      	b.n	8002f0e <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	08da      	lsrs	r2, r3, #3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f3e:	f06f 0301 	mvn.w	r3, #1
 8002f42:	e041      	b.n	8002fc8 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002f4a:	4b21      	ldr	r3, [pc, #132]	@ (8002fd0 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 8002f4c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8002f5e:	2310      	movs	r3, #16
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	69f9      	ldr	r1, [r7, #28]
 8002f64:	68b8      	ldr	r0, [r7, #8]
 8002f66:	f7fe ff8b 	bl	8001e80 <nunavutGetU16>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3310      	adds	r3, #16
 8002f78:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f84:	d902      	bls.n	8002f8c <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002f86:	f06f 0309 	mvn.w	r3, #9
 8002f8a:	e01d      	b.n	8002fc8 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	f7fe ff23 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4413      	add	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3307      	adds	r3, #7
 8002fb0:	f023 0307 	bic.w	r3, r3, #7
 8002fb4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	6978      	ldr	r0, [r7, #20]
 8002fba:	f7fe fe2b 	bl	8001c14 <nunavutChooseMin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	080192d0 	.word	0x080192d0

08002fd4 <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	@ 0x30
 8002fd8:	af04      	add	r7, sp, #16
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ff2:	f06f 0301 	mvn.w	r3, #1
 8002ff6:	e05f      	b.n	80030b8 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	f640 0207 	movw	r2, #2055	@ 0x807
 8003006:	4293      	cmp	r3, r2
 8003008:	d802      	bhi.n	8003010 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800300a:	f06f 0302 	mvn.w	r3, #2
 800300e:	e053      	b.n	80030b8 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800301a:	2b80      	cmp	r3, #128	@ 0x80
 800301c:	d902      	bls.n	8003024 <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800301e:	f06f 0309 	mvn.w	r3, #9
 8003022:	e049      	b.n	80030b8 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	08db      	lsrs	r3, r3, #3
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4413      	add	r3, r2
 8003032:	b2ca      	uxtb	r2, r1
 8003034:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3308      	adds	r3, #8
 800303a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003042:	011a      	lsls	r2, r3, #4
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2100      	movs	r1, #0
 8003048:	9100      	str	r1, [sp, #0]
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	68b8      	ldr	r0, [r7, #8]
 800304e:	f7fe fe0d 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	2b00      	cmp	r3, #0
 8003068:	d021      	beq.n	80030ae <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f1c3 0308 	rsb	r3, r3, #8
 8003078:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9cd 2300 	strd	r2, r3, [sp]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	68b8      	ldr	r0, [r7, #8]
 8003090:	f7fe fed0 	bl	8001e34 <nunavutSetUxx>
 8003094:	4603      	mov	r3, r0
 8003096:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003098:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da02      	bge.n	80030a6 <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80030a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80030a4:	e008      	b.n	80030b8 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	@ 0x28
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030e6:	f06f 0301 	mvn.w	r3, #1
 80030ea:	e04a      	b.n	8003182 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80030f2:	4b26      	ldr	r3, [pc, #152]	@ (800318c <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 80030f4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3308      	adds	r3, #8
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	429a      	cmp	r2, r3
 800310e:	d309      	bcc.n	8003124 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	08db      	lsrs	r3, r3, #3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	4413      	add	r3, r2
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003122:	e003      	b.n	800312c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3308      	adds	r3, #8
 8003130:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003138:	2b80      	cmp	r3, #128	@ 0x80
 800313a:	d902      	bls.n	8003142 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800313c:	f06f 0309 	mvn.w	r3, #9
 8003140:	e01f      	b.n	8003182 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	f7fe fe47 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3307      	adds	r3, #7
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003170:	69b9      	ldr	r1, [r7, #24]
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7fe fd4e 	bl	8001c14 <nunavutChooseMin>
 8003178:	4603      	mov	r3, r0
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	080192d0 	.word	0x080192d0

08003190 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	@ 0x30
 8003194:	af04      	add	r7, sp, #16
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80031ae:	f06f 0301 	mvn.w	r3, #1
 80031b2:	e05f      	b.n	8003274 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	f640 0207 	movw	r2, #2055	@ 0x807
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d802      	bhi.n	80031cc <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80031c6:	f06f 0302 	mvn.w	r3, #2
 80031ca:	e053      	b.n	8003274 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	d902      	bls.n	80031e0 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80031da:	f06f 0309 	mvn.w	r3, #9
 80031de:	e049      	b.n	8003274 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	4413      	add	r3, r2
 80031ee:	b2ca      	uxtb	r2, r1
 80031f0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3308      	adds	r3, #8
 80031f6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2100      	movs	r1, #0
 8003204:	9100      	str	r1, [sp, #0]
 8003206:	69f9      	ldr	r1, [r7, #28]
 8003208:	68b8      	ldr	r0, [r7, #8]
 800320a:	f7fe fd2f 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003214:	015b      	lsls	r3, r3, #5
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	4413      	add	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f1c3 0308 	rsb	r3, r3, #8
 8003234:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	9302      	str	r3, [sp, #8]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9cd 2300 	strd	r2, r3, [sp]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	69b9      	ldr	r1, [r7, #24]
 800324a:	68b8      	ldr	r0, [r7, #8]
 800324c:	f7fe fdf2 	bl	8001e34 <nunavutSetUxx>
 8003250:	4603      	mov	r3, r0
 8003252:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003254:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003258:	2b00      	cmp	r3, #0
 800325a:	da02      	bge.n	8003262 <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 800325c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003260:	e008      	b.n	8003274 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80032a2:	f06f 0301 	mvn.w	r3, #1
 80032a6:	e04a      	b.n	800333e <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80032ae:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 80032b0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3308      	adds	r3, #8
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d309      	bcc.n	80032e0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80032de:	e003      	b.n	80032e8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3308      	adds	r3, #8
 80032ec:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	d902      	bls.n	80032fe <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80032f8:	f06f 0309 	mvn.w	r3, #9
 80032fc:	e01f      	b.n	800333e <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003306:	015b      	lsls	r3, r3, #5
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	f7fe fd69 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800331a:	015b      	lsls	r3, r3, #5
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4413      	add	r3, r2
 8003320:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3307      	adds	r3, #7
 8003326:	f023 0307 	bic.w	r3, r3, #7
 800332a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	6978      	ldr	r0, [r7, #20]
 8003330:	f7fe fc70 	bl	8001c14 <nunavutChooseMin>
 8003334:	4603      	mov	r3, r0
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	080192d0 	.word	0x080192d0

0800334c <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	@ 0x30
 8003350:	af04      	add	r7, sp, #16
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800336a:	f06f 0301 	mvn.w	r3, #1
 800336e:	e05f      	b.n	8003430 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f640 0207 	movw	r2, #2055	@ 0x807
 800337e:	4293      	cmp	r3, r2
 8003380:	d802      	bhi.n	8003388 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003382:	f06f 0302 	mvn.w	r3, #2
 8003386:	e053      	b.n	8003430 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003392:	2b20      	cmp	r3, #32
 8003394:	d902      	bls.n	800339c <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003396:	f06f 0309 	mvn.w	r3, #9
 800339a:	e049      	b.n	8003430 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	b2ca      	uxtb	r2, r1
 80033ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3308      	adds	r3, #8
 80033b2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033ba:	019a      	lsls	r2, r3, #6
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2100      	movs	r1, #0
 80033c0:	9100      	str	r1, [sp, #0]
 80033c2:	69f9      	ldr	r1, [r7, #28]
 80033c4:	68b8      	ldr	r0, [r7, #8]
 80033c6:	f7fe fc51 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d021      	beq.n	8003426 <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f1c3 0308 	rsb	r3, r3, #8
 80033f0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	9302      	str	r3, [sp, #8]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	68b8      	ldr	r0, [r7, #8]
 8003408:	f7fe fd14 	bl	8001e34 <nunavutSetUxx>
 800340c:	4603      	mov	r3, r0
 800340e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003410:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003414:	2b00      	cmp	r3, #0
 8003416:	da02      	bge.n	800341e <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003418:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800341c:	e008      	b.n	8003430 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	4413      	add	r3, r2
 8003424:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d006      	beq.n	800345e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800345e:	f06f 0301 	mvn.w	r3, #1
 8003462:	e04a      	b.n	80034fa <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800346a:	4b26      	ldr	r3, [pc, #152]	@ (8003504 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 800346c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3308      	adds	r3, #8
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	d309      	bcc.n	800349c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	4413      	add	r3, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800349a:	e003      	b.n	80034a4 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3308      	adds	r3, #8
 80034a8:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d902      	bls.n	80034ba <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80034b4:	f06f 0309 	mvn.w	r3, #9
 80034b8:	e01f      	b.n	80034fa <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80034c2:	019b      	lsls	r3, r3, #6
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	f7fe fc8b 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4413      	add	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3307      	adds	r3, #7
 80034e2:	f023 0307 	bic.w	r3, r3, #7
 80034e6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7fe fb92 	bl	8001c14 <nunavutChooseMin>
 80034f0:	4603      	mov	r3, r0
 80034f2:	08da      	lsrs	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	080192d0 	.word	0x080192d0

08003508 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08c      	sub	sp, #48	@ 0x30
 800350c:	af04      	add	r7, sp, #16
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003526:	f06f 0301 	mvn.w	r3, #1
 800352a:	e060      	b.n	80035ee <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 800353a:	d202      	bcs.n	8003542 <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800353c:	f06f 0302 	mvn.w	r3, #2
 8003540:	e055      	b.n	80035ee <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800354c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003550:	d902      	bls.n	8003558 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003552:	f06f 0309 	mvn.w	r3, #9
 8003556:	e04a      	b.n	80035ee <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	08db      	lsrs	r3, r3, #3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	4413      	add	r3, r2
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003566:	8812      	ldrh	r2, [r2, #0]
 8003568:	b292      	uxth	r2, r2
 800356a:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3310      	adds	r3, #16
 8003570:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003578:	00da      	lsls	r2, r3, #3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2100      	movs	r1, #0
 800357e:	9100      	str	r1, [sp, #0]
 8003580:	69f9      	ldr	r1, [r7, #28]
 8003582:	68b8      	ldr	r0, [r7, #8]
 8003584:	f7fe fb72 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	2b00      	cmp	r3, #0
 800359e:	d021      	beq.n	80035e4 <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f1c3 0308 	rsb	r3, r3, #8
 80035ae:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	9302      	str	r3, [sp, #8]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9cd 2300 	strd	r2, r3, [sp]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	69b9      	ldr	r1, [r7, #24]
 80035c4:	68b8      	ldr	r0, [r7, #8]
 80035c6:	f7fe fc35 	bl	8001e34 <nunavutSetUxx>
 80035ca:	4603      	mov	r3, r0
 80035cc:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80035ce:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da02      	bge.n	80035dc <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 80035d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035da:	e008      	b.n	80035ee <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	@ 0x28
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800361e:	f06f 0301 	mvn.w	r3, #1
 8003622:	e043      	b.n	80036ac <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800362a:	4b22      	ldr	r3, [pc, #136]	@ (80036b4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 800362c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800363e:	2310      	movs	r3, #16
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	68b8      	ldr	r0, [r7, #8]
 8003646:	f7fe fc1b 	bl	8001e80 <nunavutGetU16>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3310      	adds	r3, #16
 8003658:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003664:	d902      	bls.n	800366c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003666:	f06f 0309 	mvn.w	r3, #9
 800366a:	e01f      	b.n	80036ac <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	f7fe fbb2 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4413      	add	r3, r2
 800368e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3307      	adds	r3, #7
 8003694:	f023 0307 	bic.w	r3, r3, #7
 8003698:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800369a:	69b9      	ldr	r1, [r7, #24]
 800369c:	6978      	ldr	r0, [r7, #20]
 800369e:	f7fe fab9 	bl	8001c14 <nunavutChooseMin>
 80036a2:	4603      	mov	r3, r0
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	080192d0 	.word	0x080192d0

080036b8 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	@ 0x30
 80036bc:	af04      	add	r7, sp, #16
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80036d6:	f06f 0301 	mvn.w	r3, #1
 80036da:	e05f      	b.n	800379c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f640 0207 	movw	r2, #2055	@ 0x807
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d802      	bhi.n	80036f4 <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80036ee:	f06f 0302 	mvn.w	r3, #2
 80036f2:	e053      	b.n	800379c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80036fe:	2b80      	cmp	r3, #128	@ 0x80
 8003700:	d902      	bls.n	8003708 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003702:	f06f 0309 	mvn.w	r3, #9
 8003706:	e049      	b.n	800379c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4413      	add	r3, r2
 8003716:	b2ca      	uxtb	r2, r1
 8003718:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3308      	adds	r3, #8
 800371e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003726:	011a      	lsls	r2, r3, #4
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2100      	movs	r1, #0
 800372c:	9100      	str	r1, [sp, #0]
 800372e:	69f9      	ldr	r1, [r7, #28]
 8003730:	68b8      	ldr	r0, [r7, #8]
 8003732:	f7fe fa9b 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	2b00      	cmp	r3, #0
 800374c:	d021      	beq.n	8003792 <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f1c3 0308 	rsb	r3, r3, #8
 800375c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	9302      	str	r3, [sp, #8]
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9cd 2300 	strd	r2, r3, [sp]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	68b8      	ldr	r0, [r7, #8]
 8003774:	f7fe fb5e 	bl	8001e34 <nunavutSetUxx>
 8003778:	4603      	mov	r3, r0
 800377a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800377c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003780:	2b00      	cmp	r3, #0
 8003782:	da02      	bge.n	800378a <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003784:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003788:	e008      	b.n	800379c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	08da      	lsrs	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	@ 0x28
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037ca:	f06f 0301 	mvn.w	r3, #1
 80037ce:	e04a      	b.n	8003866 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80037d6:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 80037d8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	3308      	adds	r3, #8
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d309      	bcc.n	8003808 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	08db      	lsrs	r3, r3, #3
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003806:	e003      	b.n	8003810 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3308      	adds	r3, #8
 8003814:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800381c:	2b80      	cmp	r3, #128	@ 0x80
 800381e:	d902      	bls.n	8003826 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003820:	f06f 0309 	mvn.w	r3, #9
 8003824:	e01f      	b.n	8003866 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	f7fe fad5 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4413      	add	r3, r2
 8003848:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3307      	adds	r3, #7
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	6978      	ldr	r0, [r7, #20]
 8003858:	f7fe f9dc 	bl	8001c14 <nunavutChooseMin>
 800385c:	4603      	mov	r3, r0
 800385e:	08da      	lsrs	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	080192d0 	.word	0x080192d0

08003874 <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	@ 0x30
 8003878:	af04      	add	r7, sp, #16
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003892:	f06f 0301 	mvn.w	r3, #1
 8003896:	e05f      	b.n	8003958 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	f640 0207 	movw	r2, #2055	@ 0x807
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d802      	bhi.n	80038b0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80038aa:	f06f 0302 	mvn.w	r3, #2
 80038ae:	e053      	b.n	8003958 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d902      	bls.n	80038c4 <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80038be:	f06f 0309 	mvn.w	r3, #9
 80038c2:	e049      	b.n	8003958 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	08db      	lsrs	r3, r3, #3
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4413      	add	r3, r2
 80038d2:	b2ca      	uxtb	r2, r1
 80038d4:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3308      	adds	r3, #8
 80038da:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2100      	movs	r1, #0
 80038e8:	9100      	str	r1, [sp, #0]
 80038ea:	69f9      	ldr	r1, [r7, #28]
 80038ec:	68b8      	ldr	r0, [r7, #8]
 80038ee:	f7fe f9bd 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038f8:	015b      	lsls	r3, r3, #5
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	2b00      	cmp	r3, #0
 8003908:	d021      	beq.n	800394e <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f1c3 0308 	rsb	r3, r3, #8
 8003918:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	9302      	str	r3, [sp, #8]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9cd 2300 	strd	r2, r3, [sp]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	68b8      	ldr	r0, [r7, #8]
 8003930:	f7fe fa80 	bl	8001e34 <nunavutSetUxx>
 8003934:	4603      	mov	r3, r0
 8003936:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003938:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800393c:	2b00      	cmp	r3, #0
 800393e:	da02      	bge.n	8003946 <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003940:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003944:	e008      	b.n	8003958 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	4413      	add	r3, r2
 800394c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	08da      	lsrs	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	@ 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003986:	f06f 0301 	mvn.w	r3, #1
 800398a:	e04a      	b.n	8003a22 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003992:	4b26      	ldr	r3, [pc, #152]	@ (8003a2c <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8003994:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3308      	adds	r3, #8
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d309      	bcc.n	80039c4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	08db      	lsrs	r3, r3, #3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80039c2:	e003      	b.n	80039cc <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3308      	adds	r3, #8
 80039d0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039d8:	2b40      	cmp	r3, #64	@ 0x40
 80039da:	d902      	bls.n	80039e2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039dc:	f06f 0309 	mvn.w	r3, #9
 80039e0:	e01f      	b.n	8003a22 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	f7fe f9f7 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039fe:	015b      	lsls	r3, r3, #5
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4413      	add	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3307      	adds	r3, #7
 8003a0a:	f023 0307 	bic.w	r3, r3, #7
 8003a0e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f7fe f8fe 	bl	8001c14 <nunavutChooseMin>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	080192d0 	.word	0x080192d0

08003a30 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	@ 0x30
 8003a34:	af04      	add	r7, sp, #16
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a4e:	f06f 0301 	mvn.w	r3, #1
 8003a52:	e05f      	b.n	8003b14 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f640 0207 	movw	r2, #2055	@ 0x807
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003a66:	f06f 0302 	mvn.w	r3, #2
 8003a6a:	e053      	b.n	8003b14 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d902      	bls.n	8003a80 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003a7a:	f06f 0309 	mvn.w	r3, #9
 8003a7e:	e049      	b.n	8003b14 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	b2ca      	uxtb	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3308      	adds	r3, #8
 8003a96:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	9100      	str	r1, [sp, #0]
 8003aa6:	69f9      	ldr	r1, [r7, #28]
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f7fe f8df 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d021      	beq.n	8003b0a <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f1c3 0308 	rsb	r3, r3, #8
 8003ad4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	9302      	str	r3, [sp, #8]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9cd 2300 	strd	r2, r3, [sp]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	69b9      	ldr	r1, [r7, #24]
 8003aea:	68b8      	ldr	r0, [r7, #8]
 8003aec:	f7fe f9a2 	bl	8001e34 <nunavutSetUxx>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003af4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da02      	bge.n	8003b02 <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003afc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003b00:	e008      	b.n	8003b14 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	08da      	lsrs	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b42:	f06f 0301 	mvn.w	r3, #1
 8003b46:	e04a      	b.n	8003bde <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003b4e:	4b26      	ldr	r3, [pc, #152]	@ (8003be8 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 8003b50:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3308      	adds	r3, #8
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d309      	bcc.n	8003b80 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	4413      	add	r3, r2
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003b7e:	e003      	b.n	8003b88 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d902      	bls.n	8003b9e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b98:	f06f 0309 	mvn.w	r3, #9
 8003b9c:	e01f      	b.n	8003bde <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ba6:	019b      	lsls	r3, r3, #6
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	f7fe f919 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003bba:	019b      	lsls	r3, r3, #6
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3307      	adds	r3, #7
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7fe f820 	bl	8001c14 <nunavutChooseMin>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	08da      	lsrs	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	080192d0 	.word	0x080192d0

08003bec <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	@ 0x30
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c0a:	f06f 0301 	mvn.w	r3, #1
 8003c0e:	e060      	b.n	8003cd2 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003c1e:	d202      	bcs.n	8003c26 <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003c20:	f06f 0302 	mvn.w	r3, #2
 8003c24:	e055      	b.n	8003cd2 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c34:	d902      	bls.n	8003c3c <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003c36:	f06f 0309 	mvn.w	r3, #9
 8003c3a:	e04a      	b.n	8003cd2 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	08db      	lsrs	r3, r3, #3
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	4413      	add	r3, r2
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003c4a:	8812      	ldrh	r2, [r2, #0]
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3310      	adds	r3, #16
 8003c54:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c5c:	00da      	lsls	r2, r3, #3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2100      	movs	r1, #0
 8003c62:	9100      	str	r1, [sp, #0]
 8003c64:	69f9      	ldr	r1, [r7, #28]
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f7fe f800 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d021      	beq.n	8003cc8 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f1c3 0308 	rsb	r3, r3, #8
 8003c92:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	9302      	str	r3, [sp, #8]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	68b8      	ldr	r0, [r7, #8]
 8003caa:	f7fe f8c3 	bl	8001e34 <nunavutSetUxx>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003cb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da02      	bge.n	8003cc0 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003cba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cbe:	e008      	b.n	8003cd2 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	@ 0x28
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d006      	beq.n	8003d02 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d02:	f06f 0301 	mvn.w	r3, #1
 8003d06:	e043      	b.n	8003d90 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003d0e:	4b22      	ldr	r3, [pc, #136]	@ (8003d98 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 8003d10:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003d22:	2310      	movs	r3, #16
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	69f9      	ldr	r1, [r7, #28]
 8003d28:	68b8      	ldr	r0, [r7, #8]
 8003d2a:	f7fe f8a9 	bl	8001e80 <nunavutGetU16>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d48:	d902      	bls.n	8003d50 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d4a:	f06f 0309 	mvn.w	r3, #9
 8003d4e:	e01f      	b.n	8003d90 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	f7fe f840 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4413      	add	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3307      	adds	r3, #7
 8003d78:	f023 0307 	bic.w	r3, r3, #7
 8003d7c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f7fd ff47 	bl	8001c14 <nunavutChooseMin>
 8003d86:	4603      	mov	r3, r0
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	080192d0 	.word	0x080192d0

08003d9c <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	@ 0x38
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003dba:	f06f 0301 	mvn.w	r3, #1
 8003dbe:	e08b      	b.n	8003ed8 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	f640 0207 	movw	r2, #2055	@ 0x807
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d802      	bhi.n	8003dd8 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003dd2:	f06f 0302 	mvn.w	r3, #2
 8003dd6:	e07f      	b.n	8003ed8 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003de2:	2b80      	cmp	r3, #128	@ 0x80
 8003de4:	d902      	bls.n	8003dec <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003de6:	f06f 0309 	mvn.w	r3, #9
 8003dea:	e075      	b.n	8003ed8 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	08db      	lsrs	r3, r3, #3
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4413      	add	r3, r2
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	3308      	adds	r3, #8
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	e034      	b.n	8003e74 <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 8003e16:	ed97 0a07 	vldr	s0, [r7, #28]
 8003e1a:	f7fd fed7 	bl	8001bcc <_ZSt8isfinitef>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 8003e24:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e28:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003ee0 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 8003e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e34:	d501      	bpl.n	8003e3a <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 8003e36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee4 <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 8003e38:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 8003e3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e3e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003ee8 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 8003e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4a:	dd01      	ble.n	8003e50 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 8003e4c:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 8003e4e:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 8003e50:	ed97 0a07 	vldr	s0, [r7, #28]
 8003e54:	f7fe f85a 	bl	8001f0c <nunavutFloat16Pack>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	08db      	lsrs	r3, r3, #3
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	4413      	add	r3, r2
 8003e64:	8aba      	ldrh	r2, [r7, #20]
 8003e66:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	3310      	adds	r3, #16
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	3301      	adds	r3, #1
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e7a:	6a3a      	ldr	r2, [r7, #32]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3c4      	bcc.n	8003e0a <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d021      	beq.n	8003ece <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f1c3 0308 	rsb	r3, r3, #8
 8003e98:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
 8003e9c:	9302      	str	r3, [sp, #8]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	68b8      	ldr	r0, [r7, #8]
 8003eb0:	f7fd ffc0 	bl	8001e34 <nunavutSetUxx>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003eb8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da02      	bge.n	8003ec6 <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8003ec0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ec4:	e008      	b.n	8003ed8 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eca:	4413      	add	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	08da      	lsrs	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	@ 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	c77fe000 	.word	0xc77fe000
 8003ee4:	c77fe000 	.word	0xc77fe000
 8003ee8:	477fe000 	.word	0x477fe000
 8003eec:	477fe000 	.word	0x477fe000

08003ef0 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003f16:	f06f 0301 	mvn.w	r3, #1
 8003f1a:	e054      	b.n	8003fc6 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003f22:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd0 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 8003f24:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d309      	bcc.n	8003f54 <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4413      	add	r3, r2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8003f52:	e003      	b.n	8003f5c <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    }
    offset_bits += 8U;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f68:	2b80      	cmp	r3, #128	@ 0x80
 8003f6a:	d902      	bls.n	8003f72 <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003f6c:	f06f 0309 	mvn.w	r3, #9
 8003f70:	e029      	b.n	8003fc6 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e012      	b.n	8003f9e <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	6979      	ldr	r1, [r7, #20]
 8003f7c:	68b8      	ldr	r0, [r7, #8]
 8003f7e:	f7fe f85b 	bl	8002038 <nunavutGetF16>
 8003f82:	eef0 7a40 	vmov.f32	s15, s0
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3310      	adds	r3, #16
 8003f96:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d3e6      	bcc.n	8003f78 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3307      	adds	r3, #7
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003fb4:	6939      	ldr	r1, [r7, #16]
 8003fb6:	69f8      	ldr	r0, [r7, #28]
 8003fb8:	f7fd fe2c 	bl	8001c14 <nunavutChooseMin>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	08da      	lsrs	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	080192d0 	.word	0x080192d0

08003fd4 <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	@ 0x30
 8003fd8:	af04      	add	r7, sp, #16
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ff2:	f06f 0301 	mvn.w	r3, #1
 8003ff6:	e05f      	b.n	80040b8 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	f640 0207 	movw	r2, #2055	@ 0x807
 8004006:	4293      	cmp	r3, r2
 8004008:	d802      	bhi.n	8004010 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800400a:	f06f 0302 	mvn.w	r3, #2
 800400e:	e053      	b.n	80040b8 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	d902      	bls.n	8004024 <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800401e:	f06f 0309 	mvn.w	r3, #9
 8004022:	e049      	b.n	80040b8 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4413      	add	r3, r2
 8004032:	b2ca      	uxtb	r2, r1
 8004034:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3308      	adds	r3, #8
 800403a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2100      	movs	r1, #0
 8004048:	9100      	str	r1, [sp, #0]
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	68b8      	ldr	r0, [r7, #8]
 800404e:	f7fd fe0d 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004058:	015b      	lsls	r3, r3, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d021      	beq.n	80040ae <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f1c3 0308 	rsb	r3, r3, #8
 8004078:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9cd 2300 	strd	r2, r3, [sp]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	68b8      	ldr	r0, [r7, #8]
 8004090:	f7fd fed0 	bl	8001e34 <nunavutSetUxx>
 8004094:	4603      	mov	r3, r0
 8004096:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004098:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800409c:	2b00      	cmp	r3, #0
 800409e:	da02      	bge.n	80040a6 <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80040a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80040a4:	e008      	b.n	80040b8 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	08da      	lsrs	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	@ 0x28
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80040e6:	f06f 0301 	mvn.w	r3, #1
 80040ea:	e04a      	b.n	8004182 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80040f2:	4b26      	ldr	r3, [pc, #152]	@ (800418c <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 80040f4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3308      	adds	r3, #8
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d309      	bcc.n	8004124 <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	08db      	lsrs	r3, r3, #3
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004122:	e003      	b.n	800412c <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3308      	adds	r3, #8
 8004130:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d902      	bls.n	8004142 <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800413c:	f06f 0309 	mvn.w	r3, #9
 8004140:	e01f      	b.n	8004182 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800414a:	015b      	lsls	r3, r3, #5
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	f7fd fe47 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800415e:	015b      	lsls	r3, r3, #5
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4413      	add	r3, r2
 8004164:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3307      	adds	r3, #7
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7fd fd4e 	bl	8001c14 <nunavutChooseMin>
 8004178:	4603      	mov	r3, r0
 800417a:	08da      	lsrs	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	080192d0 	.word	0x080192d0

08004190 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	@ 0x30
 8004194:	af04      	add	r7, sp, #16
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80041ae:	f06f 0301 	mvn.w	r3, #1
 80041b2:	e05f      	b.n	8004274 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	f640 0207 	movw	r2, #2055	@ 0x807
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80041c6:	f06f 0302 	mvn.w	r3, #2
 80041ca:	e053      	b.n	8004274 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d902      	bls.n	80041e0 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80041da:	f06f 0309 	mvn.w	r3, #9
 80041de:	e049      	b.n	8004274 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	b2ca      	uxtb	r2, r1
 80041f0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3308      	adds	r3, #8
 80041f6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041fe:	019a      	lsls	r2, r3, #6
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2100      	movs	r1, #0
 8004204:	9100      	str	r1, [sp, #0]
 8004206:	69f9      	ldr	r1, [r7, #28]
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f7fd fd2f 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d021      	beq.n	800426a <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f1c3 0308 	rsb	r3, r3, #8
 8004234:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	9302      	str	r3, [sp, #8]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9cd 2300 	strd	r2, r3, [sp]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	68b8      	ldr	r0, [r7, #8]
 800424c:	f7fd fdf2 	bl	8001e34 <nunavutSetUxx>
 8004250:	4603      	mov	r3, r0
 8004252:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004254:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da02      	bge.n	8004262 <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 800425c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004260:	e008      	b.n	8004274 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	08da      	lsrs	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	@ 0x28
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80042a2:	f06f 0301 	mvn.w	r3, #1
 80042a6:	e04a      	b.n	800433e <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80042ae:	4b26      	ldr	r3, [pc, #152]	@ (8004348 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 80042b0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	3308      	adds	r3, #8
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d309      	bcc.n	80042e0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	4413      	add	r3, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80042de:	e003      	b.n	80042e8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3308      	adds	r3, #8
 80042ec:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d902      	bls.n	80042fe <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80042f8:	f06f 0309 	mvn.w	r3, #9
 80042fc:	e01f      	b.n	800433e <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004306:	019b      	lsls	r3, r3, #6
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	f7fd fd69 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800431a:	019b      	lsls	r3, r3, #6
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3307      	adds	r3, #7
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7fd fc70 	bl	8001c14 <nunavutChooseMin>
 8004334:	4603      	mov	r3, r0
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	080192d0 	.word	0x080192d0

0800434c <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800436a:	f06f 0301 	mvn.w	r3, #1
 800436e:	e003      	b.n	8004378 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80043aa:	f06f 0301 	mvn.w	r3, #1
 80043ae:	e008      	b.n	80043c2 <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80043b6:	4b06      	ldr	r3, [pc, #24]	@ (80043d0 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 80043b8:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	080192d0 	.word	0x080192d0

080043d4 <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08c      	sub	sp, #48	@ 0x30
 80043d8:	af04      	add	r7, sp, #16
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <uavcan_primitive_String_1_0_serialize_+0x1e>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <uavcan_primitive_String_1_0_serialize_+0x1e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80043f2:	f06f 0301 	mvn.w	r3, #1
 80043f6:	e060      	b.n	80044ba <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8004406:	d202      	bcs.n	800440e <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004408:	f06f 0302 	mvn.w	r3, #2
 800440c:	e055      	b.n	80044ba <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800441c:	d902      	bls.n	8004424 <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800441e:	f06f 0309 	mvn.w	r3, #9
 8004422:	e04a      	b.n	80044ba <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4413      	add	r3, r2
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004432:	8812      	ldrh	r2, [r2, #0]
 8004434:	b292      	uxth	r2, r2
 8004436:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3310      	adds	r3, #16
 800443c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004444:	00da      	lsls	r2, r3, #3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2100      	movs	r1, #0
 800444a:	9100      	str	r1, [sp, #0]
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f7fd fc0c 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	2b00      	cmp	r3, #0
 800446a:	d021      	beq.n	80044b0 <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f1c3 0308 	rsb	r3, r3, #8
 800447a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9cd 2300 	strd	r2, r3, [sp]
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	69b9      	ldr	r1, [r7, #24]
 8004490:	68b8      	ldr	r0, [r7, #8]
 8004492:	f7fd fccf 	bl	8001e34 <nunavutSetUxx>
 8004496:	4603      	mov	r3, r0
 8004498:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800449a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da02      	bge.n	80044a8 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 80044a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80044a6:	e008      	b.n	80044ba <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	08da      	lsrs	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	@ 0x28
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <uavcan_primitive_String_1_0_deserialize_+0x26>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <uavcan_primitive_String_1_0_deserialize_+0x26>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80044ea:	f06f 0301 	mvn.w	r3, #1
 80044ee:	e043      	b.n	8004578 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80044f6:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 80044f8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800450a:	2310      	movs	r3, #16
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	69f9      	ldr	r1, [r7, #28]
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	f7fd fcb5 	bl	8001e80 <nunavutGetU16>
 8004516:	4603      	mov	r3, r0
 8004518:	461a      	mov	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3310      	adds	r3, #16
 8004524:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800452c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004530:	d902      	bls.n	8004538 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004532:	f06f 0309 	mvn.w	r3, #9
 8004536:	e01f      	b.n	8004578 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	f7fd fc4c 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4413      	add	r3, r2
 800455a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	3307      	adds	r3, #7
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	6978      	ldr	r0, [r7, #20]
 800456a:	f7fd fb53 	bl	8001c14 <nunavutChooseMin>
 800456e:	4603      	mov	r3, r0
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	080192d0 	.word	0x080192d0

08004584 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08c      	sub	sp, #48	@ 0x30
 8004588:	af04      	add	r7, sp, #16
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80045a2:	f06f 0301 	mvn.w	r3, #1
 80045a6:	e060      	b.n	800466a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80045b6:	d202      	bcs.n	80045be <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80045b8:	f06f 0302 	mvn.w	r3, #2
 80045bc:	e055      	b.n	800466a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045cc:	d902      	bls.n	80045d4 <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80045ce:	f06f 0309 	mvn.w	r3, #9
 80045d2:	e04a      	b.n	800466a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	08db      	lsrs	r3, r3, #3
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	4413      	add	r3, r2
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80045e2:	8812      	ldrh	r2, [r2, #0]
 80045e4:	b292      	uxth	r2, r2
 80045e6:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3310      	adds	r3, #16
 80045ec:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045f4:	00da      	lsls	r2, r3, #3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2100      	movs	r1, #0
 80045fa:	9100      	str	r1, [sp, #0]
 80045fc:	69f9      	ldr	r1, [r7, #28]
 80045fe:	68b8      	ldr	r0, [r7, #8]
 8004600:	f7fd fb34 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	2b00      	cmp	r3, #0
 800461a:	d021      	beq.n	8004660 <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f1c3 0308 	rsb	r3, r3, #8
 800462a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9cd 2300 	strd	r2, r3, [sp]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	69b9      	ldr	r1, [r7, #24]
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f7fd fbf7 	bl	8001e34 <nunavutSetUxx>
 8004646:	4603      	mov	r3, r0
 8004648:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800464a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800464e:	2b00      	cmp	r3, #0
 8004650:	da02      	bge.n	8004658 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004652:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004656:	e008      	b.n	800466a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	08da      	lsrs	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	@ 0x28
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d006      	beq.n	800469a <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800469a:	f06f 0301 	mvn.w	r3, #1
 800469e:	e043      	b.n	8004728 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80046a6:	4b22      	ldr	r3, [pc, #136]	@ (8004730 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 80046a8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80046ba:	2310      	movs	r3, #16
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	68b8      	ldr	r0, [r7, #8]
 80046c2:	f7fd fbdd 	bl	8001e80 <nunavutGetU16>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3310      	adds	r3, #16
 80046d4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e0:	d902      	bls.n	80046e8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80046e2:	f06f 0309 	mvn.w	r3, #9
 80046e6:	e01f      	b.n	8004728 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	f7fd fb74 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	3307      	adds	r3, #7
 8004710:	f023 0307 	bic.w	r3, r3, #7
 8004714:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	6978      	ldr	r0, [r7, #20]
 800471a:	f7fd fa7b 	bl	8001c14 <nunavutChooseMin>
 800471e:	4603      	mov	r3, r0
 8004720:	08da      	lsrs	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	080192d0 	.word	0x080192d0

08004734 <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b09e      	sub	sp, #120	@ 0x78
 8004738:	af04      	add	r7, sp, #16
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <uavcan_register_Value_1_0_serialize_+0x1e>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <uavcan_register_Value_1_0_serialize_+0x1e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004752:	f06f 0301 	mvn.w	r3, #1
 8004756:	e248      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	663b      	str	r3, [r7, #96]	@ 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 800475e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	f640 0217 	movw	r2, #2071	@ 0x817
 8004766:	4293      	cmp	r3, r2
 8004768:	d802      	bhi.n	8004770 <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800476a:	f06f 0302 	mvn.w	r3, #2
 800476e:	e23c      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	667b      	str	r3, [r7, #100]	@ 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8004774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	4413      	add	r3, r2
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	f892 2208 	ldrb.w	r2, [r2, #520]	@ 0x208
 8004782:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004786:	3308      	adds	r3, #8
 8004788:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004790:	2b00      	cmp	r3, #0
 8004792:	d11b      	bne.n	80047cc <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 8004794:	2300      	movs	r3, #0
 8004796:	64bb      	str	r3, [r7, #72]	@ 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8004798:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 800479a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800479c:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	4413      	add	r3, r2
 80047a2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7ff fdd0 	bl	800434c <uavcan_primitive_Empty_1_0_serialize_>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
        if (_err0_ < 0)
 80047b2:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	da02      	bge.n	80047c0 <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 80047ba:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 80047be:	e214      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80047c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047c6:	4413      	add	r3, r2
 80047c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ca:	e1de      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d11c      	bne.n	8004810 <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 80047d6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80047da:	647b      	str	r3, [r7, #68]	@ 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80047dc:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 80047de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047e0:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4413      	add	r3, r2
 80047e6:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80047ea:	4619      	mov	r1, r3
 80047ec:	f7ff fdf2 	bl	80043d4 <uavcan_primitive_String_1_0_serialize_>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (_err1_ < 0)
 80047f6:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da02      	bge.n	8004804 <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 80047fe:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8004802:	e1f2      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8004804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800480a:	4413      	add	r3, r2
 800480c:	667b      	str	r3, [r7, #100]	@ 0x64
 800480e:	e1bc      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004816:	2b02      	cmp	r3, #2
 8004818:	d11c      	bne.n	8004854 <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 800481a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800481e:	643b      	str	r3, [r7, #64]	@ 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004820:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 8004822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004824:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800482e:	4619      	mov	r1, r3
 8004830:	f7ff fea8 	bl	8004584 <uavcan_primitive_Unstructured_1_0_serialize_>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (_err2_ < 0)
 800483a:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800483e:	2b00      	cmp	r3, #0
 8004840:	da02      	bge.n	8004848 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 8004842:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004846:	e1d0      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8004848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800484e:	4413      	add	r3, r2
 8004850:	667b      	str	r3, [r7, #100]	@ 0x64
 8004852:	e19a      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800485a:	2b03      	cmp	r3, #3
 800485c:	d11c      	bne.n	8004898 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 800485e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004864:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 8004866:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004868:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4413      	add	r3, r2
 800486e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004872:	4619      	mov	r1, r3
 8004874:	f7fe fada 	bl	8002e2c <uavcan_primitive_array_Bit_1_0_serialize_>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        if (_err3_ < 0)
 800487e:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8004882:	2b00      	cmp	r3, #0
 8004884:	da02      	bge.n	800488c <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 8004886:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 800488a:	e1ae      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 800488c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004892:	4413      	add	r3, r2
 8004894:	667b      	str	r3, [r7, #100]	@ 0x64
 8004896:	e178      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d11c      	bne.n	80048dc <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 80048a2:	f240 1301 	movw	r3, #257	@ 0x101
 80048a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80048a8:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 80048aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ac:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80048b6:	4619      	mov	r1, r3
 80048b8:	f7fe fd48 	bl	800334c <uavcan_primitive_array_Integer64_1_0_serialize_>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        if (_err4_ < 0)
 80048c2:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	da02      	bge.n	80048d0 <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 80048ca:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80048ce:	e18c      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048d6:	4413      	add	r3, r2
 80048d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80048da:	e156      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d11c      	bne.n	8004920 <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 80048e6:	f240 1301 	movw	r3, #257	@ 0x101
 80048ea:	637b      	str	r3, [r7, #52]	@ 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 80048ec:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 80048ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048f0:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80048fa:	4619      	mov	r1, r3
 80048fc:	f7fe fc48 	bl	8003190 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (_err5_ < 0)
 8004906:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 800490a:	2b00      	cmp	r3, #0
 800490c:	da02      	bge.n	8004914 <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 800490e:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8004912:	e16a      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800491a:	4413      	add	r3, r2
 800491c:	667b      	str	r3, [r7, #100]	@ 0x64
 800491e:	e134      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004926:	2b06      	cmp	r3, #6
 8004928:	d11c      	bne.n	8004964 <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 800492a:	f240 1301 	movw	r3, #257	@ 0x101
 800492e:	633b      	str	r3, [r7, #48]	@ 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004930:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 8004932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004934:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4413      	add	r3, r2
 800493a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800493e:	4619      	mov	r1, r3
 8004940:	f7fe fb48 	bl	8002fd4 <uavcan_primitive_array_Integer16_1_0_serialize_>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (_err6_ < 0)
 800494a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800494e:	2b00      	cmp	r3, #0
 8004950:	da02      	bge.n	8004958 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 8004952:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004956:	e148      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800495e:	4413      	add	r3, r2
 8004960:	667b      	str	r3, [r7, #100]	@ 0x64
 8004962:	e112      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800496a:	2b07      	cmp	r3, #7
 800496c:	d11c      	bne.n	80049a8 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 800496e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004974:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8004976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004978:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4413      	add	r3, r2
 800497e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004982:	4619      	mov	r1, r3
 8004984:	f7fe fdc0 	bl	8003508 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        if (_err7_ < 0)
 800498e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8004992:	2b00      	cmp	r3, #0
 8004994:	da02      	bge.n	800499c <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 8004996:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800499a:	e126      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 800499c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049a2:	4413      	add	r3, r2
 80049a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80049a6:	e0f0      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d11c      	bne.n	80049ec <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 80049b2:	f240 1301 	movw	r3, #257	@ 0x101
 80049b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 80049b8:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 80049ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049bc:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	4413      	add	r3, r2
 80049c2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7ff f832 	bl	8003a30 <uavcan_primitive_array_Natural64_1_0_serialize_>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
        if (_err8_ < 0)
 80049d2:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da02      	bge.n	80049e0 <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 80049da:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80049de:	e104      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049e6:	4413      	add	r3, r2
 80049e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80049ea:	e0ce      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80049f2:	2b09      	cmp	r3, #9
 80049f4:	d11c      	bne.n	8004a30 <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 80049f6:	f240 1301 	movw	r3, #257	@ 0x101
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 80049fc:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 80049fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a00:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fe ff32 	bl	8003874 <uavcan_primitive_array_Natural32_1_0_serialize_>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
        if (_err9_ < 0)
 8004a16:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da02      	bge.n	8004a24 <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 8004a1e:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8004a22:	e0e2      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a2a:	4413      	add	r3, r2
 8004a2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a2e:	e0ac      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004a36:	2b0a      	cmp	r3, #10
 8004a38:	d11c      	bne.n	8004a74 <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8004a3a:	f240 1301 	movw	r3, #257	@ 0x101
 8004a3e:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004a40:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 8004a42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a44:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f107 0220 	add.w	r2, r7, #32
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7fe fe32 	bl	80036b8 <uavcan_primitive_array_Natural16_1_0_serialize_>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        if (_err10_ < 0)
 8004a5a:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da02      	bge.n	8004a68 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 8004a62:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8004a66:	e0c0      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a6e:	4413      	add	r3, r2
 8004a70:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a72:	e08a      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004a7a:	2b0b      	cmp	r3, #11
 8004a7c:	d11c      	bne.n	8004ab8 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 8004a7e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004a82:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004a84:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 8004a86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a88:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f107 021c 	add.w	r2, r7, #28
 8004a92:	4619      	mov	r1, r3
 8004a94:	f7ff f8aa 	bl	8003bec <uavcan_primitive_array_Natural8_1_0_serialize_>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (_err11_ < 0)
 8004a9e:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da02      	bge.n	8004aac <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 8004aa6:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 8004aaa:	e09e      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ab2:	4413      	add	r3, r2
 8004ab4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ab6:	e068      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d11c      	bne.n	8004afc <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 8004ac2:	f240 1301 	movw	r3, #257	@ 0x101
 8004ac6:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004ac8:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 8004aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004acc:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f107 0218 	add.w	r2, r7, #24
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f7ff fb5a 	bl	8004190 <uavcan_primitive_array_Real64_1_0_serialize_>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        if (_err12_ < 0)
 8004ae2:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da02      	bge.n	8004af0 <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8004aea:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 8004aee:	e07c      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004af6:	4413      	add	r3, r2
 8004af8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004afa:	e046      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004b02:	2b0d      	cmp	r3, #13
 8004b04:	d11c      	bne.n	8004b40 <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 8004b06:	f240 1301 	movw	r3, #257	@ 0x101
 8004b0a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004b0c:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8004b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b10:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	4413      	add	r3, r2
 8004b16:	f107 0214 	add.w	r2, r7, #20
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f7ff fa5a 	bl	8003fd4 <uavcan_primitive_array_Real32_1_0_serialize_>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        if (_err13_ < 0)
 8004b26:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da02      	bge.n	8004b34 <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 8004b2e:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 8004b32:	e05a      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b3a:	4413      	add	r3, r2
 8004b3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b3e:	e024      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004b46:	2b0e      	cmp	r3, #14
 8004b48:	d11c      	bne.n	8004b84 <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 8004b4a:	f240 1301 	movw	r3, #257	@ 0x101
 8004b4e:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004b50:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 8004b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b54:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f107 0210 	add.w	r2, r7, #16
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f7ff f91c 	bl	8003d9c <uavcan_primitive_array_Real16_1_0_serialize_>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        if (_err14_ < 0)
 8004b6a:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da02      	bge.n	8004b78 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 8004b72:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8004b76:	e038      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b7e:	4413      	add	r3, r2
 8004b80:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b82:	e002      	b.n	8004b8a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8004b84:	f06f 030a 	mvn.w	r3, #10
 8004b88:	e02f      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004b8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d025      	beq.n	8004be0 <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f1c3 0308 	rsb	r3, r3, #8
 8004ba2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004ba6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8004baa:	9302      	str	r3, [sp, #8]
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8004bb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004bbc:	68b8      	ldr	r0, [r7, #8]
 8004bbe:	f7fd f939 	bl	8001e34 <nunavutSetUxx>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        if (_err15_ < 0)
 8004bc8:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	da02      	bge.n	8004bd6 <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8004bd0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004bd4:	e009      	b.n	8004bea <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 8004bd6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8004bda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bdc:	4413      	add	r3, r2
 8004bde:	667b      	str	r3, [r7, #100]	@ 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be2:	08da      	lsrs	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3768      	adds	r7, #104	@ 0x68
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b09a      	sub	sp, #104	@ 0x68
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <uavcan_register_Value_1_0_deserialize_+0x26>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <uavcan_register_Value_1_0_deserialize_+0x26>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <uavcan_register_Value_1_0_deserialize_+0x2c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004c1a:	f06f 0301 	mvn.w	r3, #1
 8004c1e:	e29b      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004c26:	4bb0      	ldr	r3, [pc, #704]	@ (8004ee8 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 8004c28:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	663b      	str	r3, [r7, #96]	@ 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004c30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t offset_bits = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	667b      	str	r3, [r7, #100]	@ 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d308      	bcc.n	8004c56 <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 8004c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c46:	08db      	lsrs	r3, r3, #3
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 8004c54:	e003      	b.n	8004c5e <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
    }
    offset_bits += 8U;
 8004c5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c60:	3308      	adds	r3, #8
 8004c62:	667b      	str	r3, [r7, #100]	@ 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d123      	bne.n	8004cb6 <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004c6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c70:	08db      	lsrs	r3, r3, #3
 8004c72:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fc ffcd 	bl	8001c14 <nunavutChooseMin>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	64bb      	str	r3, [r7, #72]	@ 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004c82:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 8004c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c86:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004c90:	4619      	mov	r1, r3
 8004c92:	f7ff fb77 	bl	8004384 <uavcan_primitive_Empty_1_0_deserialize_>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            if (_err16_ < 0)
 8004c9c:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	da02      	bge.n	8004caa <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 8004ca4:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8004ca8:	e256      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8004caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004cb0:	4413      	add	r3, r2
 8004cb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cb4:	e242      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d123      	bne.n	8004d08 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cc2:	08db      	lsrs	r3, r3, #3
 8004cc4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fc ffa4 	bl	8001c14 <nunavutChooseMin>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	647b      	str	r3, [r7, #68]	@ 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004cd4:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8004cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cd8:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7ff fbee 	bl	80044c4 <uavcan_primitive_String_1_0_deserialize_>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            if (_err17_ < 0)
 8004cee:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da02      	bge.n	8004cfc <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 8004cf6:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8004cfa:	e22d      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d02:	4413      	add	r3, r2
 8004d04:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d06:	e219      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d123      	bne.n	8004d5a <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d14:	08db      	lsrs	r3, r3, #3
 8004d16:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fc ff7b 	bl	8001c14 <nunavutChooseMin>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	643b      	str	r3, [r7, #64]	@ 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004d26:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8004d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d2a:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004d34:	4619      	mov	r1, r3
 8004d36:	f7ff fc9d 	bl	8004674 <uavcan_primitive_Unstructured_1_0_deserialize_>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if (_err18_ < 0)
 8004d40:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da02      	bge.n	8004d4e <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 8004d48:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004d4c:	e204      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d54:	4413      	add	r3, r2
 8004d56:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d58:	e1f0      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d123      	bne.n	8004dac <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d66:	08db      	lsrs	r3, r3, #3
 8004d68:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc ff52 	bl	8001c14 <nunavutChooseMin>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004d78:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 8004d7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d7c:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004d86:	4619      	mov	r1, r3
 8004d88:	f7fe f8c6 	bl	8002f18 <uavcan_primitive_array_Bit_1_0_deserialize_>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
            if (_err19_ < 0)
 8004d92:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da02      	bge.n	8004da0 <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 8004d9a:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8004d9e:	e1db      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8004da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004da6:	4413      	add	r3, r2
 8004da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004daa:	e1c7      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d123      	bne.n	8004dfe <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db8:	08db      	lsrs	r3, r3, #3
 8004dba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fc ff29 	bl	8001c14 <nunavutChooseMin>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004dca:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dce:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7fe fb2d 	bl	8003438 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
            if (_err20_ < 0)
 8004de4:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da02      	bge.n	8004df2 <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8004dec:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8004df0:	e1b2      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004df8:	4413      	add	r3, r2
 8004dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dfc:	e19e      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004e04:	2b05      	cmp	r3, #5
 8004e06:	d123      	bne.n	8004e50 <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e0a:	08db      	lsrs	r3, r3, #3
 8004e0c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc ff00 	bl	8001c14 <nunavutChooseMin>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004e1c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8004e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e20:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4413      	add	r3, r2
 8004e26:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f7fe fa26 	bl	800327c <uavcan_primitive_array_Integer32_1_0_deserialize_>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (_err21_ < 0)
 8004e36:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da02      	bge.n	8004e44 <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 8004e3e:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8004e42:	e189      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e4a:	4413      	add	r3, r2
 8004e4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e4e:	e175      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d123      	bne.n	8004ea2 <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e5c:	08db      	lsrs	r3, r3, #3
 8004e5e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fc fed7 	bl	8001c14 <nunavutChooseMin>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004e6e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 8004e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e72:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	4413      	add	r3, r2
 8004e78:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f7fe f91f 	bl	80030c0 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (_err22_ < 0)
 8004e88:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	da02      	bge.n	8004e96 <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 8004e90:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004e94:	e160      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e9c:	4413      	add	r3, r2
 8004e9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ea0:	e14c      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004ea8:	2b07      	cmp	r3, #7
 8004eaa:	d125      	bne.n	8004ef8 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eae:	08db      	lsrs	r3, r3, #3
 8004eb0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fc feae 	bl	8001c14 <nunavutChooseMin>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004ec0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8004ec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ec4:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f7fe fb92 	bl	80035f8 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            if (_err23_ < 0)
 8004eda:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da04      	bge.n	8004eec <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 8004ee2:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8004ee6:	e137      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
 8004ee8:	080192d0 	.word	0x080192d0
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ef2:	4413      	add	r3, r2
 8004ef4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ef6:	e121      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d123      	bne.n	8004f4a <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fc fe83 	bl	8001c14 <nunavutChooseMin>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8004f16:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8004f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f1a:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004f24:	4619      	mov	r1, r3
 8004f26:	f7fe fdf9 	bl	8003b1c <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            if (_err24_ < 0)
 8004f30:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	da02      	bge.n	8004f3e <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 8004f38:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8004f3c:	e10c      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f44:	4413      	add	r3, r2
 8004f46:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f48:	e0f8      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d123      	bne.n	8004f9c <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f56:	08db      	lsrs	r3, r3, #3
 8004f58:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fc fe5a 	bl	8001c14 <nunavutChooseMin>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8004f68:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 8004f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f6c:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004f76:	4619      	mov	r1, r3
 8004f78:	f7fe fcf2 	bl	8003960 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
            if (_err25_ < 0)
 8004f82:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da02      	bge.n	8004f90 <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 8004f8a:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8004f8e:	e0e3      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f96:	4413      	add	r3, r2
 8004f98:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f9a:	e0cf      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004fa2:	2b0a      	cmp	r3, #10
 8004fa4:	d123      	bne.n	8004fee <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004fa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fc fe31 	bl	8001c14 <nunavutChooseMin>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8004fba:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 8004fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbe:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f107 0220 	add.w	r2, r7, #32
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f7fe fbeb 	bl	80037a4 <uavcan_primitive_array_Natural16_1_0_deserialize_>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            if (_err26_ < 0)
 8004fd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	da02      	bge.n	8004fe2 <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 8004fdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004fe0:	e0ba      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004fe8:	4413      	add	r3, r2
 8004fea:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fec:	e0a6      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004ff4:	2b0b      	cmp	r3, #11
 8004ff6:	d123      	bne.n	8005040 <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc fe08 	bl	8001c14 <nunavutChooseMin>
 8005004:	4602      	mov	r2, r0
 8005006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800500c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 800500e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005010:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	4413      	add	r3, r2
 8005016:	f107 021c 	add.w	r2, r7, #28
 800501a:	4619      	mov	r1, r3
 800501c:	f7fe fe5e 	bl	8003cdc <uavcan_primitive_array_Natural8_1_0_deserialize_>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            if (_err27_ < 0)
 8005026:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800502a:	2b00      	cmp	r3, #0
 800502c:	da02      	bge.n	8005034 <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 800502e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8005032:	e091      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800503a:	4413      	add	r3, r2
 800503c:	667b      	str	r3, [r7, #100]	@ 0x64
 800503e:	e07d      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005046:	2b0c      	cmp	r3, #12
 8005048:	d123      	bne.n	8005092 <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800504a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005050:	4618      	mov	r0, r3
 8005052:	f7fc fddf 	bl	8001c14 <nunavutChooseMin>
 8005056:	4602      	mov	r2, r0
 8005058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 800505e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 8005060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005062:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	4413      	add	r3, r2
 8005068:	f107 0218 	add.w	r2, r7, #24
 800506c:	4619      	mov	r1, r3
 800506e:	f7ff f905 	bl	800427c <uavcan_primitive_array_Real64_1_0_deserialize_>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
            if (_err28_ < 0)
 8005078:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 800507c:	2b00      	cmp	r3, #0
 800507e:	da02      	bge.n	8005086 <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 8005080:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 8005084:	e068      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800508c:	4413      	add	r3, r2
 800508e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005090:	e054      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005098:	2b0d      	cmp	r3, #13
 800509a:	d123      	bne.n	80050e4 <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800509c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800509e:	08db      	lsrs	r3, r3, #3
 80050a0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fdb6 	bl	8001c14 <nunavutChooseMin>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80050b0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 80050b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050b4:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	f107 0214 	add.w	r2, r7, #20
 80050be:	4619      	mov	r1, r3
 80050c0:	f7fe fffe 	bl	80040c0 <uavcan_primitive_array_Real32_1_0_deserialize_>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
            if (_err29_ < 0)
 80050ca:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da02      	bge.n	80050d8 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 80050d2:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 80050d6:	e03f      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050de:	4413      	add	r3, r2
 80050e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80050e2:	e02b      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80050ea:	2b0e      	cmp	r3, #14
 80050ec:	d123      	bne.n	8005136 <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80050ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fc fd8d 	bl	8001c14 <nunavutChooseMin>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005102:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 8005104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005106:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	4413      	add	r3, r2
 800510c:	f107 0210 	add.w	r2, r7, #16
 8005110:	4619      	mov	r1, r3
 8005112:	f7fe feed 	bl	8003ef0 <uavcan_primitive_array_Real16_1_0_deserialize_>
 8005116:	4603      	mov	r3, r0
 8005118:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
            if (_err30_ < 0)
 800511c:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8005120:	2b00      	cmp	r3, #0
 8005122:	da02      	bge.n	800512a <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 8005124:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8005128:	e016      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005130:	4413      	add	r3, r2
 8005132:	667b      	str	r3, [r7, #100]	@ 0x64
 8005134:	e002      	b.n	800513c <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8005136:	f06f 030a 	mvn.w	r3, #10
 800513a:	e00d      	b.n	8005158 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800513c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800513e:	3307      	adds	r3, #7
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	667b      	str	r3, [r7, #100]	@ 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005146:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8005148:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800514a:	f7fc fd63 	bl	8001c14 <nunavutChooseMin>
 800514e:	4603      	mov	r3, r0
 8005150:	08da      	lsrs	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3768      	adds	r7, #104	@ 0x68
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	@ 0x30
 8005164:	af04      	add	r7, sp, #16
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800517e:	f06f 0301 	mvn.w	r3, #1
 8005182:	e043      	b.n	800520c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	2b37      	cmp	r3, #55	@ 0x37
 8005190:	d802      	bhi.n	8005198 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005192:	f06f 0302 	mvn.w	r3, #2
 8005196:	e039      	b.n	800520c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	08db      	lsrs	r3, r3, #3
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4413      	add	r3, r2
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	2207      	movs	r2, #7
 80051a8:	4618      	mov	r0, r3
 80051aa:	f010 f860 	bl	801526e <memmove>
        offset_bits += 56U;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3338      	adds	r3, #56	@ 0x38
 80051b2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d021      	beq.n	8005202 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f1c3 0308 	rsb	r3, r3, #8
 80051cc:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	9302      	str	r3, [sp, #8]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	e9cd 2300 	strd	r2, r3, [sp]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	68b8      	ldr	r0, [r7, #8]
 80051e4:	f7fc fe26 	bl	8001e34 <nunavutSetUxx>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80051ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	da02      	bge.n	80051fa <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 80051f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80051f8:	e008      	b.n	800520c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	08da      	lsrs	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	@ 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800523a:	f06f 0301 	mvn.w	r3, #1
 800523e:	e065      	b.n	800530c <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005246:	4b33      	ldr	r3, [pc, #204]	@ (8005314 <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8005248:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	08db      	lsrs	r3, r3, #3
 800525e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005260:	4618      	mov	r0, r3
 8005262:	f7fc fcd7 	bl	8001c14 <nunavutChooseMin>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 800526e:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	4413      	add	r3, r2
 8005278:	f107 0214 	add.w	r2, r7, #20
 800527c:	4619      	mov	r1, r3
 800527e:	f7fd fd6d 	bl	8002d5c <uavcan_register_Name_1_0_deserialize_>
 8005282:	4603      	mov	r3, r0
 8005284:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8005286:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800528a:	2b00      	cmp	r3, #0
 800528c:	da02      	bge.n	8005294 <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 800528e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005292:	e03b      	b.n	800530c <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3307      	adds	r3, #7
 80052a2:	f023 0307 	bic.w	r3, r3, #7
 80052a6:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	08db      	lsrs	r3, r3, #3
 80052ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fc fcb0 	bl	8001c14 <nunavutChooseMin>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 7084 	add.w	r0, r3, #264	@ 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4413      	add	r3, r2
 80052ca:	f107 0210 	add.w	r2, r7, #16
 80052ce:	4619      	mov	r1, r3
 80052d0:	f7ff fc90 	bl	8004bf4 <uavcan_register_Value_1_0_deserialize_>
 80052d4:	4603      	mov	r3, r0
 80052d6:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 80052d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	da02      	bge.n	80052e6 <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 80052e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80052e4:	e012      	b.n	800530c <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3307      	adds	r3, #7
 80052f4:	f023 0307 	bic.w	r3, r3, #7
 80052f8:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80052fa:	6a39      	ldr	r1, [r7, #32]
 80052fc:	69f8      	ldr	r0, [r7, #28]
 80052fe:	f7fc fc89 	bl	8001c14 <nunavutChooseMin>
 8005302:	4603      	mov	r3, r0
 8005304:	08da      	lsrs	r2, r3, #3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3728      	adds	r7, #40	@ 0x28
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	080192d0 	.word	0x080192d0

08005318 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	@ 0x38
 800531c:	af04      	add	r7, sp, #16
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005336:	f06f 0301 	mvn.w	r3, #1
 800533a:	e0f0      	b.n	800551e <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	f640 0257 	movw	r2, #2135	@ 0x857
 800534a:	4293      	cmp	r3, r2
 800534c:	d802      	bhi.n	8005354 <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800534e:	f06f 0302 	mvn.w	r3, #2
 8005352:	e0e4      	b.n	800551e <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8005358:	2307      	movs	r3, #7
 800535a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 800535c:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4413      	add	r3, r2
 8005366:	f107 0214 	add.w	r2, r7, #20
 800536a:	4619      	mov	r1, r3
 800536c:	f7ff fef8 	bl	8005160 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8005370:	4603      	mov	r3, r0
 8005372:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 8005374:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005378:	2b00      	cmp	r3, #0
 800537a:	da02      	bge.n	8005382 <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 800537c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005380:	e0cd      	b.n	800551e <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005388:	4413      	add	r3, r2
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	7a1b      	ldrb	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 8005394:	2101      	movs	r1, #1
 8005396:	e000      	b.n	800539a <uavcan_register_Access_Response_1_0_serialize_+0x82>
 8005398:	2100      	movs	r1, #0
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	460a      	mov	r2, r1
 80053a4:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	3301      	adds	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	7a5b      	ldrb	r3, [r3, #9]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d013      	beq.n	80053dc <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	08db      	lsrs	r3, r3, #3
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4413      	add	r3, r2
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	2201      	movs	r2, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	08db      	lsrs	r3, r3, #3
 80053d0:	68b8      	ldr	r0, [r7, #8]
 80053d2:	4403      	add	r3, r0
 80053d4:	430a      	orrs	r2, r1
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e014      	b.n	8005406 <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	08db      	lsrs	r3, r3, #3
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	4413      	add	r3, r2
 80053e4:	7819      	ldrb	r1, [r3, #0]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	2201      	movs	r2, #1
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	68b8      	ldr	r0, [r7, #8]
 80053fe:	4403      	add	r3, r0
 8005400:	400a      	ands	r2, r1
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	3301      	adds	r3, #1
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 800540c:	2306      	movs	r3, #6
 800540e:	9302      	str	r3, [sp, #8]
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	e9cd 2300 	strd	r2, r3, [sp]
 800541c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541e:	6a39      	ldr	r1, [r7, #32]
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	f7fc fd07 	bl	8001e34 <nunavutSetUxx>
 8005426:	4603      	mov	r3, r0
 8005428:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 800542a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800542e:	2b00      	cmp	r3, #0
 8005430:	da02      	bge.n	8005438 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 8005432:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005436:	e072      	b.n	800551e <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	3306      	adds	r3, #6
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	2b00      	cmp	r3, #0
 8005446:	d021      	beq.n	800548c <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f1c3 0308 	rsb	r3, r3, #8
 8005456:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005458:	7f7b      	ldrb	r3, [r7, #29]
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9cd 2300 	strd	r2, r3, [sp]
 8005468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546a:	6a39      	ldr	r1, [r7, #32]
 800546c:	68b8      	ldr	r0, [r7, #8]
 800546e:	f7fc fce1 	bl	8001e34 <nunavutSetUxx>
 8005472:	4603      	mov	r3, r0
 8005474:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8005476:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	da02      	bge.n	8005484 <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 800547e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005482:	e04c      	b.n	800551e <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8005484:	7f7b      	ldrb	r3, [r7, #29]
 8005486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005488:	4413      	add	r3, r2
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 800548c:	f240 1303 	movw	r3, #259	@ 0x103
 8005490:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	4413      	add	r3, r2
 80054a0:	f107 0210 	add.w	r2, r7, #16
 80054a4:	4619      	mov	r1, r3
 80054a6:	f7ff f945 	bl	8004734 <uavcan_register_Value_1_0_serialize_>
 80054aa:	4603      	mov	r3, r0
 80054ac:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 80054ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da02      	bge.n	80054bc <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 80054b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80054ba:	e030      	b.n	800551e <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c2:	4413      	add	r3, r2
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d021      	beq.n	8005514 <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f1c3 0308 	rsb	r3, r3, #8
 80054de:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 80054e0:	7ebb      	ldrb	r3, [r7, #26]
 80054e2:	9302      	str	r3, [sp, #8]
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9cd 2300 	strd	r2, r3, [sp]
 80054f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f2:	6a39      	ldr	r1, [r7, #32]
 80054f4:	68b8      	ldr	r0, [r7, #8]
 80054f6:	f7fc fc9d 	bl	8001e34 <nunavutSetUxx>
 80054fa:	4603      	mov	r3, r0
 80054fc:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 80054fe:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005502:	2b00      	cmp	r3, #0
 8005504:	da02      	bge.n	800550c <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8005506:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800550a:	e008      	b.n	800551e <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 800550c:	7ebb      	ldrb	r3, [r7, #26]
 800550e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005510:	4413      	add	r3, r2
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	08da      	lsrs	r2, r3, #3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3728      	adds	r7, #40	@ 0x28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b08c      	sub	sp, #48	@ 0x30
 800552a:	af04      	add	r7, sp, #16
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <uavcan_node_Version_1_0_serialize_+0x1e>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <uavcan_node_Version_1_0_serialize_+0x1e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005544:	f06f 0301 	mvn.w	r3, #1
 8005548:	e04b      	b.n	80055e2 <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d802      	bhi.n	800555e <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005558:	f06f 0302 	mvn.w	r3, #2
 800555c:	e041      	b.n	80055e2 <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	08db      	lsrs	r3, r3, #3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	4413      	add	r3, r2
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	3308      	adds	r3, #8
 8005574:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	4413      	add	r3, r2
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	7852      	ldrb	r2, [r2, #1]
 8005582:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	3308      	adds	r3, #8
 8005588:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	2b00      	cmp	r3, #0
 8005592:	d021      	beq.n	80055d8 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f1c3 0308 	rsb	r3, r3, #8
 80055a2:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	9302      	str	r3, [sp, #8]
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9cd 2300 	strd	r2, r3, [sp]
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	69b9      	ldr	r1, [r7, #24]
 80055b8:	68b8      	ldr	r0, [r7, #8]
 80055ba:	f7fc fc3b 	bl	8001e34 <nunavutSetUxx>
 80055be:	4603      	mov	r3, r0
 80055c0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80055c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da02      	bge.n	80055d0 <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 80055ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80055ce:	e008      	b.n	80055e2 <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	08da      	lsrs	r2, r3, #3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d006      	beq.n	8005612 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005612:	f06f 0301 	mvn.w	r3, #1
 8005616:	e008      	b.n	800562a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005620:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	080192d0 	.word	0x080192d0

0800563c <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b090      	sub	sp, #64	@ 0x40
 8005640:	af04      	add	r7, sp, #16
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800565a:	f06f 0301 	mvn.w	r3, #1
 800565e:	e16b      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 8005666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	f640 12c7 	movw	r2, #2503	@ 0x9c7
 800566e:	4293      	cmp	r3, r2
 8005670:	d802      	bhi.n	8005678 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005672:	f06f 0302 	mvn.w	r3, #2
 8005676:	e15f      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 800567c:	2302      	movs	r3, #2
 800567e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005680:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4413      	add	r3, r2
 800568a:	f107 0218 	add.w	r2, r7, #24
 800568e:	4619      	mov	r1, r3
 8005690:	f7ff ff49 	bl	8005526 <uavcan_node_Version_1_0_serialize_>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 800569a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800569e:	2b00      	cmp	r3, #0
 80056a0:	da02      	bge.n	80056a8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 80056a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056a6:	e147      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ae:	4413      	add	r3, r2
 80056b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80056b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d025      	beq.n	8005708 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80056bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f1c3 0308 	rsb	r3, r3, #8
 80056ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80056ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9cd 2300 	strd	r2, r3, [sp]
 80056e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056e4:	68b8      	ldr	r0, [r7, #8]
 80056e6:	f7fc fba5 	bl	8001e34 <nunavutSetUxx>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 80056f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da02      	bge.n	80056fe <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 80056f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80056fc:	e11c      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 80056fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005704:	4413      	add	r3, r2
 8005706:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8005708:	2302      	movs	r3, #2
 800570a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	4413      	add	r3, r2
 8005718:	f107 0214 	add.w	r2, r7, #20
 800571c:	4619      	mov	r1, r3
 800571e:	f7ff ff02 	bl	8005526 <uavcan_node_Version_1_0_serialize_>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 8005728:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	da02      	bge.n	8005736 <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 8005730:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8005734:	e100      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800573c:	4413      	add	r3, r2
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	2b00      	cmp	r3, #0
 8005748:	d025      	beq.n	8005796 <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f1c3 0308 	rsb	r3, r3, #8
 8005758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800575c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005760:	9302      	str	r3, [sp, #8]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9cd 2300 	strd	r2, r3, [sp]
 800576e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005772:	68b8      	ldr	r0, [r7, #8]
 8005774:	f7fc fb5e 	bl	8001e34 <nunavutSetUxx>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 800577e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8005782:	2b00      	cmp	r3, #0
 8005784:	da02      	bge.n	800578c <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 8005786:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800578a:	e0d5      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 800578c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005792:	4413      	add	r3, r2
 8005794:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 8005796:	2302      	movs	r3, #2
 8005798:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	4413      	add	r3, r2
 80057a6:	f107 0210 	add.w	r2, r7, #16
 80057aa:	4619      	mov	r1, r3
 80057ac:	f7ff febb 	bl	8005526 <uavcan_node_Version_1_0_serialize_>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 80057b6:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da02      	bge.n	80057c4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 80057be:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80057c2:	e0b9      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ca:	4413      	add	r3, r2
 80057cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 80057ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d0:	08db      	lsrs	r3, r3, #3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	18d0      	adds	r0, r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3308      	adds	r3, #8
 80057da:	2208      	movs	r2, #8
 80057dc:	4619      	mov	r1, r3
 80057de:	f00f fd46 	bl	801526e <memmove>
        offset_bits += 64U;
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	3340      	adds	r3, #64	@ 0x40
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3310      	adds	r3, #16
 80057ec:	2200      	movs	r2, #0
 80057ee:	9200      	str	r2, [sp, #0]
 80057f0:	2280      	movs	r2, #128	@ 0x80
 80057f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057f4:	68b8      	ldr	r0, [r7, #8]
 80057f6:	f7fc fa39 	bl	8001c6c <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 80057fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fc:	3380      	adds	r3, #128	@ 0x80
 80057fe:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005804:	2b32      	cmp	r3, #50	@ 0x32
 8005806:	d902      	bls.n	800580e <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005808:	f06f 0309 	mvn.w	r3, #9
 800580c:	e094      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005814:	08db      	lsrs	r3, r3, #3
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4413      	add	r3, r2
 800581a:	b2ca      	uxtb	r2, r1
 800581c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	3308      	adds	r3, #8
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005828:	00da      	lsls	r2, r3, #3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3320      	adds	r3, #32
 800582e:	2100      	movs	r1, #0
 8005830:	9100      	str	r1, [sp, #0]
 8005832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005834:	68b8      	ldr	r0, [r7, #8]
 8005836:	f7fc fa19 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005842:	4413      	add	r3, r2
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800584a:	2b01      	cmp	r3, #1
 800584c:	d902      	bls.n	8005854 <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800584e:	f06f 0309 	mvn.w	r3, #9
 8005852:	e071      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8005858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585a:	08db      	lsrs	r3, r3, #3
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	4413      	add	r3, r2
 8005860:	b2ca      	uxtb	r2, r1
 8005862:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	3308      	adds	r3, #8
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586e:	019a      	lsls	r2, r3, #6
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3358      	adds	r3, #88	@ 0x58
 8005874:	2100      	movs	r1, #0
 8005876:	9100      	str	r1, [sp, #0]
 8005878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800587a:	68b8      	ldr	r0, [r7, #8]
 800587c:	f7fc f9f6 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005884:	019b      	lsls	r3, r3, #6
 8005886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005888:	4413      	add	r3, r2
 800588a:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005892:	2bde      	cmp	r3, #222	@ 0xde
 8005894:	d902      	bls.n	800589c <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005896:	f06f 0309 	mvn.w	r3, #9
 800589a:	e04d      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8d3 1148 	ldr.w	r1, [r3, #328]	@ 0x148
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	08db      	lsrs	r3, r3, #3
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4413      	add	r3, r2
 80058aa:	b2ca      	uxtb	r2, r1
 80058ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	3308      	adds	r3, #8
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80058ba:	00da      	lsls	r2, r3, #3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3368      	adds	r3, #104	@ 0x68
 80058c0:	2100      	movs	r1, #0
 80058c2:	9100      	str	r1, [sp, #0]
 80058c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	f7fc f9d0 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d6:	4413      	add	r3, r2
 80058d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d024      	beq.n	800592e <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f1c3 0308 	rsb	r3, r3, #8
 80058f2:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80058f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058fa:	9302      	str	r3, [sp, #8]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9cd 2300 	strd	r2, r3, [sp]
 8005908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800590a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800590c:	68b8      	ldr	r0, [r7, #8]
 800590e:	f7fc fa91 	bl	8001e34 <nunavutSetUxx>
 8005912:	4603      	mov	r3, r0
 8005914:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8005916:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800591a:	2b00      	cmp	r3, #0
 800591c:	da02      	bge.n	8005924 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 800591e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005922:	e009      	b.n	8005938 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 8005924:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800592a:	4413      	add	r3, r2
 800592c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800592e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005930:	08da      	lsrs	r2, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3730      	adds	r7, #48	@ 0x30
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fb53 	bl	8006ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
      { }
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
 800597c:	f003 fd6f 	bl	800945e <Error_Handler>
 8005980:	bf00      	nop
 8005982:	bd80      	pop	{r7, pc}

08005984 <micros_64>:
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8005984:	b5b0      	push	{r4, r5, r7, lr}
 8005986:	af00      	add	r7, sp, #0
 8005988:	f005 f874 	bl	800aa74 <HAL_GetTick>
 800598c:	4603      	mov	r3, r0
 800598e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	2200      	movs	r2, #0
 8005998:	461c      	mov	r4, r3
 800599a:	4615      	mov	r5, r2
 800599c:	4622      	mov	r2, r4
 800599e:	462b      	mov	r3, r5
 80059a0:	4610      	mov	r0, r2
 80059a2:	4619      	mov	r1, r3
 80059a4:	bdb0      	pop	{r4, r5, r7, pc}

080059a6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f001 fb8a 	bl	80070dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	4611      	mov	r1, r2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff ffdf 	bl	80059a6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff ff9f 	bl	8005940 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8005a16:	687c      	ldr	r4, [r7, #4]
 8005a18:	f107 0308 	add.w	r3, r7, #8
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ffd7 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005a24:	f107 0308 	add.w	r3, r7, #8
 8005a28:	f641 5255 	movw	r2, #7509	@ 0x1d55
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f001 fb6b 	bl	800710a <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005a34:	f107 0308 	add.w	r3, r7, #8
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ffda 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005a3e:	4a04      	ldr	r2, [pc, #16]	@ (8005a50 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	08019358 	.word	0x08019358

08005a54 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

static float Kd = 0;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8005a76:	687c      	ldr	r4, [r7, #4]
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ffa7 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005a84:	f107 0308 	add.w	r3, r7, #8
 8005a88:	f240 4266 	movw	r2, #1126	@ 0x466
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f001 fb59 	bl	8007146 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005a94:	f107 0308 	add.w	r3, r7, #8
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ffaa 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005a9e:	4a04      	ldr	r2, [pc, #16]	@ (8005ab0 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd90      	pop	{r4, r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	08019338 	.word	0x08019338
 8005ab4:	00000000 	.word	0x00000000

08005ab8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override
 8005ab8:	b590      	push	{r4, r7, lr}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
    {

    	vel_moveit = js_in.angular_velocity.radian_per_second;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a51      	ldr	r2, [pc, #324]	@ (8005c10 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x158>)
 8005aca:	6013      	str	r3, [r2, #0]
    	pos_moveit = js_in.angular_position.radian;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a50      	ldr	r2, [pc, #320]	@ (8005c14 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x15c>)
 8005ad2:	6013      	str	r3, [r2, #0]
    	pos_actual = steps_to_rads(tmc5160_position_read(), jc.full_steps);
 8005ad4:	f004 fbc2 	bl	800a25c <tmc5160_position_read>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4a4f      	ldr	r2, [pc, #316]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005adc:	6852      	ldr	r2, [r2, #4]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f004 fed9 	bl	800a898 <steps_to_rads>
 8005ae6:	eef0 7a40 	vmov.f32	s15, s0
 8005aea:	4b4c      	ldr	r3, [pc, #304]	@ (8005c1c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x164>)
 8005aec:	edc3 7a00 	vstr	s15, [r3]
    	vel_actual = steps_to_rads(tmc5160_velocity_read(), jc.full_steps);
 8005af0:	f004 fbee 	bl	800a2d0 <tmc5160_velocity_read>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4a48      	ldr	r2, [pc, #288]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005af8:	6852      	ldr	r2, [r2, #4]
 8005afa:	4611      	mov	r1, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f004 fecb 	bl	800a898 <steps_to_rads>
 8005b02:	eef0 7a40 	vmov.f32	s15, s0
 8005b06:	4b46      	ldr	r3, [pc, #280]	@ (8005c20 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x168>)
 8005b08:	edc3 7a00 	vstr	s15, [r3]

    	pos_set = steps_to_rads(rad_to_steps(js_in.angular_position.radian, jc.full_steps), jc.full_steps);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	4b41      	ldr	r3, [pc, #260]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4618      	mov	r0, r3
 8005b18:	eeb0 0a67 	vmov.f32	s0, s15
 8005b1c:	f004 fef0 	bl	800a900 <rad_to_steps>
 8005b20:	4603      	mov	r3, r0
 8005b22:	4a3d      	ldr	r2, [pc, #244]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005b24:	6852      	ldr	r2, [r2, #4]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f004 feb5 	bl	800a898 <steps_to_rads>
 8005b2e:	eef0 7a40 	vmov.f32	s15, s0
 8005b32:	4b3c      	ldr	r3, [pc, #240]	@ (8005c24 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x16c>)
 8005b34:	edc3 7a00 	vstr	s15, [r3]
    	vel_set = steps_to_rads(rad_to_steps(js_in.angular_velocity.radian_per_second, jc.full_steps), jc.full_steps);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b3e:	4b36      	ldr	r3, [pc, #216]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4618      	mov	r0, r3
 8005b44:	eeb0 0a67 	vmov.f32	s0, s15
 8005b48:	f004 feda 	bl	800a900 <rad_to_steps>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4a32      	ldr	r2, [pc, #200]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005b50:	6852      	ldr	r2, [r2, #4]
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f004 fe9f 	bl	800a898 <steps_to_rads>
 8005b5a:	eef0 7a40 	vmov.f32	s15, s0
 8005b5e:	4b32      	ldr	r3, [pc, #200]	@ (8005c28 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x170>)
 8005b60:	edc3 7a00 	vstr	s15, [r3]
//    		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
//    	}

    	//New version POS-VEL control
    	//tmc5160_acceleration(10000000);
    	motor.set_position_to_go(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	edd3 7a00 	vldr	s15, [r3]
 8005b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	eeb0 0a67 	vmov.f32	s0, s15
 8005b74:	f004 fec4 	bl	800a900 <rad_to_steps>
 8005b78:	ee07 0a90 	vmov	s15, r0
 8005b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b80:	eeb0 0a67 	vmov.f32	s0, s15
 8005b84:	4829      	ldr	r0, [pc, #164]	@ (8005c2c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x174>)
 8005b86:	f003 fd12 	bl	80095ae <_ZN5motor18set_position_to_goEf>
    	if(fabs(js_in.angular_velocity.radian_per_second) < 0.0001)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b90:	eeb0 0a67 	vmov.f32	s0, s15
 8005b94:	f7fc f80a 	bl	8001bac <_ZSt4fabsf>
 8005b98:	ee10 3a10 	vmov	r3, s0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fa fcfb 	bl	8000598 <__aeabi_f2d>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	461c      	mov	r4, r3
 8005ba6:	a318      	add	r3, pc, #96	@ (adr r3, 8005c08 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x150>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f7fa ffbe 	bl	8000b2c <__aeabi_dcmplt>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x102>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	461c      	mov	r4, r3
 8005bba:	b2e3      	uxtb	r3, r4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01c      	beq.n	8005bfa <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x142>
    	{
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	481b      	ldr	r0, [pc, #108]	@ (8005c30 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x178>)
 8005bc4:	f006 f96a 	bl	800be9c <HAL_GPIO_TogglePin>
        	tmc5160_velocity(rad_to_steps(20000, jc.full_steps));
 8005bc8:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8005c34 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x17c>
 8005bd2:	f004 fe95 	bl	800a900 <rad_to_steps>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 fa81 	bl	800a0e0 <tmc5160_velocity>
        	tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	edd3 7a00 	vldr	s15, [r3]
 8005be4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	eeb0 0a67 	vmov.f32	s0, s15
 8005bee:	f004 fe87 	bl	800a900 <rad_to_steps>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f004 f955 	bl	8009ea4 <tmc5160_position>
    	}
    }
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}
 8005c02:	bf00      	nop
 8005c04:	f3af 8000 	nop.w
 8005c08:	eb1c432d 	.word	0xeb1c432d
 8005c0c:	3f1a36e2 	.word	0x3f1a36e2
 8005c10:	20000344 	.word	0x20000344
 8005c14:	20000348 	.word	0x20000348
 8005c18:	20000798 	.word	0x20000798
 8005c1c:	20000350 	.word	0x20000350
 8005c20:	2000034c 	.word	0x2000034c
 8005c24:	20000358 	.word	0x20000358
 8005c28:	20000354 	.word	0x20000354
 8005c2c:	200007c4 	.word	0x200007c4
 8005c30:	48000c00 	.word	0x48000c00
 8005c34:	469c4000 	.word	0x469c4000

08005c38 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8005c42:	687c      	ldr	r4, [r7, #4]
 8005c44:	f107 0308 	add.w	r3, r7, #8
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fec1 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005c50:	f107 0108 	add.w	r1, r7, #8
 8005c54:	2302      	movs	r3, #2
 8005c56:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f001 faa2 	bl	80071a4 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005c60:	f107 0308 	add.w	r3, r7, #8
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fec4 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005c6a:	4a04      	ldr	r2, [pc, #16]	@ (8005c7c <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd90      	pop	{r4, r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	08019318 	.word	0x08019318

08005c80 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 8005c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c84:	b0e7      	sub	sp, #412	@ 0x19c
 8005c86:	af06      	add	r7, sp, #24
 8005c88:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005c8c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005c90:	6018      	str	r0, [r3, #0]
 8005c92:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005c96:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005c9a:	6019      	str	r1, [r3, #0]
 8005c9c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005ca0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005ca4:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 8005ca6:	466b      	mov	r3, sp
 8005ca8:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 8005caa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005cae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2100      	movs	r1, #0
 8005cbc:	f00f faf1 	bl	80152a2 <memset>
 8005cc0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005cc4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005cd0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	709a      	strb	r2, [r3, #2]
 8005cd8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005cdc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 8005ce4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005ce8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    node_info_response.software_image_crc.count = 0;
 8005cf2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005cf6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    size_t name_len = 8;
 8005cfe:	2308      	movs	r3, #8
 8005d00:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    char joint_name[name_len];
 8005d04:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 8005d08:	460b      	mov	r3, r1
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8005d10:	2300      	movs	r3, #0
 8005d12:	4688      	mov	r8, r1
 8005d14:	4699      	mov	r9, r3
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	461d      	mov	r5, r3
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	00eb      	lsls	r3, r5, #3
 8005d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d3e:	00e2      	lsls	r2, r4, #3
 8005d40:	1dcb      	adds	r3, r1, #7
 8005d42:	08db      	lsrs	r3, r3, #3
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	ebad 0d03 	sub.w	sp, sp, r3
 8005d4a:	ab06      	add	r3, sp, #24
 8005d4c:	3300      	adds	r3, #0
 8005d4e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 8005d52:	2206      	movs	r2, #6
 8005d54:	4939      	ldr	r1, [pc, #228]	@ (8005e3c <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 8005d56:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8005d5a:	f00f fa15 	bl	8015188 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 8005d5e:	f107 0320 	add.w	r3, r7, #32
 8005d62:	3320      	adds	r3, #32
 8005d64:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8005d68:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f00f fb7e 	bl	801546e <memcpy>
    node_info_response.name.count = name_len;
 8005d72:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005d76:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005d7a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8005d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    uint32_t word0 = 1;
 8005d80:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005d84:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 8005d8c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005d90:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005d94:	2202      	movs	r2, #2
 8005d96:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 8005d98:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005d9c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005da0:	2203      	movs	r2, #3
 8005da2:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 8005da4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005da8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005db2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005db6:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 8005db8:	f107 0320 	add.w	r3, r7, #32
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8005dc4:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 8005dcc:	f107 0320 	add.w	r3, r7, #32
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8005dd8:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 8005de0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005de4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005de8:	2206      	movs	r2, #6
 8005dea:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 8005dec:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005df0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fa04 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005e00:	4604      	mov	r4, r0
 8005e02:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005e06:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8005e0a:	f107 0020 	add.w	r0, r7, #32
 8005e0e:	2304      	movs	r3, #4
 8005e10:	9304      	str	r3, [sp, #16]
 8005e12:	4a0b      	ldr	r2, [pc, #44]	@ (8005e40 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e1c:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	680b      	ldr	r3, [r1, #0]
 8005e24:	4a07      	ldr	r2, [pc, #28]	@ (8005e44 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 8005e26:	4601      	mov	r1, r0
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f001 f9f9 	bl	8007220 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 8005e2e:	46b5      	mov	sp, r6
}
 8005e30:	bf00      	nop
 8005e32:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 8005e36:	46bd      	mov	sp, r7
 8005e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e3c:	080192c8 	.word	0x080192c8
 8005e40:	000f4240 	.word	0x000f4240
 8005e44:	20000364 	.word	0x20000364

08005e48 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8005e52:	687c      	ldr	r4, [r7, #4]
 8005e54:	f107 0308 	add.w	r3, r7, #8
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff fdb9 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005e60:	f107 0108 	add.w	r1, r7, #8
 8005e64:	2302      	movs	r3, #2
 8005e66:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f001 fa22 	bl	80072b4 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005e70:	f107 0308 	add.w	r3, r7, #8
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fdbc 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005e7a:	4a04      	ldr	r2, [pc, #16]	@ (8005e8c <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	080192f8 	.word	0x080192f8

08005e90 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	f2ad 5d84 	subw	sp, sp, #1412	@ 0x584
 8005e96:	af06      	add	r7, sp, #24
 8005e98:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005e9c:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 8005ea0:	6018      	str	r0, [r3, #0]
 8005ea2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ea6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005eaa:	6019      	str	r1, [r3, #0]
 8005eac:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005eb0:	f2a3 5364 	subw	r3, r3, #1380	@ 0x564
 8005eb4:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 8005eb6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005eba:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	f00f f9eb 	bl	80152a2 <memset>

    register_access_response.timestamp.microsecond = micros_64();
 8005ecc:	f7ff fd5a 	bl	8005984 <micros_64>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005ed8:	f5a1 710e 	sub.w	r1, r1, #568	@ 0x238
 8005edc:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 8005ee0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ee4:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	f00f f9d6 	bl	80152a2 <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005f02:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 8005f0c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f10:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2204      	movs	r2, #4
 8005f18:	49c0      	ldr	r1, [pc, #768]	@ (800621c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x38c>)
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f00f f997 	bl	801524e <memcmp>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d15c      	bne.n	8005fe0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 8005f26:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f2a:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d113      	bne.n	8005f60 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005f38:	2104      	movs	r1, #4
 8005f3a:	48b9      	ldr	r0, [pc, #740]	@ (8006220 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 8005f3c:	f005 ffae 	bl	800be9c <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 8005f40:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f44:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8005f4e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005f52:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 8005f56:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f003 ffd4 	bl	8009f08 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 8005f60:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f64:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005f68:	2201      	movs	r2, #1
 8005f6a:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005f6c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f70:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005f74:	2201      	movs	r2, #1
 8005f76:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 8005f78:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f7c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005f80:	2204      	movs	r2, #4
 8005f82:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 8005f86:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f8a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005f94:	461a      	mov	r2, r3
 8005f96:	2100      	movs	r1, #0
 8005f98:	f00f f983 	bl	80152a2 <memset>
        result.value.elements[0] = tv; //PZDC!!!
 8005f9c:	f507 63ac 	add.w	r3, r7, #1376	@ 0x560
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005fa8:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 8005fac:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8005fb0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fb4:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer64 = result;
 8005fbe:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fc2:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005fc6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fca:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f00f fa49 	bl	801546e <memcpy>
 8005fdc:	f000 bcf1 	b.w	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 8005fe0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fe4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2204      	movs	r2, #4
 8005fec:	498d      	ldr	r1, [pc, #564]	@ (8006224 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x394>)
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f00f f92d 	bl	801524e <memcmp>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d165      	bne.n	80060c6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x236>

    	int32_t pos = register_access_request.value.integer32.value.elements[0];
 8005ffa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ffe:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006008:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
    	int32_t rv;
    	if (pos > jc.upper_limit_ticks && pos < jc.lower_limit_ticks)
 800600c:	4b86      	ldr	r3, [pc, #536]	@ (8006228 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 8006014:	429a      	cmp	r2, r3
 8006016:	dd0e      	ble.n	8006036 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
 8006018:	4b83      	ldr	r3, [pc, #524]	@ (8006228 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 8006020:	429a      	cmp	r2, r3
 8006022:	da08      	bge.n	8006036 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8006024:	2201      	movs	r2, #1
 8006026:	2104      	movs	r1, #4
 8006028:	487d      	ldr	r0, [pc, #500]	@ (8006220 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 800602a:	f005 ff1f 	bl	800be6c <HAL_GPIO_WritePin>
    		rv = 1;
 800602e:	2301      	movs	r3, #1
 8006030:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 8006034:	e006      	b.n	8006044 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1b4>
    	}
    	else
    	{
    		tmc5160_move(pos);
 8006036:	f8d7 0558 	ldr.w	r0, [r7, #1368]	@ 0x558
 800603a:	f003 ff65 	bl	8009f08 <tmc5160_move>
    		rv = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
    	}

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006044:	2104      	movs	r1, #4
 8006046:	4876      	ldr	r0, [pc, #472]	@ (8006220 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 8006048:	f005 ff28 	bl	800be9c <HAL_GPIO_TogglePin>

		//response
        register_access_response.persistent = true;
 800604c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006050:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006054:	2201      	movs	r2, #1
 8006056:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006058:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800605c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006060:	2201      	movs	r2, #1
 8006062:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8006064:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006068:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800606c:	2209      	movs	r2, #9
 800606e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8006072:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006076:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800607a:	4618      	mov	r0, r3
 800607c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006080:	461a      	mov	r2, r3
 8006082:	2100      	movs	r1, #0
 8006084:	f00f f90d 	bl	80152a2 <memset>
        result.value.elements[0] = tv;
 8006088:	f8d7 2560 	ldr.w	r2, [r7, #1376]	@ 0x560
 800608c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006090:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006094:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006096:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800609a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800609e:	2201      	movs	r2, #1
 80060a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 80060a4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060a8:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80060ac:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060b0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80060b4:	4610      	mov	r0, r2
 80060b6:	4619      	mov	r1, r3
 80060b8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80060bc:	461a      	mov	r2, r3
 80060be:	f00f f9d6 	bl	801546e <memcpy>
 80060c2:	f000 bc7e 	b.w	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 80060c6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060ca:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2203      	movs	r2, #3
 80060d2:	4956      	ldr	r1, [pc, #344]	@ (800622c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x39c>)
 80060d4:	4618      	mov	r0, r3
 80060d6:	f00f f8ba 	bl	801524e <memcmp>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d150      	bne.n	8006182 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2f2>

		tmc5160_set_default_vel();
 80060e0:	f003 ff9a 	bl	800a018 <tmc5160_set_default_vel>
		tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 80060e4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060e8:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80060f2:	4618      	mov	r0, r3
 80060f4:	f003 fed6 	bl	8009ea4 <tmc5160_position>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80060f8:	2104      	movs	r1, #4
 80060fa:	4849      	ldr	r0, [pc, #292]	@ (8006220 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 80060fc:	f005 fece 	bl	800be9c <HAL_GPIO_TogglePin>
		js_pos_v = tmc5160_position_read();
 8006100:	f004 f8ac 	bl	800a25c <tmc5160_position_read>
 8006104:	f8c7 055c 	str.w	r0, [r7, #1372]	@ 0x55c
		//response
        register_access_response.persistent = true;
 8006108:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800610c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006110:	2201      	movs	r2, #1
 8006112:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006114:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006118:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800611c:	2201      	movs	r2, #1
 800611e:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8006120:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006124:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006128:	2209      	movs	r2, #9
 800612a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 800612e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006132:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006136:	4618      	mov	r0, r3
 8006138:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800613c:	461a      	mov	r2, r3
 800613e:	2100      	movs	r1, #0
 8006140:	f00f f8af 	bl	80152a2 <memset>
        result.value.elements[0] = js_pos_v;
 8006144:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006148:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800614c:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
 8006150:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006152:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006156:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800615a:	2201      	movs	r2, #1
 800615c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 8006160:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006164:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006168:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800616c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006178:	461a      	mov	r2, r3
 800617a:	f00f f978 	bl	801546e <memcpy>
 800617e:	f000 bc20 	b.w	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 8006182:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006186:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2207      	movs	r2, #7
 800618e:	4928      	ldr	r1, [pc, #160]	@ (8006230 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a0>)
 8006190:	4618      	mov	r0, r3
 8006192:	f00f f85c 	bl	801524e <memcmp>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d14d      	bne.n	8006238 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a8>
		//js_pos_v = enc_angle;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800619c:	2104      	movs	r1, #4
 800619e:	4820      	ldr	r0, [pc, #128]	@ (8006220 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 80061a0:	f005 fe7c 	bl	800be9c <HAL_GPIO_TogglePin>
		//tv = 0;
		//response
        register_access_response.persistent = true;
 80061a4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061a8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80061ac:	2201      	movs	r2, #1
 80061ae:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80061b0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061b4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80061b8:	2201      	movs	r2, #1
 80061ba:	721a      	strb	r2, [r3, #8]
        value._tag_ = 10;
 80061bc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061c0:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80061c4:	220a      	movs	r2, #10
 80061c6:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural16_1_0 result = {};
 80061ca:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061ce:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80061d2:	4618      	mov	r0, r3
 80061d4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80061d8:	461a      	mov	r2, r3
 80061da:	2100      	movs	r1, #0
 80061dc:	f00f f861 	bl	80152a2 <memset>
        result.value.elements[0] = enc_angle;
 80061e0:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a4>)
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061e8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80061ec:	801a      	strh	r2, [r3, #0]
        result.value.count = 1;
 80061ee:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061f2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural16 = result;
 80061fc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006200:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006204:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006208:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800620c:	4610      	mov	r0, r2
 800620e:	4619      	mov	r1, r3
 8006210:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006214:	461a      	mov	r2, r3
 8006216:	f00f f92a 	bl	801546e <memcpy>
 800621a:	e3d2      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
 800621c:	20000004 	.word	0x20000004
 8006220:	48000c00 	.word	0x48000c00
 8006224:	20000010 	.word	0x20000010
 8006228:	20000798 	.word	0x20000798
 800622c:	20000018 	.word	0x20000018
 8006230:	20000020 	.word	0x20000020
 8006234:	200007c2 	.word	0x200007c2
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 8006238:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800623c:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2203      	movs	r2, #3
 8006244:	49c7      	ldr	r1, [pc, #796]	@ (8006564 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d4>)
 8006246:	4618      	mov	r0, r3
 8006248:	f00f f801 	bl	801524e <memcmp>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d156      	bne.n	8006300 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x470>
		tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 8006252:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006256:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8006260:	4618      	mov	r0, r3
 8006262:	f004 f997 	bl	800a594 <tmc5160_set_motor_direction>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006266:	2104      	movs	r1, #4
 8006268:	48bf      	ldr	r0, [pc, #764]	@ (8006568 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 800626a:	f005 fe17 	bl	800be9c <HAL_GPIO_TogglePin>
		tv = 0;
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800627a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 800627e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006282:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006286:	2201      	movs	r2, #1
 8006288:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800628a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800628e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006292:	2201      	movs	r2, #1
 8006294:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006296:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800629a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800629e:	220b      	movs	r2, #11
 80062a0:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 80062a4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80062a8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80062ac:	4618      	mov	r0, r3
 80062ae:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80062b2:	461a      	mov	r2, r3
 80062b4:	2100      	movs	r1, #0
 80062b6:	f00e fff4 	bl	80152a2 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 80062ba:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80062be:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 80062c8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80062cc:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80062d0:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 80062d2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80062d6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80062da:	2201      	movs	r2, #1
 80062dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 80062e0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80062e4:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80062e8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80062ec:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80062f0:	4610      	mov	r0, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80062f8:	461a      	mov	r2, r3
 80062fa:	f00f f8b8 	bl	801546e <memcpy>
 80062fe:	e360      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    	}
    else if (memcmp(register_access_request.name.name.elements, arm_reg_name, ARM_REG_NAME_LEN) == 0) {
 8006300:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006304:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2203      	movs	r2, #3
 800630c:	4997      	ldr	r1, [pc, #604]	@ (800656c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6dc>)
 800630e:	4618      	mov	r0, r3
 8006310:	f00e ff9d 	bl	801524e <memcmp>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d15a      	bne.n	80063d0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x540>
		if(register_access_request.value.integer8.value.elements[0])
 800631a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800631e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4a2>
		{
			tmc5160_arm();
 800632c:	f004 f99a 	bl	800a664 <tmc5160_arm>
 8006330:	e001      	b.n	8006336 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4a6>
		}
		else
		{
			tmc5160_disarm();
 8006332:	f004 f98b 	bl	800a64c <tmc5160_disarm>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006336:	2104      	movs	r1, #4
 8006338:	488b      	ldr	r0, [pc, #556]	@ (8006568 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 800633a:	f005 fdaf 	bl	800be9c <HAL_GPIO_TogglePin>
		tv = 0;
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800634a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 800634e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006352:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006356:	2201      	movs	r2, #1
 8006358:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800635a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800635e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006362:	2201      	movs	r2, #1
 8006364:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006366:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800636a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800636e:	220b      	movs	r2, #11
 8006370:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006374:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006378:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800637c:	4618      	mov	r0, r3
 800637e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006382:	461a      	mov	r2, r3
 8006384:	2100      	movs	r1, #0
 8006386:	f00e ff8c 	bl	80152a2 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 800638a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800638e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 8006398:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800639c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80063a0:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 80063a2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80063a6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80063aa:	2201      	movs	r2, #1
 80063ac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 80063b0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80063b4:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80063b8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80063bc:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80063c0:	4610      	mov	r0, r2
 80063c2:	4619      	mov	r1, r3
 80063c4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80063c8:	461a      	mov	r2, r3
 80063ca:	f00f f850 	bl	801546e <memcpy>
 80063ce:	e2f8      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 80063d0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80063d4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2205      	movs	r2, #5
 80063dc:	4964      	ldr	r1, [pc, #400]	@ (8006570 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e0>)
 80063de:	4618      	mov	r0, r3
 80063e0:	f00e ff35 	bl	801524e <memcmp>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d14f      	bne.n	800648a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x5fa>
		//ENABLE CALIB
    	calib_move(&jc);
 80063ea:	4862      	ldr	r0, [pc, #392]	@ (8006574 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 80063ec:	f000 fcf2 	bl	8006dd4 <calib_move>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80063f0:	2104      	movs	r1, #4
 80063f2:	485d      	ldr	r0, [pc, #372]	@ (8006568 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 80063f4:	f005 fd52 	bl	800be9c <HAL_GPIO_TogglePin>
		tv = 0;
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006404:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006408:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800640c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006410:	2201      	movs	r2, #1
 8006412:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006414:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006418:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800641c:	2201      	movs	r2, #1
 800641e:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006420:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006424:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006428:	220b      	movs	r2, #11
 800642a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 800642e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006432:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006436:	4618      	mov	r0, r3
 8006438:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800643c:	461a      	mov	r2, r3
 800643e:	2100      	movs	r1, #0
 8006440:	f00e ff2f 	bl	80152a2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006444:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006448:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8006452:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006456:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800645a:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 800645c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006460:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006464:	2201      	movs	r2, #1
 8006466:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 800646a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800646e:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006472:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006476:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800647a:	4610      	mov	r0, r2
 800647c:	4619      	mov	r1, r3
 800647e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006482:	461a      	mov	r2, r3
 8006484:	f00e fff3 	bl	801546e <memcpy>
 8006488:	e29b      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 800648a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800648e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2209      	movs	r2, #9
 8006496:	4938      	ldr	r1, [pc, #224]	@ (8006578 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e8>)
 8006498:	4618      	mov	r0, r3
 800649a:	f00e fed8 	bl	801524e <memcmp>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d16d      	bne.n	8006580 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80064a4:	2104      	movs	r1, #4
 80064a6:	4830      	ldr	r0, [pc, #192]	@ (8006568 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 80064a8:	f005 fcf8 	bl	800be9c <HAL_GPIO_TogglePin>
		jc.upper_limit_enc = register_access_request.value.integer32.value.elements[0];
 80064ac:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80064b0:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006574 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 80064c4:	edc3 7a06 	vstr	s15, [r3, #24]
		joint_config_write(&jc, &jc_a);
 80064c8:	492c      	ldr	r1, [pc, #176]	@ (800657c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6ec>)
 80064ca:	482a      	ldr	r0, [pc, #168]	@ (8006574 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 80064cc:	f002 ff1e 	bl	800930c <joint_config_write>
		tv = 0;
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80064dc:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 80064e0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80064e4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80064e8:	2201      	movs	r2, #1
 80064ea:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 80064ec:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80064f0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80064f4:	2201      	movs	r2, #1
 80064f6:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 80064f8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80064fc:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006500:	2209      	movs	r2, #9
 8006502:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006506:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800650a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800650e:	4618      	mov	r0, r3
 8006510:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006514:	461a      	mov	r2, r3
 8006516:	2100      	movs	r1, #0
 8006518:	f00e fec3 	bl	80152a2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 800651c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006520:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 800652a:	461a      	mov	r2, r3
 800652c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006530:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006534:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006536:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800653a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800653e:	2201      	movs	r2, #1
 8006540:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8006544:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006548:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800654c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006550:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006554:	4610      	mov	r0, r2
 8006556:	4619      	mov	r1, r3
 8006558:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800655c:	461a      	mov	r2, r3
 800655e:	f00e ff86 	bl	801546e <memcpy>
 8006562:	e22e      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
 8006564:	2000001c 	.word	0x2000001c
 8006568:	48000c00 	.word	0x48000c00
 800656c:	2000000c 	.word	0x2000000c
 8006570:	20000028 	.word	0x20000028
 8006574:	20000798 	.word	0x20000798
 8006578:	20000030 	.word	0x20000030
 800657c:	200007bc 	.word	0x200007bc
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 8006580:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006584:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2209      	movs	r2, #9
 800658c:	49d0      	ldr	r1, [pc, #832]	@ (80068d0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa40>)
 800658e:	4618      	mov	r0, r3
 8006590:	f00e fe5d 	bl	801524e <memcmp>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d15f      	bne.n	800665a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7ca>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800659a:	2104      	movs	r1, #4
 800659c:	48cd      	ldr	r0, [pc, #820]	@ (80068d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 800659e:	f005 fc7d 	bl	800be9c <HAL_GPIO_TogglePin>
		jc.lower_limit_enc = register_access_request.value.integer32.value.elements[0];
 80065a2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80065a6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065b8:	4bc7      	ldr	r3, [pc, #796]	@ (80068d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 80065ba:	edc3 7a07 	vstr	s15, [r3, #28]
		joint_config_write(&jc, &jc_a);
 80065be:	49c7      	ldr	r1, [pc, #796]	@ (80068dc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 80065c0:	48c5      	ldr	r0, [pc, #788]	@ (80068d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 80065c2:	f002 fea3 	bl	800930c <joint_config_write>
		tv = 0;
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80065d2:	e9c1 2300 	strd	r2, r3, [r1]
		register_access_response.persistent = true;
 80065d6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80065da:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80065de:	2201      	movs	r2, #1
 80065e0:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 80065e2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80065e6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80065ea:	2201      	movs	r2, #1
 80065ec:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 80065ee:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80065f2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80065f6:	2209      	movs	r2, #9
 80065f8:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 80065fc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006600:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006604:	4618      	mov	r0, r3
 8006606:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800660a:	461a      	mov	r2, r3
 800660c:	2100      	movs	r1, #0
 800660e:	f00e fe48 	bl	80152a2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006612:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006616:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006620:	461a      	mov	r2, r3
 8006622:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006626:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800662a:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 800662c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006630:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006634:	2201      	movs	r2, #1
 8006636:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 800663a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800663e:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006642:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006646:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006652:	461a      	mov	r2, r3
 8006654:	f00e ff0b 	bl	801546e <memcpy>
 8006658:	e1b3      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 800665a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800665e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2208      	movs	r2, #8
 8006666:	499e      	ldr	r1, [pc, #632]	@ (80068e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 8006668:	4618      	mov	r0, r3
 800666a:	f00e fdf0 	bl	801524e <memcmp>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d15d      	bne.n	8006730 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x8a0>
		tmc5160_set_zero();
 8006674:	f003 ffc2 	bl	800a5fc <tmc5160_set_zero>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006678:	2104      	movs	r1, #4
 800667a:	4896      	ldr	r0, [pc, #600]	@ (80068d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 800667c:	f005 fc0e 	bl	800be9c <HAL_GPIO_TogglePin>
		jc.zero_enc = enc_angle;
 8006680:	4b98      	ldr	r3, [pc, #608]	@ (80068e4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	4b94      	ldr	r3, [pc, #592]	@ (80068d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 8006688:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 800668a:	4994      	ldr	r1, [pc, #592]	@ (80068dc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 800668c:	4892      	ldr	r0, [pc, #584]	@ (80068d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 800668e:	f002 fe3d 	bl	800930c <joint_config_write>
		tv = 0;
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800669e:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 80066a2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80066a6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80066aa:	2201      	movs	r2, #1
 80066ac:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 80066ae:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80066b2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80066b6:	2201      	movs	r2, #1
 80066b8:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 80066ba:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80066be:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80066c2:	2209      	movs	r2, #9
 80066c4:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 80066c8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80066cc:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80066d0:	4618      	mov	r0, r3
 80066d2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80066d6:	461a      	mov	r2, r3
 80066d8:	2100      	movs	r1, #0
 80066da:	f00e fde2 	bl	80152a2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 80066de:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80066e2:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7f9 ff31 	bl	8000554 <__aeabi_ui2d>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80066fa:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 80066fe:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 8006702:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006706:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800670a:	2201      	movs	r2, #1
 800670c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.real64 = result;
 8006710:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006714:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006718:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800671c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006720:	4610      	mov	r0, r2
 8006722:	4619      	mov	r1, r3
 8006724:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006728:	461a      	mov	r2, r3
 800672a:	f00e fea0 	bl	801546e <memcpy>
 800672e:	e148      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_value_zero_reg_name, SET_ENC_VALUE_ZERO_REG_NAME_LEN) == 0) {
 8006730:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006734:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2212      	movs	r2, #18
 800673c:	496a      	ldr	r1, [pc, #424]	@ (80068e8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 800673e:	4618      	mov	r0, r3
 8006740:	f00e fd85 	bl	801524e <memcmp>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d163      	bne.n	8006812 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x982>
		//SET ENCODER ZERO TODO
		jc.zero_enc = register_access_request.value.integer32.value.elements[0];
 800674a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800674e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006758:	461a      	mov	r2, r3
 800675a:	4b5f      	ldr	r3, [pc, #380]	@ (80068d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 800675c:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 800675e:	495f      	ldr	r1, [pc, #380]	@ (80068dc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 8006760:	485d      	ldr	r0, [pc, #372]	@ (80068d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 8006762:	f002 fdd3 	bl	800930c <joint_config_write>
		tv = 0;
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006772:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006776:	2104      	movs	r1, #4
 8006778:	4856      	ldr	r0, [pc, #344]	@ (80068d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 800677a:	f005 fb8f 	bl	800be9c <HAL_GPIO_TogglePin>
		tv = 0;
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800678a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 800678e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006792:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006796:	2201      	movs	r2, #1
 8006798:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800679a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800679e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80067a2:	2201      	movs	r2, #1
 80067a4:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 80067a6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067aa:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80067ae:	2209      	movs	r2, #9
 80067b0:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 80067b4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067b8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80067bc:	4618      	mov	r0, r3
 80067be:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80067c2:	461a      	mov	r2, r3
 80067c4:	2100      	movs	r1, #0
 80067c6:	f00e fd6c 	bl	80152a2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 80067ca:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067ce:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 80067d8:	461a      	mov	r2, r3
 80067da:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067de:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80067e2:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 80067e4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067e8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80067ec:	2201      	movs	r2, #1
 80067ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 80067f2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067f6:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80067fa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067fe:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006802:	4610      	mov	r0, r2
 8006804:	4619      	mov	r1, r3
 8006806:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800680a:	461a      	mov	r2, r3
 800680c:	f00e fe2f 	bl	801546e <memcpy>
 8006810:	e0d7      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 8006812:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006816:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2204      	movs	r2, #4
 800681e:	4933      	ldr	r1, [pc, #204]	@ (80068ec <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5c>)
 8006820:	4618      	mov	r0, r3
 8006822:	f00e fd14 	bl	801524e <memcmp>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d163      	bne.n	80068f4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa64>
		//SET NAME FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800682c:	2104      	movs	r1, #4
 800682e:	4829      	ldr	r0, [pc, #164]	@ (80068d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 8006830:	f005 fb34 	bl	800be9c <HAL_GPIO_TogglePin>
		tv = 0;
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006840:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006844:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006848:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800684c:	2201      	movs	r2, #1
 800684e:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006850:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006854:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006858:	2201      	movs	r2, #1
 800685a:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 800685c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006860:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_String_1_0 result = {};
 800686a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800686e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006872:	4618      	mov	r0, r3
 8006874:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006878:	461a      	mov	r2, r3
 800687a:	2100      	movs	r1, #0
 800687c:	f00e fd11 	bl	80152a2 <memset>

        char mystring[4] = "xyz";
 8006880:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006884:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006888:	4a19      	ldr	r2, [pc, #100]	@ (80068f0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa60>)
 800688a:	601a      	str	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 800688c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006890:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800689a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800689e:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 80068a0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80068a4:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80068a8:	2203      	movs	r2, #3
 80068aa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value._string = result;
 80068ae:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80068b2:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80068b6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80068ba:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80068c6:	461a      	mov	r2, r3
 80068c8:	f00e fdd1 	bl	801546e <memcpy>
 80068cc:	e079      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
 80068ce:	bf00      	nop
 80068d0:	2000003c 	.word	0x2000003c
 80068d4:	48000c00 	.word	0x48000c00
 80068d8:	20000798 	.word	0x20000798
 80068dc:	200007bc 	.word	0x200007bc
 80068e0:	2000005c 	.word	0x2000005c
 80068e4:	200007c2 	.word	0x200007c2
 80068e8:	20000048 	.word	0x20000048
 80068ec:	20000068 	.word	0x20000068
 80068f0:	007a7978 	.word	0x007a7978
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 80068f4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80068f8:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2204      	movs	r2, #4
 8006900:	494a      	ldr	r1, [pc, #296]	@ (8006a2c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb9c>)
 8006902:	4618      	mov	r0, r3
 8006904:	f00e fca3 	bl	801524e <memcmp>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d14c      	bne.n	80069a8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb18>
		//SET TYPE OF MOTOR FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800690e:	2104      	movs	r1, #4
 8006910:	4847      	ldr	r0, [pc, #284]	@ (8006a30 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba0>)
 8006912:	f005 fac3 	bl	800be9c <HAL_GPIO_TogglePin>
		tv = 0;
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006922:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006926:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800692a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800692e:	2201      	movs	r2, #1
 8006930:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006932:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006936:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800693a:	2201      	movs	r2, #1
 800693c:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 800693e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006942:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006946:	220b      	movs	r2, #11
 8006948:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 800694c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006950:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006954:	4618      	mov	r0, r3
 8006956:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800695a:	461a      	mov	r2, r3
 800695c:	2100      	movs	r1, #0
 800695e:	f00e fca0 	bl	80152a2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006962:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006966:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8006970:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006974:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006978:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 800697a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800697e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006982:	2201      	movs	r2, #1
 8006984:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 8006988:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800698c:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006990:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006994:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006998:	4610      	mov	r0, r2
 800699a:	4619      	mov	r1, r3
 800699c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80069a0:	461a      	mov	r2, r3
 80069a2:	f00e fd64 	bl	801546e <memcpy>
 80069a6:	e00c      	b.n	80069c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else {
        value._tag_ = 0;
 80069a8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069ac:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 80069b6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069ba:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80069be:	2200      	movs	r2, #0
 80069c0:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 80069c2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069c6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80069ca:	f507 62ad 	add.w	r2, r7, #1384	@ 0x568
 80069ce:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 80069d2:	3310      	adds	r3, #16
 80069d4:	4611      	mov	r1, r2
 80069d6:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80069da:	4618      	mov	r0, r3
 80069dc:	f00e fd47 	bl	801546e <memcpy>

    interface->send_response<RegisterAccessResponse>(
 80069e0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069e4:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fc0a 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80069f4:	4604      	mov	r4, r0
 80069f6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069fa:	f2a3 5164 	subw	r1, r3, #1380	@ 0x564
 80069fe:	f507 704c 	add.w	r0, r7, #816	@ 0x330
 8006a02:	2304      	movs	r3, #4
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	4a0b      	ldr	r2, [pc, #44]	@ (8006a34 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba4>)
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a10:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	680b      	ldr	r3, [r1, #0]
 8006a18:	4a07      	ldr	r2, [pc, #28]	@ (8006a38 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba8>)
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 fc7b 	bl	8007318 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 8006a22:	bf00      	nop
 8006a24:	f207 576c 	addw	r7, r7, #1388	@ 0x56c
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd90      	pop	{r4, r7, pc}
 8006a2c:	20000070 	.word	0x20000070
 8006a30:	48000c00 	.word	0x48000c00
 8006a34:	000f4240 	.word	0x000f4240
 8006a38:	200004a4 	.word	0x200004a4

08006a3c <send_JS>:
//}




void send_JS(joint_config * jc) {             //float* pos, float* vel, float* eff
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	@ 0x30
 8006a40:	af06      	add	r7, sp, #24
 8006a42:	6078      	str	r0, [r7, #4]
	{
//			.angular_position = steps_to_rads(tmc5160_position_read(), jc->full_steps),
//			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
//			.angular_acceleration = eff_in

			.angular_position = motor.get_position(),
 8006a44:	4813      	ldr	r0, [pc, #76]	@ (8006a94 <send_JS+0x58>)
 8006a46:	f002 fdbf 	bl	80095c8 <_ZN5motor12get_positionEv>
 8006a4a:	eef0 7a40 	vmov.f32	s15, s0
			.angular_velocity = motor.get_velocity(),
			.angular_acceleration = eff_in
	};
 8006a4e:	edc7 7a03 	vstr	s15, [r7, #12]
			.angular_velocity = motor.get_velocity(),
 8006a52:	4810      	ldr	r0, [pc, #64]	@ (8006a94 <send_JS+0x58>)
 8006a54:	f002 fdce 	bl	80095f4 <_ZN5motor12get_velocityEv>
 8006a58:	eef0 7a40 	vmov.f32	s15, s0
	};
 8006a5c:	edc7 7a04 	vstr	s15, [r7, #16]
 8006a60:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <send_JS+0x5c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	617b      	str	r3, [r7, #20]
    interface->send_msg<JS_msg>(
 8006a66:	480d      	ldr	r0, [pc, #52]	@ (8006a9c <send_JS+0x60>)
 8006a68:	f000 fbce 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006a6c:	f107 010c 	add.w	r1, r7, #12
 8006a70:	2304      	movs	r3, #4
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa0 <send_JS+0x64>)
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a7e:	4b09      	ldr	r3, [pc, #36]	@ (8006aa4 <send_JS+0x68>)
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 8006a86:	4a08      	ldr	r2, [pc, #32]	@ (8006aa8 <send_JS+0x6c>)
 8006a88:	f000 fc8f 	bl	80073aa <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 8006a8c:	bf00      	nop
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	200007c4 	.word	0x200007c4
 8006a98:	200002bc 	.word	0x200002bc
 8006a9c:	20000318 	.word	0x20000318
 8006aa0:	000f4240 	.word	0x000f4240
 8006aa4:	200005bc 	.word	0x200005bc
 8006aa8:	200005b0 	.word	0x200005b0

08006aac <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8006aba:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <heartbeat+0x4c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 8006ac0:	480e      	ldr	r0, [pc, #56]	@ (8006afc <heartbeat+0x50>)
 8006ac2:	f000 fba1 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	2304      	movs	r3, #4
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	4a0c      	ldr	r2, [pc, #48]	@ (8006b00 <heartbeat+0x54>)
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b04 <heartbeat+0x58>)
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	f641 5355 	movw	r3, #7509	@ 0x1d55
 8006ade:	4a0a      	ldr	r2, [pc, #40]	@ (8006b08 <heartbeat+0x5c>)
 8006ae0:	f000 fc82 	bl	80073e8 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <heartbeat+0x4c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	4a03      	ldr	r2, [pc, #12]	@ (8006af8 <heartbeat+0x4c>)
 8006aec:	6013      	str	r3, [r2, #0]
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	200005c8 	.word	0x200005c8
 8006afc:	20000318 	.word	0x20000318
 8006b00:	000f4240 	.word	0x000f4240
 8006b04:	200005c7 	.word	0x200005c7
 8006b08:	200005c0 	.word	0x200005c0

08006b0c <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8006b0c:	b590      	push	{r4, r7, lr}
 8006b0e:	b08f      	sub	sp, #60	@ 0x3c
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8006b14:	4b41      	ldr	r3, [pc, #260]	@ (8006c1c <setup_cyphal+0x110>)
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	2106      	movs	r1, #6
 8006b20:	483f      	ldr	r0, [pc, #252]	@ (8006c20 <setup_cyphal+0x114>)
 8006b22:	f000 fc80 	bl	8007426 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8006b26:	4602      	mov	r2, r0
 8006b28:	f107 0308 	add.w	r3, r7, #8
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fca2 	bl	8007478 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8006b34:	f107 0308 	add.w	r3, r7, #8
 8006b38:	4619      	mov	r1, r3
 8006b3a:	483a      	ldr	r0, [pc, #232]	@ (8006c24 <setup_cyphal+0x118>)
 8006b3c:	f000 fcab 	bl	8007496 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fe ff54 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8006b4a:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8006b4e:	f00d fac6 	bl	80140de <_Znwj>
 8006b52:	4603      	mov	r3, r0
 8006b54:	461c      	mov	r4, r3
 8006b56:	f107 0310 	add.w	r3, r7, #16
 8006b5a:	4932      	ldr	r1, [pc, #200]	@ (8006c24 <setup_cyphal+0x118>)
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe ff38 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006b62:	f107 0310 	add.w	r3, r7, #16
 8006b66:	4619      	mov	r1, r3
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7fe ff4f 	bl	8005a0c <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8006c28 <setup_cyphal+0x11c>)
 8006b70:	601c      	str	r4, [r3, #0]
 8006b72:	f107 0310 	add.w	r3, r7, #16
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe ff3b 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8006b7c:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8006b80:	f00d faad 	bl	80140de <_Znwj>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461c      	mov	r4, r3
 8006b88:	f107 0318 	add.w	r3, r7, #24
 8006b8c:	4925      	ldr	r1, [pc, #148]	@ (8006c24 <setup_cyphal+0x118>)
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe ff1f 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006b94:	f107 0318 	add.w	r3, r7, #24
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7fe ff66 	bl	8005a6c <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006ba0:	4b22      	ldr	r3, [pc, #136]	@ (8006c2c <setup_cyphal+0x120>)
 8006ba2:	601c      	str	r4, [r3, #0]
 8006ba4:	f107 0318 	add.w	r3, r7, #24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fe ff22 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 8006bae:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8006bb2:	f00d fa94 	bl	80140de <_Znwj>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461c      	mov	r4, r3
 8006bba:	f107 0320 	add.w	r3, r7, #32
 8006bbe:	4919      	ldr	r1, [pc, #100]	@ (8006c24 <setup_cyphal+0x118>)
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe ff06 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006bc6:	f107 0320 	add.w	r3, r7, #32
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f7ff f93b 	bl	8005e48 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006bd2:	4b17      	ldr	r3, [pc, #92]	@ (8006c30 <setup_cyphal+0x124>)
 8006bd4:	601c      	str	r4, [r3, #0]
 8006bd6:	f107 0320 	add.w	r3, r7, #32
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe ff09 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 8006be0:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8006be4:	f00d fa7b 	bl	80140de <_Znwj>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461c      	mov	r4, r3
 8006bec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006bf0:	490c      	ldr	r1, [pc, #48]	@ (8006c24 <setup_cyphal+0x118>)
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe feed 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006bf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff f81a 	bl	8005c38 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006c04:	4b0b      	ldr	r3, [pc, #44]	@ (8006c34 <setup_cyphal+0x128>)
 8006c06:	601c      	str	r4, [r3, #0]
 8006c08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fef0 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8006c12:	bf00      	nop
 8006c14:	3734      	adds	r7, #52	@ 0x34
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd90      	pop	{r4, r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000320 	.word	0x20000320
 8006c20:	200002c0 	.word	0x200002c0
 8006c24:	20000318 	.word	0x20000318
 8006c28:	20000340 	.word	0x20000340
 8006c2c:	2000035c 	.word	0x2000035c
 8006c30:	200004a0 	.word	0x200004a0
 8006c34:	20000360 	.word	0x20000360

08006c38 <cyphal_loop>:

void cyphal_loop() {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
    interface->loop();
 8006c3c:	4804      	ldr	r0, [pc, #16]	@ (8006c50 <cyphal_loop+0x18>)
 8006c3e:	f000 fae3 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006c42:	4603      	mov	r3, r0
 8006c44:	4618      	mov	r0, r3
 8006c46:	f00a fc89 	bl	801155c <_ZN15CyphalInterface4loopEv>
}
 8006c4a:	bf00      	nop
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000318 	.word	0x20000318

08006c54 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08c      	sub	sp, #48	@ 0x30
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8006c5c:	f107 0320 	add.w	r3, r7, #32
 8006c60:	2106      	movs	r1, #6
 8006c62:	4618      	mov	r0, r3
 8006c64:	f00d f9ec 	bl	8014040 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);//JS_SUB_PORT_ID //1121
 8006c68:	f107 0318 	add.w	r3, r7, #24
 8006c6c:	f240 4166 	movw	r1, #1126	@ 0x466
 8006c70:	4618      	mov	r0, r3
 8006c72:	f00d f9c5 	bl	8014000 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8006c76:	f107 0310 	add.w	r3, r7, #16
 8006c7a:	f641 5155 	movw	r1, #7509	@ 0x1d55
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f00d f9be 	bl	8014000 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	f107 0218 	add.w	r2, r7, #24
 8006c8c:	f107 0120 	add.w	r1, r7, #32
 8006c90:	4618      	mov	r0, r3
 8006c92:	f00d f9f7 	bl	8014084 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006c96:	4b4c      	ldr	r3, [pc, #304]	@ (8006dc8 <cyphal_can_starter+0x174>)
 8006c98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c9c:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8006c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006dc8 <cyphal_can_starter+0x174>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006ca4:	4b48      	ldr	r3, [pc, #288]	@ (8006dc8 <cyphal_can_starter+0x174>)
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006caa:	4b47      	ldr	r3, [pc, #284]	@ (8006dc8 <cyphal_can_starter+0x174>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	4a45      	ldr	r2, [pc, #276]	@ (8006dc8 <cyphal_can_starter+0x174>)
 8006cb4:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	4a43      	ldr	r2, [pc, #268]	@ (8006dc8 <cyphal_can_starter+0x174>)
 8006cba:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006cbc:	4b43      	ldr	r3, [pc, #268]	@ (8006dcc <cyphal_can_starter+0x178>)
 8006cbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006cc2:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8006cc4:	4b41      	ldr	r3, [pc, #260]	@ (8006dcc <cyphal_can_starter+0x178>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006cca:	4b40      	ldr	r3, [pc, #256]	@ (8006dcc <cyphal_can_starter+0x178>)
 8006ccc:	2202      	movs	r2, #2
 8006cce:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8006dcc <cyphal_can_starter+0x178>)
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8006dcc <cyphal_can_starter+0x178>)
 8006cda:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4a3b      	ldr	r2, [pc, #236]	@ (8006dcc <cyphal_can_starter+0x178>)
 8006ce0:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd0 <cyphal_can_starter+0x17c>)
 8006ce4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006ce8:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 8006cea:	4b39      	ldr	r3, [pc, #228]	@ (8006dd0 <cyphal_can_starter+0x17c>)
 8006cec:	2202      	movs	r2, #2
 8006cee:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006cf0:	4b37      	ldr	r3, [pc, #220]	@ (8006dd0 <cyphal_can_starter+0x17c>)
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006cf6:	4b36      	ldr	r3, [pc, #216]	@ (8006dd0 <cyphal_can_starter+0x17c>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4a34      	ldr	r2, [pc, #208]	@ (8006dd0 <cyphal_can_starter+0x17c>)
 8006d00:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4a32      	ldr	r2, [pc, #200]	@ (8006dd0 <cyphal_can_starter+0x17c>)
 8006d06:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 8006d08:	2302      	movs	r3, #2
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2202      	movs	r2, #2
 8006d10:	2102      	movs	r1, #2
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f004 fc28 	bl	800b568 <HAL_FDCAN_ConfigGlobalFilter>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8006d28:	f002 fb99 	bl	800945e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 8006d2c:	4926      	ldr	r1, [pc, #152]	@ (8006dc8 <cyphal_can_starter+0x174>)
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f004 fbc0 	bl	800b4b4 <HAL_FDCAN_ConfigFilter>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bf14      	ite	ne
 8006d3a:	2301      	movne	r3, #1
 8006d3c:	2300      	moveq	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8006d44:	f002 fb8b 	bl	800945e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 8006d48:	4920      	ldr	r1, [pc, #128]	@ (8006dcc <cyphal_can_starter+0x178>)
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f004 fbb2 	bl	800b4b4 <HAL_FDCAN_ConfigFilter>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bf14      	ite	ne
 8006d56:	2301      	movne	r3, #1
 8006d58:	2300      	moveq	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <cyphal_can_starter+0x110>
	  Error_Handler();
 8006d60:	f002 fb7d 	bl	800945e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8006d64:	491a      	ldr	r1, [pc, #104]	@ (8006dd0 <cyphal_can_starter+0x17c>)
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f004 fba4 	bl	800b4b4 <HAL_FDCAN_ConfigFilter>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bf14      	ite	ne
 8006d72:	2301      	movne	r3, #1
 8006d74:	2300      	moveq	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <cyphal_can_starter+0x12c>
	  Error_Handler();
 8006d7c:	f002 fb6f 	bl	800945e <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8006d80:	2200      	movs	r2, #0
 8006d82:	2105      	movs	r1, #5
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f004 fc20 	bl	800b5ca <HAL_FDCAN_ConfigTxDelayCompensation>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bf14      	ite	ne
 8006d90:	2301      	movne	r3, #1
 8006d92:	2300      	moveq	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <cyphal_can_starter+0x14a>
	  Error_Handler();
 8006d9a:	f002 fb60 	bl	800945e <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f004 fc35 	bl	800b60e <HAL_FDCAN_EnableTxDelayCompensation>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bf14      	ite	ne
 8006daa:	2301      	movne	r3, #1
 8006dac:	2300      	moveq	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <cyphal_can_starter+0x164>
	  Error_Handler();
 8006db4:	f002 fb53 	bl	800945e <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f004 fc49 	bl	800b650 <HAL_FDCAN_Start>
}
 8006dbe:	bf00      	nop
 8006dc0:	3728      	adds	r7, #40	@ 0x28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200005fc 	.word	0x200005fc
 8006dcc:	200005cc 	.word	0x200005cc
 8006dd0:	200005e4 	.word	0x200005e4

08006dd4 <calib_move>:


void calib_move(joint_config * jc)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	int8_t Kp = 100;
 8006ddc:	2364      	movs	r3, #100	@ 0x64
 8006dde:	74fb      	strb	r3, [r7, #19]
	uint32_t epsilon = 10;
 8006de0:	230a      	movs	r3, #10
 8006de2:	60fb      	str	r3, [r7, #12]
	uint32_t deviation = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
	deviation = jc->zero_enc - enc_angle;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	4a15      	ldr	r2, [pc, #84]	@ (8006e44 <calib_move+0x70>)
 8006dee:	8812      	ldrh	r2, [r2, #0]
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
	while(deviation > epsilon)
 8006df4:	e01a      	b.n	8006e2c <calib_move+0x58>
	{
		as50_readAngle(&enc_angle, 100);
 8006df6:	2164      	movs	r1, #100	@ 0x64
 8006df8:	4812      	ldr	r0, [pc, #72]	@ (8006e44 <calib_move+0x70>)
 8006dfa:	f7fa fcad 	bl	8001758 <as50_readAngle>
		deviation = jc->direction * (jc->zero_enc - enc_angle);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006e04:	4619      	mov	r1, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e44 <calib_move+0x70>)
 8006e0c:	8812      	ldrh	r2, [r2, #0]
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	617b      	str	r3, [r7, #20]
		tmc5160_move(deviation * Kp);
 8006e16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	fb02 f303 	mul.w	r3, r2, r3
 8006e20:	4618      	mov	r0, r3
 8006e22:	f003 f871 	bl	8009f08 <tmc5160_move>
		HAL_Delay(1);
 8006e26:	2001      	movs	r0, #1
 8006e28:	f003 fe30 	bl	800aa8c <HAL_Delay>
	while(deviation > epsilon)
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d8e0      	bhi.n	8006df6 <calib_move+0x22>
	}
	tmc5160_stop();
 8006e34:	f003 fc22 	bl	800a67c <tmc5160_stop>
	tmc5160_set_zero();
 8006e38:	f003 fbe0 	bl	800a5fc <tmc5160_set_zero>
}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200007c2 	.word	0x200007c2

08006e48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
      { delete this; }
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	461a      	mov	r2, r3
 8006e76:	2300      	movs	r3, #0
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	6053      	str	r3, [r2, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	6053      	str	r3, [r2, #4]
 8006ea4:	6093      	str	r3, [r2, #8]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff ffde 	bl	8006e6a <_ZNSt14_Function_baseC1Ev>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8006eb4:	6838      	ldr	r0, [r7, #0]
 8006eb6:	f000 fb21 	bl	80074fc <_ZNKSt8functionIFyvEEcvbEv>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	609a      	str	r2, [r3, #8]
	  }
      }
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	6053      	str	r3, [r2, #4]
 8006efa:	6093      	str	r3, [r2, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ffb3 	bl	8006e6a <_ZNSt14_Function_baseC1Ev>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8006f0a:	6838      	ldr	r0, [r7, #0]
 8006f0c:	f000 fb06 	bl	800751c <_ZNKSt8functionIFvvEEcvbEv>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	609a      	str	r2, [r3, #8]
      }
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 faf9 	bl	800753c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
	return get();
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fae8 	bl	800753c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8006f6c:	4603      	mov	r3, r0
      }
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fae5 	bl	8007556 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff ffe6 	bl	8006f76 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fadd 	bl	800757e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8006fc4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00c      	beq.n	8006fe8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fae2 	bl	8007598 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 faeb 	bl	80075b2 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 faf0 	bl	80075c8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
      }
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd90      	pop	{r4, r7, pc}

08006ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d004      	beq.n	8007012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f7fa fc6a 	bl	80018e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	461a      	mov	r2, r3
 800702a:	2300      	movs	r3, #0
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	6053      	str	r3, [r2, #4]
 8007030:	6093      	str	r3, [r2, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ff18 	bl	8006e6a <_ZNSt14_Function_baseC1Ev>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8007040:	6838      	ldr	r0, [r7, #0]
 8007042:	f000 fad2 	bl	80075ea <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 800704c:	687c      	ldr	r4, [r7, #4]
 800704e:	6838      	ldr	r0, [r7, #0]
 8007050:	f000 fadb 	bl	800760a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007054:	4603      	mov	r3, r0
 8007056:	4619      	mov	r1, r3
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fae1 	bl	8007620 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a04      	ldr	r2, [pc, #16]	@ (8007074 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8007062:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a04      	ldr	r2, [pc, #16]	@ (8007078 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8007068:	609a      	str	r2, [r3, #8]
	    }
	}
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bd90      	pop	{r4, r7, pc}
 8007074:	08007645 	.word	0x08007645
 8007078:	08007669 	.word	0x08007669

0800707c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 800707c:	b590      	push	{r4, r7, lr}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	461a      	mov	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	6053      	str	r3, [r2, #4]
 8007090:	6093      	str	r3, [r2, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fee8 	bl	8006e6a <_ZNSt14_Function_baseC1Ev>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80070a0:	6838      	ldr	r0, [r7, #0]
 80070a2:	f000 fb00 	bl	80076a6 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00e      	beq.n	80070ca <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80070ac:	687c      	ldr	r4, [r7, #4]
 80070ae:	6838      	ldr	r0, [r7, #0]
 80070b0:	f000 fb09 	bl	80076c6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80070b4:	4603      	mov	r3, r0
 80070b6:	4619      	mov	r1, r3
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fb0f 	bl	80076dc <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a04      	ldr	r2, [pc, #16]	@ (80070d4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 80070c2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a04      	ldr	r2, [pc, #16]	@ (80070d8 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 80070c8:	609a      	str	r2, [r3, #8]
	}
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd90      	pop	{r4, r7, pc}
 80070d4:	08007701 	.word	0x08007701
 80070d8:	0800771f 	.word	0x0800771f

080070dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fa fbe4 	bl	80018c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800710a:	b580      	push	{r7, lr}
 800710c:	b086      	sub	sp, #24
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	4613      	mov	r3, r2
 8007116:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007118:	f107 0310 	add.w	r3, r7, #16
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fc57 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007124:	88fa      	ldrh	r2, [r7, #6]
 8007126:	f107 0110 	add.w	r1, r7, #16
 800712a:	2300      	movs	r3, #0
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fb15 	bl	800775c <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007132:	f107 0310 	add.w	r3, r7, #16
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe fc5b 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	4613      	mov	r3, r2
 8007152:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007154:	f107 0310 	add.w	r3, r7, #16
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fc39 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	f107 0110 	add.w	r1, r7, #16
 8007166:	2300      	movs	r3, #0
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fb29 	bl	80077c0 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 800716e:	f107 0310 	add.w	r3, r7, #16
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fc3d 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	4a04      	ldr	r2, [pc, #16]	@ (80071a0 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	08019378 	.word	0x08019378

080071a4 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4611      	mov	r1, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	460b      	mov	r3, r1
 80071b4:	80fb      	strh	r3, [r7, #6]
 80071b6:	4613      	mov	r3, r2
 80071b8:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff ffe1 	bl	8007184 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80071c2:	4a10      	ldr	r2, [pc, #64]	@ (8007204 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	797a      	ldrb	r2, [r7, #5]
 80071cc:	711a      	strb	r2, [r3, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3308      	adds	r3, #8
 80071d2:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f00e f862 	bl	80152a2 <memset>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fbf3 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80071ec:	797a      	ldrb	r2, [r7, #5]
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	4619      	mov	r1, r3
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fb16 	bl	8007824 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	08019328 	.word	0x08019328

08007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	return _M_get();
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fb25 	bl	8007860 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8007216:	4603      	mov	r3, r0
      }
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 8007220:	b5b0      	push	{r4, r5, r7, lr}
 8007222:	b08c      	sub	sp, #48	@ 0x30
 8007224:	af04      	add	r7, sp, #16
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800722e:	f240 1339 	movw	r3, #313	@ 0x139
 8007232:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007234:	f107 031c 	add.w	r3, r7, #28
 8007238:	461a      	mov	r2, r3
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	68b8      	ldr	r0, [r7, #8]
 800723e:	f7fe f9fd 	bl	800563c <uavcan_node_GetInfo_Response_1_0_serialize_>
 8007242:	4603      	mov	r3, r0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	09db      	lsrs	r3, r3, #7
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	3310      	adds	r3, #16
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fb0f 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800725a:	f107 0314 	add.w	r3, r7, #20
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	809a      	strh	r2, [r3, #4]
 8007264:	2301      	movs	r3, #1
 8007266:	757b      	strb	r3, [r7, #21]
 8007268:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800726c:	753b      	strb	r3, [r7, #20]
 800726e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007270:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007276:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800727c:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fb0e 	bl	80078a4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800728c:	1884      	adds	r4, r0, r2
 800728e:	eb41 0503 	adc.w	r5, r1, r3
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	9202      	str	r2, [sp, #8]
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	f107 0314 	add.w	r3, r7, #20
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4622      	mov	r2, r4
 80072a2:	462b      	mov	r3, r5
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f00a f8eb 	bl	8011480 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 80072aa:	bf00      	nop
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080072b4 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4611      	mov	r1, r2
 80072c0:	461a      	mov	r2, r3
 80072c2:	460b      	mov	r3, r1
 80072c4:	80fb      	strh	r3, [r7, #6]
 80072c6:	4613      	mov	r3, r2
 80072c8:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ff59 	bl	8007184 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80072d2:	4a10      	ldr	r2, [pc, #64]	@ (8007314 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	797a      	ldrb	r2, [r7, #5]
 80072dc:	711a      	strb	r2, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3308      	adds	r3, #8
 80072e2:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f00d ffda 	bl	80152a2 <memset>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fb6b 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80072fc:	797a      	ldrb	r2, [r7, #5]
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	4619      	mov	r1, r3
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fae7 	bl	80078d6 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	08019308 	.word	0x08019308

08007318 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 8007318:	b5b0      	push	{r4, r5, r7, lr}
 800731a:	b08c      	sub	sp, #48	@ 0x30
 800731c:	af04      	add	r7, sp, #16
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007326:	f240 130b 	movw	r3, #267	@ 0x10b
 800732a:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 800732c:	f107 031c 	add.w	r3, r7, #28
 8007330:	461a      	mov	r2, r3
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	68b8      	ldr	r0, [r7, #8]
 8007336:	f7fd ffef 	bl	8005318 <uavcan_register_Access_Response_1_0_serialize_>
 800733a:	4603      	mov	r3, r0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	09db      	lsrs	r3, r3, #7
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	3310      	adds	r3, #16
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fa93 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007352:	f107 0314 	add.w	r3, r7, #20
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	809a      	strh	r2, [r3, #4]
 800735c:	2301      	movs	r3, #1
 800735e:	757b      	strb	r3, [r7, #21]
 8007360:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007364:	753b      	strb	r3, [r7, #20]
 8007366:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007368:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800736e:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007374:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fa92 	bl	80078a4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007384:	1884      	adds	r4, r0, r2
 8007386:	eb41 0503 	adc.w	r5, r1, r3
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	9202      	str	r2, [sp, #8]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f107 0314 	add.w	r3, r7, #20
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4622      	mov	r2, r4
 800739a:	462b      	mov	r3, r5
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f00a f86f 	bl	8011480 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 80073a2:	bf00      	nop
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bdb0      	pop	{r4, r5, r7, pc}

080073aa <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b08a      	sub	sp, #40	@ 0x28
 80073ae:	af06      	add	r7, sp, #24
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 80073b8:	8879      	ldrh	r1, [r7, #2]
 80073ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073c2:	23ff      	movs	r3, #255	@ 0xff
 80073c4:	9303      	str	r3, [sp, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	9302      	str	r3, [sp, #8]
 80073ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	460b      	mov	r3, r1
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fa9a 	bl	8007914 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	@ 0x28
 80073ec:	af06      	add	r7, sp, #24
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 80073f6:	8879      	ldrh	r1, [r7, #2]
 80073f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007400:	23ff      	movs	r3, #255	@ 0xff
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	2300      	movs	r3, #0
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	460b      	mov	r3, r1
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fac5 	bl	80079a8 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 8007426:	b590      	push	{r4, r7, lr}
 8007428:	b08b      	sub	sp, #44	@ 0x2c
 800742a:	af02      	add	r7, sp, #8
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	460b      	mov	r3, r1
 8007434:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 800743c:	7afa      	ldrb	r2, [r7, #11]
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	69f8      	ldr	r0, [r7, #28]
 8007448:	f000 faf8 	bl	8007a3c <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 800744c:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	4619      	mov	r1, r3
 8007458:	200c      	movs	r0, #12
 800745a:	f7fa fa29 	bl	80018b0 <_ZnwjPv>
 800745e:	4604      	mov	r4, r0
 8007460:	7af9      	ldrb	r1, [r7, #11]
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007466:	4620      	mov	r0, r4
 8007468:	f7fa fb54 	bl	8001b14 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 800746c:	613c      	str	r4, [r7, #16]

        return interface;
 800746e:	693b      	ldr	r3, [r7, #16]
    }
 8007470:	4618      	mov	r0, r3
 8007472:	3724      	adds	r7, #36	@ 0x24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd90      	pop	{r4, r7, pc}

08007478 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fb26 	bl	8007ad8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8007496:	b590      	push	{r4, r7, lr}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80074a0:	687c      	ldr	r4, [r7, #4]
 80074a2:	6838      	ldr	r0, [r7, #0]
 80074a4:	f000 fb30 	bl	8007b08 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 80074a8:	4603      	mov	r3, r0
 80074aa:	4619      	mov	r1, r3
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fb36 	bl	8007b1e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 80074b2:	687b      	ldr	r3, [r7, #4]
      }
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd90      	pop	{r4, r7, pc}

080074bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
      { }
 80074c4:	4a04      	ldr	r2, [pc, #16]	@ (80074d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	0801939c 	.word	0x0801939c

080074dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
      { }
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff ffe9 	bl	80074bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80074ea:	210c      	movs	r1, #12
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f00c fdf4 	bl	80140da <_ZdlPvj>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4618      	mov	r0, r3
 8007508:	f7fa fa46 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 800750c:	4603      	mov	r3, r0
 800750e:	f083 0301 	eor.w	r3, r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4618      	mov	r0, r3
 8007528:	f7fa fa36 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 800752c:	4603      	mov	r3, r0
 800752e:	f083 0301 	eor.w	r3, r3, #1
 8007532:	b2db      	uxtb	r3, r3
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fb08 	bl	8007b5c <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800754c:	4603      	mov	r3, r0
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8007556:	b590      	push	{r4, r7, lr}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fb08 	bl	8007b78 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8007568:	683c      	ldr	r4, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f807 	bl	800757e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007570:	4603      	mov	r3, r0
 8007572:	601c      	str	r4, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	bd90      	pop	{r4, r7, pc}

0800757e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fb02 	bl	8007b92 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800758e:	4603      	mov	r3, r0
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fb02 	bl	8007bac <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 80075a8:	4603      	mov	r3, r0
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	3218      	adds	r2, #24
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	4790      	blx	r2
      }
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bf14      	ite	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	2300      	moveq	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007620:	b590      	push	{r4, r7, lr}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800762a:	6838      	ldr	r0, [r7, #0]
 800762c:	f7ff ffed 	bl	800760a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007630:	4603      	mov	r3, r0
 8007632:	4622      	mov	r2, r4
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fac5 	bl	8007bc6 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	bd90      	pop	{r4, r7, pc}

08007644 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fad2 	bl	8007bf6 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007652:	4603      	mov	r3, r0
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fade 	bl	8007c16 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
      }
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007668:	b590      	push	{r4, r7, lr}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d109      	bne.n	8007690 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800767c:	68b8      	ldr	r0, [r7, #8]
 800767e:	f000 faba 	bl	8007bf6 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007682:	4604      	mov	r4, r0
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fad9 	bl	8007c3c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 800768a:	4603      	mov	r3, r0
 800768c:	601c      	str	r4, [r3, #0]
	    break;
 800768e:	e005      	b.n	800769c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	461a      	mov	r2, r3
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fadc 	bl	8007c54 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800769c:	2300      	movs	r3, #0
      }
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd90      	pop	{r4, r7, pc}

080076a6 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bf14      	ite	ne
 80076b4:	2301      	movne	r3, #1
 80076b6:	2300      	moveq	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80076e6:	6838      	ldr	r0, [r7, #0]
 80076e8:	f7ff ffed 	bl	80076c6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80076ec:	4603      	mov	r3, r0
 80076ee:	4622      	mov	r2, r4
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fae8 	bl	8007cc8 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd90      	pop	{r4, r7, pc}

08007700 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 faf5 	bl	8007cf8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800770e:	4603      	mov	r3, r0
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fb01 	bl	8007d18 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8007716:	bf00      	nop
      }
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800771e:	b590      	push	{r4, r7, lr}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	4613      	mov	r3, r2
 800772a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d109      	bne.n	8007746 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007732:	68b8      	ldr	r0, [r7, #8]
 8007734:	f000 fae0 	bl	8007cf8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007738:	4604      	mov	r4, r0
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fafc 	bl	8007d38 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007740:	4603      	mov	r3, r0
 8007742:	601c      	str	r4, [r3, #0]
	    break;
 8007744:	e005      	b.n	8007752 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	461a      	mov	r2, r3
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 faff 	bl	8007d50 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007752:	2300      	movs	r3, #0
      }
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}

0800775c <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4611      	mov	r1, r2
 8007768:	461a      	mov	r2, r3
 800776a:	460b      	mov	r3, r1
 800776c:	80fb      	strh	r3, [r7, #6]
 800776e:	4613      	mov	r3, r2
 8007770:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fd05 	bl	8007184 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800777a:	4a10      	ldr	r2, [pc, #64]	@ (80077bc <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	797a      	ldrb	r2, [r7, #5]
 8007784:	711a      	strb	r2, [r3, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3308      	adds	r3, #8
 800778a:	f44f 720a 	mov.w	r2, #552	@ 0x228
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f00d fd86 	bl	80152a2 <memset>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800779c:	68b9      	ldr	r1, [r7, #8]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe f917 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80077a4:	797a      	ldrb	r2, [r7, #5]
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	4619      	mov	r1, r3
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fb0a 	bl	8007dc4 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	08019368 	.word	0x08019368

080077c0 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4611      	mov	r1, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	460b      	mov	r3, r1
 80077d0:	80fb      	strh	r3, [r7, #6]
 80077d2:	4613      	mov	r3, r2
 80077d4:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fcd3 	bl	8007184 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80077de:	4a10      	ldr	r2, [pc, #64]	@ (8007820 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	797a      	ldrb	r2, [r7, #5]
 80077e8:	711a      	strb	r2, [r3, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3308      	adds	r3, #8
 80077ee:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f00d fd54 	bl	80152a2 <memset>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe f8e5 	bl	80059d2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007808:	797a      	ldrb	r2, [r7, #5]
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	4619      	mov	r1, r3
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 faf6 	bl	8007e00 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	08019348 	.word	0x08019348

08007824 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af02      	add	r7, sp, #8
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	807b      	strh	r3, [r7, #2]
 8007830:	4613      	mov	r3, r2
 8007832:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff fce1 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3308      	adds	r3, #8
 800784a:	787a      	ldrb	r2, [r7, #1]
 800784c:	8879      	ldrh	r1, [r7, #2]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	2200      	movs	r2, #0
 8007854:	f009 fe4e 	bl	80114f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fae7 	bl	8007e3c <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800786e:	4603      	mov	r3, r0
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4618      	mov	r0, r3
 8007884:	f7fa f888 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 800788e:	f00c fc37 	bl	8014100 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	bf00      	nop
      }
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fa f872 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 80078ba:	f00c fc21 	bl	8014100 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
      }
 80078cc:	4610      	mov	r0, r2
 80078ce:	4619      	mov	r1, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af02      	add	r7, sp, #8
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	807b      	strh	r3, [r7, #2]
 80078e2:	4613      	mov	r3, r2
 80078e4:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fc88 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3308      	adds	r3, #8
 80078fc:	787a      	ldrb	r2, [r7, #1]
 80078fe:	8879      	ldrh	r1, [r7, #2]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	f240 2203 	movw	r2, #515	@ 0x203
 8007908:	f009 fdf4 	bl	80114f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8007914:	b5b0      	push	{r4, r5, r7, lr}
 8007916:	b08c      	sub	sp, #48	@ 0x30
 8007918:	af04      	add	r7, sp, #16
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007922:	230c      	movs	r3, #12
 8007924:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007926:	f107 031c 	add.w	r3, r7, #28
 800792a:	461a      	mov	r2, r3
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	68b8      	ldr	r0, [r7, #8]
 8007930:	f7fb f86a 	bl	8002a08 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 8007934:	4603      	mov	r3, r0
 8007936:	b2db      	uxtb	r3, r3
 8007938:	09db      	lsrs	r3, r3, #7
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	3310      	adds	r3, #16
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff ff96 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800794c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007950:	753b      	strb	r3, [r7, #20]
 8007952:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007956:	757b      	strb	r3, [r7, #21]
 8007958:	887b      	ldrh	r3, [r7, #2]
 800795a:	82fb      	strh	r3, [r7, #22]
 800795c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007960:	763b      	strb	r3, [r7, #24]
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4618      	mov	r0, r3
 800796e:	f7ff ff99 	bl	80078a4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007976:	1884      	adds	r4, r0, r2
 8007978:	eb41 0503 	adc.w	r5, r1, r3
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	9202      	str	r2, [sp, #8]
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	f107 0314 	add.w	r3, r7, #20
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4622      	mov	r2, r4
 800798c:	462b      	mov	r3, r5
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f009 fd76 	bl	8011480 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	701a      	strb	r2, [r3, #0]
}
 80079a0:	bf00      	nop
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bdb0      	pop	{r4, r5, r7, pc}

080079a8 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b08c      	sub	sp, #48	@ 0x30
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80079b6:	2307      	movs	r3, #7
 80079b8:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80079ba:	f107 031c 	add.w	r3, r7, #28
 80079be:	461a      	mov	r2, r3
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	68b8      	ldr	r0, [r7, #8]
 80079c4:	f7fa fcc0 	bl	8002348 <uavcan_node_Heartbeat_1_0_serialize_>
 80079c8:	4603      	mov	r3, r0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	09db      	lsrs	r3, r3, #7
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	3310      	adds	r3, #16
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff ff4c 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80079e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80079e4:	753b      	strb	r3, [r7, #20]
 80079e6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80079ea:	757b      	strb	r3, [r7, #21]
 80079ec:	887b      	ldrh	r3, [r7, #2]
 80079ee:	82fb      	strh	r3, [r7, #22]
 80079f0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80079f4:	763b      	strb	r3, [r7, #24]
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff ff4f 	bl	80078a4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a0a:	1884      	adds	r4, r0, r2
 8007a0c:	eb41 0503 	adc.w	r5, r1, r3
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	9202      	str	r2, [sp, #8]
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	f107 0314 	add.w	r3, r7, #20
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4622      	mov	r2, r4
 8007a20:	462b      	mov	r3, r5
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f009 fd2c 	bl	8011480 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	701a      	strb	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	3720      	adds	r7, #32
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bdb0      	pop	{r4, r5, r7, pc}

08007a3c <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b089      	sub	sp, #36	@ 0x24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4619      	mov	r1, r3
 8007a56:	2008      	movs	r0, #8
 8007a58:	f7f9 ff2a 	bl	80018b0 <_ZnwjPv>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	4413      	add	r3, r2
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7f8 fd73 	bl	8000554 <__aeabi_ui2d>
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	4b18      	ldr	r3, [pc, #96]	@ (8007ad4 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8007a74:	f7f8 fde8 	bl	8000648 <__aeabi_dmul>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4619      	mov	r1, r3
 8007a80:	f7f9 f8ba 	bl	8000bf8 <__aeabi_d2uiz>
 8007a84:	4603      	mov	r3, r0
 8007a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7fa f878 	bl	8001b80 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8007a90:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	3308      	adds	r3, #8
 8007a96:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	2044      	movs	r0, #68	@ 0x44
 8007a9e:	f7f9 ff07 	bl	80018b0 <_ZnwjPv>
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7fa f84c 	bl	8001b48 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8007ab0:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	79fa      	ldrb	r2, [r7, #7]
 8007ab6:	69b9      	ldr	r1, [r7, #24]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f9cb 	bl	8007e54 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	601a      	str	r2, [r3, #0]
        return ptr;
 8007ac8:	693b      	ldr	r3, [r7, #16]
    }
 8007aca:	4618      	mov	r0, r3
 8007acc:	3724      	adds	r7, #36	@ 0x24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd90      	pop	{r4, r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40040000 	.word	0x40040000

08007ad8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4622      	mov	r2, r4
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f9f3 	bl	8007edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f9fe 	bl	8007efa <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4618      	mov	r0, r3
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd90      	pop	{r4, r7, pc}

08007b08 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8007b28:	6838      	ldr	r0, [r7, #0]
 8007b2a:	f000 f9f1 	bl	8007f10 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	f107 0308 	add.w	r3, r7, #8
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f9f5 	bl	8007f26 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8007b3c:	f107 0308 	add.w	r3, r7, #8
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fa0d 	bl	8007f62 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8007b48:	f107 0308 	add.w	r3, r7, #8
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd fef7 	bl	8005940 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8007b52:	687b      	ldr	r3, [r7, #4]
      }
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fa12 	bl	8007f90 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fa11 	bl	8007faa <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fa14 	bl	8007fca <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fa13 	bl	8007fe2 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8007bc6:	b590      	push	{r4, r7, lr}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7f9 feb7 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	4619      	mov	r1, r3
 8007bdc:	2004      	movs	r0, #4
 8007bde:	f7f9 fe67 	bl	80018b0 <_ZnwjPv>
 8007be2:	4604      	mov	r4, r0
 8007be4:	68b8      	ldr	r0, [r7, #8]
 8007be6:	f7ff fd10 	bl	800760a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007bea:	4603      	mov	r3, r0
 8007bec:	6023      	str	r3, [r4, #0]
	  }
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd90      	pop	{r4, r7, pc}

08007bf6 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f9fb 	bl	8007ffa <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8007c04:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fa03 	bl	8008012 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8007c0c:	4603      	mov	r3, r0
	}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007c16:	b590      	push	{r4, r7, lr}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa02 	bl	8008028 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007c24:	4603      	mov	r3, r0
 8007c26:	4619      	mov	r1, r3
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fa08 	bl	800803e <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8007c32:	4610      	mov	r0, r2
 8007c34:	4619      	mov	r1, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd90      	pop	{r4, r7, pc}

08007c3c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7f9 fe7e 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d82a      	bhi.n	8007cbe <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c81 	.word	0x08007c81
 8007c74:	08007c8f 	.word	0x08007c8f
 8007c78:	08007ca3 	.word	0x08007ca3
 8007c7c:	08007cb5 	.word	0x08007cb5
	      __dest._M_access<const type_info*>() = nullptr;
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 f9ee 	bl	8008062 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
	      break;
 8007c8c:	e017      	b.n	8007cbe <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007c8e:	68b8      	ldr	r0, [r7, #8]
 8007c90:	f7ff ffb1 	bl	8007bf6 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007c94:	4604      	mov	r4, r0
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff ffd0 	bl	8007c3c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	601c      	str	r4, [r3, #0]
	      break;
 8007ca0:	e00d      	b.n	8007cbe <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8007ca2:	68b8      	ldr	r0, [r7, #8]
 8007ca4:	f7ff ffa7 	bl	8007bf6 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007ca8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8007caa:	4619      	mov	r1, r3
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f9e4 	bl	800807a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8007cb2:	e004      	b.n	8007cbe <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f9f1 	bl	800809e <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007cbc:	bf00      	nop
	  return false;
 8007cbe:	2300      	movs	r3, #0
	}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd90      	pop	{r4, r7, pc}

08007cc8 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8007cc8:	b590      	push	{r4, r7, lr}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7f9 fe36 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4619      	mov	r1, r3
 8007cde:	2004      	movs	r0, #4
 8007ce0:	f7f9 fde6 	bl	80018b0 <_ZnwjPv>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	68b8      	ldr	r0, [r7, #8]
 8007ce8:	f7ff fced 	bl	80076c6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007cec:	4603      	mov	r3, r0
 8007cee:	6023      	str	r3, [r4, #0]
	  }
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd90      	pop	{r4, r7, pc}

08007cf8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9d8 	bl	80080b6 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8007d06:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f9e0 	bl	80080ce <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8007d0e:	4603      	mov	r3, r0
	}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9df 	bl	80080e4 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007d26:	4603      	mov	r3, r0
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 f9e5 	bl	80080fa <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd90      	pop	{r4, r7, pc}

08007d38 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7f9 fe00 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007d46:	4603      	mov	r3, r0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007d50:	b590      	push	{r4, r7, lr}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d82a      	bhi.n	8007dba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007d64:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d8b 	.word	0x08007d8b
 8007d74:	08007d9f 	.word	0x08007d9f
 8007d78:	08007db1 	.word	0x08007db1
	      __dest._M_access<const type_info*>() = nullptr;
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f970 	bl	8008062 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
	      break;
 8007d88:	e017      	b.n	8007dba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007d8a:	68b8      	ldr	r0, [r7, #8]
 8007d8c:	f7ff ffb4 	bl	8007cf8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007d90:	4604      	mov	r4, r0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ffd0 	bl	8007d38 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	601c      	str	r4, [r3, #0]
	      break;
 8007d9c:	e00d      	b.n	8007dba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8007d9e:	68b8      	ldr	r0, [r7, #8]
 8007da0:	f7ff ffaa 	bl	8007cf8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007da4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8007da6:	4619      	mov	r1, r3
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f9b5 	bl	8008118 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8007dae:	e004      	b.n	8007dba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8007db0:	4621      	mov	r1, r4
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 f9c2 	bl	800813c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007db8:	bf00      	nop
	  return false;
 8007dba:	2300      	movs	r3, #0
	}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd90      	pop	{r4, r7, pc}

08007dc4 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	807b      	strh	r3, [r7, #2]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fa11 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3308      	adds	r3, #8
 8007dea:	787a      	ldrb	r2, [r7, #1]
 8007dec:	8879      	ldrh	r1, [r7, #2]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	220c      	movs	r2, #12
 8007df4:	f009 fb7e 	bl	80114f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	807b      	strh	r3, [r7, #2]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff f9f3 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3308      	adds	r3, #8
 8007e26:	787a      	ldrb	r2, [r7, #1]
 8007e28:	8879      	ldrh	r1, [r7, #2]
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	220c      	movs	r2, #12
 8007e30:	f009 fb60 	bl	80114f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8007e54:	b5b0      	push	{r4, r5, r7, lr}
 8007e56:	b08e      	sub	sp, #56	@ 0x38
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007e5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007e5e:	4613      	mov	r3, r2
 8007e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8007e64:	481a      	ldr	r0, [pc, #104]	@ (8007ed0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8007e66:	f7ff f869 	bl	8006f3c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8007e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e74:	3310      	adds	r3, #16
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fcfe 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8007e7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 f976 	bl	8008174 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8007e88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4810      	ldr	r0, [pc, #64]	@ (8007ed0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8007e90:	f000 f9a1 	bl	80081d6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8007e94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 f97a 	bl	8008192 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 8007e9e:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ed4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8007ea4:	490c      	ldr	r1, [pc, #48]	@ (8007ed8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f00b fe14 	bl	8013ad4 <canardInit>
 8007eac:	3420      	adds	r4, #32
 8007eae:	463d      	mov	r5, r7
 8007eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007eb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8007ec6:	bf00      	nop
 8007ec8:	3738      	adds	r7, #56	@ 0x38
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000a60 	.word	0x20000a60
 8007ed4:	08001a8d 	.word	0x08001a8d
 8007ed8:	08001a49 	.word	0x08001a49

08007edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f9a4 	bl	8008238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
	{ }
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fd fd0d 	bl	800595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	1d1a      	adds	r2, r3, #4
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	f000 f98b 	bl	8008268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
      }
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f98d 	bl	8008292 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f000 f970 	bl	8008268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f998 	bl	80082d0 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f998 	bl	80082e8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f9a0 	bl	8008300 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9a2 	bl	800831c <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f9a3 	bl	8008336 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7f9 fcaa 	bl	800195c <_ZNKSt9_Any_data9_M_accessEv>
 8008008:	4603      	mov	r3, r0
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	7138      	strb	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008048:	6838      	ldr	r0, [r7, #0]
 800804a:	f7ff ffed 	bl	8008028 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800804e:	4603      	mov	r3, r0
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4798      	blx	r3
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4610      	mov	r0, r2
 800805a:	4619      	mov	r1, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7f9 fc6b 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8008070:	4603      	mov	r3, r0
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800807a:	b590      	push	{r4, r7, lr}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008084:	6838      	ldr	r0, [r7, #0]
 8008086:	f000 f962 	bl	800834e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800808a:	4603      	mov	r3, r0
 800808c:	4622      	mov	r2, r4
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f967 	bl	8008364 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	bd90      	pop	{r4, r7, pc}

0800809e <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f974 	bl	8008396 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7f9 fc4c 	bl	800195c <_ZNKSt9_Any_data9_M_accessEv>
 80080c4:	4603      	mov	r3, r0
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	7138      	strb	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008104:	6838      	ldr	r0, [r7, #0]
 8008106:	f7ff ffed 	bl	80080e4 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800810a:	4603      	mov	r3, r0
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4798      	blx	r3
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008122:	6838      	ldr	r0, [r7, #0]
 8008124:	f000 f943 	bl	80083ae <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008128:	4603      	mov	r3, r0
 800812a:	4622      	mov	r2, r4
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f948 	bl	80083c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	bd90      	pop	{r4, r7, pc}

0800813c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f955 	bl	80083f6 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f000 f952 	bl	800840e <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff ffe6 	bl	8008154 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8008192:	b590      	push	{r4, r7, lr}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4618      	mov	r0, r3
 800819e:	f000 f94a 	bl	8008436 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80081a2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00c      	beq.n	80081c6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f94f 	bl	8008450 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80081b2:	4604      	mov	r4, r0
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f958 	bl	800846a <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80081ba:	4603      	mov	r3, r0
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4619      	mov	r1, r3
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 f95d 	bl	8008480 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
      }
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd90      	pop	{r4, r7, pc}

080081d6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80081e0:	6838      	ldr	r0, [r7, #0]
 80081e2:	f000 f972 	bl	80084ca <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f959 	bl	80084a2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 80081f0:	6838      	ldr	r0, [r7, #0]
 80081f2:	f000 f92d 	bl	8008450 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 f980 	bl	80084fe <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 80081fe:	4602      	mov	r2, r0
 8008200:	f107 030c 	add.w	r3, r7, #12
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f984 	bl	8008514 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f969 	bl	80084e4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8008212:	687b      	ldr	r3, [r7, #4]
	}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3308      	adds	r3, #8
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe fec3 	bl	8006fb4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8008248:	2010      	movs	r0, #16
 800824a:	f00b ff48 	bl	80140de <_Znwj>
 800824e:	4603      	mov	r3, r0
 8008250:	461c      	mov	r4, r3
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	4620      	mov	r0, r4
 8008256:	f000 f969 	bl	800852c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	601c      	str	r4, [r3, #0]
	}
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	bd90      	pop	{r4, r7, pc}

08008268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	601a      	str	r2, [r3, #0]
      }
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f95b 	bl	8008558 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80082a2:	4603      	mov	r3, r0
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80082a8:	6838      	ldr	r0, [r7, #0]
 80082aa:	f000 f955 	bl	8008558 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80082ae:	4603      	mov	r3, r0
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80082b6:	f107 030c 	add.w	r3, r7, #12
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f94c 	bl	8008558 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80082c0:	4603      	mov	r3, r0
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	601a      	str	r2, [r3, #0]
    }
 80082c8:	bf00      	nop
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f948 	bl	800856e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 80082de:	4603      	mov	r3, r0
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f949 	bl	8008588 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f939 	bl	800859e <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 800832c:	4603      	mov	r3, r0
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f938 	bl	80085b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8008344:	4603      	mov	r3, r0
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7f9 fae8 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8008376:	4603      	mov	r3, r0
 8008378:	4619      	mov	r1, r3
 800837a:	2004      	movs	r0, #4
 800837c:	f7f9 fa98 	bl	80018b0 <_ZnwjPv>
 8008380:	4604      	mov	r4, r0
 8008382:	68b8      	ldr	r0, [r7, #8]
 8008384:	f7ff ffe3 	bl	800834e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008388:	4603      	mov	r3, r0
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6023      	str	r3, [r4, #0]
	  }
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bd90      	pop	{r4, r7, pc}

08008396 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7f9 fad1 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f7f9 fab8 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 80083d6:	4603      	mov	r3, r0
 80083d8:	4619      	mov	r1, r3
 80083da:	2004      	movs	r0, #4
 80083dc:	f7f9 fa68 	bl	80018b0 <_ZnwjPv>
 80083e0:	4604      	mov	r4, r0
 80083e2:	68b8      	ldr	r0, [r7, #8]
 80083e4:	f7ff ffe3 	bl	80083ae <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80083e8:	4603      	mov	r3, r0
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6023      	str	r3, [r4, #0]
	  }
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd90      	pop	{r4, r7, pc}

080083f6 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7f9 faa1 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8008404:	4603      	mov	r3, r0
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800840e:	b590      	push	{r4, r7, lr}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f8d6 	bl	80085cc <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8008420:	683c      	ldr	r4, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f807 	bl	8008436 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008428:	4603      	mov	r3, r0
 800842a:	601c      	str	r4, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	bd90      	pop	{r4, r7, pc}

08008436 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8008436:	b580      	push	{r7, lr}
 8008438:	b082      	sub	sp, #8
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f8d0 	bl	80085e6 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008446:	4603      	mov	r3, r0
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f8d0 	bl	8008600 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008460:	4603      	mov	r3, r0
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	320c      	adds	r2, #12
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	4790      	blx	r2
      }
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 80084a2:	b590      	push	{r4, r7, lr}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80084ac:	687c      	ldr	r4, [r7, #4]
 80084ae:	463b      	mov	r3, r7
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 f8b2 	bl	800861a <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80084b6:	4603      	mov	r3, r0
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 f8b7 	bl	8008630 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd90      	pop	{r4, r7, pc}

080084ca <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 f8cb 	bl	8008670 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80084da:	4603      	mov	r3, r0
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f8d3 	bl	800869a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f8bb 	bl	80086b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800853e:	4a05      	ldr	r2, [pc, #20]	@ (8008554 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	080192dc 	.word	0x080192dc

08008558 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f8b1 	bl	80086e0 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 800857e:	4603      	mov	r3, r0
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f89a 	bl	80086f6 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 80085c2:	4603      	mov	r3, r0
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f898 	bl	800870c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f89b 	bl	800872c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80085f6:	4603      	mov	r3, r0
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f89a 	bl	8008744 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008610:	4603      	mov	r3, r0
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f88e 	bl	800875c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008640:	4603      	mov	r3, r0
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8008646:	683c      	ldr	r4, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f887 	bl	800875c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800864e:	4603      	mov	r3, r0
 8008650:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f81e 	bl	800869a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800865e:	4603      	mov	r3, r0
 8008660:	68f9      	ldr	r1, [r7, #12]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f887 	bl	8008776 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8008668:	bf00      	nop
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	bd90      	pop	{r4, r7, pc}

08008670 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff fedc 	bl	8008436 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800867e:	4603      	mov	r3, r0
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff fed6 	bl	8008436 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800868a:	4603      	mov	r3, r0
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
	return __p;
 8008690:	68fb      	ldr	r3, [r7, #12]
      }
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f877 	bl	8008798 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80086aa:	4603      	mov	r3, r0
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80086bc:	4a07      	ldr	r2, [pc, #28]	@ (80086dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	605a      	str	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	609a      	str	r2, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	0801939c 	.word	0x0801939c

080086e0 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f84b 	bl	80087b0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f853 	bl	80087c8 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f855 	bl	80087e4 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 800873a:	4603      	mov	r3, r0
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f856 	bl	80087fe <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008752:	4603      	mov	r3, r0
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f855 	bl	8008816 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800876c:	4603      	mov	r3, r0
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	320c      	adds	r2, #12
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	4790      	blx	r2
      }
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f845 	bl	8008830 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80087a6:	4603      	mov	r3, r0
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f845 	bl	8008848 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f835 	bl	800885e <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 80087f4:	4603      	mov	r3, r0
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f834 	bl	8008874 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 800880c:	4603      	mov	r3, r0
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f833 	bl	800888c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008826:	4603      	mov	r3, r0
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f833 	bl	80088a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 800883e:	4603      	mov	r3, r0
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f81d 	bl	80088bc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8008882:	4603      	mov	r3, r0
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f81c 	bl	80088d2 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 800889a:	4603      	mov	r3, r0
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f81d 	bl	80088ec <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 80088b2:	4603      	mov	r3, r0
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f810 	bl	8008902 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 80088e2:	4603      	mov	r3, r0
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	4a05      	ldr	r2, [pc, #20]	@ (8008938 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fdc7 	bl	80074bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	080192dc 	.word	0x080192dc

0800893c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff ffe7 	bl	8008918 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800894a:	2110      	movs	r1, #16
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f00b fbc4 	bl	80140da <_ZdlPvj>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3310      	adds	r3, #16
 8008968:	4618      	mov	r0, r3
 800896a:	f7f9 f833 	bl	80019d4 <_ZNSt8functionIFvvEED1Ev>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4618      	mov	r0, r3
 8008972:	f7f9 f822 	bl	80019ba <_ZNSt8functionIFyvEED1Ev>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <_Z41__static_initialization_and_destruction_0ii>:

}
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	@ 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d122      	bne.n	80089d6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008996:	4293      	cmp	r3, r2
 8008998:	d11d      	bne.n	80089d6 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 800899a:	f107 0308 	add.w	r3, r7, #8
 800899e:	4917      	ldr	r1, [pc, #92]	@ (80089fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe fb3b 	bl	800701c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 80089a6:	f107 0318 	add.w	r3, r7, #24
 80089aa:	4915      	ldr	r1, [pc, #84]	@ (8008a00 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fb65 	bl	800707c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 80089b2:	f107 0218 	add.w	r2, r7, #24
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	4619      	mov	r1, r3
 80089bc:	4811      	ldr	r0, [pc, #68]	@ (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80089be:	f7f9 f816 	bl	80019ee <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 80089c2:	f107 0318 	add.w	r3, r7, #24
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7f9 f804 	bl	80019d4 <_ZNSt8functionIFvvEED1Ev>
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7f8 fff2 	bl	80019ba <_ZNSt8functionIFyvEED1Ev>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d105      	bne.n	80089f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80089e6:	4807      	ldr	r0, [pc, #28]	@ (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80089e8:	f7ff ffb8 	bl	800895c <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 80089ec:	4806      	ldr	r0, [pc, #24]	@ (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80089ee:	f7fd f800 	bl	80059f2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80089f2:	bf00      	nop
 80089f4:	3728      	adds	r7, #40	@ 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	08005985 	.word	0x08005985
 8008a00:	08005979 	.word	0x08005979
 8008a04:	20000320 	.word	0x20000320
 8008a08:	20000318 	.word	0x20000318

08008a0c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8008a0c:	b590      	push	{r4, r7, lr}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68dc      	ldr	r4, [r3, #12]
 8008a18:	2c00      	cmp	r4, #0
 8008a1a:	d006      	beq.n	8008a2a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff fbfd 	bl	800821c <_ZN15CyphalInterfaceD1Ev>
 8008a22:	210c      	movs	r1, #12
 8008a24:	4620      	mov	r0, r4
 8008a26:	f00b fb58 	bl	80140da <_ZdlPvj>
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd90      	pop	{r4, r7, pc}

08008a32 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
      { delete this; }
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff7b 	bl	800893c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8008a66:	b580      	push	{r7, lr}
 8008a68:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8008a72:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8008a76:	6018      	str	r0, [r3, #0]
 8008a78:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8008a7c:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8008a80:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 8008a82:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8008a86:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fbb9 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008a96:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8008a9a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8008a9e:	f107 0108 	add.w	r1, r7, #8
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	f000 f874 	bl	8008b90 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008aa8:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8008aac:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8008abc:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
 8008ac0:	f107 0108 	add.w	r1, r7, #8
 8008ac4:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 8008ac8:	f5a0 7047 	sub.w	r0, r0, #796	@ 0x31c
 8008acc:	6812      	ldr	r2, [r2, #0]
 8008ace:	6800      	ldr	r0, [r0, #0]
 8008ad0:	4798      	blx	r3
    }
 8008ad2:	bf00      	nop
 8008ad4:	f507 7748 	add.w	r7, r7, #800	@ 0x320
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fb8b 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008af2:	f107 030c 	add.w	r3, r7, #12
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4619      	mov	r1, r3
 8008afa:	f000 f86a 	bl	8008bd2 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3304      	adds	r3, #4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f107 010c 	add.w	r1, r7, #12
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
    }
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fb6d 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008b2e:	f107 030c 	add.w	r3, r7, #12
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4619      	mov	r1, r3
 8008b36:	f000 f86c 	bl	8008c12 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f107 010c 	add.w	r1, r7, #12
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
    }
 8008b4c:	bf00      	nop
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fb4f 	bl	8007208 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008b6a:	f107 0308 	add.w	r3, r7, #8
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4619      	mov	r1, r3
 8008b72:	f000 f86e 	bl	8008c52 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f107 0108 	add.w	r1, r7, #8
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	4798      	blx	r3
    }
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8008b9c:	f240 2303 	movw	r3, #515	@ 0x203
 8008ba0:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	f107 0214 	add.w	r2, r7, #20
 8008baa:	4619      	mov	r1, r3
 8008bac:	68b8      	ldr	r0, [r7, #8]
 8008bae:	f7fc fb31 	bl	8005214 <uavcan_register_Access_Request_1_0_deserialize_>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	09db      	lsrs	r3, r3, #7
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d005      	beq.n	8008bca <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	3310      	adds	r3, #16
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fe57 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8008bca:	bf00      	nop
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f107 0214 	add.w	r2, r7, #20
 8008bea:	4619      	mov	r1, r3
 8008bec:	68b8      	ldr	r0, [r7, #8]
 8008bee:	f7fc fcfd 	bl	80055ec <uavcan_node_GetInfo_Request_1_0_deserialize_>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	09db      	lsrs	r3, r3, #7
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d005      	beq.n	8008c0a <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	3310      	adds	r3, #16
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fe37 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8008c1e:	230c      	movs	r3, #12
 8008c20:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f107 0214 	add.w	r2, r7, #20
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f7f9 ffe7 	bl	8002c00 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8008c32:	4603      	mov	r3, r0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	09db      	lsrs	r3, r3, #7
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	3310      	adds	r3, #16
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe fe17 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
}
 8008c4a:	bf00      	nop
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b086      	sub	sp, #24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8008c5e:	230c      	movs	r3, #12
 8008c60:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	f107 0214 	add.w	r2, r7, #20
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68b8      	ldr	r0, [r7, #8]
 8008c6e:	f7f9 fc51 	bl	8002514 <uavcan_node_Heartbeat_1_0_deserialize_>
 8008c72:	4603      	mov	r3, r0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	09db      	lsrs	r3, r3, #7
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d005      	beq.n	8008c8a <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	3310      	adds	r3, #16
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fdf7 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
}
 8008c8a:	bf00      	nop
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <_GLOBAL__sub_I_buffer>:
 8008c92:	b580      	push	{r7, lr}
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	f7ff fe70 	bl	8008980 <_Z41__static_initialization_and_destruction_0ii>
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <_GLOBAL__sub_D_buffer>:
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008caa:	2000      	movs	r0, #0
 8008cac:	f7ff fe68 	bl	8008980 <_Z41__static_initialization_and_destruction_0ii>
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008cba:	4b16      	ldr	r3, [pc, #88]	@ (8008d14 <MX_DMA_Init+0x60>)
 8008cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cbe:	4a15      	ldr	r2, [pc, #84]	@ (8008d14 <MX_DMA_Init+0x60>)
 8008cc0:	f043 0304 	orr.w	r3, r3, #4
 8008cc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8008cc6:	4b13      	ldr	r3, [pc, #76]	@ (8008d14 <MX_DMA_Init+0x60>)
 8008cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	607b      	str	r3, [r7, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008cd2:	4b10      	ldr	r3, [pc, #64]	@ (8008d14 <MX_DMA_Init+0x60>)
 8008cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008d14 <MX_DMA_Init+0x60>)
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <MX_DMA_Init+0x60>)
 8008ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008cea:	2200      	movs	r2, #0
 8008cec:	2100      	movs	r1, #0
 8008cee:	200b      	movs	r0, #11
 8008cf0:	f001 ffc9 	bl	800ac86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008cf4:	200b      	movs	r0, #11
 8008cf6:	f001 ffe0 	bl	800acba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	200c      	movs	r0, #12
 8008d00:	f001 ffc1 	bl	800ac86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008d04:	200c      	movs	r0, #12
 8008d06:	f001 ffd8 	bl	800acba <HAL_NVIC_EnableIRQ>

}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	40021000 	.word	0x40021000

08008d18 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8008d1c:	4b20      	ldr	r3, [pc, #128]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d1e:	4a21      	ldr	r2, [pc, #132]	@ (8008da4 <MX_FDCAN1_Init+0x8c>)
 8008d20:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8008d22:	4b1f      	ldr	r3, [pc, #124]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8008d28:	4b1d      	ldr	r3, [pc, #116]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8008d2e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8008d30:	4b1b      	ldr	r3, [pc, #108]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8008d36:	4b1a      	ldr	r3, [pc, #104]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d38:	2201      	movs	r2, #1
 8008d3a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8008d3c:	4b18      	ldr	r3, [pc, #96]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8008d42:	4b17      	ldr	r3, [pc, #92]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8008d48:	4b15      	ldr	r3, [pc, #84]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d4a:	2204      	movs	r2, #4
 8008d4c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8008d4e:	4b14      	ldr	r3, [pc, #80]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8008d54:	4b12      	ldr	r3, [pc, #72]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d56:	221d      	movs	r2, #29
 8008d58:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 8008d5a:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8008d60:	4b0f      	ldr	r3, [pc, #60]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d62:	2204      	movs	r2, #4
 8008d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8008d66:	4b0e      	ldr	r3, [pc, #56]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d68:	2201      	movs	r2, #1
 8008d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8008d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d6e:	2202      	movs	r2, #2
 8008d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8008d72:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d74:	2202      	movs	r2, #2
 8008d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8008d78:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 8008d7e:	4b08      	ldr	r3, [pc, #32]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d80:	2203      	movs	r2, #3
 8008d82:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8008d84:	4b06      	ldr	r3, [pc, #24]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8008d8a:	4805      	ldr	r0, [pc, #20]	@ (8008da0 <MX_FDCAN1_Init+0x88>)
 8008d8c:	f002 fa38 	bl	800b200 <HAL_FDCAN_Init>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8008d96:	f000 fb62 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8008d9a:	bf00      	nop
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000614 	.word	0x20000614
 8008da4:	40006400 	.word	0x40006400

08008da8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b09e      	sub	sp, #120	@ 0x78
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	60da      	str	r2, [r3, #12]
 8008dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008dc0:	f107 0310 	add.w	r3, r7, #16
 8008dc4:	2254      	movs	r2, #84	@ 0x54
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f00c fa6a 	bl	80152a2 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a20      	ldr	r2, [pc, #128]	@ (8008e54 <HAL_FDCAN_MspInit+0xac>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d138      	bne.n	8008e4a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ddc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8008dde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008de2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008de4:	f107 0310 	add.w	r3, r7, #16
 8008de8:	4618      	mov	r0, r3
 8008dea:	f005 fb49 	bl	800e480 <HAL_RCCEx_PeriphCLKConfig>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8008df4:	f000 fb33 	bl	800945e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008df8:	4b17      	ldr	r3, [pc, #92]	@ (8008e58 <HAL_FDCAN_MspInit+0xb0>)
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dfc:	4a16      	ldr	r2, [pc, #88]	@ (8008e58 <HAL_FDCAN_MspInit+0xb0>)
 8008dfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e04:	4b14      	ldr	r3, [pc, #80]	@ (8008e58 <HAL_FDCAN_MspInit+0xb0>)
 8008e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e10:	4b11      	ldr	r3, [pc, #68]	@ (8008e58 <HAL_FDCAN_MspInit+0xb0>)
 8008e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e14:	4a10      	ldr	r2, [pc, #64]	@ (8008e58 <HAL_FDCAN_MspInit+0xb0>)
 8008e16:	f043 0302 	orr.w	r3, r3, #2
 8008e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e58 <HAL_FDCAN_MspInit+0xb0>)
 8008e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	60bb      	str	r3, [r7, #8]
 8008e26:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008e28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008e2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e36:	2300      	movs	r3, #0
 8008e38:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8008e3a:	2309      	movs	r3, #9
 8008e3c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008e42:	4619      	mov	r1, r3
 8008e44:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <HAL_FDCAN_MspInit+0xb4>)
 8008e46:	f002 fe8f 	bl	800bb68 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8008e4a:	bf00      	nop
 8008e4c:	3778      	adds	r7, #120	@ 0x78
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40006400 	.word	0x40006400
 8008e58:	40021000 	.word	0x40021000
 8008e5c:	48000400 	.word	0x48000400

08008e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	@ 0x28
 8008e64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e66:	f107 0314 	add.w	r3, r7, #20
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	605a      	str	r2, [r3, #4]
 8008e70:	609a      	str	r2, [r3, #8]
 8008e72:	60da      	str	r2, [r3, #12]
 8008e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e76:	4b4a      	ldr	r3, [pc, #296]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e7a:	4a49      	ldr	r2, [pc, #292]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008e7c:	f043 0320 	orr.w	r3, r3, #32
 8008e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e82:	4b47      	ldr	r3, [pc, #284]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	613b      	str	r3, [r7, #16]
 8008e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e8e:	4b44      	ldr	r3, [pc, #272]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e92:	4a43      	ldr	r2, [pc, #268]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008e94:	f043 0304 	orr.w	r3, r3, #4
 8008e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e9a:	4b41      	ldr	r3, [pc, #260]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008eac:	f043 0301 	orr.w	r3, r3, #1
 8008eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	60bb      	str	r3, [r7, #8]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ebe:	4b38      	ldr	r3, [pc, #224]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ec2:	4a37      	ldr	r2, [pc, #220]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008ec4:	f043 0308 	orr.w	r3, r3, #8
 8008ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008eca:	4b35      	ldr	r3, [pc, #212]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	607b      	str	r3, [r7, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ed6:	4b32      	ldr	r3, [pc, #200]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eda:	4a31      	ldr	r2, [pc, #196]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008edc:	f043 0302 	orr.w	r3, r3, #2
 8008ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8008fa0 <MX_GPIO_Init+0x140>)
 8008ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f649 3110 	movw	r1, #39696	@ 0x9b10
 8008ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ef8:	f002 ffb8 	bl	800be6c <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8008efc:	2200      	movs	r2, #0
 8008efe:	2120      	movs	r1, #32
 8008f00:	4828      	ldr	r0, [pc, #160]	@ (8008fa4 <MX_GPIO_Init+0x144>)
 8008f02:	f002 ffb3 	bl	800be6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008f06:	2200      	movs	r2, #0
 8008f08:	2104      	movs	r1, #4
 8008f0a:	4827      	ldr	r0, [pc, #156]	@ (8008fa8 <MX_GPIO_Init+0x148>)
 8008f0c:	f002 ffae 	bl	800be6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 8008f10:	2301      	movs	r3, #1
 8008f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008f14:	2303      	movs	r3, #3
 8008f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4619      	mov	r1, r3
 8008f22:	4820      	ldr	r0, [pc, #128]	@ (8008fa4 <MX_GPIO_Init+0x144>)
 8008f24:	f002 fe20 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 8008f28:	230c      	movs	r3, #12
 8008f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f34:	f107 0314 	add.w	r3, r7, #20
 8008f38:	4619      	mov	r1, r3
 8008f3a:	481a      	ldr	r0, [pc, #104]	@ (8008fa4 <MX_GPIO_Init+0x144>)
 8008f3c:	f002 fe14 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8008f40:	f649 3310 	movw	r3, #39696	@ 0x9b10
 8008f44:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f46:	2301      	movs	r3, #1
 8008f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	4619      	mov	r1, r3
 8008f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008f5c:	f002 fe04 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8008f60:	2320      	movs	r3, #32
 8008f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f64:	2301      	movs	r3, #1
 8008f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8008f70:	f107 0314 	add.w	r3, r7, #20
 8008f74:	4619      	mov	r1, r3
 8008f76:	480b      	ldr	r0, [pc, #44]	@ (8008fa4 <MX_GPIO_Init+0x144>)
 8008f78:	f002 fdf6 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f80:	2301      	movs	r3, #1
 8008f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8008f8c:	f107 0314 	add.w	r3, r7, #20
 8008f90:	4619      	mov	r1, r3
 8008f92:	4805      	ldr	r0, [pc, #20]	@ (8008fa8 <MX_GPIO_Init+0x148>)
 8008f94:	f002 fde8 	bl	800bb68 <HAL_GPIO_Init>

}
 8008f98:	bf00      	nop
 8008f9a:	3728      	adds	r7, #40	@ 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	40021000 	.word	0x40021000
 8008fa4:	48000800 	.word	0x48000800
 8008fa8:	48000c00 	.word	0x48000c00

08008fac <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8009024 <MX_I2C4_Init+0x78>)
 8008fb4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8009028 <MX_I2C4_Init+0x7c>)
 8008fba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8008fbc:	4b18      	ldr	r3, [pc, #96]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008fc2:	4b17      	ldr	r3, [pc, #92]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008fc8:	4b15      	ldr	r3, [pc, #84]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8008fce:	4b14      	ldr	r3, [pc, #80]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008fd4:	4b12      	ldr	r3, [pc, #72]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008fda:	4b11      	ldr	r3, [pc, #68]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8008fe6:	480e      	ldr	r0, [pc, #56]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008fe8:	f002 ff72 	bl	800bed0 <HAL_I2C_Init>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8008ff2:	f000 fa34 	bl	800945e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4809      	ldr	r0, [pc, #36]	@ (8009020 <MX_I2C4_Init+0x74>)
 8008ffa:	f004 fbc7 	bl	800d78c <HAL_I2CEx_ConfigAnalogFilter>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8009004:	f000 fa2b 	bl	800945e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8009008:	2100      	movs	r1, #0
 800900a:	4805      	ldr	r0, [pc, #20]	@ (8009020 <MX_I2C4_Init+0x74>)
 800900c:	f004 fc09 	bl	800d822 <HAL_I2CEx_ConfigDigitalFilter>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8009016:	f000 fa22 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800901a:	bf00      	nop
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000678 	.word	0x20000678
 8009024:	40008400 	.word	0x40008400
 8009028:	00702991 	.word	0x00702991

0800902c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b0a0      	sub	sp, #128	@ 0x80
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009034:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	605a      	str	r2, [r3, #4]
 800903e:	609a      	str	r2, [r3, #8]
 8009040:	60da      	str	r2, [r3, #12]
 8009042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009044:	f107 0318 	add.w	r3, r7, #24
 8009048:	2254      	movs	r2, #84	@ 0x54
 800904a:	2100      	movs	r1, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f00c f928 	bl	80152a2 <memset>
  if(i2cHandle->Instance==I2C4)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a5e      	ldr	r2, [pc, #376]	@ (80091d0 <HAL_I2C_MspInit+0x1a4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	f040 80b5 	bne.w	80091c8 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800905e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009062:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8009064:	2300      	movs	r3, #0
 8009066:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009068:	f107 0318 	add.w	r3, r7, #24
 800906c:	4618      	mov	r0, r3
 800906e:	f005 fa07 	bl	800e480 <HAL_RCCEx_PeriphCLKConfig>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8009078:	f000 f9f1 	bl	800945e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800907c:	4b55      	ldr	r3, [pc, #340]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 800907e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009080:	4a54      	ldr	r2, [pc, #336]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 8009082:	f043 0304 	orr.w	r3, r3, #4
 8009086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009088:	4b52      	ldr	r3, [pc, #328]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 800908a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	617b      	str	r3, [r7, #20]
 8009092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009094:	4b4f      	ldr	r3, [pc, #316]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 8009096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009098:	4a4e      	ldr	r2, [pc, #312]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 800909a:	f043 0302 	orr.w	r3, r3, #2
 800909e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80090a0:	4b4c      	ldr	r3, [pc, #304]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 80090a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	613b      	str	r3, [r7, #16]
 80090aa:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80090ac:	2340      	movs	r3, #64	@ 0x40
 80090ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80090b0:	2312      	movs	r3, #18
 80090b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090b8:	2300      	movs	r3, #0
 80090ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80090bc:	2308      	movs	r3, #8
 80090be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80090c4:	4619      	mov	r1, r3
 80090c6:	4844      	ldr	r0, [pc, #272]	@ (80091d8 <HAL_I2C_MspInit+0x1ac>)
 80090c8:	f002 fd4e 	bl	800bb68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80090cc:	2380      	movs	r3, #128	@ 0x80
 80090ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80090d0:	2312      	movs	r3, #18
 80090d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090d4:	2300      	movs	r3, #0
 80090d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090d8:	2300      	movs	r3, #0
 80090da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80090dc:	2303      	movs	r3, #3
 80090de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80090e4:	4619      	mov	r1, r3
 80090e6:	483d      	ldr	r0, [pc, #244]	@ (80091dc <HAL_I2C_MspInit+0x1b0>)
 80090e8:	f002 fd3e 	bl	800bb68 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80090ec:	4b39      	ldr	r3, [pc, #228]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 80090ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090f0:	4a38      	ldr	r2, [pc, #224]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 80090f2:	f043 0302 	orr.w	r3, r3, #2
 80090f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80090f8:	4b36      	ldr	r3, [pc, #216]	@ (80091d4 <HAL_I2C_MspInit+0x1a8>)
 80090fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8009104:	4b36      	ldr	r3, [pc, #216]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 8009106:	4a37      	ldr	r2, [pc, #220]	@ (80091e4 <HAL_I2C_MspInit+0x1b8>)
 8009108:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 800910a:	4b35      	ldr	r3, [pc, #212]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 800910c:	2216      	movs	r2, #22
 800910e:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009110:	4b33      	ldr	r3, [pc, #204]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009116:	4b32      	ldr	r3, [pc, #200]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 8009118:	2200      	movs	r2, #0
 800911a:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800911c:	4b30      	ldr	r3, [pc, #192]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 800911e:	2280      	movs	r2, #128	@ 0x80
 8009120:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009122:	4b2f      	ldr	r3, [pc, #188]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 8009124:	2200      	movs	r2, #0
 8009126:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009128:	4b2d      	ldr	r3, [pc, #180]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 800912a:	2200      	movs	r2, #0
 800912c:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 800912e:	4b2c      	ldr	r3, [pc, #176]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 8009130:	2200      	movs	r2, #0
 8009132:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009134:	4b2a      	ldr	r3, [pc, #168]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 8009136:	2200      	movs	r2, #0
 8009138:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800913a:	4829      	ldr	r0, [pc, #164]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 800913c:	f001 fdd8 	bl	800acf0 <HAL_DMA_Init>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8009146:	f000 f98a 	bl	800945e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a24      	ldr	r2, [pc, #144]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 800914e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009150:	4a23      	ldr	r2, [pc, #140]	@ (80091e0 <HAL_I2C_MspInit+0x1b4>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8009156:	4b24      	ldr	r3, [pc, #144]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 8009158:	4a24      	ldr	r2, [pc, #144]	@ (80091ec <HAL_I2C_MspInit+0x1c0>)
 800915a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 800915c:	4b22      	ldr	r3, [pc, #136]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 800915e:	2217      	movs	r2, #23
 8009160:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009162:	4b21      	ldr	r3, [pc, #132]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 8009164:	2210      	movs	r2, #16
 8009166:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009168:	4b1f      	ldr	r3, [pc, #124]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 800916a:	2200      	movs	r2, #0
 800916c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800916e:	4b1e      	ldr	r3, [pc, #120]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 8009170:	2280      	movs	r2, #128	@ 0x80
 8009172:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009174:	4b1c      	ldr	r3, [pc, #112]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 8009176:	2200      	movs	r2, #0
 8009178:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800917a:	4b1b      	ldr	r3, [pc, #108]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 800917c:	2200      	movs	r2, #0
 800917e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8009180:	4b19      	ldr	r3, [pc, #100]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 8009182:	2200      	movs	r2, #0
 8009184:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009186:	4b18      	ldr	r3, [pc, #96]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 8009188:	2200      	movs	r2, #0
 800918a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800918c:	4816      	ldr	r0, [pc, #88]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 800918e:	f001 fdaf 	bl	800acf0 <HAL_DMA_Init>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8009198:	f000 f961 	bl	800945e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a12      	ldr	r2, [pc, #72]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 80091a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80091a2:	4a11      	ldr	r2, [pc, #68]	@ (80091e8 <HAL_I2C_MspInit+0x1bc>)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80091a8:	2200      	movs	r2, #0
 80091aa:	2100      	movs	r1, #0
 80091ac:	2052      	movs	r0, #82	@ 0x52
 80091ae:	f001 fd6a 	bl	800ac86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80091b2:	2052      	movs	r0, #82	@ 0x52
 80091b4:	f001 fd81 	bl	800acba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80091b8:	2200      	movs	r2, #0
 80091ba:	2100      	movs	r1, #0
 80091bc:	2053      	movs	r0, #83	@ 0x53
 80091be:	f001 fd62 	bl	800ac86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80091c2:	2053      	movs	r0, #83	@ 0x53
 80091c4:	f001 fd79 	bl	800acba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80091c8:	bf00      	nop
 80091ca:	3780      	adds	r7, #128	@ 0x80
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40008400 	.word	0x40008400
 80091d4:	40021000 	.word	0x40021000
 80091d8:	48000800 	.word	0x48000800
 80091dc:	48000400 	.word	0x48000400
 80091e0:	200006cc 	.word	0x200006cc
 80091e4:	40020008 	.word	0x40020008
 80091e8:	2000072c 	.word	0x2000072c
 80091ec:	4002001c 	.word	0x4002001c

080091f0 <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
	{
		mc->motor_type = 14;
	}
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	220e      	movs	r2, #14
 80091fe:	701a      	strb	r2, [r3, #0]
	}

	switch(mc->motor_type)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f993 3000 	ldrsb.w	r3, [r3]
 8009206:	2b17      	cmp	r3, #23
 8009208:	d01b      	beq.n	8009242 <motor_config_assembler+0x52>
 800920a:	2b17      	cmp	r3, #23
 800920c:	dc23      	bgt.n	8009256 <motor_config_assembler+0x66>
 800920e:	2b0e      	cmp	r3, #14
 8009210:	d002      	beq.n	8009218 <motor_config_assembler+0x28>
 8009212:	2b11      	cmp	r3, #17
 8009214:	d00b      	beq.n	800922e <motor_config_assembler+0x3e>
 8009216:	e01e      	b.n	8009256 <motor_config_assembler+0x66>
	{
	case 14:
		mc->max_irun_scaler = 8;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2208      	movs	r2, #8
 800921c:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009224:	605a      	str	r2, [r3, #4]
		mc->init_irun = 3;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2203      	movs	r2, #3
 800922a:	725a      	strb	r2, [r3, #9]
		break;
 800922c:	e013      	b.n	8009256 <motor_config_assembler+0x66>
	case 17:
		mc->max_irun_scaler = 12;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	220c      	movs	r2, #12
 8009232:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a0d      	ldr	r2, [pc, #52]	@ (800926c <motor_config_assembler+0x7c>)
 8009238:	605a      	str	r2, [r3, #4]
		mc->init_irun = 6;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2206      	movs	r2, #6
 800923e:	725a      	strb	r2, [r3, #9]
		break;
 8009240:	e009      	b.n	8009256 <motor_config_assembler+0x66>
	case 23:
		mc->max_irun_scaler = 31;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	221f      	movs	r2, #31
 8009246:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a09      	ldr	r2, [pc, #36]	@ (8009270 <motor_config_assembler+0x80>)
 800924c:	605a      	str	r2, [r3, #4]
		mc->init_irun = 15;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	220f      	movs	r2, #15
 8009252:	725a      	strb	r2, [r3, #9]
		break;
 8009254:	bf00      	nop
	}
	mc->direction = jc->direction;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	729a      	strb	r2, [r3, #10]
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	4079999a 	.word	0x4079999a
 8009270:	41233333 	.word	0x41233333

08009274 <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf, joint_config_address * jc_a)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}
	else if (JOINT_N == 6)
	{
		jconf->motor_gear_ratio = 19.203208;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a20      	ldr	r2, [pc, #128]	@ (8009304 <joint_config_assembler+0x90>)
 8009282:	60da      	str	r2, [r3, #12]
		jconf->joint_gear_ratio = 1;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800928a:	609a      	str	r2, [r3, #8]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009292:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009308 <joint_config_assembler+0x94>
 8009296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	edd3 7a02 	vldr	s15, [r3, #8]
 80092a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a8:	ee17 2a90 	vmov	r2, s15
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]
		jconf->direction = -1;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	22ff      	movs	r2, #255	@ 0xff
 80092b4:	705a      	strb	r2, [r3, #1]
		jconf->lower_limit_ticks = 0;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	615a      	str	r2, [r3, #20]
		jconf->upper_limit_ticks = 0;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	611a      	str	r2, [r3, #16]
	}

	//TODO!!!!!!!!!!!!!!!!!!!!!!!!! from config read
	jconf->lower_limit_enc = 0.0;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_enc = 0.0;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f04f 0200 	mov.w	r2, #0
 80092d0:	619a      	str	r2, [r3, #24]
	jconf->zero_enc = 0;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	621a      	str	r2, [r3, #32]
	//TODO!!!!!!!!!!!!!!!!!!!!!!!!!

	jc_a->address_of_upper_limit_enc = 0x00;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2200      	movs	r2, #0
 80092dc:	801a      	strh	r2, [r3, #0]
	jc_a->address_of_lower_limit_enc = jc_a->address_of_upper_limit_enc + sizeof(jconf->upper_limit_enc);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	3304      	adds	r3, #4
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	805a      	strh	r2, [r3, #2]
	jc_a->address_of_zero_enc = jc_a->address_of_lower_limit_enc + sizeof(jconf->lower_limit_enc);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	3304      	adds	r3, #4
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	809a      	strh	r2, [r3, #4]

}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	4199a02c 	.word	0x4199a02c
 8009308:	47480000 	.word	0x47480000

0800930c <joint_config_write>:




void joint_config_write(joint_config * jc, joint_config_address * jc_a)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	int timeout = 100;
 8009316:	2364      	movs	r3, #100	@ 0x64
 8009318:	60fb      	str	r3, [r7, #12]
	if (at24_isConnected())
 800931a:	f7f8 fa53 	bl	80017c4 <at24_isConnected>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d025      	beq.n	8009370 <joint_config_write+0x64>
	{
		at24_write(&jc_a->address_of_upper_limit_enc, &jc->upper_limit_enc, sizeof(&jc->upper_limit_enc), timeout);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	b298      	uxth	r0, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f103 0118 	add.w	r1, r3, #24
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2204      	movs	r2, #4
 8009332:	f7f8 fa59 	bl	80017e8 <at24_write>
		os_delay(1);
 8009336:	2001      	movs	r0, #1
 8009338:	f001 fba8 	bl	800aa8c <HAL_Delay>
		at24_write(&jc_a->address_of_lower_limit_enc, &jc->lower_limit_enc, sizeof(&jc->lower_limit_enc), timeout);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	3302      	adds	r3, #2
 8009340:	b298      	uxth	r0, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f103 011c 	add.w	r1, r3, #28
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2204      	movs	r2, #4
 800934c:	f7f8 fa4c 	bl	80017e8 <at24_write>
		os_delay(1);
 8009350:	2001      	movs	r0, #1
 8009352:	f001 fb9b 	bl	800aa8c <HAL_Delay>
		at24_write(&jc_a->address_of_zero_enc, &jc->zero_enc, sizeof(&jc->zero_enc), timeout);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	3304      	adds	r3, #4
 800935a:	b298      	uxth	r0, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f103 0120 	add.w	r1, r3, #32
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2204      	movs	r2, #4
 8009366:	f7f8 fa3f 	bl	80017e8 <at24_write>
		os_delay(1);
 800936a:	2001      	movs	r0, #1
 800936c:	f001 fb8e 	bl	800aa8c <HAL_Delay>
	}
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800937c:	f001 fb15 	bl	800a9aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009380:	f000 f822 	bl	80093c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009384:	f7ff fd6c 	bl	8008e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8009388:	f7ff fc94 	bl	8008cb4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800938c:	f7ff fcc4 	bl	8008d18 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8009390:	f7ff fe0c 	bl	8008fac <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8009394:	f001 f9a4 	bl	800a6e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8009398:	f000 f9a2 	bl	80096e0 <MX_SPI1_Init>
  MX_SPI3_Init();
 800939c:	f000 f9de 	bl	800975c <MX_SPI3_Init>
  MX_TIM8_Init();
 80093a0:	f000 fc82 	bl	8009ca8 <MX_TIM8_Init>
  MX_TIM7_Init();
 80093a4:	f000 fc48 	bl	8009c38 <MX_TIM7_Init>
  MX_TIM6_Init();
 80093a8:	f000 fc10 	bl	8009bcc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80093ac:	4804      	ldr	r0, [pc, #16]	@ (80093c0 <main+0x48>)
 80093ae:	f006 f9c7 	bl	800f740 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80093b2:	4804      	ldr	r0, [pc, #16]	@ (80093c4 <main+0x4c>)
 80093b4:	f006 f9c4 	bl	800f740 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  main_cpp();
 80093b8:	f000 f858 	bl	800946c <main_cpp>

  while (1)
 80093bc:	bf00      	nop
 80093be:	e7fd      	b.n	80093bc <main+0x44>
 80093c0:	200008f0 	.word	0x200008f0
 80093c4:	200008a4 	.word	0x200008a4

080093c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b094      	sub	sp, #80	@ 0x50
 80093cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80093ce:	f107 0318 	add.w	r3, r7, #24
 80093d2:	2238      	movs	r2, #56	@ 0x38
 80093d4:	2100      	movs	r1, #0
 80093d6:	4618      	mov	r0, r3
 80093d8:	f00b ff63 	bl	80152a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80093dc:	1d3b      	adds	r3, r7, #4
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	605a      	str	r2, [r3, #4]
 80093e4:	609a      	str	r2, [r3, #8]
 80093e6:	60da      	str	r2, [r3, #12]
 80093e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80093ea:	2000      	movs	r0, #0
 80093ec:	f004 fa66 	bl	800d8bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80093f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80093f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80093fa:	2302      	movs	r3, #2
 80093fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80093fe:	2303      	movs	r3, #3
 8009400:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8009402:	2301      	movs	r3, #1
 8009404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8009406:	2328      	movs	r3, #40	@ 0x28
 8009408:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800940a:	2302      	movs	r3, #2
 800940c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800940e:	2302      	movs	r3, #2
 8009410:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009412:	2302      	movs	r3, #2
 8009414:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009416:	f107 0318 	add.w	r3, r7, #24
 800941a:	4618      	mov	r0, r3
 800941c:	f004 fb02 	bl	800da24 <HAL_RCC_OscConfig>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009426:	f000 f81a 	bl	800945e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800942a:	230f      	movs	r3, #15
 800942c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800942e:	2303      	movs	r3, #3
 8009430:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800943a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800943c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009440:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009442:	1d3b      	adds	r3, r7, #4
 8009444:	2104      	movs	r1, #4
 8009446:	4618      	mov	r0, r3
 8009448:	f004 fdfe 	bl	800e048 <HAL_RCC_ClockConfig>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009452:	f000 f804 	bl	800945e <Error_Handler>
  }
}
 8009456:	bf00      	nop
 8009458:	3750      	adds	r7, #80	@ 0x50
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800945e:	b480      	push	{r7}
 8009460:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009462:	b672      	cpsid	i
}
 8009464:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009466:	bf00      	nop
 8009468:	e7fd      	b.n	8009466 <Error_Handler+0x8>
	...

0800946c <main_cpp>:
joint_config jc;
joint_config_address jc_a;
uint16_t enc_angle = 0;

void main_cpp()
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b090      	sub	sp, #64	@ 0x40
 8009470:	af00      	add	r7, sp, #0
	cyphal_can_starter(&hfdcan1);
 8009472:	4828      	ldr	r0, [pc, #160]	@ (8009514 <main_cpp+0xa8>)
 8009474:	f7fd fbee 	bl	8006c54 <cyphal_can_starter>
	setup_cyphal(&hfdcan1);
 8009478:	4826      	ldr	r0, [pc, #152]	@ (8009514 <main_cpp+0xa8>)
 800947a:	f7fd fb47 	bl	8006b0c <setup_cyphal>
	HAL_Delay(10);
 800947e:	200a      	movs	r0, #10
 8009480:	f001 fb04 	bl	800aa8c <HAL_Delay>
	joint_config_assembler(&jc, &jc_a);
 8009484:	4924      	ldr	r1, [pc, #144]	@ (8009518 <main_cpp+0xac>)
 8009486:	4825      	ldr	r0, [pc, #148]	@ (800951c <main_cpp+0xb0>)
 8009488:	f7ff fef4 	bl	8009274 <joint_config_assembler>
	motor_config_assembler(&mc, &jc);
 800948c:	4923      	ldr	r1, [pc, #140]	@ (800951c <main_cpp+0xb0>)
 800948e:	4824      	ldr	r0, [pc, #144]	@ (8009520 <main_cpp+0xb4>)
 8009490:	f7ff feae 	bl	80091f0 <motor_config_assembler>
	//joint_config_read(&jc, &jc_a);
	HAL_Delay(10);
 8009494:	200a      	movs	r0, #10
 8009496:	f001 faf9 	bl	800aa8c <HAL_Delay>
	tmc5160_init(&mc);
 800949a:	4821      	ldr	r0, [pc, #132]	@ (8009520 <main_cpp+0xb4>)
 800949c:	f000 ff6c 	bl	800a378 <tmc5160_init>
	//js_init();
	HAL_Delay(10);
 80094a0:	200a      	movs	r0, #10
 80094a2:	f001 faf3 	bl	800aa8c <HAL_Delay>
	//uint8_t msg[10];
	//int i = 0;

	HAL_StatusTypeDef rv;

	uint32_t last_hbeat = HAL_GetTick();
 80094a6:	f001 fae5 	bl	800aa74 <HAL_GetTick>
 80094aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	uint32_t last_js = HAL_GetTick();
 80094ac:	f001 fae2 	bl	800aa74 <HAL_GetTick>
 80094b0:	63b8      	str	r0, [r7, #56]	@ 0x38
	uint32_t last_AR = HAL_GetTick();
 80094b2:	f001 fadf 	bl	800aa74 <HAL_GetTick>
 80094b6:	6378      	str	r0, [r7, #52]	@ 0x34

	vec_4ax linear = {0};
 80094b8:	f107 0320 	add.w	r3, r7, #32
 80094bc:	2200      	movs	r2, #0
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	605a      	str	r2, [r3, #4]
 80094c2:	609a      	str	r2, [r3, #8]
 80094c4:	60da      	str	r2, [r3, #12]
	vec_4ax quat = {0};
 80094c6:	f107 0310 	add.w	r3, r7, #16
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	605a      	str	r2, [r3, #4]
 80094d0:	609a      	str	r2, [r3, #8]
 80094d2:	60da      	str	r2, [r3, #12]
	vec_4ax gyro = {0};
 80094d4:	463b      	mov	r3, r7
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	605a      	str	r2, [r3, #4]
 80094dc:	609a      	str	r2, [r3, #8]
 80094de:	60da      	str	r2, [r3, #12]

	//rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
	//IMU_setup();
	while(1)
	{
	      uint32_t now = HAL_GetTick();
 80094e0:	f001 fac8 	bl	800aa74 <HAL_GetTick>
 80094e4:	6338      	str	r0, [r7, #48]	@ 0x30
	      if ( (now - last_hbeat) >= 1000) {
 80094e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094f0:	d303      	bcc.n	80094fa <main_cpp+0x8e>
	          last_hbeat = now;
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	          heartbeat();
 80094f6:	f7fd fad9 	bl	8006aac <heartbeat>
	          //sprintf(msg,"%d\n\0", q[1]);
	          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
	          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
	          //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
	      }
	      if ( (now - last_js) >= 100) {
 80094fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b63      	cmp	r3, #99	@ 0x63
 8009502:	d904      	bls.n	800950e <main_cpp+0xa2>
	    	  last_js = now;
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	63bb      	str	r3, [r7, #56]	@ 0x38
	    	  send_JS(&jc);
 8009508:	4804      	ldr	r0, [pc, #16]	@ (800951c <main_cpp+0xb0>)
 800950a:	f7fd fa97 	bl	8006a3c <send_JS>
	    	  //as50_readAngle(&enc_angle, 100);
	    	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
	      }
	      cyphal_loop();
 800950e:	f7fd fb93 	bl	8006c38 <cyphal_loop>
	}
 8009512:	e7e5      	b.n	80094e0 <main_cpp+0x74>
 8009514:	20000614 	.word	0x20000614
 8009518:	200007bc 	.word	0x200007bc
 800951c:	20000798 	.word	0x20000798
 8009520:	2000078c 	.word	0x2000078c

08009524 <HAL_TIM_PeriodElapsedCallback>:

static float angle_enc_read_for_debug = 0.0;
static uint16_t enc_ticks_read_for_debug = 0;

//Основной цикл управления 1кГц здесь читается энкодер, к нему применяется фильтр и выдется управление на мотор в зависимости от уставки пришедшей сверху через cyphal
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a0d      	ldr	r2, [pc, #52]	@ (8009568 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d102      	bne.n	800953c <HAL_TIM_PeriodElapsedCallback+0x18>
        motor.update();
 8009536:	480d      	ldr	r0, [pc, #52]	@ (800956c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8009538:	f000 f82f 	bl	800959a <_ZN5motor6updateEv>
    }
    if (htim->Instance == TIM6) {
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a0b      	ldr	r2, [pc, #44]	@ (8009570 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d10b      	bne.n	800955e <HAL_TIM_PeriodElapsedCallback+0x3a>
    	angle_enc_read_for_debug = motor.read_encoder();
 8009546:	4809      	ldr	r0, [pc, #36]	@ (800956c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8009548:	f000 f86a 	bl	8009620 <_ZN5motor12read_encoderEv>
 800954c:	eef0 7a40 	vmov.f32	s15, s0
 8009550:	4b08      	ldr	r3, [pc, #32]	@ (8009574 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8009552:	edc3 7a00 	vstr	s15, [r3]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8009556:	2104      	movs	r1, #4
 8009558:	4807      	ldr	r0, [pc, #28]	@ (8009578 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800955a:	f002 fc9f 	bl	800be9c <HAL_GPIO_TogglePin>
    }
}
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	40001400 	.word	0x40001400
 800956c:	200007c4 	.word	0x200007c4
 8009570:	40001000 	.word	0x40001000
 8009574:	200007d0 	.word	0x200007d0
 8009578:	48000c00 	.word	0x48000c00

0800957c <_ZN5motorC1Ev>:


motor::motor()
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 800958a:	811a      	strh	r2, [r3, #8]
	{

	};
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <_ZN5motor6updateEv>:

void motor::update()
	{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]

	};
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <_ZN5motor18set_position_to_goEf>:


void motor::set_position_to_go(float rad)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	ed87 0a00 	vstr	s0, [r7]

};
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <_ZN5motor12get_positionEv>:
			tmc5160_velocity(rad_to_steps(speed, jc.full_steps));
			tmc5160_move(val_speed);
};

float motor::get_position()
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	return steps_to_rads(tmc5160_position_read(), jc.full_steps);
 80095d0:	f000 fe44 	bl	800a25c <tmc5160_position_read>
 80095d4:	4603      	mov	r3, r0
 80095d6:	4a06      	ldr	r2, [pc, #24]	@ (80095f0 <_ZN5motor12get_positionEv+0x28>)
 80095d8:	6852      	ldr	r2, [r2, #4]
 80095da:	4611      	mov	r1, r2
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 f95b 	bl	800a898 <steps_to_rads>
 80095e2:	eef0 7a40 	vmov.f32	s15, s0
};
 80095e6:	eeb0 0a67 	vmov.f32	s0, s15
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20000798 	.word	0x20000798

080095f4 <_ZN5motor12get_velocityEv>:

float motor::get_velocity()
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	return steps_to_rads(tmc5160_velocity_read(), jc.full_steps);
 80095fc:	f000 fe68 	bl	800a2d0 <tmc5160_velocity_read>
 8009600:	4603      	mov	r3, r0
 8009602:	4a06      	ldr	r2, [pc, #24]	@ (800961c <_ZN5motor12get_velocityEv+0x28>)
 8009604:	6852      	ldr	r2, [r2, #4]
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f001 f945 	bl	800a898 <steps_to_rads>
 800960e:	eef0 7a40 	vmov.f32	s15, s0
};
 8009612:	eeb0 0a67 	vmov.f32	s0, s15
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	20000798 	.word	0x20000798

08009620 <_ZN5motor12read_encoderEv>:

float motor::read_encoder()
{
 8009620:	b5b0      	push	{r4, r5, r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	uint16_t raw_ticks_from_encoder;
	as50_readAngle(&raw_ticks_from_encoder, 100);
 8009628:	f107 030e 	add.w	r3, r7, #14
 800962c:	2164      	movs	r1, #100	@ 0x64
 800962e:	4618      	mov	r0, r3
 8009630:	f7f8 f892 	bl	8001758 <as50_readAngle>
	enc_ticks_read_for_debug = raw_ticks_from_encoder;
 8009634:	89fa      	ldrh	r2, [r7, #14]
 8009636:	4b1a      	ldr	r3, [pc, #104]	@ (80096a0 <_ZN5motor12read_encoderEv+0x80>)
 8009638:	801a      	strh	r2, [r3, #0]
	raw_gear_angle_from_encoder = static_cast<float>(raw_ticks_from_encoder) * ((M_PI * 2) / gear_encoder_CPR);
 800963a:	89fb      	ldrh	r3, [r7, #14]
 800963c:	ee07 3a90 	vmov	s15, r3
 8009640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009644:	ee17 0a90 	vmov	r0, s15
 8009648:	f7f6 ffa6 	bl	8000598 <__aeabi_f2d>
 800964c:	4604      	mov	r4, r0
 800964e:	460d      	mov	r5, r1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	891b      	ldrh	r3, [r3, #8]
 8009654:	4618      	mov	r0, r3
 8009656:	f7f6 ff8d 	bl	8000574 <__aeabi_i2d>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	a10e      	add	r1, pc, #56	@ (adr r1, 8009698 <_ZN5motor12read_encoderEv+0x78>)
 8009660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009664:	f7f7 f91a 	bl	800089c <__aeabi_ddiv>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4620      	mov	r0, r4
 800966e:	4629      	mov	r1, r5
 8009670:	f7f6 ffea 	bl	8000648 <__aeabi_dmul>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4610      	mov	r0, r2
 800967a:	4619      	mov	r1, r3
 800967c:	f7f7 fadc 	bl	8000c38 <__aeabi_d2f>
 8009680:	4602      	mov	r2, r0
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	605a      	str	r2, [r3, #4]
	return raw_gear_angle_from_encoder;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	ee07 3a90 	vmov	s15, r3
};
 800968e:	eeb0 0a67 	vmov.f32	s0, s15
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bdb0      	pop	{r4, r5, r7, pc}
 8009698:	54442d18 	.word	0x54442d18
 800969c:	401921fb 	.word	0x401921fb
 80096a0:	200007d4 	.word	0x200007d4

080096a4 <_Z41__static_initialization_and_destruction_0ii>:

}
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d107      	bne.n	80096c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d102      	bne.n	80096c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
motor motor;
 80096be:	4803      	ldr	r0, [pc, #12]	@ (80096cc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80096c0:	f7ff ff5c 	bl	800957c <_ZN5motorC1Ev>
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	200007c4 	.word	0x200007c4

080096d0 <_GLOBAL__sub_I_motor>:
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80096d8:	2001      	movs	r0, #1
 80096da:	f7ff ffe3 	bl	80096a4 <_Z41__static_initialization_and_destruction_0ii>
 80096de:	bd80      	pop	{r7, pc}

080096e0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80096e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009754 <MX_SPI1_Init+0x74>)
 80096e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009758 <MX_SPI1_Init+0x78>)
 80096e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80096ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009754 <MX_SPI1_Init+0x74>)
 80096ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80096f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80096f2:	4b18      	ldr	r3, [pc, #96]	@ (8009754 <MX_SPI1_Init+0x74>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80096f8:	4b16      	ldr	r3, [pc, #88]	@ (8009754 <MX_SPI1_Init+0x74>)
 80096fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80096fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009700:	4b14      	ldr	r3, [pc, #80]	@ (8009754 <MX_SPI1_Init+0x74>)
 8009702:	2202      	movs	r2, #2
 8009704:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009706:	4b13      	ldr	r3, [pc, #76]	@ (8009754 <MX_SPI1_Init+0x74>)
 8009708:	2201      	movs	r2, #1
 800970a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800970c:	4b11      	ldr	r3, [pc, #68]	@ (8009754 <MX_SPI1_Init+0x74>)
 800970e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009712:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009714:	4b0f      	ldr	r3, [pc, #60]	@ (8009754 <MX_SPI1_Init+0x74>)
 8009716:	2220      	movs	r2, #32
 8009718:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800971a:	4b0e      	ldr	r3, [pc, #56]	@ (8009754 <MX_SPI1_Init+0x74>)
 800971c:	2200      	movs	r2, #0
 800971e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009720:	4b0c      	ldr	r3, [pc, #48]	@ (8009754 <MX_SPI1_Init+0x74>)
 8009722:	2200      	movs	r2, #0
 8009724:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009726:	4b0b      	ldr	r3, [pc, #44]	@ (8009754 <MX_SPI1_Init+0x74>)
 8009728:	2200      	movs	r2, #0
 800972a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800972c:	4b09      	ldr	r3, [pc, #36]	@ (8009754 <MX_SPI1_Init+0x74>)
 800972e:	2207      	movs	r2, #7
 8009730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009732:	4b08      	ldr	r3, [pc, #32]	@ (8009754 <MX_SPI1_Init+0x74>)
 8009734:	2200      	movs	r2, #0
 8009736:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009738:	4b06      	ldr	r3, [pc, #24]	@ (8009754 <MX_SPI1_Init+0x74>)
 800973a:	2200      	movs	r2, #0
 800973c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800973e:	4805      	ldr	r0, [pc, #20]	@ (8009754 <MX_SPI1_Init+0x74>)
 8009740:	f005 f8ec 	bl	800e91c <HAL_SPI_Init>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800974a:	f7ff fe88 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800974e:	bf00      	nop
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	200007d8 	.word	0x200007d8
 8009758:	40013000 	.word	0x40013000

0800975c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009760:	4b1b      	ldr	r3, [pc, #108]	@ (80097d0 <MX_SPI3_Init+0x74>)
 8009762:	4a1c      	ldr	r2, [pc, #112]	@ (80097d4 <MX_SPI3_Init+0x78>)
 8009764:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009766:	4b1a      	ldr	r3, [pc, #104]	@ (80097d0 <MX_SPI3_Init+0x74>)
 8009768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800976c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800976e:	4b18      	ldr	r3, [pc, #96]	@ (80097d0 <MX_SPI3_Init+0x74>)
 8009770:	2200      	movs	r2, #0
 8009772:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8009774:	4b16      	ldr	r3, [pc, #88]	@ (80097d0 <MX_SPI3_Init+0x74>)
 8009776:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800977a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800977c:	4b14      	ldr	r3, [pc, #80]	@ (80097d0 <MX_SPI3_Init+0x74>)
 800977e:	2200      	movs	r2, #0
 8009780:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009782:	4b13      	ldr	r3, [pc, #76]	@ (80097d0 <MX_SPI3_Init+0x74>)
 8009784:	2201      	movs	r2, #1
 8009786:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009788:	4b11      	ldr	r3, [pc, #68]	@ (80097d0 <MX_SPI3_Init+0x74>)
 800978a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800978e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009790:	4b0f      	ldr	r3, [pc, #60]	@ (80097d0 <MX_SPI3_Init+0x74>)
 8009792:	2218      	movs	r2, #24
 8009794:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009796:	4b0e      	ldr	r3, [pc, #56]	@ (80097d0 <MX_SPI3_Init+0x74>)
 8009798:	2200      	movs	r2, #0
 800979a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800979c:	4b0c      	ldr	r3, [pc, #48]	@ (80097d0 <MX_SPI3_Init+0x74>)
 800979e:	2200      	movs	r2, #0
 80097a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097a2:	4b0b      	ldr	r3, [pc, #44]	@ (80097d0 <MX_SPI3_Init+0x74>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80097a8:	4b09      	ldr	r3, [pc, #36]	@ (80097d0 <MX_SPI3_Init+0x74>)
 80097aa:	2207      	movs	r2, #7
 80097ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80097ae:	4b08      	ldr	r3, [pc, #32]	@ (80097d0 <MX_SPI3_Init+0x74>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80097b4:	4b06      	ldr	r3, [pc, #24]	@ (80097d0 <MX_SPI3_Init+0x74>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80097ba:	4805      	ldr	r0, [pc, #20]	@ (80097d0 <MX_SPI3_Init+0x74>)
 80097bc:	f005 f8ae 	bl	800e91c <HAL_SPI_Init>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80097c6:	f7ff fe4a 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80097ca:	bf00      	nop
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	2000083c 	.word	0x2000083c
 80097d4:	40003c00 	.word	0x40003c00

080097d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08c      	sub	sp, #48	@ 0x30
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097e0:	f107 031c 	add.w	r3, r7, #28
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	609a      	str	r2, [r3, #8]
 80097ec:	60da      	str	r2, [r3, #12]
 80097ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a33      	ldr	r2, [pc, #204]	@ (80098c4 <HAL_SPI_MspInit+0xec>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d131      	bne.n	800985e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80097fa:	4b33      	ldr	r3, [pc, #204]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 80097fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097fe:	4a32      	ldr	r2, [pc, #200]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009800:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009804:	6613      	str	r3, [r2, #96]	@ 0x60
 8009806:	4b30      	ldr	r3, [pc, #192]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009812:	4b2d      	ldr	r3, [pc, #180]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009816:	4a2c      	ldr	r2, [pc, #176]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009818:	f043 0301 	orr.w	r3, r3, #1
 800981c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800981e:	4b2a      	ldr	r3, [pc, #168]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	617b      	str	r3, [r7, #20]
 8009828:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800982a:	23e0      	movs	r3, #224	@ 0xe0
 800982c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800982e:	2302      	movs	r3, #2
 8009830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009832:	2300      	movs	r3, #0
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009836:	2300      	movs	r3, #0
 8009838:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800983a:	2305      	movs	r3, #5
 800983c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800983e:	f107 031c 	add.w	r3, r7, #28
 8009842:	4619      	mov	r1, r3
 8009844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009848:	f002 f98e 	bl	800bb68 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800984c:	2200      	movs	r2, #0
 800984e:	2100      	movs	r1, #0
 8009850:	2023      	movs	r0, #35	@ 0x23
 8009852:	f001 fa18 	bl	800ac86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009856:	2023      	movs	r0, #35	@ 0x23
 8009858:	f001 fa2f 	bl	800acba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800985c:	e02d      	b.n	80098ba <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a1a      	ldr	r2, [pc, #104]	@ (80098cc <HAL_SPI_MspInit+0xf4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d128      	bne.n	80098ba <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009868:	4b17      	ldr	r3, [pc, #92]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 800986a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800986c:	4a16      	ldr	r2, [pc, #88]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 800986e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009872:	6593      	str	r3, [r2, #88]	@ 0x58
 8009874:	4b14      	ldr	r3, [pc, #80]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009880:	4b11      	ldr	r3, [pc, #68]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009884:	4a10      	ldr	r2, [pc, #64]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 8009886:	f043 0304 	orr.w	r3, r3, #4
 800988a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800988c:	4b0e      	ldr	r3, [pc, #56]	@ (80098c8 <HAL_SPI_MspInit+0xf0>)
 800988e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009898:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800989c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800989e:	2302      	movs	r3, #2
 80098a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098a6:	2300      	movs	r3, #0
 80098a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80098aa:	2306      	movs	r3, #6
 80098ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098ae:	f107 031c 	add.w	r3, r7, #28
 80098b2:	4619      	mov	r1, r3
 80098b4:	4806      	ldr	r0, [pc, #24]	@ (80098d0 <HAL_SPI_MspInit+0xf8>)
 80098b6:	f002 f957 	bl	800bb68 <HAL_GPIO_Init>
}
 80098ba:	bf00      	nop
 80098bc:	3730      	adds	r7, #48	@ 0x30
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	40013000 	.word	0x40013000
 80098c8:	40021000 	.word	0x40021000
 80098cc:	40003c00 	.word	0x40003c00
 80098d0:	48000800 	.word	0x48000800

080098d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098da:	4b0f      	ldr	r3, [pc, #60]	@ (8009918 <HAL_MspInit+0x44>)
 80098dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098de:	4a0e      	ldr	r2, [pc, #56]	@ (8009918 <HAL_MspInit+0x44>)
 80098e0:	f043 0301 	orr.w	r3, r3, #1
 80098e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80098e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009918 <HAL_MspInit+0x44>)
 80098e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	607b      	str	r3, [r7, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80098f2:	4b09      	ldr	r3, [pc, #36]	@ (8009918 <HAL_MspInit+0x44>)
 80098f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f6:	4a08      	ldr	r2, [pc, #32]	@ (8009918 <HAL_MspInit+0x44>)
 80098f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80098fe:	4b06      	ldr	r3, [pc, #24]	@ (8009918 <HAL_MspInit+0x44>)
 8009900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800990a:	f004 f87b 	bl	800da04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40021000 	.word	0x40021000

0800991c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800991c:	b480      	push	{r7}
 800991e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009920:	bf00      	nop
 8009922:	e7fd      	b.n	8009920 <NMI_Handler+0x4>

08009924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009928:	bf00      	nop
 800992a:	e7fd      	b.n	8009928 <HardFault_Handler+0x4>

0800992c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009930:	bf00      	nop
 8009932:	e7fd      	b.n	8009930 <MemManage_Handler+0x4>

08009934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009938:	bf00      	nop
 800993a:	e7fd      	b.n	8009938 <BusFault_Handler+0x4>

0800993c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800993c:	b480      	push	{r7}
 800993e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009940:	bf00      	nop
 8009942:	e7fd      	b.n	8009940 <UsageFault_Handler+0x4>

08009944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009948:	bf00      	nop
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009952:	b480      	push	{r7}
 8009954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009956:	bf00      	nop
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009964:	bf00      	nop
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009972:	f001 f86d 	bl	800aa50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009976:	bf00      	nop
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8009980:	4802      	ldr	r0, [pc, #8]	@ (800998c <DMA1_Channel1_IRQHandler+0x10>)
 8009982:	f001 fb1d 	bl	800afc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009986:	bf00      	nop
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	200006cc 	.word	0x200006cc

08009990 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8009994:	4802      	ldr	r0, [pc, #8]	@ (80099a0 <DMA1_Channel2_IRQHandler+0x10>)
 8009996:	f001 fb13 	bl	800afc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800999a:	bf00      	nop
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	2000072c 	.word	0x2000072c

080099a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80099a8:	4802      	ldr	r0, [pc, #8]	@ (80099b4 <SPI1_IRQHandler+0x10>)
 80099aa:	f005 fbf9 	bl	800f1a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80099ae:	bf00      	nop
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200007d8 	.word	0x200007d8

080099b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80099bc:	4802      	ldr	r0, [pc, #8]	@ (80099c8 <USART2_IRQHandler+0x10>)
 80099be:	f006 fb35 	bl	801002c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80099c2:	bf00      	nop
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000988 	.word	0x20000988

080099cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80099d0:	4802      	ldr	r0, [pc, #8]	@ (80099dc <TIM6_DAC_IRQHandler+0x10>)
 80099d2:	f005 ffd3 	bl	800f97c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80099d6:	bf00      	nop
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	200008a4 	.word	0x200008a4

080099e0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80099e4:	4802      	ldr	r0, [pc, #8]	@ (80099f0 <TIM7_DAC_IRQHandler+0x10>)
 80099e6:	f005 ffc9 	bl	800f97c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80099ea:	bf00      	nop
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	200008f0 	.word	0x200008f0

080099f4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80099f8:	4802      	ldr	r0, [pc, #8]	@ (8009a04 <I2C4_EV_IRQHandler+0x10>)
 80099fa:	f002 fe1f 	bl	800c63c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80099fe:	bf00      	nop
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000678 	.word	0x20000678

08009a08 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8009a0c:	4802      	ldr	r0, [pc, #8]	@ (8009a18 <I2C4_ER_IRQHandler+0x10>)
 8009a0e:	f002 fe2f 	bl	800c670 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8009a12:	bf00      	nop
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000678 	.word	0x20000678

08009a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
  return 1;
 8009a20:	2301      	movs	r3, #1
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <_kill>:

int _kill(int pid, int sig)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009a36:	f00b fced 	bl	8015414 <__errno>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2216      	movs	r2, #22
 8009a3e:	601a      	str	r2, [r3, #0]
  return -1;
 8009a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <_exit>:

void _exit (int status)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009a54:	f04f 31ff 	mov.w	r1, #4294967295
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff ffe7 	bl	8009a2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8009a5e:	bf00      	nop
 8009a60:	e7fd      	b.n	8009a5e <_exit+0x12>

08009a62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	e00a      	b.n	8009a8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009a74:	f3af 8000 	nop.w
 8009a78:	4601      	mov	r1, r0
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	60ba      	str	r2, [r7, #8]
 8009a80:	b2ca      	uxtb	r2, r1
 8009a82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	3301      	adds	r3, #1
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	dbf0      	blt.n	8009a74 <_read+0x12>
  }

  return len;
 8009a92:	687b      	ldr	r3, [r7, #4]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	e009      	b.n	8009ac2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	60ba      	str	r2, [r7, #8]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	dbf1      	blt.n	8009aae <_write+0x12>
  }
  return len;
 8009aca:	687b      	ldr	r3, [r7, #4]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_close>:

int _close(int file)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009afc:	605a      	str	r2, [r3, #4]
  return 0;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <_isatty>:

int _isatty(int file)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009b14:	2301      	movs	r3, #1
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b085      	sub	sp, #20
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009b44:	4a14      	ldr	r2, [pc, #80]	@ (8009b98 <_sbrk+0x5c>)
 8009b46:	4b15      	ldr	r3, [pc, #84]	@ (8009b9c <_sbrk+0x60>)
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009b50:	4b13      	ldr	r3, [pc, #76]	@ (8009ba0 <_sbrk+0x64>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009b58:	4b11      	ldr	r3, [pc, #68]	@ (8009ba0 <_sbrk+0x64>)
 8009b5a:	4a12      	ldr	r2, [pc, #72]	@ (8009ba4 <_sbrk+0x68>)
 8009b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009b5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ba0 <_sbrk+0x64>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4413      	add	r3, r2
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d207      	bcs.n	8009b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009b6c:	f00b fc52 	bl	8015414 <__errno>
 8009b70:	4603      	mov	r3, r0
 8009b72:	220c      	movs	r2, #12
 8009b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009b76:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7a:	e009      	b.n	8009b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009b7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ba0 <_sbrk+0x64>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009b82:	4b07      	ldr	r3, [pc, #28]	@ (8009ba0 <_sbrk+0x64>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4413      	add	r3, r2
 8009b8a:	4a05      	ldr	r2, [pc, #20]	@ (8009ba0 <_sbrk+0x64>)
 8009b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20020000 	.word	0x20020000
 8009b9c:	00000400 	.word	0x00000400
 8009ba0:	200008a0 	.word	0x200008a0
 8009ba4:	20000bb8 	.word	0x20000bb8

08009ba8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009bac:	4b06      	ldr	r3, [pc, #24]	@ (8009bc8 <SystemInit+0x20>)
 8009bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb2:	4a05      	ldr	r2, [pc, #20]	@ (8009bc8 <SystemInit+0x20>)
 8009bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009bbc:	bf00      	nop
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	e000ed00 	.word	0xe000ed00

08009bcc <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bd2:	1d3b      	adds	r3, r7, #4
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009bdc:	4b14      	ldr	r3, [pc, #80]	@ (8009c30 <MX_TIM6_Init+0x64>)
 8009bde:	4a15      	ldr	r2, [pc, #84]	@ (8009c34 <MX_TIM6_Init+0x68>)
 8009be0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 8009be2:	4b13      	ldr	r3, [pc, #76]	@ (8009c30 <MX_TIM6_Init+0x64>)
 8009be4:	229f      	movs	r2, #159	@ 0x9f
 8009be6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009be8:	4b11      	ldr	r3, [pc, #68]	@ (8009c30 <MX_TIM6_Init+0x64>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8009bee:	4b10      	ldr	r3, [pc, #64]	@ (8009c30 <MX_TIM6_Init+0x64>)
 8009bf0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009bf4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8009c30 <MX_TIM6_Init+0x64>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009bfc:	480c      	ldr	r0, [pc, #48]	@ (8009c30 <MX_TIM6_Init+0x64>)
 8009bfe:	f005 fd47 	bl	800f690 <HAL_TIM_Base_Init>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8009c08:	f7ff fc29 	bl	800945e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009c14:	1d3b      	adds	r3, r7, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	4805      	ldr	r0, [pc, #20]	@ (8009c30 <MX_TIM6_Init+0x64>)
 8009c1a:	f006 f8db 	bl	800fdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8009c24:	f7ff fc1b 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	200008a4 	.word	0x200008a4
 8009c34:	40001000 	.word	0x40001000

08009c38 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c3e:	1d3b      	adds	r3, r7, #4
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	605a      	str	r2, [r3, #4]
 8009c46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009c48:	4b15      	ldr	r3, [pc, #84]	@ (8009ca0 <MX_TIM7_Init+0x68>)
 8009c4a:	4a16      	ldr	r2, [pc, #88]	@ (8009ca4 <MX_TIM7_Init+0x6c>)
 8009c4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1599;
 8009c4e:	4b14      	ldr	r3, [pc, #80]	@ (8009ca0 <MX_TIM7_Init+0x68>)
 8009c50:	f240 623f 	movw	r2, #1599	@ 0x63f
 8009c54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c56:	4b12      	ldr	r3, [pc, #72]	@ (8009ca0 <MX_TIM7_Init+0x68>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8009c5c:	4b10      	ldr	r3, [pc, #64]	@ (8009ca0 <MX_TIM7_Init+0x68>)
 8009c5e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009c62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c64:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca0 <MX_TIM7_Init+0x68>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009c6a:	480d      	ldr	r0, [pc, #52]	@ (8009ca0 <MX_TIM7_Init+0x68>)
 8009c6c:	f005 fd10 	bl	800f690 <HAL_TIM_Base_Init>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8009c76:	f7ff fbf2 	bl	800945e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009c82:	1d3b      	adds	r3, r7, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4806      	ldr	r0, [pc, #24]	@ (8009ca0 <MX_TIM7_Init+0x68>)
 8009c88:	f006 f8a4 	bl	800fdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8009c92:	f7ff fbe4 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009c96:	bf00      	nop
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200008f0 	.word	0x200008f0
 8009ca4:	40001400 	.word	0x40001400

08009ca8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08c      	sub	sp, #48	@ 0x30
 8009cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	2224      	movs	r2, #36	@ 0x24
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f00b faf3 	bl	80152a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	605a      	str	r2, [r3, #4]
 8009cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009cc6:	4b23      	ldr	r3, [pc, #140]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009cc8:	4a23      	ldr	r2, [pc, #140]	@ (8009d58 <MX_TIM8_Init+0xb0>)
 8009cca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009ccc:	4b21      	ldr	r3, [pc, #132]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cd2:	4b20      	ldr	r3, [pc, #128]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009cde:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cec:	4b19      	ldr	r3, [pc, #100]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009d06:	2300      	movs	r3, #0
 8009d08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009d16:	f107 030c 	add.w	r3, r7, #12
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	480d      	ldr	r0, [pc, #52]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009d1e:	f005 fd87 	bl	800f830 <HAL_TIM_Encoder_Init>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8009d28:	f7ff fb99 	bl	800945e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009d30:	2300      	movs	r3, #0
 8009d32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009d38:	463b      	mov	r3, r7
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4805      	ldr	r0, [pc, #20]	@ (8009d54 <MX_TIM8_Init+0xac>)
 8009d3e:	f006 f849 	bl	800fdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8009d48:	f7ff fb89 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009d4c:	bf00      	nop
 8009d4e:	3730      	adds	r7, #48	@ 0x30
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	2000093c 	.word	0x2000093c
 8009d58:	40013400 	.word	0x40013400

08009d5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a1a      	ldr	r2, [pc, #104]	@ (8009dd4 <HAL_TIM_Base_MspInit+0x78>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d114      	bne.n	8009d98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009dd8 <HAL_TIM_Base_MspInit+0x7c>)
 8009d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d72:	4a19      	ldr	r2, [pc, #100]	@ (8009dd8 <HAL_TIM_Base_MspInit+0x7c>)
 8009d74:	f043 0310 	orr.w	r3, r3, #16
 8009d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d7a:	4b17      	ldr	r3, [pc, #92]	@ (8009dd8 <HAL_TIM_Base_MspInit+0x7c>)
 8009d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009d86:	2200      	movs	r2, #0
 8009d88:	2100      	movs	r1, #0
 8009d8a:	2036      	movs	r0, #54	@ 0x36
 8009d8c:	f000 ff7b 	bl	800ac86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009d90:	2036      	movs	r0, #54	@ 0x36
 8009d92:	f000 ff92 	bl	800acba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8009d96:	e018      	b.n	8009dca <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8009ddc <HAL_TIM_Base_MspInit+0x80>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d113      	bne.n	8009dca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <HAL_TIM_Base_MspInit+0x7c>)
 8009da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da6:	4a0c      	ldr	r2, [pc, #48]	@ (8009dd8 <HAL_TIM_Base_MspInit+0x7c>)
 8009da8:	f043 0320 	orr.w	r3, r3, #32
 8009dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dae:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <HAL_TIM_Base_MspInit+0x7c>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	60bb      	str	r3, [r7, #8]
 8009db8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	2037      	movs	r0, #55	@ 0x37
 8009dc0:	f000 ff61 	bl	800ac86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8009dc4:	2037      	movs	r0, #55	@ 0x37
 8009dc6:	f000 ff78 	bl	800acba <HAL_NVIC_EnableIRQ>
}
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	40001000 	.word	0x40001000
 8009dd8:	40021000 	.word	0x40021000
 8009ddc:	40001400 	.word	0x40001400

08009de0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	@ 0x28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009de8:	f107 0314 	add.w	r3, r7, #20
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	605a      	str	r2, [r3, #4]
 8009df2:	609a      	str	r2, [r3, #8]
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a25      	ldr	r2, [pc, #148]	@ (8009e94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d143      	bne.n	8009e8a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009e02:	4b25      	ldr	r3, [pc, #148]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e06:	4a24      	ldr	r2, [pc, #144]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009e0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8009e0e:	4b22      	ldr	r3, [pc, #136]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e16:	613b      	str	r3, [r7, #16]
 8009e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e20:	f043 0304 	orr.w	r3, r3, #4
 8009e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e26:	4b1c      	ldr	r3, [pc, #112]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e32:	4b19      	ldr	r3, [pc, #100]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e36:	4a18      	ldr	r2, [pc, #96]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e38:	f043 0302 	orr.w	r3, r3, #2
 8009e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e3e:	4b16      	ldr	r3, [pc, #88]	@ (8009e98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	60bb      	str	r3, [r7, #8]
 8009e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009e4a:	2380      	movs	r3, #128	@ 0x80
 8009e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e56:	2300      	movs	r3, #0
 8009e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e5e:	f107 0314 	add.w	r3, r7, #20
 8009e62:	4619      	mov	r1, r3
 8009e64:	480d      	ldr	r0, [pc, #52]	@ (8009e9c <HAL_TIM_Encoder_MspInit+0xbc>)
 8009e66:	f001 fe7f 	bl	800bb68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009e6a:	2340      	movs	r3, #64	@ 0x40
 8009e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e6e:	2302      	movs	r3, #2
 8009e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e76:	2300      	movs	r3, #0
 8009e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8009e7a:	2305      	movs	r3, #5
 8009e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e7e:	f107 0314 	add.w	r3, r7, #20
 8009e82:	4619      	mov	r1, r3
 8009e84:	4806      	ldr	r0, [pc, #24]	@ (8009ea0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8009e86:	f001 fe6f 	bl	800bb68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009e8a:	bf00      	nop
 8009e8c:	3728      	adds	r7, #40	@ 0x28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	40013400 	.word	0x40013400
 8009e98:	40021000 	.word	0x40021000
 8009e9c:	48000800 	.word	0x48000800
 8009ea0:	48000400 	.word	0x48000400

08009ea4 <tmc5160_position>:
#endif

extern motor_config mc;

void tmc5160_position(int32_t position)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8009eac:	2300      	movs	r3, #0
 8009eae:	60bb      	str	r3, [r7, #8]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 8009eb4:	23a0      	movs	r3, #160	@ 0xa0
 8009eb6:	723b      	strb	r3, [r7, #8]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	727b      	strb	r3, [r7, #9]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	72bb      	strb	r3, [r7, #10]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	72fb      	strb	r3, [r7, #11]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009ec8:	f107 0308 	add.w	r3, r7, #8
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f96f 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 8009ed2:	23ad      	movs	r3, #173	@ 0xad
 8009ed4:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	0e1b      	lsrs	r3, r3, #24
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	141b      	asrs	r3, r3, #16
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	121b      	asrs	r3, r3, #8
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009ef4:	f107 0308 	add.w	r3, r7, #8
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f959 	bl	800a1b0 <tmc5160_write>
}
 8009efe:	bf00      	nop
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7f6 fb2f 	bl	8000574 <__aeabi_i2d>
 8009f16:	a33c      	add	r3, pc, #240	@ (adr r3, 800a008 <tmc5160_move+0x100>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 fb94 	bl	8000648 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4610      	mov	r0, r2
 8009f26:	4619      	mov	r1, r3
 8009f28:	f7f6 fe3e 	bl	8000ba8 <__aeabi_d2iz>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	617b      	str	r3, [r7, #20]

	uint8_t WData[5] = {0};
 8009f30:	2300      	movs	r3, #0
 8009f32:	60bb      	str	r3, [r7, #8]
 8009f34:	2300      	movs	r3, #0
 8009f36:	733b      	strb	r3, [r7, #12]
	if (vel_to_go < 0) //select positive or negative mode depending on vel sign
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	da0f      	bge.n	8009f5e <tmc5160_move+0x56>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 8009f3e:	23a0      	movs	r3, #160	@ 0xa0
 8009f40:	723b      	strb	r3, [r7, #8]
 8009f42:	2300      	movs	r3, #0
 8009f44:	727b      	strb	r3, [r7, #9]
 8009f46:	2300      	movs	r3, #0
 8009f48:	72bb      	strb	r3, [r7, #10]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	72fb      	strb	r3, [r7, #11]
 8009f4e:	2302      	movs	r3, #2
 8009f50:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 f92a 	bl	800a1b0 <tmc5160_write>
 8009f5c:	e00e      	b.n	8009f7c <tmc5160_move+0x74>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 8009f5e:	23a0      	movs	r3, #160	@ 0xa0
 8009f60:	723b      	strb	r3, [r7, #8]
 8009f62:	2300      	movs	r3, #0
 8009f64:	727b      	strb	r3, [r7, #9]
 8009f66:	2300      	movs	r3, #0
 8009f68:	72bb      	strb	r3, [r7, #10]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	72fb      	strb	r3, [r7, #11]
 8009f6e:	2301      	movs	r3, #1
 8009f70:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 8009f72:	f107 0308 	add.w	r3, r7, #8
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 f91a 	bl	800a1b0 <tmc5160_write>
	}
	vel_to_go = abs(vel_to_go);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	bfb8      	it	lt
 8009f82:	425b      	neglt	r3, r3
 8009f84:	617b      	str	r3, [r7, #20]

	int32_t v1;
	v1 = (int32_t)(vel_to_go*0.1);
 8009f86:	6978      	ldr	r0, [r7, #20]
 8009f88:	f7f6 faf4 	bl	8000574 <__aeabi_i2d>
 8009f8c:	a320      	add	r3, pc, #128	@ (adr r3, 800a010 <tmc5160_move+0x108>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 fb59 	bl	8000648 <__aeabi_dmul>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f7f6 fe03 	bl	8000ba8 <__aeabi_d2iz>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	613b      	str	r3, [r7, #16]


	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009fa6:	23a5      	movs	r3, #165	@ 0xa5
 8009fa8:	723b      	strb	r3, [r7, #8]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	0e1b      	lsrs	r3, r3, #24
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	727b      	strb	r3, [r7, #9]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	141b      	asrs	r3, r3, #16
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	72bb      	strb	r3, [r7, #10]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	121b      	asrs	r3, r3, #8
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	72fb      	strb	r3, [r7, #11]
	WData[4] = (v1 & 0x000000FF);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009fc8:	f107 0308 	add.w	r3, r7, #8
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 f8ef 	bl	800a1b0 <tmc5160_write>

	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009fd2:	23a7      	movs	r3, #167	@ 0xa7
 8009fd4:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	0e1b      	lsrs	r3, r3, #24
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	141b      	asrs	r3, r3, #16
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	121b      	asrs	r3, r3, #8
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 f8d9 	bl	800a1b0 <tmc5160_write>
}
 8009ffe:	bf00      	nop
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	77ffebde 	.word	0x77ffebde
 800a00c:	3ff65e9f 	.word	0x3ff65e9f
 800a010:	9999999a 	.word	0x9999999a
 800a014:	3fb99999 	.word	0x3fb99999

0800a018 <tmc5160_set_default_vel>:

void tmc5160_set_default_vel()
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a01e:	2300      	movs	r3, #0
 800a020:	603b      	str	r3, [r7, #0]
 800a022:	2300      	movs	r3, #0
 800a024:	713b      	strb	r3, [r7, #4]

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 800a026:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800a02a:	f000 f859 	bl	800a0e0 <tmc5160_velocity>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 800a02e:	23a3      	movs	r3, #163	@ 0xa3
 800a030:	703b      	strb	r3, [r7, #0]
 800a032:	2300      	movs	r3, #0
 800a034:	707b      	strb	r3, [r7, #1]
 800a036:	2300      	movs	r3, #0
 800a038:	70bb      	strb	r3, [r7, #2]
 800a03a:	2300      	movs	r3, #0
 800a03c:	70fb      	strb	r3, [r7, #3]
 800a03e:	230a      	movs	r3, #10
 800a040:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a042:	463b      	mov	r3, r7
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f8b3 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0f; WData[4] = 0xff; // A1 = 10 000 First acceleration
 800a04a:	23a4      	movs	r3, #164	@ 0xa4
 800a04c:	703b      	strb	r3, [r7, #0]
 800a04e:	2300      	movs	r3, #0
 800a050:	707b      	strb	r3, [r7, #1]
 800a052:	2303      	movs	r3, #3
 800a054:	70bb      	strb	r3, [r7, #2]
 800a056:	230f      	movs	r3, #15
 800a058:	70fb      	strb	r3, [r7, #3]
 800a05a:	23ff      	movs	r3, #255	@ 0xff
 800a05c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a05e:	463b      	mov	r3, r7
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f8a5 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0f; WData[4] = 0xff; // AMAX = 5 000 Acceleration above V1
 800a066:	23a6      	movs	r3, #166	@ 0xa6
 800a068:	703b      	strb	r3, [r7, #0]
 800a06a:	2300      	movs	r3, #0
 800a06c:	707b      	strb	r3, [r7, #1]
 800a06e:	2300      	movs	r3, #0
 800a070:	70bb      	strb	r3, [r7, #2]
 800a072:	230f      	movs	r3, #15
 800a074:	70fb      	strb	r3, [r7, #3]
 800a076:	23ff      	movs	r3, #255	@ 0xff
 800a078:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a07a:	463b      	mov	r3, r7
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 f897 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0f; WData[4] = 0xff; // DMAX = 5 000 Deceleration above V1
 800a082:	23a8      	movs	r3, #168	@ 0xa8
 800a084:	703b      	strb	r3, [r7, #0]
 800a086:	2300      	movs	r3, #0
 800a088:	707b      	strb	r3, [r7, #1]
 800a08a:	2300      	movs	r3, #0
 800a08c:	70bb      	strb	r3, [r7, #2]
 800a08e:	230f      	movs	r3, #15
 800a090:	70fb      	strb	r3, [r7, #3]
 800a092:	23ff      	movs	r3, #255	@ 0xff
 800a094:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a096:	463b      	mov	r3, r7
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f889 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0f; WData[4] = 0xff; // D1 = 10 000 Deceleration below V1
 800a09e:	23aa      	movs	r3, #170	@ 0xaa
 800a0a0:	703b      	strb	r3, [r7, #0]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	707b      	strb	r3, [r7, #1]
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	70bb      	strb	r3, [r7, #2]
 800a0aa:	230f      	movs	r3, #15
 800a0ac:	70fb      	strb	r3, [r7, #3]
 800a0ae:	23ff      	movs	r3, #255	@ 0xff
 800a0b0:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a0b2:	463b      	mov	r3, r7
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 f87b 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 800a0ba:	23ab      	movs	r3, #171	@ 0xab
 800a0bc:	703b      	strb	r3, [r7, #0]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	707b      	strb	r3, [r7, #1]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	70bb      	strb	r3, [r7, #2]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	70fb      	strb	r3, [r7, #3]
 800a0ca:	230f      	movs	r3, #15
 800a0cc:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 f86d 	bl	800a1b0 <tmc5160_write>
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <tmc5160_velocity>:

void tmc5160_velocity(int32_t vel)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7f6 fa43 	bl	8000574 <__aeabi_i2d>
 800a0ee:	a32c      	add	r3, pc, #176	@ (adr r3, 800a1a0 <tmc5160_velocity+0xc0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 faa8 	bl	8000648 <__aeabi_dmul>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4619      	mov	r1, r3
 800a100:	f7f6 fd52 	bl	8000ba8 <__aeabi_d2iz>
 800a104:	4603      	mov	r3, r0
 800a106:	617b      	str	r3, [r7, #20]
	vel_to_go = abs(vel_to_go);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfb8      	it	lt
 800a10e:	425b      	neglt	r3, r3
 800a110:	617b      	str	r3, [r7, #20]

	int32_t V1;
	V1 = (int32_t)(vel_to_go*0.1);
 800a112:	6978      	ldr	r0, [r7, #20]
 800a114:	f7f6 fa2e 	bl	8000574 <__aeabi_i2d>
 800a118:	a323      	add	r3, pc, #140	@ (adr r3, 800a1a8 <tmc5160_velocity+0xc8>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	f7f6 fa93 	bl	8000648 <__aeabi_dmul>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4610      	mov	r0, r2
 800a128:	4619      	mov	r1, r3
 800a12a:	f7f6 fd3d 	bl	8000ba8 <__aeabi_d2iz>
 800a12e:	4603      	mov	r3, r0
 800a130:	613b      	str	r3, [r7, #16]

	//Acceleration threshold velocity V1
	uint8_t WData[5] = {0};
 800a132:	2300      	movs	r3, #0
 800a134:	60bb      	str	r3, [r7, #8]
 800a136:	2300      	movs	r3, #0
 800a138:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA5; //V1 speed register
 800a13a:	23a5      	movs	r3, #165	@ 0xa5
 800a13c:	723b      	strb	r3, [r7, #8]
	WData[1] = (V1 & 0xFF000000) >> 24;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	0e1b      	lsrs	r3, r3, #24
 800a142:	b2db      	uxtb	r3, r3
 800a144:	727b      	strb	r3, [r7, #9]
	WData[2] = (V1 & 0x00FF0000) >> 16;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	141b      	asrs	r3, r3, #16
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	72bb      	strb	r3, [r7, #10]
	WData[3] = (V1 & 0x0000FF00) >> 8;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	121b      	asrs	r3, r3, #8
 800a152:	b2db      	uxtb	r3, r3
 800a154:	72fb      	strb	r3, [r7, #11]
	WData[4] = (V1 & 0x000000FF);
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a15c:	f107 0308 	add.w	r3, r7, #8
 800a160:	4618      	mov	r0, r3
 800a162:	f000 f825 	bl	800a1b0 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 800a166:	23a7      	movs	r3, #167	@ 0xa7
 800a168:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	0e1b      	lsrs	r3, r3, #24
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	141b      	asrs	r3, r3, #16
 800a176:	b2db      	uxtb	r3, r3
 800a178:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	121b      	asrs	r3, r3, #8
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a188:	f107 0308 	add.w	r3, r7, #8
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f80f 	bl	800a1b0 <tmc5160_write>

}
 800a192:	bf00      	nop
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	f3af 8000 	nop.w
 800a1a0:	77ffebde 	.word	0x77ffebde
 800a1a4:	3ff65e9f 	.word	0x3ff65e9f
 800a1a8:	9999999a 	.word	0x9999999a
 800a1ac:	3fb99999 	.word	0x3fb99999

0800a1b0 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2110      	movs	r1, #16
 800a1bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1c0:	f001 fe54 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 800a1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c8:	2205      	movs	r2, #5
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	4806      	ldr	r0, [pc, #24]	@ (800a1e8 <tmc5160_write+0x38>)
 800a1ce:	f004 fc50 	bl	800ea72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	2110      	movs	r1, #16
 800a1d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1da:	f001 fe47 	bl	800be6c <HAL_GPIO_WritePin>
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	200007d8 	.word	0x200007d8

0800a1ec <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af02      	add	r7, sp, #8
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2110      	movs	r1, #16
 800a1fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1fe:	f001 fe35 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 800a202:	f04f 33ff 	mov.w	r3, #4294967295
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	2305      	movs	r3, #5
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	4812      	ldr	r0, [pc, #72]	@ (800a258 <tmc5160_read+0x6c>)
 800a210:	f004 fda4 	bl	800ed5c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800a214:	2201      	movs	r2, #1
 800a216:	2110      	movs	r1, #16
 800a218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a21c:	f001 fe26 	bl	800be6c <HAL_GPIO_WritePin>
	nop();
 800a220:	bf00      	nop
	nop();
 800a222:	bf00      	nop
	nop();
 800a224:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 800a226:	2200      	movs	r2, #0
 800a228:	2110      	movs	r1, #16
 800a22a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a22e:	f001 fe1d 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 800a232:	f04f 33ff 	mov.w	r3, #4294967295
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	2305      	movs	r3, #5
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	4806      	ldr	r0, [pc, #24]	@ (800a258 <tmc5160_read+0x6c>)
 800a240:	f004 fd8c 	bl	800ed5c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800a244:	2201      	movs	r2, #1
 800a246:	2110      	movs	r1, #16
 800a248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a24c:	f001 fe0e 	bl	800be6c <HAL_GPIO_WritePin>
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	200007d8 	.word	0x200007d8

0800a25c <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	2300      	movs	r3, #0
 800a268:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
 800a26e:	2300      	movs	r3, #0
 800a270:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 800a272:	2321      	movs	r3, #33	@ 0x21
 800a274:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 800a276:	1d3a      	adds	r2, r7, #4
 800a278:	f107 030c 	add.w	r3, r7, #12
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff ffb4 	bl	800a1ec <tmc5160_read>

	int32_t response = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 800a288:	797b      	ldrb	r3, [r7, #5]
 800a28a:	461a      	mov	r2, r3
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	4313      	orrs	r3, r2
 800a290:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 800a298:	79bb      	ldrb	r3, [r7, #6]
 800a29a:	461a      	mov	r2, r3
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	021b      	lsls	r3, r3, #8
 800a2a6:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	021b      	lsls	r3, r3, #8
 800a2b6:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 800a2b8:	7a3b      	ldrb	r3, [r7, #8]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]

	return response;
 800a2c2:	697b      	ldr	r3, [r7, #20]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	0000      	movs	r0, r0
	...

0800a2d0 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 800a2de:	2300      	movs	r3, #0
 800a2e0:	603b      	str	r3, [r7, #0]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 800a2e6:	2322      	movs	r3, #34	@ 0x22
 800a2e8:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff ff7a 	bl	800a1ec <tmc5160_read>

	int32_t response = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 800a2fc:	787b      	ldrb	r3, [r7, #1]
 800a2fe:	461a      	mov	r2, r3
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 800a30c:	78bb      	ldrb	r3, [r7, #2]
 800a30e:	461a      	mov	r2, r3
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	021b      	lsls	r3, r3, #8
 800a31a:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	461a      	mov	r2, r3
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	4313      	orrs	r3, r2
 800a324:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	021b      	lsls	r3, r3, #8
 800a32a:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 800a32c:	793b      	ldrb	r3, [r7, #4]
 800a32e:	461a      	mov	r2, r3
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	4313      	orrs	r3, r2
 800a334:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 800a33a:	2118      	movs	r1, #24
 800a33c:	6978      	ldr	r0, [r7, #20]
 800a33e:	f000 fa7b 	bl	800a838 <sign_extend_bits_to_32>
 800a342:	6138      	str	r0, [r7, #16]

	return (int32_t)(rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 800a344:	6938      	ldr	r0, [r7, #16]
 800a346:	f7f6 f915 	bl	8000574 <__aeabi_i2d>
 800a34a:	a309      	add	r3, pc, #36	@ (adr r3, 800a370 <tmc5160_velocity_read+0xa0>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f6 faa4 	bl	800089c <__aeabi_ddiv>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4610      	mov	r0, r2
 800a35a:	4619      	mov	r1, r3
 800a35c:	f7f6 fc24 	bl	8000ba8 <__aeabi_d2iz>
 800a360:	4603      	mov	r3, r0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	f3af 8000 	nop.w
 800a370:	77ffebde 	.word	0x77ffebde
 800a374:	3ff65e9f 	.word	0x3ff65e9f

0800a378 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 800a380:	2200      	movs	r2, #0
 800a382:	2120      	movs	r1, #32
 800a384:	4882      	ldr	r0, [pc, #520]	@ (800a590 <tmc5160_init+0x218>)
 800a386:	f001 fd71 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 800a38a:	2201      	movs	r2, #1
 800a38c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a394:	f001 fd6a 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 800a398:	2200      	movs	r2, #0
 800a39a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a39e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3a2:	f001 fd63 	bl	800be6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	2110      	movs	r1, #16
 800a3aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3ae:	f001 fd5d 	bl	800be6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a3b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3bc:	f001 fd56 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a3c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3ca:	f001 fd4f 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a3ce:	2064      	movs	r0, #100	@ 0x64
 800a3d0:	f000 fb5c 	bl	800aa8c <HAL_Delay>

	uint8_t WData[5] = {0};
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	60bb      	str	r3, [r7, #8]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 800a3dc:	23ec      	movs	r3, #236	@ 0xec
 800a3de:	723b      	strb	r3, [r7, #8]
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	727b      	strb	r3, [r7, #9]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	72bb      	strb	r3, [r7, #10]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	72fb      	strb	r3, [r7, #11]
 800a3ec:	23c3      	movs	r3, #195	@ 0xc3
 800a3ee:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a3f0:	f107 0308 	add.w	r3, r7, #8
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fedb 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = mc->init_irun; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 800a3fa:	2390      	movs	r3, #144	@ 0x90
 800a3fc:	723b      	strb	r3, [r7, #8]
 800a3fe:	2300      	movs	r3, #0
 800a400:	727b      	strb	r3, [r7, #9]
 800a402:	2300      	movs	r3, #0
 800a404:	72bb      	strb	r3, [r7, #10]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	72fb      	strb	r3, [r7, #11]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a41a:	f107 0308 	add.w	r3, r7, #8
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fec6 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 800a424:	2391      	movs	r3, #145	@ 0x91
 800a426:	723b      	strb	r3, [r7, #8]
 800a428:	2300      	movs	r3, #0
 800a42a:	727b      	strb	r3, [r7, #9]
 800a42c:	2300      	movs	r3, #0
 800a42e:	72bb      	strb	r3, [r7, #10]
 800a430:	2300      	movs	r3, #0
 800a432:	72fb      	strb	r3, [r7, #11]
 800a434:	230a      	movs	r3, #10
 800a436:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a438:	f107 0308 	add.w	r3, r7, #8
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff feb7 	bl	800a1b0 <tmc5160_write>

	//0xC40C001E default for 0x70 reg
	WData[0] = 0xF0; WData[1] = 0xC4; WData[2] = 0x0D; WData[3] = 0x00; WData[4] = 0x1E; // PWM_CONF PWM_FREQ 35kHz TODO
 800a442:	23f0      	movs	r3, #240	@ 0xf0
 800a444:	723b      	strb	r3, [r7, #8]
 800a446:	23c4      	movs	r3, #196	@ 0xc4
 800a448:	727b      	strb	r3, [r7, #9]
 800a44a:	230d      	movs	r3, #13
 800a44c:	72bb      	strb	r3, [r7, #10]
 800a44e:	2300      	movs	r3, #0
 800a450:	72fb      	strb	r3, [r7, #11]
 800a452:	231e      	movs	r3, #30
 800a454:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a456:	f107 0308 	add.w	r3, r7, #8
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fea8 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a460:	2380      	movs	r3, #128	@ 0x80
 800a462:	723b      	strb	r3, [r7, #8]
 800a464:	2300      	movs	r3, #0
 800a466:	727b      	strb	r3, [r7, #9]
 800a468:	2300      	movs	r3, #0
 800a46a:	72bb      	strb	r3, [r7, #10]
 800a46c:	2300      	movs	r3, #0
 800a46e:	72fb      	strb	r3, [r7, #11]
 800a470:	2304      	movs	r3, #4
 800a472:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a474:	f107 0308 	add.w	r3, r7, #8
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fe99 	bl	800a1b0 <tmc5160_write>

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 800a47e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800a482:	f7ff fe2d 	bl	800a0e0 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 800a486:	2393      	movs	r3, #147	@ 0x93
 800a488:	723b      	strb	r3, [r7, #8]
 800a48a:	2300      	movs	r3, #0
 800a48c:	727b      	strb	r3, [r7, #9]
 800a48e:	2300      	movs	r3, #0
 800a490:	72bb      	strb	r3, [r7, #10]
 800a492:	2300      	movs	r3, #0
 800a494:	72fb      	strb	r3, [r7, #11]
 800a496:	23c8      	movs	r3, #200	@ 0xc8
 800a498:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a49a:	f107 0308 	add.w	r3, r7, #8
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff fe86 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 800a4a4:	23a0      	movs	r3, #160	@ 0xa0
 800a4a6:	723b      	strb	r3, [r7, #8]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	727b      	strb	r3, [r7, #9]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	72bb      	strb	r3, [r7, #10]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	72fb      	strb	r3, [r7, #11]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a4b8:	f107 0308 	add.w	r3, r7, #8
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff fe77 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 800a4c2:	23a3      	movs	r3, #163	@ 0xa3
 800a4c4:	723b      	strb	r3, [r7, #8]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	727b      	strb	r3, [r7, #9]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	72bb      	strb	r3, [r7, #10]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	72fb      	strb	r3, [r7, #11]
 800a4d2:	230a      	movs	r3, #10
 800a4d4:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a4d6:	f107 0308 	add.w	r3, r7, #8
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fe68 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0xFF; WData[4] = 0xFF; // A1 = 10 000 First acceleration
 800a4e0:	23a4      	movs	r3, #164	@ 0xa4
 800a4e2:	723b      	strb	r3, [r7, #8]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	727b      	strb	r3, [r7, #9]
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	72bb      	strb	r3, [r7, #10]
 800a4ec:	23ff      	movs	r3, #255	@ 0xff
 800a4ee:	72fb      	strb	r3, [r7, #11]
 800a4f0:	23ff      	movs	r3, #255	@ 0xff
 800a4f2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a4f4:	f107 0308 	add.w	r3, r7, #8
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fe59 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0xFF; WData[4] = 0xFF; // AMAX = 5 000 Acceleration above V1
 800a4fe:	23a6      	movs	r3, #166	@ 0xa6
 800a500:	723b      	strb	r3, [r7, #8]
 800a502:	2300      	movs	r3, #0
 800a504:	727b      	strb	r3, [r7, #9]
 800a506:	2300      	movs	r3, #0
 800a508:	72bb      	strb	r3, [r7, #10]
 800a50a:	23ff      	movs	r3, #255	@ 0xff
 800a50c:	72fb      	strb	r3, [r7, #11]
 800a50e:	23ff      	movs	r3, #255	@ 0xff
 800a510:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a512:	f107 0308 	add.w	r3, r7, #8
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fe4a 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0xFF; WData[4] = 0xFF; // DMAX = 5 000 Deceleration above V1
 800a51c:	23a8      	movs	r3, #168	@ 0xa8
 800a51e:	723b      	strb	r3, [r7, #8]
 800a520:	2300      	movs	r3, #0
 800a522:	727b      	strb	r3, [r7, #9]
 800a524:	2300      	movs	r3, #0
 800a526:	72bb      	strb	r3, [r7, #10]
 800a528:	23ff      	movs	r3, #255	@ 0xff
 800a52a:	72fb      	strb	r3, [r7, #11]
 800a52c:	23ff      	movs	r3, #255	@ 0xff
 800a52e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a530:	f107 0308 	add.w	r3, r7, #8
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fe3b 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0xFF; WData[4] = 0xFF; // D1 = 10 000 Deceleration below V1
 800a53a:	23aa      	movs	r3, #170	@ 0xaa
 800a53c:	723b      	strb	r3, [r7, #8]
 800a53e:	2300      	movs	r3, #0
 800a540:	727b      	strb	r3, [r7, #9]
 800a542:	2303      	movs	r3, #3
 800a544:	72bb      	strb	r3, [r7, #10]
 800a546:	23ff      	movs	r3, #255	@ 0xff
 800a548:	72fb      	strb	r3, [r7, #11]
 800a54a:	23ff      	movs	r3, #255	@ 0xff
 800a54c:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff fe2c 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 800a558:	23ab      	movs	r3, #171	@ 0xab
 800a55a:	723b      	strb	r3, [r7, #8]
 800a55c:	2300      	movs	r3, #0
 800a55e:	727b      	strb	r3, [r7, #9]
 800a560:	2300      	movs	r3, #0
 800a562:	72bb      	strb	r3, [r7, #10]
 800a564:	2300      	movs	r3, #0
 800a566:	72fb      	strb	r3, [r7, #11]
 800a568:	230f      	movs	r3, #15
 800a56a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a56c:	f107 0308 	add.w	r3, r7, #8
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff fe1d 	bl	800a1b0 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 f809 	bl	800a594 <tmc5160_set_motor_direction>

	HAL_Delay(100);
 800a582:	2064      	movs	r0, #100	@ 0x64
 800a584:	f000 fa82 	bl	800aa8c <HAL_Delay>
}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	48000800 	.word	0x48000800

0800a594 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 800a59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dc13      	bgt.n	800a5ce <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a5ae:	2380      	movs	r3, #128	@ 0x80
 800a5b0:	743b      	strb	r3, [r7, #16]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	747b      	strb	r3, [r7, #17]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	74bb      	strb	r3, [r7, #18]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	74fb      	strb	r3, [r7, #19]
 800a5be:	2314      	movs	r3, #20
 800a5c0:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 800a5c2:	f107 0310 	add.w	r3, r7, #16
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff fdf2 	bl	800a1b0 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 800a5cc:	e012      	b.n	800a5f4 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60bb      	str	r3, [r7, #8]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a5d6:	2380      	movs	r3, #128	@ 0x80
 800a5d8:	723b      	strb	r3, [r7, #8]
 800a5da:	2300      	movs	r3, #0
 800a5dc:	727b      	strb	r3, [r7, #9]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	72bb      	strb	r3, [r7, #10]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	72fb      	strb	r3, [r7, #11]
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fdde 	bl	800a1b0 <tmc5160_write>
}
 800a5f4:	bf00      	nop
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <tmc5160_set_zero>:

void tmc5160_set_zero()
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a602:	2300      	movs	r3, #0
 800a604:	603b      	str	r3, [r7, #0]
 800a606:	2300      	movs	r3, #0
 800a608:	713b      	strb	r3, [r7, #4]
	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x03; // RAMPMODE = 3 (HOLD mode)
 800a60a:	23a0      	movs	r3, #160	@ 0xa0
 800a60c:	703b      	strb	r3, [r7, #0]
 800a60e:	2300      	movs	r3, #0
 800a610:	707b      	strb	r3, [r7, #1]
 800a612:	2300      	movs	r3, #0
 800a614:	70bb      	strb	r3, [r7, #2]
 800a616:	2300      	movs	r3, #0
 800a618:	70fb      	strb	r3, [r7, #3]
 800a61a:	2303      	movs	r3, #3
 800a61c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a61e:	463b      	mov	r3, r7
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff fdc5 	bl	800a1b0 <tmc5160_write>

	WData[0] = 0xA1; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Set zero
 800a626:	23a1      	movs	r3, #161	@ 0xa1
 800a628:	703b      	strb	r3, [r7, #0]
 800a62a:	2300      	movs	r3, #0
 800a62c:	707b      	strb	r3, [r7, #1]
 800a62e:	2300      	movs	r3, #0
 800a630:	70bb      	strb	r3, [r7, #2]
 800a632:	2300      	movs	r3, #0
 800a634:	70fb      	strb	r3, [r7, #3]
 800a636:	2300      	movs	r3, #0
 800a638:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a63a:	463b      	mov	r3, r7
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fdb7 	bl	800a1b0 <tmc5160_write>
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <tmc5160_disarm>:

void tmc5160_disarm()
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //DRV SLEEP 0 for power on, 1 for power off
 800a650:	2201      	movs	r2, #1
 800a652:	2120      	movs	r1, #32
 800a654:	4802      	ldr	r0, [pc, #8]	@ (800a660 <tmc5160_disarm+0x14>)
 800a656:	f001 fc09 	bl	800be6c <HAL_GPIO_WritePin>
}
 800a65a:	bf00      	nop
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	48000800 	.word	0x48000800

0800a664 <tmc5160_arm>:

void tmc5160_arm()
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 800a668:	2200      	movs	r2, #0
 800a66a:	2120      	movs	r1, #32
 800a66c:	4802      	ldr	r0, [pc, #8]	@ (800a678 <tmc5160_arm+0x14>)
 800a66e:	f001 fbfd 	bl	800be6c <HAL_GPIO_WritePin>
}
 800a672:	bf00      	nop
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	48000800 	.word	0x48000800

0800a67c <tmc5160_stop>:

void tmc5160_stop()
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a682:	2300      	movs	r3, #0
 800a684:	607b      	str	r3, [r7, #4]
 800a686:	2300      	movs	r3, #0
 800a688:	723b      	strb	r3, [r7, #8]
	uint32_t pos = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Start acceleration = 10 (Near start)
 800a68e:	23a3      	movs	r3, #163	@ 0xa3
 800a690:	713b      	strb	r3, [r7, #4]
 800a692:	2300      	movs	r3, #0
 800a694:	717b      	strb	r3, [r7, #5]
 800a696:	2300      	movs	r3, #0
 800a698:	71bb      	strb	r3, [r7, #6]
 800a69a:	2300      	movs	r3, #0
 800a69c:	71fb      	strb	r3, [r7, #7]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a6a2:	1d3b      	adds	r3, r7, #4
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff fd83 	bl	800a1b0 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00;
 800a6aa:	23a7      	movs	r3, #167	@ 0xa7
 800a6ac:	713b      	strb	r3, [r7, #4]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	717b      	strb	r3, [r7, #5]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	71bb      	strb	r3, [r7, #6]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	71fb      	strb	r3, [r7, #7]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a6be:	1d3b      	adds	r3, r7, #4
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7ff fd75 	bl	800a1b0 <tmc5160_write>

	pos = tmc5160_position_read();
 800a6c6:	f7ff fdc9 	bl	800a25c <tmc5160_position_read>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	60fb      	str	r3, [r7, #12]
	tmc5160_position(pos);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff fbe7 	bl	8009ea4 <tmc5160_position>
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a6e4:	4b22      	ldr	r3, [pc, #136]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a6e6:	4a23      	ldr	r2, [pc, #140]	@ (800a774 <MX_USART2_UART_Init+0x94>)
 800a6e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a6ea:	4b21      	ldr	r3, [pc, #132]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a6ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a6f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a6f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a6fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a700:	2200      	movs	r2, #0
 800a702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a704:	4b1a      	ldr	r3, [pc, #104]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a706:	220c      	movs	r2, #12
 800a708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a70a:	4b19      	ldr	r3, [pc, #100]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a710:	4b17      	ldr	r3, [pc, #92]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a712:	2200      	movs	r2, #0
 800a714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a716:	4b16      	ldr	r3, [pc, #88]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a718:	2200      	movs	r2, #0
 800a71a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a71c:	4b14      	ldr	r3, [pc, #80]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a71e:	2200      	movs	r2, #0
 800a720:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a722:	4b13      	ldr	r3, [pc, #76]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a724:	2200      	movs	r2, #0
 800a726:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a728:	4811      	ldr	r0, [pc, #68]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a72a:	f005 fc2f 	bl	800ff8c <HAL_UART_Init>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a734:	f7fe fe93 	bl	800945e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a738:	2100      	movs	r1, #0
 800a73a:	480d      	ldr	r0, [pc, #52]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a73c:	f006 fd6d 	bl	801121a <HAL_UARTEx_SetTxFifoThreshold>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a746:	f7fe fe8a 	bl	800945e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a74a:	2100      	movs	r1, #0
 800a74c:	4808      	ldr	r0, [pc, #32]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a74e:	f006 fda2 	bl	8011296 <HAL_UARTEx_SetRxFifoThreshold>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a758:	f7fe fe81 	bl	800945e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a75c:	4804      	ldr	r0, [pc, #16]	@ (800a770 <MX_USART2_UART_Init+0x90>)
 800a75e:	f006 fd23 	bl	80111a8 <HAL_UARTEx_DisableFifoMode>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a768:	f7fe fe79 	bl	800945e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a76c:	bf00      	nop
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20000988 	.word	0x20000988
 800a774:	40004400 	.word	0x40004400

0800a778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b09e      	sub	sp, #120	@ 0x78
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a780:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a784:	2200      	movs	r2, #0
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	605a      	str	r2, [r3, #4]
 800a78a:	609a      	str	r2, [r3, #8]
 800a78c:	60da      	str	r2, [r3, #12]
 800a78e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a790:	f107 0310 	add.w	r3, r7, #16
 800a794:	2254      	movs	r2, #84	@ 0x54
 800a796:	2100      	movs	r1, #0
 800a798:	4618      	mov	r0, r3
 800a79a:	f00a fd82 	bl	80152a2 <memset>
  if(uartHandle->Instance==USART2)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a23      	ldr	r2, [pc, #140]	@ (800a830 <HAL_UART_MspInit+0xb8>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d13e      	bne.n	800a826 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a7b0:	f107 0310 	add.w	r3, r7, #16
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f003 fe63 	bl	800e480 <HAL_RCCEx_PeriphCLKConfig>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a7c0:	f7fe fe4d 	bl	800945e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a834 <HAL_UART_MspInit+0xbc>)
 800a7c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7c8:	4a1a      	ldr	r2, [pc, #104]	@ (800a834 <HAL_UART_MspInit+0xbc>)
 800a7ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7d0:	4b18      	ldr	r3, [pc, #96]	@ (800a834 <HAL_UART_MspInit+0xbc>)
 800a7d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7dc:	4b15      	ldr	r3, [pc, #84]	@ (800a834 <HAL_UART_MspInit+0xbc>)
 800a7de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e0:	4a14      	ldr	r2, [pc, #80]	@ (800a834 <HAL_UART_MspInit+0xbc>)
 800a7e2:	f043 0301 	orr.w	r3, r3, #1
 800a7e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7e8:	4b12      	ldr	r3, [pc, #72]	@ (800a834 <HAL_UART_MspInit+0xbc>)
 800a7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	60bb      	str	r3, [r7, #8]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a7f4:	230c      	movs	r3, #12
 800a7f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a800:	2300      	movs	r3, #0
 800a802:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a804:	2307      	movs	r3, #7
 800a806:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a808:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a80c:	4619      	mov	r1, r3
 800a80e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a812:	f001 f9a9 	bl	800bb68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a816:	2200      	movs	r2, #0
 800a818:	2100      	movs	r1, #0
 800a81a:	2026      	movs	r0, #38	@ 0x26
 800a81c:	f000 fa33 	bl	800ac86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a820:	2026      	movs	r0, #38	@ 0x26
 800a822:	f000 fa4a 	bl	800acba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a826:	bf00      	nop
 800a828:	3778      	adds	r7, #120	@ 0x78
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	40004400 	.word	0x40004400
 800a834:	40021000 	.word	0x40021000

0800a838 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	2201      	movs	r2, #1
 800a84e:	fa02 f303 	lsl.w	r3, r2, r3
 800a852:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	4013      	ands	r3, r2
 800a85e:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d010      	beq.n	800a888 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 800a86a:	23ff      	movs	r3, #255	@ 0xff
 800a86c:	60bb      	str	r3, [r7, #8]
		res |= x;
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 800a876:	78fb      	ldrb	r3, [r7, #3]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	fa02 f303 	lsl.w	r3, r2, r3
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4313      	orrs	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
		return res;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	e000      	b.n	800a88a <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 800a888:	687b      	ldr	r3, [r7, #4]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
	...

0800a898 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
	float rads = 0;
 800a8a2:	f04f 0300 	mov.w	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	ee07 3a90 	vmov	s15, r3
 800a8b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a8c0:	ee16 0a90 	vmov	r0, s13
 800a8c4:	f7f5 fe68 	bl	8000598 <__aeabi_f2d>
 800a8c8:	a30b      	add	r3, pc, #44	@ (adr r3, 800a8f8 <steps_to_rads+0x60>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f7f5 febb 	bl	8000648 <__aeabi_dmul>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f7f6 f9ad 	bl	8000c38 <__aeabi_d2f>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	60fb      	str	r3, [r7, #12]
	return rads;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	ee07 3a90 	vmov	s15, r3
}
 800a8e8:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	f3af 8000 	nop.w
 800a8f8:	54442d18 	.word	0x54442d18
 800a8fc:	401921fb 	.word	0x401921fb

0800a900 <rad_to_steps>:

int32_t rad_to_steps(float rads, int32_t full_steps)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	ed87 0a01 	vstr	s0, [r7, #4]
 800a90a:	6038      	str	r0, [r7, #0]
	int32_t steps = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a91a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a922:	ee17 0a90 	vmov	r0, s15
 800a926:	f7f5 fe37 	bl	8000598 <__aeabi_f2d>
 800a92a:	a309      	add	r3, pc, #36	@ (adr r3, 800a950 <rad_to_steps+0x50>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 ffb4 	bl	800089c <__aeabi_ddiv>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4610      	mov	r0, r2
 800a93a:	4619      	mov	r1, r3
 800a93c:	f7f6 f934 	bl	8000ba8 <__aeabi_d2iz>
 800a940:	4603      	mov	r3, r0
 800a942:	60fb      	str	r3, [r7, #12]
	return steps;
 800a944:	68fb      	ldr	r3, [r7, #12]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	54442d18 	.word	0x54442d18
 800a954:	401921fb 	.word	0x401921fb

0800a958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a958:	480d      	ldr	r0, [pc, #52]	@ (800a990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a95a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a95c:	f7ff f924 	bl	8009ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a960:	480c      	ldr	r0, [pc, #48]	@ (800a994 <LoopForever+0x6>)
  ldr r1, =_edata
 800a962:	490d      	ldr	r1, [pc, #52]	@ (800a998 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a964:	4a0d      	ldr	r2, [pc, #52]	@ (800a99c <LoopForever+0xe>)
  movs r3, #0
 800a966:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a968:	e002      	b.n	800a970 <LoopCopyDataInit>

0800a96a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a96a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a96c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a96e:	3304      	adds	r3, #4

0800a970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a974:	d3f9      	bcc.n	800a96a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a976:	4a0a      	ldr	r2, [pc, #40]	@ (800a9a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a978:	4c0a      	ldr	r4, [pc, #40]	@ (800a9a4 <LoopForever+0x16>)
  movs r3, #0
 800a97a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a97c:	e001      	b.n	800a982 <LoopFillZerobss>

0800a97e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a97e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a980:	3204      	adds	r2, #4

0800a982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a984:	d3fb      	bcc.n	800a97e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a986:	f00a fd4b 	bl	8015420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a98a:	f7fe fcf5 	bl	8009378 <main>

0800a98e <LoopForever>:

LoopForever:
    b LoopForever
 800a98e:	e7fe      	b.n	800a98e <LoopForever>
  ldr   r0, =_estack
 800a990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a998:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800a99c:	08019e68 	.word	0x08019e68
  ldr r2, =_sbss
 800a9a0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800a9a4:	20000bb4 	.word	0x20000bb4

0800a9a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a9a8:	e7fe      	b.n	800a9a8 <ADC1_2_IRQHandler>

0800a9aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a9b4:	2003      	movs	r0, #3
 800a9b6:	f000 f95b 	bl	800ac70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a9ba:	200f      	movs	r0, #15
 800a9bc:	f000 f80e 	bl	800a9dc <HAL_InitTick>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	71fb      	strb	r3, [r7, #7]
 800a9ca:	e001      	b.n	800a9d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a9cc:	f7fe ff82 	bl	80098d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a9d0:	79fb      	ldrb	r3, [r7, #7]

}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a9e8:	4b16      	ldr	r3, [pc, #88]	@ (800aa44 <HAL_InitTick+0x68>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d022      	beq.n	800aa36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a9f0:	4b15      	ldr	r3, [pc, #84]	@ (800aa48 <HAL_InitTick+0x6c>)
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4b13      	ldr	r3, [pc, #76]	@ (800aa44 <HAL_InitTick+0x68>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a9fc:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa00:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 f966 	bl	800acd6 <HAL_SYSTICK_Config>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10f      	bne.n	800aa30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b0f      	cmp	r3, #15
 800aa14:	d809      	bhi.n	800aa2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aa16:	2200      	movs	r2, #0
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1e:	f000 f932 	bl	800ac86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800aa22:	4a0a      	ldr	r2, [pc, #40]	@ (800aa4c <HAL_InitTick+0x70>)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	e007      	b.n	800aa3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	73fb      	strb	r3, [r7, #15]
 800aa2e:	e004      	b.n	800aa3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	73fb      	strb	r3, [r7, #15]
 800aa34:	e001      	b.n	800aa3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	20000080 	.word	0x20000080
 800aa48:	20000078 	.word	0x20000078
 800aa4c:	2000007c 	.word	0x2000007c

0800aa50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aa54:	4b05      	ldr	r3, [pc, #20]	@ (800aa6c <HAL_IncTick+0x1c>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	4b05      	ldr	r3, [pc, #20]	@ (800aa70 <HAL_IncTick+0x20>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	4a03      	ldr	r2, [pc, #12]	@ (800aa6c <HAL_IncTick+0x1c>)
 800aa60:	6013      	str	r3, [r2, #0]
}
 800aa62:	bf00      	nop
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	20000a1c 	.word	0x20000a1c
 800aa70:	20000080 	.word	0x20000080

0800aa74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa74:	b480      	push	{r7}
 800aa76:	af00      	add	r7, sp, #0
  return uwTick;
 800aa78:	4b03      	ldr	r3, [pc, #12]	@ (800aa88 <HAL_GetTick+0x14>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	20000a1c 	.word	0x20000a1c

0800aa8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aa94:	f7ff ffee 	bl	800aa74 <HAL_GetTick>
 800aa98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa4:	d004      	beq.n	800aab0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800aaa6:	4b09      	ldr	r3, [pc, #36]	@ (800aacc <HAL_Delay+0x40>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aab0:	bf00      	nop
 800aab2:	f7ff ffdf 	bl	800aa74 <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d8f7      	bhi.n	800aab2 <HAL_Delay+0x26>
  {
  }
}
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20000080 	.word	0x20000080

0800aad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f003 0307 	and.w	r3, r3, #7
 800aade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aae0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <__NVIC_SetPriorityGrouping+0x44>)
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aaec:	4013      	ands	r3, r2
 800aaee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aaf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800aafc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ab02:	4a04      	ldr	r2, [pc, #16]	@ (800ab14 <__NVIC_SetPriorityGrouping+0x44>)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	60d3      	str	r3, [r2, #12]
}
 800ab08:	bf00      	nop
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	e000ed00 	.word	0xe000ed00

0800ab18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab1c:	4b04      	ldr	r3, [pc, #16]	@ (800ab30 <__NVIC_GetPriorityGrouping+0x18>)
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	0a1b      	lsrs	r3, r3, #8
 800ab22:	f003 0307 	and.w	r3, r3, #7
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	e000ed00 	.word	0xe000ed00

0800ab34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	db0b      	blt.n	800ab5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab46:	79fb      	ldrb	r3, [r7, #7]
 800ab48:	f003 021f 	and.w	r2, r3, #31
 800ab4c:	4907      	ldr	r1, [pc, #28]	@ (800ab6c <__NVIC_EnableIRQ+0x38>)
 800ab4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab52:	095b      	lsrs	r3, r3, #5
 800ab54:	2001      	movs	r0, #1
 800ab56:	fa00 f202 	lsl.w	r2, r0, r2
 800ab5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	e000e100 	.word	0xe000e100

0800ab70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	6039      	str	r1, [r7, #0]
 800ab7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	db0a      	blt.n	800ab9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	490c      	ldr	r1, [pc, #48]	@ (800abbc <__NVIC_SetPriority+0x4c>)
 800ab8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab8e:	0112      	lsls	r2, r2, #4
 800ab90:	b2d2      	uxtb	r2, r2
 800ab92:	440b      	add	r3, r1
 800ab94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ab98:	e00a      	b.n	800abb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	4908      	ldr	r1, [pc, #32]	@ (800abc0 <__NVIC_SetPriority+0x50>)
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	f003 030f 	and.w	r3, r3, #15
 800aba6:	3b04      	subs	r3, #4
 800aba8:	0112      	lsls	r2, r2, #4
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	440b      	add	r3, r1
 800abae:	761a      	strb	r2, [r3, #24]
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	e000e100 	.word	0xe000e100
 800abc0:	e000ed00 	.word	0xe000ed00

0800abc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b089      	sub	sp, #36	@ 0x24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	f1c3 0307 	rsb	r3, r3, #7
 800abde:	2b04      	cmp	r3, #4
 800abe0:	bf28      	it	cs
 800abe2:	2304      	movcs	r3, #4
 800abe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	3304      	adds	r3, #4
 800abea:	2b06      	cmp	r3, #6
 800abec:	d902      	bls.n	800abf4 <NVIC_EncodePriority+0x30>
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	3b03      	subs	r3, #3
 800abf2:	e000      	b.n	800abf6 <NVIC_EncodePriority+0x32>
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abf8:	f04f 32ff 	mov.w	r2, #4294967295
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ac02:	43da      	mvns	r2, r3
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	401a      	ands	r2, r3
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ac0c:	f04f 31ff 	mov.w	r1, #4294967295
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	fa01 f303 	lsl.w	r3, r1, r3
 800ac16:	43d9      	mvns	r1, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac1c:	4313      	orrs	r3, r2
         );
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3724      	adds	r7, #36	@ 0x24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3b01      	subs	r3, #1
 800ac38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac3c:	d301      	bcc.n	800ac42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e00f      	b.n	800ac62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ac42:	4a0a      	ldr	r2, [pc, #40]	@ (800ac6c <SysTick_Config+0x40>)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ac4a:	210f      	movs	r1, #15
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	f7ff ff8e 	bl	800ab70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ac54:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <SysTick_Config+0x40>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ac5a:	4b04      	ldr	r3, [pc, #16]	@ (800ac6c <SysTick_Config+0x40>)
 800ac5c:	2207      	movs	r2, #7
 800ac5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	e000e010 	.word	0xe000e010

0800ac70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff ff29 	bl	800aad0 <__NVIC_SetPriorityGrouping>
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b086      	sub	sp, #24
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ac94:	f7ff ff40 	bl	800ab18 <__NVIC_GetPriorityGrouping>
 800ac98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	6978      	ldr	r0, [r7, #20]
 800aca0:	f7ff ff90 	bl	800abc4 <NVIC_EncodePriority>
 800aca4:	4602      	mov	r2, r0
 800aca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acaa:	4611      	mov	r1, r2
 800acac:	4618      	mov	r0, r3
 800acae:	f7ff ff5f 	bl	800ab70 <__NVIC_SetPriority>
}
 800acb2:	bf00      	nop
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	4603      	mov	r3, r0
 800acc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800acc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff ff33 	bl	800ab34 <__NVIC_EnableIRQ>
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff ffa4 	bl	800ac2c <SysTick_Config>
 800ace4:	4603      	mov	r3, r0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
	...

0800acf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e08d      	b.n	800ae1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	4b47      	ldr	r3, [pc, #284]	@ (800ae28 <HAL_DMA_Init+0x138>)
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d80f      	bhi.n	800ad2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	4b45      	ldr	r3, [pc, #276]	@ (800ae2c <HAL_DMA_Init+0x13c>)
 800ad16:	4413      	add	r3, r2
 800ad18:	4a45      	ldr	r2, [pc, #276]	@ (800ae30 <HAL_DMA_Init+0x140>)
 800ad1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1e:	091b      	lsrs	r3, r3, #4
 800ad20:	009a      	lsls	r2, r3, #2
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a42      	ldr	r2, [pc, #264]	@ (800ae34 <HAL_DMA_Init+0x144>)
 800ad2a:	641a      	str	r2, [r3, #64]	@ 0x40
 800ad2c:	e00e      	b.n	800ad4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	4b40      	ldr	r3, [pc, #256]	@ (800ae38 <HAL_DMA_Init+0x148>)
 800ad36:	4413      	add	r3, r2
 800ad38:	4a3d      	ldr	r2, [pc, #244]	@ (800ae30 <HAL_DMA_Init+0x140>)
 800ad3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3e:	091b      	lsrs	r3, r3, #4
 800ad40:	009a      	lsls	r2, r3, #2
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a3c      	ldr	r2, [pc, #240]	@ (800ae3c <HAL_DMA_Init+0x14c>)
 800ad4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ad62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ad70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a1b      	ldr	r3, [r3, #32]
 800ad8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f9cc 	bl	800b13c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adac:	d102      	bne.n	800adb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800adbc:	b2d2      	uxtb	r2, r2
 800adbe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800adc8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d010      	beq.n	800adf4 <HAL_DMA_Init+0x104>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2b04      	cmp	r3, #4
 800add8:	d80c      	bhi.n	800adf4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f9ec 	bl	800b1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	e008      	b.n	800ae06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	40020407 	.word	0x40020407
 800ae2c:	bffdfff8 	.word	0xbffdfff8
 800ae30:	cccccccd 	.word	0xcccccccd
 800ae34:	40020000 	.word	0x40020000
 800ae38:	bffdfbf8 	.word	0xbffdfbf8
 800ae3c:	40020400 	.word	0x40020400

0800ae40 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d005      	beq.n	800ae64 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	73fb      	strb	r3, [r7, #15]
 800ae62:	e037      	b.n	800aed4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 020e 	bic.w	r2, r2, #14
 800ae72:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae82:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f022 0201 	bic.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae98:	f003 021f 	and.w	r2, r3, #31
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea0:	2101      	movs	r1, #1
 800aea2:	fa01 f202 	lsl.w	r2, r1, r2
 800aea6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800aeb0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00c      	beq.n	800aed4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aec8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800aed2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b02      	cmp	r3, #2
 800af08:	d00d      	beq.n	800af26 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2204      	movs	r2, #4
 800af0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	73fb      	strb	r3, [r7, #15]
 800af24:	e047      	b.n	800afb6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f022 020e 	bic.w	r2, r2, #14
 800af34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0201 	bic.w	r2, r2, #1
 800af44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5a:	f003 021f 	and.w	r2, r3, #31
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af62:	2101      	movs	r1, #1
 800af64:	fa01 f202 	lsl.w	r2, r1, r2
 800af68:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800af72:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00c      	beq.n	800af96 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800af94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
    }
  }
  return status;
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afdc:	f003 031f 	and.w	r3, r3, #31
 800afe0:	2204      	movs	r2, #4
 800afe2:	409a      	lsls	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4013      	ands	r3, r2
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d026      	beq.n	800b03a <HAL_DMA_IRQHandler+0x7a>
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f003 0304 	and.w	r3, r3, #4
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d021      	beq.n	800b03a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0320 	and.w	r3, r3, #32
 800b000:	2b00      	cmp	r3, #0
 800b002:	d107      	bne.n	800b014 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0204 	bic.w	r2, r2, #4
 800b012:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b018:	f003 021f 	and.w	r2, r3, #31
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b020:	2104      	movs	r1, #4
 800b022:	fa01 f202 	lsl.w	r2, r1, r2
 800b026:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d071      	beq.n	800b114 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b038:	e06c      	b.n	800b114 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b03e:	f003 031f 	and.w	r3, r3, #31
 800b042:	2202      	movs	r2, #2
 800b044:	409a      	lsls	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4013      	ands	r3, r2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d02e      	beq.n	800b0ac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f003 0302 	and.w	r3, r3, #2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d029      	beq.n	800b0ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10b      	bne.n	800b07e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 020a 	bic.w	r2, r2, #10
 800b074:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b082:	f003 021f 	and.w	r2, r3, #31
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b08a:	2102      	movs	r1, #2
 800b08c:	fa01 f202 	lsl.w	r2, r1, r2
 800b090:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d038      	beq.n	800b114 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b0aa:	e033      	b.n	800b114 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0b0:	f003 031f 	and.w	r3, r3, #31
 800b0b4:	2208      	movs	r2, #8
 800b0b6:	409a      	lsls	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d02a      	beq.n	800b116 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f003 0308 	and.w	r3, r3, #8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d025      	beq.n	800b116 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f022 020e 	bic.w	r2, r2, #14
 800b0d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0de:	f003 021f 	and.w	r2, r3, #31
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e6:	2101      	movs	r1, #1
 800b0e8:	fa01 f202 	lsl.w	r2, r1, r2
 800b0ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d004      	beq.n	800b116 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b114:	bf00      	nop
 800b116:	bf00      	nop
}
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b12c:	b2db      	uxtb	r3, r3
}
 800b12e:	4618      	mov	r0, r3
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
	...

0800b13c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	4b16      	ldr	r3, [pc, #88]	@ (800b1a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d802      	bhi.n	800b156 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b150:	4b15      	ldr	r3, [pc, #84]	@ (800b1a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	e001      	b.n	800b15a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b156:	4b15      	ldr	r3, [pc, #84]	@ (800b1ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b158:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	3b08      	subs	r3, #8
 800b166:	4a12      	ldr	r2, [pc, #72]	@ (800b1b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b168:	fba2 2303 	umull	r2, r3, r2, r3
 800b16c:	091b      	lsrs	r3, r3, #4
 800b16e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b174:	089b      	lsrs	r3, r3, #2
 800b176:	009a      	lsls	r2, r3, #2
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	4413      	add	r3, r2
 800b17c:	461a      	mov	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a0b      	ldr	r2, [pc, #44]	@ (800b1b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b186:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f003 031f 	and.w	r3, r3, #31
 800b18e:	2201      	movs	r2, #1
 800b190:	409a      	lsls	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b196:	bf00      	nop
 800b198:	371c      	adds	r7, #28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	40020407 	.word	0x40020407
 800b1a8:	40020800 	.word	0x40020800
 800b1ac:	40020820 	.word	0x40020820
 800b1b0:	cccccccd 	.word	0xcccccccd
 800b1b4:	40020880 	.word	0x40020880

0800b1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b1f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b1cc:	4413      	add	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a08      	ldr	r2, [pc, #32]	@ (800b1fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b1da:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	f003 031f 	and.w	r3, r3, #31
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	409a      	lsls	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800b1ec:	bf00      	nop
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	1000823f 	.word	0x1000823f
 800b1fc:	40020940 	.word	0x40020940

0800b200 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e147      	b.n	800b4a2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7fd fdbe 	bl	8008da8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 0210 	bic.w	r2, r2, #16
 800b23a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b23c:	f7ff fc1a 	bl	800aa74 <HAL_GetTick>
 800b240:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800b242:	e012      	b.n	800b26a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800b244:	f7ff fc16 	bl	800aa74 <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	2b0a      	cmp	r3, #10
 800b250:	d90b      	bls.n	800b26a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b256:	f043 0201 	orr.w	r2, r3, #1
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2203      	movs	r2, #3
 800b262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e11b      	b.n	800b4a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	f003 0308 	and.w	r3, r3, #8
 800b274:	2b08      	cmp	r3, #8
 800b276:	d0e5      	beq.n	800b244 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699a      	ldr	r2, [r3, #24]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f042 0201 	orr.w	r2, r2, #1
 800b286:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b288:	f7ff fbf4 	bl	800aa74 <HAL_GetTick>
 800b28c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800b28e:	e012      	b.n	800b2b6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800b290:	f7ff fbf0 	bl	800aa74 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b0a      	cmp	r3, #10
 800b29c:	d90b      	bls.n	800b2b6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2a2:	f043 0201 	orr.w	r2, r3, #1
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e0f5      	b.n	800b4a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0e5      	beq.n	800b290 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	699a      	ldr	r2, [r3, #24]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f042 0202 	orr.w	r2, r2, #2
 800b2d2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a74      	ldr	r2, [pc, #464]	@ (800b4ac <HAL_FDCAN_Init+0x2ac>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d103      	bne.n	800b2e6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800b2de:	4a74      	ldr	r2, [pc, #464]	@ (800b4b0 <HAL_FDCAN_Init+0x2b0>)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	7c1b      	ldrb	r3, [r3, #16]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d108      	bne.n	800b300 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	699a      	ldr	r2, [r3, #24]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2fc:	619a      	str	r2, [r3, #24]
 800b2fe:	e007      	b.n	800b310 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	699a      	ldr	r2, [r3, #24]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b30e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	7c5b      	ldrb	r3, [r3, #17]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d108      	bne.n	800b32a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	699a      	ldr	r2, [r3, #24]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b326:	619a      	str	r2, [r3, #24]
 800b328:	e007      	b.n	800b33a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	699a      	ldr	r2, [r3, #24]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b338:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	7c9b      	ldrb	r3, [r3, #18]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d108      	bne.n	800b354 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	699a      	ldr	r2, [r3, #24]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b350:	619a      	str	r2, [r3, #24]
 800b352:	e007      	b.n	800b364 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699a      	ldr	r2, [r3, #24]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b362:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689a      	ldr	r2, [r3, #8]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	430a      	orrs	r2, r1
 800b378:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	699a      	ldr	r2, [r3, #24]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800b388:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	691a      	ldr	r2, [r3, #16]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f022 0210 	bic.w	r2, r2, #16
 800b398:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d108      	bne.n	800b3b4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	699a      	ldr	r2, [r3, #24]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f042 0204 	orr.w	r2, r2, #4
 800b3b0:	619a      	str	r2, [r3, #24]
 800b3b2:	e02c      	b.n	800b40e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d028      	beq.n	800b40e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d01c      	beq.n	800b3fe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b3d2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f042 0210 	orr.w	r2, r2, #16
 800b3e2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d110      	bne.n	800b40e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0220 	orr.w	r2, r2, #32
 800b3fa:	619a      	str	r2, [r3, #24]
 800b3fc:	e007      	b.n	800b40e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	699a      	ldr	r2, [r3, #24]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f042 0220 	orr.w	r2, r2, #32
 800b40c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	3b01      	subs	r3, #1
 800b414:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	69db      	ldr	r3, [r3, #28]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b41e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b426:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	3b01      	subs	r3, #1
 800b430:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b436:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b438:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b442:	d115      	bne.n	800b470 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b448:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44e:	3b01      	subs	r3, #1
 800b450:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b452:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b458:	3b01      	subs	r3, #1
 800b45a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b45c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b464:	3b01      	subs	r3, #1
 800b466:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b46c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b46e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fa86 	bl	800b998 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	40006400 	.word	0x40006400
 800b4b0:	40006500 	.word	0x40006500

0800b4b4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b4c4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d002      	beq.n	800b4d2 <HAL_FDCAN_ConfigFilter+0x1e>
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d13d      	bne.n	800b54e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d119      	bne.n	800b50e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b4e6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800b4ee:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	e01d      	b.n	800b54a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	075a      	lsls	r2, r3, #29
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	4313      	orrs	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	079a      	lsls	r2, r3, #30
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	4413      	add	r3, r2
 800b536:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	3304      	adds	r3, #4
 800b542:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e006      	b.n	800b55c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b552:	f043 0202 	orr.w	r2, r3, #2
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
  }
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	371c      	adds	r7, #28
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d116      	bne.n	800b5b0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b58a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	011a      	lsls	r2, r3, #4
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	431a      	orrs	r2, r3
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	431a      	orrs	r2, r3
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	431a      	orrs	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	430a      	orrs	r2, r1
 800b5a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	e006      	b.n	800b5be <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5b4:	f043 0204 	orr.w	r2, r3, #4
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
  }
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d108      	bne.n	800b5f4 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	0219      	lsls	r1, r3, #8
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e006      	b.n	800b602 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5f8:	f043 0204 	orr.w	r2, r3, #4
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
  }
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d109      	bne.n	800b636 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b630:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	e006      	b.n	800b644 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b63a:	f043 0204 	orr.w	r2, r3, #4
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
  }
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b01      	cmp	r3, #1
 800b662:	d110      	bne.n	800b686 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	699a      	ldr	r2, [r3, #24]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f022 0201 	bic.w	r2, r2, #1
 800b67a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e006      	b.n	800b694 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b68a:	f043 0204 	orr.w	r2, r3, #4
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
  }
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d12c      	bne.n	800b712 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b6c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d007      	beq.n	800b6d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e023      	b.n	800b720 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b6e0:	0c1b      	lsrs	r3, r3, #16
 800b6e2:	f003 0303 	and.w	r3, r3, #3
 800b6e6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	68b9      	ldr	r1, [r7, #8]
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f000 f9be 	bl	800ba70 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	fa01 f202 	lsl.w	r2, r1, r2
 800b700:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800b704:	2201      	movs	r2, #1
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	409a      	lsls	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	e006      	b.n	800b720 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b716:	f043 0208 	orr.w	r2, r3, #8
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
  }
}
 800b720:	4618      	mov	r0, r3
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800b728:	b480      	push	{r7}
 800b72a:	b08b      	sub	sp, #44	@ 0x2c
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
 800b734:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b740:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800b742:	7efb      	ldrb	r3, [r7, #27]
 800b744:	2b02      	cmp	r3, #2
 800b746:	f040 80e8 	bne.w	800b91a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b40      	cmp	r3, #64	@ 0x40
 800b74e:	d137      	bne.n	800b7c0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b758:	f003 030f 	and.w	r3, r3, #15
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d107      	bne.n	800b770 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b764:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e0db      	b.n	800b928 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b778:	0e1b      	lsrs	r3, r3, #24
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d10a      	bne.n	800b798 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b78a:	0a5b      	lsrs	r3, r3, #9
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800b794:	2301      	movs	r3, #1
 800b796:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7a0:	0a1b      	lsrs	r3, r3, #8
 800b7a2:	f003 0303 	and.w	r3, r3, #3
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800b7b0:	69fa      	ldr	r2, [r7, #28]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	4413      	add	r3, r2
 800b7b8:	00db      	lsls	r3, r3, #3
 800b7ba:	440b      	add	r3, r1
 800b7bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7be:	e036      	b.n	800b82e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7c8:	f003 030f 	and.w	r3, r3, #15
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d107      	bne.n	800b7e0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e0a3      	b.n	800b928 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7e8:	0e1b      	lsrs	r3, r3, #24
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d10a      	bne.n	800b808 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b01      	cmp	r3, #1
 800b802:	d101      	bne.n	800b808 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800b804:	2301      	movs	r3, #1
 800b806:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b810:	0a1b      	lsrs	r3, r3, #8
 800b812:	f003 0303 	and.w	r3, r3, #3
 800b816:	69fa      	ldr	r2, [r7, #28]
 800b818:	4413      	add	r3, r2
 800b81a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	4613      	mov	r3, r2
 800b824:	00db      	lsls	r3, r3, #3
 800b826:	4413      	add	r3, r2
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	440b      	add	r3, r1
 800b82c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800b82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d107      	bne.n	800b852 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800b842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	0c9b      	lsrs	r3, r3, #18
 800b848:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	e005      	b.n	800b85e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800b876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b878:	3304      	adds	r3, #4
 800b87a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800b87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	b29a      	uxth	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	0c1b      	lsrs	r3, r3, #16
 800b88c:	f003 020f 	and.w	r2, r3, #15
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	0e1b      	lsrs	r3, r3, #24
 800b8b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	0fda      	lsrs	r2, r3, #31
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8cc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	623b      	str	r3, [r7, #32]
 800b8d2:	e00a      	b.n	800b8ea <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	441a      	add	r2, r3
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	440b      	add	r3, r1
 800b8e0:	7812      	ldrb	r2, [r2, #0]
 800b8e2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	623b      	str	r3, [r7, #32]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	4a11      	ldr	r2, [pc, #68]	@ (800b934 <HAL_FDCAN_GetRxMessage+0x20c>)
 800b8f0:	5cd3      	ldrb	r3, [r2, r3]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d3ec      	bcc.n	800b8d4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b40      	cmp	r3, #64	@ 0x40
 800b8fe:	d105      	bne.n	800b90c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800b90a:	e004      	b.n	800b916 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	69fa      	ldr	r2, [r7, #28]
 800b912:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	e006      	b.n	800b928 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b91e:	f043 0208 	orr.w	r2, r3, #8
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
  }
}
 800b928:	4618      	mov	r0, r3
 800b92a:	372c      	adds	r7, #44	@ 0x2c
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	080193c8 	.word	0x080193c8

0800b938 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b40      	cmp	r3, #64	@ 0x40
 800b946:	d107      	bne.n	800b958 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b950:	f003 030f 	and.w	r3, r3, #15
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	e006      	b.n	800b966 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b960:	f003 030f 	and.w	r3, r3, #15
 800b964:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800b966:	68fb      	ldr	r3, [r7, #12]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b984:	f003 0307 	and.w	r3, r3, #7
 800b988:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800b98a:	68fb      	ldr	r3, [r7, #12]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800b9a0:	4b30      	ldr	r3, [pc, #192]	@ (800ba64 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800b9a2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a2f      	ldr	r2, [pc, #188]	@ (800ba68 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d103      	bne.n	800b9b6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b9b4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a2c      	ldr	r2, [pc, #176]	@ (800ba6c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d103      	bne.n	800b9c8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800b9c6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9d6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9de:	041a      	lsls	r2, r3, #16
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	430a      	orrs	r2, r1
 800b9e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9fc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba04:	061a      	lsls	r2, r3, #24
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	e005      	b.n	800ba4a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3304      	adds	r3, #4
 800ba48:	60fb      	str	r3, [r7, #12]
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d3f3      	bcc.n	800ba3e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800ba56:	bf00      	nop
 800ba58:	bf00      	nop
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	4000a400 	.word	0x4000a400
 800ba68:	40006800 	.word	0x40006800
 800ba6c:	40006c00 	.word	0x40006c00

0800ba70 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b089      	sub	sp, #36	@ 0x24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800ba8e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800ba96:	4313      	orrs	r3, r2
 800ba98:	61fb      	str	r3, [r7, #28]
 800ba9a:	e00a      	b.n	800bab2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800baa4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800baaa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800baac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bab0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800babc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800bac2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800bac8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800bad0:	4313      	orrs	r3, r2
 800bad2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	4613      	mov	r3, r2
 800badc:	00db      	lsls	r3, r3, #3
 800bade:	4413      	add	r3, r2
 800bae0:	00db      	lsls	r3, r3, #3
 800bae2:	440b      	add	r3, r1
 800bae4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	3304      	adds	r3, #4
 800baf0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	3304      	adds	r3, #4
 800bafc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800bafe:	2300      	movs	r3, #0
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	e020      	b.n	800bb46 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	3303      	adds	r3, #3
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	3302      	adds	r3, #2
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	440b      	add	r3, r1
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800bb1c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	3301      	adds	r3, #1
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	440b      	add	r3, r1
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800bb2a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800bb2c:	6879      	ldr	r1, [r7, #4]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	440a      	add	r2, r1
 800bb32:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800bb34:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	3304      	adds	r3, #4
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	4a06      	ldr	r2, [pc, #24]	@ (800bb64 <FDCAN_CopyMessageToRAM+0xf4>)
 800bb4c:	5cd3      	ldrb	r3, [r2, r3]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d3d6      	bcc.n	800bb04 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	3724      	adds	r7, #36	@ 0x24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	080193c8 	.word	0x080193c8

0800bb68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bb72:	2300      	movs	r3, #0
 800bb74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bb76:	e15a      	b.n	800be2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	fa01 f303 	lsl.w	r3, r1, r3
 800bb84:	4013      	ands	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 814c 	beq.w	800be28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f003 0303 	and.w	r3, r3, #3
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d005      	beq.n	800bba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d130      	bne.n	800bc0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	2203      	movs	r2, #3
 800bbb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb8:	43db      	mvns	r3, r3
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	68da      	ldr	r2, [r3, #12]
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bbde:	2201      	movs	r2, #1
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	43db      	mvns	r3, r3
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	4013      	ands	r3, r2
 800bbec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	091b      	lsrs	r3, r3, #4
 800bbf4:	f003 0201 	and.w	r2, r3, #1
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	f003 0303 	and.w	r3, r3, #3
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d017      	beq.n	800bc46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	2203      	movs	r2, #3
 800bc22:	fa02 f303 	lsl.w	r3, r2, r3
 800bc26:	43db      	mvns	r3, r3
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f003 0303 	and.w	r3, r3, #3
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d123      	bne.n	800bc9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	08da      	lsrs	r2, r3, #3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3208      	adds	r2, #8
 800bc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f003 0307 	and.w	r3, r3, #7
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	220f      	movs	r2, #15
 800bc6a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc6e:	43db      	mvns	r3, r3
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	4013      	ands	r3, r2
 800bc74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	691a      	ldr	r2, [r3, #16]
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f003 0307 	and.w	r3, r3, #7
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	fa02 f303 	lsl.w	r3, r2, r3
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	08da      	lsrs	r2, r3, #3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	3208      	adds	r2, #8
 800bc94:	6939      	ldr	r1, [r7, #16]
 800bc96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	005b      	lsls	r3, r3, #1
 800bca4:	2203      	movs	r2, #3
 800bca6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcaa:	43db      	mvns	r3, r3
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	4013      	ands	r3, r2
 800bcb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	f003 0203 	and.w	r2, r3, #3
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 80a6 	beq.w	800be28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bcdc:	4b5b      	ldr	r3, [pc, #364]	@ (800be4c <HAL_GPIO_Init+0x2e4>)
 800bcde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bce0:	4a5a      	ldr	r2, [pc, #360]	@ (800be4c <HAL_GPIO_Init+0x2e4>)
 800bce2:	f043 0301 	orr.w	r3, r3, #1
 800bce6:	6613      	str	r3, [r2, #96]	@ 0x60
 800bce8:	4b58      	ldr	r3, [pc, #352]	@ (800be4c <HAL_GPIO_Init+0x2e4>)
 800bcea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	60bb      	str	r3, [r7, #8]
 800bcf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bcf4:	4a56      	ldr	r2, [pc, #344]	@ (800be50 <HAL_GPIO_Init+0x2e8>)
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	089b      	lsrs	r3, r3, #2
 800bcfa:	3302      	adds	r3, #2
 800bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f003 0303 	and.w	r3, r3, #3
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	220f      	movs	r2, #15
 800bd0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd10:	43db      	mvns	r3, r3
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	4013      	ands	r3, r2
 800bd16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800bd1e:	d01f      	beq.n	800bd60 <HAL_GPIO_Init+0x1f8>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a4c      	ldr	r2, [pc, #304]	@ (800be54 <HAL_GPIO_Init+0x2ec>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d019      	beq.n	800bd5c <HAL_GPIO_Init+0x1f4>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a4b      	ldr	r2, [pc, #300]	@ (800be58 <HAL_GPIO_Init+0x2f0>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d013      	beq.n	800bd58 <HAL_GPIO_Init+0x1f0>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a4a      	ldr	r2, [pc, #296]	@ (800be5c <HAL_GPIO_Init+0x2f4>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d00d      	beq.n	800bd54 <HAL_GPIO_Init+0x1ec>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a49      	ldr	r2, [pc, #292]	@ (800be60 <HAL_GPIO_Init+0x2f8>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d007      	beq.n	800bd50 <HAL_GPIO_Init+0x1e8>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a48      	ldr	r2, [pc, #288]	@ (800be64 <HAL_GPIO_Init+0x2fc>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d101      	bne.n	800bd4c <HAL_GPIO_Init+0x1e4>
 800bd48:	2305      	movs	r3, #5
 800bd4a:	e00a      	b.n	800bd62 <HAL_GPIO_Init+0x1fa>
 800bd4c:	2306      	movs	r3, #6
 800bd4e:	e008      	b.n	800bd62 <HAL_GPIO_Init+0x1fa>
 800bd50:	2304      	movs	r3, #4
 800bd52:	e006      	b.n	800bd62 <HAL_GPIO_Init+0x1fa>
 800bd54:	2303      	movs	r3, #3
 800bd56:	e004      	b.n	800bd62 <HAL_GPIO_Init+0x1fa>
 800bd58:	2302      	movs	r3, #2
 800bd5a:	e002      	b.n	800bd62 <HAL_GPIO_Init+0x1fa>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e000      	b.n	800bd62 <HAL_GPIO_Init+0x1fa>
 800bd60:	2300      	movs	r3, #0
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	f002 0203 	and.w	r2, r2, #3
 800bd68:	0092      	lsls	r2, r2, #2
 800bd6a:	4093      	lsls	r3, r2
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bd72:	4937      	ldr	r1, [pc, #220]	@ (800be50 <HAL_GPIO_Init+0x2e8>)
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	089b      	lsrs	r3, r3, #2
 800bd78:	3302      	adds	r3, #2
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bd80:	4b39      	ldr	r3, [pc, #228]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	43db      	mvns	r3, r3
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bda4:	4a30      	ldr	r2, [pc, #192]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bdaa:	4b2f      	ldr	r3, [pc, #188]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	43db      	mvns	r3, r3
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d003      	beq.n	800bdce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bdce:	4a26      	ldr	r2, [pc, #152]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800bdd4:	4b24      	ldr	r3, [pc, #144]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	43db      	mvns	r3, r3
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	4013      	ands	r3, r2
 800bde2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d003      	beq.n	800bdf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bdf8:	4a1b      	ldr	r2, [pc, #108]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	43db      	mvns	r3, r3
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4013      	ands	r3, r2
 800be0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	4313      	orrs	r3, r2
 800be20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800be22:	4a11      	ldr	r2, [pc, #68]	@ (800be68 <HAL_GPIO_Init+0x300>)
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	3301      	adds	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	fa22 f303 	lsr.w	r3, r2, r3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f47f ae9d 	bne.w	800bb78 <HAL_GPIO_Init+0x10>
  }
}
 800be3e:	bf00      	nop
 800be40:	bf00      	nop
 800be42:	371c      	adds	r7, #28
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	40021000 	.word	0x40021000
 800be50:	40010000 	.word	0x40010000
 800be54:	48000400 	.word	0x48000400
 800be58:	48000800 	.word	0x48000800
 800be5c:	48000c00 	.word	0x48000c00
 800be60:	48001000 	.word	0x48001000
 800be64:	48001400 	.word	0x48001400
 800be68:	40010400 	.word	0x40010400

0800be6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	807b      	strh	r3, [r7, #2]
 800be78:	4613      	mov	r3, r2
 800be7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800be7c:	787b      	ldrb	r3, [r7, #1]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800be82:	887a      	ldrh	r2, [r7, #2]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800be88:	e002      	b.n	800be90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800be8a:	887a      	ldrh	r2, [r7, #2]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	695b      	ldr	r3, [r3, #20]
 800beac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800beae:	887a      	ldrh	r2, [r7, #2]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	4013      	ands	r3, r2
 800beb4:	041a      	lsls	r2, r3, #16
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	43d9      	mvns	r1, r3
 800beba:	887b      	ldrh	r3, [r7, #2]
 800bebc:	400b      	ands	r3, r1
 800bebe:	431a      	orrs	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	619a      	str	r2, [r3, #24]
}
 800bec4:	bf00      	nop
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e08d      	b.n	800bffe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7fd f898 	bl	800902c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2224      	movs	r2, #36	@ 0x24
 800bf00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f022 0201 	bic.w	r2, r2, #1
 800bf12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bf20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bf30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d107      	bne.n	800bf4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	689a      	ldr	r2, [r3, #8]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf46:	609a      	str	r2, [r3, #8]
 800bf48:	e006      	b.n	800bf58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689a      	ldr	r2, [r3, #8]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800bf56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d108      	bne.n	800bf72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf6e:	605a      	str	r2, [r3, #4]
 800bf70:	e007      	b.n	800bf82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bf80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	6812      	ldr	r2, [r2, #0]
 800bf8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bf90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bfa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	691a      	ldr	r2, [r3, #16]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	69d9      	ldr	r1, [r3, #28]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a1a      	ldr	r2, [r3, #32]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0201 	orr.w	r2, r2, #1
 800bfde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2220      	movs	r2, #32
 800bfea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af02      	add	r7, sp, #8
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	4608      	mov	r0, r1
 800c012:	4611      	mov	r1, r2
 800c014:	461a      	mov	r2, r3
 800c016:	4603      	mov	r3, r0
 800c018:	817b      	strh	r3, [r7, #10]
 800c01a:	460b      	mov	r3, r1
 800c01c:	813b      	strh	r3, [r7, #8]
 800c01e:	4613      	mov	r3, r2
 800c020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b20      	cmp	r3, #32
 800c02c:	f040 80f9 	bne.w	800c222 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <HAL_I2C_Mem_Write+0x34>
 800c036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d105      	bne.n	800c048 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c042:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e0ed      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_I2C_Mem_Write+0x4e>
 800c052:	2302      	movs	r3, #2
 800c054:	e0e6      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c05e:	f7fe fd09 	bl	800aa74 <HAL_GetTick>
 800c062:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	2319      	movs	r3, #25
 800c06a:	2201      	movs	r2, #1
 800c06c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f001 f938 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e0d1      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2221      	movs	r2, #33	@ 0x21
 800c084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2240      	movs	r2, #64	@ 0x40
 800c08c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6a3a      	ldr	r2, [r7, #32]
 800c09a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c0a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c0a8:	88f8      	ldrh	r0, [r7, #6]
 800c0aa:	893a      	ldrh	r2, [r7, #8]
 800c0ac:	8979      	ldrh	r1, [r7, #10]
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 fc7b 	bl	800c9b4 <I2C_RequestMemoryWrite>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d005      	beq.n	800c0d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e0a9      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	2bff      	cmp	r3, #255	@ 0xff
 800c0d8:	d90e      	bls.n	800c0f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	22ff      	movs	r2, #255	@ 0xff
 800c0de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0e4:	b2da      	uxtb	r2, r3
 800c0e6:	8979      	ldrh	r1, [r7, #10]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f001 fabb 	bl	800d66c <I2C_TransferConfig>
 800c0f6:	e00f      	b.n	800c118 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c106:	b2da      	uxtb	r2, r3
 800c108:	8979      	ldrh	r1, [r7, #10]
 800c10a:	2300      	movs	r3, #0
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f001 faaa 	bl	800d66c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f001 f93b 	bl	800d398 <I2C_WaitOnTXISFlagUntilTimeout>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d001      	beq.n	800c12c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e07b      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c130:	781a      	ldrb	r2, [r3, #0]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13c:	1c5a      	adds	r2, r3, #1
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c146:	b29b      	uxth	r3, r3
 800c148:	3b01      	subs	r3, #1
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c154:	3b01      	subs	r3, #1
 800c156:	b29a      	uxth	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c160:	b29b      	uxth	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d034      	beq.n	800c1d0 <HAL_I2C_Mem_Write+0x1c8>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d130      	bne.n	800c1d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c174:	2200      	movs	r2, #0
 800c176:	2180      	movs	r1, #128	@ 0x80
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f001 f8b4 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e04d      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	2bff      	cmp	r3, #255	@ 0xff
 800c190:	d90e      	bls.n	800c1b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	22ff      	movs	r2, #255	@ 0xff
 800c196:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	8979      	ldrh	r1, [r7, #10]
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f001 fa5f 	bl	800d66c <I2C_TransferConfig>
 800c1ae:	e00f      	b.n	800c1d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	8979      	ldrh	r1, [r7, #10]
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f001 fa4e 	bl	800d66c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d19e      	bne.n	800c118 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f001 f921 	bl	800d426 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e01a      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6859      	ldr	r1, [r3, #4]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	4b0a      	ldr	r3, [pc, #40]	@ (800c22c <HAL_I2C_Mem_Write+0x224>)
 800c202:	400b      	ands	r3, r1
 800c204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2220      	movs	r2, #32
 800c20a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	e000      	b.n	800c224 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c222:	2302      	movs	r3, #2
  }
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	fe00e800 	.word	0xfe00e800

0800c230 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af02      	add	r7, sp, #8
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	4608      	mov	r0, r1
 800c23a:	4611      	mov	r1, r2
 800c23c:	461a      	mov	r2, r3
 800c23e:	4603      	mov	r3, r0
 800c240:	817b      	strh	r3, [r7, #10]
 800c242:	460b      	mov	r3, r1
 800c244:	813b      	strh	r3, [r7, #8]
 800c246:	4613      	mov	r3, r2
 800c248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b20      	cmp	r3, #32
 800c254:	f040 80fd 	bne.w	800c452 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <HAL_I2C_Mem_Read+0x34>
 800c25e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c260:	2b00      	cmp	r3, #0
 800c262:	d105      	bne.n	800c270 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c26a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e0f1      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c276:	2b01      	cmp	r3, #1
 800c278:	d101      	bne.n	800c27e <HAL_I2C_Mem_Read+0x4e>
 800c27a:	2302      	movs	r3, #2
 800c27c:	e0ea      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c286:	f7fe fbf5 	bl	800aa74 <HAL_GetTick>
 800c28a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	2319      	movs	r3, #25
 800c292:	2201      	movs	r2, #1
 800c294:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f001 f824 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e0d5      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2222      	movs	r2, #34	@ 0x22
 800c2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2240      	movs	r2, #64	@ 0x40
 800c2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6a3a      	ldr	r2, [r7, #32]
 800c2c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c2c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c2d0:	88f8      	ldrh	r0, [r7, #6]
 800c2d2:	893a      	ldrh	r2, [r7, #8]
 800c2d4:	8979      	ldrh	r1, [r7, #10]
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	4603      	mov	r3, r0
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 fbbb 	bl	800ca5c <I2C_RequestMemoryRead>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d005      	beq.n	800c2f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e0ad      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	2bff      	cmp	r3, #255	@ 0xff
 800c300:	d90e      	bls.n	800c320 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	22ff      	movs	r2, #255	@ 0xff
 800c306:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	8979      	ldrh	r1, [r7, #10]
 800c310:	4b52      	ldr	r3, [pc, #328]	@ (800c45c <HAL_I2C_Mem_Read+0x22c>)
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f001 f9a7 	bl	800d66c <I2C_TransferConfig>
 800c31e:	e00f      	b.n	800c340 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c324:	b29a      	uxth	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	8979      	ldrh	r1, [r7, #10]
 800c332:	4b4a      	ldr	r3, [pc, #296]	@ (800c45c <HAL_I2C_Mem_Read+0x22c>)
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f001 f996 	bl	800d66c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	2200      	movs	r2, #0
 800c348:	2104      	movs	r1, #4
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 ffcb 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e07c      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c364:	b2d2      	uxtb	r2, r2
 800c366:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c36c:	1c5a      	adds	r2, r3, #1
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c376:	3b01      	subs	r3, #1
 800c378:	b29a      	uxth	r2, r3
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c382:	b29b      	uxth	r3, r3
 800c384:	3b01      	subs	r3, #1
 800c386:	b29a      	uxth	r2, r3
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c390:	b29b      	uxth	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d034      	beq.n	800c400 <HAL_I2C_Mem_Read+0x1d0>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d130      	bne.n	800c400 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2180      	movs	r1, #128	@ 0x80
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 ff9c 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e04d      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	2bff      	cmp	r3, #255	@ 0xff
 800c3c0:	d90e      	bls.n	800c3e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	22ff      	movs	r2, #255	@ 0xff
 800c3c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	8979      	ldrh	r1, [r7, #10]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f001 f947 	bl	800d66c <I2C_TransferConfig>
 800c3de:	e00f      	b.n	800c400 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	8979      	ldrh	r1, [r7, #10]
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f001 f936 	bl	800d66c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c404:	b29b      	uxth	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d19a      	bne.n	800c340 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f001 f809 	bl	800d426 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e01a      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2220      	movs	r2, #32
 800c424:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6859      	ldr	r1, [r3, #4]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	4b0b      	ldr	r3, [pc, #44]	@ (800c460 <HAL_I2C_Mem_Read+0x230>)
 800c432:	400b      	ands	r3, r1
 800c434:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2220      	movs	r2, #32
 800c43a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	e000      	b.n	800c454 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c452:	2302      	movs	r3, #2
  }
}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	80002400 	.word	0x80002400
 800c460:	fe00e800 	.word	0xfe00e800

0800c464 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	@ 0x28
 800c468:	af02      	add	r7, sp, #8
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	607a      	str	r2, [r7, #4]
 800c46e:	603b      	str	r3, [r7, #0]
 800c470:	460b      	mov	r3, r1
 800c472:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b20      	cmp	r3, #32
 800c482:	f040 80d6 	bne.w	800c632 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c494:	d101      	bne.n	800c49a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800c496:	2302      	movs	r3, #2
 800c498:	e0cc      	b.n	800c634 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d101      	bne.n	800c4a8 <HAL_I2C_IsDeviceReady+0x44>
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	e0c5      	b.n	800c634 <HAL_I2C_IsDeviceReady+0x1d0>
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2224      	movs	r2, #36	@ 0x24
 800c4b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d107      	bne.n	800c4d6 <HAL_I2C_IsDeviceReady+0x72>
 800c4c6:	897b      	ldrh	r3, [r7, #10]
 800c4c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c4d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c4d4:	e006      	b.n	800c4e4 <HAL_I2C_IsDeviceReady+0x80>
 800c4d6:	897b      	ldrh	r3, [r7, #10]
 800c4d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c4e0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	6812      	ldr	r2, [r2, #0]
 800c4e8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800c4ea:	f7fe fac3 	bl	800aa74 <HAL_GetTick>
 800c4ee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	f003 0320 	and.w	r3, r3, #32
 800c4fa:	2b20      	cmp	r3, #32
 800c4fc:	bf0c      	ite	eq
 800c4fe:	2301      	moveq	r3, #1
 800c500:	2300      	movne	r3, #0
 800c502:	b2db      	uxtb	r3, r3
 800c504:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	f003 0310 	and.w	r3, r3, #16
 800c510:	2b10      	cmp	r3, #16
 800c512:	bf0c      	ite	eq
 800c514:	2301      	moveq	r3, #1
 800c516:	2300      	movne	r3, #0
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c51c:	e034      	b.n	800c588 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c524:	d01a      	beq.n	800c55c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c526:	f7fe faa5 	bl	800aa74 <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	429a      	cmp	r2, r3
 800c534:	d302      	bcc.n	800c53c <HAL_I2C_IsDeviceReady+0xd8>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10f      	bne.n	800c55c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2220      	movs	r2, #32
 800c540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c548:	f043 0220 	orr.w	r2, r3, #32
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	e06b      	b.n	800c634 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	f003 0320 	and.w	r3, r3, #32
 800c566:	2b20      	cmp	r3, #32
 800c568:	bf0c      	ite	eq
 800c56a:	2301      	moveq	r3, #1
 800c56c:	2300      	movne	r3, #0
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	f003 0310 	and.w	r3, r3, #16
 800c57c:	2b10      	cmp	r3, #16
 800c57e:	bf0c      	ite	eq
 800c580:	2301      	moveq	r3, #1
 800c582:	2300      	movne	r3, #0
 800c584:	b2db      	uxtb	r3, r3
 800c586:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c588:	7ffb      	ldrb	r3, [r7, #31]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d102      	bne.n	800c594 <HAL_I2C_IsDeviceReady+0x130>
 800c58e:	7fbb      	ldrb	r3, [r7, #30]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d0c4      	beq.n	800c51e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	f003 0310 	and.w	r3, r3, #16
 800c59e:	2b10      	cmp	r3, #16
 800c5a0:	d01a      	beq.n	800c5d8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	2120      	movs	r1, #32
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 fe9a 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e03b      	b.n	800c634 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2220      	movs	r2, #32
 800c5c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e02d      	b.n	800c634 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	2120      	movs	r1, #32
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f000 fe7f 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e020      	b.n	800c634 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2210      	movs	r2, #16
 800c5f8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2220      	movs	r2, #32
 800c600:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	3301      	adds	r3, #1
 800c606:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	f63f af56 	bhi.w	800c4be <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2220      	movs	r2, #32
 800c616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c61e:	f043 0220 	orr.w	r2, r3, #32
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e000      	b.n	800c634 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800c632:	2302      	movs	r3, #2
  }
}
 800c634:	4618      	mov	r0, r3
 800c636:	3720      	adds	r7, #32
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	4798      	blx	r3
  }
}
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00f      	beq.n	800c6b2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00a      	beq.n	800c6b2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6a0:	f043 0201 	orr.w	r2, r3, #1
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00f      	beq.n	800c6dc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00a      	beq.n	800c6dc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ca:	f043 0208 	orr.w	r2, r3, #8
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c6da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00f      	beq.n	800c706 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00a      	beq.n	800c706 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6f4:	f043 0202 	orr.w	r2, r3, #2
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c704:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c70a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f003 030b 	and.w	r3, r3, #11
 800c712:	2b00      	cmp	r3, #0
 800c714:	d003      	beq.n	800c71e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800c716:	68f9      	ldr	r1, [r7, #12]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fc8b 	bl	800d034 <I2C_ITError>
  }
}
 800c71e:	bf00      	nop
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c726:	b480      	push	{r7}
 800c728:	b083      	sub	sp, #12
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c72e:	bf00      	nop
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b083      	sub	sp, #12
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	460b      	mov	r3, r1
 800c758:	70fb      	strb	r3, [r7, #3]
 800c75a:	4613      	mov	r3, r2
 800c75c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c75e:	bf00      	nop
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c772:	bf00      	nop
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c77e:	b480      	push	{r7}
 800c780:	b083      	sub	sp, #12
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c786:	bf00      	nop
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr

0800c792 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c792:	b480      	push	{r7}
 800c794:	b083      	sub	sp, #12
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c79a:	bf00      	nop
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c7b4:	b2db      	uxtb	r3, r3
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b086      	sub	sp, #24
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	60f8      	str	r0, [r7, #12]
 800c7ca:	60b9      	str	r1, [r7, #8]
 800c7cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d101      	bne.n	800c7e6 <I2C_Slave_ISR_IT+0x24>
 800c7e2:	2302      	movs	r3, #2
 800c7e4:	e0e2      	b.n	800c9ac <I2C_Slave_ISR_IT+0x1ea>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	f003 0320 	and.w	r3, r3, #32
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d009      	beq.n	800c80c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d004      	beq.n	800c80c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c802:	6939      	ldr	r1, [r7, #16]
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f000 fa5d 	bl	800ccc4 <I2C_ITSlaveCplt>
 800c80a:	e0ca      	b.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	d04b      	beq.n	800c8ae <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d046      	beq.n	800c8ae <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c824:	b29b      	uxth	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d128      	bne.n	800c87c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b28      	cmp	r3, #40	@ 0x28
 800c834:	d108      	bne.n	800c848 <I2C_Slave_ISR_IT+0x86>
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c83c:	d104      	bne.n	800c848 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c83e:	6939      	ldr	r1, [r7, #16]
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 fba3 	bl	800cf8c <I2C_ITListenCplt>
 800c846:	e031      	b.n	800c8ac <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b29      	cmp	r3, #41	@ 0x29
 800c852:	d10e      	bne.n	800c872 <I2C_Slave_ISR_IT+0xb0>
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c85a:	d00a      	beq.n	800c872 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2210      	movs	r2, #16
 800c862:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 fcfc 	bl	800d262 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 f9ce 	bl	800cc0c <I2C_ITSlaveSeqCplt>
 800c870:	e01c      	b.n	800c8ac <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2210      	movs	r2, #16
 800c878:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c87a:	e08f      	b.n	800c99c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2210      	movs	r2, #16
 800c882:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c888:	f043 0204 	orr.w	r2, r3, #4
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <I2C_Slave_ISR_IT+0xdc>
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c89c:	d17e      	bne.n	800c99c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f000 fbc5 	bl	800d034 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c8aa:	e077      	b.n	800c99c <I2C_Slave_ISR_IT+0x1da>
 800c8ac:	e076      	b.n	800c99c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	f003 0304 	and.w	r3, r3, #4
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d02f      	beq.n	800c918 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d02a      	beq.n	800c918 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d018      	beq.n	800c8fe <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c902:	b29b      	uxth	r3, r3
 800c904:	2b00      	cmp	r3, #0
 800c906:	d14b      	bne.n	800c9a0 <I2C_Slave_ISR_IT+0x1de>
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c90e:	d047      	beq.n	800c9a0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 f97b 	bl	800cc0c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c916:	e043      	b.n	800c9a0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	f003 0308 	and.w	r3, r3, #8
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d009      	beq.n	800c936 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d004      	beq.n	800c936 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c92c:	6939      	ldr	r1, [r7, #16]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 f8e8 	bl	800cb04 <I2C_ITAddrCplt>
 800c934:	e035      	b.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f003 0302 	and.w	r3, r3, #2
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d030      	beq.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c946:	2b00      	cmp	r3, #0
 800c948:	d02b      	beq.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c94e:	b29b      	uxth	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	d018      	beq.n	800c986 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c96e:	b29b      	uxth	r3, r3
 800c970:	3b01      	subs	r3, #1
 800c972:	b29a      	uxth	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c97c:	3b01      	subs	r3, #1
 800c97e:	b29a      	uxth	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c984:	e00d      	b.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c98c:	d002      	beq.n	800c994 <I2C_Slave_ISR_IT+0x1d2>
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d106      	bne.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f000 f939 	bl	800cc0c <I2C_ITSlaveSeqCplt>
 800c99a:	e002      	b.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800c99c:	bf00      	nop
 800c99e:	e000      	b.n	800c9a2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800c9a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3718      	adds	r7, #24
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af02      	add	r7, sp, #8
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	4608      	mov	r0, r1
 800c9be:	4611      	mov	r1, r2
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	817b      	strh	r3, [r7, #10]
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	813b      	strh	r3, [r7, #8]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c9ce:	88fb      	ldrh	r3, [r7, #6]
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	8979      	ldrh	r1, [r7, #10]
 800c9d4:	4b20      	ldr	r3, [pc, #128]	@ (800ca58 <I2C_RequestMemoryWrite+0xa4>)
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f000 fe45 	bl	800d66c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9e2:	69fa      	ldr	r2, [r7, #28]
 800c9e4:	69b9      	ldr	r1, [r7, #24]
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f000 fcd6 	bl	800d398 <I2C_WaitOnTXISFlagUntilTimeout>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e02c      	b.n	800ca50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d105      	bne.n	800ca08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c9fc:	893b      	ldrh	r3, [r7, #8]
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	629a      	str	r2, [r3, #40]	@ 0x28
 800ca06:	e015      	b.n	800ca34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ca08:	893b      	ldrh	r3, [r7, #8]
 800ca0a:	0a1b      	lsrs	r3, r3, #8
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	69b9      	ldr	r1, [r7, #24]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 fcbc 	bl	800d398 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e012      	b.n	800ca50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca2a:	893b      	ldrh	r3, [r7, #8]
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2180      	movs	r1, #128	@ 0x80
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f000 fc51 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e000      	b.n	800ca50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	80002000 	.word	0x80002000

0800ca5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af02      	add	r7, sp, #8
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	4608      	mov	r0, r1
 800ca66:	4611      	mov	r1, r2
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	817b      	strh	r3, [r7, #10]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	813b      	strh	r3, [r7, #8]
 800ca72:	4613      	mov	r3, r2
 800ca74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ca76:	88fb      	ldrh	r3, [r7, #6]
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	8979      	ldrh	r1, [r7, #10]
 800ca7c:	4b20      	ldr	r3, [pc, #128]	@ (800cb00 <I2C_RequestMemoryRead+0xa4>)
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	2300      	movs	r3, #0
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f000 fdf2 	bl	800d66c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca88:	69fa      	ldr	r2, [r7, #28]
 800ca8a:	69b9      	ldr	r1, [r7, #24]
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 fc83 	bl	800d398 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e02c      	b.n	800caf6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ca9c:	88fb      	ldrh	r3, [r7, #6]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d105      	bne.n	800caae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800caa2:	893b      	ldrh	r3, [r7, #8]
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	629a      	str	r2, [r3, #40]	@ 0x28
 800caac:	e015      	b.n	800cada <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800caae:	893b      	ldrh	r3, [r7, #8]
 800cab0:	0a1b      	lsrs	r3, r3, #8
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cabc:	69fa      	ldr	r2, [r7, #28]
 800cabe:	69b9      	ldr	r1, [r7, #24]
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f000 fc69 	bl	800d398 <I2C_WaitOnTXISFlagUntilTimeout>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	e012      	b.n	800caf6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cad0:	893b      	ldrh	r3, [r7, #8]
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2200      	movs	r2, #0
 800cae2:	2140      	movs	r1, #64	@ 0x40
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 fbfe 	bl	800d2e6 <I2C_WaitOnFlagUntilTimeout>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	80002000 	.word	0x80002000

0800cb04 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cb1a:	2b28      	cmp	r3, #40	@ 0x28
 800cb1c:	d16a      	bne.n	800cbf4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	0c1b      	lsrs	r3, r3, #16
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	0c1b      	lsrs	r3, r3, #16
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800cb3c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb4a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800cb58:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d138      	bne.n	800cbd4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cb62:	897b      	ldrh	r3, [r7, #10]
 800cb64:	09db      	lsrs	r3, r3, #7
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	89bb      	ldrh	r3, [r7, #12]
 800cb6a:	4053      	eors	r3, r2
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	f003 0306 	and.w	r3, r3, #6
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d11c      	bne.n	800cbb0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cb76:	897b      	ldrh	r3, [r7, #10]
 800cb78:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d13b      	bne.n	800cc04 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2208      	movs	r2, #8
 800cb98:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cba2:	89ba      	ldrh	r2, [r7, #12]
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fdd0 	bl	800c74e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cbae:	e029      	b.n	800cc04 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800cbb0:	893b      	ldrh	r3, [r7, #8]
 800cbb2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cbb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fd89 	bl	800d6d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cbc6:	89ba      	ldrh	r2, [r7, #12]
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff fdbe 	bl	800c74e <HAL_I2C_AddrCallback>
}
 800cbd2:	e017      	b.n	800cc04 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cbd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 fd79 	bl	800d6d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cbe6:	89ba      	ldrh	r2, [r7, #12]
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff fdae 	bl	800c74e <HAL_I2C_AddrCallback>
}
 800cbf2:	e007      	b.n	800cc04 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800cc04:	bf00      	nop
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d008      	beq.n	800cc40 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	e00c      	b.n	800cc5a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d007      	beq.n	800cc5a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cc58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b29      	cmp	r3, #41	@ 0x29
 800cc64:	d112      	bne.n	800cc8c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2228      	movs	r2, #40	@ 0x28
 800cc6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2221      	movs	r2, #33	@ 0x21
 800cc72:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc74:	2101      	movs	r1, #1
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fd2a 	bl	800d6d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff fd4e 	bl	800c726 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc8a:	e017      	b.n	800ccbc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc96:	d111      	bne.n	800ccbc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2228      	movs	r2, #40	@ 0x28
 800cc9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2222      	movs	r2, #34	@ 0x22
 800cca4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cca6:	2102      	movs	r1, #2
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fd11 	bl	800d6d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fd3f 	bl	800c73a <HAL_I2C_SlaveRxCpltCallback>
}
 800ccbc:	bf00      	nop
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccde:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cce6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2220      	movs	r2, #32
 800ccee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	2b21      	cmp	r3, #33	@ 0x21
 800ccf4:	d002      	beq.n	800ccfc <I2C_ITSlaveCplt+0x38>
 800ccf6:	7afb      	ldrb	r3, [r7, #11]
 800ccf8:	2b29      	cmp	r3, #41	@ 0x29
 800ccfa:	d108      	bne.n	800cd0e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ccfc:	f248 0101 	movw	r1, #32769	@ 0x8001
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fce5 	bl	800d6d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2221      	movs	r2, #33	@ 0x21
 800cd0a:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd0c:	e019      	b.n	800cd42 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cd0e:	7afb      	ldrb	r3, [r7, #11]
 800cd10:	2b22      	cmp	r3, #34	@ 0x22
 800cd12:	d002      	beq.n	800cd1a <I2C_ITSlaveCplt+0x56>
 800cd14:	7afb      	ldrb	r3, [r7, #11]
 800cd16:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd18:	d108      	bne.n	800cd2c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cd1a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fcd6 	bl	800d6d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2222      	movs	r2, #34	@ 0x22
 800cd28:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd2a:	e00a      	b.n	800cd42 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cd2c:	7afb      	ldrb	r3, [r7, #11]
 800cd2e:	2b28      	cmp	r3, #40	@ 0x28
 800cd30:	d107      	bne.n	800cd42 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cd32:	f248 0103 	movw	r1, #32771	@ 0x8003
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fcca 	bl	800d6d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	685a      	ldr	r2, [r3, #4]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cd50:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6859      	ldr	r1, [r3, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	4b89      	ldr	r3, [pc, #548]	@ (800cf84 <I2C_ITSlaveCplt+0x2c0>)
 800cd5e:	400b      	ands	r3, r1
 800cd60:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fa7d 	bl	800d262 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d013      	beq.n	800cd9a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cd80:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01f      	beq.n	800cdca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cd98:	e017      	b.n	800cdca <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d012      	beq.n	800cdca <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cdb2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d006      	beq.n	800cdca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	f003 0304 	and.w	r3, r3, #4
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d020      	beq.n	800ce16 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	f023 0304 	bic.w	r3, r3, #4
 800cdda:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cde6:	b2d2      	uxtb	r2, r2
 800cde8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00c      	beq.n	800ce16 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce00:	3b01      	subs	r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce24:	f043 0204 	orr.w	r2, r3, #4
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f003 0310 	and.w	r3, r3, #16
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d049      	beq.n	800ceca <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d044      	beq.n	800ceca <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d128      	bne.n	800ce9c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b28      	cmp	r3, #40	@ 0x28
 800ce54:	d108      	bne.n	800ce68 <I2C_ITSlaveCplt+0x1a4>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce5c:	d104      	bne.n	800ce68 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ce5e:	6979      	ldr	r1, [r7, #20]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f893 	bl	800cf8c <I2C_ITListenCplt>
 800ce66:	e030      	b.n	800ceca <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b29      	cmp	r3, #41	@ 0x29
 800ce72:	d10e      	bne.n	800ce92 <I2C_ITSlaveCplt+0x1ce>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ce7a:	d00a      	beq.n	800ce92 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2210      	movs	r2, #16
 800ce82:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f9ec 	bl	800d262 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff febe 	bl	800cc0c <I2C_ITSlaveSeqCplt>
 800ce90:	e01b      	b.n	800ceca <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2210      	movs	r2, #16
 800ce98:	61da      	str	r2, [r3, #28]
 800ce9a:	e016      	b.n	800ceca <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2210      	movs	r2, #16
 800cea2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea8:	f043 0204 	orr.w	r2, r3, #4
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <I2C_ITSlaveCplt+0x1fa>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cebc:	d105      	bne.n	800ceca <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f8b5 	bl	800d034 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d010      	beq.n	800cf02 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cee4:	4619      	mov	r1, r3
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f8a4 	bl	800d034 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b28      	cmp	r3, #40	@ 0x28
 800cef6:	d141      	bne.n	800cf7c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cef8:	6979      	ldr	r1, [r7, #20]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f846 	bl	800cf8c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf00:	e03c      	b.n	800cf7c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cf0a:	d014      	beq.n	800cf36 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff fe7d 	bl	800cc0c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a1c      	ldr	r2, [pc, #112]	@ (800cf88 <I2C_ITSlaveCplt+0x2c4>)
 800cf16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2220      	movs	r2, #32
 800cf1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7ff fc1b 	bl	800c76a <HAL_I2C_ListenCpltCallback>
}
 800cf34:	e022      	b.n	800cf7c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b22      	cmp	r3, #34	@ 0x22
 800cf40:	d10e      	bne.n	800cf60 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2220      	movs	r2, #32
 800cf46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff fbee 	bl	800c73a <HAL_I2C_SlaveRxCpltCallback>
}
 800cf5e:	e00d      	b.n	800cf7c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2220      	movs	r2, #32
 800cf64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff fbd5 	bl	800c726 <HAL_I2C_SlaveTxCpltCallback>
}
 800cf7c:	bf00      	nop
 800cf7e:	3718      	adds	r7, #24
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	fe00e800 	.word	0xfe00e800
 800cf88:	ffff0000 	.word	0xffff0000

0800cf8c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a25      	ldr	r2, [pc, #148]	@ (800d030 <I2C_ITListenCplt+0xa4>)
 800cf9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	f003 0304 	and.w	r3, r3, #4
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d022      	beq.n	800d008 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfcc:	b2d2      	uxtb	r2, r2
 800cfce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd4:	1c5a      	adds	r2, r3, #1
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d012      	beq.n	800d008 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	3b01      	subs	r3, #1
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d000:	f043 0204 	orr.w	r2, r3, #4
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d008:	f248 0103 	movw	r1, #32771	@ 0x8003
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fb5f 	bl	800d6d0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2210      	movs	r2, #16
 800d018:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff fba1 	bl	800c76a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d028:	bf00      	nop
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	ffff0000 	.word	0xffff0000

0800d034 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d044:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4a6d      	ldr	r2, [pc, #436]	@ (800d208 <I2C_ITError+0x1d4>)
 800d052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	431a      	orrs	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d066:	7bfb      	ldrb	r3, [r7, #15]
 800d068:	2b28      	cmp	r3, #40	@ 0x28
 800d06a:	d005      	beq.n	800d078 <I2C_ITError+0x44>
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	2b29      	cmp	r3, #41	@ 0x29
 800d070:	d002      	beq.n	800d078 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d072:	7bfb      	ldrb	r3, [r7, #15]
 800d074:	2b2a      	cmp	r3, #42	@ 0x2a
 800d076:	d10b      	bne.n	800d090 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d078:	2103      	movs	r1, #3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fb28 	bl	800d6d0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2228      	movs	r2, #40	@ 0x28
 800d084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a60      	ldr	r2, [pc, #384]	@ (800d20c <I2C_ITError+0x1d8>)
 800d08c:	635a      	str	r2, [r3, #52]	@ 0x34
 800d08e:	e030      	b.n	800d0f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d090:	f248 0103 	movw	r1, #32771	@ 0x8003
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fb1b 	bl	800d6d0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f8e1 	bl	800d262 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2b60      	cmp	r3, #96	@ 0x60
 800d0aa:	d01f      	beq.n	800d0ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2220      	movs	r2, #32
 800d0b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	f003 0320 	and.w	r3, r3, #32
 800d0be:	2b20      	cmp	r3, #32
 800d0c0:	d114      	bne.n	800d0ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	699b      	ldr	r3, [r3, #24]
 800d0c8:	f003 0310 	and.w	r3, r3, #16
 800d0cc:	2b10      	cmp	r3, #16
 800d0ce:	d109      	bne.n	800d0e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2210      	movs	r2, #16
 800d0d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0dc:	f043 0204 	orr.w	r2, r3, #4
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2220      	movs	r2, #32
 800d0ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d039      	beq.n	800d174 <I2C_ITError+0x140>
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b11      	cmp	r3, #17
 800d104:	d002      	beq.n	800d10c <I2C_ITError+0xd8>
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b21      	cmp	r3, #33	@ 0x21
 800d10a:	d133      	bne.n	800d174 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d11a:	d107      	bne.n	800d12c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d12a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d130:	4618      	mov	r0, r3
 800d132:	f7fd fff4 	bl	800b11e <HAL_DMA_GetState>
 800d136:	4603      	mov	r3, r0
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d017      	beq.n	800d16c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d140:	4a33      	ldr	r2, [pc, #204]	@ (800d210 <I2C_ITError+0x1dc>)
 800d142:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d150:	4618      	mov	r0, r3
 800d152:	f7fd fece 	bl	800aef2 <HAL_DMA_Abort_IT>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d04d      	beq.n	800d1f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d166:	4610      	mov	r0, r2
 800d168:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d16a:	e045      	b.n	800d1f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f851 	bl	800d214 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d172:	e041      	b.n	800d1f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d039      	beq.n	800d1f0 <I2C_ITError+0x1bc>
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	2b12      	cmp	r3, #18
 800d180:	d002      	beq.n	800d188 <I2C_ITError+0x154>
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2b22      	cmp	r3, #34	@ 0x22
 800d186:	d133      	bne.n	800d1f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d196:	d107      	bne.n	800d1a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d1a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7fd ffb6 	bl	800b11e <HAL_DMA_GetState>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d017      	beq.n	800d1e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1bc:	4a14      	ldr	r2, [pc, #80]	@ (800d210 <I2C_ITError+0x1dc>)
 800d1be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fd fe90 	bl	800aef2 <HAL_DMA_Abort_IT>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d011      	beq.n	800d1fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1e6:	e009      	b.n	800d1fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f813 	bl	800d214 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1ee:	e005      	b.n	800d1fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f80f 	bl	800d214 <I2C_TreatErrorCallback>
  }
}
 800d1f6:	e002      	b.n	800d1fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d1f8:	bf00      	nop
 800d1fa:	e000      	b.n	800d1fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1fc:	bf00      	nop
}
 800d1fe:	bf00      	nop
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	ffff0000 	.word	0xffff0000
 800d20c:	0800c7c3 	.word	0x0800c7c3
 800d210:	0800d2ab 	.word	0x0800d2ab

0800d214 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b60      	cmp	r3, #96	@ 0x60
 800d226:	d10e      	bne.n	800d246 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2220      	movs	r2, #32
 800d22c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff faa7 	bl	800c792 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d244:	e009      	b.n	800d25a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fa92 	bl	800c77e <HAL_I2C_ErrorCallback>
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b02      	cmp	r3, #2
 800d276:	d103      	bne.n	800d280 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2200      	movs	r2, #0
 800d27e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	699b      	ldr	r3, [r3, #24]
 800d286:	f003 0301 	and.w	r3, r3, #1
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d007      	beq.n	800d29e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	699a      	ldr	r2, [r3, #24]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f042 0201 	orr.w	r2, r2, #1
 800d29c:	619a      	str	r2, [r3, #24]
  }
}
 800d29e:	bf00      	nop
 800d2a0:	370c      	adds	r7, #12
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d003      	beq.n	800d2c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f7ff ff9b 	bl	800d214 <I2C_TreatErrorCallback>
}
 800d2de:	bf00      	nop
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	60f8      	str	r0, [r7, #12]
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	603b      	str	r3, [r7, #0]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2f6:	e03b      	b.n	800d370 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2f8:	69ba      	ldr	r2, [r7, #24]
 800d2fa:	6839      	ldr	r1, [r7, #0]
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f000 f8d5 	bl	800d4ac <I2C_IsErrorOccurred>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e041      	b.n	800d390 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d312:	d02d      	beq.n	800d370 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d314:	f7fd fbae 	bl	800aa74 <HAL_GetTick>
 800d318:	4602      	mov	r2, r0
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d302      	bcc.n	800d32a <I2C_WaitOnFlagUntilTimeout+0x44>
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d122      	bne.n	800d370 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	699a      	ldr	r2, [r3, #24]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	4013      	ands	r3, r2
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	429a      	cmp	r2, r3
 800d338:	bf0c      	ite	eq
 800d33a:	2301      	moveq	r3, #1
 800d33c:	2300      	movne	r3, #0
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	461a      	mov	r2, r3
 800d342:	79fb      	ldrb	r3, [r7, #7]
 800d344:	429a      	cmp	r2, r3
 800d346:	d113      	bne.n	800d370 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d34c:	f043 0220 	orr.w	r2, r3, #32
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2220      	movs	r2, #32
 800d358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e00f      	b.n	800d390 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	699a      	ldr	r2, [r3, #24]
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	4013      	ands	r3, r2
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	bf0c      	ite	eq
 800d380:	2301      	moveq	r3, #1
 800d382:	2300      	movne	r3, #0
 800d384:	b2db      	uxtb	r3, r3
 800d386:	461a      	mov	r2, r3
 800d388:	79fb      	ldrb	r3, [r7, #7]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d0b4      	beq.n	800d2f8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d3a4:	e033      	b.n	800d40e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f000 f87e 	bl	800d4ac <I2C_IsErrorOccurred>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e031      	b.n	800d41e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c0:	d025      	beq.n	800d40e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3c2:	f7fd fb57 	bl	800aa74 <HAL_GetTick>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d302      	bcc.n	800d3d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d11a      	bne.n	800d40e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	f003 0302 	and.w	r3, r3, #2
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	d013      	beq.n	800d40e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ea:	f043 0220 	orr.w	r2, r3, #32
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2220      	movs	r2, #32
 800d3f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e007      	b.n	800d41e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	699b      	ldr	r3, [r3, #24]
 800d414:	f003 0302 	and.w	r3, r3, #2
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d1c4      	bne.n	800d3a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b084      	sub	sp, #16
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d432:	e02f      	b.n	800d494 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	68b9      	ldr	r1, [r7, #8]
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f000 f837 	bl	800d4ac <I2C_IsErrorOccurred>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e02d      	b.n	800d4a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d448:	f7fd fb14 	bl	800aa74 <HAL_GetTick>
 800d44c:	4602      	mov	r2, r0
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	429a      	cmp	r2, r3
 800d456:	d302      	bcc.n	800d45e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d11a      	bne.n	800d494 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	699b      	ldr	r3, [r3, #24]
 800d464:	f003 0320 	and.w	r3, r3, #32
 800d468:	2b20      	cmp	r3, #32
 800d46a:	d013      	beq.n	800d494 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d470:	f043 0220 	orr.w	r2, r3, #32
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2220      	movs	r2, #32
 800d47c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e007      	b.n	800d4a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	f003 0320 	and.w	r3, r3, #32
 800d49e:	2b20      	cmp	r3, #32
 800d4a0:	d1c8      	bne.n	800d434 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	@ 0x28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	f003 0310 	and.w	r3, r3, #16
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d068      	beq.n	800d5aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2210      	movs	r2, #16
 800d4de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d4e0:	e049      	b.n	800d576 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e8:	d045      	beq.n	800d576 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d4ea:	f7fd fac3 	bl	800aa74 <HAL_GetTick>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d302      	bcc.n	800d500 <I2C_IsErrorOccurred+0x54>
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d13a      	bne.n	800d576 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d50a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d512:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	699b      	ldr	r3, [r3, #24]
 800d51a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d51e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d522:	d121      	bne.n	800d568 <I2C_IsErrorOccurred+0xbc>
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d52a:	d01d      	beq.n	800d568 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d52c:	7cfb      	ldrb	r3, [r7, #19]
 800d52e:	2b20      	cmp	r3, #32
 800d530:	d01a      	beq.n	800d568 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	685a      	ldr	r2, [r3, #4]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d540:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d542:	f7fd fa97 	bl	800aa74 <HAL_GetTick>
 800d546:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d548:	e00e      	b.n	800d568 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d54a:	f7fd fa93 	bl	800aa74 <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	2b19      	cmp	r3, #25
 800d556:	d907      	bls.n	800d568 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d558:	6a3b      	ldr	r3, [r7, #32]
 800d55a:	f043 0320 	orr.w	r3, r3, #32
 800d55e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d566:	e006      	b.n	800d576 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	699b      	ldr	r3, [r3, #24]
 800d56e:	f003 0320 	and.w	r3, r3, #32
 800d572:	2b20      	cmp	r3, #32
 800d574:	d1e9      	bne.n	800d54a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	f003 0320 	and.w	r3, r3, #32
 800d580:	2b20      	cmp	r3, #32
 800d582:	d003      	beq.n	800d58c <I2C_IsErrorOccurred+0xe0>
 800d584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d0aa      	beq.n	800d4e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d58c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d590:	2b00      	cmp	r3, #0
 800d592:	d103      	bne.n	800d59c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2220      	movs	r2, #32
 800d59a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	f043 0304 	orr.w	r3, r3, #4
 800d5a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00b      	beq.n	800d5d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	f043 0301 	orr.w	r3, r3, #1
 800d5c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d5cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00b      	beq.n	800d5f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	f043 0308 	orr.w	r3, r3, #8
 800d5e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d5ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00b      	beq.n	800d618 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	f043 0302 	orr.w	r3, r3, #2
 800d606:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800d618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01c      	beq.n	800d65a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f7ff fe1e 	bl	800d262 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	6859      	ldr	r1, [r3, #4]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	4b0d      	ldr	r3, [pc, #52]	@ (800d668 <I2C_IsErrorOccurred+0x1bc>)
 800d632:	400b      	ands	r3, r1
 800d634:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	431a      	orrs	r2, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2220      	movs	r2, #32
 800d646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2200      	movs	r2, #0
 800d656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800d65a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3728      	adds	r7, #40	@ 0x28
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	fe00e800 	.word	0xfe00e800

0800d66c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	607b      	str	r3, [r7, #4]
 800d676:	460b      	mov	r3, r1
 800d678:	817b      	strh	r3, [r7, #10]
 800d67a:	4613      	mov	r3, r2
 800d67c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d67e:	897b      	ldrh	r3, [r7, #10]
 800d680:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d684:	7a7b      	ldrb	r3, [r7, #9]
 800d686:	041b      	lsls	r3, r3, #16
 800d688:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d68c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	4313      	orrs	r3, r2
 800d696:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d69a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	6a3b      	ldr	r3, [r7, #32]
 800d6a4:	0d5b      	lsrs	r3, r3, #21
 800d6a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800d6aa:	4b08      	ldr	r3, [pc, #32]	@ (800d6cc <I2C_TransferConfig+0x60>)
 800d6ac:	430b      	orrs	r3, r1
 800d6ae:	43db      	mvns	r3, r3
 800d6b0:	ea02 0103 	and.w	r1, r2, r3
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d6be:	bf00      	nop
 800d6c0:	371c      	adds	r7, #28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	03ff63ff 	.word	0x03ff63ff

0800d6d0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d6e0:	887b      	ldrh	r3, [r7, #2]
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00f      	beq.n	800d70a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800d6f0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d6fe:	2b28      	cmp	r3, #40	@ 0x28
 800d700:	d003      	beq.n	800d70a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800d708:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d70a:	887b      	ldrh	r3, [r7, #2]
 800d70c:	f003 0302 	and.w	r3, r3, #2
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00f      	beq.n	800d734 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800d71a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d722:	b2db      	uxtb	r3, r3
 800d724:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d728:	2b28      	cmp	r3, #40	@ 0x28
 800d72a:	d003      	beq.n	800d734 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800d732:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	da03      	bge.n	800d744 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800d742:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d744:	887b      	ldrh	r3, [r7, #2]
 800d746:	2b10      	cmp	r3, #16
 800d748:	d103      	bne.n	800d752 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800d750:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d752:	887b      	ldrh	r3, [r7, #2]
 800d754:	2b20      	cmp	r3, #32
 800d756:	d103      	bne.n	800d760 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f043 0320 	orr.w	r3, r3, #32
 800d75e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d760:	887b      	ldrh	r3, [r7, #2]
 800d762:	2b40      	cmp	r3, #64	@ 0x40
 800d764:	d103      	bne.n	800d76e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d76c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6819      	ldr	r1, [r3, #0]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	43da      	mvns	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	400a      	ands	r2, r1
 800d77e:	601a      	str	r2, [r3, #0]
}
 800d780:	bf00      	nop
 800d782:	3714      	adds	r7, #20
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	2b20      	cmp	r3, #32
 800d7a0:	d138      	bne.n	800d814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d101      	bne.n	800d7b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e032      	b.n	800d816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2224      	movs	r2, #36	@ 0x24
 800d7bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f022 0201 	bic.w	r2, r2, #1
 800d7ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d7de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6819      	ldr	r1, [r3, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	430a      	orrs	r2, r1
 800d7ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f042 0201 	orr.w	r2, r2, #1
 800d7fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2220      	movs	r2, #32
 800d804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	e000      	b.n	800d816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d814:	2302      	movs	r3, #2
  }
}
 800d816:	4618      	mov	r0, r3
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d822:	b480      	push	{r7}
 800d824:	b085      	sub	sp, #20
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b20      	cmp	r3, #32
 800d836:	d139      	bne.n	800d8ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d101      	bne.n	800d846 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d842:	2302      	movs	r3, #2
 800d844:	e033      	b.n	800d8ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2224      	movs	r2, #36	@ 0x24
 800d852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f022 0201 	bic.w	r2, r2, #1
 800d864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d874:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	4313      	orrs	r3, r2
 800d87e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f042 0201 	orr.w	r2, r2, #1
 800d896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2220      	movs	r2, #32
 800d89c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	e000      	b.n	800d8ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d8ac:	2302      	movs	r3, #2
  }
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
	...

0800d8bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d141      	bne.n	800d94e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d8ca:	4b4b      	ldr	r3, [pc, #300]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d8d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8d6:	d131      	bne.n	800d93c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d8d8:	4b47      	ldr	r3, [pc, #284]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8de:	4a46      	ldr	r2, [pc, #280]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d8e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d8e8:	4b43      	ldr	r3, [pc, #268]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d8f0:	4a41      	ldr	r2, [pc, #260]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d8f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d8f8:	4b40      	ldr	r3, [pc, #256]	@ (800d9fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2232      	movs	r2, #50	@ 0x32
 800d8fe:	fb02 f303 	mul.w	r3, r2, r3
 800d902:	4a3f      	ldr	r2, [pc, #252]	@ (800da00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d904:	fba2 2303 	umull	r2, r3, r2, r3
 800d908:	0c9b      	lsrs	r3, r3, #18
 800d90a:	3301      	adds	r3, #1
 800d90c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d90e:	e002      	b.n	800d916 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	3b01      	subs	r3, #1
 800d914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d916:	4b38      	ldr	r3, [pc, #224]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d918:	695b      	ldr	r3, [r3, #20]
 800d91a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d91e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d922:	d102      	bne.n	800d92a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1f2      	bne.n	800d910 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d92a:	4b33      	ldr	r3, [pc, #204]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d936:	d158      	bne.n	800d9ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d938:	2303      	movs	r3, #3
 800d93a:	e057      	b.n	800d9ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d93c:	4b2e      	ldr	r3, [pc, #184]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d942:	4a2d      	ldr	r2, [pc, #180]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d948:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d94c:	e04d      	b.n	800d9ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d954:	d141      	bne.n	800d9da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d956:	4b28      	ldr	r3, [pc, #160]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d95e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d962:	d131      	bne.n	800d9c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d964:	4b24      	ldr	r3, [pc, #144]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d96a:	4a23      	ldr	r2, [pc, #140]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d96c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d970:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d974:	4b20      	ldr	r3, [pc, #128]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d97c:	4a1e      	ldr	r2, [pc, #120]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d97e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d982:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d984:	4b1d      	ldr	r3, [pc, #116]	@ (800d9fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2232      	movs	r2, #50	@ 0x32
 800d98a:	fb02 f303 	mul.w	r3, r2, r3
 800d98e:	4a1c      	ldr	r2, [pc, #112]	@ (800da00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d990:	fba2 2303 	umull	r2, r3, r2, r3
 800d994:	0c9b      	lsrs	r3, r3, #18
 800d996:	3301      	adds	r3, #1
 800d998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d99a:	e002      	b.n	800d9a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d9a2:	4b15      	ldr	r3, [pc, #84]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9a4:	695b      	ldr	r3, [r3, #20]
 800d9a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9ae:	d102      	bne.n	800d9b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f2      	bne.n	800d99c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d9b6:	4b10      	ldr	r3, [pc, #64]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9b8:	695b      	ldr	r3, [r3, #20]
 800d9ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9c2:	d112      	bne.n	800d9ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	e011      	b.n	800d9ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9ce:	4a0a      	ldr	r2, [pc, #40]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d9d8:	e007      	b.n	800d9ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d9da:	4b07      	ldr	r3, [pc, #28]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d9e2:	4a05      	ldr	r2, [pc, #20]	@ (800d9f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d9e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr
 800d9f8:	40007000 	.word	0x40007000
 800d9fc:	20000078 	.word	0x20000078
 800da00:	431bde83 	.word	0x431bde83

0800da04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800da04:	b480      	push	{r7}
 800da06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800da08:	4b05      	ldr	r3, [pc, #20]	@ (800da20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	4a04      	ldr	r2, [pc, #16]	@ (800da20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800da0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da12:	6093      	str	r3, [r2, #8]
}
 800da14:	bf00      	nop
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	40007000 	.word	0x40007000

0800da24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b088      	sub	sp, #32
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e2fe      	b.n	800e034 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 0301 	and.w	r3, r3, #1
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d075      	beq.n	800db2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da42:	4b97      	ldr	r3, [pc, #604]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	f003 030c 	and.w	r3, r3, #12
 800da4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800da4c:	4b94      	ldr	r3, [pc, #592]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	f003 0303 	and.w	r3, r3, #3
 800da54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	2b0c      	cmp	r3, #12
 800da5a:	d102      	bne.n	800da62 <HAL_RCC_OscConfig+0x3e>
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2b03      	cmp	r3, #3
 800da60:	d002      	beq.n	800da68 <HAL_RCC_OscConfig+0x44>
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	2b08      	cmp	r3, #8
 800da66:	d10b      	bne.n	800da80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da68:	4b8d      	ldr	r3, [pc, #564]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d05b      	beq.n	800db2c <HAL_RCC_OscConfig+0x108>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d157      	bne.n	800db2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	e2d9      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da88:	d106      	bne.n	800da98 <HAL_RCC_OscConfig+0x74>
 800da8a:	4b85      	ldr	r3, [pc, #532]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a84      	ldr	r2, [pc, #528]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800da90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da94:	6013      	str	r3, [r2, #0]
 800da96:	e01d      	b.n	800dad4 <HAL_RCC_OscConfig+0xb0>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800daa0:	d10c      	bne.n	800dabc <HAL_RCC_OscConfig+0x98>
 800daa2:	4b7f      	ldr	r3, [pc, #508]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a7e      	ldr	r2, [pc, #504]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800daa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800daac:	6013      	str	r3, [r2, #0]
 800daae:	4b7c      	ldr	r3, [pc, #496]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a7b      	ldr	r2, [pc, #492]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dab8:	6013      	str	r3, [r2, #0]
 800daba:	e00b      	b.n	800dad4 <HAL_RCC_OscConfig+0xb0>
 800dabc:	4b78      	ldr	r3, [pc, #480]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a77      	ldr	r2, [pc, #476]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	4b75      	ldr	r3, [pc, #468]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a74      	ldr	r2, [pc, #464]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d013      	beq.n	800db04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dadc:	f7fc ffca 	bl	800aa74 <HAL_GetTick>
 800dae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dae2:	e008      	b.n	800daf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dae4:	f7fc ffc6 	bl	800aa74 <HAL_GetTick>
 800dae8:	4602      	mov	r2, r0
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	1ad3      	subs	r3, r2, r3
 800daee:	2b64      	cmp	r3, #100	@ 0x64
 800daf0:	d901      	bls.n	800daf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800daf2:	2303      	movs	r3, #3
 800daf4:	e29e      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800daf6:	4b6a      	ldr	r3, [pc, #424]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0f0      	beq.n	800dae4 <HAL_RCC_OscConfig+0xc0>
 800db02:	e014      	b.n	800db2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db04:	f7fc ffb6 	bl	800aa74 <HAL_GetTick>
 800db08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800db0a:	e008      	b.n	800db1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db0c:	f7fc ffb2 	bl	800aa74 <HAL_GetTick>
 800db10:	4602      	mov	r2, r0
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	2b64      	cmp	r3, #100	@ 0x64
 800db18:	d901      	bls.n	800db1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db1a:	2303      	movs	r3, #3
 800db1c:	e28a      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800db1e:	4b60      	ldr	r3, [pc, #384]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1f0      	bne.n	800db0c <HAL_RCC_OscConfig+0xe8>
 800db2a:	e000      	b.n	800db2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f003 0302 	and.w	r3, r3, #2
 800db36:	2b00      	cmp	r3, #0
 800db38:	d075      	beq.n	800dc26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db3a:	4b59      	ldr	r3, [pc, #356]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	f003 030c 	and.w	r3, r3, #12
 800db42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800db44:	4b56      	ldr	r3, [pc, #344]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	f003 0303 	and.w	r3, r3, #3
 800db4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	2b0c      	cmp	r3, #12
 800db52:	d102      	bne.n	800db5a <HAL_RCC_OscConfig+0x136>
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2b02      	cmp	r3, #2
 800db58:	d002      	beq.n	800db60 <HAL_RCC_OscConfig+0x13c>
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	2b04      	cmp	r3, #4
 800db5e:	d11f      	bne.n	800dba0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db60:	4b4f      	ldr	r3, [pc, #316]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d005      	beq.n	800db78 <HAL_RCC_OscConfig+0x154>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d101      	bne.n	800db78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800db74:	2301      	movs	r3, #1
 800db76:	e25d      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db78:	4b49      	ldr	r3, [pc, #292]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	061b      	lsls	r3, r3, #24
 800db86:	4946      	ldr	r1, [pc, #280]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800db88:	4313      	orrs	r3, r2
 800db8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800db8c:	4b45      	ldr	r3, [pc, #276]	@ (800dca4 <HAL_RCC_OscConfig+0x280>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4618      	mov	r0, r3
 800db92:	f7fc ff23 	bl	800a9dc <HAL_InitTick>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d043      	beq.n	800dc24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	e249      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d023      	beq.n	800dbf0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dba8:	4b3d      	ldr	r3, [pc, #244]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a3c      	ldr	r2, [pc, #240]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dbae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbb4:	f7fc ff5e 	bl	800aa74 <HAL_GetTick>
 800dbb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dbba:	e008      	b.n	800dbce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbbc:	f7fc ff5a 	bl	800aa74 <HAL_GetTick>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	1ad3      	subs	r3, r2, r3
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d901      	bls.n	800dbce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dbca:	2303      	movs	r3, #3
 800dbcc:	e232      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dbce:	4b34      	ldr	r3, [pc, #208]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0f0      	beq.n	800dbbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbda:	4b31      	ldr	r3, [pc, #196]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	061b      	lsls	r3, r3, #24
 800dbe8:	492d      	ldr	r1, [pc, #180]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dbea:	4313      	orrs	r3, r2
 800dbec:	604b      	str	r3, [r1, #4]
 800dbee:	e01a      	b.n	800dc26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dbf0:	4b2b      	ldr	r3, [pc, #172]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a2a      	ldr	r2, [pc, #168]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dbf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dbfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbfc:	f7fc ff3a 	bl	800aa74 <HAL_GetTick>
 800dc00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800dc02:	e008      	b.n	800dc16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc04:	f7fc ff36 	bl	800aa74 <HAL_GetTick>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d901      	bls.n	800dc16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e20e      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800dc16:	4b22      	ldr	r3, [pc, #136]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1f0      	bne.n	800dc04 <HAL_RCC_OscConfig+0x1e0>
 800dc22:	e000      	b.n	800dc26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f003 0308 	and.w	r3, r3, #8
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d041      	beq.n	800dcb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	695b      	ldr	r3, [r3, #20]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d01c      	beq.n	800dc74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc3a:	4b19      	ldr	r3, [pc, #100]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dc3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc40:	4a17      	ldr	r2, [pc, #92]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dc42:	f043 0301 	orr.w	r3, r3, #1
 800dc46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc4a:	f7fc ff13 	bl	800aa74 <HAL_GetTick>
 800dc4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dc50:	e008      	b.n	800dc64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc52:	f7fc ff0f 	bl	800aa74 <HAL_GetTick>
 800dc56:	4602      	mov	r2, r0
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	1ad3      	subs	r3, r2, r3
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d901      	bls.n	800dc64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dc60:	2303      	movs	r3, #3
 800dc62:	e1e7      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dc64:	4b0e      	ldr	r3, [pc, #56]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dc66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc6a:	f003 0302 	and.w	r3, r3, #2
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d0ef      	beq.n	800dc52 <HAL_RCC_OscConfig+0x22e>
 800dc72:	e020      	b.n	800dcb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc74:	4b0a      	ldr	r3, [pc, #40]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dc76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc7a:	4a09      	ldr	r2, [pc, #36]	@ (800dca0 <HAL_RCC_OscConfig+0x27c>)
 800dc7c:	f023 0301 	bic.w	r3, r3, #1
 800dc80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc84:	f7fc fef6 	bl	800aa74 <HAL_GetTick>
 800dc88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dc8a:	e00d      	b.n	800dca8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc8c:	f7fc fef2 	bl	800aa74 <HAL_GetTick>
 800dc90:	4602      	mov	r2, r0
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d906      	bls.n	800dca8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	e1ca      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
 800dc9e:	bf00      	nop
 800dca0:	40021000 	.word	0x40021000
 800dca4:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dca8:	4b8c      	ldr	r3, [pc, #560]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dcaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcae:	f003 0302 	and.w	r3, r3, #2
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1ea      	bne.n	800dc8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f003 0304 	and.w	r3, r3, #4
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f000 80a6 	beq.w	800de10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800dcc8:	4b84      	ldr	r3, [pc, #528]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dcca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d101      	bne.n	800dcd8 <HAL_RCC_OscConfig+0x2b4>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e000      	b.n	800dcda <HAL_RCC_OscConfig+0x2b6>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00d      	beq.n	800dcfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dcde:	4b7f      	ldr	r3, [pc, #508]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dce2:	4a7e      	ldr	r2, [pc, #504]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dce8:	6593      	str	r3, [r2, #88]	@ 0x58
 800dcea:	4b7c      	ldr	r3, [pc, #496]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dcec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dcf2:	60fb      	str	r3, [r7, #12]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dcfa:	4b79      	ldr	r3, [pc, #484]	@ (800dee0 <HAL_RCC_OscConfig+0x4bc>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d118      	bne.n	800dd38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dd06:	4b76      	ldr	r3, [pc, #472]	@ (800dee0 <HAL_RCC_OscConfig+0x4bc>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a75      	ldr	r2, [pc, #468]	@ (800dee0 <HAL_RCC_OscConfig+0x4bc>)
 800dd0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dd12:	f7fc feaf 	bl	800aa74 <HAL_GetTick>
 800dd16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd18:	e008      	b.n	800dd2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd1a:	f7fc feab 	bl	800aa74 <HAL_GetTick>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d901      	bls.n	800dd2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	e183      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd2c:	4b6c      	ldr	r3, [pc, #432]	@ (800dee0 <HAL_RCC_OscConfig+0x4bc>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d0f0      	beq.n	800dd1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d108      	bne.n	800dd52 <HAL_RCC_OscConfig+0x32e>
 800dd40:	4b66      	ldr	r3, [pc, #408]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd46:	4a65      	ldr	r2, [pc, #404]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd48:	f043 0301 	orr.w	r3, r3, #1
 800dd4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800dd50:	e024      	b.n	800dd9c <HAL_RCC_OscConfig+0x378>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	2b05      	cmp	r3, #5
 800dd58:	d110      	bne.n	800dd7c <HAL_RCC_OscConfig+0x358>
 800dd5a:	4b60      	ldr	r3, [pc, #384]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd60:	4a5e      	ldr	r2, [pc, #376]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd62:	f043 0304 	orr.w	r3, r3, #4
 800dd66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800dd6a:	4b5c      	ldr	r3, [pc, #368]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd70:	4a5a      	ldr	r2, [pc, #360]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd72:	f043 0301 	orr.w	r3, r3, #1
 800dd76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800dd7a:	e00f      	b.n	800dd9c <HAL_RCC_OscConfig+0x378>
 800dd7c:	4b57      	ldr	r3, [pc, #348]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd82:	4a56      	ldr	r2, [pc, #344]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd84:	f023 0301 	bic.w	r3, r3, #1
 800dd88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800dd8c:	4b53      	ldr	r3, [pc, #332]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd92:	4a52      	ldr	r2, [pc, #328]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dd94:	f023 0304 	bic.w	r3, r3, #4
 800dd98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d016      	beq.n	800ddd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dda4:	f7fc fe66 	bl	800aa74 <HAL_GetTick>
 800dda8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ddaa:	e00a      	b.n	800ddc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddac:	f7fc fe62 	bl	800aa74 <HAL_GetTick>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d901      	bls.n	800ddc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	e138      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ddc2:	4b46      	ldr	r3, [pc, #280]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800ddc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddc8:	f003 0302 	and.w	r3, r3, #2
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d0ed      	beq.n	800ddac <HAL_RCC_OscConfig+0x388>
 800ddd0:	e015      	b.n	800ddfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddd2:	f7fc fe4f 	bl	800aa74 <HAL_GetTick>
 800ddd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ddd8:	e00a      	b.n	800ddf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddda:	f7fc fe4b 	bl	800aa74 <HAL_GetTick>
 800ddde:	4602      	mov	r2, r0
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d901      	bls.n	800ddf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e121      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ddf0:	4b3a      	ldr	r3, [pc, #232]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800ddf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddf6:	f003 0302 	and.w	r3, r3, #2
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1ed      	bne.n	800ddda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ddfe:	7ffb      	ldrb	r3, [r7, #31]
 800de00:	2b01      	cmp	r3, #1
 800de02:	d105      	bne.n	800de10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800de04:	4b35      	ldr	r3, [pc, #212]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de08:	4a34      	ldr	r2, [pc, #208]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f003 0320 	and.w	r3, r3, #32
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d03c      	beq.n	800de96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	699b      	ldr	r3, [r3, #24]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d01c      	beq.n	800de5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800de24:	4b2d      	ldr	r3, [pc, #180]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de2a:	4a2c      	ldr	r2, [pc, #176]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de2c:	f043 0301 	orr.w	r3, r3, #1
 800de30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de34:	f7fc fe1e 	bl	800aa74 <HAL_GetTick>
 800de38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800de3a:	e008      	b.n	800de4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de3c:	f7fc fe1a 	bl	800aa74 <HAL_GetTick>
 800de40:	4602      	mov	r2, r0
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	2b02      	cmp	r3, #2
 800de48:	d901      	bls.n	800de4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e0f2      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800de4e:	4b23      	ldr	r3, [pc, #140]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de54:	f003 0302 	and.w	r3, r3, #2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0ef      	beq.n	800de3c <HAL_RCC_OscConfig+0x418>
 800de5c:	e01b      	b.n	800de96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800de5e:	4b1f      	ldr	r3, [pc, #124]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de64:	4a1d      	ldr	r2, [pc, #116]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de66:	f023 0301 	bic.w	r3, r3, #1
 800de6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de6e:	f7fc fe01 	bl	800aa74 <HAL_GetTick>
 800de72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800de74:	e008      	b.n	800de88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de76:	f7fc fdfd 	bl	800aa74 <HAL_GetTick>
 800de7a:	4602      	mov	r2, r0
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	2b02      	cmp	r3, #2
 800de82:	d901      	bls.n	800de88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800de84:	2303      	movs	r3, #3
 800de86:	e0d5      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800de88:	4b14      	ldr	r3, [pc, #80]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800de8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1ef      	bne.n	800de76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 80c9 	beq.w	800e032 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dea0:	4b0e      	ldr	r3, [pc, #56]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	f003 030c 	and.w	r3, r3, #12
 800dea8:	2b0c      	cmp	r3, #12
 800deaa:	f000 8083 	beq.w	800dfb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d15e      	bne.n	800df74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800deb6:	4b09      	ldr	r3, [pc, #36]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a08      	ldr	r2, [pc, #32]	@ (800dedc <HAL_RCC_OscConfig+0x4b8>)
 800debc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dec2:	f7fc fdd7 	bl	800aa74 <HAL_GetTick>
 800dec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dec8:	e00c      	b.n	800dee4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800deca:	f7fc fdd3 	bl	800aa74 <HAL_GetTick>
 800dece:	4602      	mov	r2, r0
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d905      	bls.n	800dee4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ded8:	2303      	movs	r3, #3
 800deda:	e0ab      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
 800dedc:	40021000 	.word	0x40021000
 800dee0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dee4:	4b55      	ldr	r3, [pc, #340]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1ec      	bne.n	800deca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800def0:	4b52      	ldr	r3, [pc, #328]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800def2:	68da      	ldr	r2, [r3, #12]
 800def4:	4b52      	ldr	r3, [pc, #328]	@ (800e040 <HAL_RCC_OscConfig+0x61c>)
 800def6:	4013      	ands	r3, r2
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6a11      	ldr	r1, [r2, #32]
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800df00:	3a01      	subs	r2, #1
 800df02:	0112      	lsls	r2, r2, #4
 800df04:	4311      	orrs	r1, r2
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800df0a:	0212      	lsls	r2, r2, #8
 800df0c:	4311      	orrs	r1, r2
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800df12:	0852      	lsrs	r2, r2, #1
 800df14:	3a01      	subs	r2, #1
 800df16:	0552      	lsls	r2, r2, #21
 800df18:	4311      	orrs	r1, r2
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800df1e:	0852      	lsrs	r2, r2, #1
 800df20:	3a01      	subs	r2, #1
 800df22:	0652      	lsls	r2, r2, #25
 800df24:	4311      	orrs	r1, r2
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800df2a:	06d2      	lsls	r2, r2, #27
 800df2c:	430a      	orrs	r2, r1
 800df2e:	4943      	ldr	r1, [pc, #268]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df30:	4313      	orrs	r3, r2
 800df32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df34:	4b41      	ldr	r3, [pc, #260]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a40      	ldr	r2, [pc, #256]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800df3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800df40:	4b3e      	ldr	r3, [pc, #248]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	4a3d      	ldr	r2, [pc, #244]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800df4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df4c:	f7fc fd92 	bl	800aa74 <HAL_GetTick>
 800df50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df52:	e008      	b.n	800df66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df54:	f7fc fd8e 	bl	800aa74 <HAL_GetTick>
 800df58:	4602      	mov	r2, r0
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	2b02      	cmp	r3, #2
 800df60:	d901      	bls.n	800df66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800df62:	2303      	movs	r3, #3
 800df64:	e066      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df66:	4b35      	ldr	r3, [pc, #212]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d0f0      	beq.n	800df54 <HAL_RCC_OscConfig+0x530>
 800df72:	e05e      	b.n	800e032 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df74:	4b31      	ldr	r3, [pc, #196]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a30      	ldr	r2, [pc, #192]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800df7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df80:	f7fc fd78 	bl	800aa74 <HAL_GetTick>
 800df84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800df86:	e008      	b.n	800df9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df88:	f7fc fd74 	bl	800aa74 <HAL_GetTick>
 800df8c:	4602      	mov	r2, r0
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	2b02      	cmp	r3, #2
 800df94:	d901      	bls.n	800df9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800df96:	2303      	movs	r3, #3
 800df98:	e04c      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800df9a:	4b28      	ldr	r3, [pc, #160]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1f0      	bne.n	800df88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800dfa6:	4b25      	ldr	r3, [pc, #148]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800dfa8:	68da      	ldr	r2, [r3, #12]
 800dfaa:	4924      	ldr	r1, [pc, #144]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800dfac:	4b25      	ldr	r3, [pc, #148]	@ (800e044 <HAL_RCC_OscConfig+0x620>)
 800dfae:	4013      	ands	r3, r2
 800dfb0:	60cb      	str	r3, [r1, #12]
 800dfb2:	e03e      	b.n	800e032 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	69db      	ldr	r3, [r3, #28]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d101      	bne.n	800dfc0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e039      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dfc0:	4b1e      	ldr	r3, [pc, #120]	@ (800e03c <HAL_RCC_OscConfig+0x618>)
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	f003 0203 	and.w	r2, r3, #3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d12c      	bne.n	800e02e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d123      	bne.n	800e02e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d11b      	bne.n	800e02e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e000:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800e002:	429a      	cmp	r2, r3
 800e004:	d113      	bne.n	800e02e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e010:	085b      	lsrs	r3, r3, #1
 800e012:	3b01      	subs	r3, #1
 800e014:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e016:	429a      	cmp	r2, r3
 800e018:	d109      	bne.n	800e02e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e024:	085b      	lsrs	r3, r3, #1
 800e026:	3b01      	subs	r3, #1
 800e028:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d001      	beq.n	800e032 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	e000      	b.n	800e034 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800e032:	2300      	movs	r3, #0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3720      	adds	r7, #32
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	40021000 	.word	0x40021000
 800e040:	019f800c 	.word	0x019f800c
 800e044:	feeefffc 	.word	0xfeeefffc

0800e048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800e052:	2300      	movs	r3, #0
 800e054:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e11e      	b.n	800e29e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e060:	4b91      	ldr	r3, [pc, #580]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f003 030f 	and.w	r3, r3, #15
 800e068:	683a      	ldr	r2, [r7, #0]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d910      	bls.n	800e090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e06e:	4b8e      	ldr	r3, [pc, #568]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f023 020f 	bic.w	r2, r3, #15
 800e076:	498c      	ldr	r1, [pc, #560]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e07e:	4b8a      	ldr	r3, [pc, #552]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f003 030f 	and.w	r3, r3, #15
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d001      	beq.n	800e090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	e106      	b.n	800e29e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d073      	beq.n	800e184 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d129      	bne.n	800e0f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e0a4:	4b81      	ldr	r3, [pc, #516]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d101      	bne.n	800e0b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e0f4      	b.n	800e29e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800e0b4:	f000 f99e 	bl	800e3f4 <RCC_GetSysClockFreqFromPLLSource>
 800e0b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	4a7c      	ldr	r2, [pc, #496]	@ (800e2b0 <HAL_RCC_ClockConfig+0x268>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d93f      	bls.n	800e142 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e0c2:	4b7a      	ldr	r3, [pc, #488]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d009      	beq.n	800e0e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d033      	beq.n	800e142 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d12f      	bne.n	800e142 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e0e2:	4b72      	ldr	r3, [pc, #456]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e0ea:	4a70      	ldr	r2, [pc, #448]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e0ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800e0f2:	2380      	movs	r3, #128	@ 0x80
 800e0f4:	617b      	str	r3, [r7, #20]
 800e0f6:	e024      	b.n	800e142 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d107      	bne.n	800e110 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e100:	4b6a      	ldr	r3, [pc, #424]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d109      	bne.n	800e120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e0c6      	b.n	800e29e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e110:	4b66      	ldr	r3, [pc, #408]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	e0be      	b.n	800e29e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800e120:	f000 f8ce 	bl	800e2c0 <HAL_RCC_GetSysClockFreq>
 800e124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	4a61      	ldr	r2, [pc, #388]	@ (800e2b0 <HAL_RCC_ClockConfig+0x268>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d909      	bls.n	800e142 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e12e:	4b5f      	ldr	r3, [pc, #380]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e136:	4a5d      	ldr	r2, [pc, #372]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e13c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800e13e:	2380      	movs	r3, #128	@ 0x80
 800e140:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e142:	4b5a      	ldr	r3, [pc, #360]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	f023 0203 	bic.w	r2, r3, #3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	4957      	ldr	r1, [pc, #348]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e150:	4313      	orrs	r3, r2
 800e152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e154:	f7fc fc8e 	bl	800aa74 <HAL_GetTick>
 800e158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e15a:	e00a      	b.n	800e172 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e15c:	f7fc fc8a 	bl	800aa74 <HAL_GetTick>
 800e160:	4602      	mov	r2, r0
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d901      	bls.n	800e172 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e095      	b.n	800e29e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e172:	4b4e      	ldr	r3, [pc, #312]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	f003 020c 	and.w	r2, r3, #12
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	429a      	cmp	r2, r3
 800e182:	d1eb      	bne.n	800e15c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f003 0302 	and.w	r3, r3, #2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d023      	beq.n	800e1d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f003 0304 	and.w	r3, r3, #4
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e19c:	4b43      	ldr	r3, [pc, #268]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	4a42      	ldr	r2, [pc, #264]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e1a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800e1a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f003 0308 	and.w	r3, r3, #8
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d007      	beq.n	800e1c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800e1b4:	4b3d      	ldr	r3, [pc, #244]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e1bc:	4a3b      	ldr	r2, [pc, #236]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e1be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800e1c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1c4:	4b39      	ldr	r3, [pc, #228]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	4936      	ldr	r1, [pc, #216]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	608b      	str	r3, [r1, #8]
 800e1d6:	e008      	b.n	800e1ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	2b80      	cmp	r3, #128	@ 0x80
 800e1dc:	d105      	bne.n	800e1ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e1de:	4b33      	ldr	r3, [pc, #204]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	4a32      	ldr	r2, [pc, #200]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e1e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e1e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f003 030f 	and.w	r3, r3, #15
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d21d      	bcs.n	800e234 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e1f8:	4b2b      	ldr	r3, [pc, #172]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f023 020f 	bic.w	r2, r3, #15
 800e200:	4929      	ldr	r1, [pc, #164]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	4313      	orrs	r3, r2
 800e206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e208:	f7fc fc34 	bl	800aa74 <HAL_GetTick>
 800e20c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e20e:	e00a      	b.n	800e226 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e210:	f7fc fc30 	bl	800aa74 <HAL_GetTick>
 800e214:	4602      	mov	r2, r0
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e21e:	4293      	cmp	r3, r2
 800e220:	d901      	bls.n	800e226 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800e222:	2303      	movs	r3, #3
 800e224:	e03b      	b.n	800e29e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e226:	4b20      	ldr	r3, [pc, #128]	@ (800e2a8 <HAL_RCC_ClockConfig+0x260>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f003 030f 	and.w	r3, r3, #15
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	429a      	cmp	r2, r3
 800e232:	d1ed      	bne.n	800e210 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f003 0304 	and.w	r3, r3, #4
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d008      	beq.n	800e252 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e240:	4b1a      	ldr	r3, [pc, #104]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	4917      	ldr	r1, [pc, #92]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e24e:	4313      	orrs	r3, r2
 800e250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f003 0308 	and.w	r3, r3, #8
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d009      	beq.n	800e272 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e25e:	4b13      	ldr	r3, [pc, #76]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	00db      	lsls	r3, r3, #3
 800e26c:	490f      	ldr	r1, [pc, #60]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e26e:	4313      	orrs	r3, r2
 800e270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e272:	f000 f825 	bl	800e2c0 <HAL_RCC_GetSysClockFreq>
 800e276:	4602      	mov	r2, r0
 800e278:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ac <HAL_RCC_ClockConfig+0x264>)
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	091b      	lsrs	r3, r3, #4
 800e27e:	f003 030f 	and.w	r3, r3, #15
 800e282:	490c      	ldr	r1, [pc, #48]	@ (800e2b4 <HAL_RCC_ClockConfig+0x26c>)
 800e284:	5ccb      	ldrb	r3, [r1, r3]
 800e286:	f003 031f 	and.w	r3, r3, #31
 800e28a:	fa22 f303 	lsr.w	r3, r2, r3
 800e28e:	4a0a      	ldr	r2, [pc, #40]	@ (800e2b8 <HAL_RCC_ClockConfig+0x270>)
 800e290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e292:	4b0a      	ldr	r3, [pc, #40]	@ (800e2bc <HAL_RCC_ClockConfig+0x274>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4618      	mov	r0, r3
 800e298:	f7fc fba0 	bl	800a9dc <HAL_InitTick>
 800e29c:	4603      	mov	r3, r0
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	40022000 	.word	0x40022000
 800e2ac:	40021000 	.word	0x40021000
 800e2b0:	04c4b400 	.word	0x04c4b400
 800e2b4:	080193b0 	.word	0x080193b0
 800e2b8:	20000078 	.word	0x20000078
 800e2bc:	2000007c 	.word	0x2000007c

0800e2c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e2c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	f003 030c 	and.w	r3, r3, #12
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	d102      	bne.n	800e2d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e2d2:	4b2a      	ldr	r3, [pc, #168]	@ (800e37c <HAL_RCC_GetSysClockFreq+0xbc>)
 800e2d4:	613b      	str	r3, [r7, #16]
 800e2d6:	e047      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e2d8:	4b27      	ldr	r3, [pc, #156]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e2da:	689b      	ldr	r3, [r3, #8]
 800e2dc:	f003 030c 	and.w	r3, r3, #12
 800e2e0:	2b08      	cmp	r3, #8
 800e2e2:	d102      	bne.n	800e2ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e2e4:	4b26      	ldr	r3, [pc, #152]	@ (800e380 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e2e6:	613b      	str	r3, [r7, #16]
 800e2e8:	e03e      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800e2ea:	4b23      	ldr	r3, [pc, #140]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	f003 030c 	and.w	r3, r3, #12
 800e2f2:	2b0c      	cmp	r3, #12
 800e2f4:	d136      	bne.n	800e364 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e2f6:	4b20      	ldr	r3, [pc, #128]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	f003 0303 	and.w	r3, r3, #3
 800e2fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e300:	4b1d      	ldr	r3, [pc, #116]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	091b      	lsrs	r3, r3, #4
 800e306:	f003 030f 	and.w	r3, r3, #15
 800e30a:	3301      	adds	r3, #1
 800e30c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2b03      	cmp	r3, #3
 800e312:	d10c      	bne.n	800e32e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e314:	4a1a      	ldr	r2, [pc, #104]	@ (800e380 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	fbb2 f3f3 	udiv	r3, r2, r3
 800e31c:	4a16      	ldr	r2, [pc, #88]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e31e:	68d2      	ldr	r2, [r2, #12]
 800e320:	0a12      	lsrs	r2, r2, #8
 800e322:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e326:	fb02 f303 	mul.w	r3, r2, r3
 800e32a:	617b      	str	r3, [r7, #20]
      break;
 800e32c:	e00c      	b.n	800e348 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e32e:	4a13      	ldr	r2, [pc, #76]	@ (800e37c <HAL_RCC_GetSysClockFreq+0xbc>)
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	fbb2 f3f3 	udiv	r3, r2, r3
 800e336:	4a10      	ldr	r2, [pc, #64]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e338:	68d2      	ldr	r2, [r2, #12]
 800e33a:	0a12      	lsrs	r2, r2, #8
 800e33c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e340:	fb02 f303 	mul.w	r3, r2, r3
 800e344:	617b      	str	r3, [r7, #20]
      break;
 800e346:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e348:	4b0b      	ldr	r3, [pc, #44]	@ (800e378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	0e5b      	lsrs	r3, r3, #25
 800e34e:	f003 0303 	and.w	r3, r3, #3
 800e352:	3301      	adds	r3, #1
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800e358:	697a      	ldr	r2, [r7, #20]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e360:	613b      	str	r3, [r7, #16]
 800e362:	e001      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e364:	2300      	movs	r3, #0
 800e366:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e368:	693b      	ldr	r3, [r7, #16]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	371c      	adds	r7, #28
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr
 800e376:	bf00      	nop
 800e378:	40021000 	.word	0x40021000
 800e37c:	00f42400 	.word	0x00f42400
 800e380:	007a1200 	.word	0x007a1200

0800e384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e388:	4b03      	ldr	r3, [pc, #12]	@ (800e398 <HAL_RCC_GetHCLKFreq+0x14>)
 800e38a:	681b      	ldr	r3, [r3, #0]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	20000078 	.word	0x20000078

0800e39c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e3a0:	f7ff fff0 	bl	800e384 <HAL_RCC_GetHCLKFreq>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	4b06      	ldr	r3, [pc, #24]	@ (800e3c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	0a1b      	lsrs	r3, r3, #8
 800e3ac:	f003 0307 	and.w	r3, r3, #7
 800e3b0:	4904      	ldr	r1, [pc, #16]	@ (800e3c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e3b2:	5ccb      	ldrb	r3, [r1, r3]
 800e3b4:	f003 031f 	and.w	r3, r3, #31
 800e3b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	40021000 	.word	0x40021000
 800e3c4:	080193c0 	.word	0x080193c0

0800e3c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e3cc:	f7ff ffda 	bl	800e384 <HAL_RCC_GetHCLKFreq>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	4b06      	ldr	r3, [pc, #24]	@ (800e3ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	0adb      	lsrs	r3, r3, #11
 800e3d8:	f003 0307 	and.w	r3, r3, #7
 800e3dc:	4904      	ldr	r1, [pc, #16]	@ (800e3f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e3de:	5ccb      	ldrb	r3, [r1, r3]
 800e3e0:	f003 031f 	and.w	r3, r3, #31
 800e3e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	40021000 	.word	0x40021000
 800e3f0:	080193c0 	.word	0x080193c0

0800e3f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b087      	sub	sp, #28
 800e3f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e3fa:	4b1e      	ldr	r3, [pc, #120]	@ (800e474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	f003 0303 	and.w	r3, r3, #3
 800e402:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e404:	4b1b      	ldr	r3, [pc, #108]	@ (800e474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	091b      	lsrs	r3, r3, #4
 800e40a:	f003 030f 	and.w	r3, r3, #15
 800e40e:	3301      	adds	r3, #1
 800e410:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2b03      	cmp	r3, #3
 800e416:	d10c      	bne.n	800e432 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e418:	4a17      	ldr	r2, [pc, #92]	@ (800e478 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e420:	4a14      	ldr	r2, [pc, #80]	@ (800e474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e422:	68d2      	ldr	r2, [r2, #12]
 800e424:	0a12      	lsrs	r2, r2, #8
 800e426:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e42a:	fb02 f303 	mul.w	r3, r2, r3
 800e42e:	617b      	str	r3, [r7, #20]
    break;
 800e430:	e00c      	b.n	800e44c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e432:	4a12      	ldr	r2, [pc, #72]	@ (800e47c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	fbb2 f3f3 	udiv	r3, r2, r3
 800e43a:	4a0e      	ldr	r2, [pc, #56]	@ (800e474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e43c:	68d2      	ldr	r2, [r2, #12]
 800e43e:	0a12      	lsrs	r2, r2, #8
 800e440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e444:	fb02 f303 	mul.w	r3, r2, r3
 800e448:	617b      	str	r3, [r7, #20]
    break;
 800e44a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e44c:	4b09      	ldr	r3, [pc, #36]	@ (800e474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	0e5b      	lsrs	r3, r3, #25
 800e452:	f003 0303 	and.w	r3, r3, #3
 800e456:	3301      	adds	r3, #1
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	fbb2 f3f3 	udiv	r3, r2, r3
 800e464:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e466:	687b      	ldr	r3, [r7, #4]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	371c      	adds	r7, #28
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr
 800e474:	40021000 	.word	0x40021000
 800e478:	007a1200 	.word	0x007a1200
 800e47c:	00f42400 	.word	0x00f42400

0800e480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e488:	2300      	movs	r3, #0
 800e48a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e48c:	2300      	movs	r3, #0
 800e48e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 8098 	beq.w	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e4a2:	4b43      	ldr	r3, [pc, #268]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10d      	bne.n	800e4ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e4ae:	4b40      	ldr	r3, [pc, #256]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4b2:	4a3f      	ldr	r2, [pc, #252]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800e4ba:	4b3d      	ldr	r3, [pc, #244]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e4c2:	60bb      	str	r3, [r7, #8]
 800e4c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e4ca:	4b3a      	ldr	r3, [pc, #232]	@ (800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a39      	ldr	r2, [pc, #228]	@ (800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e4d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e4d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e4d6:	f7fc facd 	bl	800aa74 <HAL_GetTick>
 800e4da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e4dc:	e009      	b.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e4de:	f7fc fac9 	bl	800aa74 <HAL_GetTick>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	d902      	bls.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e4ec:	2303      	movs	r3, #3
 800e4ee:	74fb      	strb	r3, [r7, #19]
        break;
 800e4f0:	e005      	b.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e4f2:	4b30      	ldr	r3, [pc, #192]	@ (800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d0ef      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e4fe:	7cfb      	ldrb	r3, [r7, #19]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d159      	bne.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e504:	4b2a      	ldr	r3, [pc, #168]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e50a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e50e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d01e      	beq.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d019      	beq.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e520:	4b23      	ldr	r3, [pc, #140]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e52a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e52c:	4b20      	ldr	r3, [pc, #128]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e532:	4a1f      	ldr	r2, [pc, #124]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e53c:	4b1c      	ldr	r3, [pc, #112]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e542:	4a1b      	ldr	r2, [pc, #108]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e54c:	4a18      	ldr	r2, [pc, #96]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	f003 0301 	and.w	r3, r3, #1
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d016      	beq.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e55e:	f7fc fa89 	bl	800aa74 <HAL_GetTick>
 800e562:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e564:	e00b      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e566:	f7fc fa85 	bl	800aa74 <HAL_GetTick>
 800e56a:	4602      	mov	r2, r0
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e574:	4293      	cmp	r3, r2
 800e576:	d902      	bls.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e578:	2303      	movs	r3, #3
 800e57a:	74fb      	strb	r3, [r7, #19]
            break;
 800e57c:	e006      	b.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e57e:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e584:	f003 0302 	and.w	r3, r3, #2
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d0ec      	beq.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e58c:	7cfb      	ldrb	r3, [r7, #19]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d10b      	bne.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e592:	4b07      	ldr	r3, [pc, #28]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5a0:	4903      	ldr	r1, [pc, #12]	@ (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800e5a8:	e008      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e5aa:	7cfb      	ldrb	r3, [r7, #19]
 800e5ac:	74bb      	strb	r3, [r7, #18]
 800e5ae:	e005      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e5b0:	40021000 	.word	0x40021000
 800e5b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5b8:	7cfb      	ldrb	r3, [r7, #19]
 800e5ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e5bc:	7c7b      	ldrb	r3, [r7, #17]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d105      	bne.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e5c2:	4ba7      	ldr	r3, [pc, #668]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5c6:	4aa6      	ldr	r2, [pc, #664]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00a      	beq.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e5da:	4ba1      	ldr	r3, [pc, #644]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5e0:	f023 0203 	bic.w	r2, r3, #3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	499d      	ldr	r1, [pc, #628]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 0302 	and.w	r3, r3, #2
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00a      	beq.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e5fc:	4b98      	ldr	r3, [pc, #608]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e602:	f023 020c 	bic.w	r2, r3, #12
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	4995      	ldr	r1, [pc, #596]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e60c:	4313      	orrs	r3, r2
 800e60e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f003 0304 	and.w	r3, r3, #4
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00a      	beq.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e61e:	4b90      	ldr	r3, [pc, #576]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e624:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	498c      	ldr	r1, [pc, #560]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e62e:	4313      	orrs	r3, r2
 800e630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f003 0308 	and.w	r3, r3, #8
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00a      	beq.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e640:	4b87      	ldr	r3, [pc, #540]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e646:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	4984      	ldr	r1, [pc, #528]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e650:	4313      	orrs	r3, r2
 800e652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f003 0310 	and.w	r3, r3, #16
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00a      	beq.n	800e678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e662:	4b7f      	ldr	r3, [pc, #508]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e668:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	497b      	ldr	r1, [pc, #492]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e672:	4313      	orrs	r3, r2
 800e674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f003 0320 	and.w	r3, r3, #32
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00a      	beq.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e684:	4b76      	ldr	r3, [pc, #472]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e68a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	4973      	ldr	r1, [pc, #460]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e694:	4313      	orrs	r3, r2
 800e696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00a      	beq.n	800e6bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e6a6:	4b6e      	ldr	r3, [pc, #440]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	69db      	ldr	r3, [r3, #28]
 800e6b4:	496a      	ldr	r1, [pc, #424]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00a      	beq.n	800e6de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e6c8:	4b65      	ldr	r3, [pc, #404]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a1b      	ldr	r3, [r3, #32]
 800e6d6:	4962      	ldr	r1, [pc, #392]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e6ea:	4b5d      	ldr	r3, [pc, #372]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f8:	4959      	ldr	r1, [pc, #356]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00a      	beq.n	800e722 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e70c:	4b54      	ldr	r3, [pc, #336]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e70e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e712:	f023 0203 	bic.w	r2, r3, #3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e71a:	4951      	ldr	r1, [pc, #324]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e71c:	4313      	orrs	r3, r2
 800e71e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00a      	beq.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e72e:	4b4c      	ldr	r3, [pc, #304]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e73c:	4948      	ldr	r1, [pc, #288]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e73e:	4313      	orrs	r3, r2
 800e740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d015      	beq.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e750:	4b43      	ldr	r3, [pc, #268]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e75e:	4940      	ldr	r1, [pc, #256]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e760:	4313      	orrs	r3, r2
 800e762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e76a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e76e:	d105      	bne.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e770:	4b3b      	ldr	r3, [pc, #236]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	4a3a      	ldr	r2, [pc, #232]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e77a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e784:	2b00      	cmp	r3, #0
 800e786:	d015      	beq.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e788:	4b35      	ldr	r3, [pc, #212]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e78e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e796:	4932      	ldr	r1, [pc, #200]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e798:	4313      	orrs	r3, r2
 800e79a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e7a6:	d105      	bne.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e7a8:	4b2d      	ldr	r3, [pc, #180]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	4a2c      	ldr	r2, [pc, #176]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d015      	beq.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e7c0:	4b27      	ldr	r3, [pc, #156]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ce:	4924      	ldr	r1, [pc, #144]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e7de:	d105      	bne.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e7e0:	4b1f      	ldr	r3, [pc, #124]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	4a1e      	ldr	r2, [pc, #120]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d015      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e7f8:	4b19      	ldr	r3, [pc, #100]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e806:	4916      	ldr	r1, [pc, #88]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e808:	4313      	orrs	r3, r2
 800e80a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e816:	d105      	bne.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e818:	4b11      	ldr	r3, [pc, #68]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	4a10      	ldr	r2, [pc, #64]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e81e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e822:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d019      	beq.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e830:	4b0b      	ldr	r3, [pc, #44]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e83e:	4908      	ldr	r1, [pc, #32]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e840:	4313      	orrs	r3, r2
 800e842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e84a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e84e:	d109      	bne.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e850:	4b03      	ldr	r3, [pc, #12]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	4a02      	ldr	r2, [pc, #8]	@ (800e860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e85a:	60d3      	str	r3, [r2, #12]
 800e85c:	e002      	b.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e85e:	bf00      	nop
 800e860:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d015      	beq.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e870:	4b29      	ldr	r3, [pc, #164]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e876:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e87e:	4926      	ldr	r1, [pc, #152]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e880:	4313      	orrs	r3, r2
 800e882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e88a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e88e:	d105      	bne.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e890:	4b21      	ldr	r3, [pc, #132]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	4a20      	ldr	r2, [pc, #128]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e89a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d015      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e8a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8b6:	4918      	ldr	r1, [pc, #96]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8c6:	d105      	bne.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e8c8:	4b13      	ldr	r3, [pc, #76]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	4a12      	ldr	r2, [pc, #72]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e8ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e8d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d015      	beq.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e8e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e8e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e8e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8ee:	490a      	ldr	r1, [pc, #40]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8fe:	d105      	bne.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e900:	4b05      	ldr	r3, [pc, #20]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	4a04      	ldr	r2, [pc, #16]	@ (800e918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e90a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e90c:	7cbb      	ldrb	r3, [r7, #18]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3718      	adds	r7, #24
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	40021000 	.word	0x40021000

0800e91c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d101      	bne.n	800e92e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e92a:	2301      	movs	r3, #1
 800e92c:	e09d      	b.n	800ea6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e932:	2b00      	cmp	r3, #0
 800e934:	d108      	bne.n	800e948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e93e:	d009      	beq.n	800e954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	61da      	str	r2, [r3, #28]
 800e946:	e005      	b.n	800e954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b00      	cmp	r3, #0
 800e964:	d106      	bne.n	800e974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2200      	movs	r2, #0
 800e96a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7fa ff32 	bl	80097d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e98a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e994:	d902      	bls.n	800e99c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e996:	2300      	movs	r3, #0
 800e998:	60fb      	str	r3, [r7, #12]
 800e99a:	e002      	b.n	800e9a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e99c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e9aa:	d007      	beq.n	800e9bc <HAL_SPI_Init+0xa0>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e9b4:	d002      	beq.n	800e9bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e9cc:	431a      	orrs	r2, r3
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	f003 0302 	and.w	r3, r3, #2
 800e9d6:	431a      	orrs	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	695b      	ldr	r3, [r3, #20]
 800e9dc:	f003 0301 	and.w	r3, r3, #1
 800e9e0:	431a      	orrs	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9ea:	431a      	orrs	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	69db      	ldr	r3, [r3, #28]
 800e9f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e9f4:	431a      	orrs	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9fe:	ea42 0103 	orr.w	r1, r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	430a      	orrs	r2, r1
 800ea10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	0c1b      	lsrs	r3, r3, #16
 800ea18:	f003 0204 	and.w	r2, r3, #4
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea20:	f003 0310 	and.w	r3, r3, #16
 800ea24:	431a      	orrs	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea2a:	f003 0308 	and.w	r3, r3, #8
 800ea2e:	431a      	orrs	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ea38:	ea42 0103 	orr.w	r1, r2, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	430a      	orrs	r2, r1
 800ea48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	69da      	ldr	r2, [r3, #28]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ea58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2201      	movs	r2, #1
 800ea64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b088      	sub	sp, #32
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	60f8      	str	r0, [r7, #12]
 800ea7a:	60b9      	str	r1, [r7, #8]
 800ea7c:	603b      	str	r3, [r7, #0]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d101      	bne.n	800ea94 <HAL_SPI_Transmit+0x22>
 800ea90:	2302      	movs	r3, #2
 800ea92:	e15f      	b.n	800ed54 <HAL_SPI_Transmit+0x2e2>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea9c:	f7fb ffea 	bl	800aa74 <HAL_GetTick>
 800eaa0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800eaa2:	88fb      	ldrh	r3, [r7, #6]
 800eaa4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d002      	beq.n	800eab8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800eab2:	2302      	movs	r3, #2
 800eab4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eab6:	e148      	b.n	800ed4a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d002      	beq.n	800eac4 <HAL_SPI_Transmit+0x52>
 800eabe:	88fb      	ldrh	r3, [r7, #6]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d102      	bne.n	800eaca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eac8:	e13f      	b.n	800ed4a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2203      	movs	r2, #3
 800eace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	88fa      	ldrh	r2, [r7, #6]
 800eae2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	88fa      	ldrh	r2, [r7, #6]
 800eae8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2200      	movs	r2, #0
 800eb04:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb14:	d10f      	bne.n	800eb36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb40:	2b40      	cmp	r3, #64	@ 0x40
 800eb42:	d007      	beq.n	800eb54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eb5c:	d94f      	bls.n	800ebfe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <HAL_SPI_Transmit+0xfa>
 800eb66:	8afb      	ldrh	r3, [r7, #22]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d142      	bne.n	800ebf2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb70:	881a      	ldrh	r2, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb7c:	1c9a      	adds	r2, r3, #2
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800eb90:	e02f      	b.n	800ebf2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	f003 0302 	and.w	r3, r3, #2
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d112      	bne.n	800ebc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eba4:	881a      	ldrh	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebb0:	1c9a      	adds	r2, r3, #2
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ebc4:	e015      	b.n	800ebf2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebc6:	f7fb ff55 	bl	800aa74 <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	683a      	ldr	r2, [r7, #0]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d803      	bhi.n	800ebde <HAL_SPI_Transmit+0x16c>
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebdc:	d102      	bne.n	800ebe4 <HAL_SPI_Transmit+0x172>
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d106      	bne.n	800ebf2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800ebf0:	e0ab      	b.n	800ed4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1ca      	bne.n	800eb92 <HAL_SPI_Transmit+0x120>
 800ebfc:	e080      	b.n	800ed00 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d002      	beq.n	800ec0c <HAL_SPI_Transmit+0x19a>
 800ec06:	8afb      	ldrh	r3, [r7, #22]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d174      	bne.n	800ecf6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d912      	bls.n	800ec3c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec1a:	881a      	ldrh	r2, [r3, #0]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec26:	1c9a      	adds	r2, r3, #2
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	3b02      	subs	r3, #2
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ec3a:	e05c      	b.n	800ecf6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	330c      	adds	r3, #12
 800ec46:	7812      	ldrb	r2, [r2, #0]
 800ec48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ec62:	e048      	b.n	800ecf6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	f003 0302 	and.w	r3, r3, #2
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	d12b      	bne.n	800ecca <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d912      	bls.n	800eca2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec80:	881a      	ldrh	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec8c:	1c9a      	adds	r2, r3, #2
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	3b02      	subs	r3, #2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800eca0:	e029      	b.n	800ecf6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	330c      	adds	r3, #12
 800ecac:	7812      	ldrb	r2, [r2, #0]
 800ecae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecb4:	1c5a      	adds	r2, r3, #1
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ecc8:	e015      	b.n	800ecf6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecca:	f7fb fed3 	bl	800aa74 <HAL_GetTick>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d803      	bhi.n	800ece2 <HAL_SPI_Transmit+0x270>
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece0:	d102      	bne.n	800ece8 <HAL_SPI_Transmit+0x276>
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d106      	bne.n	800ecf6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800ece8:	2303      	movs	r3, #3
 800ecea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800ecf4:	e029      	b.n	800ed4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d1b1      	bne.n	800ec64 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed00:	69ba      	ldr	r2, [r7, #24]
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f000 fc7d 	bl	800f604 <SPI_EndRxTxTransaction>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d002      	beq.n	800ed16 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2220      	movs	r2, #32
 800ed14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10a      	bne.n	800ed34 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed1e:	2300      	movs	r3, #0
 800ed20:	613b      	str	r3, [r7, #16]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	613b      	str	r3, [r7, #16]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	613b      	str	r3, [r7, #16]
 800ed32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d002      	beq.n	800ed42 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	77fb      	strb	r3, [r7, #31]
 800ed40:	e003      	b.n	800ed4a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2201      	movs	r2, #1
 800ed46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800ed52:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3720      	adds	r7, #32
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b08a      	sub	sp, #40	@ 0x28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	607a      	str	r2, [r7, #4]
 800ed68:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d101      	bne.n	800ed82 <HAL_SPI_TransmitReceive+0x26>
 800ed7e:	2302      	movs	r3, #2
 800ed80:	e20a      	b.n	800f198 <HAL_SPI_TransmitReceive+0x43c>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2201      	movs	r2, #1
 800ed86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed8a:	f7fb fe73 	bl	800aa74 <HAL_GetTick>
 800ed8e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ed96:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ed9e:	887b      	ldrh	r3, [r7, #2]
 800eda0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800eda2:	887b      	ldrh	r3, [r7, #2]
 800eda4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eda6:	7efb      	ldrb	r3, [r7, #27]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d00e      	beq.n	800edca <HAL_SPI_TransmitReceive+0x6e>
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800edb2:	d106      	bne.n	800edc2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d102      	bne.n	800edc2 <HAL_SPI_TransmitReceive+0x66>
 800edbc:	7efb      	ldrb	r3, [r7, #27]
 800edbe:	2b04      	cmp	r3, #4
 800edc0:	d003      	beq.n	800edca <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800edc2:	2302      	movs	r3, #2
 800edc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800edc8:	e1e0      	b.n	800f18c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d005      	beq.n	800eddc <HAL_SPI_TransmitReceive+0x80>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d002      	beq.n	800eddc <HAL_SPI_TransmitReceive+0x80>
 800edd6:	887b      	ldrh	r3, [r7, #2]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d103      	bne.n	800ede4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800eddc:	2301      	movs	r3, #1
 800edde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ede2:	e1d3      	b.n	800f18c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800edea:	b2db      	uxtb	r3, r3
 800edec:	2b04      	cmp	r3, #4
 800edee:	d003      	beq.n	800edf8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2205      	movs	r2, #5
 800edf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	887a      	ldrh	r2, [r7, #2]
 800ee08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	887a      	ldrh	r2, [r7, #2]
 800ee10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	68ba      	ldr	r2, [r7, #8]
 800ee18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	887a      	ldrh	r2, [r7, #2]
 800ee1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	887a      	ldrh	r2, [r7, #2]
 800ee24:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ee3a:	d802      	bhi.n	800ee42 <HAL_SPI_TransmitReceive+0xe6>
 800ee3c:	8a3b      	ldrh	r3, [r7, #16]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d908      	bls.n	800ee54 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ee50:	605a      	str	r2, [r3, #4]
 800ee52:	e007      	b.n	800ee64 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	685a      	ldr	r2, [r3, #4]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ee62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee6e:	2b40      	cmp	r3, #64	@ 0x40
 800ee70:	d007      	beq.n	800ee82 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ee8a:	f240 8081 	bls.w	800ef90 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d002      	beq.n	800ee9c <HAL_SPI_TransmitReceive+0x140>
 800ee96:	8a7b      	ldrh	r3, [r7, #18]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d16d      	bne.n	800ef78 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eea0:	881a      	ldrh	r2, [r3, #0]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeac:	1c9a      	adds	r2, r3, #2
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eec0:	e05a      	b.n	800ef78 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	f003 0302 	and.w	r3, r3, #2
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d11b      	bne.n	800ef08 <HAL_SPI_TransmitReceive+0x1ac>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d016      	beq.n	800ef08 <HAL_SPI_TransmitReceive+0x1ac>
 800eeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d113      	bne.n	800ef08 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eee4:	881a      	ldrh	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eef0:	1c9a      	adds	r2, r3, #2
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	3b01      	subs	r3, #1
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef04:	2300      	movs	r3, #0
 800ef06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	f003 0301 	and.w	r3, r3, #1
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d11c      	bne.n	800ef50 <HAL_SPI_TransmitReceive+0x1f4>
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d016      	beq.n	800ef50 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	68da      	ldr	r2, [r3, #12]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef2c:	b292      	uxth	r2, r2
 800ef2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef34:	1c9a      	adds	r2, r3, #2
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	3b01      	subs	r3, #1
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ef50:	f7fb fd90 	bl	800aa74 <HAL_GetTick>
 800ef54:	4602      	mov	r2, r0
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d80b      	bhi.n	800ef78 <HAL_SPI_TransmitReceive+0x21c>
 800ef60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef66:	d007      	beq.n	800ef78 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ef76:	e109      	b.n	800f18c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d19f      	bne.n	800eec2 <HAL_SPI_TransmitReceive+0x166>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d199      	bne.n	800eec2 <HAL_SPI_TransmitReceive+0x166>
 800ef8e:	e0e3      	b.n	800f158 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d003      	beq.n	800efa0 <HAL_SPI_TransmitReceive+0x244>
 800ef98:	8a7b      	ldrh	r3, [r7, #18]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	f040 80cf 	bne.w	800f13e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d912      	bls.n	800efd0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efae:	881a      	ldrh	r2, [r3, #0]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efba:	1c9a      	adds	r2, r3, #2
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	3b02      	subs	r3, #2
 800efc8:	b29a      	uxth	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800efce:	e0b6      	b.n	800f13e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	330c      	adds	r3, #12
 800efda:	7812      	ldrb	r2, [r2, #0]
 800efdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efec:	b29b      	uxth	r3, r3
 800efee:	3b01      	subs	r3, #1
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eff6:	e0a2      	b.n	800f13e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	689b      	ldr	r3, [r3, #8]
 800effe:	f003 0302 	and.w	r3, r3, #2
 800f002:	2b02      	cmp	r3, #2
 800f004:	d134      	bne.n	800f070 <HAL_SPI_TransmitReceive+0x314>
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d02f      	beq.n	800f070 <HAL_SPI_TransmitReceive+0x314>
 800f010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f012:	2b01      	cmp	r3, #1
 800f014:	d12c      	bne.n	800f070 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d912      	bls.n	800f046 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f024:	881a      	ldrh	r2, [r3, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f030:	1c9a      	adds	r2, r3, #2
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	3b02      	subs	r3, #2
 800f03e:	b29a      	uxth	r2, r3
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f044:	e012      	b.n	800f06c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	330c      	adds	r3, #12
 800f050:	7812      	ldrb	r2, [r2, #0]
 800f052:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f058:	1c5a      	adds	r2, r3, #1
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f062:	b29b      	uxth	r3, r3
 800f064:	3b01      	subs	r3, #1
 800f066:	b29a      	uxth	r2, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f06c:	2300      	movs	r3, #0
 800f06e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d148      	bne.n	800f110 <HAL_SPI_TransmitReceive+0x3b4>
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f084:	b29b      	uxth	r3, r3
 800f086:	2b00      	cmp	r3, #0
 800f088:	d042      	beq.n	800f110 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f090:	b29b      	uxth	r3, r3
 800f092:	2b01      	cmp	r3, #1
 800f094:	d923      	bls.n	800f0de <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	68da      	ldr	r2, [r3, #12]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0a0:	b292      	uxth	r2, r2
 800f0a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0a8:	1c9a      	adds	r2, r3, #2
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	3b02      	subs	r3, #2
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d81f      	bhi.n	800f10c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f0da:	605a      	str	r2, [r3, #4]
 800f0dc:	e016      	b.n	800f10c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f103 020c 	add.w	r2, r3, #12
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0ea:	7812      	ldrb	r2, [r2, #0]
 800f0ec:	b2d2      	uxtb	r2, r2
 800f0ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0f4:	1c5a      	adds	r2, r3, #1
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f100:	b29b      	uxth	r3, r3
 800f102:	3b01      	subs	r3, #1
 800f104:	b29a      	uxth	r2, r3
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f10c:	2301      	movs	r3, #1
 800f10e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f110:	f7fb fcb0 	bl	800aa74 <HAL_GetTick>
 800f114:	4602      	mov	r2, r0
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d803      	bhi.n	800f128 <HAL_SPI_TransmitReceive+0x3cc>
 800f120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f126:	d102      	bne.n	800f12e <HAL_SPI_TransmitReceive+0x3d2>
 800f128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d107      	bne.n	800f13e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800f12e:	2303      	movs	r3, #3
 800f130:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2201      	movs	r2, #1
 800f138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800f13c:	e026      	b.n	800f18c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f142:	b29b      	uxth	r3, r3
 800f144:	2b00      	cmp	r3, #0
 800f146:	f47f af57 	bne.w	800eff8 <HAL_SPI_TransmitReceive+0x29c>
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f150:	b29b      	uxth	r3, r3
 800f152:	2b00      	cmp	r3, #0
 800f154:	f47f af50 	bne.w	800eff8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f158:	69fa      	ldr	r2, [r7, #28]
 800f15a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f15c:	68f8      	ldr	r0, [r7, #12]
 800f15e:	f000 fa51 	bl	800f604 <SPI_EndRxTxTransaction>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	d005      	beq.n	800f174 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800f168:	2301      	movs	r3, #1
 800f16a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2220      	movs	r2, #32
 800f172:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d003      	beq.n	800f184 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800f17c:	2301      	movs	r3, #1
 800f17e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f182:	e003      	b.n	800f18c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2201      	movs	r2, #1
 800f188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2200      	movs	r2, #0
 800f190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800f194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3728      	adds	r7, #40	@ 0x28
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b088      	sub	sp, #32
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10e      	bne.n	800f1e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d009      	beq.n	800f1e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d004      	beq.n	800f1e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	4798      	blx	r3
    return;
 800f1de:	e0ce      	b.n	800f37e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	f003 0302 	and.w	r3, r3, #2
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d009      	beq.n	800f1fe <HAL_SPI_IRQHandler+0x5e>
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d004      	beq.n	800f1fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	4798      	blx	r3
    return;
 800f1fc:	e0bf      	b.n	800f37e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	f003 0320 	and.w	r3, r3, #32
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10a      	bne.n	800f21e <HAL_SPI_IRQHandler+0x7e>
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d105      	bne.n	800f21e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f000 80b0 	beq.w	800f37e <HAL_SPI_IRQHandler+0x1de>
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	f003 0320 	and.w	r3, r3, #32
 800f224:	2b00      	cmp	r3, #0
 800f226:	f000 80aa 	beq.w	800f37e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f230:	2b00      	cmp	r3, #0
 800f232:	d023      	beq.n	800f27c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d011      	beq.n	800f264 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f244:	f043 0204 	orr.w	r2, r3, #4
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f24c:	2300      	movs	r3, #0
 800f24e:	617b      	str	r3, [r7, #20]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	617b      	str	r3, [r7, #20]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	617b      	str	r3, [r7, #20]
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	e00b      	b.n	800f27c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f264:	2300      	movs	r3, #0
 800f266:	613b      	str	r3, [r7, #16]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	613b      	str	r3, [r7, #16]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	613b      	str	r3, [r7, #16]
 800f278:	693b      	ldr	r3, [r7, #16]
        return;
 800f27a:	e080      	b.n	800f37e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	f003 0320 	and.w	r3, r3, #32
 800f282:	2b00      	cmp	r3, #0
 800f284:	d014      	beq.n	800f2b0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f28a:	f043 0201 	orr.w	r2, r3, #1
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f292:	2300      	movs	r3, #0
 800f294:	60fb      	str	r3, [r7, #12]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00c      	beq.n	800f2d4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2be:	f043 0208 	orr.w	r2, r3, #8
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	60bb      	str	r3, [r7, #8]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	60bb      	str	r3, [r7, #8]
 800f2d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d04f      	beq.n	800f37c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	685a      	ldr	r2, [r3, #4]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f2ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	f003 0302 	and.w	r3, r3, #2
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d104      	bne.n	800f308 <HAL_SPI_IRQHandler+0x168>
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	f003 0301 	and.w	r3, r3, #1
 800f304:	2b00      	cmp	r3, #0
 800f306:	d034      	beq.n	800f372 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f022 0203 	bic.w	r2, r2, #3
 800f316:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d011      	beq.n	800f344 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f324:	4a17      	ldr	r2, [pc, #92]	@ (800f384 <HAL_SPI_IRQHandler+0x1e4>)
 800f326:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fb fde0 	bl	800aef2 <HAL_DMA_Abort_IT>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d005      	beq.n	800f344 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f33c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d016      	beq.n	800f37a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f350:	4a0c      	ldr	r2, [pc, #48]	@ (800f384 <HAL_SPI_IRQHandler+0x1e4>)
 800f352:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fb fdca 	bl	800aef2 <HAL_DMA_Abort_IT>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00a      	beq.n	800f37a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f368:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800f370:	e003      	b.n	800f37a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 f808 	bl	800f388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f378:	e000      	b.n	800f37c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f37a:	bf00      	nop
    return;
 800f37c:	bf00      	nop
  }
}
 800f37e:	3720      	adds	r7, #32
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	0800f39d 	.word	0x0800f39d

0800f388 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f7ff ffe5 	bl	800f388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f3be:	bf00      	nop
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
	...

0800f3c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	603b      	str	r3, [r7, #0]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f3d8:	f7fb fb4c 	bl	800aa74 <HAL_GetTick>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e0:	1a9b      	subs	r3, r3, r2
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f3e8:	f7fb fb44 	bl	800aa74 <HAL_GetTick>
 800f3ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f3ee:	4b39      	ldr	r3, [pc, #228]	@ (800f4d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	015b      	lsls	r3, r3, #5
 800f3f4:	0d1b      	lsrs	r3, r3, #20
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	fb02 f303 	mul.w	r3, r2, r3
 800f3fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f3fe:	e054      	b.n	800f4aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f406:	d050      	beq.n	800f4aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f408:	f7fb fb34 	bl	800aa74 <HAL_GetTick>
 800f40c:	4602      	mov	r2, r0
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	429a      	cmp	r2, r3
 800f416:	d902      	bls.n	800f41e <SPI_WaitFlagStateUntilTimeout+0x56>
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d13d      	bne.n	800f49a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f42c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f436:	d111      	bne.n	800f45c <SPI_WaitFlagStateUntilTimeout+0x94>
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	689b      	ldr	r3, [r3, #8]
 800f43c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f440:	d004      	beq.n	800f44c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f44a:	d107      	bne.n	800f45c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f45a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f464:	d10f      	bne.n	800f486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f474:	601a      	str	r2, [r3, #0]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2201      	movs	r2, #1
 800f48a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f496:	2303      	movs	r3, #3
 800f498:	e017      	b.n	800f4ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d101      	bne.n	800f4a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	689a      	ldr	r2, [r3, #8]
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	4013      	ands	r3, r2
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	bf0c      	ite	eq
 800f4ba:	2301      	moveq	r3, #1
 800f4bc:	2300      	movne	r3, #0
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	79fb      	ldrb	r3, [r7, #7]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d19b      	bne.n	800f400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3720      	adds	r7, #32
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20000078 	.word	0x20000078

0800f4d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b08a      	sub	sp, #40	@ 0x28
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
 800f4e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f4ea:	f7fb fac3 	bl	800aa74 <HAL_GetTick>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f2:	1a9b      	subs	r3, r3, r2
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f4fa:	f7fb fabb 	bl	800aa74 <HAL_GetTick>
 800f4fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	330c      	adds	r3, #12
 800f506:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f508:	4b3d      	ldr	r3, [pc, #244]	@ (800f600 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	4613      	mov	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	4413      	add	r3, r2
 800f512:	00da      	lsls	r2, r3, #3
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	0d1b      	lsrs	r3, r3, #20
 800f518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f51a:	fb02 f303 	mul.w	r3, r2, r3
 800f51e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f520:	e060      	b.n	800f5e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f528:	d107      	bne.n	800f53a <SPI_WaitFifoStateUntilTimeout+0x62>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d104      	bne.n	800f53a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	b2db      	uxtb	r3, r3
 800f536:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f538:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f540:	d050      	beq.n	800f5e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f542:	f7fb fa97 	bl	800aa74 <HAL_GetTick>
 800f546:	4602      	mov	r2, r0
 800f548:	6a3b      	ldr	r3, [r7, #32]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f54e:	429a      	cmp	r2, r3
 800f550:	d902      	bls.n	800f558 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f554:	2b00      	cmp	r3, #0
 800f556:	d13d      	bne.n	800f5d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f570:	d111      	bne.n	800f596 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f57a:	d004      	beq.n	800f586 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f584:	d107      	bne.n	800f596 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f594:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f59a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f59e:	d10f      	bne.n	800f5c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f5ae:	601a      	str	r2, [r3, #0]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f5be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f5d0:	2303      	movs	r3, #3
 800f5d2:	e010      	b.n	800f5f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f5d4:	69bb      	ldr	r3, [r7, #24]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d101      	bne.n	800f5de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	689a      	ldr	r2, [r3, #8]
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d196      	bne.n	800f522 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3728      	adds	r7, #40	@ 0x28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	20000078 	.word	0x20000078

0800f604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b086      	sub	sp, #24
 800f608:	af02      	add	r7, sp, #8
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	2200      	movs	r2, #0
 800f618:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7ff ff5b 	bl	800f4d8 <SPI_WaitFifoStateUntilTimeout>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d007      	beq.n	800f638 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f62c:	f043 0220 	orr.w	r2, r3, #32
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f634:	2303      	movs	r3, #3
 800f636:	e027      	b.n	800f688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	2200      	movs	r2, #0
 800f640:	2180      	movs	r1, #128	@ 0x80
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f7ff fec0 	bl	800f3c8 <SPI_WaitFlagStateUntilTimeout>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d007      	beq.n	800f65e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f652:	f043 0220 	orr.w	r2, r3, #32
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f65a:	2303      	movs	r3, #3
 800f65c:	e014      	b.n	800f688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2200      	movs	r2, #0
 800f666:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f7ff ff34 	bl	800f4d8 <SPI_WaitFifoStateUntilTimeout>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d007      	beq.n	800f686 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f67a:	f043 0220 	orr.w	r2, r3, #32
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f682:	2303      	movs	r3, #3
 800f684:	e000      	b.n	800f688 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e049      	b.n	800f736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7fa fb50 	bl	8009d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2202      	movs	r2, #2
 800f6c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	4610      	mov	r0, r2
 800f6d0:	f000 facc 	bl	800fc6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
	...

0800f740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f740:	b480      	push	{r7}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	2b01      	cmp	r3, #1
 800f752:	d001      	beq.n	800f758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f754:	2301      	movs	r3, #1
 800f756:	e054      	b.n	800f802 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2202      	movs	r2, #2
 800f75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68da      	ldr	r2, [r3, #12]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f042 0201 	orr.w	r2, r2, #1
 800f76e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a26      	ldr	r2, [pc, #152]	@ (800f810 <HAL_TIM_Base_Start_IT+0xd0>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d022      	beq.n	800f7c0 <HAL_TIM_Base_Start_IT+0x80>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f782:	d01d      	beq.n	800f7c0 <HAL_TIM_Base_Start_IT+0x80>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4a22      	ldr	r2, [pc, #136]	@ (800f814 <HAL_TIM_Base_Start_IT+0xd4>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d018      	beq.n	800f7c0 <HAL_TIM_Base_Start_IT+0x80>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4a21      	ldr	r2, [pc, #132]	@ (800f818 <HAL_TIM_Base_Start_IT+0xd8>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d013      	beq.n	800f7c0 <HAL_TIM_Base_Start_IT+0x80>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a1f      	ldr	r2, [pc, #124]	@ (800f81c <HAL_TIM_Base_Start_IT+0xdc>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d00e      	beq.n	800f7c0 <HAL_TIM_Base_Start_IT+0x80>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a1e      	ldr	r2, [pc, #120]	@ (800f820 <HAL_TIM_Base_Start_IT+0xe0>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d009      	beq.n	800f7c0 <HAL_TIM_Base_Start_IT+0x80>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a1c      	ldr	r2, [pc, #112]	@ (800f824 <HAL_TIM_Base_Start_IT+0xe4>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d004      	beq.n	800f7c0 <HAL_TIM_Base_Start_IT+0x80>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800f828 <HAL_TIM_Base_Start_IT+0xe8>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d115      	bne.n	800f7ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	689a      	ldr	r2, [r3, #8]
 800f7c6:	4b19      	ldr	r3, [pc, #100]	@ (800f82c <HAL_TIM_Base_Start_IT+0xec>)
 800f7c8:	4013      	ands	r3, r2
 800f7ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2b06      	cmp	r3, #6
 800f7d0:	d015      	beq.n	800f7fe <HAL_TIM_Base_Start_IT+0xbe>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7d8:	d011      	beq.n	800f7fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f042 0201 	orr.w	r2, r2, #1
 800f7e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7ea:	e008      	b.n	800f7fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f042 0201 	orr.w	r2, r2, #1
 800f7fa:	601a      	str	r2, [r3, #0]
 800f7fc:	e000      	b.n	800f800 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3714      	adds	r7, #20
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	40012c00 	.word	0x40012c00
 800f814:	40000400 	.word	0x40000400
 800f818:	40000800 	.word	0x40000800
 800f81c:	40000c00 	.word	0x40000c00
 800f820:	40013400 	.word	0x40013400
 800f824:	40014000 	.word	0x40014000
 800f828:	40015000 	.word	0x40015000
 800f82c:	00010007 	.word	0x00010007

0800f830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f840:	2301      	movs	r3, #1
 800f842:	e097      	b.n	800f974 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d106      	bne.n	800f85e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7fa fac1 	bl	8009de0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2202      	movs	r2, #2
 800f862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	6812      	ldr	r2, [r2, #0]
 800f870:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800f874:	f023 0307 	bic.w	r3, r3, #7
 800f878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	3304      	adds	r3, #4
 800f882:	4619      	mov	r1, r3
 800f884:	4610      	mov	r0, r2
 800f886:	f000 f9f1 	bl	800fc6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	6a1b      	ldr	r3, [r3, #32]
 800f8a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8b2:	f023 0303 	bic.w	r3, r3, #3
 800f8b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	689a      	ldr	r2, [r3, #8]
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	021b      	lsls	r3, r3, #8
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	693a      	ldr	r2, [r7, #16]
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f8d0:	f023 030c 	bic.w	r3, r3, #12
 800f8d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f8dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f8e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	68da      	ldr	r2, [r3, #12]
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	69db      	ldr	r3, [r3, #28]
 800f8ea:	021b      	lsls	r3, r3, #8
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	693a      	ldr	r2, [r7, #16]
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	691b      	ldr	r3, [r3, #16]
 800f8f8:	011a      	lsls	r2, r3, #4
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	6a1b      	ldr	r3, [r3, #32]
 800f8fe:	031b      	lsls	r3, r3, #12
 800f900:	4313      	orrs	r3, r2
 800f902:	693a      	ldr	r2, [r7, #16]
 800f904:	4313      	orrs	r3, r2
 800f906:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800f90e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800f916:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	685a      	ldr	r2, [r3, #4]
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	695b      	ldr	r3, [r3, #20]
 800f920:	011b      	lsls	r3, r3, #4
 800f922:	4313      	orrs	r3, r2
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	4313      	orrs	r3, r2
 800f928:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	697a      	ldr	r2, [r7, #20]
 800f930:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	693a      	ldr	r2, [r7, #16]
 800f938:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2201      	movs	r2, #1
 800f946:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2201      	movs	r2, #1
 800f94e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2201      	movs	r2, #1
 800f956:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2201      	movs	r2, #1
 800f95e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2201      	movs	r2, #1
 800f96e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f972:	2300      	movs	r3, #0
}
 800f974:	4618      	mov	r0, r3
 800f976:	3718      	adds	r7, #24
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	691b      	ldr	r3, [r3, #16]
 800f992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	f003 0302 	and.w	r3, r3, #2
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d020      	beq.n	800f9e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f003 0302 	and.w	r3, r3, #2
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d01b      	beq.n	800f9e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f06f 0202 	mvn.w	r2, #2
 800f9b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	699b      	ldr	r3, [r3, #24]
 800f9be:	f003 0303 	and.w	r3, r3, #3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d003      	beq.n	800f9ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f931 	bl	800fc2e <HAL_TIM_IC_CaptureCallback>
 800f9cc:	e005      	b.n	800f9da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f923 	bl	800fc1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f000 f934 	bl	800fc42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	f003 0304 	and.w	r3, r3, #4
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d020      	beq.n	800fa2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f003 0304 	and.w	r3, r3, #4
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d01b      	beq.n	800fa2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f06f 0204 	mvn.w	r2, #4
 800f9fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2202      	movs	r2, #2
 800fa02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d003      	beq.n	800fa1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f90b 	bl	800fc2e <HAL_TIM_IC_CaptureCallback>
 800fa18:	e005      	b.n	800fa26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f000 f8fd 	bl	800fc1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f90e 	bl	800fc42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	f003 0308 	and.w	r3, r3, #8
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d020      	beq.n	800fa78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f003 0308 	and.w	r3, r3, #8
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01b      	beq.n	800fa78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f06f 0208 	mvn.w	r2, #8
 800fa48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2204      	movs	r2, #4
 800fa4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	69db      	ldr	r3, [r3, #28]
 800fa56:	f003 0303 	and.w	r3, r3, #3
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d003      	beq.n	800fa66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 f8e5 	bl	800fc2e <HAL_TIM_IC_CaptureCallback>
 800fa64:	e005      	b.n	800fa72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f8d7 	bl	800fc1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f000 f8e8 	bl	800fc42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	f003 0310 	and.w	r3, r3, #16
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d020      	beq.n	800fac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f003 0310 	and.w	r3, r3, #16
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d01b      	beq.n	800fac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f06f 0210 	mvn.w	r2, #16
 800fa94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2208      	movs	r2, #8
 800fa9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	69db      	ldr	r3, [r3, #28]
 800faa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d003      	beq.n	800fab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 f8bf 	bl	800fc2e <HAL_TIM_IC_CaptureCallback>
 800fab0:	e005      	b.n	800fabe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f8b1 	bl	800fc1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f8c2 	bl	800fc42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	f003 0301 	and.w	r3, r3, #1
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00c      	beq.n	800fae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d007      	beq.n	800fae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f06f 0201 	mvn.w	r2, #1
 800fae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7f9 fd1e 	bl	8009524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d104      	bne.n	800fafc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00c      	beq.n	800fb16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d007      	beq.n	800fb16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fb0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f9ff 	bl	800ff14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00c      	beq.n	800fb3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d007      	beq.n	800fb3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fb32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 f9f7 	bl	800ff28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00c      	beq.n	800fb5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d007      	beq.n	800fb5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fb56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 f87c 	bl	800fc56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	f003 0320 	and.w	r3, r3, #32
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00c      	beq.n	800fb82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f003 0320 	and.w	r3, r3, #32
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d007      	beq.n	800fb82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f06f 0220 	mvn.w	r2, #32
 800fb7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 f9bf 	bl	800ff00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00c      	beq.n	800fba6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d007      	beq.n	800fba6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800fb9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 f9cb 	bl	800ff3c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00c      	beq.n	800fbca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d007      	beq.n	800fbca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800fbc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 f9c3 	bl	800ff50 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00c      	beq.n	800fbee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d007      	beq.n	800fbee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800fbe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 f9bb 	bl	800ff64 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00c      	beq.n	800fc12 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d007      	beq.n	800fc12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800fc0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 f9b3 	bl	800ff78 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc12:	bf00      	nop
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fc22:	bf00      	nop
 800fc24:	370c      	adds	r7, #12
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fc2e:	b480      	push	{r7}
 800fc30:	b083      	sub	sp, #12
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc36:	bf00      	nop
 800fc38:	370c      	adds	r7, #12
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr

0800fc42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fc42:	b480      	push	{r7}
 800fc44:	b083      	sub	sp, #12
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fc4a:	bf00      	nop
 800fc4c:	370c      	adds	r7, #12
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc56:	b480      	push	{r7}
 800fc58:	b083      	sub	sp, #12
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fc5e:	bf00      	nop
 800fc60:	370c      	adds	r7, #12
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
	...

0800fc6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	4a4c      	ldr	r2, [pc, #304]	@ (800fdb0 <TIM_Base_SetConfig+0x144>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d017      	beq.n	800fcb4 <TIM_Base_SetConfig+0x48>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc8a:	d013      	beq.n	800fcb4 <TIM_Base_SetConfig+0x48>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4a49      	ldr	r2, [pc, #292]	@ (800fdb4 <TIM_Base_SetConfig+0x148>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d00f      	beq.n	800fcb4 <TIM_Base_SetConfig+0x48>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a48      	ldr	r2, [pc, #288]	@ (800fdb8 <TIM_Base_SetConfig+0x14c>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d00b      	beq.n	800fcb4 <TIM_Base_SetConfig+0x48>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	4a47      	ldr	r2, [pc, #284]	@ (800fdbc <TIM_Base_SetConfig+0x150>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d007      	beq.n	800fcb4 <TIM_Base_SetConfig+0x48>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	4a46      	ldr	r2, [pc, #280]	@ (800fdc0 <TIM_Base_SetConfig+0x154>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d003      	beq.n	800fcb4 <TIM_Base_SetConfig+0x48>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	4a45      	ldr	r2, [pc, #276]	@ (800fdc4 <TIM_Base_SetConfig+0x158>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d108      	bne.n	800fcc6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4a39      	ldr	r2, [pc, #228]	@ (800fdb0 <TIM_Base_SetConfig+0x144>)
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d023      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcd4:	d01f      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4a36      	ldr	r2, [pc, #216]	@ (800fdb4 <TIM_Base_SetConfig+0x148>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d01b      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	4a35      	ldr	r2, [pc, #212]	@ (800fdb8 <TIM_Base_SetConfig+0x14c>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d017      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4a34      	ldr	r2, [pc, #208]	@ (800fdbc <TIM_Base_SetConfig+0x150>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d013      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	4a33      	ldr	r2, [pc, #204]	@ (800fdc0 <TIM_Base_SetConfig+0x154>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d00f      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	4a33      	ldr	r2, [pc, #204]	@ (800fdc8 <TIM_Base_SetConfig+0x15c>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d00b      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4a32      	ldr	r2, [pc, #200]	@ (800fdcc <TIM_Base_SetConfig+0x160>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d007      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4a31      	ldr	r2, [pc, #196]	@ (800fdd0 <TIM_Base_SetConfig+0x164>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d003      	beq.n	800fd16 <TIM_Base_SetConfig+0xaa>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4a2c      	ldr	r2, [pc, #176]	@ (800fdc4 <TIM_Base_SetConfig+0x158>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d108      	bne.n	800fd28 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	695b      	ldr	r3, [r3, #20]
 800fd32:	4313      	orrs	r3, r2
 800fd34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	689a      	ldr	r2, [r3, #8]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4a18      	ldr	r2, [pc, #96]	@ (800fdb0 <TIM_Base_SetConfig+0x144>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d013      	beq.n	800fd7c <TIM_Base_SetConfig+0x110>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4a1a      	ldr	r2, [pc, #104]	@ (800fdc0 <TIM_Base_SetConfig+0x154>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d00f      	beq.n	800fd7c <TIM_Base_SetConfig+0x110>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a1a      	ldr	r2, [pc, #104]	@ (800fdc8 <TIM_Base_SetConfig+0x15c>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d00b      	beq.n	800fd7c <TIM_Base_SetConfig+0x110>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a19      	ldr	r2, [pc, #100]	@ (800fdcc <TIM_Base_SetConfig+0x160>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d007      	beq.n	800fd7c <TIM_Base_SetConfig+0x110>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a18      	ldr	r2, [pc, #96]	@ (800fdd0 <TIM_Base_SetConfig+0x164>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d003      	beq.n	800fd7c <TIM_Base_SetConfig+0x110>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a13      	ldr	r2, [pc, #76]	@ (800fdc4 <TIM_Base_SetConfig+0x158>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d103      	bne.n	800fd84 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	691a      	ldr	r2, [r3, #16]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	691b      	ldr	r3, [r3, #16]
 800fd8e:	f003 0301 	and.w	r3, r3, #1
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d105      	bne.n	800fda2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	691b      	ldr	r3, [r3, #16]
 800fd9a:	f023 0201 	bic.w	r2, r3, #1
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	611a      	str	r2, [r3, #16]
  }
}
 800fda2:	bf00      	nop
 800fda4:	3714      	adds	r7, #20
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	40012c00 	.word	0x40012c00
 800fdb4:	40000400 	.word	0x40000400
 800fdb8:	40000800 	.word	0x40000800
 800fdbc:	40000c00 	.word	0x40000c00
 800fdc0:	40013400 	.word	0x40013400
 800fdc4:	40015000 	.word	0x40015000
 800fdc8:	40014000 	.word	0x40014000
 800fdcc:	40014400 	.word	0x40014400
 800fdd0:	40014800 	.word	0x40014800

0800fdd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d101      	bne.n	800fdec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fde8:	2302      	movs	r3, #2
 800fdea:	e074      	b.n	800fed6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2202      	movs	r2, #2
 800fdf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	689b      	ldr	r3, [r3, #8]
 800fe0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a34      	ldr	r2, [pc, #208]	@ (800fee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d009      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4a33      	ldr	r2, [pc, #204]	@ (800fee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d004      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a31      	ldr	r2, [pc, #196]	@ (800feec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d108      	bne.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fe30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fe42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	68fa      	ldr	r2, [r7, #12]
 800fe58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4a21      	ldr	r2, [pc, #132]	@ (800fee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d022      	beq.n	800feaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe6c:	d01d      	beq.n	800feaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a1f      	ldr	r2, [pc, #124]	@ (800fef0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d018      	beq.n	800feaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a1d      	ldr	r2, [pc, #116]	@ (800fef4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d013      	beq.n	800feaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4a1c      	ldr	r2, [pc, #112]	@ (800fef8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d00e      	beq.n	800feaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a15      	ldr	r2, [pc, #84]	@ (800fee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d009      	beq.n	800feaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4a18      	ldr	r2, [pc, #96]	@ (800fefc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d004      	beq.n	800feaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a11      	ldr	r2, [pc, #68]	@ (800feec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d10c      	bne.n	800fec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800feb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	68ba      	ldr	r2, [r7, #8]
 800feb8:	4313      	orrs	r3, r2
 800feba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	68ba      	ldr	r2, [r7, #8]
 800fec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2201      	movs	r2, #1
 800fec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2200      	movs	r2, #0
 800fed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3714      	adds	r7, #20
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	40012c00 	.word	0x40012c00
 800fee8:	40013400 	.word	0x40013400
 800feec:	40015000 	.word	0x40015000
 800fef0:	40000400 	.word	0x40000400
 800fef4:	40000800 	.word	0x40000800
 800fef8:	40000c00 	.word	0x40000c00
 800fefc:	40014000 	.word	0x40014000

0800ff00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff08:	bf00      	nop
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ff44:	bf00      	nop
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d101      	bne.n	800ff9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e042      	b.n	8010024 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d106      	bne.n	800ffb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7fa fbe1 	bl	800a778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2224      	movs	r2, #36	@ 0x24
 800ffba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f022 0201 	bic.w	r2, r2, #1
 800ffcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d002      	beq.n	800ffdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fe68 	bl	8010cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 fb69 	bl	80106b4 <UART_SetConfig>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d101      	bne.n	800ffec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e01b      	b.n	8010024 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	689a      	ldr	r2, [r3, #8]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801000a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f042 0201 	orr.w	r2, r2, #1
 801001a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fee7 	bl	8010df0 <UART_CheckIdleState>
 8010022:	4603      	mov	r3, r0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b0ba      	sub	sp, #232	@ 0xe8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	69db      	ldr	r3, [r3, #28]
 801003a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010056:	f640 030f 	movw	r3, #2063	@ 0x80f
 801005a:	4013      	ands	r3, r2
 801005c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010064:	2b00      	cmp	r3, #0
 8010066:	d11b      	bne.n	80100a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801006c:	f003 0320 	and.w	r3, r3, #32
 8010070:	2b00      	cmp	r3, #0
 8010072:	d015      	beq.n	80100a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010078:	f003 0320 	and.w	r3, r3, #32
 801007c:	2b00      	cmp	r3, #0
 801007e:	d105      	bne.n	801008c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010088:	2b00      	cmp	r3, #0
 801008a:	d009      	beq.n	80100a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010090:	2b00      	cmp	r3, #0
 8010092:	f000 82e3 	beq.w	801065c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	4798      	blx	r3
      }
      return;
 801009e:	e2dd      	b.n	801065c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80100a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 8123 	beq.w	80102f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80100aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80100ae:	4b8d      	ldr	r3, [pc, #564]	@ (80102e4 <HAL_UART_IRQHandler+0x2b8>)
 80100b0:	4013      	ands	r3, r2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80100b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80100ba:	4b8b      	ldr	r3, [pc, #556]	@ (80102e8 <HAL_UART_IRQHandler+0x2bc>)
 80100bc:	4013      	ands	r3, r2
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f000 8116 	beq.w	80102f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80100c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100c8:	f003 0301 	and.w	r3, r3, #1
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d011      	beq.n	80100f4 <HAL_UART_IRQHandler+0xc8>
 80100d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00b      	beq.n	80100f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2201      	movs	r2, #1
 80100e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100ea:	f043 0201 	orr.w	r2, r3, #1
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100f8:	f003 0302 	and.w	r3, r3, #2
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d011      	beq.n	8010124 <HAL_UART_IRQHandler+0xf8>
 8010100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010104:	f003 0301 	and.w	r3, r3, #1
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00b      	beq.n	8010124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2202      	movs	r2, #2
 8010112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801011a:	f043 0204 	orr.w	r2, r3, #4
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010128:	f003 0304 	and.w	r3, r3, #4
 801012c:	2b00      	cmp	r3, #0
 801012e:	d011      	beq.n	8010154 <HAL_UART_IRQHandler+0x128>
 8010130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010134:	f003 0301 	and.w	r3, r3, #1
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00b      	beq.n	8010154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2204      	movs	r2, #4
 8010142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801014a:	f043 0202 	orr.w	r2, r3, #2
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010158:	f003 0308 	and.w	r3, r3, #8
 801015c:	2b00      	cmp	r3, #0
 801015e:	d017      	beq.n	8010190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010164:	f003 0320 	and.w	r3, r3, #32
 8010168:	2b00      	cmp	r3, #0
 801016a:	d105      	bne.n	8010178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801016c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010170:	4b5c      	ldr	r3, [pc, #368]	@ (80102e4 <HAL_UART_IRQHandler+0x2b8>)
 8010172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00b      	beq.n	8010190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2208      	movs	r2, #8
 801017e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010186:	f043 0208 	orr.w	r2, r3, #8
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010198:	2b00      	cmp	r3, #0
 801019a:	d012      	beq.n	80101c2 <HAL_UART_IRQHandler+0x196>
 801019c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d00c      	beq.n	80101c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80101b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101b8:	f043 0220 	orr.w	r2, r3, #32
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 8249 	beq.w	8010660 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80101ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101d2:	f003 0320 	and.w	r3, r3, #32
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d013      	beq.n	8010202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101de:	f003 0320 	and.w	r3, r3, #32
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d105      	bne.n	80101f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d007      	beq.n	8010202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d003      	beq.n	8010202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010208:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010216:	2b40      	cmp	r3, #64	@ 0x40
 8010218:	d005      	beq.n	8010226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801021a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801021e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010222:	2b00      	cmp	r3, #0
 8010224:	d054      	beq.n	80102d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fef9 	bl	801101e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010236:	2b40      	cmp	r3, #64	@ 0x40
 8010238:	d146      	bne.n	80102c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	3308      	adds	r3, #8
 8010240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010244:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010248:	e853 3f00 	ldrex	r3, [r3]
 801024c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010250:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	3308      	adds	r3, #8
 8010262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010266:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801026a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801026e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010276:	e841 2300 	strex	r3, r2, [r1]
 801027a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801027e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1d9      	bne.n	801023a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801028c:	2b00      	cmp	r3, #0
 801028e:	d017      	beq.n	80102c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010296:	4a15      	ldr	r2, [pc, #84]	@ (80102ec <HAL_UART_IRQHandler+0x2c0>)
 8010298:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fa fe26 	bl	800aef2 <HAL_DMA_Abort_IT>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d019      	beq.n	80102e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80102ba:	4610      	mov	r0, r2
 80102bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102be:	e00f      	b.n	80102e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 f9e1 	bl	8010688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102c6:	e00b      	b.n	80102e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f000 f9dd 	bl	8010688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102ce:	e007      	b.n	80102e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f000 f9d9 	bl	8010688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80102de:	e1bf      	b.n	8010660 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102e0:	bf00      	nop
    return;
 80102e2:	e1bd      	b.n	8010660 <HAL_UART_IRQHandler+0x634>
 80102e4:	10000001 	.word	0x10000001
 80102e8:	04000120 	.word	0x04000120
 80102ec:	080110eb 	.word	0x080110eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	f040 8153 	bne.w	80105a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80102fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102fe:	f003 0310 	and.w	r3, r3, #16
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 814c 	beq.w	80105a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801030c:	f003 0310 	and.w	r3, r3, #16
 8010310:	2b00      	cmp	r3, #0
 8010312:	f000 8145 	beq.w	80105a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2210      	movs	r2, #16
 801031c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010328:	2b40      	cmp	r3, #64	@ 0x40
 801032a:	f040 80bb 	bne.w	80104a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801033c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010340:	2b00      	cmp	r3, #0
 8010342:	f000 818f 	beq.w	8010664 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801034c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010350:	429a      	cmp	r2, r3
 8010352:	f080 8187 	bcs.w	8010664 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801035c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f003 0320 	and.w	r3, r3, #32
 801036e:	2b00      	cmp	r3, #0
 8010370:	f040 8087 	bne.w	8010482 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010380:	e853 3f00 	ldrex	r3, [r3]
 8010384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801038c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	461a      	mov	r2, r3
 801039a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801039e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80103a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80103aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80103ae:	e841 2300 	strex	r3, r2, [r1]
 80103b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80103b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1da      	bne.n	8010374 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	3308      	adds	r3, #8
 80103c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80103c8:	e853 3f00 	ldrex	r3, [r3]
 80103cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80103ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103d0:	f023 0301 	bic.w	r3, r3, #1
 80103d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	3308      	adds	r3, #8
 80103de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80103e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80103e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80103ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80103ee:	e841 2300 	strex	r3, r2, [r1]
 80103f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80103f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1e1      	bne.n	80103be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	3308      	adds	r3, #8
 8010400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010404:	e853 3f00 	ldrex	r3, [r3]
 8010408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801040a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801040c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	3308      	adds	r3, #8
 801041a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801041e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010426:	e841 2300 	strex	r3, r2, [r1]
 801042a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801042c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1e3      	bne.n	80103fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2220      	movs	r2, #32
 8010436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010448:	e853 3f00 	ldrex	r3, [r3]
 801044c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801044e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010450:	f023 0310 	bic.w	r3, r3, #16
 8010454:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	461a      	mov	r2, r3
 801045e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010462:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010464:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010466:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010468:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801046a:	e841 2300 	strex	r3, r2, [r1]
 801046e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1e4      	bne.n	8010440 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801047c:	4618      	mov	r0, r3
 801047e:	f7fa fcdf 	bl	800ae40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2202      	movs	r2, #2
 8010486:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010494:	b29b      	uxth	r3, r3
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	b29b      	uxth	r3, r3
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f8fd 	bl	801069c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104a2:	e0df      	b.n	8010664 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	1ad3      	subs	r3, r2, r3
 80104b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104be:	b29b      	uxth	r3, r3
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 80d1 	beq.w	8010668 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80104c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	f000 80cc 	beq.w	8010668 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d8:	e853 3f00 	ldrex	r3, [r3]
 80104dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80104de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80104e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	461a      	mov	r2, r3
 80104ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80104f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80104f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80104f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104fa:	e841 2300 	strex	r3, r2, [r1]
 80104fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1e4      	bne.n	80104d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	3308      	adds	r3, #8
 801050c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010510:	e853 3f00 	ldrex	r3, [r3]
 8010514:	623b      	str	r3, [r7, #32]
   return(result);
 8010516:	6a3b      	ldr	r3, [r7, #32]
 8010518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801051c:	f023 0301 	bic.w	r3, r3, #1
 8010520:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	3308      	adds	r3, #8
 801052a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801052e:	633a      	str	r2, [r7, #48]	@ 0x30
 8010530:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010536:	e841 2300 	strex	r3, r2, [r1]
 801053a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801053c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1e1      	bne.n	8010506 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2220      	movs	r2, #32
 8010546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	e853 3f00 	ldrex	r3, [r3]
 8010562:	60fb      	str	r3, [r7, #12]
   return(result);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f023 0310 	bic.w	r3, r3, #16
 801056a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	461a      	mov	r2, r3
 8010574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010578:	61fb      	str	r3, [r7, #28]
 801057a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057c:	69b9      	ldr	r1, [r7, #24]
 801057e:	69fa      	ldr	r2, [r7, #28]
 8010580:	e841 2300 	strex	r3, r2, [r1]
 8010584:	617b      	str	r3, [r7, #20]
   return(result);
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d1e4      	bne.n	8010556 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2202      	movs	r2, #2
 8010590:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010596:	4619      	mov	r1, r3
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f000 f87f 	bl	801069c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801059e:	e063      	b.n	8010668 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80105a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00e      	beq.n	80105ca <HAL_UART_IRQHandler+0x59e>
 80105ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d008      	beq.n	80105ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80105c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fdd2 	bl	801116c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105c8:	e051      	b.n	801066e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80105ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d014      	beq.n	8010600 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80105d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d105      	bne.n	80105ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80105e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d008      	beq.n	8010600 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d03a      	beq.n	801066c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	4798      	blx	r3
    }
    return;
 80105fe:	e035      	b.n	801066c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010608:	2b00      	cmp	r3, #0
 801060a:	d009      	beq.n	8010620 <HAL_UART_IRQHandler+0x5f4>
 801060c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010614:	2b00      	cmp	r3, #0
 8010616:	d003      	beq.n	8010620 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 fd7c 	bl	8011116 <UART_EndTransmit_IT>
    return;
 801061e:	e026      	b.n	801066e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010624:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010628:	2b00      	cmp	r3, #0
 801062a:	d009      	beq.n	8010640 <HAL_UART_IRQHandler+0x614>
 801062c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010630:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010634:	2b00      	cmp	r3, #0
 8010636:	d003      	beq.n	8010640 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f000 fdab 	bl	8011194 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801063e:	e016      	b.n	801066e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010648:	2b00      	cmp	r3, #0
 801064a:	d010      	beq.n	801066e <HAL_UART_IRQHandler+0x642>
 801064c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010650:	2b00      	cmp	r3, #0
 8010652:	da0c      	bge.n	801066e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fd93 	bl	8011180 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801065a:	e008      	b.n	801066e <HAL_UART_IRQHandler+0x642>
      return;
 801065c:	bf00      	nop
 801065e:	e006      	b.n	801066e <HAL_UART_IRQHandler+0x642>
    return;
 8010660:	bf00      	nop
 8010662:	e004      	b.n	801066e <HAL_UART_IRQHandler+0x642>
      return;
 8010664:	bf00      	nop
 8010666:	e002      	b.n	801066e <HAL_UART_IRQHandler+0x642>
      return;
 8010668:	bf00      	nop
 801066a:	e000      	b.n	801066e <HAL_UART_IRQHandler+0x642>
    return;
 801066c:	bf00      	nop
  }
}
 801066e:	37e8      	adds	r7, #232	@ 0xe8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801067c:	bf00      	nop
 801067e:	370c      	adds	r7, #12
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	460b      	mov	r3, r1
 80106a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80106a8:	bf00      	nop
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80106b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80106b8:	b08c      	sub	sp, #48	@ 0x30
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80106be:	2300      	movs	r3, #0
 80106c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	689a      	ldr	r2, [r3, #8]
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	691b      	ldr	r3, [r3, #16]
 80106cc:	431a      	orrs	r2, r3
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	695b      	ldr	r3, [r3, #20]
 80106d2:	431a      	orrs	r2, r3
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	69db      	ldr	r3, [r3, #28]
 80106d8:	4313      	orrs	r3, r2
 80106da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	4baa      	ldr	r3, [pc, #680]	@ (801098c <UART_SetConfig+0x2d8>)
 80106e4:	4013      	ands	r3, r2
 80106e6:	697a      	ldr	r2, [r7, #20]
 80106e8:	6812      	ldr	r2, [r2, #0]
 80106ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106ec:	430b      	orrs	r3, r1
 80106ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	68da      	ldr	r2, [r3, #12]
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	430a      	orrs	r2, r1
 8010704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	699b      	ldr	r3, [r3, #24]
 801070a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a9f      	ldr	r2, [pc, #636]	@ (8010990 <UART_SetConfig+0x2dc>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d004      	beq.n	8010720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	6a1b      	ldr	r3, [r3, #32]
 801071a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801071c:	4313      	orrs	r3, r2
 801071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	689b      	ldr	r3, [r3, #8]
 8010726:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801072a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	6812      	ldr	r2, [r2, #0]
 8010732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010734:	430b      	orrs	r3, r1
 8010736:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801073e:	f023 010f 	bic.w	r1, r3, #15
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	430a      	orrs	r2, r1
 801074c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4a90      	ldr	r2, [pc, #576]	@ (8010994 <UART_SetConfig+0x2e0>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d125      	bne.n	80107a4 <UART_SetConfig+0xf0>
 8010758:	4b8f      	ldr	r3, [pc, #572]	@ (8010998 <UART_SetConfig+0x2e4>)
 801075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801075e:	f003 0303 	and.w	r3, r3, #3
 8010762:	2b03      	cmp	r3, #3
 8010764:	d81a      	bhi.n	801079c <UART_SetConfig+0xe8>
 8010766:	a201      	add	r2, pc, #4	@ (adr r2, 801076c <UART_SetConfig+0xb8>)
 8010768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076c:	0801077d 	.word	0x0801077d
 8010770:	0801078d 	.word	0x0801078d
 8010774:	08010785 	.word	0x08010785
 8010778:	08010795 	.word	0x08010795
 801077c:	2301      	movs	r3, #1
 801077e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010782:	e116      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010784:	2302      	movs	r3, #2
 8010786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801078a:	e112      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801078c:	2304      	movs	r3, #4
 801078e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010792:	e10e      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010794:	2308      	movs	r3, #8
 8010796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801079a:	e10a      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801079c:	2310      	movs	r3, #16
 801079e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80107a2:	e106      	b.n	80109b2 <UART_SetConfig+0x2fe>
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4a7c      	ldr	r2, [pc, #496]	@ (801099c <UART_SetConfig+0x2e8>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d138      	bne.n	8010820 <UART_SetConfig+0x16c>
 80107ae:	4b7a      	ldr	r3, [pc, #488]	@ (8010998 <UART_SetConfig+0x2e4>)
 80107b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107b4:	f003 030c 	and.w	r3, r3, #12
 80107b8:	2b0c      	cmp	r3, #12
 80107ba:	d82d      	bhi.n	8010818 <UART_SetConfig+0x164>
 80107bc:	a201      	add	r2, pc, #4	@ (adr r2, 80107c4 <UART_SetConfig+0x110>)
 80107be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c2:	bf00      	nop
 80107c4:	080107f9 	.word	0x080107f9
 80107c8:	08010819 	.word	0x08010819
 80107cc:	08010819 	.word	0x08010819
 80107d0:	08010819 	.word	0x08010819
 80107d4:	08010809 	.word	0x08010809
 80107d8:	08010819 	.word	0x08010819
 80107dc:	08010819 	.word	0x08010819
 80107e0:	08010819 	.word	0x08010819
 80107e4:	08010801 	.word	0x08010801
 80107e8:	08010819 	.word	0x08010819
 80107ec:	08010819 	.word	0x08010819
 80107f0:	08010819 	.word	0x08010819
 80107f4:	08010811 	.word	0x08010811
 80107f8:	2300      	movs	r3, #0
 80107fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80107fe:	e0d8      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010800:	2302      	movs	r3, #2
 8010802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010806:	e0d4      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010808:	2304      	movs	r3, #4
 801080a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801080e:	e0d0      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010810:	2308      	movs	r3, #8
 8010812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010816:	e0cc      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010818:	2310      	movs	r3, #16
 801081a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801081e:	e0c8      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a5e      	ldr	r2, [pc, #376]	@ (80109a0 <UART_SetConfig+0x2ec>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d125      	bne.n	8010876 <UART_SetConfig+0x1c2>
 801082a:	4b5b      	ldr	r3, [pc, #364]	@ (8010998 <UART_SetConfig+0x2e4>)
 801082c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010830:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010834:	2b30      	cmp	r3, #48	@ 0x30
 8010836:	d016      	beq.n	8010866 <UART_SetConfig+0x1b2>
 8010838:	2b30      	cmp	r3, #48	@ 0x30
 801083a:	d818      	bhi.n	801086e <UART_SetConfig+0x1ba>
 801083c:	2b20      	cmp	r3, #32
 801083e:	d00a      	beq.n	8010856 <UART_SetConfig+0x1a2>
 8010840:	2b20      	cmp	r3, #32
 8010842:	d814      	bhi.n	801086e <UART_SetConfig+0x1ba>
 8010844:	2b00      	cmp	r3, #0
 8010846:	d002      	beq.n	801084e <UART_SetConfig+0x19a>
 8010848:	2b10      	cmp	r3, #16
 801084a:	d008      	beq.n	801085e <UART_SetConfig+0x1aa>
 801084c:	e00f      	b.n	801086e <UART_SetConfig+0x1ba>
 801084e:	2300      	movs	r3, #0
 8010850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010854:	e0ad      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010856:	2302      	movs	r3, #2
 8010858:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801085c:	e0a9      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801085e:	2304      	movs	r3, #4
 8010860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010864:	e0a5      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010866:	2308      	movs	r3, #8
 8010868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801086c:	e0a1      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801086e:	2310      	movs	r3, #16
 8010870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010874:	e09d      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4a4a      	ldr	r2, [pc, #296]	@ (80109a4 <UART_SetConfig+0x2f0>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d125      	bne.n	80108cc <UART_SetConfig+0x218>
 8010880:	4b45      	ldr	r3, [pc, #276]	@ (8010998 <UART_SetConfig+0x2e4>)
 8010882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010886:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801088a:	2bc0      	cmp	r3, #192	@ 0xc0
 801088c:	d016      	beq.n	80108bc <UART_SetConfig+0x208>
 801088e:	2bc0      	cmp	r3, #192	@ 0xc0
 8010890:	d818      	bhi.n	80108c4 <UART_SetConfig+0x210>
 8010892:	2b80      	cmp	r3, #128	@ 0x80
 8010894:	d00a      	beq.n	80108ac <UART_SetConfig+0x1f8>
 8010896:	2b80      	cmp	r3, #128	@ 0x80
 8010898:	d814      	bhi.n	80108c4 <UART_SetConfig+0x210>
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <UART_SetConfig+0x1f0>
 801089e:	2b40      	cmp	r3, #64	@ 0x40
 80108a0:	d008      	beq.n	80108b4 <UART_SetConfig+0x200>
 80108a2:	e00f      	b.n	80108c4 <UART_SetConfig+0x210>
 80108a4:	2300      	movs	r3, #0
 80108a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108aa:	e082      	b.n	80109b2 <UART_SetConfig+0x2fe>
 80108ac:	2302      	movs	r3, #2
 80108ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108b2:	e07e      	b.n	80109b2 <UART_SetConfig+0x2fe>
 80108b4:	2304      	movs	r3, #4
 80108b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108ba:	e07a      	b.n	80109b2 <UART_SetConfig+0x2fe>
 80108bc:	2308      	movs	r3, #8
 80108be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108c2:	e076      	b.n	80109b2 <UART_SetConfig+0x2fe>
 80108c4:	2310      	movs	r3, #16
 80108c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108ca:	e072      	b.n	80109b2 <UART_SetConfig+0x2fe>
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a35      	ldr	r2, [pc, #212]	@ (80109a8 <UART_SetConfig+0x2f4>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d12a      	bne.n	801092c <UART_SetConfig+0x278>
 80108d6:	4b30      	ldr	r3, [pc, #192]	@ (8010998 <UART_SetConfig+0x2e4>)
 80108d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80108e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80108e4:	d01a      	beq.n	801091c <UART_SetConfig+0x268>
 80108e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80108ea:	d81b      	bhi.n	8010924 <UART_SetConfig+0x270>
 80108ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108f0:	d00c      	beq.n	801090c <UART_SetConfig+0x258>
 80108f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108f6:	d815      	bhi.n	8010924 <UART_SetConfig+0x270>
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d003      	beq.n	8010904 <UART_SetConfig+0x250>
 80108fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010900:	d008      	beq.n	8010914 <UART_SetConfig+0x260>
 8010902:	e00f      	b.n	8010924 <UART_SetConfig+0x270>
 8010904:	2300      	movs	r3, #0
 8010906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801090a:	e052      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801090c:	2302      	movs	r3, #2
 801090e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010912:	e04e      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010914:	2304      	movs	r3, #4
 8010916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801091a:	e04a      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801091c:	2308      	movs	r3, #8
 801091e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010922:	e046      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010924:	2310      	movs	r3, #16
 8010926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801092a:	e042      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a17      	ldr	r2, [pc, #92]	@ (8010990 <UART_SetConfig+0x2dc>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d13a      	bne.n	80109ac <UART_SetConfig+0x2f8>
 8010936:	4b18      	ldr	r3, [pc, #96]	@ (8010998 <UART_SetConfig+0x2e4>)
 8010938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801093c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010940:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010944:	d01a      	beq.n	801097c <UART_SetConfig+0x2c8>
 8010946:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801094a:	d81b      	bhi.n	8010984 <UART_SetConfig+0x2d0>
 801094c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010950:	d00c      	beq.n	801096c <UART_SetConfig+0x2b8>
 8010952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010956:	d815      	bhi.n	8010984 <UART_SetConfig+0x2d0>
 8010958:	2b00      	cmp	r3, #0
 801095a:	d003      	beq.n	8010964 <UART_SetConfig+0x2b0>
 801095c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010960:	d008      	beq.n	8010974 <UART_SetConfig+0x2c0>
 8010962:	e00f      	b.n	8010984 <UART_SetConfig+0x2d0>
 8010964:	2300      	movs	r3, #0
 8010966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801096a:	e022      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801096c:	2302      	movs	r3, #2
 801096e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010972:	e01e      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010974:	2304      	movs	r3, #4
 8010976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801097a:	e01a      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801097c:	2308      	movs	r3, #8
 801097e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010982:	e016      	b.n	80109b2 <UART_SetConfig+0x2fe>
 8010984:	2310      	movs	r3, #16
 8010986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801098a:	e012      	b.n	80109b2 <UART_SetConfig+0x2fe>
 801098c:	cfff69f3 	.word	0xcfff69f3
 8010990:	40008000 	.word	0x40008000
 8010994:	40013800 	.word	0x40013800
 8010998:	40021000 	.word	0x40021000
 801099c:	40004400 	.word	0x40004400
 80109a0:	40004800 	.word	0x40004800
 80109a4:	40004c00 	.word	0x40004c00
 80109a8:	40005000 	.word	0x40005000
 80109ac:	2310      	movs	r3, #16
 80109ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	4aae      	ldr	r2, [pc, #696]	@ (8010c70 <UART_SetConfig+0x5bc>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	f040 8097 	bne.w	8010aec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80109be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80109c2:	2b08      	cmp	r3, #8
 80109c4:	d823      	bhi.n	8010a0e <UART_SetConfig+0x35a>
 80109c6:	a201      	add	r2, pc, #4	@ (adr r2, 80109cc <UART_SetConfig+0x318>)
 80109c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109cc:	080109f1 	.word	0x080109f1
 80109d0:	08010a0f 	.word	0x08010a0f
 80109d4:	080109f9 	.word	0x080109f9
 80109d8:	08010a0f 	.word	0x08010a0f
 80109dc:	080109ff 	.word	0x080109ff
 80109e0:	08010a0f 	.word	0x08010a0f
 80109e4:	08010a0f 	.word	0x08010a0f
 80109e8:	08010a0f 	.word	0x08010a0f
 80109ec:	08010a07 	.word	0x08010a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80109f0:	f7fd fcd4 	bl	800e39c <HAL_RCC_GetPCLK1Freq>
 80109f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80109f6:	e010      	b.n	8010a1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80109f8:	4b9e      	ldr	r3, [pc, #632]	@ (8010c74 <UART_SetConfig+0x5c0>)
 80109fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80109fc:	e00d      	b.n	8010a1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80109fe:	f7fd fc5f 	bl	800e2c0 <HAL_RCC_GetSysClockFreq>
 8010a02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010a04:	e009      	b.n	8010a1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010a0c:	e005      	b.n	8010a1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010a12:	2301      	movs	r3, #1
 8010a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f000 8130 	beq.w	8010c82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a26:	4a94      	ldr	r2, [pc, #592]	@ (8010c78 <UART_SetConfig+0x5c4>)
 8010a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	685a      	ldr	r2, [r3, #4]
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4413      	add	r3, r2
 8010a40:	69ba      	ldr	r2, [r7, #24]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d305      	bcc.n	8010a52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a4c:	69ba      	ldr	r2, [r7, #24]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d903      	bls.n	8010a5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010a58:	e113      	b.n	8010c82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	60bb      	str	r3, [r7, #8]
 8010a60:	60fa      	str	r2, [r7, #12]
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a66:	4a84      	ldr	r2, [pc, #528]	@ (8010c78 <UART_SetConfig+0x5c4>)
 8010a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	2200      	movs	r2, #0
 8010a70:	603b      	str	r3, [r7, #0]
 8010a72:	607a      	str	r2, [r7, #4]
 8010a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010a7c:	f7f0 f92c 	bl	8000cd8 <__aeabi_uldivmod>
 8010a80:	4602      	mov	r2, r0
 8010a82:	460b      	mov	r3, r1
 8010a84:	4610      	mov	r0, r2
 8010a86:	4619      	mov	r1, r3
 8010a88:	f04f 0200 	mov.w	r2, #0
 8010a8c:	f04f 0300 	mov.w	r3, #0
 8010a90:	020b      	lsls	r3, r1, #8
 8010a92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010a96:	0202      	lsls	r2, r0, #8
 8010a98:	6979      	ldr	r1, [r7, #20]
 8010a9a:	6849      	ldr	r1, [r1, #4]
 8010a9c:	0849      	lsrs	r1, r1, #1
 8010a9e:	2000      	movs	r0, #0
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	eb12 0804 	adds.w	r8, r2, r4
 8010aa8:	eb43 0905 	adc.w	r9, r3, r5
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	469a      	mov	sl, r3
 8010ab4:	4693      	mov	fp, r2
 8010ab6:	4652      	mov	r2, sl
 8010ab8:	465b      	mov	r3, fp
 8010aba:	4640      	mov	r0, r8
 8010abc:	4649      	mov	r1, r9
 8010abe:	f7f0 f90b 	bl	8000cd8 <__aeabi_uldivmod>
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010ad0:	d308      	bcc.n	8010ae4 <UART_SetConfig+0x430>
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010ad8:	d204      	bcs.n	8010ae4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	6a3a      	ldr	r2, [r7, #32]
 8010ae0:	60da      	str	r2, [r3, #12]
 8010ae2:	e0ce      	b.n	8010c82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010aea:	e0ca      	b.n	8010c82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	69db      	ldr	r3, [r3, #28]
 8010af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010af4:	d166      	bne.n	8010bc4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010afa:	2b08      	cmp	r3, #8
 8010afc:	d827      	bhi.n	8010b4e <UART_SetConfig+0x49a>
 8010afe:	a201      	add	r2, pc, #4	@ (adr r2, 8010b04 <UART_SetConfig+0x450>)
 8010b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b04:	08010b29 	.word	0x08010b29
 8010b08:	08010b31 	.word	0x08010b31
 8010b0c:	08010b39 	.word	0x08010b39
 8010b10:	08010b4f 	.word	0x08010b4f
 8010b14:	08010b3f 	.word	0x08010b3f
 8010b18:	08010b4f 	.word	0x08010b4f
 8010b1c:	08010b4f 	.word	0x08010b4f
 8010b20:	08010b4f 	.word	0x08010b4f
 8010b24:	08010b47 	.word	0x08010b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b28:	f7fd fc38 	bl	800e39c <HAL_RCC_GetPCLK1Freq>
 8010b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b2e:	e014      	b.n	8010b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b30:	f7fd fc4a 	bl	800e3c8 <HAL_RCC_GetPCLK2Freq>
 8010b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b36:	e010      	b.n	8010b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b38:	4b4e      	ldr	r3, [pc, #312]	@ (8010c74 <UART_SetConfig+0x5c0>)
 8010b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b3c:	e00d      	b.n	8010b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b3e:	f7fd fbbf 	bl	800e2c0 <HAL_RCC_GetSysClockFreq>
 8010b42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b44:	e009      	b.n	8010b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b4c:	e005      	b.n	8010b5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010b52:	2301      	movs	r3, #1
 8010b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f000 8090 	beq.w	8010c82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b66:	4a44      	ldr	r2, [pc, #272]	@ (8010c78 <UART_SetConfig+0x5c4>)
 8010b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b74:	005a      	lsls	r2, r3, #1
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	085b      	lsrs	r3, r3, #1
 8010b7c:	441a      	add	r2, r3
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b88:	6a3b      	ldr	r3, [r7, #32]
 8010b8a:	2b0f      	cmp	r3, #15
 8010b8c:	d916      	bls.n	8010bbc <UART_SetConfig+0x508>
 8010b8e:	6a3b      	ldr	r3, [r7, #32]
 8010b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b94:	d212      	bcs.n	8010bbc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010b96:	6a3b      	ldr	r3, [r7, #32]
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	f023 030f 	bic.w	r3, r3, #15
 8010b9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ba0:	6a3b      	ldr	r3, [r7, #32]
 8010ba2:	085b      	lsrs	r3, r3, #1
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	f003 0307 	and.w	r3, r3, #7
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	8bfb      	ldrh	r3, [r7, #30]
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	8bfa      	ldrh	r2, [r7, #30]
 8010bb8:	60da      	str	r2, [r3, #12]
 8010bba:	e062      	b.n	8010c82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010bc2:	e05e      	b.n	8010c82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010bc8:	2b08      	cmp	r3, #8
 8010bca:	d828      	bhi.n	8010c1e <UART_SetConfig+0x56a>
 8010bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8010bd4 <UART_SetConfig+0x520>)
 8010bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd2:	bf00      	nop
 8010bd4:	08010bf9 	.word	0x08010bf9
 8010bd8:	08010c01 	.word	0x08010c01
 8010bdc:	08010c09 	.word	0x08010c09
 8010be0:	08010c1f 	.word	0x08010c1f
 8010be4:	08010c0f 	.word	0x08010c0f
 8010be8:	08010c1f 	.word	0x08010c1f
 8010bec:	08010c1f 	.word	0x08010c1f
 8010bf0:	08010c1f 	.word	0x08010c1f
 8010bf4:	08010c17 	.word	0x08010c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010bf8:	f7fd fbd0 	bl	800e39c <HAL_RCC_GetPCLK1Freq>
 8010bfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010bfe:	e014      	b.n	8010c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c00:	f7fd fbe2 	bl	800e3c8 <HAL_RCC_GetPCLK2Freq>
 8010c04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c06:	e010      	b.n	8010c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c08:	4b1a      	ldr	r3, [pc, #104]	@ (8010c74 <UART_SetConfig+0x5c0>)
 8010c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c0c:	e00d      	b.n	8010c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c0e:	f7fd fb57 	bl	800e2c0 <HAL_RCC_GetSysClockFreq>
 8010c12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c14:	e009      	b.n	8010c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c1c:	e005      	b.n	8010c2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010c22:	2301      	movs	r3, #1
 8010c24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010c28:	bf00      	nop
    }

    if (pclk != 0U)
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d028      	beq.n	8010c82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c34:	4a10      	ldr	r2, [pc, #64]	@ (8010c78 <UART_SetConfig+0x5c4>)
 8010c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	085b      	lsrs	r3, r3, #1
 8010c48:	441a      	add	r2, r3
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c54:	6a3b      	ldr	r3, [r7, #32]
 8010c56:	2b0f      	cmp	r3, #15
 8010c58:	d910      	bls.n	8010c7c <UART_SetConfig+0x5c8>
 8010c5a:	6a3b      	ldr	r3, [r7, #32]
 8010c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c60:	d20c      	bcs.n	8010c7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010c62:	6a3b      	ldr	r3, [r7, #32]
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	60da      	str	r2, [r3, #12]
 8010c6c:	e009      	b.n	8010c82 <UART_SetConfig+0x5ce>
 8010c6e:	bf00      	nop
 8010c70:	40008000 	.word	0x40008000
 8010c74:	00f42400 	.word	0x00f42400
 8010c78:	080193d8 	.word	0x080193d8
      }
      else
      {
        ret = HAL_ERROR;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	2201      	movs	r2, #1
 8010c86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	2200      	movs	r2, #0
 8010c96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010c9e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3730      	adds	r7, #48	@ 0x30
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cb8:	f003 0308 	and.w	r3, r3, #8
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d00a      	beq.n	8010cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	430a      	orrs	r2, r1
 8010cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cda:	f003 0301 	and.w	r3, r3, #1
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d00a      	beq.n	8010cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	430a      	orrs	r2, r1
 8010cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cfc:	f003 0302 	and.w	r3, r3, #2
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00a      	beq.n	8010d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	430a      	orrs	r2, r1
 8010d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d1e:	f003 0304 	and.w	r3, r3, #4
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00a      	beq.n	8010d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	430a      	orrs	r2, r1
 8010d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d40:	f003 0310 	and.w	r3, r3, #16
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d00a      	beq.n	8010d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	689b      	ldr	r3, [r3, #8]
 8010d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	430a      	orrs	r2, r1
 8010d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d62:	f003 0320 	and.w	r3, r3, #32
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00a      	beq.n	8010d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	689b      	ldr	r3, [r3, #8]
 8010d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	430a      	orrs	r2, r1
 8010d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d01a      	beq.n	8010dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	430a      	orrs	r2, r1
 8010da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010daa:	d10a      	bne.n	8010dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	430a      	orrs	r2, r1
 8010dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00a      	beq.n	8010de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	430a      	orrs	r2, r1
 8010de2:	605a      	str	r2, [r3, #4]
  }
}
 8010de4:	bf00      	nop
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b098      	sub	sp, #96	@ 0x60
 8010df4:	af02      	add	r7, sp, #8
 8010df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010e00:	f7f9 fe38 	bl	800aa74 <HAL_GetTick>
 8010e04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f003 0308 	and.w	r3, r3, #8
 8010e10:	2b08      	cmp	r3, #8
 8010e12:	d12f      	bne.n	8010e74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010e18:	9300      	str	r3, [sp, #0]
 8010e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 f88e 	bl	8010f44 <UART_WaitOnFlagUntilTimeout>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d022      	beq.n	8010e74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e36:	e853 3f00 	ldrex	r3, [r3]
 8010e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	461a      	mov	r2, r3
 8010e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e54:	e841 2300 	strex	r3, r2, [r1]
 8010e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d1e6      	bne.n	8010e2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2220      	movs	r2, #32
 8010e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e70:	2303      	movs	r3, #3
 8010e72:	e063      	b.n	8010f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f003 0304 	and.w	r3, r3, #4
 8010e7e:	2b04      	cmp	r3, #4
 8010e80:	d149      	bne.n	8010f16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f857 	bl	8010f44 <UART_WaitOnFlagUntilTimeout>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d03c      	beq.n	8010f16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea4:	e853 3f00 	ldrex	r3, [r3]
 8010ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8010eaa:	6a3b      	ldr	r3, [r7, #32]
 8010eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eba:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ec2:	e841 2300 	strex	r3, r2, [r1]
 8010ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1e6      	bne.n	8010e9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3308      	adds	r3, #8
 8010ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	e853 3f00 	ldrex	r3, [r3]
 8010edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f023 0301 	bic.w	r3, r3, #1
 8010ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	3308      	adds	r3, #8
 8010eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010eee:	61fa      	str	r2, [r7, #28]
 8010ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef2:	69b9      	ldr	r1, [r7, #24]
 8010ef4:	69fa      	ldr	r2, [r7, #28]
 8010ef6:	e841 2300 	strex	r3, r2, [r1]
 8010efa:	617b      	str	r3, [r7, #20]
   return(result);
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e5      	bne.n	8010ece <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2220      	movs	r2, #32
 8010f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f12:	2303      	movs	r3, #3
 8010f14:	e012      	b.n	8010f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2220      	movs	r2, #32
 8010f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2220      	movs	r2, #32
 8010f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3758      	adds	r7, #88	@ 0x58
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	603b      	str	r3, [r7, #0]
 8010f50:	4613      	mov	r3, r2
 8010f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f54:	e04f      	b.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5c:	d04b      	beq.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f5e:	f7f9 fd89 	bl	800aa74 <HAL_GetTick>
 8010f62:	4602      	mov	r2, r0
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	1ad3      	subs	r3, r2, r3
 8010f68:	69ba      	ldr	r2, [r7, #24]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d302      	bcc.n	8010f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8010f6e:	69bb      	ldr	r3, [r7, #24]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d101      	bne.n	8010f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010f74:	2303      	movs	r3, #3
 8010f76:	e04e      	b.n	8011016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f003 0304 	and.w	r3, r3, #4
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d037      	beq.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	2b80      	cmp	r3, #128	@ 0x80
 8010f8a:	d034      	beq.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2b40      	cmp	r3, #64	@ 0x40
 8010f90:	d031      	beq.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	69db      	ldr	r3, [r3, #28]
 8010f98:	f003 0308 	and.w	r3, r3, #8
 8010f9c:	2b08      	cmp	r3, #8
 8010f9e:	d110      	bne.n	8010fc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	2208      	movs	r2, #8
 8010fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f000 f838 	bl	801101e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2208      	movs	r2, #8
 8010fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e029      	b.n	8011016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	69db      	ldr	r3, [r3, #28]
 8010fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010fd0:	d111      	bne.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f000 f81e 	bl	801101e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2220      	movs	r2, #32
 8010fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2200      	movs	r2, #0
 8010fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010ff2:	2303      	movs	r3, #3
 8010ff4:	e00f      	b.n	8011016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	69da      	ldr	r2, [r3, #28]
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	4013      	ands	r3, r2
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	429a      	cmp	r2, r3
 8011004:	bf0c      	ite	eq
 8011006:	2301      	moveq	r3, #1
 8011008:	2300      	movne	r3, #0
 801100a:	b2db      	uxtb	r3, r3
 801100c:	461a      	mov	r2, r3
 801100e:	79fb      	ldrb	r3, [r7, #7]
 8011010:	429a      	cmp	r2, r3
 8011012:	d0a0      	beq.n	8010f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801101e:	b480      	push	{r7}
 8011020:	b095      	sub	sp, #84	@ 0x54
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801102e:	e853 3f00 	ldrex	r3, [r3]
 8011032:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801103a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011044:	643b      	str	r3, [r7, #64]	@ 0x40
 8011046:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801104a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801104c:	e841 2300 	strex	r3, r2, [r1]
 8011050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e6      	bne.n	8011026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	3308      	adds	r3, #8
 801105e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011060:	6a3b      	ldr	r3, [r7, #32]
 8011062:	e853 3f00 	ldrex	r3, [r3]
 8011066:	61fb      	str	r3, [r7, #28]
   return(result);
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801106e:	f023 0301 	bic.w	r3, r3, #1
 8011072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	3308      	adds	r3, #8
 801107a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801107c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801107e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011084:	e841 2300 	strex	r3, r2, [r1]
 8011088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108c:	2b00      	cmp	r3, #0
 801108e:	d1e3      	bne.n	8011058 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011094:	2b01      	cmp	r3, #1
 8011096:	d118      	bne.n	80110ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	e853 3f00 	ldrex	r3, [r3]
 80110a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	f023 0310 	bic.w	r3, r3, #16
 80110ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	461a      	mov	r2, r3
 80110b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110b6:	61bb      	str	r3, [r7, #24]
 80110b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ba:	6979      	ldr	r1, [r7, #20]
 80110bc:	69ba      	ldr	r2, [r7, #24]
 80110be:	e841 2300 	strex	r3, r2, [r1]
 80110c2:	613b      	str	r3, [r7, #16]
   return(result);
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1e6      	bne.n	8011098 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2220      	movs	r2, #32
 80110ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2200      	movs	r2, #0
 80110d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80110de:	bf00      	nop
 80110e0:	3754      	adds	r7, #84	@ 0x54
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr

080110ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b084      	sub	sp, #16
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2200      	movs	r2, #0
 80110fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2200      	movs	r2, #0
 8011104:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	f7ff fabd 	bl	8010688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801110e:	bf00      	nop
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b088      	sub	sp, #32
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	e853 3f00 	ldrex	r3, [r3]
 801112a:	60bb      	str	r3, [r7, #8]
   return(result);
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011132:	61fb      	str	r3, [r7, #28]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	461a      	mov	r2, r3
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	61bb      	str	r3, [r7, #24]
 801113e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011140:	6979      	ldr	r1, [r7, #20]
 8011142:	69ba      	ldr	r2, [r7, #24]
 8011144:	e841 2300 	strex	r3, r2, [r1]
 8011148:	613b      	str	r3, [r7, #16]
   return(result);
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d1e6      	bne.n	801111e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2220      	movs	r2, #32
 8011154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2200      	movs	r2, #0
 801115c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f7ff fa88 	bl	8010674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011164:	bf00      	nop
 8011166:	3720      	adds	r7, #32
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011174:	bf00      	nop
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011188:	bf00      	nop
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d101      	bne.n	80111be <HAL_UARTEx_DisableFifoMode+0x16>
 80111ba:	2302      	movs	r3, #2
 80111bc:	e027      	b.n	801120e <HAL_UARTEx_DisableFifoMode+0x66>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2201      	movs	r2, #1
 80111c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2224      	movs	r2, #36	@ 0x24
 80111ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f022 0201 	bic.w	r2, r2, #1
 80111e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80111ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2200      	movs	r2, #0
 80111f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	68fa      	ldr	r2, [r7, #12]
 80111fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2220      	movs	r2, #32
 8011200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3714      	adds	r7, #20
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b084      	sub	sp, #16
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801122a:	2b01      	cmp	r3, #1
 801122c:	d101      	bne.n	8011232 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801122e:	2302      	movs	r3, #2
 8011230:	e02d      	b.n	801128e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2201      	movs	r2, #1
 8011236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2224      	movs	r2, #36	@ 0x24
 801123e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f022 0201 	bic.w	r2, r2, #1
 8011258:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	689b      	ldr	r3, [r3, #8]
 8011260:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	683a      	ldr	r2, [r7, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 f850 	bl	8011314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	68fa      	ldr	r2, [r7, #12]
 801127a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2220      	movs	r2, #32
 8011280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2200      	movs	r2, #0
 8011288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	3710      	adds	r7, #16
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b084      	sub	sp, #16
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
 801129e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d101      	bne.n	80112ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80112aa:	2302      	movs	r3, #2
 80112ac:	e02d      	b.n	801130a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2224      	movs	r2, #36	@ 0x24
 80112ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f022 0201 	bic.w	r2, r2, #1
 80112d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	683a      	ldr	r2, [r7, #0]
 80112e6:	430a      	orrs	r2, r1
 80112e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f000 f812 	bl	8011314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2220      	movs	r2, #32
 80112fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
	...

08011314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011314:	b480      	push	{r7}
 8011316:	b085      	sub	sp, #20
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011320:	2b00      	cmp	r3, #0
 8011322:	d108      	bne.n	8011336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2201      	movs	r2, #1
 8011328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2201      	movs	r2, #1
 8011330:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011334:	e031      	b.n	801139a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011336:	2308      	movs	r3, #8
 8011338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801133a:	2308      	movs	r3, #8
 801133c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	0e5b      	lsrs	r3, r3, #25
 8011346:	b2db      	uxtb	r3, r3
 8011348:	f003 0307 	and.w	r3, r3, #7
 801134c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	689b      	ldr	r3, [r3, #8]
 8011354:	0f5b      	lsrs	r3, r3, #29
 8011356:	b2db      	uxtb	r3, r3
 8011358:	f003 0307 	and.w	r3, r3, #7
 801135c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801135e:	7bbb      	ldrb	r3, [r7, #14]
 8011360:	7b3a      	ldrb	r2, [r7, #12]
 8011362:	4911      	ldr	r1, [pc, #68]	@ (80113a8 <UARTEx_SetNbDataToProcess+0x94>)
 8011364:	5c8a      	ldrb	r2, [r1, r2]
 8011366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801136a:	7b3a      	ldrb	r2, [r7, #12]
 801136c:	490f      	ldr	r1, [pc, #60]	@ (80113ac <UARTEx_SetNbDataToProcess+0x98>)
 801136e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011370:	fb93 f3f2 	sdiv	r3, r3, r2
 8011374:	b29a      	uxth	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801137c:	7bfb      	ldrb	r3, [r7, #15]
 801137e:	7b7a      	ldrb	r2, [r7, #13]
 8011380:	4909      	ldr	r1, [pc, #36]	@ (80113a8 <UARTEx_SetNbDataToProcess+0x94>)
 8011382:	5c8a      	ldrb	r2, [r1, r2]
 8011384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011388:	7b7a      	ldrb	r2, [r7, #13]
 801138a:	4908      	ldr	r1, [pc, #32]	@ (80113ac <UARTEx_SetNbDataToProcess+0x98>)
 801138c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801138e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011392:	b29a      	uxth	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801139a:	bf00      	nop
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	080193f0 	.word	0x080193f0
 80113ac:	080193f8 	.word	0x080193f8

080113b0 <_ZN17AbstractAllocatorD1Ev>:
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	4a04      	ldr	r2, [pc, #16]	@ (80113cc <_ZN17AbstractAllocatorD1Ev+0x1c>)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4618      	mov	r0, r3
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	08019384 	.word	0x08019384

080113d0 <_ZN17AbstractAllocatorD0Ev>:
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7ff ffe9 	bl	80113b0 <_ZN17AbstractAllocatorD1Ev>
 80113de:	2108      	movs	r1, #8
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f002 fe7a 	bl	80140da <_ZdlPvj>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include <cyphal/allocators/sys/sys_allocator.h>
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b086      	sub	sp, #24
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f002 fec5 	bl	801418c <malloc>
 8011402:	4603      	mov	r3, r0
 8011404:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d105      	bne.n	8011418 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	3310      	adds	r3, #16
 8011412:	4618      	mov	r0, r3
 8011414:	f7f6 fa30 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 8011418:	697b      	ldr	r3, [r7, #20]
}
 801141a:	4618      	mov	r0, r3
 801141c:	3718      	adds	r7, #24
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 8011422:	b580      	push	{r7, lr}
 8011424:	b084      	sub	sp, #16
 8011426:	af00      	add	r7, sp, #0
 8011428:	60f8      	str	r0, [r7, #12]
 801142a:	60b9      	str	r1, [r7, #8]
 801142c:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f002 feb4 	bl	801419c <free>
}
 8011434:	bf00      	nop
 8011436:	3710      	adds	r7, #16
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	4a05      	ldr	r2, [pc, #20]	@ (801145c <_ZN15SystemAllocatorD1Ev+0x20>)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	601a      	str	r2, [r3, #0]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	f7ff ffaf 	bl	80113b0 <_ZN17AbstractAllocatorD1Ev>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4618      	mov	r0, r3
 8011456:	3708      	adds	r7, #8
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	08019408 	.word	0x08019408

08011460 <_ZN15SystemAllocatorD0Ev>:
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff ffe7 	bl	801143c <_ZN15SystemAllocatorD1Ev>
 801146e:	2108      	movs	r1, #8
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f002 fe32 	bl	80140da <_ZdlPvj>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4618      	mov	r0, r3
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 8011480:	b590      	push	{r4, r7, lr}
 8011482:	b08b      	sub	sp, #44	@ 0x2c
 8011484:	af04      	add	r7, sp, #16
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	3308      	adds	r3, #8
 8011490:	4618      	mov	r0, r3
 8011492:	f000 f876 	bl	8011582 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8011496:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8011498:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	3308      	adds	r3, #8
 80114a0:	4618      	mov	r0, r3
 80114a2:	f000 f86e 	bl	8011582 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 80114a6:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 80114a8:	f103 0120 	add.w	r1, r3, #32
 80114ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ae:	9302      	str	r3, [sp, #8]
 80114b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b2:	9301      	str	r3, [sp, #4]
 80114b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114bc:	4620      	mov	r0, r4
 80114be:	f002 fb65 	bl	8013b8c <canardTxPush>
 80114c2:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	f113 0f03 	cmn.w	r3, #3
 80114ca:	d106      	bne.n	80114da <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	3310      	adds	r3, #16
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7f6 f9d0 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 80114d8:	e008      	b.n	80114ec <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da05      	bge.n	80114ec <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	3310      	adds	r3, #16
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7f6 f9c6 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80114ec:	371c      	adds	r7, #28
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd90      	pop	{r4, r7, pc}
	...

080114f4 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 80114f4:	b590      	push	{r4, r7, lr}
 80114f6:	b089      	sub	sp, #36	@ 0x24
 80114f8:	af04      	add	r7, sp, #16
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	607a      	str	r2, [r7, #4]
 80114fe:	461a      	mov	r2, r3
 8011500:	460b      	mov	r3, r1
 8011502:	817b      	strh	r3, [r7, #10]
 8011504:	4613      	mov	r3, r2
 8011506:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	3308      	adds	r3, #8
 801150c:	4618      	mov	r0, r3
 801150e:	f000 f838 	bl	8011582 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8011512:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 8011514:	f103 0020 	add.w	r0, r3, #32
 8011518:	897c      	ldrh	r4, [r7, #10]
 801151a:	7a79      	ldrb	r1, [r7, #9]
 801151c:	6a3b      	ldr	r3, [r7, #32]
 801151e:	9302      	str	r3, [sp, #8]
 8011520:	4a0d      	ldr	r2, [pc, #52]	@ (8011558 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 8011522:	f04f 0300 	mov.w	r3, #0
 8011526:	e9cd 2300 	strd	r2, r3, [sp]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4622      	mov	r2, r4
 801152e:	f002 fc7d 	bl	8013e2c <canardRxSubscribe>
 8011532:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 8011534:	2b01      	cmp	r3, #1
 8011536:	bf14      	ite	ne
 8011538:	2301      	movne	r3, #1
 801153a:	2300      	moveq	r3, #0
 801153c:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 801153e:	2b00      	cmp	r3, #0
 8011540:	d005      	beq.n	801154e <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	3310      	adds	r3, #16
 8011548:	4618      	mov	r0, r3
 801154a:	f7f6 f995 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    }
}
 801154e:	bf00      	nop
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	bd90      	pop	{r4, r7, pc}
 8011556:	bf00      	nop
 8011558:	001e8480 	.word	0x001e8480

0801155c <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	3308      	adds	r3, #8
 8011568:	4618      	mov	r0, r3
 801156a:	f000 f80a 	bl	8011582 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 801156e:	4603      	mov	r3, r0
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	3208      	adds	r2, #8
 8011574:	6812      	ldr	r2, [r2, #0]
 8011576:	4618      	mov	r0, r3
 8011578:	4790      	blx	r2
}
 801157a:	bf00      	nop
 801157c:	3708      	adds	r7, #8
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}

08011582 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8011582:	b580      	push	{r7, lr}
 8011584:	b082      	sub	sp, #8
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
	return get();
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f000 f805 	bl	801159a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 8011590:	4603      	mov	r3, r0
      }
 8011592:	4618      	mov	r0, r3
 8011594:	3708      	adds	r7, #8
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 801159a:	b580      	push	{r7, lr}
 801159c:	b082      	sub	sp, #8
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f000 f805 	bl	80115b4 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 80115aa:	4603      	mov	r3, r0
 80115ac:	4618      	mov	r0, r3
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4618      	mov	r0, r3
 80115c0:	f000 f806 	bl	80115d0 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80115c4:	4603      	mov	r3, r0
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4618      	mov	r0, r3
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4618      	mov	r0, r3
 80115dc:	f000 f805 	bl	80115ea <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80115e0:	4603      	mov	r3, r0
 80115e2:	4618      	mov	r0, r3
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b082      	sub	sp, #8
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 f805 	bl	8011602 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 80115f8:	4603      	mov	r3, r0
 80115fa:	4618      	mov	r0, r3
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011602:	b580      	push	{r7, lr}
 8011604:	b082      	sub	sp, #8
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	f000 f805 	bl	801161c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 8011612:	4603      	mov	r3, r0
 8011614:	4618      	mov	r0, r3
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4618      	mov	r0, r3
 8011628:	370c      	adds	r7, #12
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr

08011632 <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 8011632:	b480      	push	{r7}
 8011634:	b085      	sub	sp, #20
 8011636:	af00      	add	r7, sp, #0
 8011638:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	0c1b      	lsrs	r3, r3, #16
 801163e:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 8011640:	7bfb      	ldrb	r3, [r7, #15]
 8011642:	2b08      	cmp	r3, #8
 8011644:	d801      	bhi.n	801164a <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 8011646:	7bfb      	ldrb	r3, [r7, #15]
 8011648:	e009      	b.n	801165e <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 801164a:	7bfb      	ldrb	r3, [r7, #15]
 801164c:	2b0c      	cmp	r3, #12
 801164e:	d803      	bhi.n	8011658 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 8011650:	7bfb      	ldrb	r3, [r7, #15]
 8011652:	3b06      	subs	r3, #6
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	e002      	b.n	801165e <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 8011658:	7bfb      	ldrb	r3, [r7, #15]
 801165a:	3b0b      	subs	r3, #11
 801165c:	011b      	lsls	r3, r3, #4
}
 801165e:	4618      	mov	r0, r3
 8011660:	3714      	adds	r7, #20
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr
	...

0801166c <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 801166c:	f1a0 0308 	sub.w	r3, r0, #8
 8011670:	4a07      	ldr	r2, [pc, #28]	@ (8011690 <_ZL12delay_cyclest+0x24>)
 8011672:	fb82 1203 	smull	r1, r2, r2, r3
 8011676:	17db      	asrs	r3, r3, #31
 8011678:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 801167c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8011680:	d004      	beq.n	801168c <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 8011682:	bf00      	nop
    while (real_cycles--) {
 8011684:	3b01      	subs	r3, #1
 8011686:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801168a:	d1fa      	bne.n	8011682 <_ZL12delay_cyclest+0x16>
    }
}
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	66666667 	.word	0x66666667

08011694 <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include <cyphal/providers/FDCAN_generic.h>

uint32_t G4CAN::len_to_dlc(size_t len) {
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 801169e:	4a05      	ldr	r2, [pc, #20]	@ (80116b4 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	08019418 	.word	0x08019418

080116b8 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 80116c2:	6838      	ldr	r0, [r7, #0]
 80116c4:	f7ff ffb5 	bl	8011632 <_Z16fdcan_dlc_to_lenm>
 80116c8:	4603      	mov	r3, r0
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3708      	adds	r7, #8
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b086      	sub	sp, #24
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 80116da:	e017      	b.n	801170c <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	330c      	adds	r3, #12
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f107 0208 	add.w	r2, r7, #8
 80116e8:	4611      	mov	r1, r2
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	4798      	blx	r3
 80116ee:	4603      	mov	r3, r0
 80116f0:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 80116f2:	7dfb      	ldrb	r3, [r7, #23]
 80116f4:	f083 0301 	eor.w	r3, r3, #1
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d115      	bne.n	801172a <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f107 0208 	add.w	r2, r7, #8
 8011704:	4611      	mov	r1, r2
 8011706:	4618      	mov	r0, r3
 8011708:	f000 f904 	bl	8011914 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011710:	2140      	movs	r1, #64	@ 0x40
 8011712:	4618      	mov	r0, r3
 8011714:	f7fa f910 	bl	800b938 <HAL_FDCAN_GetRxFifoFillLevel>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	bf14      	ite	ne
 801171e:	2301      	movne	r3, #1
 8011720:	2300      	moveq	r3, #0
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b00      	cmp	r3, #0
 8011726:	d1d9      	bne.n	80116dc <_ZN5G4CAN8can_loopEv+0xa>
 8011728:	e000      	b.n	801172c <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 801172a:	bf00      	nop
    }

    process_canard_tx();
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 f944 	bl	80119bc <_ZN19AbstractCANProvider17process_canard_txEv>
}
 8011734:	bf00      	nop
 8011736:	3718      	adds	r7, #24
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};
bool G4CAN::read_frame(CanardFrame* rxf) {
 801173c:	b580      	push	{r7, lr}
 801173e:	b08e      	sub	sp, #56	@ 0x38
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
    uint32_t rx_fifo = -1;
 8011746:	f04f 33ff 	mov.w	r3, #4294967295
 801174a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011750:	2140      	movs	r1, #64	@ 0x40
 8011752:	4618      	mov	r0, r3
 8011754:	f7fa f8f0 	bl	800b938 <HAL_FDCAN_GetRxFifoFillLevel>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	bf14      	ite	ne
 801175e:	2301      	movne	r3, #1
 8011760:	2300      	moveq	r3, #0
 8011762:	b2db      	uxtb	r3, r3
 8011764:	2b00      	cmp	r3, #0
 8011766:	d002      	beq.n	801176e <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 8011768:	2340      	movs	r3, #64	@ 0x40
 801176a:	637b      	str	r3, [r7, #52]	@ 0x34
 801176c:	e00f      	b.n	801178e <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011772:	2141      	movs	r1, #65	@ 0x41
 8011774:	4618      	mov	r0, r3
 8011776:	f7fa f8df 	bl	800b938 <HAL_FDCAN_GetRxFifoFillLevel>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	bf14      	ite	ne
 8011780:	2301      	movne	r3, #1
 8011782:	2300      	moveq	r3, #0
 8011784:	b2db      	uxtb	r3, r3
 8011786:	2b00      	cmp	r3, #0
 8011788:	d001      	beq.n	801178e <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 801178a:	2341      	movs	r3, #65	@ 0x41
 801178c:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 801178e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011794:	d101      	bne.n	801179a <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 8011796:	2300      	movs	r3, #0
 8011798:	e02e      	b.n	80117f8 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 801179a:	f107 030c 	add.w	r3, r7, #12
 801179e:	2228      	movs	r2, #40	@ 0x28
 80117a0:	2100      	movs	r1, #0
 80117a2:	4618      	mov	r0, r3
 80117a4:	f003 fd7d 	bl	80152a2 <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80117ac:	f107 020c 	add.w	r2, r7, #12
 80117b0:	4b13      	ldr	r3, [pc, #76]	@ (8011800 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 80117b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80117b4:	f7f9 ffb8 	bl	800b728 <HAL_FDCAN_GetRxMessage>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	bf14      	ite	ne
 80117be:	2301      	movne	r3, #1
 80117c0:	2300      	moveq	r3, #0
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d005      	beq.n	80117d4 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117cc:	3310      	adds	r3, #16
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7f6 f852 	bl	8007878 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	3304      	adds	r3, #4
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	69ba      	ldr	r2, [r7, #24]
 80117e4:	4611      	mov	r1, r2
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	4798      	blx	r3
 80117ea:	4602      	mov	r2, r0
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	4a03      	ldr	r2, [pc, #12]	@ (8011800 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 80117f4:	609a      	str	r2, [r3, #8]
    return true;
 80117f6:	2301      	movs	r3, #1
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3738      	adds	r7, #56	@ 0x38
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	20000a20 	.word	0x20000a20

08011804 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 8011804:	b580      	push	{r7, lr}
 8011806:	b08c      	sub	sp, #48	@ 0x30
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	6a1b      	ldr	r3, [r3, #32]
 8011812:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8011814:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011818:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 801181a:	2300      	movs	r3, #0
 801181c:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011822:	4a2a      	ldr	r2, [pc, #168]	@ (80118cc <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 8011824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011828:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 801182a:	2300      	movs	r3, #0
 801182c:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 801182e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011832:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8011834:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011838:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 801183a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801183e:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0x0;
 8011840:	2300      	movs	r3, #0
 8011842:	62bb      	str	r3, [r7, #40]	@ 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8011844:	2300      	movs	r3, #0
 8011846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011848:	e006      	b.n	8011858 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 801184a:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 801184e:	f7ff ff0d 	bl	801166c <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8011852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011854:	3301      	adds	r3, #1
 8011856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801185c:	4618      	mov	r0, r3
 801185e:	f7fa f889 	bl	800b974 <HAL_FDCAN_GetTxFifoFreeLevel>
 8011862:	4603      	mov	r3, r0
 8011864:	2b03      	cmp	r3, #3
 8011866:	d004      	beq.n	8011872 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8011868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801186a:	2b02      	cmp	r3, #2
 801186c:	dc01      	bgt.n	8011872 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 801186e:	2301      	movs	r3, #1
 8011870:	e000      	b.n	8011874 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 8011872:	2300      	movs	r3, #0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1e8      	bne.n	801184a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801187c:	4618      	mov	r0, r3
 801187e:	f7fa f879 	bl	800b974 <HAL_FDCAN_GetTxFifoFreeLevel>
 8011882:	4603      	mov	r3, r0
 8011884:	2b03      	cmp	r3, #3
 8011886:	bf14      	ite	ne
 8011888:	2301      	movne	r3, #1
 801188a:	2300      	moveq	r3, #0
 801188c:	b2db      	uxtb	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	d002      	beq.n	8011898 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 8011892:	f04f 33ff 	mov.w	r3, #4294967295
 8011896:	e014      	b.n	80118c2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80118a0:	f107 0308 	add.w	r3, r7, #8
 80118a4:	4619      	mov	r1, r3
 80118a6:	f7f9 fefb 	bl	800b6a0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bf14      	ite	ne
 80118b0:	2301      	movne	r3, #1
 80118b2:	2300      	moveq	r3, #0
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d002      	beq.n	80118c0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 80118ba:	f04f 33ff 	mov.w	r3, #4294967295
 80118be:	e000      	b.n	80118c2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 80118c0:	697b      	ldr	r3, [r7, #20]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3730      	adds	r7, #48	@ 0x30
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	08019418 	.word	0x08019418

080118d0 <_ZN5G4CAND1Ev>:
class G4CAN : public AbstractCANProvider {
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	4a05      	ldr	r2, [pc, #20]	@ (80118f0 <_ZN5G4CAND1Ev+0x20>)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4618      	mov	r0, r3
 80118e2:	f000 f8b1 	bl	8011a48 <_ZN19AbstractCANProviderD1Ev>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4618      	mov	r0, r3
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	08019524 	.word	0x08019524

080118f4 <_ZN5G4CAND0Ev>:
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7ff ffe7 	bl	80118d0 <_ZN5G4CAND1Ev>
 8011902:	2144      	movs	r1, #68	@ 0x44
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f002 fbe8 	bl	80140da <_ZdlPvj>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 8011914:	b590      	push	{r4, r7, lr}
 8011916:	b091      	sub	sp, #68	@ 0x44
 8011918:	af04      	add	r7, sp, #16
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 801191e:	f107 0310 	add.w	r3, r7, #16
 8011922:	2200      	movs	r2, #0
 8011924:	601a      	str	r2, [r3, #0]
 8011926:	605a      	str	r2, [r3, #4]
 8011928:	609a      	str	r2, [r3, #8]
 801192a:	60da      	str	r2, [r3, #12]
 801192c:	611a      	str	r2, [r3, #16]
 801192e:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 8011930:	2300      	movs	r3, #0
 8011932:	60fb      	str	r3, [r7, #12]

    const int8_t accept_result = canardRxAccept(
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    const int8_t accept_result = canardRxAccept(
 801193e:	4618      	mov	r0, r3
 8011940:	f7f5 ffb0 	bl	80078a4 <_ZNKSt8functionIFyvEEclEv>
 8011944:	4602      	mov	r2, r0
 8011946:	460b      	mov	r3, r1
 8011948:	f107 010c 	add.w	r1, r7, #12
 801194c:	9103      	str	r1, [sp, #12]
 801194e:	f107 0110 	add.w	r1, r7, #16
 8011952:	9102      	str	r1, [sp, #8]
 8011954:	2100      	movs	r1, #0
 8011956:	9101      	str	r1, [sp, #4]
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	9100      	str	r1, [sp, #0]
 801195c:	4620      	mov	r0, r4
 801195e:	f002 f9d5 	bl	8013d0c <canardRxAccept>
 8011962:	4603      	mov	r3, r0
 8011964:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 1) {
 8011968:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801196c:	2b01      	cmp	r3, #1
 801196e:	d10e      	bne.n	801198e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
        IListener<CanardRxTransfer*>* listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6a1b      	ldr	r3, [r3, #32]
 8011974:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (listener != nullptr) {
 8011976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011978:	2b00      	cmp	r3, #0
 801197a:	d010      	beq.n	801199e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
            listener->accept(&transfer);
 801197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f107 0210 	add.w	r2, r7, #16
 8011986:	4611      	mov	r1, r2
 8011988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801198a:	4798      	blx	r3
 801198c:	e007      	b.n	801199e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
        }
    }
    else if (accept_result == 0 || accept_result > 1) {
 801198e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00e      	beq.n	80119b4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 8011996:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801199a:	2b01      	cmp	r3, #1
 801199c:	dc0a      	bgt.n	80119b4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }

    if (transfer.payload != nullptr) {
 801199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d008      	beq.n	80119b6 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        canard.memory_free(&canard, transfer.payload);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	3220      	adds	r2, #32
 80119ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80119ae:	4610      	mov	r0, r2
 80119b0:	4798      	blx	r3
 80119b2:	e000      	b.n	80119b6 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        return;
 80119b4:	bf00      	nop
    }
}
 80119b6:	3734      	adds	r7, #52	@ 0x34
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd90      	pop	{r4, r7, pc}

080119bc <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 80119bc:	b5b0      	push	{r4, r5, r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 80119c4:	e036      	b.n	8011a34 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	330c      	adds	r3, #12
 80119ca:	4618      	mov	r0, r3
 80119cc:	f002 f968 	bl	8013ca0 <canardTxPeek>
 80119d0:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80119d8:	4313      	orrs	r3, r2
 80119da:	d00c      	beq.n	80119f6 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7f5 ff5c 	bl	80078a4 <_ZNKSt8functionIFyvEEclEv>
 80119ec:	4602      	mov	r2, r0
 80119ee:	460b      	mov	r3, r1
 80119f0:	42a2      	cmp	r2, r4
 80119f2:	41ab      	sbcs	r3, r5
 80119f4:	d201      	bcs.n	80119fa <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 80119f6:	2301      	movs	r3, #1
 80119f8:	e000      	b.n	80119fc <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 80119fa:	2300      	movs	r3, #0
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d00a      	beq.n	8011a16 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	3310      	adds	r3, #16
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	68f9      	ldr	r1, [r7, #12]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	4798      	blx	r3
 8011a0e:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	db13      	blt.n	8011a3e <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f103 0520 	add.w	r5, r3, #32
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	330c      	adds	r3, #12
 8011a24:	68f9      	ldr	r1, [r7, #12]
 8011a26:	4618      	mov	r0, r3
 8011a28:	f002 f94f 	bl	8013cca <canardTxPop>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	4619      	mov	r1, r3
 8011a30:	4628      	mov	r0, r5
 8011a32:	47a0      	blx	r4
    while (queue.size != 0) {
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	695b      	ldr	r3, [r3, #20]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d1c4      	bne.n	80119c6 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 8011a3c:	e000      	b.n	8011a40 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 8011a3e:	bf00      	nop
}
 8011a40:	bf00      	nop
 8011a42:	3710      	adds	r7, #16
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bdb0      	pop	{r4, r5, r7, pc}

08011a48 <_ZN19AbstractCANProviderD1Ev>:

AbstractCANProvider::~AbstractCANProvider() {
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	4a04      	ldr	r2, [pc, #16]	@ (8011a64 <_ZN19AbstractCANProviderD1Ev+0x1c>)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	601a      	str	r2, [r3, #0]

}
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	370c      	adds	r7, #12
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr
 8011a64:	08019548 	.word	0x08019548

08011a68 <_Z41__static_initialization_and_destruction_0ii>:
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d107      	bne.n	8011a88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d102      	bne.n	8011a88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011a82:	4803      	ldr	r0, [pc, #12]	@ (8011a90 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011a84:	f000 f806 	bl	8011a94 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 8011a88:	bf00      	nop
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	20000a60 	.word	0x20000a60

08011a94 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8011a94:	b590      	push	{r4, r7, lr}
 8011a96:	b085      	sub	sp, #20
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7f6 fe5c 	bl	800875c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8011aa4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00c      	beq.n	8011ac8 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f7f6 fd18 	bl	80084e4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	f7f6 fdaf 	bl	800861a <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8011abc:	4603      	mov	r3, r0
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f7f6 fe57 	bl	8008776 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2200      	movs	r2, #0
 8011acc:	601a      	str	r2, [r3, #0]
      }
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3714      	adds	r7, #20
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd90      	pop	{r4, r7, pc}

08011ad8 <_GLOBAL__sub_I_queue>:
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011ae0:	2001      	movs	r0, #1
 8011ae2:	f7ff ffc1 	bl	8011a68 <_Z41__static_initialization_and_destruction_0ii>
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <_GLOBAL__sub_D_queue>:
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011af0:	2000      	movs	r0, #0
 8011af2:	f7ff ffb9 	bl	8011a68 <_Z41__static_initialization_and_destruction_0ii>
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	460b      	mov	r3, r1
 8011b02:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8011b04:	2300      	movs	r3, #0
 8011b06:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8011b0c:	e007      	b.n	8011b1e <cavlFindExtremum+0x26>
    {
        result = c;
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8011b12:	78fb      	ldrb	r3, [r7, #3]
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	009b      	lsls	r3, r3, #2
 8011b18:	4413      	add	r3, r2
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d1f4      	bne.n	8011b0e <cavlFindExtremum+0x16>
    }
    return result;
 8011b24:	68fb      	ldr	r3, [r7, #12]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3714      	adds	r7, #20
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
	...

08011b34 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d014      	beq.n	8011b70 <cavlPrivateRotate+0x3c>
 8011b46:	78fb      	ldrb	r3, [r7, #3]
 8011b48:	f083 0301 	eor.w	r3, r3, #1
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	4413      	add	r3, r2
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d00a      	beq.n	8011b70 <cavlPrivateRotate+0x3c>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b64:	db04      	blt.n	8011b70 <cavlPrivateRotate+0x3c>
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	dd05      	ble.n	8011b7c <cavlPrivateRotate+0x48>
 8011b70:	4b2a      	ldr	r3, [pc, #168]	@ (8011c1c <cavlPrivateRotate+0xe8>)
 8011b72:	4a2b      	ldr	r2, [pc, #172]	@ (8011c20 <cavlPrivateRotate+0xec>)
 8011b74:	2162      	movs	r1, #98	@ 0x62
 8011b76:	482b      	ldr	r0, [pc, #172]	@ (8011c24 <cavlPrivateRotate+0xf0>)
 8011b78:	f002 fad8 	bl	801412c <__assert_func>
    Cavl* const z = x->lr[!r];
 8011b7c:	78fb      	ldrb	r3, [r7, #3]
 8011b7e:	f083 0301 	eor.w	r3, r3, #1
 8011b82:	b2db      	uxtb	r3, r3
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00e      	beq.n	8011bb4 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681a      	ldr	r2, [r3, #0]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	689b      	ldr	r3, [r3, #8]
 8011ba0:	6879      	ldr	r1, [r7, #4]
 8011ba2:	4299      	cmp	r1, r3
 8011ba4:	bf0c      	ite	eq
 8011ba6:	2301      	moveq	r3, #1
 8011ba8:	2300      	movne	r3, #0
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	4413      	add	r3, r2
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	601a      	str	r2, [r3, #0]
    x->up     = z;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	68fa      	ldr	r2, [r7, #12]
 8011bc0:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8011bc2:	78fb      	ldrb	r3, [r7, #3]
 8011bc4:	78fa      	ldrb	r2, [r7, #3]
 8011bc6:	f082 0201 	eor.w	r2, r2, #1
 8011bca:	b2d2      	uxtb	r2, r2
 8011bcc:	4610      	mov	r0, r2
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	4413      	add	r3, r2
 8011bd4:	685a      	ldr	r2, [r3, #4]
 8011bd6:	6879      	ldr	r1, [r7, #4]
 8011bd8:	0083      	lsls	r3, r0, #2
 8011bda:	440b      	add	r3, r1
 8011bdc:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8011bde:	78fb      	ldrb	r3, [r7, #3]
 8011be0:	f083 0301 	eor.w	r3, r3, #1
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	4413      	add	r3, r2
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d009      	beq.n	8011c06 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8011bf2:	78fb      	ldrb	r3, [r7, #3]
 8011bf4:	f083 0301 	eor.w	r3, r3, #1
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	687a      	ldr	r2, [r7, #4]
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 8011c06:	78fb      	ldrb	r3, [r7, #3]
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	4413      	add	r3, r2
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	605a      	str	r2, [r3, #4]
}
 8011c12:	bf00      	nop
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	08018890 	.word	0x08018890
 8011c20:	080198d0 	.word	0x080198d0
 8011c24:	080188d8 	.word	0x080188d8

08011c28 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	460b      	mov	r3, r1
 8011c32:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00a      	beq.n	8011c50 <cavlPrivateAdjustBalance+0x28>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c44:	db04      	blt.n	8011c50 <cavlPrivateAdjustBalance+0x28>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	dd05      	ble.n	8011c5c <cavlPrivateAdjustBalance+0x34>
 8011c50:	4b61      	ldr	r3, [pc, #388]	@ (8011dd8 <cavlPrivateAdjustBalance+0x1b0>)
 8011c52:	4a62      	ldr	r2, [pc, #392]	@ (8011ddc <cavlPrivateAdjustBalance+0x1b4>)
 8011c54:	2177      	movs	r1, #119	@ 0x77
 8011c56:	4862      	ldr	r0, [pc, #392]	@ (8011de0 <cavlPrivateAdjustBalance+0x1b8>)
 8011c58:	f002 fa68 	bl	801412c <__assert_func>
    Cavl*        out    = x;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	78fa      	ldrb	r2, [r7, #3]
 8011c6a:	2a00      	cmp	r2, #0
 8011c6c:	d001      	beq.n	8011c72 <cavlPrivateAdjustBalance+0x4a>
 8011c6e:	2201      	movs	r2, #1
 8011c70:	e000      	b.n	8011c74 <cavlPrivateAdjustBalance+0x4c>
 8011c72:	22ff      	movs	r2, #255	@ 0xff
 8011c74:	4413      	add	r3, r2
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 8011c7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c82:	db04      	blt.n	8011c8e <cavlPrivateAdjustBalance+0x66>
 8011c84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	f340 809c 	ble.w	8011dc6 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 8011c8e:	7cfb      	ldrb	r3, [r7, #19]
 8011c90:	09db      	lsrs	r3, r3, #7
 8011c92:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8011c94:	7cbb      	ldrb	r3, [r7, #18]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <cavlPrivateAdjustBalance+0x76>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e001      	b.n	8011ca2 <cavlPrivateAdjustBalance+0x7a>
 8011c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca2:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8011ca4:	7cbb      	ldrb	r3, [r7, #18]
 8011ca6:	f083 0301 	eor.w	r3, r3, #1
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	4413      	add	r3, r2
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d105      	bne.n	8011cc8 <cavlPrivateAdjustBalance+0xa0>
 8011cbc:	4b49      	ldr	r3, [pc, #292]	@ (8011de4 <cavlPrivateAdjustBalance+0x1bc>)
 8011cbe:	4a47      	ldr	r2, [pc, #284]	@ (8011ddc <cavlPrivateAdjustBalance+0x1b4>)
 8011cc0:	217f      	movs	r1, #127	@ 0x7f
 8011cc2:	4847      	ldr	r0, [pc, #284]	@ (8011de0 <cavlPrivateAdjustBalance+0x1b8>)
 8011cc4:	f002 fa32 	bl	801412c <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011cce:	461a      	mov	r2, r3
 8011cd0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011cd4:	fb02 f303 	mul.w	r3, r2, r3
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	dc1c      	bgt.n	8011d16 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8011ce0:	7cbb      	ldrb	r3, [r7, #18]
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7ff ff25 	bl	8011b34 <cavlPrivateRotate>
            if (0 == z->bf)
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d109      	bne.n	8011d08 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8011cf4:	7c7b      	ldrb	r3, [r7, #17]
 8011cf6:	425b      	negs	r3, r3
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	b25a      	sxtb	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	7c7a      	ldrb	r2, [r7, #17]
 8011d04:	731a      	strb	r2, [r3, #12]
    {
 8011d06:	e061      	b.n	8011dcc <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2200      	movs	r2, #0
 8011d12:	731a      	strb	r2, [r3, #12]
    {
 8011d14:	e05a      	b.n	8011dcc <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 8011d16:	7cbb      	ldrb	r3, [r7, #18]
 8011d18:	68fa      	ldr	r2, [r7, #12]
 8011d1a:	009b      	lsls	r3, r3, #2
 8011d1c:	4413      	add	r3, r2
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d105      	bne.n	8011d34 <cavlPrivateAdjustBalance+0x10c>
 8011d28:	4b2f      	ldr	r3, [pc, #188]	@ (8011de8 <cavlPrivateAdjustBalance+0x1c0>)
 8011d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8011ddc <cavlPrivateAdjustBalance+0x1b4>)
 8011d2c:	2192      	movs	r1, #146	@ 0x92
 8011d2e:	482c      	ldr	r0, [pc, #176]	@ (8011de0 <cavlPrivateAdjustBalance+0x1b8>)
 8011d30:	f002 f9fc 	bl	801412c <__assert_func>
            out = y;
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 8011d38:	7cbb      	ldrb	r3, [r7, #18]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	bf14      	ite	ne
 8011d3e:	2301      	movne	r3, #1
 8011d40:	2300      	moveq	r3, #0
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	f083 0301 	eor.w	r3, r3, #1
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	f003 0301 	and.w	r3, r3, #1
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	4619      	mov	r1, r3
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f7ff feee 	bl	8011b34 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 8011d58:	7cbb      	ldrb	r3, [r7, #18]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7ff fee9 	bl	8011b34 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011d6e:	fb02 f303 	mul.w	r3, r2, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	da09      	bge.n	8011d8a <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	7c7a      	ldrb	r2, [r7, #17]
 8011d7a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2200      	movs	r2, #0
 8011d86:	731a      	strb	r2, [r3, #12]
    {
 8011d88:	e020      	b.n	8011dcc <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011d90:	461a      	mov	r2, r3
 8011d92:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011d96:	fb02 f303 	mul.w	r3, r2, r3
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	dd0c      	ble.n	8011db8 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2200      	movs	r2, #0
 8011da2:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2200      	movs	r2, #0
 8011da8:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 8011daa:	7c7b      	ldrb	r3, [r7, #17]
 8011dac:	425b      	negs	r3, r3
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	b25a      	sxtb	r2, r3
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	731a      	strb	r2, [r3, #12]
    {
 8011db6:	e009      	b.n	8011dcc <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	731a      	strb	r2, [r3, #12]
    {
 8011dc4:	e002      	b.n	8011dcc <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	7cfa      	ldrb	r2, [r7, #19]
 8011dca:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8011dcc:	697b      	ldr	r3, [r7, #20]
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3718      	adds	r7, #24
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	08018904 	.word	0x08018904
 8011ddc:	080198b4 	.word	0x080198b4
 8011de0:	080188d8 	.word	0x080188d8
 8011de4:	08018934 	.word	0x08018934
 8011de8:	08018940 	.word	0x08018940

08011dec <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b086      	sub	sp, #24
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d004      	beq.n	8011e04 <cavlPrivateRetraceOnGrowth+0x18>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d005      	beq.n	8011e10 <cavlPrivateRetraceOnGrowth+0x24>
 8011e04:	4b23      	ldr	r3, [pc, #140]	@ (8011e94 <cavlPrivateRetraceOnGrowth+0xa8>)
 8011e06:	4a24      	ldr	r2, [pc, #144]	@ (8011e98 <cavlPrivateRetraceOnGrowth+0xac>)
 8011e08:	21b5      	movs	r1, #181	@ 0xb5
 8011e0a:	4824      	ldr	r0, [pc, #144]	@ (8011e9c <cavlPrivateRetraceOnGrowth+0xb0>)
 8011e0c:	f002 f98e 	bl	801412c <__assert_func>
    Cavl* c = added;      // Child
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 8011e1a:	e023      	b.n	8011e64 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	689b      	ldr	r3, [r3, #8]
 8011e20:	697a      	ldr	r2, [r7, #20]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	bf0c      	ite	eq
 8011e26:	2301      	moveq	r3, #1
 8011e28:	2300      	movne	r3, #0
 8011e2a:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 8011e2c:	7bfb      	ldrb	r3, [r7, #15]
 8011e2e:	693a      	ldr	r2, [r7, #16]
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	4413      	add	r3, r2
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	697a      	ldr	r2, [r7, #20]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d005      	beq.n	8011e48 <cavlPrivateRetraceOnGrowth+0x5c>
 8011e3c:	4b18      	ldr	r3, [pc, #96]	@ (8011ea0 <cavlPrivateRetraceOnGrowth+0xb4>)
 8011e3e:	4a16      	ldr	r2, [pc, #88]	@ (8011e98 <cavlPrivateRetraceOnGrowth+0xac>)
 8011e40:	21bb      	movs	r1, #187	@ 0xbb
 8011e42:	4816      	ldr	r0, [pc, #88]	@ (8011e9c <cavlPrivateRetraceOnGrowth+0xb0>)
 8011e44:	f002 f972 	bl	801412c <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 8011e48:	7bfb      	ldrb	r3, [r7, #15]
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	6938      	ldr	r0, [r7, #16]
 8011e4e:	f7ff feeb 	bl	8011c28 <cavlPrivateAdjustBalance>
 8011e52:	6178      	str	r0, [r7, #20]
        p = c->up;
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d003      	beq.n	8011e6c <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d1d8      	bne.n	8011e1c <cavlPrivateRetraceOnGrowth+0x30>
 8011e6a:	e000      	b.n	8011e6e <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 8011e6c:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d105      	bne.n	8011e80 <cavlPrivateRetraceOnGrowth+0x94>
 8011e74:	4b0b      	ldr	r3, [pc, #44]	@ (8011ea4 <cavlPrivateRetraceOnGrowth+0xb8>)
 8011e76:	4a08      	ldr	r2, [pc, #32]	@ (8011e98 <cavlPrivateRetraceOnGrowth+0xac>)
 8011e78:	21c3      	movs	r1, #195	@ 0xc3
 8011e7a:	4808      	ldr	r0, [pc, #32]	@ (8011e9c <cavlPrivateRetraceOnGrowth+0xb0>)
 8011e7c:	f002 f956 	bl	801412c <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d101      	bne.n	8011e8a <cavlPrivateRetraceOnGrowth+0x9e>
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	e000      	b.n	8011e8c <cavlPrivateRetraceOnGrowth+0xa0>
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3718      	adds	r7, #24
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	0801894c 	.word	0x0801894c
 8011e98:	08019898 	.word	0x08019898
 8011e9c:	080188d8 	.word	0x080188d8
 8011ea0:	08018970 	.word	0x08018970
 8011ea4:	08018980 	.word	0x08018980

08011ea8 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b08a      	sub	sp, #40	@ 0x28
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	607a      	str	r2, [r7, #4]
 8011eb4:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d065      	beq.n	8011f8c <cavlSearch+0xe4>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d062      	beq.n	8011f8c <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8011ed0:	e02f      	b.n	8011f32 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	4611      	mov	r1, r2
 8011eda:	68b8      	ldr	r0, [r7, #8]
 8011edc:	4798      	blx	r3
 8011ede:	4603      	mov	r3, r0
 8011ee0:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8011ee2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d103      	bne.n	8011ef2 <cavlSearch+0x4a>
            {
                out = *n;
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8011ef0:	e023      	b.n	8011f3a <cavlSearch+0x92>
            }
            up = *n;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	bfcc      	ite	gt
 8011f04:	2301      	movgt	r3, #1
 8011f06:	2300      	movle	r3, #0
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	009b      	lsls	r3, r3, #2
 8011f0c:	4413      	add	r3, r2
 8011f0e:	3304      	adds	r3, #4
 8011f10:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d00b      	beq.n	8011f32 <cavlSearch+0x8a>
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	6a3a      	ldr	r2, [r7, #32]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d005      	beq.n	8011f32 <cavlSearch+0x8a>
 8011f26:	4b1c      	ldr	r3, [pc, #112]	@ (8011f98 <cavlSearch+0xf0>)
 8011f28:	4a1c      	ldr	r2, [pc, #112]	@ (8011f9c <cavlSearch+0xf4>)
 8011f2a:	21db      	movs	r1, #219	@ 0xdb
 8011f2c:	481c      	ldr	r0, [pc, #112]	@ (8011fa0 <cavlSearch+0xf8>)
 8011f2e:	f002 f8fd 	bl	801412c <__assert_func>
        while (*n != NULL)
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1cb      	bne.n	8011ed2 <cavlSearch+0x2a>
        }
        if (NULL == out)
 8011f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d125      	bne.n	8011f8c <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d004      	beq.n	8011f50 <cavlSearch+0xa8>
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	68b8      	ldr	r0, [r7, #8]
 8011f4a:	4798      	blx	r3
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	e000      	b.n	8011f52 <cavlSearch+0xaa>
 8011f50:	2300      	movs	r3, #0
 8011f52:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 8011f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d018      	beq.n	8011f8c <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f5e:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8011f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f62:	2200      	movs	r2, #0
 8011f64:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 8011f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f68:	2200      	movs	r2, #0
 8011f6a:	609a      	str	r2, [r3, #8]
                out->up        = up;
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6e:	6a3a      	ldr	r2, [r7, #32]
 8011f70:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 8011f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f74:	2200      	movs	r2, #0
 8011f76:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8011f78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f7a:	f7ff ff37 	bl	8011dec <cavlPrivateRetraceOnGrowth>
 8011f7e:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d002      	beq.n	8011f8c <cavlSearch+0xe4>
                {
                    *root = rt;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	697a      	ldr	r2, [r7, #20]
 8011f8a:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8011f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3728      	adds	r7, #40	@ 0x28
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	0801898c 	.word	0x0801898c
 8011f9c:	0801988c 	.word	0x0801988c
 8011fa0:	080188d8 	.word	0x080188d8

08011fa4 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f000 8116 	beq.w	80121e2 <cavlRemove+0x23e>
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 8112 	beq.w	80121e2 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d105      	bne.n	8011fd2 <cavlRemove+0x2e>
 8011fc6:	4b89      	ldr	r3, [pc, #548]	@ (80121ec <cavlRemove+0x248>)
 8011fc8:	4a89      	ldr	r2, [pc, #548]	@ (80121f0 <cavlRemove+0x24c>)
 8011fca:	21f6      	movs	r1, #246	@ 0xf6
 8011fcc:	4889      	ldr	r0, [pc, #548]	@ (80121f4 <cavlRemove+0x250>)
 8011fce:	f002 f8ad 	bl	801412c <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10a      	bne.n	8011ff0 <cavlRemove+0x4c>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	683a      	ldr	r2, [r7, #0]
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d005      	beq.n	8011ff0 <cavlRemove+0x4c>
 8011fe4:	4b84      	ldr	r3, [pc, #528]	@ (80121f8 <cavlRemove+0x254>)
 8011fe6:	4a82      	ldr	r2, [pc, #520]	@ (80121f0 <cavlRemove+0x24c>)
 8011fe8:	21f7      	movs	r1, #247	@ 0xf7
 8011fea:	4882      	ldr	r0, [pc, #520]	@ (80121f4 <cavlRemove+0x250>)
 8011fec:	f002 f89e 	bl	801412c <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d073      	beq.n	80120e8 <cavlRemove+0x144>
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d06f      	beq.n	80120e8 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	2100      	movs	r1, #0
 801200e:	4618      	mov	r0, r3
 8012010:	f7ff fd72 	bl	8011af8 <cavlFindExtremum>
 8012014:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d007      	beq.n	801202c <cavlRemove+0x88>
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d103      	bne.n	801202c <cavlRemove+0x88>
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d105      	bne.n	8012038 <cavlRemove+0x94>
 801202c:	4b73      	ldr	r3, [pc, #460]	@ (80121fc <cavlRemove+0x258>)
 801202e:	4a70      	ldr	r2, [pc, #448]	@ (80121f0 <cavlRemove+0x24c>)
 8012030:	21ff      	movs	r1, #255	@ 0xff
 8012032:	4870      	ldr	r0, [pc, #448]	@ (80121f4 <cavlRemove+0x250>)
 8012034:	f002 f87a 	bl	801412c <__assert_func>
            re->bf        = node->bf;
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	685a      	ldr	r2, [r3, #4]
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	697a      	ldr	r2, [r7, #20]
 8012050:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	683a      	ldr	r2, [r7, #0]
 8012058:	429a      	cmp	r2, r3
 801205a:	d025      	beq.n	80120a8 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	697a      	ldr	r2, [r7, #20]
 8012068:	429a      	cmp	r2, r3
 801206a:	d006      	beq.n	801207a <cavlRemove+0xd6>
 801206c:	4b64      	ldr	r3, [pc, #400]	@ (8012200 <cavlRemove+0x25c>)
 801206e:	4a60      	ldr	r2, [pc, #384]	@ (80121f0 <cavlRemove+0x24c>)
 8012070:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8012074:	485f      	ldr	r0, [pc, #380]	@ (80121f4 <cavlRemove+0x250>)
 8012076:	f002 f859 	bl	801412c <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	689a      	ldr	r2, [r3, #8]
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 8012082:	69fb      	ldr	r3, [r7, #28]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d003      	beq.n	8012092 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	69fa      	ldr	r2, [r7, #28]
 8012090:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	689a      	ldr	r2, [r3, #8]
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	697a      	ldr	r2, [r7, #20]
 80120a0:	601a      	str	r2, [r3, #0]
                r             = false;
 80120a2:	2300      	movs	r3, #0
 80120a4:	76fb      	strb	r3, [r7, #27]
 80120a6:	e003      	b.n	80120b0 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 80120ac:	2301      	movs	r3, #1
 80120ae:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00f      	beq.n	80120e0 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	681a      	ldr	r2, [r3, #0]
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	689b      	ldr	r3, [r3, #8]
 80120ca:	6839      	ldr	r1, [r7, #0]
 80120cc:	4299      	cmp	r1, r3
 80120ce:	bf0c      	ite	eq
 80120d0:	2301      	moveq	r3, #1
 80120d2:	2300      	movne	r3, #0
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	009b      	lsls	r3, r3, #2
 80120d8:	4413      	add	r3, r2
 80120da:	697a      	ldr	r2, [r7, #20]
 80120dc:	605a      	str	r2, [r3, #4]
        {
 80120de:	e046      	b.n	801216e <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	697a      	ldr	r2, [r7, #20]
 80120e4:	601a      	str	r2, [r3, #0]
        {
 80120e6:	e042      	b.n	801216e <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	689b      	ldr	r3, [r3, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	bf14      	ite	ne
 80120f6:	2301      	movne	r3, #1
 80120f8:	2300      	moveq	r3, #0
 80120fa:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 80120fc:	7cfb      	ldrb	r3, [r7, #19]
 80120fe:	683a      	ldr	r2, [r7, #0]
 8012100:	009b      	lsls	r3, r3, #2
 8012102:	4413      	add	r3, r2
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d006      	beq.n	8012118 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 801210a:	7cfb      	ldrb	r3, [r7, #19]
 801210c:	683a      	ldr	r2, [r7, #0]
 801210e:	009b      	lsls	r3, r3, #2
 8012110:	4413      	add	r3, r2
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	69fa      	ldr	r2, [r7, #28]
 8012116:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d020      	beq.n	8012160 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	689b      	ldr	r3, [r3, #8]
 8012122:	683a      	ldr	r2, [r7, #0]
 8012124:	429a      	cmp	r2, r3
 8012126:	bf0c      	ite	eq
 8012128:	2301      	moveq	r3, #1
 801212a:	2300      	movne	r3, #0
 801212c:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 801212e:	7cfb      	ldrb	r3, [r7, #19]
 8012130:	7ef8      	ldrb	r0, [r7, #27]
 8012132:	683a      	ldr	r2, [r7, #0]
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	4413      	add	r3, r2
 8012138:	685a      	ldr	r2, [r3, #4]
 801213a:	69f9      	ldr	r1, [r7, #28]
 801213c:	0083      	lsls	r3, r0, #2
 801213e:	440b      	add	r3, r1
 8012140:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 8012142:	7efb      	ldrb	r3, [r7, #27]
 8012144:	69fa      	ldr	r2, [r7, #28]
 8012146:	009b      	lsls	r3, r3, #2
 8012148:	4413      	add	r3, r2
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d00e      	beq.n	801216e <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8012150:	7efb      	ldrb	r3, [r7, #27]
 8012152:	69fa      	ldr	r2, [r7, #28]
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	4413      	add	r3, r2
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	69fa      	ldr	r2, [r7, #28]
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	e006      	b.n	801216e <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8012160:	7cfb      	ldrb	r3, [r7, #19]
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	009b      	lsls	r3, r3, #2
 8012166:	4413      	add	r3, r2
 8012168:	685a      	ldr	r2, [r3, #4]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 801216e:	69fb      	ldr	r3, [r7, #28]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d036      	beq.n	80121e2 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 8012174:	2300      	movs	r3, #0
 8012176:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8012178:	7efb      	ldrb	r3, [r7, #27]
 801217a:	2b00      	cmp	r3, #0
 801217c:	bf14      	ite	ne
 801217e:	2301      	movne	r3, #1
 8012180:	2300      	moveq	r3, #0
 8012182:	b2db      	uxtb	r3, r3
 8012184:	f083 0301 	eor.w	r3, r3, #1
 8012188:	b2db      	uxtb	r3, r3
 801218a:	f003 0301 	and.w	r3, r3, #1
 801218e:	b2db      	uxtb	r3, r3
 8012190:	4619      	mov	r1, r3
 8012192:	69f8      	ldr	r0, [r7, #28]
 8012194:	f7ff fd48 	bl	8011c28 <cavlPrivateAdjustBalance>
 8012198:	60f8      	str	r0, [r7, #12]
                p = c->up;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10b      	bne.n	80121c2 <cavlRemove+0x21e>
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d008      	beq.n	80121c2 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	689b      	ldr	r3, [r3, #8]
 80121b4:	68fa      	ldr	r2, [r7, #12]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	bf0c      	ite	eq
 80121ba:	2301      	moveq	r3, #1
 80121bc:	2300      	movne	r3, #0
 80121be:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 80121c0:	e7da      	b.n	8012178 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d10c      	bne.n	80121e2 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d106      	bne.n	80121dc <cavlRemove+0x238>
 80121ce:	4b0d      	ldr	r3, [pc, #52]	@ (8012204 <cavlRemove+0x260>)
 80121d0:	4a07      	ldr	r2, [pc, #28]	@ (80121f0 <cavlRemove+0x24c>)
 80121d2:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80121d6:	4807      	ldr	r0, [pc, #28]	@ (80121f4 <cavlRemove+0x250>)
 80121d8:	f001 ffa8 	bl	801412c <__assert_func>
                *root = c;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	68fa      	ldr	r2, [r7, #12]
 80121e0:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 80121e2:	bf00      	nop
 80121e4:	3720      	adds	r7, #32
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	080189b0 	.word	0x080189b0
 80121f0:	08019914 	.word	0x08019914
 80121f4:	080188d8 	.word	0x080188d8
 80121f8:	080189c0 	.word	0x080189c0
 80121fc:	080189e8 	.word	0x080189e8
 8012200:	08018a20 	.word	0x08018a20
 8012204:	08018980 	.word	0x08018980

08012208 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8012210:	687b      	ldr	r3, [r7, #4]
}
 8012212:	4618      	mov	r0, r3
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
	...

08012220 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	4603      	mov	r3, r0
 8012228:	460a      	mov	r2, r1
 801222a:	80fb      	strh	r3, [r7, #6]
 801222c:	4613      	mov	r3, r2
 801222e:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8012230:	88fb      	ldrh	r3, [r7, #6]
 8012232:	021b      	lsls	r3, r3, #8
 8012234:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 8012236:	88fb      	ldrh	r3, [r7, #6]
 8012238:	0a1b      	lsrs	r3, r3, #8
 801223a:	b299      	uxth	r1, r3
 801223c:	797b      	ldrb	r3, [r7, #5]
 801223e:	b29b      	uxth	r3, r3
 8012240:	404b      	eors	r3, r1
 8012242:	b29b      	uxth	r3, r3
 8012244:	b2db      	uxtb	r3, r3
 8012246:	4905      	ldr	r1, [pc, #20]	@ (801225c <crcAddByte+0x3c>)
 8012248:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 801224c:	4053      	eors	r3, r2
 801224e:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8012250:	4618      	mov	r0, r3
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr
 801225c:	08019564 	.word	0x08019564

08012260 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b088      	sub	sp, #32
 8012264:	af00      	add	r7, sp, #0
 8012266:	4603      	mov	r3, r0
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
 801226c:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d108      	bne.n	8012286 <crcAdd+0x26>
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d005      	beq.n	8012286 <crcAdd+0x26>
 801227a:	4b12      	ldr	r3, [pc, #72]	@ (80122c4 <crcAdd+0x64>)
 801227c:	4a12      	ldr	r2, [pc, #72]	@ (80122c8 <crcAdd+0x68>)
 801227e:	2185      	movs	r1, #133	@ 0x85
 8012280:	4812      	ldr	r0, [pc, #72]	@ (80122cc <crcAdd+0x6c>)
 8012282:	f001 ff53 	bl	801412c <__assert_func>
    TransferCRC    out = crc;
 8012286:	89fb      	ldrh	r3, [r7, #14]
 8012288:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 801228e:	2300      	movs	r3, #0
 8012290:	617b      	str	r3, [r7, #20]
 8012292:	e00e      	b.n	80122b2 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8012294:	69bb      	ldr	r3, [r7, #24]
 8012296:	781a      	ldrb	r2, [r3, #0]
 8012298:	8bfb      	ldrh	r3, [r7, #30]
 801229a:	4611      	mov	r1, r2
 801229c:	4618      	mov	r0, r3
 801229e:	f7ff ffbf 	bl	8012220 <crcAddByte>
 80122a2:	4603      	mov	r3, r0
 80122a4:	83fb      	strh	r3, [r7, #30]
        ++p;
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	3301      	adds	r3, #1
 80122aa:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	3301      	adds	r3, #1
 80122b0:	617b      	str	r3, [r7, #20]
 80122b2:	697a      	ldr	r2, [r7, #20]
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d3ec      	bcc.n	8012294 <crcAdd+0x34>
    }
    return out;
 80122ba:	8bfb      	ldrh	r3, [r7, #30]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3720      	adds	r7, #32
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	08018a30 	.word	0x08018a30
 80122c8:	080197e0 	.word	0x080197e0
 80122cc:	08018a58 	.word	0x08018a58

080122d0 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	4603      	mov	r3, r0
 80122d8:	460a      	mov	r2, r1
 80122da:	80fb      	strh	r3, [r7, #6]
 80122dc:	4613      	mov	r3, r2
 80122de:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 80122e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	da05      	bge.n	80122f4 <txMakeMessageSessionSpecifier+0x24>
 80122e8:	4b0e      	ldr	r3, [pc, #56]	@ (8012324 <txMakeMessageSessionSpecifier+0x54>)
 80122ea:	4a0f      	ldr	r2, [pc, #60]	@ (8012328 <txMakeMessageSessionSpecifier+0x58>)
 80122ec:	21ac      	movs	r1, #172	@ 0xac
 80122ee:	480f      	ldr	r0, [pc, #60]	@ (801232c <txMakeMessageSessionSpecifier+0x5c>)
 80122f0:	f001 ff1c 	bl	801412c <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 80122f4:	88fb      	ldrh	r3, [r7, #6]
 80122f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80122fa:	d305      	bcc.n	8012308 <txMakeMessageSessionSpecifier+0x38>
 80122fc:	4b0c      	ldr	r3, [pc, #48]	@ (8012330 <txMakeMessageSessionSpecifier+0x60>)
 80122fe:	4a0a      	ldr	r2, [pc, #40]	@ (8012328 <txMakeMessageSessionSpecifier+0x58>)
 8012300:	21ad      	movs	r1, #173	@ 0xad
 8012302:	480a      	ldr	r0, [pc, #40]	@ (801232c <txMakeMessageSessionSpecifier+0x5c>)
 8012304:	f001 ff12 	bl	801412c <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8012308:	88fb      	ldrh	r3, [r7, #6]
 801230a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 801230e:	b29b      	uxth	r3, r3
 8012310:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8012312:	797a      	ldrb	r2, [r7, #5]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	021b      	lsls	r3, r3, #8
 8012318:	4313      	orrs	r3, r2
}
 801231a:	4618      	mov	r0, r3
 801231c:	3710      	adds	r7, #16
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	08018a88 	.word	0x08018a88
 8012328:	080197e8 	.word	0x080197e8
 801232c:	08018a58 	.word	0x08018a58
 8012330:	08018a9c 	.word	0x08018a9c

08012334 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8012334:	b590      	push	{r4, r7, lr}
 8012336:	b083      	sub	sp, #12
 8012338:	af00      	add	r7, sp, #0
 801233a:	4604      	mov	r4, r0
 801233c:	4608      	mov	r0, r1
 801233e:	4611      	mov	r1, r2
 8012340:	461a      	mov	r2, r3
 8012342:	4623      	mov	r3, r4
 8012344:	80fb      	strh	r3, [r7, #6]
 8012346:	4603      	mov	r3, r0
 8012348:	717b      	strb	r3, [r7, #5]
 801234a:	460b      	mov	r3, r1
 801234c:	713b      	strb	r3, [r7, #4]
 801234e:	4613      	mov	r3, r2
 8012350:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8012352:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	da05      	bge.n	8012366 <txMakeServiceSessionSpecifier+0x32>
 801235a:	4b17      	ldr	r3, [pc, #92]	@ (80123b8 <txMakeServiceSessionSpecifier+0x84>)
 801235c:	4a17      	ldr	r2, [pc, #92]	@ (80123bc <txMakeServiceSessionSpecifier+0x88>)
 801235e:	21b7      	movs	r1, #183	@ 0xb7
 8012360:	4817      	ldr	r0, [pc, #92]	@ (80123c0 <txMakeServiceSessionSpecifier+0x8c>)
 8012362:	f001 fee3 	bl	801412c <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8012366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801236a:	2b00      	cmp	r3, #0
 801236c:	da05      	bge.n	801237a <txMakeServiceSessionSpecifier+0x46>
 801236e:	4b15      	ldr	r3, [pc, #84]	@ (80123c4 <txMakeServiceSessionSpecifier+0x90>)
 8012370:	4a12      	ldr	r2, [pc, #72]	@ (80123bc <txMakeServiceSessionSpecifier+0x88>)
 8012372:	21b8      	movs	r1, #184	@ 0xb8
 8012374:	4812      	ldr	r0, [pc, #72]	@ (80123c0 <txMakeServiceSessionSpecifier+0x8c>)
 8012376:	f001 fed9 	bl	801412c <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 801237a:	88fb      	ldrh	r3, [r7, #6]
 801237c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012380:	d305      	bcc.n	801238e <txMakeServiceSessionSpecifier+0x5a>
 8012382:	4b11      	ldr	r3, [pc, #68]	@ (80123c8 <txMakeServiceSessionSpecifier+0x94>)
 8012384:	4a0d      	ldr	r2, [pc, #52]	@ (80123bc <txMakeServiceSessionSpecifier+0x88>)
 8012386:	21b9      	movs	r1, #185	@ 0xb9
 8012388:	480d      	ldr	r0, [pc, #52]	@ (80123c0 <txMakeServiceSessionSpecifier+0x8c>)
 801238a:	f001 fecf 	bl	801412c <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 801238e:	793a      	ldrb	r2, [r7, #4]
 8012390:	78fb      	ldrb	r3, [r7, #3]
 8012392:	01db      	lsls	r3, r3, #7
 8012394:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8012396:	88fb      	ldrh	r3, [r7, #6]
 8012398:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 801239a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 801239c:	797a      	ldrb	r2, [r7, #5]
 801239e:	2a00      	cmp	r2, #0
 80123a0:	d002      	beq.n	80123a8 <txMakeServiceSessionSpecifier+0x74>
 80123a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80123a6:	e000      	b.n	80123aa <txMakeServiceSessionSpecifier+0x76>
 80123a8:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 80123aa:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 80123ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	370c      	adds	r7, #12
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd90      	pop	{r4, r7, pc}
 80123b8:	08018a88 	.word	0x08018a88
 80123bc:	08019808 	.word	0x08019808
 80123c0:	08018a58 	.word	0x08018a58
 80123c4:	08018ab0 	.word	0x08018ab0
 80123c8:	08018ac4 	.word	0x08018ac4

080123cc <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 80123d4:	2340      	movs	r3, #64	@ 0x40
 80123d6:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 80123d8:	2300      	movs	r3, #0
 80123da:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2b07      	cmp	r3, #7
 80123e0:	d802      	bhi.n	80123e8 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 80123e2:	2308      	movs	r3, #8
 80123e4:	60fb      	str	r3, [r7, #12]
 80123e6:	e014      	b.n	8012412 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d808      	bhi.n	8012402 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 80123f0:	4a0c      	ldr	r2, [pc, #48]	@ (8012424 <adjustPresentationLayerMTU+0x58>)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	4413      	add	r3, r2
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	461a      	mov	r2, r3
 80123fa:	4b0b      	ldr	r3, [pc, #44]	@ (8012428 <adjustPresentationLayerMTU+0x5c>)
 80123fc:	5c9b      	ldrb	r3, [r3, r2]
 80123fe:	60fb      	str	r3, [r7, #12]
 8012400:	e007      	b.n	8012412 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8012402:	4a08      	ldr	r2, [pc, #32]	@ (8012424 <adjustPresentationLayerMTU+0x58>)
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	4413      	add	r3, r2
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	461a      	mov	r2, r3
 801240c:	4b06      	ldr	r3, [pc, #24]	@ (8012428 <adjustPresentationLayerMTU+0x5c>)
 801240e:	5c9b      	ldrb	r3, [r3, r2]
 8012410:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	3b01      	subs	r3, #1
}
 8012416:	4618      	mov	r0, r3
 8012418:	3714      	adds	r7, #20
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop
 8012424:	08019774 	.word	0x08019774
 8012428:	08019764 	.word	0x08019764

0801242c <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b08a      	sub	sp, #40	@ 0x28
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
 8012438:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d105      	bne.n	801244c <txMakeCANID+0x20>
 8012440:	4b60      	ldr	r3, [pc, #384]	@ (80125c4 <txMakeCANID+0x198>)
 8012442:	4a61      	ldr	r2, [pc, #388]	@ (80125c8 <txMakeCANID+0x19c>)
 8012444:	21d9      	movs	r1, #217	@ 0xd9
 8012446:	4861      	ldr	r0, [pc, #388]	@ (80125cc <txMakeCANID+0x1a0>)
 8012448:	f001 fe70 	bl	801412c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 801244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801244e:	2b00      	cmp	r3, #0
 8012450:	d105      	bne.n	801245e <txMakeCANID+0x32>
 8012452:	4b5f      	ldr	r3, [pc, #380]	@ (80125d0 <txMakeCANID+0x1a4>)
 8012454:	4a5c      	ldr	r2, [pc, #368]	@ (80125c8 <txMakeCANID+0x19c>)
 8012456:	21da      	movs	r1, #218	@ 0xda
 8012458:	485c      	ldr	r0, [pc, #368]	@ (80125cc <txMakeCANID+0x1a0>)
 801245a:	f001 fe67 	bl	801412c <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 801245e:	f06f 0301 	mvn.w	r3, #1
 8012462:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	785b      	ldrb	r3, [r3, #1]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d157      	bne.n	801251c <txMakeCANID+0xf0>
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	791b      	ldrb	r3, [r3, #4]
 8012470:	2bff      	cmp	r3, #255	@ 0xff
 8012472:	d153      	bne.n	801251c <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8012478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801247c:	d24e      	bcs.n	801251c <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 801247e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012482:	2b00      	cmp	r3, #0
 8012484:	db11      	blt.n	80124aa <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	885b      	ldrh	r3, [r3, #2]
 801248a:	78fa      	ldrb	r2, [r7, #3]
 801248c:	4611      	mov	r1, r2
 801248e:	4618      	mov	r0, r3
 8012490:	f7ff ff1e 	bl	80122d0 <txMakeMessageSessionSpecifier>
 8012494:	4603      	mov	r3, r0
 8012496:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8012498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801249a:	2b00      	cmp	r3, #0
 801249c:	da75      	bge.n	801258a <txMakeCANID+0x15e>
 801249e:	4b4d      	ldr	r3, [pc, #308]	@ (80125d4 <txMakeCANID+0x1a8>)
 80124a0:	4a49      	ldr	r2, [pc, #292]	@ (80125c8 <txMakeCANID+0x19c>)
 80124a2:	21e2      	movs	r1, #226	@ 0xe2
 80124a4:	4849      	ldr	r0, [pc, #292]	@ (80125cc <txMakeCANID+0x1a0>)
 80124a6:	f001 fe41 	bl	801412c <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 80124aa:	68ba      	ldr	r2, [r7, #8]
 80124ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d830      	bhi.n	8012514 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d108      	bne.n	80124ca <txMakeCANID+0x9e>
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d005      	beq.n	80124ca <txMakeCANID+0x9e>
 80124be:	4b46      	ldr	r3, [pc, #280]	@ (80125d8 <txMakeCANID+0x1ac>)
 80124c0:	4a41      	ldr	r2, [pc, #260]	@ (80125c8 <txMakeCANID+0x19c>)
 80124c2:	21e6      	movs	r1, #230	@ 0xe6
 80124c4:	4841      	ldr	r0, [pc, #260]	@ (80125cc <txMakeCANID+0x1a0>)
 80124c6:	f001 fe31 	bl	801412c <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	68b9      	ldr	r1, [r7, #8]
 80124ce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80124d2:	f7ff fec5 	bl	8012260 <crcAdd>
 80124d6:	4603      	mov	r3, r0
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80124de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	885b      	ldrh	r3, [r3, #2]
 80124e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80124ea:	4611      	mov	r1, r2
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7ff feef 	bl	80122d0 <txMakeMessageSessionSpecifier>
 80124f2:	4603      	mov	r3, r0
 80124f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80124f8:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012500:	d305      	bcc.n	801250e <txMakeCANID+0xe2>
 8012502:	4b36      	ldr	r3, [pc, #216]	@ (80125dc <txMakeCANID+0x1b0>)
 8012504:	4a30      	ldr	r2, [pc, #192]	@ (80125c8 <txMakeCANID+0x19c>)
 8012506:	21e9      	movs	r1, #233	@ 0xe9
 8012508:	4830      	ldr	r0, [pc, #192]	@ (80125cc <txMakeCANID+0x1a0>)
 801250a:	f001 fe0f 	bl	801412c <__assert_func>
            out = (int32_t) spec;
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8012512:	e03a      	b.n	801258a <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8012514:	f06f 0301 	mvn.w	r3, #1
 8012518:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 801251a:	e036      	b.n	801258a <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	785b      	ldrb	r3, [r3, #1]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d003      	beq.n	801252c <txMakeCANID+0x100>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	785b      	ldrb	r3, [r3, #1]
 8012528:	2b01      	cmp	r3, #1
 801252a:	d12a      	bne.n	8012582 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	791b      	ldrb	r3, [r3, #4]
 8012530:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8012532:	2b00      	cmp	r3, #0
 8012534:	db25      	blt.n	8012582 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	885b      	ldrh	r3, [r3, #2]
 801253a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801253e:	d220      	bcs.n	8012582 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8012540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012544:	2b00      	cmp	r3, #0
 8012546:	db18      	blt.n	801257a <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8012550:	2b02      	cmp	r3, #2
 8012552:	bf0c      	ite	eq
 8012554:	2301      	moveq	r3, #1
 8012556:	2300      	movne	r3, #0
 8012558:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 801255e:	78fa      	ldrb	r2, [r7, #3]
 8012560:	f7ff fee8 	bl	8012334 <txMakeServiceSessionSpecifier>
 8012564:	4603      	mov	r3, r0
 8012566:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8012568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801256a:	2b00      	cmp	r3, #0
 801256c:	da0f      	bge.n	801258e <txMakeCANID+0x162>
 801256e:	4b19      	ldr	r3, [pc, #100]	@ (80125d4 <txMakeCANID+0x1a8>)
 8012570:	4a15      	ldr	r2, [pc, #84]	@ (80125c8 <txMakeCANID+0x19c>)
 8012572:	21fa      	movs	r1, #250	@ 0xfa
 8012574:	4815      	ldr	r0, [pc, #84]	@ (80125cc <txMakeCANID+0x1a0>)
 8012576:	f001 fdd9 	bl	801412c <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 801257a:	f06f 0301 	mvn.w	r3, #1
 801257e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8012580:	e005      	b.n	801258e <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8012582:	f06f 0301 	mvn.w	r3, #1
 8012586:	627b      	str	r3, [r7, #36]	@ 0x24
 8012588:	e002      	b.n	8012590 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 801258a:	bf00      	nop
 801258c:	e000      	b.n	8012590 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 801258e:	bf00      	nop
    }

    if (out >= 0)
 8012590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012592:	2b00      	cmp	r3, #0
 8012594:	db10      	blt.n	80125b8 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	2b07      	cmp	r3, #7
 80125a0:	d807      	bhi.n	80125b2 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	069a      	lsls	r2, r3, #26
 80125a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a8:	4313      	orrs	r3, r2
 80125aa:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80125b0:	e002      	b.n	80125b8 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 80125b2:	f06f 0301 	mvn.w	r3, #1
 80125b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 80125b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3728      	adds	r7, #40	@ 0x28
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	08018ad8 	.word	0x08018ad8
 80125c8:	080197d4 	.word	0x080197d4
 80125cc:	08018a58 	.word	0x08018a58
 80125d0:	08018aec 	.word	0x08018aec
 80125d4:	08018b08 	.word	0x08018b08
 80125d8:	08018b14 	.word	0x08018b14
 80125dc:	08018b48 	.word	0x08018b48

080125e0 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 80125e0:	b590      	push	{r4, r7, lr}
 80125e2:	b083      	sub	sp, #12
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	4604      	mov	r4, r0
 80125e8:	4608      	mov	r0, r1
 80125ea:	4611      	mov	r1, r2
 80125ec:	461a      	mov	r2, r3
 80125ee:	4623      	mov	r3, r4
 80125f0:	71fb      	strb	r3, [r7, #7]
 80125f2:	4603      	mov	r3, r0
 80125f4:	71bb      	strb	r3, [r7, #6]
 80125f6:	460b      	mov	r3, r1
 80125f8:	717b      	strb	r3, [r7, #5]
 80125fa:	4613      	mov	r3, r2
 80125fc:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 80125fe:	79fb      	ldrb	r3, [r7, #7]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d009      	beq.n	8012618 <txMakeTailByte+0x38>
 8012604:	797b      	ldrb	r3, [r7, #5]
 8012606:	2b01      	cmp	r3, #1
 8012608:	d006      	beq.n	8012618 <txMakeTailByte+0x38>
 801260a:	4b13      	ldr	r3, [pc, #76]	@ (8012658 <txMakeTailByte+0x78>)
 801260c:	4a13      	ldr	r2, [pc, #76]	@ (801265c <txMakeTailByte+0x7c>)
 801260e:	f240 111b 	movw	r1, #283	@ 0x11b
 8012612:	4813      	ldr	r0, [pc, #76]	@ (8012660 <txMakeTailByte+0x80>)
 8012614:	f001 fd8a 	bl	801412c <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8012618:	79fb      	ldrb	r3, [r7, #7]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d001      	beq.n	8012622 <txMakeTailByte+0x42>
 801261e:	2280      	movs	r2, #128	@ 0x80
 8012620:	e000      	b.n	8012624 <txMakeTailByte+0x44>
 8012622:	2200      	movs	r2, #0
 8012624:	79bb      	ldrb	r3, [r7, #6]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d001      	beq.n	801262e <txMakeTailByte+0x4e>
 801262a:	2340      	movs	r3, #64	@ 0x40
 801262c:	e000      	b.n	8012630 <txMakeTailByte+0x50>
 801262e:	2300      	movs	r3, #0
 8012630:	4313      	orrs	r3, r2
 8012632:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8012634:	797a      	ldrb	r2, [r7, #5]
 8012636:	2a00      	cmp	r2, #0
 8012638:	d001      	beq.n	801263e <txMakeTailByte+0x5e>
 801263a:	2220      	movs	r2, #32
 801263c:	e000      	b.n	8012640 <txMakeTailByte+0x60>
 801263e:	2200      	movs	r2, #0
 8012640:	4313      	orrs	r3, r2
 8012642:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8012644:	793b      	ldrb	r3, [r7, #4]
 8012646:	f003 031f 	and.w	r3, r3, #31
 801264a:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 801264c:	4313      	orrs	r3, r2
 801264e:	b2db      	uxtb	r3, r3
}
 8012650:	4618      	mov	r0, r3
 8012652:	370c      	adds	r7, #12
 8012654:	46bd      	mov	sp, r7
 8012656:	bd90      	pop	{r4, r7, pc}
 8012658:	08018b64 	.word	0x08018b64
 801265c:	0801987c 	.word	0x0801987c
 8012660:	08018a58 	.word	0x08018a58

08012664 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b40      	cmp	r3, #64	@ 0x40
 8012670:	d906      	bls.n	8012680 <txRoundFramePayloadSizeUp+0x1c>
 8012672:	4b0f      	ldr	r3, [pc, #60]	@ (80126b0 <txRoundFramePayloadSizeUp+0x4c>)
 8012674:	4a0f      	ldr	r2, [pc, #60]	@ (80126b4 <txRoundFramePayloadSizeUp+0x50>)
 8012676:	f44f 7192 	mov.w	r1, #292	@ 0x124
 801267a:	480f      	ldr	r0, [pc, #60]	@ (80126b8 <txRoundFramePayloadSizeUp+0x54>)
 801267c:	f001 fd56 	bl	801412c <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8012680:	4a0e      	ldr	r2, [pc, #56]	@ (80126bc <txRoundFramePayloadSizeUp+0x58>)
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4413      	add	r3, r2
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2b0f      	cmp	r3, #15
 801268e:	d906      	bls.n	801269e <txRoundFramePayloadSizeUp+0x3a>
 8012690:	4b0b      	ldr	r3, [pc, #44]	@ (80126c0 <txRoundFramePayloadSizeUp+0x5c>)
 8012692:	4a08      	ldr	r2, [pc, #32]	@ (80126b4 <txRoundFramePayloadSizeUp+0x50>)
 8012694:	f240 1127 	movw	r1, #295	@ 0x127
 8012698:	4807      	ldr	r0, [pc, #28]	@ (80126b8 <txRoundFramePayloadSizeUp+0x54>)
 801269a:	f001 fd47 	bl	801412c <__assert_func>
    return CanardCANDLCToLength[y];
 801269e:	4a09      	ldr	r2, [pc, #36]	@ (80126c4 <txRoundFramePayloadSizeUp+0x60>)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	4413      	add	r3, r2
 80126a4:	781b      	ldrb	r3, [r3, #0]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	08018b8c 	.word	0x08018b8c
 80126b4:	0801984c 	.word	0x0801984c
 80126b8:	08018a58 	.word	0x08018a58
 80126bc:	08019774 	.word	0x08019774
 80126c0:	08018bd4 	.word	0x08018bd4
 80126c4:	08019764 	.word	0x08019764

080126c8 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d106      	bne.n	80126ea <txAllocateQueueItem+0x22>
 80126dc:	4b1f      	ldr	r3, [pc, #124]	@ (801275c <txAllocateQueueItem+0x94>)
 80126de:	4a20      	ldr	r2, [pc, #128]	@ (8012760 <txAllocateQueueItem+0x98>)
 80126e0:	f240 1131 	movw	r1, #305	@ 0x131
 80126e4:	481f      	ldr	r0, [pc, #124]	@ (8012764 <txAllocateQueueItem+0x9c>)
 80126e6:	f001 fd21 	bl	801412c <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d106      	bne.n	80126fe <txAllocateQueueItem+0x36>
 80126f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012768 <txAllocateQueueItem+0xa0>)
 80126f2:	4a1b      	ldr	r2, [pc, #108]	@ (8012760 <txAllocateQueueItem+0x98>)
 80126f4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 80126f8:	481a      	ldr	r0, [pc, #104]	@ (8012764 <txAllocateQueueItem+0x9c>)
 80126fa:	f001 fd17 	bl	801412c <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	6a3a      	ldr	r2, [r7, #32]
 8012704:	3230      	adds	r2, #48	@ 0x30
 8012706:	4611      	mov	r1, r2
 8012708:	68f8      	ldr	r0, [r7, #12]
 801270a:	4798      	blx	r3
 801270c:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d01e      	beq.n	8012752 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	2200      	movs	r2, #0
 8012718:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	2200      	movs	r2, #0
 801271e:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	2200      	movs	r2, #0
 8012724:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	2200      	movs	r2, #0
 801272a:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	2200      	movs	r2, #0
 8012730:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8012732:	6979      	ldr	r1, [r7, #20]
 8012734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012738:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	6a3a      	ldr	r2, [r7, #32]
 8012740:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	68ba      	ldr	r2, [r7, #8]
 8012750:	621a      	str	r2, [r3, #32]
    }
    return out;
 8012752:	697b      	ldr	r3, [r7, #20]
}
 8012754:	4618      	mov	r0, r3
 8012756:	3718      	adds	r7, #24
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	08018c1c 	.word	0x08018c1c
 8012760:	08019868 	.word	0x08019868
 8012764:	08018a58 	.word	0x08018a58
 8012768:	08018c30 	.word	0x08018c30

0801276c <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d002      	beq.n	801278a <txAVLPredicate+0x1e>
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d106      	bne.n	8012798 <txAVLPredicate+0x2c>
 801278a:	4b0a      	ldr	r3, [pc, #40]	@ (80127b4 <txAVLPredicate+0x48>)
 801278c:	4a0a      	ldr	r2, [pc, #40]	@ (80127b8 <txAVLPredicate+0x4c>)
 801278e:	f240 114d 	movw	r1, #333	@ 0x14d
 8012792:	480a      	ldr	r0, [pc, #40]	@ (80127bc <txAVLPredicate+0x50>)
 8012794:	f001 fcca 	bl	801412c <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6a1a      	ldr	r2, [r3, #32]
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	6a1b      	ldr	r3, [r3, #32]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d301      	bcc.n	80127a8 <txAVLPredicate+0x3c>
 80127a4:	2301      	movs	r3, #1
 80127a6:	e001      	b.n	80127ac <txAVLPredicate+0x40>
 80127a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3710      	adds	r7, #16
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	08018c44 	.word	0x08018c44
 80127b8:	0801983c 	.word	0x0801983c
 80127bc:	08018a58 	.word	0x08018a58

080127c0 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 80127c0:	b590      	push	{r4, r7, lr}
 80127c2:	b08d      	sub	sp, #52	@ 0x34
 80127c4:	af02      	add	r7, sp, #8
 80127c6:	60f8      	str	r0, [r7, #12]
 80127c8:	60b9      	str	r1, [r7, #8]
 80127ca:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d106      	bne.n	80127e2 <txPushSingleFrame+0x22>
 80127d4:	4b5c      	ldr	r3, [pc, #368]	@ (8012948 <txPushSingleFrame+0x188>)
 80127d6:	4a5d      	ldr	r2, [pc, #372]	@ (801294c <txPushSingleFrame+0x18c>)
 80127d8:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 80127dc:	485c      	ldr	r0, [pc, #368]	@ (8012950 <txPushSingleFrame+0x190>)
 80127de:	f001 fca5 	bl	801412c <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 80127e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d109      	bne.n	80127fc <txPushSingleFrame+0x3c>
 80127e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d006      	beq.n	80127fc <txPushSingleFrame+0x3c>
 80127ee:	4b59      	ldr	r3, [pc, #356]	@ (8012954 <txPushSingleFrame+0x194>)
 80127f0:	4a56      	ldr	r2, [pc, #344]	@ (801294c <txPushSingleFrame+0x18c>)
 80127f2:	f240 115b 	movw	r1, #347	@ 0x15b
 80127f6:	4856      	ldr	r0, [pc, #344]	@ (8012950 <txPushSingleFrame+0x190>)
 80127f8:	f001 fc98 	bl	801412c <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 80127fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127fe:	3301      	adds	r3, #1
 8012800:	4618      	mov	r0, r3
 8012802:	f7ff ff2f 	bl	8012664 <txRoundFramePayloadSizeUp>
 8012806:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8012808:	6a3a      	ldr	r2, [r7, #32]
 801280a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801280c:	429a      	cmp	r2, r3
 801280e:	d806      	bhi.n	801281e <txPushSingleFrame+0x5e>
 8012810:	4b51      	ldr	r3, [pc, #324]	@ (8012958 <txPushSingleFrame+0x198>)
 8012812:	4a4e      	ldr	r2, [pc, #312]	@ (801294c <txPushSingleFrame+0x18c>)
 8012814:	f240 115d 	movw	r1, #349	@ 0x15d
 8012818:	484d      	ldr	r0, [pc, #308]	@ (8012950 <txPushSingleFrame+0x190>)
 801281a:	f001 fc87 	bl	801412c <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 801281e:	6a3a      	ldr	r2, [r7, #32]
 8012820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012822:	1ad3      	subs	r3, r2, r3
 8012824:	3b01      	subs	r3, #1
 8012826:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8012828:	69fa      	ldr	r2, [r7, #28]
 801282a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801282c:	4413      	add	r3, r2
 801282e:	3301      	adds	r3, #1
 8012830:	6a3a      	ldr	r2, [r7, #32]
 8012832:	429a      	cmp	r2, r3
 8012834:	d006      	beq.n	8012844 <txPushSingleFrame+0x84>
 8012836:	4b49      	ldr	r3, [pc, #292]	@ (801295c <txPushSingleFrame+0x19c>)
 8012838:	4a44      	ldr	r2, [pc, #272]	@ (801294c <txPushSingleFrame+0x18c>)
 801283a:	f240 115f 	movw	r1, #351	@ 0x15f
 801283e:	4844      	ldr	r0, [pc, #272]	@ (8012950 <txPushSingleFrame+0x190>)
 8012840:	f001 fc74 	bl	801412c <__assert_func>
    int32_t       out = 0;
 8012844:	2300      	movs	r3, #0
 8012846:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	689a      	ldr	r2, [r3, #8]
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	429a      	cmp	r2, r3
 8012852:	d209      	bcs.n	8012868 <txPushSingleFrame+0xa8>
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	9300      	str	r3, [sp, #0]
 8012858:	e9d7 2300 	ldrd	r2, r3, [r7]
 801285c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801285e:	68b8      	ldr	r0, [r7, #8]
 8012860:	f7ff ff32 	bl	80126c8 <txAllocateQueueItem>
 8012864:	4603      	mov	r3, r0
 8012866:	e000      	b.n	801286a <txPushSingleFrame+0xaa>
 8012868:	2300      	movs	r3, #0
    TxItem* const tqi =
 801286a:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d054      	beq.n	801291c <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8012872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012874:	2b00      	cmp	r3, #0
 8012876:	d010      	beq.n	801289a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8012878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801287a:	2b00      	cmp	r3, #0
 801287c:	d106      	bne.n	801288c <txPushSingleFrame+0xcc>
 801287e:	4b38      	ldr	r3, [pc, #224]	@ (8012960 <txPushSingleFrame+0x1a0>)
 8012880:	4a32      	ldr	r2, [pc, #200]	@ (801294c <txPushSingleFrame+0x18c>)
 8012882:	f240 1167 	movw	r1, #359	@ 0x167
 8012886:	4832      	ldr	r0, [pc, #200]	@ (8012950 <txPushSingleFrame+0x190>)
 8012888:	f001 fc50 	bl	801412c <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	3330      	adds	r3, #48	@ 0x30
 8012890:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012894:	4618      	mov	r0, r3
 8012896:	f002 fdea 	bl	801546e <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 801289a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801289c:	3330      	adds	r3, #48	@ 0x30
 801289e:	69ba      	ldr	r2, [r7, #24]
 80128a0:	4413      	add	r3, r2
 80128a2:	69fa      	ldr	r2, [r7, #28]
 80128a4:	2100      	movs	r1, #0
 80128a6:	4618      	mov	r0, r3
 80128a8:	f002 fcfb 	bl	80152a2 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 80128ac:	6a3b      	ldr	r3, [r7, #32]
 80128ae:	1e5c      	subs	r4, r3, #1
 80128b0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80128b4:	2201      	movs	r2, #1
 80128b6:	2101      	movs	r1, #1
 80128b8:	2001      	movs	r0, #1
 80128ba:	f7ff fe91 	bl	80125e0 <txMakeTailByte>
 80128be:	4603      	mov	r3, r0
 80128c0:	461a      	mov	r2, r3
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	4423      	add	r3, r4
 80128c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	f103 000c 	add.w	r0, r3, #12
 80128d0:	69b9      	ldr	r1, [r7, #24]
 80128d2:	4b24      	ldr	r3, [pc, #144]	@ (8012964 <txPushSingleFrame+0x1a4>)
 80128d4:	4a24      	ldr	r2, [pc, #144]	@ (8012968 <txPushSingleFrame+0x1a8>)
 80128d6:	f7ff fae7 	bl	8011ea8 <cavlSearch>
 80128da:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 80128dc:	69bb      	ldr	r3, [r7, #24]
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d006      	beq.n	80128f2 <txPushSingleFrame+0x132>
 80128e4:	4b21      	ldr	r3, [pc, #132]	@ (801296c <txPushSingleFrame+0x1ac>)
 80128e6:	4a19      	ldr	r2, [pc, #100]	@ (801294c <txPushSingleFrame+0x18c>)
 80128e8:	f240 1173 	movw	r1, #371	@ 0x173
 80128ec:	4818      	ldr	r0, [pc, #96]	@ (8012950 <txPushSingleFrame+0x190>)
 80128ee:	f001 fc1d 	bl	801412c <__assert_func>
        que->size++;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	689b      	ldr	r3, [r3, #8]
 80128f6:	1c5a      	adds	r2, r3, #1
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	689a      	ldr	r2, [r3, #8]
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	429a      	cmp	r2, r3
 8012906:	d906      	bls.n	8012916 <txPushSingleFrame+0x156>
 8012908:	4b19      	ldr	r3, [pc, #100]	@ (8012970 <txPushSingleFrame+0x1b0>)
 801290a:	4a10      	ldr	r2, [pc, #64]	@ (801294c <txPushSingleFrame+0x18c>)
 801290c:	f240 1175 	movw	r1, #373	@ 0x175
 8012910:	480f      	ldr	r0, [pc, #60]	@ (8012950 <txPushSingleFrame+0x190>)
 8012912:	f001 fc0b 	bl	801412c <__assert_func>
        out = 1;  // One frame enqueued.
 8012916:	2301      	movs	r3, #1
 8012918:	627b      	str	r3, [r7, #36]	@ 0x24
 801291a:	e002      	b.n	8012922 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 801291c:	f06f 0302 	mvn.w	r3, #2
 8012920:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 8012922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012924:	2b00      	cmp	r3, #0
 8012926:	db09      	blt.n	801293c <txPushSingleFrame+0x17c>
 8012928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801292a:	2b01      	cmp	r3, #1
 801292c:	d006      	beq.n	801293c <txPushSingleFrame+0x17c>
 801292e:	4b11      	ldr	r3, [pc, #68]	@ (8012974 <txPushSingleFrame+0x1b4>)
 8012930:	4a06      	ldr	r2, [pc, #24]	@ (801294c <txPushSingleFrame+0x18c>)
 8012932:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8012936:	4806      	ldr	r0, [pc, #24]	@ (8012950 <txPushSingleFrame+0x190>)
 8012938:	f001 fbf8 	bl	801412c <__assert_func>
    return out;
 801293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801293e:	4618      	mov	r0, r3
 8012940:	372c      	adds	r7, #44	@ 0x2c
 8012942:	46bd      	mov	sp, r7
 8012944:	bd90      	pop	{r4, r7, pc}
 8012946:	bf00      	nop
 8012948:	08018c1c 	.word	0x08018c1c
 801294c:	08019828 	.word	0x08019828
 8012950:	08018a58 	.word	0x08018a58
 8012954:	08018c78 	.word	0x08018c78
 8012958:	08018ca8 	.word	0x08018ca8
 801295c:	08018ccc 	.word	0x08018ccc
 8012960:	08018d08 	.word	0x08018d08
 8012964:	08012209 	.word	0x08012209
 8012968:	0801276d 	.word	0x0801276d
 801296c:	08018d20 	.word	0x08018d20
 8012970:	08018d38 	.word	0x08018d38
 8012974:	08018d54 	.word	0x08018d54

08012978 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 8012978:	b590      	push	{r4, r7, lr}
 801297a:	b093      	sub	sp, #76	@ 0x4c
 801297c:	af02      	add	r7, sp, #8
 801297e:	60f8      	str	r0, [r7, #12]
 8012980:	60b9      	str	r1, [r7, #8]
 8012982:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d106      	bne.n	8012998 <txGenerateMultiFrameChain+0x20>
 801298a:	4b93      	ldr	r3, [pc, #588]	@ (8012bd8 <txGenerateMultiFrameChain+0x260>)
 801298c:	4a93      	ldr	r2, [pc, #588]	@ (8012bdc <txGenerateMultiFrameChain+0x264>)
 801298e:	f240 1189 	movw	r1, #393	@ 0x189
 8012992:	4893      	ldr	r0, [pc, #588]	@ (8012be0 <txGenerateMultiFrameChain+0x268>)
 8012994:	f001 fbca 	bl	801412c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d106      	bne.n	80129ac <txGenerateMultiFrameChain+0x34>
 801299e:	4b91      	ldr	r3, [pc, #580]	@ (8012be4 <txGenerateMultiFrameChain+0x26c>)
 80129a0:	4a8e      	ldr	r2, [pc, #568]	@ (8012bdc <txGenerateMultiFrameChain+0x264>)
 80129a2:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80129a6:	488e      	ldr	r0, [pc, #568]	@ (8012be0 <txGenerateMultiFrameChain+0x268>)
 80129a8:	f001 fbc0 	bl	801412c <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80129ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d806      	bhi.n	80129c2 <txGenerateMultiFrameChain+0x4a>
 80129b4:	4b8c      	ldr	r3, [pc, #560]	@ (8012be8 <txGenerateMultiFrameChain+0x270>)
 80129b6:	4a89      	ldr	r2, [pc, #548]	@ (8012bdc <txGenerateMultiFrameChain+0x264>)
 80129b8:	f240 118b 	movw	r1, #395	@ 0x18b
 80129bc:	4888      	ldr	r0, [pc, #544]	@ (8012be0 <txGenerateMultiFrameChain+0x268>)
 80129be:	f001 fbb5 	bl	801412c <__assert_func>
    CANARD_ASSERT(payload != NULL);
 80129c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d106      	bne.n	80129d6 <txGenerateMultiFrameChain+0x5e>
 80129c8:	4b88      	ldr	r3, [pc, #544]	@ (8012bec <txGenerateMultiFrameChain+0x274>)
 80129ca:	4a84      	ldr	r2, [pc, #528]	@ (8012bdc <txGenerateMultiFrameChain+0x264>)
 80129cc:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80129d0:	4883      	ldr	r0, [pc, #524]	@ (8012be0 <txGenerateMultiFrameChain+0x268>)
 80129d2:	f001 fbab 	bl	801412c <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 80129d6:	2300      	movs	r3, #0
 80129d8:	613b      	str	r3, [r7, #16]
 80129da:	2300      	movs	r3, #0
 80129dc:	617b      	str	r3, [r7, #20]
 80129de:	2300      	movs	r3, #0
 80129e0:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 80129e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80129e4:	3302      	adds	r3, #2
 80129e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 80129e8:	2300      	movs	r3, #0
 80129ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 80129ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80129ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80129f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80129f4:	f7ff fc34 	bl	8012260 <crcAdd>
 80129f8:	4603      	mov	r3, r0
 80129fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 80129fc:	2301      	movs	r3, #1
 80129fe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8012a02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a04:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 8012a06:	e0d4      	b.n	8012bb2 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8012a08:	69bb      	ldr	r3, [r7, #24]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8012a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a12:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d908      	bls.n	8012a2c <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8012a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	3301      	adds	r3, #1
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7ff fe1e 	bl	8012664 <txRoundFramePayloadSizeUp>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	e001      	b.n	8012a30 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8012a30:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8012a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8012a3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012a3c:	68b8      	ldr	r0, [r7, #8]
 8012a3e:	f7ff fe43 	bl	80126c8 <txAllocateQueueItem>
 8012a42:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d102      	bne.n	8012a50 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 8012a4a:	6a3b      	ldr	r3, [r7, #32]
 8012a4c:	613b      	str	r3, [r7, #16]
 8012a4e:	e002      	b.n	8012a56 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	6a3a      	ldr	r2, [r7, #32]
 8012a54:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 8012a56:	6a3b      	ldr	r3, [r7, #32]
 8012a58:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 80ae 	beq.w	8012bbe <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8012a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a64:	3b01      	subs	r3, #1
 8012a66:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 8012a6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d21c      	bcs.n	8012aae <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 8012a74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 8012a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d901      	bls.n	8012a88 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	3330      	adds	r3, #48	@ 0x30
 8012a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012a90:	4618      	mov	r0, r3
 8012a92:	f002 fcec 	bl	801546e <memcpy>
            frame_offset = frame_offset + move_size;
 8012a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a9a:	4413      	add	r3, r2
 8012a9c:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 8012a9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aa2:	4413      	add	r3, r2
 8012aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 8012aa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aaa:	4413      	add	r3, r2
 8012aac:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 8012aae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012ab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d343      	bcc.n	8012b3e <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8012ab6:	e00f      	b.n	8012ad8 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012abc:	4413      	add	r3, r2
 8012abe:	3330      	adds	r3, #48	@ 0x30
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8012aca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012acc:	2100      	movs	r1, #0
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7ff fba6 	bl	8012220 <crcAddByte>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8012ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ada:	3302      	adds	r3, #2
 8012adc:	69fa      	ldr	r2, [r7, #28]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d8ea      	bhi.n	8012ab8 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8012ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d213      	bcs.n	8012b12 <txGenerateMultiFrameChain+0x19a>
 8012aea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d10f      	bne.n	8012b12 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8012af2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012af4:	0a1b      	lsrs	r3, r3, #8
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	697a      	ldr	r2, [r7, #20]
 8012afa:	b2d9      	uxtb	r1, r3
 8012afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012afe:	4413      	add	r3, r2
 8012b00:	3330      	adds	r3, #48	@ 0x30
 8012b02:	460a      	mov	r2, r1
 8012b04:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b08:	3301      	adds	r3, #1
 8012b0a:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8012b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b0e:	3301      	adds	r3, #1
 8012b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8012b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d211      	bcs.n	8012b3e <txGenerateMultiFrameChain+0x1c6>
 8012b1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d90d      	bls.n	8012b3e <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 8012b22:	697a      	ldr	r2, [r7, #20]
 8012b24:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012b26:	b2d9      	uxtb	r1, r3
 8012b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b2a:	4413      	add	r3, r2
 8012b2c:	3330      	adds	r3, #48	@ 0x30
 8012b2e:	460a      	mov	r2, r1
 8012b30:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b34:	3301      	adds	r3, #1
 8012b36:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8012b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b40:	1c5a      	adds	r2, r3, #1
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d006      	beq.n	8012b58 <txGenerateMultiFrameChain+0x1e0>
 8012b4a:	4b29      	ldr	r3, [pc, #164]	@ (8012bf0 <txGenerateMultiFrameChain+0x278>)
 8012b4c:	4a23      	ldr	r2, [pc, #140]	@ (8012bdc <txGenerateMultiFrameChain+0x264>)
 8012b4e:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8012b52:	4823      	ldr	r0, [pc, #140]	@ (8012be0 <txGenerateMultiFrameChain+0x268>)
 8012b54:	f001 faea 	bl	801412c <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8012b58:	693a      	ldr	r2, [r7, #16]
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	bf0c      	ite	eq
 8012b60:	2301      	moveq	r3, #1
 8012b62:	2300      	movne	r3, #0
 8012b64:	b2d8      	uxtb	r0, r3
 8012b66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	bf2c      	ite	cs
 8012b6e:	2301      	movcs	r3, #1
 8012b70:	2300      	movcc	r3, #0
 8012b72:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8012b74:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8012b76:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8012b7a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8012b7e:	f7ff fd2f 	bl	80125e0 <txMakeTailByte>
 8012b82:	4603      	mov	r3, r0
 8012b84:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8012b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b88:	4423      	add	r3, r4
 8012b8a:	3330      	adds	r3, #48	@ 0x30
 8012b8c:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 8012b8e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	bf14      	ite	ne
 8012b96:	2301      	movne	r3, #1
 8012b98:	2300      	moveq	r3, #0
 8012b9a:	b2db      	uxtb	r3, r3
 8012b9c:	f083 0301 	eor.w	r3, r3, #1
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8012ba6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8012baa:	f003 0301 	and.w	r3, r3, #1
 8012bae:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 8012bb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	f4ff af26 	bcc.w	8012a08 <txGenerateMultiFrameChain+0x90>
 8012bbc:	e000      	b.n	8012bc0 <txGenerateMultiFrameChain+0x248>
            break;
 8012bbe:	bf00      	nop
    }
    return out;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	461c      	mov	r4, r3
 8012bc4:	f107 0310 	add.w	r3, r7, #16
 8012bc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012bcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012bd0:	68f8      	ldr	r0, [r7, #12]
 8012bd2:	3744      	adds	r7, #68	@ 0x44
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd90      	pop	{r4, r7, pc}
 8012bd8:	08018c1c 	.word	0x08018c1c
 8012bdc:	080198f8 	.word	0x080198f8
 8012be0:	08018a58 	.word	0x08018a58
 8012be4:	08018d6c 	.word	0x08018d6c
 8012be8:	08018d88 	.word	0x08018d88
 8012bec:	08018d08 	.word	0x08018d08
 8012bf0:	08018db0 	.word	0x08018db0

08012bf4 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b094      	sub	sp, #80	@ 0x50
 8012bf8:	af06      	add	r7, sp, #24
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d002      	beq.n	8012c0c <txPushMultiFrame+0x18>
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d106      	bne.n	8012c1a <txPushMultiFrame+0x26>
 8012c0c:	4b65      	ldr	r3, [pc, #404]	@ (8012da4 <txPushMultiFrame+0x1b0>)
 8012c0e:	4a66      	ldr	r2, [pc, #408]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012c10:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8012c14:	4865      	ldr	r0, [pc, #404]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012c16:	f001 fa89 	bl	801412c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d106      	bne.n	8012c2e <txPushMultiFrame+0x3a>
 8012c20:	4b63      	ldr	r3, [pc, #396]	@ (8012db0 <txPushMultiFrame+0x1bc>)
 8012c22:	4a61      	ldr	r2, [pc, #388]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012c24:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8012c28:	4860      	ldr	r0, [pc, #384]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012c2a:	f001 fa7f 	bl	801412c <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8012c2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d806      	bhi.n	8012c44 <txPushMultiFrame+0x50>
 8012c36:	4b5f      	ldr	r3, [pc, #380]	@ (8012db4 <txPushMultiFrame+0x1c0>)
 8012c38:	4a5b      	ldr	r2, [pc, #364]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012c3a:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 8012c3e:	485b      	ldr	r0, [pc, #364]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012c40:	f001 fa74 	bl	801412c <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8012c44:	2300      	movs	r3, #0
 8012c46:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8012c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c4a:	3302      	adds	r3, #2
 8012c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8012c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4413      	add	r3, r2
 8012c54:	1e5a      	subs	r2, r3, #1
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 8012c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d806      	bhi.n	8012c72 <txPushMultiFrame+0x7e>
 8012c64:	4b54      	ldr	r3, [pc, #336]	@ (8012db8 <txPushMultiFrame+0x1c4>)
 8012c66:	4a50      	ldr	r2, [pc, #320]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012c68:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8012c6c:	484f      	ldr	r0, [pc, #316]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012c6e:	f001 fa5d 	bl	801412c <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	689a      	ldr	r2, [r3, #8]
 8012c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c78:	441a      	add	r2, r3
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d87b      	bhi.n	8012d7a <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8012c82:	f107 0010 	add.w	r0, r7, #16
 8012c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c88:	9305      	str	r3, [sp, #20]
 8012c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c8c:	9304      	str	r3, [sp, #16]
 8012c8e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8012c92:	9303      	str	r3, [sp, #12]
 8012c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c96:	9302      	str	r3, [sp, #8]
 8012c98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8012c9c:	e9cd 2300 	strd	r2, r3, [sp]
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	68b9      	ldr	r1, [r7, #8]
 8012ca4:	f7ff fe68 	bl	8012978 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d051      	beq.n	8012d52 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	f103 000c 	add.w	r0, r3, #12
 8012cb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012cba:	4b40      	ldr	r3, [pc, #256]	@ (8012dbc <txPushMultiFrame+0x1c8>)
 8012cbc:	4a40      	ldr	r2, [pc, #256]	@ (8012dc0 <txPushMultiFrame+0x1cc>)
 8012cbe:	f7ff f8f3 	bl	8011ea8 <cavlSearch>
 8012cc2:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cc6:	69fa      	ldr	r2, [r7, #28]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d006      	beq.n	8012cda <txPushMultiFrame+0xe6>
 8012ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8012dc4 <txPushMultiFrame+0x1d0>)
 8012cce:	4a36      	ldr	r2, [pc, #216]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012cd0:	f240 2105 	movw	r1, #517	@ 0x205
 8012cd4:	4835      	ldr	r0, [pc, #212]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012cd6:	f001 fa29 	bl	801412c <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d106      	bne.n	8012cf0 <txPushMultiFrame+0xfc>
 8012ce2:	4b39      	ldr	r3, [pc, #228]	@ (8012dc8 <txPushMultiFrame+0x1d4>)
 8012ce4:	4a30      	ldr	r2, [pc, #192]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012ce6:	f240 2106 	movw	r1, #518	@ 0x206
 8012cea:	4830      	ldr	r0, [pc, #192]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012cec:	f001 fa1e 	bl	801412c <__assert_func>
                next = next->next_in_transfer;
 8012cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf2:	691b      	ldr	r3, [r3, #16]
 8012cf4:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1da      	bne.n	8012cb2 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d006      	beq.n	8012d12 <txPushMultiFrame+0x11e>
 8012d04:	4b31      	ldr	r3, [pc, #196]	@ (8012dcc <txPushMultiFrame+0x1d8>)
 8012d06:	4a28      	ldr	r2, [pc, #160]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012d08:	f240 2109 	movw	r1, #521	@ 0x209
 8012d0c:	4827      	ldr	r0, [pc, #156]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012d0e:	f001 fa0d 	bl	801412c <__assert_func>
            que->size += sq.size;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	689a      	ldr	r2, [r3, #8]
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	441a      	add	r2, r3
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	689a      	ldr	r2, [r3, #8]
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d906      	bls.n	8012d38 <txPushMultiFrame+0x144>
 8012d2a:	4b29      	ldr	r3, [pc, #164]	@ (8012dd0 <txPushMultiFrame+0x1dc>)
 8012d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012d2e:	f240 210b 	movw	r1, #523	@ 0x20b
 8012d32:	481e      	ldr	r0, [pc, #120]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012d34:	f001 f9fa 	bl	801412c <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8012d38:	69bb      	ldr	r3, [r7, #24]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	da06      	bge.n	8012d4c <txPushMultiFrame+0x158>
 8012d3e:	4b25      	ldr	r3, [pc, #148]	@ (8012dd4 <txPushMultiFrame+0x1e0>)
 8012d40:	4a19      	ldr	r2, [pc, #100]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012d42:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8012d46:	4819      	ldr	r0, [pc, #100]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012d48:	f001 f9f0 	bl	801412c <__assert_func>
            out = (int32_t) sq.size;
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d50:	e016      	b.n	8012d80 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 8012d52:	f06f 0302 	mvn.w	r3, #2
 8012d56:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8012d5c:	e009      	b.n	8012d72 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 8012d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d60:	691b      	ldr	r3, [r3, #16]
 8012d62:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d6a:	68b8      	ldr	r0, [r7, #8]
 8012d6c:	4798      	blx	r3
                head = next;
 8012d6e:	6a3b      	ldr	r3, [r7, #32]
 8012d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8012d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d1f2      	bne.n	8012d5e <txPushMultiFrame+0x16a>
 8012d78:	e002      	b.n	8012d80 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8012d7a:	f06f 0302 	mvn.w	r3, #2
 8012d7e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8012d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	db09      	blt.n	8012d9a <txPushMultiFrame+0x1a6>
 8012d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	dc06      	bgt.n	8012d9a <txPushMultiFrame+0x1a6>
 8012d8c:	4b12      	ldr	r3, [pc, #72]	@ (8012dd8 <txPushMultiFrame+0x1e4>)
 8012d8e:	4a06      	ldr	r2, [pc, #24]	@ (8012da8 <txPushMultiFrame+0x1b4>)
 8012d90:	f240 211f 	movw	r1, #543	@ 0x21f
 8012d94:	4805      	ldr	r0, [pc, #20]	@ (8012dac <txPushMultiFrame+0x1b8>)
 8012d96:	f001 f9c9 	bl	801412c <__assert_func>
    return out;
 8012d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3738      	adds	r7, #56	@ 0x38
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	08018dec 	.word	0x08018dec
 8012da8:	080198e4 	.word	0x080198e4
 8012dac:	08018a58 	.word	0x08018a58
 8012db0:	08018d6c 	.word	0x08018d6c
 8012db4:	08018d88 	.word	0x08018d88
 8012db8:	08018e1c 	.word	0x08018e1c
 8012dbc:	08012209 	.word	0x08012209
 8012dc0:	0801276d 	.word	0x0801276d
 8012dc4:	08018e2c 	.word	0x08018e2c
 8012dc8:	08018e40 	.word	0x08018e40
 8012dcc:	08018e5c 	.word	0x08018e5c
 8012dd0:	08018d38 	.word	0x08018d38
 8012dd4:	08018e74 	.word	0x08018e74
 8012dd8:	08018e98 	.word	0x08018e98

08012ddc <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b088      	sub	sp, #32
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d106      	bne.n	8012dfe <rxTryParseFrame+0x22>
 8012df0:	4b96      	ldr	r3, [pc, #600]	@ (801304c <rxTryParseFrame+0x270>)
 8012df2:	4a97      	ldr	r2, [pc, #604]	@ (8013050 <rxTryParseFrame+0x274>)
 8012df4:	f240 214e 	movw	r1, #590	@ 0x24e
 8012df8:	4896      	ldr	r0, [pc, #600]	@ (8013054 <rxTryParseFrame+0x278>)
 8012dfa:	f001 f997 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e06:	d306      	bcc.n	8012e16 <rxTryParseFrame+0x3a>
 8012e08:	4b93      	ldr	r3, [pc, #588]	@ (8013058 <rxTryParseFrame+0x27c>)
 8012e0a:	4a91      	ldr	r2, [pc, #580]	@ (8013050 <rxTryParseFrame+0x274>)
 8012e0c:	f240 214f 	movw	r1, #591	@ 0x24f
 8012e10:	4890      	ldr	r0, [pc, #576]	@ (8013054 <rxTryParseFrame+0x278>)
 8012e12:	f001 f98b 	bl	801412c <__assert_func>
    CANARD_ASSERT(out != NULL);
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d106      	bne.n	8012e2a <rxTryParseFrame+0x4e>
 8012e1c:	4b8f      	ldr	r3, [pc, #572]	@ (801305c <rxTryParseFrame+0x280>)
 8012e1e:	4a8c      	ldr	r2, [pc, #560]	@ (8013050 <rxTryParseFrame+0x274>)
 8012e20:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8012e24:	488b      	ldr	r0, [pc, #556]	@ (8013054 <rxTryParseFrame+0x278>)
 8012e26:	f001 f981 	bl	801412c <__assert_func>
    bool valid = false;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	f000 8105 	beq.w	8013042 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	689b      	ldr	r3, [r3, #8]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d106      	bne.n	8012e4e <rxTryParseFrame+0x72>
 8012e40:	4b87      	ldr	r3, [pc, #540]	@ (8013060 <rxTryParseFrame+0x284>)
 8012e42:	4a83      	ldr	r2, [pc, #524]	@ (8013050 <rxTryParseFrame+0x274>)
 8012e44:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8012e48:	4882      	ldr	r0, [pc, #520]	@ (8013054 <rxTryParseFrame+0x278>)
 8012e4a:	f001 f96f 	bl	801412c <__assert_func>
        out->timestamp_usec = timestamp_usec;
 8012e4e:	6839      	ldr	r1, [r7, #0]
 8012e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012e54:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	0e9b      	lsrs	r3, r3, #26
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	f003 0307 	and.w	r3, r3, #7
 8012e68:	b2da      	uxtb	r2, r3
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	b2db      	uxtb	r3, r3
 8012e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e76:	b2da      	uxtb	r2, r3
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d128      	bne.n	8012ed8 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	0a1b      	lsrs	r3, r3, #8
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d002      	beq.n	8012eac <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	22ff      	movs	r2, #255	@ 0xff
 8012eaa:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	22ff      	movs	r2, #255	@ 0xff
 8012eb0:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d106      	bne.n	8012eca <rxTryParseFrame+0xee>
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d101      	bne.n	8012eca <rxTryParseFrame+0xee>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e000      	b.n	8012ecc <rxTryParseFrame+0xf0>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	77fb      	strb	r3, [r7, #31]
 8012ece:	7ffb      	ldrb	r3, [r7, #31]
 8012ed0:	f003 0301 	and.w	r3, r3, #1
 8012ed4:	77fb      	strb	r3, [r7, #31]
 8012ed6:	e02c      	b.n	8012f32 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d001      	beq.n	8012ee6 <rxTryParseFrame+0x10a>
 8012ee2:	2202      	movs	r2, #2
 8012ee4:	e000      	b.n	8012ee8 <rxTryParseFrame+0x10c>
 8012ee6:	2201      	movs	r2, #1
            out->transfer_kind =
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	0b9b      	lsrs	r3, r3, #14
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ef6:	b29a      	uxth	r2, r3
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8012efc:	69bb      	ldr	r3, [r7, #24]
 8012efe:	09db      	lsrs	r3, r3, #7
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f06:	b2da      	uxtb	r2, r3
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d107      	bne.n	8012f26 <rxTryParseFrame+0x14a>
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	7b1a      	ldrb	r2, [r3, #12]
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	7b5b      	ldrb	r3, [r3, #13]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d001      	beq.n	8012f26 <rxTryParseFrame+0x14a>
 8012f22:	2301      	movs	r3, #1
 8012f24:	e000      	b.n	8012f28 <rxTryParseFrame+0x14c>
 8012f26:	2300      	movs	r3, #0
 8012f28:	77fb      	strb	r3, [r7, #31]
 8012f2a:	7ffb      	ldrb	r3, [r7, #31]
 8012f2c:	f003 0301 	and.w	r3, r3, #1
 8012f30:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	685b      	ldr	r3, [r3, #4]
 8012f36:	1e5a      	subs	r2, r3, #1
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	689a      	ldr	r2, [r3, #8]
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	699a      	ldr	r2, [r3, #24]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	695b      	ldr	r3, [r3, #20]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 8012f52:	7dfb      	ldrb	r3, [r7, #23]
 8012f54:	f003 031f 	and.w	r3, r3, #31
 8012f58:	b2da      	uxtb	r2, r3
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 8012f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f62:	b2db      	uxtb	r3, r3
 8012f64:	09db      	lsrs	r3, r3, #7
 8012f66:	b2da      	uxtb	r2, r3
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 8012f6c:	7dfb      	ldrb	r3, [r7, #23]
 8012f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	bf14      	ite	ne
 8012f76:	2301      	movne	r3, #1
 8012f78:	2300      	moveq	r3, #0
 8012f7a:	b2da      	uxtb	r2, r3
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8012f80:	7dfb      	ldrb	r3, [r7, #23]
 8012f82:	f003 0320 	and.w	r3, r3, #32
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	bf14      	ite	ne
 8012f8a:	2301      	movne	r3, #1
 8012f8c:	2300      	moveq	r3, #0
 8012f8e:	b2da      	uxtb	r2, r3
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 8012f94:	7ffb      	ldrb	r3, [r7, #31]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00c      	beq.n	8012fb4 <rxTryParseFrame+0x1d8>
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	7bdb      	ldrb	r3, [r3, #15]
 8012f9e:	f083 0301 	eor.w	r3, r3, #1
 8012fa2:	b2db      	uxtb	r3, r3
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d103      	bne.n	8012fb0 <rxTryParseFrame+0x1d4>
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	7c5b      	ldrb	r3, [r3, #17]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d001      	beq.n	8012fb4 <rxTryParseFrame+0x1d8>
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	e000      	b.n	8012fb6 <rxTryParseFrame+0x1da>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	77fb      	strb	r3, [r7, #31]
 8012fb8:	7ffb      	ldrb	r3, [r7, #31]
 8012fba:	f003 0301 	and.w	r3, r3, #1
 8012fbe:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8012fc0:	7ffb      	ldrb	r3, [r7, #31]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d00d      	beq.n	8012fe2 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d003      	beq.n	8012fd6 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	7c1b      	ldrb	r3, [r3, #16]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d103      	bne.n	8012fde <rxTryParseFrame+0x202>
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	7b1b      	ldrb	r3, [r3, #12]
 8012fda:	2bff      	cmp	r3, #255	@ 0xff
 8012fdc:	d001      	beq.n	8012fe2 <rxTryParseFrame+0x206>
        valid = valid &&
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e000      	b.n	8012fe4 <rxTryParseFrame+0x208>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	77fb      	strb	r3, [r7, #31]
 8012fe6:	7ffb      	ldrb	r3, [r7, #31]
 8012fe8:	f003 0301 	and.w	r3, r3, #1
 8012fec:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8012fee:	7ffb      	ldrb	r3, [r7, #31]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d009      	beq.n	8013008 <rxTryParseFrame+0x22c>
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	695b      	ldr	r3, [r3, #20]
 8012ff8:	2b06      	cmp	r3, #6
 8012ffa:	d803      	bhi.n	8013004 <rxTryParseFrame+0x228>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	7c1b      	ldrb	r3, [r3, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <rxTryParseFrame+0x22c>
 8013004:	2301      	movs	r3, #1
 8013006:	e000      	b.n	801300a <rxTryParseFrame+0x22e>
 8013008:	2300      	movs	r3, #0
 801300a:	77fb      	strb	r3, [r7, #31]
 801300c:	7ffb      	ldrb	r3, [r7, #31]
 801300e:	f003 0301 	and.w	r3, r3, #1
 8013012:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 8013014:	7ffb      	ldrb	r3, [r7, #31]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d00d      	beq.n	8013036 <rxTryParseFrame+0x25a>
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	695b      	ldr	r3, [r3, #20]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d107      	bne.n	8013032 <rxTryParseFrame+0x256>
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	7bdb      	ldrb	r3, [r3, #15]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d005      	beq.n	8013036 <rxTryParseFrame+0x25a>
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	7c1b      	ldrb	r3, [r3, #16]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d001      	beq.n	8013036 <rxTryParseFrame+0x25a>
 8013032:	2301      	movs	r3, #1
 8013034:	e000      	b.n	8013038 <rxTryParseFrame+0x25c>
 8013036:	2300      	movs	r3, #0
 8013038:	77fb      	strb	r3, [r7, #31]
 801303a:	7ffb      	ldrb	r3, [r7, #31]
 801303c:	f003 0301 	and.w	r3, r3, #1
 8013040:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 8013042:	7ffb      	ldrb	r3, [r7, #31]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3720      	adds	r7, #32
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}
 801304c:	08018eb0 	.word	0x08018eb0
 8013050:	08019934 	.word	0x08019934
 8013054:	08018a58 	.word	0x08018a58
 8013058:	08018ec8 	.word	0x08018ec8
 801305c:	08018ef8 	.word	0x08018ef8
 8013060:	08018f0c 	.word	0x08018f0c

08013064 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d106      	bne.n	8013082 <rxInitTransferMetadataFromFrame+0x1e>
 8013074:	4b19      	ldr	r3, [pc, #100]	@ (80130dc <rxInitTransferMetadataFromFrame+0x78>)
 8013076:	4a1a      	ldr	r2, [pc, #104]	@ (80130e0 <rxInitTransferMetadataFromFrame+0x7c>)
 8013078:	f240 218f 	movw	r1, #655	@ 0x28f
 801307c:	4819      	ldr	r0, [pc, #100]	@ (80130e4 <rxInitTransferMetadataFromFrame+0x80>)
 801307e:	f001 f855 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	699b      	ldr	r3, [r3, #24]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d106      	bne.n	8013098 <rxInitTransferMetadataFromFrame+0x34>
 801308a:	4b17      	ldr	r3, [pc, #92]	@ (80130e8 <rxInitTransferMetadataFromFrame+0x84>)
 801308c:	4a14      	ldr	r2, [pc, #80]	@ (80130e0 <rxInitTransferMetadataFromFrame+0x7c>)
 801308e:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8013092:	4814      	ldr	r0, [pc, #80]	@ (80130e4 <rxInitTransferMetadataFromFrame+0x80>)
 8013094:	f001 f84a 	bl	801412c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d106      	bne.n	80130ac <rxInitTransferMetadataFromFrame+0x48>
 801309e:	4b13      	ldr	r3, [pc, #76]	@ (80130ec <rxInitTransferMetadataFromFrame+0x88>)
 80130a0:	4a0f      	ldr	r2, [pc, #60]	@ (80130e0 <rxInitTransferMetadataFromFrame+0x7c>)
 80130a2:	f240 2191 	movw	r1, #657	@ 0x291
 80130a6:	480f      	ldr	r0, [pc, #60]	@ (80130e4 <rxInitTransferMetadataFromFrame+0x80>)
 80130a8:	f001 f840 	bl	801412c <__assert_func>
    out_transfer->priority       = frame->priority;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	7a1a      	ldrb	r2, [r3, #8]
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	7a5a      	ldrb	r2, [r3, #9]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	895a      	ldrh	r2, [r3, #10]
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	7b1a      	ldrb	r2, [r3, #12]
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	7b9a      	ldrb	r2, [r3, #14]
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	715a      	strb	r2, [r3, #5]
}
 80130d4:	bf00      	nop
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	08018eb0 	.word	0x08018eb0
 80130e0:	080199c8 	.word	0x080199c8
 80130e4:	08018a58 	.word	0x08018a58
 80130e8:	08018f0c 	.word	0x08018f0c
 80130ec:	08018f2c 	.word	0x08018f2c

080130f0 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	4603      	mov	r3, r0
 80130f8:	460a      	mov	r2, r1
 80130fa:	71fb      	strb	r3, [r7, #7]
 80130fc:	4613      	mov	r3, r2
 80130fe:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8013100:	79fb      	ldrb	r3, [r7, #7]
 8013102:	2b1f      	cmp	r3, #31
 8013104:	d906      	bls.n	8013114 <rxComputeTransferIDDifference+0x24>
 8013106:	4b15      	ldr	r3, [pc, #84]	@ (801315c <rxComputeTransferIDDifference+0x6c>)
 8013108:	4a15      	ldr	r2, [pc, #84]	@ (8013160 <rxComputeTransferIDDifference+0x70>)
 801310a:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 801310e:	4815      	ldr	r0, [pc, #84]	@ (8013164 <rxComputeTransferIDDifference+0x74>)
 8013110:	f001 f80c 	bl	801412c <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 8013114:	79bb      	ldrb	r3, [r7, #6]
 8013116:	2b1f      	cmp	r3, #31
 8013118:	d906      	bls.n	8013128 <rxComputeTransferIDDifference+0x38>
 801311a:	4b13      	ldr	r3, [pc, #76]	@ (8013168 <rxComputeTransferIDDifference+0x78>)
 801311c:	4a10      	ldr	r2, [pc, #64]	@ (8013160 <rxComputeTransferIDDifference+0x70>)
 801311e:	f240 219d 	movw	r1, #669	@ 0x29d
 8013122:	4810      	ldr	r0, [pc, #64]	@ (8013164 <rxComputeTransferIDDifference+0x74>)
 8013124:	f001 f802 	bl	801412c <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 8013128:	79fb      	ldrb	r3, [r7, #7]
 801312a:	b29a      	uxth	r2, r3
 801312c:	79bb      	ldrb	r3, [r7, #6]
 801312e:	b29b      	uxth	r3, r3
 8013130:	1ad3      	subs	r3, r2, r3
 8013132:	b29b      	uxth	r3, r3
 8013134:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 8013136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801313a:	2b00      	cmp	r3, #0
 801313c:	da07      	bge.n	801314e <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 801313e:	2320      	movs	r3, #32
 8013140:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 8013142:	7b7b      	ldrb	r3, [r7, #13]
 8013144:	b29a      	uxth	r2, r3
 8013146:	89fb      	ldrh	r3, [r7, #14]
 8013148:	4413      	add	r3, r2
 801314a:	b29b      	uxth	r3, r3
 801314c:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 801314e:	89fb      	ldrh	r3, [r7, #14]
 8013150:	b2db      	uxtb	r3, r3
}
 8013152:	4618      	mov	r0, r3
 8013154:	3710      	adds	r7, #16
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	08018f48 	.word	0x08018f48
 8013160:	08019964 	.word	0x08019964
 8013164:	08018a58 	.word	0x08018a58
 8013168:	08018f60 	.word	0x08018f60

0801316c <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
 8013178:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d106      	bne.n	801318e <rxSessionWritePayload+0x22>
 8013180:	4b67      	ldr	r3, [pc, #412]	@ (8013320 <rxSessionWritePayload+0x1b4>)
 8013182:	4a68      	ldr	r2, [pc, #416]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 8013184:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8013188:	4867      	ldr	r0, [pc, #412]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 801318a:	f000 ffcf 	bl	801412c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d106      	bne.n	80131a2 <rxSessionWritePayload+0x36>
 8013194:	4b65      	ldr	r3, [pc, #404]	@ (801332c <rxSessionWritePayload+0x1c0>)
 8013196:	4a63      	ldr	r2, [pc, #396]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 8013198:	f240 21ae 	movw	r1, #686	@ 0x2ae
 801319c:	4862      	ldr	r0, [pc, #392]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 801319e:	f000 ffc5 	bl	801412c <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 80131a2:	6a3b      	ldr	r3, [r7, #32]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d109      	bne.n	80131bc <rxSessionWritePayload+0x50>
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d006      	beq.n	80131bc <rxSessionWritePayload+0x50>
 80131ae:	4b60      	ldr	r3, [pc, #384]	@ (8013330 <rxSessionWritePayload+0x1c4>)
 80131b0:	4a5c      	ldr	r2, [pc, #368]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 80131b2:	f240 21af 	movw	r1, #687	@ 0x2af
 80131b6:	485c      	ldr	r0, [pc, #368]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 80131b8:	f000 ffb8 	bl	801412c <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d206      	bcs.n	80131d4 <rxSessionWritePayload+0x68>
 80131c6:	4b5b      	ldr	r3, [pc, #364]	@ (8013334 <rxSessionWritePayload+0x1c8>)
 80131c8:	4a56      	ldr	r2, [pc, #344]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 80131ca:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 80131ce:	4856      	ldr	r0, [pc, #344]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 80131d0:	f000 ffac 	bl	801412c <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	68da      	ldr	r2, [r3, #12]
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d906      	bls.n	80131ee <rxSessionWritePayload+0x82>
 80131e0:	4b55      	ldr	r3, [pc, #340]	@ (8013338 <rxSessionWritePayload+0x1cc>)
 80131e2:	4a50      	ldr	r2, [pc, #320]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 80131e4:	f240 21b1 	movw	r1, #689	@ 0x2b1
 80131e8:	484f      	ldr	r0, [pc, #316]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 80131ea:	f000 ff9f 	bl	801412c <__assert_func>

    rxs->total_payload_size += payload_size;
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	689a      	ldr	r2, [r3, #8]
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	441a      	add	r2, r3
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	691b      	ldr	r3, [r3, #16]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d115      	bne.n	801322e <rxSessionWritePayload+0xc2>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d012      	beq.n	801322e <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d006      	beq.n	801321e <rxSessionWritePayload+0xb2>
 8013210:	4b4a      	ldr	r3, [pc, #296]	@ (801333c <rxSessionWritePayload+0x1d0>)
 8013212:	4a44      	ldr	r2, [pc, #272]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 8013214:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8013218:	4843      	ldr	r0, [pc, #268]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 801321a:	f000 ff87 	bl	801412c <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	6879      	ldr	r1, [r7, #4]
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	4798      	blx	r3
 8013228:	4602      	mov	r2, r0
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 801322e:	2300      	movs	r3, #0
 8013230:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d04e      	beq.n	80132d8 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	68da      	ldr	r2, [r3, #12]
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	4413      	add	r3, r2
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	429a      	cmp	r2, r3
 801324a:	d229      	bcs.n	80132a0 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	429a      	cmp	r2, r3
 8013254:	d206      	bcs.n	8013264 <rxSessionWritePayload+0xf8>
 8013256:	4b37      	ldr	r3, [pc, #220]	@ (8013334 <rxSessionWritePayload+0x1c8>)
 8013258:	4a32      	ldr	r2, [pc, #200]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 801325a:	f240 21c3 	movw	r1, #707	@ 0x2c3
 801325e:	4832      	ldr	r0, [pc, #200]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 8013260:	f000 ff64 	bl	801412c <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	68db      	ldr	r3, [r3, #12]
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	1ad3      	subs	r3, r2, r3
 801326c:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	68da      	ldr	r2, [r3, #12]
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	4413      	add	r3, r2
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	429a      	cmp	r2, r3
 801327a:	d006      	beq.n	801328a <rxSessionWritePayload+0x11e>
 801327c:	4b30      	ldr	r3, [pc, #192]	@ (8013340 <rxSessionWritePayload+0x1d4>)
 801327e:	4a29      	ldr	r2, [pc, #164]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 8013280:	f240 21c5 	movw	r1, #709	@ 0x2c5
 8013284:	4828      	ldr	r0, [pc, #160]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 8013286:	f000 ff51 	bl	801412c <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 801328a:	693a      	ldr	r2, [r7, #16]
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	429a      	cmp	r2, r3
 8013290:	d306      	bcc.n	80132a0 <rxSessionWritePayload+0x134>
 8013292:	4b2c      	ldr	r3, [pc, #176]	@ (8013344 <rxSessionWritePayload+0x1d8>)
 8013294:	4a23      	ldr	r2, [pc, #140]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 8013296:	f240 21c6 	movw	r1, #710	@ 0x2c6
 801329a:	4823      	ldr	r0, [pc, #140]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 801329c:	f000 ff46 	bl	801412c <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	691a      	ldr	r2, [r3, #16]
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	4413      	add	r3, r2
 80132aa:	693a      	ldr	r2, [r7, #16]
 80132ac:	6a39      	ldr	r1, [r7, #32]
 80132ae:	4618      	mov	r0, r3
 80132b0:	f002 f8dd 	bl	801546e <memcpy>
        rxs->payload_size += bytes_to_copy;
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	68da      	ldr	r2, [r3, #12]
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	441a      	add	r2, r3
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d219      	bcs.n	80132fe <rxSessionWritePayload+0x192>
 80132ca:	4b1a      	ldr	r3, [pc, #104]	@ (8013334 <rxSessionWritePayload+0x1c8>)
 80132cc:	4a15      	ldr	r2, [pc, #84]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 80132ce:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 80132d2:	4815      	ldr	r0, [pc, #84]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 80132d4:	f000 ff2a 	bl	801412c <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d006      	beq.n	80132ee <rxSessionWritePayload+0x182>
 80132e0:	4b16      	ldr	r3, [pc, #88]	@ (801333c <rxSessionWritePayload+0x1d0>)
 80132e2:	4a10      	ldr	r2, [pc, #64]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 80132e4:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 80132e8:	480f      	ldr	r0, [pc, #60]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 80132ea:	f000 ff1f 	bl	801412c <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <rxSessionWritePayload+0x18e>
 80132f4:	f06f 0302 	mvn.w	r3, #2
 80132f8:	e000      	b.n	80132fc <rxSessionWritePayload+0x190>
 80132fa:	2300      	movs	r3, #0
 80132fc:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 80132fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013302:	2b00      	cmp	r3, #0
 8013304:	dd06      	ble.n	8013314 <rxSessionWritePayload+0x1a8>
 8013306:	4b10      	ldr	r3, [pc, #64]	@ (8013348 <rxSessionWritePayload+0x1dc>)
 8013308:	4a06      	ldr	r2, [pc, #24]	@ (8013324 <rxSessionWritePayload+0x1b8>)
 801330a:	f240 21d7 	movw	r1, #727	@ 0x2d7
 801330e:	4806      	ldr	r0, [pc, #24]	@ (8013328 <rxSessionWritePayload+0x1bc>)
 8013310:	f000 ff0c 	bl	801412c <__assert_func>
    return out;
 8013314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013318:	4618      	mov	r0, r3
 801331a:	3718      	adds	r7, #24
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	08018c1c 	.word	0x08018c1c
 8013324:	080199b0 	.word	0x080199b0
 8013328:	08018a58 	.word	0x08018a58
 801332c:	08018f78 	.word	0x08018f78
 8013330:	08018b14 	.word	0x08018b14
 8013334:	08018f8c 	.word	0x08018f8c
 8013338:	08018fa8 	.word	0x08018fa8
 801333c:	08018fd8 	.word	0x08018fd8
 8013340:	08018ff0 	.word	0x08018ff0
 8013344:	08019020 	.word	0x08019020
 8013348:	08019040 	.word	0x08019040

0801334c <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d106      	bne.n	801336a <rxSessionRestart+0x1e>
 801335c:	4b1a      	ldr	r3, [pc, #104]	@ (80133c8 <rxSessionRestart+0x7c>)
 801335e:	4a1b      	ldr	r2, [pc, #108]	@ (80133cc <rxSessionRestart+0x80>)
 8013360:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8013364:	481a      	ldr	r0, [pc, #104]	@ (80133d0 <rxSessionRestart+0x84>)
 8013366:	f000 fee1 	bl	801412c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d106      	bne.n	801337e <rxSessionRestart+0x32>
 8013370:	4b18      	ldr	r3, [pc, #96]	@ (80133d4 <rxSessionRestart+0x88>)
 8013372:	4a16      	ldr	r2, [pc, #88]	@ (80133cc <rxSessionRestart+0x80>)
 8013374:	f240 21de 	movw	r1, #734	@ 0x2de
 8013378:	4815      	ldr	r0, [pc, #84]	@ (80133d0 <rxSessionRestart+0x84>)
 801337a:	f000 fed7 	bl	801412c <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	683a      	ldr	r2, [r7, #0]
 8013384:	6912      	ldr	r2, [r2, #16]
 8013386:	4611      	mov	r1, r2
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	2200      	movs	r2, #0
 8013390:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	2200      	movs	r2, #0
 8013396:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	2200      	movs	r2, #0
 801339c:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80133a4:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	7d9b      	ldrb	r3, [r3, #22]
 80133aa:	3301      	adds	r3, #1
 80133ac:	b2db      	uxtb	r3, r3
 80133ae:	f003 031f 	and.w	r3, r3, #31
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	2201      	movs	r2, #1
 80133bc:	761a      	strb	r2, [r3, #24]
}
 80133be:	bf00      	nop
 80133c0:	3708      	adds	r7, #8
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop
 80133c8:	08018c1c 	.word	0x08018c1c
 80133cc:	08019984 	.word	0x08019984
 80133d0:	08018a58 	.word	0x08018a58
 80133d4:	08018f78 	.word	0x08018f78

080133d8 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b088      	sub	sp, #32
 80133dc:	af02      	add	r7, sp, #8
 80133de:	60f8      	str	r0, [r7, #12]
 80133e0:	60b9      	str	r1, [r7, #8]
 80133e2:	607a      	str	r2, [r7, #4]
 80133e4:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d106      	bne.n	80133fa <rxSessionAcceptFrame+0x22>
 80133ec:	4b81      	ldr	r3, [pc, #516]	@ (80135f4 <rxSessionAcceptFrame+0x21c>)
 80133ee:	4a82      	ldr	r2, [pc, #520]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 80133f0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80133f4:	4881      	ldr	r0, [pc, #516]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 80133f6:	f000 fe99 	bl	801412c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d106      	bne.n	801340e <rxSessionAcceptFrame+0x36>
 8013400:	4b7f      	ldr	r3, [pc, #508]	@ (8013600 <rxSessionAcceptFrame+0x228>)
 8013402:	4a7d      	ldr	r2, [pc, #500]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 8013404:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8013408:	487c      	ldr	r0, [pc, #496]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 801340a:	f000 fe8f 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d106      	bne.n	8013422 <rxSessionAcceptFrame+0x4a>
 8013414:	4b7b      	ldr	r3, [pc, #492]	@ (8013604 <rxSessionAcceptFrame+0x22c>)
 8013416:	4a78      	ldr	r2, [pc, #480]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 8013418:	f240 21f1 	movw	r1, #753	@ 0x2f1
 801341c:	4877      	ldr	r0, [pc, #476]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 801341e:	f000 fe85 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	699b      	ldr	r3, [r3, #24]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d106      	bne.n	8013438 <rxSessionAcceptFrame+0x60>
 801342a:	4b77      	ldr	r3, [pc, #476]	@ (8013608 <rxSessionAcceptFrame+0x230>)
 801342c:	4a72      	ldr	r2, [pc, #456]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 801342e:	f240 21f2 	movw	r1, #754	@ 0x2f2
 8013432:	4872      	ldr	r0, [pc, #456]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 8013434:	f000 fe7a 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	7b9b      	ldrb	r3, [r3, #14]
 801343c:	2b1f      	cmp	r3, #31
 801343e:	d906      	bls.n	801344e <rxSessionAcceptFrame+0x76>
 8013440:	4b72      	ldr	r3, [pc, #456]	@ (801360c <rxSessionAcceptFrame+0x234>)
 8013442:	4a6d      	ldr	r2, [pc, #436]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 8013444:	f240 21f3 	movw	r1, #755	@ 0x2f3
 8013448:	486c      	ldr	r0, [pc, #432]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 801344a:	f000 fe6f 	bl	801412c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 801344e:	6a3b      	ldr	r3, [r7, #32]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d106      	bne.n	8013462 <rxSessionAcceptFrame+0x8a>
 8013454:	4b6e      	ldr	r3, [pc, #440]	@ (8013610 <rxSessionAcceptFrame+0x238>)
 8013456:	4a68      	ldr	r2, [pc, #416]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 8013458:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 801345c:	4867      	ldr	r0, [pc, #412]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 801345e:	f000 fe65 	bl	801412c <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	7bdb      	ldrb	r3, [r3, #15]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d005      	beq.n	8013476 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013470:	68b9      	ldr	r1, [r7, #8]
 8013472:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	7bdb      	ldrb	r3, [r3, #15]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d005      	beq.n	801348a <rxSessionAcceptFrame+0xb2>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	7c1b      	ldrb	r3, [r3, #16]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d001      	beq.n	801348a <rxSessionAcceptFrame+0xb2>
 8013486:	2301      	movs	r3, #1
 8013488:	e000      	b.n	801348c <rxSessionAcceptFrame+0xb4>
 801348a:	2300      	movs	r3, #0
 801348c:	75bb      	strb	r3, [r7, #22]
 801348e:	7dbb      	ldrb	r3, [r7, #22]
 8013490:	f003 0301 	and.w	r3, r3, #1
 8013494:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8013496:	7dbb      	ldrb	r3, [r7, #22]
 8013498:	f083 0301 	eor.w	r3, r3, #1
 801349c:	b2db      	uxtb	r3, r3
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d00c      	beq.n	80134bc <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	8a98      	ldrh	r0, [r3, #20]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6959      	ldr	r1, [r3, #20]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	699b      	ldr	r3, [r3, #24]
 80134ae:	461a      	mov	r2, r3
 80134b0:	f7fe fed6 	bl	8012260 <crcAdd>
 80134b4:	4603      	mov	r3, r0
 80134b6:	461a      	mov	r2, r3
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	695a      	ldr	r2, [r3, #20]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	699b      	ldr	r3, [r3, #24]
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	4613      	mov	r3, r2
 80134c8:	683a      	ldr	r2, [r7, #0]
 80134ca:	68b9      	ldr	r1, [r7, #8]
 80134cc:	68f8      	ldr	r0, [r7, #12]
 80134ce:	f7ff fe4d 	bl	801316c <rxSessionWritePayload>
 80134d2:	4603      	mov	r3, r0
 80134d4:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 80134d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	da10      	bge.n	8013500 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 80134de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80134e2:	f113 0f03 	cmn.w	r3, #3
 80134e6:	d006      	beq.n	80134f6 <rxSessionAcceptFrame+0x11e>
 80134e8:	4b4a      	ldr	r3, [pc, #296]	@ (8013614 <rxSessionAcceptFrame+0x23c>)
 80134ea:	4a43      	ldr	r2, [pc, #268]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 80134ec:	f240 3106 	movw	r1, #774	@ 0x306
 80134f0:	4842      	ldr	r0, [pc, #264]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 80134f2:	f000 fe1b 	bl	801412c <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 80134f6:	68b9      	ldr	r1, [r7, #8]
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f7ff ff27 	bl	801334c <rxSessionRestart>
 80134fe:	e072      	b.n	80135e6 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	7c1b      	ldrb	r3, [r3, #16]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d05f      	beq.n	80135c8 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8013508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d006      	beq.n	801351e <rxSessionAcceptFrame+0x146>
 8013510:	4b41      	ldr	r3, [pc, #260]	@ (8013618 <rxSessionAcceptFrame+0x240>)
 8013512:	4a39      	ldr	r2, [pc, #228]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 8013514:	f240 310b 	movw	r1, #779	@ 0x30b
 8013518:	4838      	ldr	r0, [pc, #224]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 801351a:	f000 fe07 	bl	801412c <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 801351e:	7dbb      	ldrb	r3, [r7, #22]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d103      	bne.n	801352c <rxSessionAcceptFrame+0x154>
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	8a9b      	ldrh	r3, [r3, #20]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d148      	bne.n	80135be <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 801352c:	2301      	movs	r3, #1
 801352e:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8013530:	6a3b      	ldr	r3, [r7, #32]
 8013532:	4619      	mov	r1, r3
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff fd95 	bl	8013064 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013540:	6a39      	ldr	r1, [r7, #32]
 8013542:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	68da      	ldr	r2, [r3, #12]
 801354a:	6a3b      	ldr	r3, [r7, #32]
 801354c:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	691a      	ldr	r2, [r3, #16]
 8013552:	6a3b      	ldr	r3, [r7, #32]
 8013554:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	689a      	ldr	r2, [r3, #8]
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	429a      	cmp	r2, r3
 8013560:	d206      	bcs.n	8013570 <rxSessionAcceptFrame+0x198>
 8013562:	4b2e      	ldr	r3, [pc, #184]	@ (801361c <rxSessionAcceptFrame+0x244>)
 8013564:	4a24      	ldr	r2, [pc, #144]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 8013566:	f240 3115 	movw	r1, #789	@ 0x315
 801356a:	4824      	ldr	r0, [pc, #144]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 801356c:	f000 fdde 	bl	801412c <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	689a      	ldr	r2, [r3, #8]
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	1ad3      	subs	r3, r2, r3
 801357a:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 801357c:	7dbb      	ldrb	r3, [r7, #22]
 801357e:	f083 0301 	eor.w	r3, r3, #1
 8013582:	b2db      	uxtb	r3, r3
 8013584:	2b00      	cmp	r3, #0
 8013586:	d017      	beq.n	80135b8 <rxSessionAcceptFrame+0x1e0>
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	2b01      	cmp	r3, #1
 801358c:	d814      	bhi.n	80135b8 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 801358e:	6a3b      	ldr	r3, [r7, #32]
 8013590:	691a      	ldr	r2, [r3, #16]
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	f1c3 0302 	rsb	r3, r3, #2
 8013598:	429a      	cmp	r2, r3
 801359a:	d206      	bcs.n	80135aa <rxSessionAcceptFrame+0x1d2>
 801359c:	4b20      	ldr	r3, [pc, #128]	@ (8013620 <rxSessionAcceptFrame+0x248>)
 801359e:	4a16      	ldr	r2, [pc, #88]	@ (80135f8 <rxSessionAcceptFrame+0x220>)
 80135a0:	f240 3119 	movw	r1, #793	@ 0x319
 80135a4:	4815      	ldr	r0, [pc, #84]	@ (80135fc <rxSessionAcceptFrame+0x224>)
 80135a6:	f000 fdc1 	bl	801412c <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 80135aa:	6a3b      	ldr	r3, [r7, #32]
 80135ac:	691a      	ldr	r2, [r3, #16]
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	4413      	add	r3, r2
 80135b2:	1e9a      	subs	r2, r3, #2
 80135b4:	6a3b      	ldr	r3, [r7, #32]
 80135b6:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	2200      	movs	r2, #0
 80135bc:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 80135be:	68b9      	ldr	r1, [r7, #8]
 80135c0:	68f8      	ldr	r0, [r7, #12]
 80135c2:	f7ff fec3 	bl	801334c <rxSessionRestart>
 80135c6:	e00e      	b.n	80135e6 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	7e1b      	ldrb	r3, [r3, #24]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	bf14      	ite	ne
 80135d0:	2301      	movne	r3, #1
 80135d2:	2300      	moveq	r3, #0
 80135d4:	b2db      	uxtb	r3, r3
 80135d6:	f083 0301 	eor.w	r3, r3, #1
 80135da:	b2db      	uxtb	r3, r3
 80135dc:	f003 0301 	and.w	r3, r3, #1
 80135e0:	b2da      	uxtb	r2, r3
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	761a      	strb	r2, [r3, #24]
    }
    return out;
 80135e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3718      	adds	r7, #24
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	08018c1c 	.word	0x08018c1c
 80135f8:	08019998 	.word	0x08019998
 80135fc:	08018a58 	.word	0x08018a58
 8013600:	08018f78 	.word	0x08018f78
 8013604:	08018eb0 	.word	0x08018eb0
 8013608:	08018f0c 	.word	0x08018f0c
 801360c:	0801904c 	.word	0x0801904c
 8013610:	08018f2c 	.word	0x08018f2c
 8013614:	08019074 	.word	0x08019074
 8013618:	08019080 	.word	0x08019080
 801361c:	0801908c 	.word	0x0801908c
 8013620:	080190bc 	.word	0x080190bc

08013624 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8013624:	b5b0      	push	{r4, r5, r7, lr}
 8013626:	b088      	sub	sp, #32
 8013628:	af02      	add	r7, sp, #8
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
 8013630:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d106      	bne.n	8013646 <rxSessionUpdate+0x22>
 8013638:	4b6d      	ldr	r3, [pc, #436]	@ (80137f0 <rxSessionUpdate+0x1cc>)
 801363a:	4a6e      	ldr	r2, [pc, #440]	@ (80137f4 <rxSessionUpdate+0x1d0>)
 801363c:	f240 3137 	movw	r1, #823	@ 0x337
 8013640:	486d      	ldr	r0, [pc, #436]	@ (80137f8 <rxSessionUpdate+0x1d4>)
 8013642:	f000 fd73 	bl	801412c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d106      	bne.n	801365a <rxSessionUpdate+0x36>
 801364c:	4b6b      	ldr	r3, [pc, #428]	@ (80137fc <rxSessionUpdate+0x1d8>)
 801364e:	4a69      	ldr	r2, [pc, #420]	@ (80137f4 <rxSessionUpdate+0x1d0>)
 8013650:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8013654:	4868      	ldr	r0, [pc, #416]	@ (80137f8 <rxSessionUpdate+0x1d4>)
 8013656:	f000 fd69 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d106      	bne.n	801366e <rxSessionUpdate+0x4a>
 8013660:	4b67      	ldr	r3, [pc, #412]	@ (8013800 <rxSessionUpdate+0x1dc>)
 8013662:	4a64      	ldr	r2, [pc, #400]	@ (80137f4 <rxSessionUpdate+0x1d0>)
 8013664:	f240 3139 	movw	r1, #825	@ 0x339
 8013668:	4863      	ldr	r0, [pc, #396]	@ (80137f8 <rxSessionUpdate+0x1d4>)
 801366a:	f000 fd5f 	bl	801412c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 801366e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013670:	2b00      	cmp	r3, #0
 8013672:	d106      	bne.n	8013682 <rxSessionUpdate+0x5e>
 8013674:	4b63      	ldr	r3, [pc, #396]	@ (8013804 <rxSessionUpdate+0x1e0>)
 8013676:	4a5f      	ldr	r2, [pc, #380]	@ (80137f4 <rxSessionUpdate+0x1d0>)
 8013678:	f240 313a 	movw	r1, #826	@ 0x33a
 801367c:	485e      	ldr	r0, [pc, #376]	@ (80137f8 <rxSessionUpdate+0x1d4>)
 801367e:	f000 fd55 	bl	801412c <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	7d9b      	ldrb	r3, [r3, #22]
 8013686:	2b1f      	cmp	r3, #31
 8013688:	d906      	bls.n	8013698 <rxSessionUpdate+0x74>
 801368a:	4b5f      	ldr	r3, [pc, #380]	@ (8013808 <rxSessionUpdate+0x1e4>)
 801368c:	4a59      	ldr	r2, [pc, #356]	@ (80137f4 <rxSessionUpdate+0x1d0>)
 801368e:	f240 313b 	movw	r1, #827	@ 0x33b
 8013692:	4859      	ldr	r0, [pc, #356]	@ (80137f8 <rxSessionUpdate+0x1d4>)
 8013694:	f000 fd4a 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	7b9b      	ldrb	r3, [r3, #14]
 801369c:	2b1f      	cmp	r3, #31
 801369e:	d906      	bls.n	80136ae <rxSessionUpdate+0x8a>
 80136a0:	4b5a      	ldr	r3, [pc, #360]	@ (801380c <rxSessionUpdate+0x1e8>)
 80136a2:	4a54      	ldr	r2, [pc, #336]	@ (80137f4 <rxSessionUpdate+0x1d0>)
 80136a4:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 80136a8:	4853      	ldr	r0, [pc, #332]	@ (80137f8 <rxSessionUpdate+0x1d4>)
 80136aa:	f000 fd3f 	bl	801412c <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b4:	68b9      	ldr	r1, [r7, #8]
 80136b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ba:	4290      	cmp	r0, r2
 80136bc:	eb71 0303 	sbcs.w	r3, r1, r3
 80136c0:	d20f      	bcs.n	80136e2 <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ce:	1a84      	subs	r4, r0, r2
 80136d0:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 80136d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80136d8:	42a2      	cmp	r2, r4
 80136da:	41ab      	sbcs	r3, r5
 80136dc:	d201      	bcs.n	80136e2 <rxSessionUpdate+0xbe>
 80136de:	2301      	movs	r3, #1
 80136e0:	e000      	b.n	80136e4 <rxSessionUpdate+0xc0>
 80136e2:	2300      	movs	r3, #0
 80136e4:	75bb      	strb	r3, [r7, #22]
 80136e6:	7dbb      	ldrb	r3, [r7, #22]
 80136e8:	f003 0301 	and.w	r3, r3, #1
 80136ec:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	7d9a      	ldrb	r2, [r3, #22]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	7b9b      	ldrb	r3, [r3, #14]
 80136f6:	4619      	mov	r1, r3
 80136f8:	4610      	mov	r0, r2
 80136fa:	f7ff fcf9 	bl	80130f0 <rxComputeTransferIDDifference>
 80136fe:	4603      	mov	r3, r0
 8013700:	2b01      	cmp	r3, #1
 8013702:	bf8c      	ite	hi
 8013704:	2301      	movhi	r3, #1
 8013706:	2300      	movls	r3, #0
 8013708:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 801370a:	7dbb      	ldrb	r3, [r7, #22]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d10b      	bne.n	8013728 <rxSessionUpdate+0x104>
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	7ddb      	ldrb	r3, [r3, #23]
 8013714:	78fa      	ldrb	r2, [r7, #3]
 8013716:	429a      	cmp	r2, r3
 8013718:	d108      	bne.n	801372c <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 801371e:	2b00      	cmp	r3, #0
 8013720:	d004      	beq.n	801372c <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8013722:	7d7b      	ldrb	r3, [r7, #21]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d001      	beq.n	801372c <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8013728:	2301      	movs	r3, #1
 801372a:	e000      	b.n	801372e <rxSessionUpdate+0x10a>
 801372c:	2300      	movs	r3, #0
 801372e:	753b      	strb	r3, [r7, #20]
 8013730:	7d3b      	ldrb	r3, [r7, #20]
 8013732:	f003 0301 	and.w	r3, r3, #1
 8013736:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 8013738:	7d3b      	ldrb	r3, [r7, #20]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d013      	beq.n	8013766 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	2200      	movs	r2, #0
 8013742:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	2200      	movs	r2, #0
 8013748:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013750:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	7b9a      	ldrb	r2, [r3, #14]
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	2201      	movs	r2, #1
 801375e:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	78fa      	ldrb	r2, [r7, #3]
 8013764:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 801376a:	7d3b      	ldrb	r3, [r7, #20]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d00b      	beq.n	8013788 <rxSessionUpdate+0x164>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	7bdb      	ldrb	r3, [r3, #15]
 8013774:	f083 0301 	eor.w	r3, r3, #1
 8013778:	b2db      	uxtb	r3, r3
 801377a:	2b00      	cmp	r3, #0
 801377c:	d004      	beq.n	8013788 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 801377e:	68b9      	ldr	r1, [r7, #8]
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f7ff fde3 	bl	801334c <rxSessionRestart>
 8013786:	e02c      	b.n	80137e2 <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	7ddb      	ldrb	r3, [r3, #23]
 801378c:	78fa      	ldrb	r2, [r7, #3]
 801378e:	429a      	cmp	r2, r3
 8013790:	bf0c      	ite	eq
 8013792:	2301      	moveq	r3, #1
 8013794:	2300      	movne	r3, #0
 8013796:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	7c5a      	ldrb	r2, [r3, #17]
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	7e1b      	ldrb	r3, [r3, #24]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	bf0c      	ite	eq
 80137a4:	2301      	moveq	r3, #1
 80137a6:	2300      	movne	r3, #0
 80137a8:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	7b9a      	ldrb	r2, [r3, #14]
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	7d9b      	ldrb	r3, [r3, #22]
 80137b2:	429a      	cmp	r2, r3
 80137b4:	bf0c      	ite	eq
 80137b6:	2301      	moveq	r3, #1
 80137b8:	2300      	movne	r3, #0
 80137ba:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 80137bc:	7cfb      	ldrb	r3, [r7, #19]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00f      	beq.n	80137e2 <rxSessionUpdate+0x1be>
 80137c2:	7cbb      	ldrb	r3, [r7, #18]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00c      	beq.n	80137e2 <rxSessionUpdate+0x1be>
 80137c8:	7c7b      	ldrb	r3, [r7, #17]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d009      	beq.n	80137e2 <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 80137ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137d4:	687a      	ldr	r2, [r7, #4]
 80137d6:	68b9      	ldr	r1, [r7, #8]
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f7ff fdfd 	bl	80133d8 <rxSessionAcceptFrame>
 80137de:	4603      	mov	r3, r0
 80137e0:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 80137e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3718      	adds	r7, #24
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bdb0      	pop	{r4, r5, r7, pc}
 80137ee:	bf00      	nop
 80137f0:	08018c1c 	.word	0x08018c1c
 80137f4:	08019954 	.word	0x08019954
 80137f8:	08018a58 	.word	0x08018a58
 80137fc:	08018f78 	.word	0x08018f78
 8013800:	08018eb0 	.word	0x08018eb0
 8013804:	08018f2c 	.word	0x08018f2c
 8013808:	080190f4 	.word	0x080190f4
 801380c:	0801904c 	.word	0x0801904c

08013810 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8013810:	b5b0      	push	{r4, r5, r7, lr}
 8013812:	b08c      	sub	sp, #48	@ 0x30
 8013814:	af04      	add	r7, sp, #16
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	607a      	str	r2, [r7, #4]
 801381c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d106      	bne.n	8013832 <rxAcceptFrame+0x22>
 8013824:	4b85      	ldr	r3, [pc, #532]	@ (8013a3c <rxAcceptFrame+0x22c>)
 8013826:	4a86      	ldr	r2, [pc, #536]	@ (8013a40 <rxAcceptFrame+0x230>)
 8013828:	f44f 715a 	mov.w	r1, #872	@ 0x368
 801382c:	4885      	ldr	r0, [pc, #532]	@ (8013a44 <rxAcceptFrame+0x234>)
 801382e:	f000 fc7d 	bl	801412c <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d106      	bne.n	8013846 <rxAcceptFrame+0x36>
 8013838:	4b83      	ldr	r3, [pc, #524]	@ (8013a48 <rxAcceptFrame+0x238>)
 801383a:	4a81      	ldr	r2, [pc, #516]	@ (8013a40 <rxAcceptFrame+0x230>)
 801383c:	f240 3169 	movw	r1, #873	@ 0x369
 8013840:	4880      	ldr	r0, [pc, #512]	@ (8013a44 <rxAcceptFrame+0x234>)
 8013842:	f000 fc73 	bl	801412c <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	8b9a      	ldrh	r2, [r3, #28]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	895b      	ldrh	r3, [r3, #10]
 801384e:	429a      	cmp	r2, r3
 8013850:	d006      	beq.n	8013860 <rxAcceptFrame+0x50>
 8013852:	4b7e      	ldr	r3, [pc, #504]	@ (8013a4c <rxAcceptFrame+0x23c>)
 8013854:	4a7a      	ldr	r2, [pc, #488]	@ (8013a40 <rxAcceptFrame+0x230>)
 8013856:	f240 316a 	movw	r1, #874	@ 0x36a
 801385a:	487a      	ldr	r0, [pc, #488]	@ (8013a44 <rxAcceptFrame+0x234>)
 801385c:	f000 fc66 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d106      	bne.n	8013874 <rxAcceptFrame+0x64>
 8013866:	4b7a      	ldr	r3, [pc, #488]	@ (8013a50 <rxAcceptFrame+0x240>)
 8013868:	4a75      	ldr	r2, [pc, #468]	@ (8013a40 <rxAcceptFrame+0x230>)
 801386a:	f240 316b 	movw	r1, #875	@ 0x36b
 801386e:	4875      	ldr	r0, [pc, #468]	@ (8013a44 <rxAcceptFrame+0x234>)
 8013870:	f000 fc5c 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	699b      	ldr	r3, [r3, #24]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d106      	bne.n	801388a <rxAcceptFrame+0x7a>
 801387c:	4b75      	ldr	r3, [pc, #468]	@ (8013a54 <rxAcceptFrame+0x244>)
 801387e:	4a70      	ldr	r2, [pc, #448]	@ (8013a40 <rxAcceptFrame+0x230>)
 8013880:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8013884:	486f      	ldr	r0, [pc, #444]	@ (8013a44 <rxAcceptFrame+0x234>)
 8013886:	f000 fc51 	bl	801412c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	7b9b      	ldrb	r3, [r3, #14]
 801388e:	2b1f      	cmp	r3, #31
 8013890:	d906      	bls.n	80138a0 <rxAcceptFrame+0x90>
 8013892:	4b71      	ldr	r3, [pc, #452]	@ (8013a58 <rxAcceptFrame+0x248>)
 8013894:	4a6a      	ldr	r2, [pc, #424]	@ (8013a40 <rxAcceptFrame+0x230>)
 8013896:	f240 316d 	movw	r1, #877	@ 0x36d
 801389a:	486a      	ldr	r0, [pc, #424]	@ (8013a44 <rxAcceptFrame+0x234>)
 801389c:	f000 fc46 	bl	801412c <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	7b5b      	ldrb	r3, [r3, #13]
 80138a4:	2bff      	cmp	r3, #255	@ 0xff
 80138a6:	d00c      	beq.n	80138c2 <rxAcceptFrame+0xb2>
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	791a      	ldrb	r2, [r3, #4]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	7b5b      	ldrb	r3, [r3, #13]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d006      	beq.n	80138c2 <rxAcceptFrame+0xb2>
 80138b4:	4b69      	ldr	r3, [pc, #420]	@ (8013a5c <rxAcceptFrame+0x24c>)
 80138b6:	4a62      	ldr	r2, [pc, #392]	@ (8013a40 <rxAcceptFrame+0x230>)
 80138b8:	f240 316e 	movw	r1, #878	@ 0x36e
 80138bc:	4861      	ldr	r0, [pc, #388]	@ (8013a44 <rxAcceptFrame+0x234>)
 80138be:	f000 fc35 	bl	801412c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 80138c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d106      	bne.n	80138d6 <rxAcceptFrame+0xc6>
 80138c8:	4b65      	ldr	r3, [pc, #404]	@ (8013a60 <rxAcceptFrame+0x250>)
 80138ca:	4a5d      	ldr	r2, [pc, #372]	@ (8013a40 <rxAcceptFrame+0x230>)
 80138cc:	f240 316f 	movw	r1, #879	@ 0x36f
 80138d0:	485c      	ldr	r0, [pc, #368]	@ (8013a44 <rxAcceptFrame+0x234>)
 80138d2:	f000 fc2b 	bl	801412c <__assert_func>

    int8_t out = 0;
 80138d6:	2300      	movs	r3, #0
 80138d8:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	7b1b      	ldrb	r3, [r3, #12]
 80138de:	b25b      	sxtb	r3, r3
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	db6c      	blt.n	80139be <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	7b1b      	ldrb	r3, [r3, #12]
 80138e8:	68ba      	ldr	r2, [r7, #8]
 80138ea:	3308      	adds	r3, #8
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	4413      	add	r3, r2
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d134      	bne.n	8013960 <rxAcceptFrame+0x150>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	7bdb      	ldrb	r3, [r3, #15]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d030      	beq.n	8013960 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	689b      	ldr	r3, [r3, #8]
 8013902:	2120      	movs	r1, #32
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	4798      	blx	r3
 8013908:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	7b1b      	ldrb	r3, [r3, #12]
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	3308      	adds	r3, #8
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4413      	add	r3, r2
 8013916:	693a      	ldr	r2, [r7, #16]
 8013918:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d01d      	beq.n	801395c <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	6939      	ldr	r1, [r7, #16]
 8013928:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	2200      	movs	r2, #0
 8013930:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	2200      	movs	r2, #0
 8013936:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	2200      	movs	r2, #0
 801393c:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013944:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	7b9a      	ldrb	r2, [r3, #14]
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	78fa      	ldrb	r2, [r7, #3]
 8013952:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	2201      	movs	r2, #1
 8013958:	761a      	strb	r2, [r3, #24]
 801395a:	e001      	b.n	8013960 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 801395c:	23fd      	movs	r3, #253	@ 0xfd
 801395e:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	7b1b      	ldrb	r3, [r3, #12]
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	3308      	adds	r3, #8
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	4413      	add	r3, r2
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d05e      	beq.n	8013a30 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 8013972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d006      	beq.n	8013988 <rxAcceptFrame+0x178>
 801397a:	4b3a      	ldr	r3, [pc, #232]	@ (8013a64 <rxAcceptFrame+0x254>)
 801397c:	4a30      	ldr	r2, [pc, #192]	@ (8013a40 <rxAcceptFrame+0x230>)
 801397e:	f240 318e 	movw	r1, #910	@ 0x38e
 8013982:	4830      	ldr	r0, [pc, #192]	@ (8013a44 <rxAcceptFrame+0x234>)
 8013984:	f000 fbd2 	bl	801412c <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	7b1b      	ldrb	r3, [r3, #12]
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	3308      	adds	r3, #8
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	4413      	add	r3, r2
 8013994:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801399c:	68b9      	ldr	r1, [r7, #8]
 801399e:	6989      	ldr	r1, [r1, #24]
 80139a0:	78fd      	ldrb	r5, [r7, #3]
 80139a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139a4:	9003      	str	r0, [sp, #12]
 80139a6:	9102      	str	r1, [sp, #8]
 80139a8:	e9cd 2300 	strd	r2, r3, [sp]
 80139ac:	462b      	mov	r3, r5
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	4621      	mov	r1, r4
 80139b2:	68f8      	ldr	r0, [r7, #12]
 80139b4:	f7ff fe36 	bl	8013624 <rxSessionUpdate>
 80139b8:	4603      	mov	r3, r0
 80139ba:	77fb      	strb	r3, [r7, #31]
 80139bc:	e038      	b.n	8013a30 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	7b1b      	ldrb	r3, [r3, #12]
 80139c2:	2bff      	cmp	r3, #255	@ 0xff
 80139c4:	d006      	beq.n	80139d4 <rxAcceptFrame+0x1c4>
 80139c6:	4b28      	ldr	r3, [pc, #160]	@ (8013a68 <rxAcceptFrame+0x258>)
 80139c8:	4a1d      	ldr	r2, [pc, #116]	@ (8013a40 <rxAcceptFrame+0x230>)
 80139ca:	f240 319a 	movw	r1, #922	@ 0x39a
 80139ce:	481d      	ldr	r0, [pc, #116]	@ (8013a44 <rxAcceptFrame+0x234>)
 80139d0:	f000 fbac 	bl	801412c <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	695a      	ldr	r2, [r3, #20]
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 80139dc:	4293      	cmp	r3, r2
 80139de:	bf28      	it	cs
 80139e0:	4613      	movcs	r3, r2
 80139e2:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	689b      	ldr	r3, [r3, #8]
 80139e8:	69b9      	ldr	r1, [r7, #24]
 80139ea:	68f8      	ldr	r0, [r7, #12]
 80139ec:	4798      	blx	r3
 80139ee:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d01a      	beq.n	8013a2c <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 80139f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f8:	4619      	mov	r1, r3
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7ff fb32 	bl	8013064 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013a08:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8013a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0e:	69ba      	ldr	r2, [r7, #24]
 8013a10:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 8013a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a14:	697a      	ldr	r2, [r7, #20]
 8013a16:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	699b      	ldr	r3, [r3, #24]
 8013a1c:	69ba      	ldr	r2, [r7, #24]
 8013a1e:	4619      	mov	r1, r3
 8013a20:	6978      	ldr	r0, [r7, #20]
 8013a22:	f001 fd24 	bl	801546e <memcpy>
            out = 1;
 8013a26:	2301      	movs	r3, #1
 8013a28:	77fb      	strb	r3, [r7, #31]
 8013a2a:	e001      	b.n	8013a30 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 8013a2c:	23fd      	movs	r3, #253	@ 0xfd
 8013a2e:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8013a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3720      	adds	r7, #32
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8013a3c:	08018c1c 	.word	0x08018c1c
 8013a40:	08019944 	.word	0x08019944
 8013a44:	08018a58 	.word	0x08018a58
 8013a48:	0801911c 	.word	0x0801911c
 8013a4c:	08019138 	.word	0x08019138
 8013a50:	08018eb0 	.word	0x08018eb0
 8013a54:	08018f0c 	.word	0x08018f0c
 8013a58:	0801904c 	.word	0x0801904c
 8013a5c:	08019160 	.word	0x08019160
 8013a60:	08018f2c 	.word	0x08018f2c
 8013a64:	080191b8 	.word	0x080191b8
 8013a68:	080191c4 	.word	0x080191c4

08013a6c <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	881b      	ldrh	r3, [r3, #0]
 8013a7a:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	8b9b      	ldrh	r3, [r3, #28]
 8013a80:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8013a82:	89fa      	ldrh	r2, [r7, #14]
 8013a84:	89bb      	ldrh	r3, [r7, #12]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d00a      	beq.n	8013aa0 <rxSubscriptionPredicateOnPortID+0x34>
 8013a8a:	89fa      	ldrh	r2, [r7, #14]
 8013a8c:	89bb      	ldrh	r3, [r7, #12]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	bf8c      	ite	hi
 8013a92:	2301      	movhi	r3, #1
 8013a94:	2300      	movls	r3, #0
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	461a      	mov	r2, r3
 8013a9a:	4b05      	ldr	r3, [pc, #20]	@ (8013ab0 <rxSubscriptionPredicateOnPortID+0x44>)
 8013a9c:	569b      	ldrsb	r3, [r3, r2]
 8013a9e:	e000      	b.n	8013aa2 <rxSubscriptionPredicateOnPortID+0x36>
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3714      	adds	r7, #20
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop
 8013ab0:	08019930 	.word	0x08019930

08013ab4 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	331c      	adds	r3, #28
 8013ac2:	6839      	ldr	r1, [r7, #0]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff ffd1 	bl	8013a6c <rxSubscriptionPredicateOnPortID>
 8013aca:	4603      	mov	r3, r0
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8013ad4:	b5b0      	push	{r4, r5, r7, lr}
 8013ad6:	b08c      	sub	sp, #48	@ 0x30
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d106      	bne.n	8013af4 <canardInit+0x20>
 8013ae6:	4b16      	ldr	r3, [pc, #88]	@ (8013b40 <canardInit+0x6c>)
 8013ae8:	4a16      	ldr	r2, [pc, #88]	@ (8013b44 <canardInit+0x70>)
 8013aea:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8013aee:	4816      	ldr	r0, [pc, #88]	@ (8013b48 <canardInit+0x74>)
 8013af0:	f000 fb1c 	bl	801412c <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d106      	bne.n	8013b08 <canardInit+0x34>
 8013afa:	4b14      	ldr	r3, [pc, #80]	@ (8013b4c <canardInit+0x78>)
 8013afc:	4a11      	ldr	r2, [pc, #68]	@ (8013b44 <canardInit+0x70>)
 8013afe:	f240 31d7 	movw	r1, #983	@ 0x3d7
 8013b02:	4811      	ldr	r0, [pc, #68]	@ (8013b48 <canardInit+0x74>)
 8013b04:	f000 fb12 	bl	801412c <__assert_func>
    const CanardInstance out = {
 8013b08:	2300      	movs	r3, #0
 8013b0a:	617b      	str	r3, [r7, #20]
 8013b0c:	23ff      	movs	r3, #255	@ 0xff
 8013b0e:	763b      	strb	r3, [r7, #24]
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	61fb      	str	r3, [r7, #28]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	623b      	str	r3, [r7, #32]
 8013b18:	2300      	movs	r3, #0
 8013b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b20:	2300      	movs	r3, #0
 8013b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	461d      	mov	r5, r3
 8013b28:	f107 0414 	add.w	r4, r7, #20
 8013b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013b34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	3730      	adds	r7, #48	@ 0x30
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8013b40:	080191e4 	.word	0x080191e4
 8013b44:	080197b8 	.word	0x080197b8
 8013b48:	08018a58 	.word	0x08018a58
 8013b4c:	08019204 	.word	0x08019204

08013b50 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8013b50:	b4b0      	push	{r4, r5, r7}
 8013b52:	b08b      	sub	sp, #44	@ 0x2c
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	617b      	str	r3, [r7, #20]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	61bb      	str	r3, [r7, #24]
 8013b64:	2300      	movs	r3, #0
 8013b66:	61fb      	str	r3, [r7, #28]
 8013b68:	2300      	movs	r3, #0
 8013b6a:	623b      	str	r3, [r7, #32]
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	461d      	mov	r5, r3
 8013b74:	f107 0414 	add.w	r4, r7, #20
 8013b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b7c:	6823      	ldr	r3, [r4, #0]
 8013b7e:	602b      	str	r3, [r5, #0]
}
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	372c      	adds	r7, #44	@ 0x2c
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bcb0      	pop	{r4, r5, r7}
 8013b88:	4770      	bx	lr
	...

08013b8c <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b08e      	sub	sp, #56	@ 0x38
 8013b90:	af06      	add	r7, sp, #24
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8013b9a:	f06f 0301 	mvn.w	r3, #1
 8013b9e:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d062      	beq.n	8013c6c <canardTxPush+0xe0>
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d05f      	beq.n	8013c6c <canardTxPush+0xe0>
 8013bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d05c      	beq.n	8013c6c <canardTxPush+0xe0>
 8013bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d102      	bne.n	8013bbe <canardTxPush+0x32>
 8013bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d156      	bne.n	8013c6c <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fe fc02 	bl	80123cc <adjustPresentationLayerMTU>
 8013bc8:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	791a      	ldrb	r2, [r3, #4]
 8013bce:	69bb      	ldr	r3, [r7, #24]
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	4613      	mov	r3, r2
 8013bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bda:	f7fe fc27 	bl	801242c <txMakeCANID>
 8013bde:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	db40      	blt.n	8013c68 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8013be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d81c      	bhi.n	8013c28 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 8013bee:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8013bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013bf2:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8013bf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013bf6:	9103      	str	r1, [sp, #12]
 8013bf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013bfa:	9102      	str	r1, [sp, #8]
 8013bfc:	9201      	str	r2, [sp, #4]
 8013bfe:	9300      	str	r3, [sp, #0]
 8013c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c04:	68b9      	ldr	r1, [r7, #8]
 8013c06:	68f8      	ldr	r0, [r7, #12]
 8013c08:	f7fe fdda 	bl	80127c0 <txPushSingleFrame>
 8013c0c:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	db2b      	blt.n	8013c6c <canardTxPush+0xe0>
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	2b01      	cmp	r3, #1
 8013c18:	d028      	beq.n	8013c6c <canardTxPush+0xe0>
 8013c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8013c8c <canardTxPush+0x100>)
 8013c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8013c90 <canardTxPush+0x104>)
 8013c1e:	f240 4105 	movw	r1, #1029	@ 0x405
 8013c22:	481c      	ldr	r0, [pc, #112]	@ (8013c94 <canardTxPush+0x108>)
 8013c24:	f000 fa82 	bl	801412c <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8013c28:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 8013c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c2c:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 8013c2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013c30:	9105      	str	r1, [sp, #20]
 8013c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013c34:	9104      	str	r1, [sp, #16]
 8013c36:	9203      	str	r2, [sp, #12]
 8013c38:	9302      	str	r3, [sp, #8]
 8013c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8013c42:	69ba      	ldr	r2, [r7, #24]
 8013c44:	68b9      	ldr	r1, [r7, #8]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7fe ffd4 	bl	8012bf4 <txPushMultiFrame>
 8013c4c:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 8013c4e:	69fb      	ldr	r3, [r7, #28]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	db0b      	blt.n	8013c6c <canardTxPush+0xe0>
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	2b01      	cmp	r3, #1
 8013c58:	dc08      	bgt.n	8013c6c <canardTxPush+0xe0>
 8013c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8013c98 <canardTxPush+0x10c>)
 8013c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8013c90 <canardTxPush+0x104>)
 8013c5e:	f240 4111 	movw	r1, #1041	@ 0x411
 8013c62:	480c      	ldr	r0, [pc, #48]	@ (8013c94 <canardTxPush+0x108>)
 8013c64:	f000 fa62 	bl	801412c <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 8013c6c:	69fb      	ldr	r3, [r7, #28]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d106      	bne.n	8013c80 <canardTxPush+0xf4>
 8013c72:	4b0a      	ldr	r3, [pc, #40]	@ (8013c9c <canardTxPush+0x110>)
 8013c74:	4a06      	ldr	r2, [pc, #24]	@ (8013c90 <canardTxPush+0x104>)
 8013c76:	f240 4119 	movw	r1, #1049	@ 0x419
 8013c7a:	4806      	ldr	r0, [pc, #24]	@ (8013c94 <canardTxPush+0x108>)
 8013c7c:	f000 fa56 	bl	801412c <__assert_func>
    return out;
 8013c80:	69fb      	ldr	r3, [r7, #28]
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3720      	adds	r7, #32
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	08018d54 	.word	0x08018d54
 8013c90:	080197c4 	.word	0x080197c4
 8013c94:	08018a58 	.word	0x08018a58
 8013c98:	08018e98 	.word	0x08018e98
 8013c9c:	08019220 	.word	0x08019220

08013ca0 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d006      	beq.n	8013cc0 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	68db      	ldr	r3, [r3, #12]
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7fd ff1d 	bl	8011af8 <cavlFindExtremum>
 8013cbe:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}

08013cca <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8013cca:	b580      	push	{r7, lr}
 8013ccc:	b084      	sub	sp, #16
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
 8013cd2:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d010      	beq.n	8013d00 <canardTxPop+0x36>
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d00d      	beq.n	8013d00 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	330c      	adds	r3, #12
 8013cec:	683a      	ldr	r2, [r7, #0]
 8013cee:	4611      	mov	r1, r2
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7fe f957 	bl	8011fa4 <cavlRemove>
        que->size--;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	689b      	ldr	r3, [r3, #8]
 8013cfa:	1e5a      	subs	r2, r3, #1
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	609a      	str	r2, [r3, #8]
    }
    return out;
 8013d00:	68fb      	ldr	r3, [r7, #12]
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
	...

08013d0c <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b090      	sub	sp, #64	@ 0x40
 8013d10:	af02      	add	r7, sp, #8
 8013d12:	60f8      	str	r0, [r7, #12]
 8013d14:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8013d18:	23fe      	movs	r3, #254	@ 0xfe
 8013d1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d068      	beq.n	8013df6 <canardRxAccept+0xea>
 8013d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d065      	beq.n	8013df6 <canardRxAccept+0xea>
 8013d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d062      	beq.n	8013df6 <canardRxAccept+0xea>
 8013d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013d38:	d25d      	bcs.n	8013df6 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8013d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d3c:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d103      	bne.n	8013d4a <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8013d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d155      	bne.n	8013df6 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 8013d4a:	f107 0310 	add.w	r3, r7, #16
 8013d4e:	2220      	movs	r2, #32
 8013d50:	2100      	movs	r1, #0
 8013d52:	4618      	mov	r0, r3
 8013d54:	f001 faa5 	bl	80152a2 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 8013d58:	f107 0310 	add.w	r3, r7, #16
 8013d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013d62:	f7ff f83b 	bl	8012ddc <rxTryParseFrame>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d041      	beq.n	8013df0 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 8013d6c:	7f7b      	ldrb	r3, [r7, #29]
 8013d6e:	2bff      	cmp	r3, #255	@ 0xff
 8013d70:	d004      	beq.n	8013d7c <canardRxAccept+0x70>
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	791a      	ldrb	r2, [r3, #4]
 8013d76:	7f7b      	ldrb	r3, [r7, #29]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d135      	bne.n	8013de8 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 8013d7c:	7e7b      	ldrb	r3, [r7, #25]
 8013d7e:	3304      	adds	r3, #4
 8013d80:	009b      	lsls	r3, r3, #2
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	18d0      	adds	r0, r2, r3
 8013d86:	f107 0310 	add.w	r3, r7, #16
 8013d8a:	f103 010a 	add.w	r1, r3, #10
 8013d8e:	2300      	movs	r3, #0
 8013d90:	4a21      	ldr	r2, [pc, #132]	@ (8013e18 <canardRxAccept+0x10c>)
 8013d92:	f7fe f889 	bl	8011ea8 <cavlSearch>
 8013d96:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 8013d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d002      	beq.n	8013da4 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 8013d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013da2:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 8013da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d01a      	beq.n	8013de0 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 8013daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dac:	8b9a      	ldrh	r2, [r3, #28]
 8013dae:	8b7b      	ldrh	r3, [r7, #26]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d006      	beq.n	8013dc2 <canardRxAccept+0xb6>
 8013db4:	4b19      	ldr	r3, [pc, #100]	@ (8013e1c <canardRxAccept+0x110>)
 8013db6:	4a1a      	ldr	r2, [pc, #104]	@ (8013e20 <canardRxAccept+0x114>)
 8013db8:	f240 415a 	movw	r1, #1114	@ 0x45a
 8013dbc:	4819      	ldr	r0, [pc, #100]	@ (8013e24 <canardRxAccept+0x118>)
 8013dbe:	f000 f9b5 	bl	801412c <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 8013dc2:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8013dc6:	f107 0210 	add.w	r2, r7, #16
 8013dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	460b      	mov	r3, r1
 8013dd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013dd2:	68f8      	ldr	r0, [r7, #12]
 8013dd4:	f7ff fd1c 	bl	8013810 <rxAcceptFrame>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8013dde:	e00a      	b.n	8013df6 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8013de0:	2300      	movs	r3, #0
 8013de2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8013de6:	e006      	b.n	8013df6 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8013de8:	2300      	movs	r3, #0
 8013dea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013dee:	e002      	b.n	8013df6 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 8013df0:	2300      	movs	r3, #0
 8013df2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 8013df6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013dfa:	2b01      	cmp	r3, #1
 8013dfc:	dd06      	ble.n	8013e0c <canardRxAccept+0x100>
 8013dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8013e28 <canardRxAccept+0x11c>)
 8013e00:	4a07      	ldr	r2, [pc, #28]	@ (8013e20 <canardRxAccept+0x114>)
 8013e02:	f240 416c 	movw	r1, #1132	@ 0x46c
 8013e06:	4807      	ldr	r0, [pc, #28]	@ (8013e24 <canardRxAccept+0x118>)
 8013e08:	f000 f990 	bl	801412c <__assert_func>
    return out;
 8013e0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3738      	adds	r7, #56	@ 0x38
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	08013a6d 	.word	0x08013a6d
 8013e1c:	0801922c 	.word	0x0801922c
 8013e20:	08019920 	.word	0x08019920
 8013e24:	08018a58 	.word	0x08018a58
 8013e28:	0801924c 	.word	0x0801924c

08013e2c <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b088      	sub	sp, #32
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	607b      	str	r3, [r7, #4]
 8013e36:	460b      	mov	r3, r1
 8013e38:	72fb      	strb	r3, [r7, #11]
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8013e3e:	23fe      	movs	r3, #254	@ 0xfe
 8013e40:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8013e42:	7afb      	ldrb	r3, [r7, #11]
 8013e44:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d04a      	beq.n	8013ee2 <canardRxSubscribe+0xb6>
 8013e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d047      	beq.n	8013ee2 <canardRxSubscribe+0xb6>
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	2b02      	cmp	r3, #2
 8013e56:	d844      	bhi.n	8013ee2 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8013e58:	893a      	ldrh	r2, [r7, #8]
 8013e5a:	7afb      	ldrb	r3, [r7, #11]
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	68f8      	ldr	r0, [r7, #12]
 8013e60:	f000 f850 	bl	8013f04 <canardRxUnsubscribe>
 8013e64:	4603      	mov	r3, r0
 8013e66:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8013e68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	db38      	blt.n	8013ee2 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 8013e70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013e76:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8013e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8013e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e82:	893a      	ldrh	r2, [r7, #8]
 8013e84:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013e86:	2300      	movs	r3, #0
 8013e88:	61bb      	str	r3, [r7, #24]
 8013e8a:	e009      	b.n	8013ea0 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 8013e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e8e:	69bb      	ldr	r3, [r7, #24]
 8013e90:	3308      	adds	r3, #8
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	4413      	add	r3, r2
 8013e96:	2200      	movs	r2, #0
 8013e98:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013e9a:	69bb      	ldr	r3, [r7, #24]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	61bb      	str	r3, [r7, #24]
 8013ea0:	69bb      	ldr	r3, [r7, #24]
 8013ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ea4:	d9f2      	bls.n	8013e8c <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	009b      	lsls	r3, r3, #2
 8013eac:	68fa      	ldr	r2, [r7, #12]
 8013eae:	18d0      	adds	r0, r2, r3
 8013eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8013ef0 <canardRxSubscribe+0xc4>)
 8013eb2:	4a10      	ldr	r2, [pc, #64]	@ (8013ef4 <canardRxSubscribe+0xc8>)
 8013eb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013eb6:	f7fd fff7 	bl	8011ea8 <cavlSearch>
 8013eba:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ebe:	693a      	ldr	r2, [r7, #16]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d006      	beq.n	8013ed2 <canardRxSubscribe+0xa6>
 8013ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8013ef8 <canardRxSubscribe+0xcc>)
 8013ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8013efc <canardRxSubscribe+0xd0>)
 8013ec8:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 8013ecc:	480c      	ldr	r0, [pc, #48]	@ (8013f00 <canardRxSubscribe+0xd4>)
 8013ece:	f000 f92d 	bl	801412c <__assert_func>
            out = (out > 0) ? 0 : 1;
 8013ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	bfd4      	ite	le
 8013eda:	2301      	movle	r3, #1
 8013edc:	2300      	movgt	r3, #0
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8013ee2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3720      	adds	r7, #32
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	08012209 	.word	0x08012209
 8013ef4:	08013ab5 	.word	0x08013ab5
 8013ef8:	08019258 	.word	0x08019258
 8013efc:	080199e8 	.word	0x080199e8
 8013f00:	08018a58 	.word	0x08018a58

08013f04 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b088      	sub	sp, #32
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	460b      	mov	r3, r1
 8013f0e:	70fb      	strb	r3, [r7, #3]
 8013f10:	4613      	mov	r3, r2
 8013f12:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8013f14:	23fe      	movs	r3, #254	@ 0xfe
 8013f16:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8013f18:	78fb      	ldrb	r3, [r7, #3]
 8013f1a:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d05f      	beq.n	8013fe2 <canardRxUnsubscribe+0xde>
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	2b02      	cmp	r3, #2
 8013f26:	d85c      	bhi.n	8013fe2 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8013f28:	883b      	ldrh	r3, [r7, #0]
 8013f2a:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	3304      	adds	r3, #4
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	18d0      	adds	r0, r2, r3
 8013f36:	f107 010e 	add.w	r1, r7, #14
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8013ff0 <canardRxUnsubscribe+0xec>)
 8013f3e:	f7fd ffb3 	bl	8011ea8 <cavlSearch>
 8013f42:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8013f44:	693b      	ldr	r3, [r7, #16]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d049      	beq.n	8013fde <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	3304      	adds	r3, #4
 8013f4e:	009b      	lsls	r3, r3, #2
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	4413      	add	r3, r2
 8013f54:	693a      	ldr	r2, [r7, #16]
 8013f56:	4611      	mov	r1, r2
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fe f823 	bl	8011fa4 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	8b9b      	ldrh	r3, [r3, #28]
 8013f62:	883a      	ldrh	r2, [r7, #0]
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d006      	beq.n	8013f76 <canardRxUnsubscribe+0x72>
 8013f68:	4b22      	ldr	r3, [pc, #136]	@ (8013ff4 <canardRxUnsubscribe+0xf0>)
 8013f6a:	4a23      	ldr	r2, [pc, #140]	@ (8013ff8 <canardRxUnsubscribe+0xf4>)
 8013f6c:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 8013f70:	4822      	ldr	r0, [pc, #136]	@ (8013ffc <canardRxUnsubscribe+0xf8>)
 8013f72:	f000 f8db 	bl	801412c <__assert_func>
            out = 1;
 8013f76:	2301      	movs	r3, #1
 8013f78:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	61bb      	str	r3, [r7, #24]
 8013f7e:	e02a      	b.n	8013fd6 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	68da      	ldr	r2, [r3, #12]
 8013f84:	6939      	ldr	r1, [r7, #16]
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	3308      	adds	r3, #8
 8013f8a:	009b      	lsls	r3, r3, #2
 8013f8c:	440b      	add	r3, r1
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d007      	beq.n	8013fa4 <canardRxUnsubscribe+0xa0>
 8013f94:	6939      	ldr	r1, [r7, #16]
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	3308      	adds	r3, #8
 8013f9a:	009b      	lsls	r3, r3, #2
 8013f9c:	440b      	add	r3, r1
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	691b      	ldr	r3, [r3, #16]
 8013fa2:	e000      	b.n	8013fa6 <canardRxUnsubscribe+0xa2>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	68da      	ldr	r2, [r3, #12]
 8013fb0:	6939      	ldr	r1, [r7, #16]
 8013fb2:	69bb      	ldr	r3, [r7, #24]
 8013fb4:	3308      	adds	r3, #8
 8013fb6:	009b      	lsls	r3, r3, #2
 8013fb8:	440b      	add	r3, r1
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8013fc2:	693a      	ldr	r2, [r7, #16]
 8013fc4:	69bb      	ldr	r3, [r7, #24]
 8013fc6:	3308      	adds	r3, #8
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	4413      	add	r3, r2
 8013fcc:	2200      	movs	r2, #0
 8013fce:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	61bb      	str	r3, [r7, #24]
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8013fda:	d9d1      	bls.n	8013f80 <canardRxUnsubscribe+0x7c>
 8013fdc:	e001      	b.n	8013fe2 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8013fe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3720      	adds	r7, #32
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	08013a6d 	.word	0x08013a6d
 8013ff4:	08019278 	.word	0x08019278
 8013ff8:	080199fc 	.word	0x080199fc
 8013ffc:	08018a58 	.word	0x08018a58

08014000 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 8014000:	b480      	push	{r7}
 8014002:	b085      	sub	sp, #20
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	460b      	mov	r3, r1
 801400a:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 801400c:	f107 0308 	add.w	r3, r7, #8
 8014010:	2200      	movs	r2, #0
 8014012:	601a      	str	r2, [r3, #0]
 8014014:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 8014016:	887b      	ldrh	r3, [r7, #2]
 8014018:	021b      	lsls	r3, r3, #8
 801401a:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 801401c:	4b07      	ldr	r3, [pc, #28]	@ (801403c <canardMakeFilterForSubject+0x3c>)
 801401e:	60fb      	str	r3, [r7, #12]

    return out;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	461a      	mov	r2, r3
 8014024:	f107 0308 	add.w	r3, r7, #8
 8014028:	e893 0003 	ldmia.w	r3, {r0, r1}
 801402c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	3714      	adds	r7, #20
 8014034:	46bd      	mov	sp, r7
 8014036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403a:	4770      	bx	lr
 801403c:	021fff80 	.word	0x021fff80

08014040 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 8014040:	b480      	push	{r7}
 8014042:	b085      	sub	sp, #20
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	460b      	mov	r3, r1
 801404a:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 801404c:	f107 0308 	add.w	r3, r7, #8
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]
 8014054:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 8014056:	78fb      	ldrb	r3, [r7, #3]
 8014058:	01db      	lsls	r3, r3, #7
 801405a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801405e:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 8014060:	4b07      	ldr	r3, [pc, #28]	@ (8014080 <canardMakeFilterForServices+0x40>)
 8014062:	60fb      	str	r3, [r7, #12]

    return out;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	461a      	mov	r2, r3
 8014068:	f107 0308 	add.w	r3, r7, #8
 801406c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014070:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	3714      	adds	r7, #20
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr
 8014080:	02803f80 	.word	0x02803f80

08014084 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 8014084:	b480      	push	{r7}
 8014086:	b087      	sub	sp, #28
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	60b9      	str	r1, [r7, #8]
 801408e:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 8014090:	f107 0310 	add.w	r3, r7, #16
 8014094:	2200      	movs	r2, #0
 8014096:	601a      	str	r2, [r3, #0]
 8014098:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	685a      	ldr	r2, [r3, #4]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	401a      	ands	r2, r3
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	6819      	ldr	r1, [r3, #0]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	404b      	eors	r3, r1
 80140ae:	43db      	mvns	r3, r3
 80140b0:	4013      	ands	r3, r2
 80140b2:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	681a      	ldr	r2, [r3, #0]
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	4013      	ands	r3, r2
 80140bc:	613b      	str	r3, [r7, #16]

    return out;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	461a      	mov	r2, r3
 80140c2:	f107 0310 	add.w	r3, r7, #16
 80140c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80140ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80140ce:	68f8      	ldr	r0, [r7, #12]
 80140d0:	371c      	adds	r7, #28
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <_ZdlPvj>:
 80140da:	f000 b814 	b.w	8014106 <_ZdlPv>

080140de <_Znwj>:
 80140de:	2801      	cmp	r0, #1
 80140e0:	bf38      	it	cc
 80140e2:	2001      	movcc	r0, #1
 80140e4:	b510      	push	{r4, lr}
 80140e6:	4604      	mov	r4, r0
 80140e8:	4620      	mov	r0, r4
 80140ea:	f000 f84f 	bl	801418c <malloc>
 80140ee:	b100      	cbz	r0, 80140f2 <_Znwj+0x14>
 80140f0:	bd10      	pop	{r4, pc}
 80140f2:	f000 f80b 	bl	801410c <_ZSt15get_new_handlerv>
 80140f6:	b908      	cbnz	r0, 80140fc <_Znwj+0x1e>
 80140f8:	f000 f810 	bl	801411c <abort>
 80140fc:	4780      	blx	r0
 80140fe:	e7f3      	b.n	80140e8 <_Znwj+0xa>

08014100 <_ZSt25__throw_bad_function_callv>:
 8014100:	b508      	push	{r3, lr}
 8014102:	f000 f80b 	bl	801411c <abort>

08014106 <_ZdlPv>:
 8014106:	f000 b849 	b.w	801419c <free>
	...

0801410c <_ZSt15get_new_handlerv>:
 801410c:	4b02      	ldr	r3, [pc, #8]	@ (8014118 <_ZSt15get_new_handlerv+0xc>)
 801410e:	6818      	ldr	r0, [r3, #0]
 8014110:	f3bf 8f5b 	dmb	ish
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	20000a64 	.word	0x20000a64

0801411c <abort>:
 801411c:	b508      	push	{r3, lr}
 801411e:	2006      	movs	r0, #6
 8014120:	f001 f902 	bl	8015328 <raise>
 8014124:	2001      	movs	r0, #1
 8014126:	f7f5 fc91 	bl	8009a4c <_exit>
	...

0801412c <__assert_func>:
 801412c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801412e:	4614      	mov	r4, r2
 8014130:	461a      	mov	r2, r3
 8014132:	4b09      	ldr	r3, [pc, #36]	@ (8014158 <__assert_func+0x2c>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	4605      	mov	r5, r0
 8014138:	68d8      	ldr	r0, [r3, #12]
 801413a:	b954      	cbnz	r4, 8014152 <__assert_func+0x26>
 801413c:	4b07      	ldr	r3, [pc, #28]	@ (801415c <__assert_func+0x30>)
 801413e:	461c      	mov	r4, r3
 8014140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014144:	9100      	str	r1, [sp, #0]
 8014146:	462b      	mov	r3, r5
 8014148:	4905      	ldr	r1, [pc, #20]	@ (8014160 <__assert_func+0x34>)
 801414a:	f000 ffed 	bl	8015128 <fiprintf>
 801414e:	f7ff ffe5 	bl	801411c <abort>
 8014152:	4b04      	ldr	r3, [pc, #16]	@ (8014164 <__assert_func+0x38>)
 8014154:	e7f4      	b.n	8014140 <__assert_func+0x14>
 8014156:	bf00      	nop
 8014158:	20000090 	.word	0x20000090
 801415c:	08019a4b 	.word	0x08019a4b
 8014160:	08019a1d 	.word	0x08019a1d
 8014164:	08019a10 	.word	0x08019a10

08014168 <exit>:
 8014168:	b508      	push	{r3, lr}
 801416a:	4b06      	ldr	r3, [pc, #24]	@ (8014184 <exit+0x1c>)
 801416c:	4604      	mov	r4, r0
 801416e:	b113      	cbz	r3, 8014176 <exit+0xe>
 8014170:	2100      	movs	r1, #0
 8014172:	f3af 8000 	nop.w
 8014176:	4b04      	ldr	r3, [pc, #16]	@ (8014188 <exit+0x20>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	b103      	cbz	r3, 801417e <exit+0x16>
 801417c:	4798      	blx	r3
 801417e:	4620      	mov	r0, r4
 8014180:	f7f5 fc64 	bl	8009a4c <_exit>
 8014184:	00000000 	.word	0x00000000
 8014188:	20000ba8 	.word	0x20000ba8

0801418c <malloc>:
 801418c:	4b02      	ldr	r3, [pc, #8]	@ (8014198 <malloc+0xc>)
 801418e:	4601      	mov	r1, r0
 8014190:	6818      	ldr	r0, [r3, #0]
 8014192:	f000 b82d 	b.w	80141f0 <_malloc_r>
 8014196:	bf00      	nop
 8014198:	20000090 	.word	0x20000090

0801419c <free>:
 801419c:	4b02      	ldr	r3, [pc, #8]	@ (80141a8 <free+0xc>)
 801419e:	4601      	mov	r1, r0
 80141a0:	6818      	ldr	r0, [r3, #0]
 80141a2:	f001 bfc5 	b.w	8016130 <_free_r>
 80141a6:	bf00      	nop
 80141a8:	20000090 	.word	0x20000090

080141ac <sbrk_aligned>:
 80141ac:	b570      	push	{r4, r5, r6, lr}
 80141ae:	4e0f      	ldr	r6, [pc, #60]	@ (80141ec <sbrk_aligned+0x40>)
 80141b0:	460c      	mov	r4, r1
 80141b2:	6831      	ldr	r1, [r6, #0]
 80141b4:	4605      	mov	r5, r0
 80141b6:	b911      	cbnz	r1, 80141be <sbrk_aligned+0x12>
 80141b8:	f001 f90a 	bl	80153d0 <_sbrk_r>
 80141bc:	6030      	str	r0, [r6, #0]
 80141be:	4621      	mov	r1, r4
 80141c0:	4628      	mov	r0, r5
 80141c2:	f001 f905 	bl	80153d0 <_sbrk_r>
 80141c6:	1c43      	adds	r3, r0, #1
 80141c8:	d103      	bne.n	80141d2 <sbrk_aligned+0x26>
 80141ca:	f04f 34ff 	mov.w	r4, #4294967295
 80141ce:	4620      	mov	r0, r4
 80141d0:	bd70      	pop	{r4, r5, r6, pc}
 80141d2:	1cc4      	adds	r4, r0, #3
 80141d4:	f024 0403 	bic.w	r4, r4, #3
 80141d8:	42a0      	cmp	r0, r4
 80141da:	d0f8      	beq.n	80141ce <sbrk_aligned+0x22>
 80141dc:	1a21      	subs	r1, r4, r0
 80141de:	4628      	mov	r0, r5
 80141e0:	f001 f8f6 	bl	80153d0 <_sbrk_r>
 80141e4:	3001      	adds	r0, #1
 80141e6:	d1f2      	bne.n	80141ce <sbrk_aligned+0x22>
 80141e8:	e7ef      	b.n	80141ca <sbrk_aligned+0x1e>
 80141ea:	bf00      	nop
 80141ec:	20000a68 	.word	0x20000a68

080141f0 <_malloc_r>:
 80141f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141f4:	1ccd      	adds	r5, r1, #3
 80141f6:	f025 0503 	bic.w	r5, r5, #3
 80141fa:	3508      	adds	r5, #8
 80141fc:	2d0c      	cmp	r5, #12
 80141fe:	bf38      	it	cc
 8014200:	250c      	movcc	r5, #12
 8014202:	2d00      	cmp	r5, #0
 8014204:	4606      	mov	r6, r0
 8014206:	db01      	blt.n	801420c <_malloc_r+0x1c>
 8014208:	42a9      	cmp	r1, r5
 801420a:	d904      	bls.n	8014216 <_malloc_r+0x26>
 801420c:	230c      	movs	r3, #12
 801420e:	6033      	str	r3, [r6, #0]
 8014210:	2000      	movs	r0, #0
 8014212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80142ec <_malloc_r+0xfc>
 801421a:	f000 f869 	bl	80142f0 <__malloc_lock>
 801421e:	f8d8 3000 	ldr.w	r3, [r8]
 8014222:	461c      	mov	r4, r3
 8014224:	bb44      	cbnz	r4, 8014278 <_malloc_r+0x88>
 8014226:	4629      	mov	r1, r5
 8014228:	4630      	mov	r0, r6
 801422a:	f7ff ffbf 	bl	80141ac <sbrk_aligned>
 801422e:	1c43      	adds	r3, r0, #1
 8014230:	4604      	mov	r4, r0
 8014232:	d158      	bne.n	80142e6 <_malloc_r+0xf6>
 8014234:	f8d8 4000 	ldr.w	r4, [r8]
 8014238:	4627      	mov	r7, r4
 801423a:	2f00      	cmp	r7, #0
 801423c:	d143      	bne.n	80142c6 <_malloc_r+0xd6>
 801423e:	2c00      	cmp	r4, #0
 8014240:	d04b      	beq.n	80142da <_malloc_r+0xea>
 8014242:	6823      	ldr	r3, [r4, #0]
 8014244:	4639      	mov	r1, r7
 8014246:	4630      	mov	r0, r6
 8014248:	eb04 0903 	add.w	r9, r4, r3
 801424c:	f001 f8c0 	bl	80153d0 <_sbrk_r>
 8014250:	4581      	cmp	r9, r0
 8014252:	d142      	bne.n	80142da <_malloc_r+0xea>
 8014254:	6821      	ldr	r1, [r4, #0]
 8014256:	1a6d      	subs	r5, r5, r1
 8014258:	4629      	mov	r1, r5
 801425a:	4630      	mov	r0, r6
 801425c:	f7ff ffa6 	bl	80141ac <sbrk_aligned>
 8014260:	3001      	adds	r0, #1
 8014262:	d03a      	beq.n	80142da <_malloc_r+0xea>
 8014264:	6823      	ldr	r3, [r4, #0]
 8014266:	442b      	add	r3, r5
 8014268:	6023      	str	r3, [r4, #0]
 801426a:	f8d8 3000 	ldr.w	r3, [r8]
 801426e:	685a      	ldr	r2, [r3, #4]
 8014270:	bb62      	cbnz	r2, 80142cc <_malloc_r+0xdc>
 8014272:	f8c8 7000 	str.w	r7, [r8]
 8014276:	e00f      	b.n	8014298 <_malloc_r+0xa8>
 8014278:	6822      	ldr	r2, [r4, #0]
 801427a:	1b52      	subs	r2, r2, r5
 801427c:	d420      	bmi.n	80142c0 <_malloc_r+0xd0>
 801427e:	2a0b      	cmp	r2, #11
 8014280:	d917      	bls.n	80142b2 <_malloc_r+0xc2>
 8014282:	1961      	adds	r1, r4, r5
 8014284:	42a3      	cmp	r3, r4
 8014286:	6025      	str	r5, [r4, #0]
 8014288:	bf18      	it	ne
 801428a:	6059      	strne	r1, [r3, #4]
 801428c:	6863      	ldr	r3, [r4, #4]
 801428e:	bf08      	it	eq
 8014290:	f8c8 1000 	streq.w	r1, [r8]
 8014294:	5162      	str	r2, [r4, r5]
 8014296:	604b      	str	r3, [r1, #4]
 8014298:	4630      	mov	r0, r6
 801429a:	f000 f82f 	bl	80142fc <__malloc_unlock>
 801429e:	f104 000b 	add.w	r0, r4, #11
 80142a2:	1d23      	adds	r3, r4, #4
 80142a4:	f020 0007 	bic.w	r0, r0, #7
 80142a8:	1ac2      	subs	r2, r0, r3
 80142aa:	bf1c      	itt	ne
 80142ac:	1a1b      	subne	r3, r3, r0
 80142ae:	50a3      	strne	r3, [r4, r2]
 80142b0:	e7af      	b.n	8014212 <_malloc_r+0x22>
 80142b2:	6862      	ldr	r2, [r4, #4]
 80142b4:	42a3      	cmp	r3, r4
 80142b6:	bf0c      	ite	eq
 80142b8:	f8c8 2000 	streq.w	r2, [r8]
 80142bc:	605a      	strne	r2, [r3, #4]
 80142be:	e7eb      	b.n	8014298 <_malloc_r+0xa8>
 80142c0:	4623      	mov	r3, r4
 80142c2:	6864      	ldr	r4, [r4, #4]
 80142c4:	e7ae      	b.n	8014224 <_malloc_r+0x34>
 80142c6:	463c      	mov	r4, r7
 80142c8:	687f      	ldr	r7, [r7, #4]
 80142ca:	e7b6      	b.n	801423a <_malloc_r+0x4a>
 80142cc:	461a      	mov	r2, r3
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	42a3      	cmp	r3, r4
 80142d2:	d1fb      	bne.n	80142cc <_malloc_r+0xdc>
 80142d4:	2300      	movs	r3, #0
 80142d6:	6053      	str	r3, [r2, #4]
 80142d8:	e7de      	b.n	8014298 <_malloc_r+0xa8>
 80142da:	230c      	movs	r3, #12
 80142dc:	6033      	str	r3, [r6, #0]
 80142de:	4630      	mov	r0, r6
 80142e0:	f000 f80c 	bl	80142fc <__malloc_unlock>
 80142e4:	e794      	b.n	8014210 <_malloc_r+0x20>
 80142e6:	6005      	str	r5, [r0, #0]
 80142e8:	e7d6      	b.n	8014298 <_malloc_r+0xa8>
 80142ea:	bf00      	nop
 80142ec:	20000a6c 	.word	0x20000a6c

080142f0 <__malloc_lock>:
 80142f0:	4801      	ldr	r0, [pc, #4]	@ (80142f8 <__malloc_lock+0x8>)
 80142f2:	f001 b8ba 	b.w	801546a <__retarget_lock_acquire_recursive>
 80142f6:	bf00      	nop
 80142f8:	20000bb0 	.word	0x20000bb0

080142fc <__malloc_unlock>:
 80142fc:	4801      	ldr	r0, [pc, #4]	@ (8014304 <__malloc_unlock+0x8>)
 80142fe:	f001 b8b5 	b.w	801546c <__retarget_lock_release_recursive>
 8014302:	bf00      	nop
 8014304:	20000bb0 	.word	0x20000bb0

08014308 <__cvt>:
 8014308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801430c:	ec57 6b10 	vmov	r6, r7, d0
 8014310:	2f00      	cmp	r7, #0
 8014312:	460c      	mov	r4, r1
 8014314:	4619      	mov	r1, r3
 8014316:	463b      	mov	r3, r7
 8014318:	bfbb      	ittet	lt
 801431a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801431e:	461f      	movlt	r7, r3
 8014320:	2300      	movge	r3, #0
 8014322:	232d      	movlt	r3, #45	@ 0x2d
 8014324:	700b      	strb	r3, [r1, #0]
 8014326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014328:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801432c:	4691      	mov	r9, r2
 801432e:	f023 0820 	bic.w	r8, r3, #32
 8014332:	bfbc      	itt	lt
 8014334:	4632      	movlt	r2, r6
 8014336:	4616      	movlt	r6, r2
 8014338:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801433c:	d005      	beq.n	801434a <__cvt+0x42>
 801433e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014342:	d100      	bne.n	8014346 <__cvt+0x3e>
 8014344:	3401      	adds	r4, #1
 8014346:	2102      	movs	r1, #2
 8014348:	e000      	b.n	801434c <__cvt+0x44>
 801434a:	2103      	movs	r1, #3
 801434c:	ab03      	add	r3, sp, #12
 801434e:	9301      	str	r3, [sp, #4]
 8014350:	ab02      	add	r3, sp, #8
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	ec47 6b10 	vmov	d0, r6, r7
 8014358:	4653      	mov	r3, sl
 801435a:	4622      	mov	r2, r4
 801435c:	f001 f924 	bl	80155a8 <_dtoa_r>
 8014360:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014364:	4605      	mov	r5, r0
 8014366:	d119      	bne.n	801439c <__cvt+0x94>
 8014368:	f019 0f01 	tst.w	r9, #1
 801436c:	d00e      	beq.n	801438c <__cvt+0x84>
 801436e:	eb00 0904 	add.w	r9, r0, r4
 8014372:	2200      	movs	r2, #0
 8014374:	2300      	movs	r3, #0
 8014376:	4630      	mov	r0, r6
 8014378:	4639      	mov	r1, r7
 801437a:	f7ec fbcd 	bl	8000b18 <__aeabi_dcmpeq>
 801437e:	b108      	cbz	r0, 8014384 <__cvt+0x7c>
 8014380:	f8cd 900c 	str.w	r9, [sp, #12]
 8014384:	2230      	movs	r2, #48	@ 0x30
 8014386:	9b03      	ldr	r3, [sp, #12]
 8014388:	454b      	cmp	r3, r9
 801438a:	d31e      	bcc.n	80143ca <__cvt+0xc2>
 801438c:	9b03      	ldr	r3, [sp, #12]
 801438e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014390:	1b5b      	subs	r3, r3, r5
 8014392:	4628      	mov	r0, r5
 8014394:	6013      	str	r3, [r2, #0]
 8014396:	b004      	add	sp, #16
 8014398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801439c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80143a0:	eb00 0904 	add.w	r9, r0, r4
 80143a4:	d1e5      	bne.n	8014372 <__cvt+0x6a>
 80143a6:	7803      	ldrb	r3, [r0, #0]
 80143a8:	2b30      	cmp	r3, #48	@ 0x30
 80143aa:	d10a      	bne.n	80143c2 <__cvt+0xba>
 80143ac:	2200      	movs	r2, #0
 80143ae:	2300      	movs	r3, #0
 80143b0:	4630      	mov	r0, r6
 80143b2:	4639      	mov	r1, r7
 80143b4:	f7ec fbb0 	bl	8000b18 <__aeabi_dcmpeq>
 80143b8:	b918      	cbnz	r0, 80143c2 <__cvt+0xba>
 80143ba:	f1c4 0401 	rsb	r4, r4, #1
 80143be:	f8ca 4000 	str.w	r4, [sl]
 80143c2:	f8da 3000 	ldr.w	r3, [sl]
 80143c6:	4499      	add	r9, r3
 80143c8:	e7d3      	b.n	8014372 <__cvt+0x6a>
 80143ca:	1c59      	adds	r1, r3, #1
 80143cc:	9103      	str	r1, [sp, #12]
 80143ce:	701a      	strb	r2, [r3, #0]
 80143d0:	e7d9      	b.n	8014386 <__cvt+0x7e>

080143d2 <__exponent>:
 80143d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143d4:	2900      	cmp	r1, #0
 80143d6:	bfba      	itte	lt
 80143d8:	4249      	neglt	r1, r1
 80143da:	232d      	movlt	r3, #45	@ 0x2d
 80143dc:	232b      	movge	r3, #43	@ 0x2b
 80143de:	2909      	cmp	r1, #9
 80143e0:	7002      	strb	r2, [r0, #0]
 80143e2:	7043      	strb	r3, [r0, #1]
 80143e4:	dd29      	ble.n	801443a <__exponent+0x68>
 80143e6:	f10d 0307 	add.w	r3, sp, #7
 80143ea:	461d      	mov	r5, r3
 80143ec:	270a      	movs	r7, #10
 80143ee:	461a      	mov	r2, r3
 80143f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80143f4:	fb07 1416 	mls	r4, r7, r6, r1
 80143f8:	3430      	adds	r4, #48	@ 0x30
 80143fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80143fe:	460c      	mov	r4, r1
 8014400:	2c63      	cmp	r4, #99	@ 0x63
 8014402:	f103 33ff 	add.w	r3, r3, #4294967295
 8014406:	4631      	mov	r1, r6
 8014408:	dcf1      	bgt.n	80143ee <__exponent+0x1c>
 801440a:	3130      	adds	r1, #48	@ 0x30
 801440c:	1e94      	subs	r4, r2, #2
 801440e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014412:	1c41      	adds	r1, r0, #1
 8014414:	4623      	mov	r3, r4
 8014416:	42ab      	cmp	r3, r5
 8014418:	d30a      	bcc.n	8014430 <__exponent+0x5e>
 801441a:	f10d 0309 	add.w	r3, sp, #9
 801441e:	1a9b      	subs	r3, r3, r2
 8014420:	42ac      	cmp	r4, r5
 8014422:	bf88      	it	hi
 8014424:	2300      	movhi	r3, #0
 8014426:	3302      	adds	r3, #2
 8014428:	4403      	add	r3, r0
 801442a:	1a18      	subs	r0, r3, r0
 801442c:	b003      	add	sp, #12
 801442e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014430:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014434:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014438:	e7ed      	b.n	8014416 <__exponent+0x44>
 801443a:	2330      	movs	r3, #48	@ 0x30
 801443c:	3130      	adds	r1, #48	@ 0x30
 801443e:	7083      	strb	r3, [r0, #2]
 8014440:	70c1      	strb	r1, [r0, #3]
 8014442:	1d03      	adds	r3, r0, #4
 8014444:	e7f1      	b.n	801442a <__exponent+0x58>
	...

08014448 <_printf_float>:
 8014448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444c:	b08d      	sub	sp, #52	@ 0x34
 801444e:	460c      	mov	r4, r1
 8014450:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014454:	4616      	mov	r6, r2
 8014456:	461f      	mov	r7, r3
 8014458:	4605      	mov	r5, r0
 801445a:	f000 ff6d 	bl	8015338 <_localeconv_r>
 801445e:	6803      	ldr	r3, [r0, #0]
 8014460:	9304      	str	r3, [sp, #16]
 8014462:	4618      	mov	r0, r3
 8014464:	f7eb ff2c 	bl	80002c0 <strlen>
 8014468:	2300      	movs	r3, #0
 801446a:	930a      	str	r3, [sp, #40]	@ 0x28
 801446c:	f8d8 3000 	ldr.w	r3, [r8]
 8014470:	9005      	str	r0, [sp, #20]
 8014472:	3307      	adds	r3, #7
 8014474:	f023 0307 	bic.w	r3, r3, #7
 8014478:	f103 0208 	add.w	r2, r3, #8
 801447c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014480:	f8d4 b000 	ldr.w	fp, [r4]
 8014484:	f8c8 2000 	str.w	r2, [r8]
 8014488:	e9d3 8900 	ldrd	r8, r9, [r3]
 801448c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014490:	9307      	str	r3, [sp, #28]
 8014492:	f8cd 8018 	str.w	r8, [sp, #24]
 8014496:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801449a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801449e:	4b9c      	ldr	r3, [pc, #624]	@ (8014710 <_printf_float+0x2c8>)
 80144a0:	f04f 32ff 	mov.w	r2, #4294967295
 80144a4:	f7ec fb6a 	bl	8000b7c <__aeabi_dcmpun>
 80144a8:	bb70      	cbnz	r0, 8014508 <_printf_float+0xc0>
 80144aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144ae:	4b98      	ldr	r3, [pc, #608]	@ (8014710 <_printf_float+0x2c8>)
 80144b0:	f04f 32ff 	mov.w	r2, #4294967295
 80144b4:	f7ec fb44 	bl	8000b40 <__aeabi_dcmple>
 80144b8:	bb30      	cbnz	r0, 8014508 <_printf_float+0xc0>
 80144ba:	2200      	movs	r2, #0
 80144bc:	2300      	movs	r3, #0
 80144be:	4640      	mov	r0, r8
 80144c0:	4649      	mov	r1, r9
 80144c2:	f7ec fb33 	bl	8000b2c <__aeabi_dcmplt>
 80144c6:	b110      	cbz	r0, 80144ce <_printf_float+0x86>
 80144c8:	232d      	movs	r3, #45	@ 0x2d
 80144ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80144ce:	4a91      	ldr	r2, [pc, #580]	@ (8014714 <_printf_float+0x2cc>)
 80144d0:	4b91      	ldr	r3, [pc, #580]	@ (8014718 <_printf_float+0x2d0>)
 80144d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80144d6:	bf94      	ite	ls
 80144d8:	4690      	movls	r8, r2
 80144da:	4698      	movhi	r8, r3
 80144dc:	2303      	movs	r3, #3
 80144de:	6123      	str	r3, [r4, #16]
 80144e0:	f02b 0304 	bic.w	r3, fp, #4
 80144e4:	6023      	str	r3, [r4, #0]
 80144e6:	f04f 0900 	mov.w	r9, #0
 80144ea:	9700      	str	r7, [sp, #0]
 80144ec:	4633      	mov	r3, r6
 80144ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80144f0:	4621      	mov	r1, r4
 80144f2:	4628      	mov	r0, r5
 80144f4:	f000 f9d2 	bl	801489c <_printf_common>
 80144f8:	3001      	adds	r0, #1
 80144fa:	f040 808d 	bne.w	8014618 <_printf_float+0x1d0>
 80144fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014502:	b00d      	add	sp, #52	@ 0x34
 8014504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014508:	4642      	mov	r2, r8
 801450a:	464b      	mov	r3, r9
 801450c:	4640      	mov	r0, r8
 801450e:	4649      	mov	r1, r9
 8014510:	f7ec fb34 	bl	8000b7c <__aeabi_dcmpun>
 8014514:	b140      	cbz	r0, 8014528 <_printf_float+0xe0>
 8014516:	464b      	mov	r3, r9
 8014518:	2b00      	cmp	r3, #0
 801451a:	bfbc      	itt	lt
 801451c:	232d      	movlt	r3, #45	@ 0x2d
 801451e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014522:	4a7e      	ldr	r2, [pc, #504]	@ (801471c <_printf_float+0x2d4>)
 8014524:	4b7e      	ldr	r3, [pc, #504]	@ (8014720 <_printf_float+0x2d8>)
 8014526:	e7d4      	b.n	80144d2 <_printf_float+0x8a>
 8014528:	6863      	ldr	r3, [r4, #4]
 801452a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801452e:	9206      	str	r2, [sp, #24]
 8014530:	1c5a      	adds	r2, r3, #1
 8014532:	d13b      	bne.n	80145ac <_printf_float+0x164>
 8014534:	2306      	movs	r3, #6
 8014536:	6063      	str	r3, [r4, #4]
 8014538:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801453c:	2300      	movs	r3, #0
 801453e:	6022      	str	r2, [r4, #0]
 8014540:	9303      	str	r3, [sp, #12]
 8014542:	ab0a      	add	r3, sp, #40	@ 0x28
 8014544:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014548:	ab09      	add	r3, sp, #36	@ 0x24
 801454a:	9300      	str	r3, [sp, #0]
 801454c:	6861      	ldr	r1, [r4, #4]
 801454e:	ec49 8b10 	vmov	d0, r8, r9
 8014552:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014556:	4628      	mov	r0, r5
 8014558:	f7ff fed6 	bl	8014308 <__cvt>
 801455c:	9b06      	ldr	r3, [sp, #24]
 801455e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014560:	2b47      	cmp	r3, #71	@ 0x47
 8014562:	4680      	mov	r8, r0
 8014564:	d129      	bne.n	80145ba <_printf_float+0x172>
 8014566:	1cc8      	adds	r0, r1, #3
 8014568:	db02      	blt.n	8014570 <_printf_float+0x128>
 801456a:	6863      	ldr	r3, [r4, #4]
 801456c:	4299      	cmp	r1, r3
 801456e:	dd41      	ble.n	80145f4 <_printf_float+0x1ac>
 8014570:	f1aa 0a02 	sub.w	sl, sl, #2
 8014574:	fa5f fa8a 	uxtb.w	sl, sl
 8014578:	3901      	subs	r1, #1
 801457a:	4652      	mov	r2, sl
 801457c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014580:	9109      	str	r1, [sp, #36]	@ 0x24
 8014582:	f7ff ff26 	bl	80143d2 <__exponent>
 8014586:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014588:	1813      	adds	r3, r2, r0
 801458a:	2a01      	cmp	r2, #1
 801458c:	4681      	mov	r9, r0
 801458e:	6123      	str	r3, [r4, #16]
 8014590:	dc02      	bgt.n	8014598 <_printf_float+0x150>
 8014592:	6822      	ldr	r2, [r4, #0]
 8014594:	07d2      	lsls	r2, r2, #31
 8014596:	d501      	bpl.n	801459c <_printf_float+0x154>
 8014598:	3301      	adds	r3, #1
 801459a:	6123      	str	r3, [r4, #16]
 801459c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d0a2      	beq.n	80144ea <_printf_float+0xa2>
 80145a4:	232d      	movs	r3, #45	@ 0x2d
 80145a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80145aa:	e79e      	b.n	80144ea <_printf_float+0xa2>
 80145ac:	9a06      	ldr	r2, [sp, #24]
 80145ae:	2a47      	cmp	r2, #71	@ 0x47
 80145b0:	d1c2      	bne.n	8014538 <_printf_float+0xf0>
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d1c0      	bne.n	8014538 <_printf_float+0xf0>
 80145b6:	2301      	movs	r3, #1
 80145b8:	e7bd      	b.n	8014536 <_printf_float+0xee>
 80145ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80145be:	d9db      	bls.n	8014578 <_printf_float+0x130>
 80145c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80145c4:	d118      	bne.n	80145f8 <_printf_float+0x1b0>
 80145c6:	2900      	cmp	r1, #0
 80145c8:	6863      	ldr	r3, [r4, #4]
 80145ca:	dd0b      	ble.n	80145e4 <_printf_float+0x19c>
 80145cc:	6121      	str	r1, [r4, #16]
 80145ce:	b913      	cbnz	r3, 80145d6 <_printf_float+0x18e>
 80145d0:	6822      	ldr	r2, [r4, #0]
 80145d2:	07d0      	lsls	r0, r2, #31
 80145d4:	d502      	bpl.n	80145dc <_printf_float+0x194>
 80145d6:	3301      	adds	r3, #1
 80145d8:	440b      	add	r3, r1
 80145da:	6123      	str	r3, [r4, #16]
 80145dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80145de:	f04f 0900 	mov.w	r9, #0
 80145e2:	e7db      	b.n	801459c <_printf_float+0x154>
 80145e4:	b913      	cbnz	r3, 80145ec <_printf_float+0x1a4>
 80145e6:	6822      	ldr	r2, [r4, #0]
 80145e8:	07d2      	lsls	r2, r2, #31
 80145ea:	d501      	bpl.n	80145f0 <_printf_float+0x1a8>
 80145ec:	3302      	adds	r3, #2
 80145ee:	e7f4      	b.n	80145da <_printf_float+0x192>
 80145f0:	2301      	movs	r3, #1
 80145f2:	e7f2      	b.n	80145da <_printf_float+0x192>
 80145f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80145f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145fa:	4299      	cmp	r1, r3
 80145fc:	db05      	blt.n	801460a <_printf_float+0x1c2>
 80145fe:	6823      	ldr	r3, [r4, #0]
 8014600:	6121      	str	r1, [r4, #16]
 8014602:	07d8      	lsls	r0, r3, #31
 8014604:	d5ea      	bpl.n	80145dc <_printf_float+0x194>
 8014606:	1c4b      	adds	r3, r1, #1
 8014608:	e7e7      	b.n	80145da <_printf_float+0x192>
 801460a:	2900      	cmp	r1, #0
 801460c:	bfd4      	ite	le
 801460e:	f1c1 0202 	rsble	r2, r1, #2
 8014612:	2201      	movgt	r2, #1
 8014614:	4413      	add	r3, r2
 8014616:	e7e0      	b.n	80145da <_printf_float+0x192>
 8014618:	6823      	ldr	r3, [r4, #0]
 801461a:	055a      	lsls	r2, r3, #21
 801461c:	d407      	bmi.n	801462e <_printf_float+0x1e6>
 801461e:	6923      	ldr	r3, [r4, #16]
 8014620:	4642      	mov	r2, r8
 8014622:	4631      	mov	r1, r6
 8014624:	4628      	mov	r0, r5
 8014626:	47b8      	blx	r7
 8014628:	3001      	adds	r0, #1
 801462a:	d12b      	bne.n	8014684 <_printf_float+0x23c>
 801462c:	e767      	b.n	80144fe <_printf_float+0xb6>
 801462e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014632:	f240 80dd 	bls.w	80147f0 <_printf_float+0x3a8>
 8014636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801463a:	2200      	movs	r2, #0
 801463c:	2300      	movs	r3, #0
 801463e:	f7ec fa6b 	bl	8000b18 <__aeabi_dcmpeq>
 8014642:	2800      	cmp	r0, #0
 8014644:	d033      	beq.n	80146ae <_printf_float+0x266>
 8014646:	4a37      	ldr	r2, [pc, #220]	@ (8014724 <_printf_float+0x2dc>)
 8014648:	2301      	movs	r3, #1
 801464a:	4631      	mov	r1, r6
 801464c:	4628      	mov	r0, r5
 801464e:	47b8      	blx	r7
 8014650:	3001      	adds	r0, #1
 8014652:	f43f af54 	beq.w	80144fe <_printf_float+0xb6>
 8014656:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801465a:	4543      	cmp	r3, r8
 801465c:	db02      	blt.n	8014664 <_printf_float+0x21c>
 801465e:	6823      	ldr	r3, [r4, #0]
 8014660:	07d8      	lsls	r0, r3, #31
 8014662:	d50f      	bpl.n	8014684 <_printf_float+0x23c>
 8014664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014668:	4631      	mov	r1, r6
 801466a:	4628      	mov	r0, r5
 801466c:	47b8      	blx	r7
 801466e:	3001      	adds	r0, #1
 8014670:	f43f af45 	beq.w	80144fe <_printf_float+0xb6>
 8014674:	f04f 0900 	mov.w	r9, #0
 8014678:	f108 38ff 	add.w	r8, r8, #4294967295
 801467c:	f104 0a1a 	add.w	sl, r4, #26
 8014680:	45c8      	cmp	r8, r9
 8014682:	dc09      	bgt.n	8014698 <_printf_float+0x250>
 8014684:	6823      	ldr	r3, [r4, #0]
 8014686:	079b      	lsls	r3, r3, #30
 8014688:	f100 8103 	bmi.w	8014892 <_printf_float+0x44a>
 801468c:	68e0      	ldr	r0, [r4, #12]
 801468e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014690:	4298      	cmp	r0, r3
 8014692:	bfb8      	it	lt
 8014694:	4618      	movlt	r0, r3
 8014696:	e734      	b.n	8014502 <_printf_float+0xba>
 8014698:	2301      	movs	r3, #1
 801469a:	4652      	mov	r2, sl
 801469c:	4631      	mov	r1, r6
 801469e:	4628      	mov	r0, r5
 80146a0:	47b8      	blx	r7
 80146a2:	3001      	adds	r0, #1
 80146a4:	f43f af2b 	beq.w	80144fe <_printf_float+0xb6>
 80146a8:	f109 0901 	add.w	r9, r9, #1
 80146ac:	e7e8      	b.n	8014680 <_printf_float+0x238>
 80146ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	dc39      	bgt.n	8014728 <_printf_float+0x2e0>
 80146b4:	4a1b      	ldr	r2, [pc, #108]	@ (8014724 <_printf_float+0x2dc>)
 80146b6:	2301      	movs	r3, #1
 80146b8:	4631      	mov	r1, r6
 80146ba:	4628      	mov	r0, r5
 80146bc:	47b8      	blx	r7
 80146be:	3001      	adds	r0, #1
 80146c0:	f43f af1d 	beq.w	80144fe <_printf_float+0xb6>
 80146c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80146c8:	ea59 0303 	orrs.w	r3, r9, r3
 80146cc:	d102      	bne.n	80146d4 <_printf_float+0x28c>
 80146ce:	6823      	ldr	r3, [r4, #0]
 80146d0:	07d9      	lsls	r1, r3, #31
 80146d2:	d5d7      	bpl.n	8014684 <_printf_float+0x23c>
 80146d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146d8:	4631      	mov	r1, r6
 80146da:	4628      	mov	r0, r5
 80146dc:	47b8      	blx	r7
 80146de:	3001      	adds	r0, #1
 80146e0:	f43f af0d 	beq.w	80144fe <_printf_float+0xb6>
 80146e4:	f04f 0a00 	mov.w	sl, #0
 80146e8:	f104 0b1a 	add.w	fp, r4, #26
 80146ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ee:	425b      	negs	r3, r3
 80146f0:	4553      	cmp	r3, sl
 80146f2:	dc01      	bgt.n	80146f8 <_printf_float+0x2b0>
 80146f4:	464b      	mov	r3, r9
 80146f6:	e793      	b.n	8014620 <_printf_float+0x1d8>
 80146f8:	2301      	movs	r3, #1
 80146fa:	465a      	mov	r2, fp
 80146fc:	4631      	mov	r1, r6
 80146fe:	4628      	mov	r0, r5
 8014700:	47b8      	blx	r7
 8014702:	3001      	adds	r0, #1
 8014704:	f43f aefb 	beq.w	80144fe <_printf_float+0xb6>
 8014708:	f10a 0a01 	add.w	sl, sl, #1
 801470c:	e7ee      	b.n	80146ec <_printf_float+0x2a4>
 801470e:	bf00      	nop
 8014710:	7fefffff 	.word	0x7fefffff
 8014714:	08019a4c 	.word	0x08019a4c
 8014718:	08019a50 	.word	0x08019a50
 801471c:	08019a54 	.word	0x08019a54
 8014720:	08019a58 	.word	0x08019a58
 8014724:	08019a5c 	.word	0x08019a5c
 8014728:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801472a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801472e:	4553      	cmp	r3, sl
 8014730:	bfa8      	it	ge
 8014732:	4653      	movge	r3, sl
 8014734:	2b00      	cmp	r3, #0
 8014736:	4699      	mov	r9, r3
 8014738:	dc36      	bgt.n	80147a8 <_printf_float+0x360>
 801473a:	f04f 0b00 	mov.w	fp, #0
 801473e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014742:	f104 021a 	add.w	r2, r4, #26
 8014746:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014748:	9306      	str	r3, [sp, #24]
 801474a:	eba3 0309 	sub.w	r3, r3, r9
 801474e:	455b      	cmp	r3, fp
 8014750:	dc31      	bgt.n	80147b6 <_printf_float+0x36e>
 8014752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014754:	459a      	cmp	sl, r3
 8014756:	dc3a      	bgt.n	80147ce <_printf_float+0x386>
 8014758:	6823      	ldr	r3, [r4, #0]
 801475a:	07da      	lsls	r2, r3, #31
 801475c:	d437      	bmi.n	80147ce <_printf_float+0x386>
 801475e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014760:	ebaa 0903 	sub.w	r9, sl, r3
 8014764:	9b06      	ldr	r3, [sp, #24]
 8014766:	ebaa 0303 	sub.w	r3, sl, r3
 801476a:	4599      	cmp	r9, r3
 801476c:	bfa8      	it	ge
 801476e:	4699      	movge	r9, r3
 8014770:	f1b9 0f00 	cmp.w	r9, #0
 8014774:	dc33      	bgt.n	80147de <_printf_float+0x396>
 8014776:	f04f 0800 	mov.w	r8, #0
 801477a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801477e:	f104 0b1a 	add.w	fp, r4, #26
 8014782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014784:	ebaa 0303 	sub.w	r3, sl, r3
 8014788:	eba3 0309 	sub.w	r3, r3, r9
 801478c:	4543      	cmp	r3, r8
 801478e:	f77f af79 	ble.w	8014684 <_printf_float+0x23c>
 8014792:	2301      	movs	r3, #1
 8014794:	465a      	mov	r2, fp
 8014796:	4631      	mov	r1, r6
 8014798:	4628      	mov	r0, r5
 801479a:	47b8      	blx	r7
 801479c:	3001      	adds	r0, #1
 801479e:	f43f aeae 	beq.w	80144fe <_printf_float+0xb6>
 80147a2:	f108 0801 	add.w	r8, r8, #1
 80147a6:	e7ec      	b.n	8014782 <_printf_float+0x33a>
 80147a8:	4642      	mov	r2, r8
 80147aa:	4631      	mov	r1, r6
 80147ac:	4628      	mov	r0, r5
 80147ae:	47b8      	blx	r7
 80147b0:	3001      	adds	r0, #1
 80147b2:	d1c2      	bne.n	801473a <_printf_float+0x2f2>
 80147b4:	e6a3      	b.n	80144fe <_printf_float+0xb6>
 80147b6:	2301      	movs	r3, #1
 80147b8:	4631      	mov	r1, r6
 80147ba:	4628      	mov	r0, r5
 80147bc:	9206      	str	r2, [sp, #24]
 80147be:	47b8      	blx	r7
 80147c0:	3001      	adds	r0, #1
 80147c2:	f43f ae9c 	beq.w	80144fe <_printf_float+0xb6>
 80147c6:	9a06      	ldr	r2, [sp, #24]
 80147c8:	f10b 0b01 	add.w	fp, fp, #1
 80147cc:	e7bb      	b.n	8014746 <_printf_float+0x2fe>
 80147ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147d2:	4631      	mov	r1, r6
 80147d4:	4628      	mov	r0, r5
 80147d6:	47b8      	blx	r7
 80147d8:	3001      	adds	r0, #1
 80147da:	d1c0      	bne.n	801475e <_printf_float+0x316>
 80147dc:	e68f      	b.n	80144fe <_printf_float+0xb6>
 80147de:	9a06      	ldr	r2, [sp, #24]
 80147e0:	464b      	mov	r3, r9
 80147e2:	4442      	add	r2, r8
 80147e4:	4631      	mov	r1, r6
 80147e6:	4628      	mov	r0, r5
 80147e8:	47b8      	blx	r7
 80147ea:	3001      	adds	r0, #1
 80147ec:	d1c3      	bne.n	8014776 <_printf_float+0x32e>
 80147ee:	e686      	b.n	80144fe <_printf_float+0xb6>
 80147f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80147f4:	f1ba 0f01 	cmp.w	sl, #1
 80147f8:	dc01      	bgt.n	80147fe <_printf_float+0x3b6>
 80147fa:	07db      	lsls	r3, r3, #31
 80147fc:	d536      	bpl.n	801486c <_printf_float+0x424>
 80147fe:	2301      	movs	r3, #1
 8014800:	4642      	mov	r2, r8
 8014802:	4631      	mov	r1, r6
 8014804:	4628      	mov	r0, r5
 8014806:	47b8      	blx	r7
 8014808:	3001      	adds	r0, #1
 801480a:	f43f ae78 	beq.w	80144fe <_printf_float+0xb6>
 801480e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014812:	4631      	mov	r1, r6
 8014814:	4628      	mov	r0, r5
 8014816:	47b8      	blx	r7
 8014818:	3001      	adds	r0, #1
 801481a:	f43f ae70 	beq.w	80144fe <_printf_float+0xb6>
 801481e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014822:	2200      	movs	r2, #0
 8014824:	2300      	movs	r3, #0
 8014826:	f10a 3aff 	add.w	sl, sl, #4294967295
 801482a:	f7ec f975 	bl	8000b18 <__aeabi_dcmpeq>
 801482e:	b9c0      	cbnz	r0, 8014862 <_printf_float+0x41a>
 8014830:	4653      	mov	r3, sl
 8014832:	f108 0201 	add.w	r2, r8, #1
 8014836:	4631      	mov	r1, r6
 8014838:	4628      	mov	r0, r5
 801483a:	47b8      	blx	r7
 801483c:	3001      	adds	r0, #1
 801483e:	d10c      	bne.n	801485a <_printf_float+0x412>
 8014840:	e65d      	b.n	80144fe <_printf_float+0xb6>
 8014842:	2301      	movs	r3, #1
 8014844:	465a      	mov	r2, fp
 8014846:	4631      	mov	r1, r6
 8014848:	4628      	mov	r0, r5
 801484a:	47b8      	blx	r7
 801484c:	3001      	adds	r0, #1
 801484e:	f43f ae56 	beq.w	80144fe <_printf_float+0xb6>
 8014852:	f108 0801 	add.w	r8, r8, #1
 8014856:	45d0      	cmp	r8, sl
 8014858:	dbf3      	blt.n	8014842 <_printf_float+0x3fa>
 801485a:	464b      	mov	r3, r9
 801485c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014860:	e6df      	b.n	8014622 <_printf_float+0x1da>
 8014862:	f04f 0800 	mov.w	r8, #0
 8014866:	f104 0b1a 	add.w	fp, r4, #26
 801486a:	e7f4      	b.n	8014856 <_printf_float+0x40e>
 801486c:	2301      	movs	r3, #1
 801486e:	4642      	mov	r2, r8
 8014870:	e7e1      	b.n	8014836 <_printf_float+0x3ee>
 8014872:	2301      	movs	r3, #1
 8014874:	464a      	mov	r2, r9
 8014876:	4631      	mov	r1, r6
 8014878:	4628      	mov	r0, r5
 801487a:	47b8      	blx	r7
 801487c:	3001      	adds	r0, #1
 801487e:	f43f ae3e 	beq.w	80144fe <_printf_float+0xb6>
 8014882:	f108 0801 	add.w	r8, r8, #1
 8014886:	68e3      	ldr	r3, [r4, #12]
 8014888:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801488a:	1a5b      	subs	r3, r3, r1
 801488c:	4543      	cmp	r3, r8
 801488e:	dcf0      	bgt.n	8014872 <_printf_float+0x42a>
 8014890:	e6fc      	b.n	801468c <_printf_float+0x244>
 8014892:	f04f 0800 	mov.w	r8, #0
 8014896:	f104 0919 	add.w	r9, r4, #25
 801489a:	e7f4      	b.n	8014886 <_printf_float+0x43e>

0801489c <_printf_common>:
 801489c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148a0:	4616      	mov	r6, r2
 80148a2:	4698      	mov	r8, r3
 80148a4:	688a      	ldr	r2, [r1, #8]
 80148a6:	690b      	ldr	r3, [r1, #16]
 80148a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80148ac:	4293      	cmp	r3, r2
 80148ae:	bfb8      	it	lt
 80148b0:	4613      	movlt	r3, r2
 80148b2:	6033      	str	r3, [r6, #0]
 80148b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80148b8:	4607      	mov	r7, r0
 80148ba:	460c      	mov	r4, r1
 80148bc:	b10a      	cbz	r2, 80148c2 <_printf_common+0x26>
 80148be:	3301      	adds	r3, #1
 80148c0:	6033      	str	r3, [r6, #0]
 80148c2:	6823      	ldr	r3, [r4, #0]
 80148c4:	0699      	lsls	r1, r3, #26
 80148c6:	bf42      	ittt	mi
 80148c8:	6833      	ldrmi	r3, [r6, #0]
 80148ca:	3302      	addmi	r3, #2
 80148cc:	6033      	strmi	r3, [r6, #0]
 80148ce:	6825      	ldr	r5, [r4, #0]
 80148d0:	f015 0506 	ands.w	r5, r5, #6
 80148d4:	d106      	bne.n	80148e4 <_printf_common+0x48>
 80148d6:	f104 0a19 	add.w	sl, r4, #25
 80148da:	68e3      	ldr	r3, [r4, #12]
 80148dc:	6832      	ldr	r2, [r6, #0]
 80148de:	1a9b      	subs	r3, r3, r2
 80148e0:	42ab      	cmp	r3, r5
 80148e2:	dc26      	bgt.n	8014932 <_printf_common+0x96>
 80148e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80148e8:	6822      	ldr	r2, [r4, #0]
 80148ea:	3b00      	subs	r3, #0
 80148ec:	bf18      	it	ne
 80148ee:	2301      	movne	r3, #1
 80148f0:	0692      	lsls	r2, r2, #26
 80148f2:	d42b      	bmi.n	801494c <_printf_common+0xb0>
 80148f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80148f8:	4641      	mov	r1, r8
 80148fa:	4638      	mov	r0, r7
 80148fc:	47c8      	blx	r9
 80148fe:	3001      	adds	r0, #1
 8014900:	d01e      	beq.n	8014940 <_printf_common+0xa4>
 8014902:	6823      	ldr	r3, [r4, #0]
 8014904:	6922      	ldr	r2, [r4, #16]
 8014906:	f003 0306 	and.w	r3, r3, #6
 801490a:	2b04      	cmp	r3, #4
 801490c:	bf02      	ittt	eq
 801490e:	68e5      	ldreq	r5, [r4, #12]
 8014910:	6833      	ldreq	r3, [r6, #0]
 8014912:	1aed      	subeq	r5, r5, r3
 8014914:	68a3      	ldr	r3, [r4, #8]
 8014916:	bf0c      	ite	eq
 8014918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801491c:	2500      	movne	r5, #0
 801491e:	4293      	cmp	r3, r2
 8014920:	bfc4      	itt	gt
 8014922:	1a9b      	subgt	r3, r3, r2
 8014924:	18ed      	addgt	r5, r5, r3
 8014926:	2600      	movs	r6, #0
 8014928:	341a      	adds	r4, #26
 801492a:	42b5      	cmp	r5, r6
 801492c:	d11a      	bne.n	8014964 <_printf_common+0xc8>
 801492e:	2000      	movs	r0, #0
 8014930:	e008      	b.n	8014944 <_printf_common+0xa8>
 8014932:	2301      	movs	r3, #1
 8014934:	4652      	mov	r2, sl
 8014936:	4641      	mov	r1, r8
 8014938:	4638      	mov	r0, r7
 801493a:	47c8      	blx	r9
 801493c:	3001      	adds	r0, #1
 801493e:	d103      	bne.n	8014948 <_printf_common+0xac>
 8014940:	f04f 30ff 	mov.w	r0, #4294967295
 8014944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014948:	3501      	adds	r5, #1
 801494a:	e7c6      	b.n	80148da <_printf_common+0x3e>
 801494c:	18e1      	adds	r1, r4, r3
 801494e:	1c5a      	adds	r2, r3, #1
 8014950:	2030      	movs	r0, #48	@ 0x30
 8014952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014956:	4422      	add	r2, r4
 8014958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801495c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014960:	3302      	adds	r3, #2
 8014962:	e7c7      	b.n	80148f4 <_printf_common+0x58>
 8014964:	2301      	movs	r3, #1
 8014966:	4622      	mov	r2, r4
 8014968:	4641      	mov	r1, r8
 801496a:	4638      	mov	r0, r7
 801496c:	47c8      	blx	r9
 801496e:	3001      	adds	r0, #1
 8014970:	d0e6      	beq.n	8014940 <_printf_common+0xa4>
 8014972:	3601      	adds	r6, #1
 8014974:	e7d9      	b.n	801492a <_printf_common+0x8e>
	...

08014978 <_printf_i>:
 8014978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801497c:	7e0f      	ldrb	r7, [r1, #24]
 801497e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014980:	2f78      	cmp	r7, #120	@ 0x78
 8014982:	4691      	mov	r9, r2
 8014984:	4680      	mov	r8, r0
 8014986:	460c      	mov	r4, r1
 8014988:	469a      	mov	sl, r3
 801498a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801498e:	d807      	bhi.n	80149a0 <_printf_i+0x28>
 8014990:	2f62      	cmp	r7, #98	@ 0x62
 8014992:	d80a      	bhi.n	80149aa <_printf_i+0x32>
 8014994:	2f00      	cmp	r7, #0
 8014996:	f000 80d2 	beq.w	8014b3e <_printf_i+0x1c6>
 801499a:	2f58      	cmp	r7, #88	@ 0x58
 801499c:	f000 80b9 	beq.w	8014b12 <_printf_i+0x19a>
 80149a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80149a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80149a8:	e03a      	b.n	8014a20 <_printf_i+0xa8>
 80149aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80149ae:	2b15      	cmp	r3, #21
 80149b0:	d8f6      	bhi.n	80149a0 <_printf_i+0x28>
 80149b2:	a101      	add	r1, pc, #4	@ (adr r1, 80149b8 <_printf_i+0x40>)
 80149b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80149b8:	08014a11 	.word	0x08014a11
 80149bc:	08014a25 	.word	0x08014a25
 80149c0:	080149a1 	.word	0x080149a1
 80149c4:	080149a1 	.word	0x080149a1
 80149c8:	080149a1 	.word	0x080149a1
 80149cc:	080149a1 	.word	0x080149a1
 80149d0:	08014a25 	.word	0x08014a25
 80149d4:	080149a1 	.word	0x080149a1
 80149d8:	080149a1 	.word	0x080149a1
 80149dc:	080149a1 	.word	0x080149a1
 80149e0:	080149a1 	.word	0x080149a1
 80149e4:	08014b25 	.word	0x08014b25
 80149e8:	08014a4f 	.word	0x08014a4f
 80149ec:	08014adf 	.word	0x08014adf
 80149f0:	080149a1 	.word	0x080149a1
 80149f4:	080149a1 	.word	0x080149a1
 80149f8:	08014b47 	.word	0x08014b47
 80149fc:	080149a1 	.word	0x080149a1
 8014a00:	08014a4f 	.word	0x08014a4f
 8014a04:	080149a1 	.word	0x080149a1
 8014a08:	080149a1 	.word	0x080149a1
 8014a0c:	08014ae7 	.word	0x08014ae7
 8014a10:	6833      	ldr	r3, [r6, #0]
 8014a12:	1d1a      	adds	r2, r3, #4
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	6032      	str	r2, [r6, #0]
 8014a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014a20:	2301      	movs	r3, #1
 8014a22:	e09d      	b.n	8014b60 <_printf_i+0x1e8>
 8014a24:	6833      	ldr	r3, [r6, #0]
 8014a26:	6820      	ldr	r0, [r4, #0]
 8014a28:	1d19      	adds	r1, r3, #4
 8014a2a:	6031      	str	r1, [r6, #0]
 8014a2c:	0606      	lsls	r6, r0, #24
 8014a2e:	d501      	bpl.n	8014a34 <_printf_i+0xbc>
 8014a30:	681d      	ldr	r5, [r3, #0]
 8014a32:	e003      	b.n	8014a3c <_printf_i+0xc4>
 8014a34:	0645      	lsls	r5, r0, #25
 8014a36:	d5fb      	bpl.n	8014a30 <_printf_i+0xb8>
 8014a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014a3c:	2d00      	cmp	r5, #0
 8014a3e:	da03      	bge.n	8014a48 <_printf_i+0xd0>
 8014a40:	232d      	movs	r3, #45	@ 0x2d
 8014a42:	426d      	negs	r5, r5
 8014a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a48:	4859      	ldr	r0, [pc, #356]	@ (8014bb0 <_printf_i+0x238>)
 8014a4a:	230a      	movs	r3, #10
 8014a4c:	e011      	b.n	8014a72 <_printf_i+0xfa>
 8014a4e:	6821      	ldr	r1, [r4, #0]
 8014a50:	6833      	ldr	r3, [r6, #0]
 8014a52:	0608      	lsls	r0, r1, #24
 8014a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8014a58:	d402      	bmi.n	8014a60 <_printf_i+0xe8>
 8014a5a:	0649      	lsls	r1, r1, #25
 8014a5c:	bf48      	it	mi
 8014a5e:	b2ad      	uxthmi	r5, r5
 8014a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8014a62:	4853      	ldr	r0, [pc, #332]	@ (8014bb0 <_printf_i+0x238>)
 8014a64:	6033      	str	r3, [r6, #0]
 8014a66:	bf14      	ite	ne
 8014a68:	230a      	movne	r3, #10
 8014a6a:	2308      	moveq	r3, #8
 8014a6c:	2100      	movs	r1, #0
 8014a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014a72:	6866      	ldr	r6, [r4, #4]
 8014a74:	60a6      	str	r6, [r4, #8]
 8014a76:	2e00      	cmp	r6, #0
 8014a78:	bfa2      	ittt	ge
 8014a7a:	6821      	ldrge	r1, [r4, #0]
 8014a7c:	f021 0104 	bicge.w	r1, r1, #4
 8014a80:	6021      	strge	r1, [r4, #0]
 8014a82:	b90d      	cbnz	r5, 8014a88 <_printf_i+0x110>
 8014a84:	2e00      	cmp	r6, #0
 8014a86:	d04b      	beq.n	8014b20 <_printf_i+0x1a8>
 8014a88:	4616      	mov	r6, r2
 8014a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8014a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8014a92:	5dc7      	ldrb	r7, [r0, r7]
 8014a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014a98:	462f      	mov	r7, r5
 8014a9a:	42bb      	cmp	r3, r7
 8014a9c:	460d      	mov	r5, r1
 8014a9e:	d9f4      	bls.n	8014a8a <_printf_i+0x112>
 8014aa0:	2b08      	cmp	r3, #8
 8014aa2:	d10b      	bne.n	8014abc <_printf_i+0x144>
 8014aa4:	6823      	ldr	r3, [r4, #0]
 8014aa6:	07df      	lsls	r7, r3, #31
 8014aa8:	d508      	bpl.n	8014abc <_printf_i+0x144>
 8014aaa:	6923      	ldr	r3, [r4, #16]
 8014aac:	6861      	ldr	r1, [r4, #4]
 8014aae:	4299      	cmp	r1, r3
 8014ab0:	bfde      	ittt	le
 8014ab2:	2330      	movle	r3, #48	@ 0x30
 8014ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014abc:	1b92      	subs	r2, r2, r6
 8014abe:	6122      	str	r2, [r4, #16]
 8014ac0:	f8cd a000 	str.w	sl, [sp]
 8014ac4:	464b      	mov	r3, r9
 8014ac6:	aa03      	add	r2, sp, #12
 8014ac8:	4621      	mov	r1, r4
 8014aca:	4640      	mov	r0, r8
 8014acc:	f7ff fee6 	bl	801489c <_printf_common>
 8014ad0:	3001      	adds	r0, #1
 8014ad2:	d14a      	bne.n	8014b6a <_printf_i+0x1f2>
 8014ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ad8:	b004      	add	sp, #16
 8014ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ade:	6823      	ldr	r3, [r4, #0]
 8014ae0:	f043 0320 	orr.w	r3, r3, #32
 8014ae4:	6023      	str	r3, [r4, #0]
 8014ae6:	4833      	ldr	r0, [pc, #204]	@ (8014bb4 <_printf_i+0x23c>)
 8014ae8:	2778      	movs	r7, #120	@ 0x78
 8014aea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014aee:	6823      	ldr	r3, [r4, #0]
 8014af0:	6831      	ldr	r1, [r6, #0]
 8014af2:	061f      	lsls	r7, r3, #24
 8014af4:	f851 5b04 	ldr.w	r5, [r1], #4
 8014af8:	d402      	bmi.n	8014b00 <_printf_i+0x188>
 8014afa:	065f      	lsls	r7, r3, #25
 8014afc:	bf48      	it	mi
 8014afe:	b2ad      	uxthmi	r5, r5
 8014b00:	6031      	str	r1, [r6, #0]
 8014b02:	07d9      	lsls	r1, r3, #31
 8014b04:	bf44      	itt	mi
 8014b06:	f043 0320 	orrmi.w	r3, r3, #32
 8014b0a:	6023      	strmi	r3, [r4, #0]
 8014b0c:	b11d      	cbz	r5, 8014b16 <_printf_i+0x19e>
 8014b0e:	2310      	movs	r3, #16
 8014b10:	e7ac      	b.n	8014a6c <_printf_i+0xf4>
 8014b12:	4827      	ldr	r0, [pc, #156]	@ (8014bb0 <_printf_i+0x238>)
 8014b14:	e7e9      	b.n	8014aea <_printf_i+0x172>
 8014b16:	6823      	ldr	r3, [r4, #0]
 8014b18:	f023 0320 	bic.w	r3, r3, #32
 8014b1c:	6023      	str	r3, [r4, #0]
 8014b1e:	e7f6      	b.n	8014b0e <_printf_i+0x196>
 8014b20:	4616      	mov	r6, r2
 8014b22:	e7bd      	b.n	8014aa0 <_printf_i+0x128>
 8014b24:	6833      	ldr	r3, [r6, #0]
 8014b26:	6825      	ldr	r5, [r4, #0]
 8014b28:	6961      	ldr	r1, [r4, #20]
 8014b2a:	1d18      	adds	r0, r3, #4
 8014b2c:	6030      	str	r0, [r6, #0]
 8014b2e:	062e      	lsls	r6, r5, #24
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	d501      	bpl.n	8014b38 <_printf_i+0x1c0>
 8014b34:	6019      	str	r1, [r3, #0]
 8014b36:	e002      	b.n	8014b3e <_printf_i+0x1c6>
 8014b38:	0668      	lsls	r0, r5, #25
 8014b3a:	d5fb      	bpl.n	8014b34 <_printf_i+0x1bc>
 8014b3c:	8019      	strh	r1, [r3, #0]
 8014b3e:	2300      	movs	r3, #0
 8014b40:	6123      	str	r3, [r4, #16]
 8014b42:	4616      	mov	r6, r2
 8014b44:	e7bc      	b.n	8014ac0 <_printf_i+0x148>
 8014b46:	6833      	ldr	r3, [r6, #0]
 8014b48:	1d1a      	adds	r2, r3, #4
 8014b4a:	6032      	str	r2, [r6, #0]
 8014b4c:	681e      	ldr	r6, [r3, #0]
 8014b4e:	6862      	ldr	r2, [r4, #4]
 8014b50:	2100      	movs	r1, #0
 8014b52:	4630      	mov	r0, r6
 8014b54:	f7eb fb64 	bl	8000220 <memchr>
 8014b58:	b108      	cbz	r0, 8014b5e <_printf_i+0x1e6>
 8014b5a:	1b80      	subs	r0, r0, r6
 8014b5c:	6060      	str	r0, [r4, #4]
 8014b5e:	6863      	ldr	r3, [r4, #4]
 8014b60:	6123      	str	r3, [r4, #16]
 8014b62:	2300      	movs	r3, #0
 8014b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014b68:	e7aa      	b.n	8014ac0 <_printf_i+0x148>
 8014b6a:	6923      	ldr	r3, [r4, #16]
 8014b6c:	4632      	mov	r2, r6
 8014b6e:	4649      	mov	r1, r9
 8014b70:	4640      	mov	r0, r8
 8014b72:	47d0      	blx	sl
 8014b74:	3001      	adds	r0, #1
 8014b76:	d0ad      	beq.n	8014ad4 <_printf_i+0x15c>
 8014b78:	6823      	ldr	r3, [r4, #0]
 8014b7a:	079b      	lsls	r3, r3, #30
 8014b7c:	d413      	bmi.n	8014ba6 <_printf_i+0x22e>
 8014b7e:	68e0      	ldr	r0, [r4, #12]
 8014b80:	9b03      	ldr	r3, [sp, #12]
 8014b82:	4298      	cmp	r0, r3
 8014b84:	bfb8      	it	lt
 8014b86:	4618      	movlt	r0, r3
 8014b88:	e7a6      	b.n	8014ad8 <_printf_i+0x160>
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	4632      	mov	r2, r6
 8014b8e:	4649      	mov	r1, r9
 8014b90:	4640      	mov	r0, r8
 8014b92:	47d0      	blx	sl
 8014b94:	3001      	adds	r0, #1
 8014b96:	d09d      	beq.n	8014ad4 <_printf_i+0x15c>
 8014b98:	3501      	adds	r5, #1
 8014b9a:	68e3      	ldr	r3, [r4, #12]
 8014b9c:	9903      	ldr	r1, [sp, #12]
 8014b9e:	1a5b      	subs	r3, r3, r1
 8014ba0:	42ab      	cmp	r3, r5
 8014ba2:	dcf2      	bgt.n	8014b8a <_printf_i+0x212>
 8014ba4:	e7eb      	b.n	8014b7e <_printf_i+0x206>
 8014ba6:	2500      	movs	r5, #0
 8014ba8:	f104 0619 	add.w	r6, r4, #25
 8014bac:	e7f5      	b.n	8014b9a <_printf_i+0x222>
 8014bae:	bf00      	nop
 8014bb0:	08019a5e 	.word	0x08019a5e
 8014bb4:	08019a6f 	.word	0x08019a6f

08014bb8 <_scanf_float>:
 8014bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bbc:	b087      	sub	sp, #28
 8014bbe:	4617      	mov	r7, r2
 8014bc0:	9303      	str	r3, [sp, #12]
 8014bc2:	688b      	ldr	r3, [r1, #8]
 8014bc4:	1e5a      	subs	r2, r3, #1
 8014bc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014bca:	bf81      	itttt	hi
 8014bcc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014bd0:	eb03 0b05 	addhi.w	fp, r3, r5
 8014bd4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014bd8:	608b      	strhi	r3, [r1, #8]
 8014bda:	680b      	ldr	r3, [r1, #0]
 8014bdc:	460a      	mov	r2, r1
 8014bde:	f04f 0500 	mov.w	r5, #0
 8014be2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014be6:	f842 3b1c 	str.w	r3, [r2], #28
 8014bea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014bee:	4680      	mov	r8, r0
 8014bf0:	460c      	mov	r4, r1
 8014bf2:	bf98      	it	ls
 8014bf4:	f04f 0b00 	movls.w	fp, #0
 8014bf8:	9201      	str	r2, [sp, #4]
 8014bfa:	4616      	mov	r6, r2
 8014bfc:	46aa      	mov	sl, r5
 8014bfe:	46a9      	mov	r9, r5
 8014c00:	9502      	str	r5, [sp, #8]
 8014c02:	68a2      	ldr	r2, [r4, #8]
 8014c04:	b152      	cbz	r2, 8014c1c <_scanf_float+0x64>
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	781b      	ldrb	r3, [r3, #0]
 8014c0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8014c0c:	d864      	bhi.n	8014cd8 <_scanf_float+0x120>
 8014c0e:	2b40      	cmp	r3, #64	@ 0x40
 8014c10:	d83c      	bhi.n	8014c8c <_scanf_float+0xd4>
 8014c12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014c16:	b2c8      	uxtb	r0, r1
 8014c18:	280e      	cmp	r0, #14
 8014c1a:	d93a      	bls.n	8014c92 <_scanf_float+0xda>
 8014c1c:	f1b9 0f00 	cmp.w	r9, #0
 8014c20:	d003      	beq.n	8014c2a <_scanf_float+0x72>
 8014c22:	6823      	ldr	r3, [r4, #0]
 8014c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014c28:	6023      	str	r3, [r4, #0]
 8014c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c2e:	f1ba 0f01 	cmp.w	sl, #1
 8014c32:	f200 8117 	bhi.w	8014e64 <_scanf_float+0x2ac>
 8014c36:	9b01      	ldr	r3, [sp, #4]
 8014c38:	429e      	cmp	r6, r3
 8014c3a:	f200 8108 	bhi.w	8014e4e <_scanf_float+0x296>
 8014c3e:	2001      	movs	r0, #1
 8014c40:	b007      	add	sp, #28
 8014c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c46:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014c4a:	2a0d      	cmp	r2, #13
 8014c4c:	d8e6      	bhi.n	8014c1c <_scanf_float+0x64>
 8014c4e:	a101      	add	r1, pc, #4	@ (adr r1, 8014c54 <_scanf_float+0x9c>)
 8014c50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014c54:	08014d9b 	.word	0x08014d9b
 8014c58:	08014c1d 	.word	0x08014c1d
 8014c5c:	08014c1d 	.word	0x08014c1d
 8014c60:	08014c1d 	.word	0x08014c1d
 8014c64:	08014dfb 	.word	0x08014dfb
 8014c68:	08014dd3 	.word	0x08014dd3
 8014c6c:	08014c1d 	.word	0x08014c1d
 8014c70:	08014c1d 	.word	0x08014c1d
 8014c74:	08014da9 	.word	0x08014da9
 8014c78:	08014c1d 	.word	0x08014c1d
 8014c7c:	08014c1d 	.word	0x08014c1d
 8014c80:	08014c1d 	.word	0x08014c1d
 8014c84:	08014c1d 	.word	0x08014c1d
 8014c88:	08014d61 	.word	0x08014d61
 8014c8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014c90:	e7db      	b.n	8014c4a <_scanf_float+0x92>
 8014c92:	290e      	cmp	r1, #14
 8014c94:	d8c2      	bhi.n	8014c1c <_scanf_float+0x64>
 8014c96:	a001      	add	r0, pc, #4	@ (adr r0, 8014c9c <_scanf_float+0xe4>)
 8014c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014c9c:	08014d51 	.word	0x08014d51
 8014ca0:	08014c1d 	.word	0x08014c1d
 8014ca4:	08014d51 	.word	0x08014d51
 8014ca8:	08014de7 	.word	0x08014de7
 8014cac:	08014c1d 	.word	0x08014c1d
 8014cb0:	08014cf9 	.word	0x08014cf9
 8014cb4:	08014d37 	.word	0x08014d37
 8014cb8:	08014d37 	.word	0x08014d37
 8014cbc:	08014d37 	.word	0x08014d37
 8014cc0:	08014d37 	.word	0x08014d37
 8014cc4:	08014d37 	.word	0x08014d37
 8014cc8:	08014d37 	.word	0x08014d37
 8014ccc:	08014d37 	.word	0x08014d37
 8014cd0:	08014d37 	.word	0x08014d37
 8014cd4:	08014d37 	.word	0x08014d37
 8014cd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8014cda:	d809      	bhi.n	8014cf0 <_scanf_float+0x138>
 8014cdc:	2b60      	cmp	r3, #96	@ 0x60
 8014cde:	d8b2      	bhi.n	8014c46 <_scanf_float+0x8e>
 8014ce0:	2b54      	cmp	r3, #84	@ 0x54
 8014ce2:	d07b      	beq.n	8014ddc <_scanf_float+0x224>
 8014ce4:	2b59      	cmp	r3, #89	@ 0x59
 8014ce6:	d199      	bne.n	8014c1c <_scanf_float+0x64>
 8014ce8:	2d07      	cmp	r5, #7
 8014cea:	d197      	bne.n	8014c1c <_scanf_float+0x64>
 8014cec:	2508      	movs	r5, #8
 8014cee:	e02c      	b.n	8014d4a <_scanf_float+0x192>
 8014cf0:	2b74      	cmp	r3, #116	@ 0x74
 8014cf2:	d073      	beq.n	8014ddc <_scanf_float+0x224>
 8014cf4:	2b79      	cmp	r3, #121	@ 0x79
 8014cf6:	e7f6      	b.n	8014ce6 <_scanf_float+0x12e>
 8014cf8:	6821      	ldr	r1, [r4, #0]
 8014cfa:	05c8      	lsls	r0, r1, #23
 8014cfc:	d51b      	bpl.n	8014d36 <_scanf_float+0x17e>
 8014cfe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014d02:	6021      	str	r1, [r4, #0]
 8014d04:	f109 0901 	add.w	r9, r9, #1
 8014d08:	f1bb 0f00 	cmp.w	fp, #0
 8014d0c:	d003      	beq.n	8014d16 <_scanf_float+0x15e>
 8014d0e:	3201      	adds	r2, #1
 8014d10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014d14:	60a2      	str	r2, [r4, #8]
 8014d16:	68a3      	ldr	r3, [r4, #8]
 8014d18:	3b01      	subs	r3, #1
 8014d1a:	60a3      	str	r3, [r4, #8]
 8014d1c:	6923      	ldr	r3, [r4, #16]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	6123      	str	r3, [r4, #16]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	3b01      	subs	r3, #1
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	607b      	str	r3, [r7, #4]
 8014d2a:	f340 8087 	ble.w	8014e3c <_scanf_float+0x284>
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	3301      	adds	r3, #1
 8014d32:	603b      	str	r3, [r7, #0]
 8014d34:	e765      	b.n	8014c02 <_scanf_float+0x4a>
 8014d36:	eb1a 0105 	adds.w	r1, sl, r5
 8014d3a:	f47f af6f 	bne.w	8014c1c <_scanf_float+0x64>
 8014d3e:	6822      	ldr	r2, [r4, #0]
 8014d40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014d44:	6022      	str	r2, [r4, #0]
 8014d46:	460d      	mov	r5, r1
 8014d48:	468a      	mov	sl, r1
 8014d4a:	f806 3b01 	strb.w	r3, [r6], #1
 8014d4e:	e7e2      	b.n	8014d16 <_scanf_float+0x15e>
 8014d50:	6822      	ldr	r2, [r4, #0]
 8014d52:	0610      	lsls	r0, r2, #24
 8014d54:	f57f af62 	bpl.w	8014c1c <_scanf_float+0x64>
 8014d58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014d5c:	6022      	str	r2, [r4, #0]
 8014d5e:	e7f4      	b.n	8014d4a <_scanf_float+0x192>
 8014d60:	f1ba 0f00 	cmp.w	sl, #0
 8014d64:	d10e      	bne.n	8014d84 <_scanf_float+0x1cc>
 8014d66:	f1b9 0f00 	cmp.w	r9, #0
 8014d6a:	d10e      	bne.n	8014d8a <_scanf_float+0x1d2>
 8014d6c:	6822      	ldr	r2, [r4, #0]
 8014d6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014d72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014d76:	d108      	bne.n	8014d8a <_scanf_float+0x1d2>
 8014d78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014d7c:	6022      	str	r2, [r4, #0]
 8014d7e:	f04f 0a01 	mov.w	sl, #1
 8014d82:	e7e2      	b.n	8014d4a <_scanf_float+0x192>
 8014d84:	f1ba 0f02 	cmp.w	sl, #2
 8014d88:	d055      	beq.n	8014e36 <_scanf_float+0x27e>
 8014d8a:	2d01      	cmp	r5, #1
 8014d8c:	d002      	beq.n	8014d94 <_scanf_float+0x1dc>
 8014d8e:	2d04      	cmp	r5, #4
 8014d90:	f47f af44 	bne.w	8014c1c <_scanf_float+0x64>
 8014d94:	3501      	adds	r5, #1
 8014d96:	b2ed      	uxtb	r5, r5
 8014d98:	e7d7      	b.n	8014d4a <_scanf_float+0x192>
 8014d9a:	f1ba 0f01 	cmp.w	sl, #1
 8014d9e:	f47f af3d 	bne.w	8014c1c <_scanf_float+0x64>
 8014da2:	f04f 0a02 	mov.w	sl, #2
 8014da6:	e7d0      	b.n	8014d4a <_scanf_float+0x192>
 8014da8:	b97d      	cbnz	r5, 8014dca <_scanf_float+0x212>
 8014daa:	f1b9 0f00 	cmp.w	r9, #0
 8014dae:	f47f af38 	bne.w	8014c22 <_scanf_float+0x6a>
 8014db2:	6822      	ldr	r2, [r4, #0]
 8014db4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014db8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014dbc:	f040 8108 	bne.w	8014fd0 <_scanf_float+0x418>
 8014dc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014dc4:	6022      	str	r2, [r4, #0]
 8014dc6:	2501      	movs	r5, #1
 8014dc8:	e7bf      	b.n	8014d4a <_scanf_float+0x192>
 8014dca:	2d03      	cmp	r5, #3
 8014dcc:	d0e2      	beq.n	8014d94 <_scanf_float+0x1dc>
 8014dce:	2d05      	cmp	r5, #5
 8014dd0:	e7de      	b.n	8014d90 <_scanf_float+0x1d8>
 8014dd2:	2d02      	cmp	r5, #2
 8014dd4:	f47f af22 	bne.w	8014c1c <_scanf_float+0x64>
 8014dd8:	2503      	movs	r5, #3
 8014dda:	e7b6      	b.n	8014d4a <_scanf_float+0x192>
 8014ddc:	2d06      	cmp	r5, #6
 8014dde:	f47f af1d 	bne.w	8014c1c <_scanf_float+0x64>
 8014de2:	2507      	movs	r5, #7
 8014de4:	e7b1      	b.n	8014d4a <_scanf_float+0x192>
 8014de6:	6822      	ldr	r2, [r4, #0]
 8014de8:	0591      	lsls	r1, r2, #22
 8014dea:	f57f af17 	bpl.w	8014c1c <_scanf_float+0x64>
 8014dee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014df2:	6022      	str	r2, [r4, #0]
 8014df4:	f8cd 9008 	str.w	r9, [sp, #8]
 8014df8:	e7a7      	b.n	8014d4a <_scanf_float+0x192>
 8014dfa:	6822      	ldr	r2, [r4, #0]
 8014dfc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014e00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014e04:	d006      	beq.n	8014e14 <_scanf_float+0x25c>
 8014e06:	0550      	lsls	r0, r2, #21
 8014e08:	f57f af08 	bpl.w	8014c1c <_scanf_float+0x64>
 8014e0c:	f1b9 0f00 	cmp.w	r9, #0
 8014e10:	f000 80de 	beq.w	8014fd0 <_scanf_float+0x418>
 8014e14:	0591      	lsls	r1, r2, #22
 8014e16:	bf58      	it	pl
 8014e18:	9902      	ldrpl	r1, [sp, #8]
 8014e1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014e1e:	bf58      	it	pl
 8014e20:	eba9 0101 	subpl.w	r1, r9, r1
 8014e24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014e28:	bf58      	it	pl
 8014e2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014e2e:	6022      	str	r2, [r4, #0]
 8014e30:	f04f 0900 	mov.w	r9, #0
 8014e34:	e789      	b.n	8014d4a <_scanf_float+0x192>
 8014e36:	f04f 0a03 	mov.w	sl, #3
 8014e3a:	e786      	b.n	8014d4a <_scanf_float+0x192>
 8014e3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014e40:	4639      	mov	r1, r7
 8014e42:	4640      	mov	r0, r8
 8014e44:	4798      	blx	r3
 8014e46:	2800      	cmp	r0, #0
 8014e48:	f43f aedb 	beq.w	8014c02 <_scanf_float+0x4a>
 8014e4c:	e6e6      	b.n	8014c1c <_scanf_float+0x64>
 8014e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014e56:	463a      	mov	r2, r7
 8014e58:	4640      	mov	r0, r8
 8014e5a:	4798      	blx	r3
 8014e5c:	6923      	ldr	r3, [r4, #16]
 8014e5e:	3b01      	subs	r3, #1
 8014e60:	6123      	str	r3, [r4, #16]
 8014e62:	e6e8      	b.n	8014c36 <_scanf_float+0x7e>
 8014e64:	1e6b      	subs	r3, r5, #1
 8014e66:	2b06      	cmp	r3, #6
 8014e68:	d824      	bhi.n	8014eb4 <_scanf_float+0x2fc>
 8014e6a:	2d02      	cmp	r5, #2
 8014e6c:	d836      	bhi.n	8014edc <_scanf_float+0x324>
 8014e6e:	9b01      	ldr	r3, [sp, #4]
 8014e70:	429e      	cmp	r6, r3
 8014e72:	f67f aee4 	bls.w	8014c3e <_scanf_float+0x86>
 8014e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014e7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014e7e:	463a      	mov	r2, r7
 8014e80:	4640      	mov	r0, r8
 8014e82:	4798      	blx	r3
 8014e84:	6923      	ldr	r3, [r4, #16]
 8014e86:	3b01      	subs	r3, #1
 8014e88:	6123      	str	r3, [r4, #16]
 8014e8a:	e7f0      	b.n	8014e6e <_scanf_float+0x2b6>
 8014e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014e90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014e94:	463a      	mov	r2, r7
 8014e96:	4640      	mov	r0, r8
 8014e98:	4798      	blx	r3
 8014e9a:	6923      	ldr	r3, [r4, #16]
 8014e9c:	3b01      	subs	r3, #1
 8014e9e:	6123      	str	r3, [r4, #16]
 8014ea0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ea4:	fa5f fa8a 	uxtb.w	sl, sl
 8014ea8:	f1ba 0f02 	cmp.w	sl, #2
 8014eac:	d1ee      	bne.n	8014e8c <_scanf_float+0x2d4>
 8014eae:	3d03      	subs	r5, #3
 8014eb0:	b2ed      	uxtb	r5, r5
 8014eb2:	1b76      	subs	r6, r6, r5
 8014eb4:	6823      	ldr	r3, [r4, #0]
 8014eb6:	05da      	lsls	r2, r3, #23
 8014eb8:	d530      	bpl.n	8014f1c <_scanf_float+0x364>
 8014eba:	055b      	lsls	r3, r3, #21
 8014ebc:	d511      	bpl.n	8014ee2 <_scanf_float+0x32a>
 8014ebe:	9b01      	ldr	r3, [sp, #4]
 8014ec0:	429e      	cmp	r6, r3
 8014ec2:	f67f aebc 	bls.w	8014c3e <_scanf_float+0x86>
 8014ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014eca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014ece:	463a      	mov	r2, r7
 8014ed0:	4640      	mov	r0, r8
 8014ed2:	4798      	blx	r3
 8014ed4:	6923      	ldr	r3, [r4, #16]
 8014ed6:	3b01      	subs	r3, #1
 8014ed8:	6123      	str	r3, [r4, #16]
 8014eda:	e7f0      	b.n	8014ebe <_scanf_float+0x306>
 8014edc:	46aa      	mov	sl, r5
 8014ede:	46b3      	mov	fp, r6
 8014ee0:	e7de      	b.n	8014ea0 <_scanf_float+0x2e8>
 8014ee2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014ee6:	6923      	ldr	r3, [r4, #16]
 8014ee8:	2965      	cmp	r1, #101	@ 0x65
 8014eea:	f103 33ff 	add.w	r3, r3, #4294967295
 8014eee:	f106 35ff 	add.w	r5, r6, #4294967295
 8014ef2:	6123      	str	r3, [r4, #16]
 8014ef4:	d00c      	beq.n	8014f10 <_scanf_float+0x358>
 8014ef6:	2945      	cmp	r1, #69	@ 0x45
 8014ef8:	d00a      	beq.n	8014f10 <_scanf_float+0x358>
 8014efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014efe:	463a      	mov	r2, r7
 8014f00:	4640      	mov	r0, r8
 8014f02:	4798      	blx	r3
 8014f04:	6923      	ldr	r3, [r4, #16]
 8014f06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	1eb5      	subs	r5, r6, #2
 8014f0e:	6123      	str	r3, [r4, #16]
 8014f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014f14:	463a      	mov	r2, r7
 8014f16:	4640      	mov	r0, r8
 8014f18:	4798      	blx	r3
 8014f1a:	462e      	mov	r6, r5
 8014f1c:	6822      	ldr	r2, [r4, #0]
 8014f1e:	f012 0210 	ands.w	r2, r2, #16
 8014f22:	d001      	beq.n	8014f28 <_scanf_float+0x370>
 8014f24:	2000      	movs	r0, #0
 8014f26:	e68b      	b.n	8014c40 <_scanf_float+0x88>
 8014f28:	7032      	strb	r2, [r6, #0]
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014f34:	d11c      	bne.n	8014f70 <_scanf_float+0x3b8>
 8014f36:	9b02      	ldr	r3, [sp, #8]
 8014f38:	454b      	cmp	r3, r9
 8014f3a:	eba3 0209 	sub.w	r2, r3, r9
 8014f3e:	d123      	bne.n	8014f88 <_scanf_float+0x3d0>
 8014f40:	9901      	ldr	r1, [sp, #4]
 8014f42:	2200      	movs	r2, #0
 8014f44:	4640      	mov	r0, r8
 8014f46:	f002 fbf3 	bl	8017730 <_strtod_r>
 8014f4a:	9b03      	ldr	r3, [sp, #12]
 8014f4c:	6821      	ldr	r1, [r4, #0]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f011 0f02 	tst.w	r1, #2
 8014f54:	ec57 6b10 	vmov	r6, r7, d0
 8014f58:	f103 0204 	add.w	r2, r3, #4
 8014f5c:	d01f      	beq.n	8014f9e <_scanf_float+0x3e6>
 8014f5e:	9903      	ldr	r1, [sp, #12]
 8014f60:	600a      	str	r2, [r1, #0]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	e9c3 6700 	strd	r6, r7, [r3]
 8014f68:	68e3      	ldr	r3, [r4, #12]
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	60e3      	str	r3, [r4, #12]
 8014f6e:	e7d9      	b.n	8014f24 <_scanf_float+0x36c>
 8014f70:	9b04      	ldr	r3, [sp, #16]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d0e4      	beq.n	8014f40 <_scanf_float+0x388>
 8014f76:	9905      	ldr	r1, [sp, #20]
 8014f78:	230a      	movs	r3, #10
 8014f7a:	3101      	adds	r1, #1
 8014f7c:	4640      	mov	r0, r8
 8014f7e:	f002 fc57 	bl	8017830 <_strtol_r>
 8014f82:	9b04      	ldr	r3, [sp, #16]
 8014f84:	9e05      	ldr	r6, [sp, #20]
 8014f86:	1ac2      	subs	r2, r0, r3
 8014f88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014f8c:	429e      	cmp	r6, r3
 8014f8e:	bf28      	it	cs
 8014f90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014f94:	4910      	ldr	r1, [pc, #64]	@ (8014fd8 <_scanf_float+0x420>)
 8014f96:	4630      	mov	r0, r6
 8014f98:	f000 f8f6 	bl	8015188 <siprintf>
 8014f9c:	e7d0      	b.n	8014f40 <_scanf_float+0x388>
 8014f9e:	f011 0f04 	tst.w	r1, #4
 8014fa2:	9903      	ldr	r1, [sp, #12]
 8014fa4:	600a      	str	r2, [r1, #0]
 8014fa6:	d1dc      	bne.n	8014f62 <_scanf_float+0x3aa>
 8014fa8:	681d      	ldr	r5, [r3, #0]
 8014faa:	4632      	mov	r2, r6
 8014fac:	463b      	mov	r3, r7
 8014fae:	4630      	mov	r0, r6
 8014fb0:	4639      	mov	r1, r7
 8014fb2:	f7eb fde3 	bl	8000b7c <__aeabi_dcmpun>
 8014fb6:	b128      	cbz	r0, 8014fc4 <_scanf_float+0x40c>
 8014fb8:	4808      	ldr	r0, [pc, #32]	@ (8014fdc <_scanf_float+0x424>)
 8014fba:	f000 fa67 	bl	801548c <nanf>
 8014fbe:	ed85 0a00 	vstr	s0, [r5]
 8014fc2:	e7d1      	b.n	8014f68 <_scanf_float+0x3b0>
 8014fc4:	4630      	mov	r0, r6
 8014fc6:	4639      	mov	r1, r7
 8014fc8:	f7eb fe36 	bl	8000c38 <__aeabi_d2f>
 8014fcc:	6028      	str	r0, [r5, #0]
 8014fce:	e7cb      	b.n	8014f68 <_scanf_float+0x3b0>
 8014fd0:	f04f 0900 	mov.w	r9, #0
 8014fd4:	e629      	b.n	8014c2a <_scanf_float+0x72>
 8014fd6:	bf00      	nop
 8014fd8:	08019a80 	.word	0x08019a80
 8014fdc:	08019a4b 	.word	0x08019a4b

08014fe0 <std>:
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	b510      	push	{r4, lr}
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8014fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fee:	6083      	str	r3, [r0, #8]
 8014ff0:	8181      	strh	r1, [r0, #12]
 8014ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8014ff4:	81c2      	strh	r2, [r0, #14]
 8014ff6:	6183      	str	r3, [r0, #24]
 8014ff8:	4619      	mov	r1, r3
 8014ffa:	2208      	movs	r2, #8
 8014ffc:	305c      	adds	r0, #92	@ 0x5c
 8014ffe:	f000 f950 	bl	80152a2 <memset>
 8015002:	4b0d      	ldr	r3, [pc, #52]	@ (8015038 <std+0x58>)
 8015004:	6263      	str	r3, [r4, #36]	@ 0x24
 8015006:	4b0d      	ldr	r3, [pc, #52]	@ (801503c <std+0x5c>)
 8015008:	62a3      	str	r3, [r4, #40]	@ 0x28
 801500a:	4b0d      	ldr	r3, [pc, #52]	@ (8015040 <std+0x60>)
 801500c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801500e:	4b0d      	ldr	r3, [pc, #52]	@ (8015044 <std+0x64>)
 8015010:	6323      	str	r3, [r4, #48]	@ 0x30
 8015012:	4b0d      	ldr	r3, [pc, #52]	@ (8015048 <std+0x68>)
 8015014:	6224      	str	r4, [r4, #32]
 8015016:	429c      	cmp	r4, r3
 8015018:	d006      	beq.n	8015028 <std+0x48>
 801501a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801501e:	4294      	cmp	r4, r2
 8015020:	d002      	beq.n	8015028 <std+0x48>
 8015022:	33d0      	adds	r3, #208	@ 0xd0
 8015024:	429c      	cmp	r4, r3
 8015026:	d105      	bne.n	8015034 <std+0x54>
 8015028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015030:	f000 ba1a 	b.w	8015468 <__retarget_lock_init_recursive>
 8015034:	bd10      	pop	{r4, pc}
 8015036:	bf00      	nop
 8015038:	080151c9 	.word	0x080151c9
 801503c:	080151eb 	.word	0x080151eb
 8015040:	08015223 	.word	0x08015223
 8015044:	08015247 	.word	0x08015247
 8015048:	20000a70 	.word	0x20000a70

0801504c <stdio_exit_handler>:
 801504c:	4a02      	ldr	r2, [pc, #8]	@ (8015058 <stdio_exit_handler+0xc>)
 801504e:	4903      	ldr	r1, [pc, #12]	@ (801505c <stdio_exit_handler+0x10>)
 8015050:	4803      	ldr	r0, [pc, #12]	@ (8015060 <stdio_exit_handler+0x14>)
 8015052:	f000 b87b 	b.w	801514c <_fwalk_sglue>
 8015056:	bf00      	nop
 8015058:	20000084 	.word	0x20000084
 801505c:	08017e71 	.word	0x08017e71
 8015060:	20000094 	.word	0x20000094

08015064 <cleanup_stdio>:
 8015064:	6841      	ldr	r1, [r0, #4]
 8015066:	4b0c      	ldr	r3, [pc, #48]	@ (8015098 <cleanup_stdio+0x34>)
 8015068:	4299      	cmp	r1, r3
 801506a:	b510      	push	{r4, lr}
 801506c:	4604      	mov	r4, r0
 801506e:	d001      	beq.n	8015074 <cleanup_stdio+0x10>
 8015070:	f002 fefe 	bl	8017e70 <_fflush_r>
 8015074:	68a1      	ldr	r1, [r4, #8]
 8015076:	4b09      	ldr	r3, [pc, #36]	@ (801509c <cleanup_stdio+0x38>)
 8015078:	4299      	cmp	r1, r3
 801507a:	d002      	beq.n	8015082 <cleanup_stdio+0x1e>
 801507c:	4620      	mov	r0, r4
 801507e:	f002 fef7 	bl	8017e70 <_fflush_r>
 8015082:	68e1      	ldr	r1, [r4, #12]
 8015084:	4b06      	ldr	r3, [pc, #24]	@ (80150a0 <cleanup_stdio+0x3c>)
 8015086:	4299      	cmp	r1, r3
 8015088:	d004      	beq.n	8015094 <cleanup_stdio+0x30>
 801508a:	4620      	mov	r0, r4
 801508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015090:	f002 beee 	b.w	8017e70 <_fflush_r>
 8015094:	bd10      	pop	{r4, pc}
 8015096:	bf00      	nop
 8015098:	20000a70 	.word	0x20000a70
 801509c:	20000ad8 	.word	0x20000ad8
 80150a0:	20000b40 	.word	0x20000b40

080150a4 <global_stdio_init.part.0>:
 80150a4:	b510      	push	{r4, lr}
 80150a6:	4b0b      	ldr	r3, [pc, #44]	@ (80150d4 <global_stdio_init.part.0+0x30>)
 80150a8:	4c0b      	ldr	r4, [pc, #44]	@ (80150d8 <global_stdio_init.part.0+0x34>)
 80150aa:	4a0c      	ldr	r2, [pc, #48]	@ (80150dc <global_stdio_init.part.0+0x38>)
 80150ac:	601a      	str	r2, [r3, #0]
 80150ae:	4620      	mov	r0, r4
 80150b0:	2200      	movs	r2, #0
 80150b2:	2104      	movs	r1, #4
 80150b4:	f7ff ff94 	bl	8014fe0 <std>
 80150b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80150bc:	2201      	movs	r2, #1
 80150be:	2109      	movs	r1, #9
 80150c0:	f7ff ff8e 	bl	8014fe0 <std>
 80150c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80150c8:	2202      	movs	r2, #2
 80150ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150ce:	2112      	movs	r1, #18
 80150d0:	f7ff bf86 	b.w	8014fe0 <std>
 80150d4:	20000ba8 	.word	0x20000ba8
 80150d8:	20000a70 	.word	0x20000a70
 80150dc:	0801504d 	.word	0x0801504d

080150e0 <__sfp_lock_acquire>:
 80150e0:	4801      	ldr	r0, [pc, #4]	@ (80150e8 <__sfp_lock_acquire+0x8>)
 80150e2:	f000 b9c2 	b.w	801546a <__retarget_lock_acquire_recursive>
 80150e6:	bf00      	nop
 80150e8:	20000bb1 	.word	0x20000bb1

080150ec <__sfp_lock_release>:
 80150ec:	4801      	ldr	r0, [pc, #4]	@ (80150f4 <__sfp_lock_release+0x8>)
 80150ee:	f000 b9bd 	b.w	801546c <__retarget_lock_release_recursive>
 80150f2:	bf00      	nop
 80150f4:	20000bb1 	.word	0x20000bb1

080150f8 <__sinit>:
 80150f8:	b510      	push	{r4, lr}
 80150fa:	4604      	mov	r4, r0
 80150fc:	f7ff fff0 	bl	80150e0 <__sfp_lock_acquire>
 8015100:	6a23      	ldr	r3, [r4, #32]
 8015102:	b11b      	cbz	r3, 801510c <__sinit+0x14>
 8015104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015108:	f7ff bff0 	b.w	80150ec <__sfp_lock_release>
 801510c:	4b04      	ldr	r3, [pc, #16]	@ (8015120 <__sinit+0x28>)
 801510e:	6223      	str	r3, [r4, #32]
 8015110:	4b04      	ldr	r3, [pc, #16]	@ (8015124 <__sinit+0x2c>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d1f5      	bne.n	8015104 <__sinit+0xc>
 8015118:	f7ff ffc4 	bl	80150a4 <global_stdio_init.part.0>
 801511c:	e7f2      	b.n	8015104 <__sinit+0xc>
 801511e:	bf00      	nop
 8015120:	08015065 	.word	0x08015065
 8015124:	20000ba8 	.word	0x20000ba8

08015128 <fiprintf>:
 8015128:	b40e      	push	{r1, r2, r3}
 801512a:	b503      	push	{r0, r1, lr}
 801512c:	4601      	mov	r1, r0
 801512e:	ab03      	add	r3, sp, #12
 8015130:	4805      	ldr	r0, [pc, #20]	@ (8015148 <fiprintf+0x20>)
 8015132:	f853 2b04 	ldr.w	r2, [r3], #4
 8015136:	6800      	ldr	r0, [r0, #0]
 8015138:	9301      	str	r3, [sp, #4]
 801513a:	f002 fcfd 	bl	8017b38 <_vfiprintf_r>
 801513e:	b002      	add	sp, #8
 8015140:	f85d eb04 	ldr.w	lr, [sp], #4
 8015144:	b003      	add	sp, #12
 8015146:	4770      	bx	lr
 8015148:	20000090 	.word	0x20000090

0801514c <_fwalk_sglue>:
 801514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015150:	4607      	mov	r7, r0
 8015152:	4688      	mov	r8, r1
 8015154:	4614      	mov	r4, r2
 8015156:	2600      	movs	r6, #0
 8015158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801515c:	f1b9 0901 	subs.w	r9, r9, #1
 8015160:	d505      	bpl.n	801516e <_fwalk_sglue+0x22>
 8015162:	6824      	ldr	r4, [r4, #0]
 8015164:	2c00      	cmp	r4, #0
 8015166:	d1f7      	bne.n	8015158 <_fwalk_sglue+0xc>
 8015168:	4630      	mov	r0, r6
 801516a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801516e:	89ab      	ldrh	r3, [r5, #12]
 8015170:	2b01      	cmp	r3, #1
 8015172:	d907      	bls.n	8015184 <_fwalk_sglue+0x38>
 8015174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015178:	3301      	adds	r3, #1
 801517a:	d003      	beq.n	8015184 <_fwalk_sglue+0x38>
 801517c:	4629      	mov	r1, r5
 801517e:	4638      	mov	r0, r7
 8015180:	47c0      	blx	r8
 8015182:	4306      	orrs	r6, r0
 8015184:	3568      	adds	r5, #104	@ 0x68
 8015186:	e7e9      	b.n	801515c <_fwalk_sglue+0x10>

08015188 <siprintf>:
 8015188:	b40e      	push	{r1, r2, r3}
 801518a:	b500      	push	{lr}
 801518c:	b09c      	sub	sp, #112	@ 0x70
 801518e:	ab1d      	add	r3, sp, #116	@ 0x74
 8015190:	9002      	str	r0, [sp, #8]
 8015192:	9006      	str	r0, [sp, #24]
 8015194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015198:	4809      	ldr	r0, [pc, #36]	@ (80151c0 <siprintf+0x38>)
 801519a:	9107      	str	r1, [sp, #28]
 801519c:	9104      	str	r1, [sp, #16]
 801519e:	4909      	ldr	r1, [pc, #36]	@ (80151c4 <siprintf+0x3c>)
 80151a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80151a4:	9105      	str	r1, [sp, #20]
 80151a6:	6800      	ldr	r0, [r0, #0]
 80151a8:	9301      	str	r3, [sp, #4]
 80151aa:	a902      	add	r1, sp, #8
 80151ac:	f002 fb9e 	bl	80178ec <_svfiprintf_r>
 80151b0:	9b02      	ldr	r3, [sp, #8]
 80151b2:	2200      	movs	r2, #0
 80151b4:	701a      	strb	r2, [r3, #0]
 80151b6:	b01c      	add	sp, #112	@ 0x70
 80151b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80151bc:	b003      	add	sp, #12
 80151be:	4770      	bx	lr
 80151c0:	20000090 	.word	0x20000090
 80151c4:	ffff0208 	.word	0xffff0208

080151c8 <__sread>:
 80151c8:	b510      	push	{r4, lr}
 80151ca:	460c      	mov	r4, r1
 80151cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151d0:	f000 f8d8 	bl	8015384 <_read_r>
 80151d4:	2800      	cmp	r0, #0
 80151d6:	bfab      	itete	ge
 80151d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80151da:	89a3      	ldrhlt	r3, [r4, #12]
 80151dc:	181b      	addge	r3, r3, r0
 80151de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80151e2:	bfac      	ite	ge
 80151e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80151e6:	81a3      	strhlt	r3, [r4, #12]
 80151e8:	bd10      	pop	{r4, pc}

080151ea <__swrite>:
 80151ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151ee:	461f      	mov	r7, r3
 80151f0:	898b      	ldrh	r3, [r1, #12]
 80151f2:	05db      	lsls	r3, r3, #23
 80151f4:	4605      	mov	r5, r0
 80151f6:	460c      	mov	r4, r1
 80151f8:	4616      	mov	r6, r2
 80151fa:	d505      	bpl.n	8015208 <__swrite+0x1e>
 80151fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015200:	2302      	movs	r3, #2
 8015202:	2200      	movs	r2, #0
 8015204:	f000 f8ac 	bl	8015360 <_lseek_r>
 8015208:	89a3      	ldrh	r3, [r4, #12]
 801520a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801520e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015212:	81a3      	strh	r3, [r4, #12]
 8015214:	4632      	mov	r2, r6
 8015216:	463b      	mov	r3, r7
 8015218:	4628      	mov	r0, r5
 801521a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801521e:	f000 b8e7 	b.w	80153f0 <_write_r>

08015222 <__sseek>:
 8015222:	b510      	push	{r4, lr}
 8015224:	460c      	mov	r4, r1
 8015226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801522a:	f000 f899 	bl	8015360 <_lseek_r>
 801522e:	1c43      	adds	r3, r0, #1
 8015230:	89a3      	ldrh	r3, [r4, #12]
 8015232:	bf15      	itete	ne
 8015234:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801523a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801523e:	81a3      	strheq	r3, [r4, #12]
 8015240:	bf18      	it	ne
 8015242:	81a3      	strhne	r3, [r4, #12]
 8015244:	bd10      	pop	{r4, pc}

08015246 <__sclose>:
 8015246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801524a:	f000 b879 	b.w	8015340 <_close_r>

0801524e <memcmp>:
 801524e:	b510      	push	{r4, lr}
 8015250:	3901      	subs	r1, #1
 8015252:	4402      	add	r2, r0
 8015254:	4290      	cmp	r0, r2
 8015256:	d101      	bne.n	801525c <memcmp+0xe>
 8015258:	2000      	movs	r0, #0
 801525a:	e005      	b.n	8015268 <memcmp+0x1a>
 801525c:	7803      	ldrb	r3, [r0, #0]
 801525e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015262:	42a3      	cmp	r3, r4
 8015264:	d001      	beq.n	801526a <memcmp+0x1c>
 8015266:	1b18      	subs	r0, r3, r4
 8015268:	bd10      	pop	{r4, pc}
 801526a:	3001      	adds	r0, #1
 801526c:	e7f2      	b.n	8015254 <memcmp+0x6>

0801526e <memmove>:
 801526e:	4288      	cmp	r0, r1
 8015270:	b510      	push	{r4, lr}
 8015272:	eb01 0402 	add.w	r4, r1, r2
 8015276:	d902      	bls.n	801527e <memmove+0x10>
 8015278:	4284      	cmp	r4, r0
 801527a:	4623      	mov	r3, r4
 801527c:	d807      	bhi.n	801528e <memmove+0x20>
 801527e:	1e43      	subs	r3, r0, #1
 8015280:	42a1      	cmp	r1, r4
 8015282:	d008      	beq.n	8015296 <memmove+0x28>
 8015284:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015288:	f803 2f01 	strb.w	r2, [r3, #1]!
 801528c:	e7f8      	b.n	8015280 <memmove+0x12>
 801528e:	4402      	add	r2, r0
 8015290:	4601      	mov	r1, r0
 8015292:	428a      	cmp	r2, r1
 8015294:	d100      	bne.n	8015298 <memmove+0x2a>
 8015296:	bd10      	pop	{r4, pc}
 8015298:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801529c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80152a0:	e7f7      	b.n	8015292 <memmove+0x24>

080152a2 <memset>:
 80152a2:	4402      	add	r2, r0
 80152a4:	4603      	mov	r3, r0
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d100      	bne.n	80152ac <memset+0xa>
 80152aa:	4770      	bx	lr
 80152ac:	f803 1b01 	strb.w	r1, [r3], #1
 80152b0:	e7f9      	b.n	80152a6 <memset+0x4>

080152b2 <strncpy>:
 80152b2:	b510      	push	{r4, lr}
 80152b4:	3901      	subs	r1, #1
 80152b6:	4603      	mov	r3, r0
 80152b8:	b132      	cbz	r2, 80152c8 <strncpy+0x16>
 80152ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80152be:	f803 4b01 	strb.w	r4, [r3], #1
 80152c2:	3a01      	subs	r2, #1
 80152c4:	2c00      	cmp	r4, #0
 80152c6:	d1f7      	bne.n	80152b8 <strncpy+0x6>
 80152c8:	441a      	add	r2, r3
 80152ca:	2100      	movs	r1, #0
 80152cc:	4293      	cmp	r3, r2
 80152ce:	d100      	bne.n	80152d2 <strncpy+0x20>
 80152d0:	bd10      	pop	{r4, pc}
 80152d2:	f803 1b01 	strb.w	r1, [r3], #1
 80152d6:	e7f9      	b.n	80152cc <strncpy+0x1a>

080152d8 <_raise_r>:
 80152d8:	291f      	cmp	r1, #31
 80152da:	b538      	push	{r3, r4, r5, lr}
 80152dc:	4605      	mov	r5, r0
 80152de:	460c      	mov	r4, r1
 80152e0:	d904      	bls.n	80152ec <_raise_r+0x14>
 80152e2:	2316      	movs	r3, #22
 80152e4:	6003      	str	r3, [r0, #0]
 80152e6:	f04f 30ff 	mov.w	r0, #4294967295
 80152ea:	bd38      	pop	{r3, r4, r5, pc}
 80152ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80152ee:	b112      	cbz	r2, 80152f6 <_raise_r+0x1e>
 80152f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80152f4:	b94b      	cbnz	r3, 801530a <_raise_r+0x32>
 80152f6:	4628      	mov	r0, r5
 80152f8:	f000 f868 	bl	80153cc <_getpid_r>
 80152fc:	4622      	mov	r2, r4
 80152fe:	4601      	mov	r1, r0
 8015300:	4628      	mov	r0, r5
 8015302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015306:	f000 b84f 	b.w	80153a8 <_kill_r>
 801530a:	2b01      	cmp	r3, #1
 801530c:	d00a      	beq.n	8015324 <_raise_r+0x4c>
 801530e:	1c59      	adds	r1, r3, #1
 8015310:	d103      	bne.n	801531a <_raise_r+0x42>
 8015312:	2316      	movs	r3, #22
 8015314:	6003      	str	r3, [r0, #0]
 8015316:	2001      	movs	r0, #1
 8015318:	e7e7      	b.n	80152ea <_raise_r+0x12>
 801531a:	2100      	movs	r1, #0
 801531c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015320:	4620      	mov	r0, r4
 8015322:	4798      	blx	r3
 8015324:	2000      	movs	r0, #0
 8015326:	e7e0      	b.n	80152ea <_raise_r+0x12>

08015328 <raise>:
 8015328:	4b02      	ldr	r3, [pc, #8]	@ (8015334 <raise+0xc>)
 801532a:	4601      	mov	r1, r0
 801532c:	6818      	ldr	r0, [r3, #0]
 801532e:	f7ff bfd3 	b.w	80152d8 <_raise_r>
 8015332:	bf00      	nop
 8015334:	20000090 	.word	0x20000090

08015338 <_localeconv_r>:
 8015338:	4800      	ldr	r0, [pc, #0]	@ (801533c <_localeconv_r+0x4>)
 801533a:	4770      	bx	lr
 801533c:	200001d0 	.word	0x200001d0

08015340 <_close_r>:
 8015340:	b538      	push	{r3, r4, r5, lr}
 8015342:	4d06      	ldr	r5, [pc, #24]	@ (801535c <_close_r+0x1c>)
 8015344:	2300      	movs	r3, #0
 8015346:	4604      	mov	r4, r0
 8015348:	4608      	mov	r0, r1
 801534a:	602b      	str	r3, [r5, #0]
 801534c:	f7f4 fbc2 	bl	8009ad4 <_close>
 8015350:	1c43      	adds	r3, r0, #1
 8015352:	d102      	bne.n	801535a <_close_r+0x1a>
 8015354:	682b      	ldr	r3, [r5, #0]
 8015356:	b103      	cbz	r3, 801535a <_close_r+0x1a>
 8015358:	6023      	str	r3, [r4, #0]
 801535a:	bd38      	pop	{r3, r4, r5, pc}
 801535c:	20000bac 	.word	0x20000bac

08015360 <_lseek_r>:
 8015360:	b538      	push	{r3, r4, r5, lr}
 8015362:	4d07      	ldr	r5, [pc, #28]	@ (8015380 <_lseek_r+0x20>)
 8015364:	4604      	mov	r4, r0
 8015366:	4608      	mov	r0, r1
 8015368:	4611      	mov	r1, r2
 801536a:	2200      	movs	r2, #0
 801536c:	602a      	str	r2, [r5, #0]
 801536e:	461a      	mov	r2, r3
 8015370:	f7f4 fbd7 	bl	8009b22 <_lseek>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	d102      	bne.n	801537e <_lseek_r+0x1e>
 8015378:	682b      	ldr	r3, [r5, #0]
 801537a:	b103      	cbz	r3, 801537e <_lseek_r+0x1e>
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	20000bac 	.word	0x20000bac

08015384 <_read_r>:
 8015384:	b538      	push	{r3, r4, r5, lr}
 8015386:	4d07      	ldr	r5, [pc, #28]	@ (80153a4 <_read_r+0x20>)
 8015388:	4604      	mov	r4, r0
 801538a:	4608      	mov	r0, r1
 801538c:	4611      	mov	r1, r2
 801538e:	2200      	movs	r2, #0
 8015390:	602a      	str	r2, [r5, #0]
 8015392:	461a      	mov	r2, r3
 8015394:	f7f4 fb65 	bl	8009a62 <_read>
 8015398:	1c43      	adds	r3, r0, #1
 801539a:	d102      	bne.n	80153a2 <_read_r+0x1e>
 801539c:	682b      	ldr	r3, [r5, #0]
 801539e:	b103      	cbz	r3, 80153a2 <_read_r+0x1e>
 80153a0:	6023      	str	r3, [r4, #0]
 80153a2:	bd38      	pop	{r3, r4, r5, pc}
 80153a4:	20000bac 	.word	0x20000bac

080153a8 <_kill_r>:
 80153a8:	b538      	push	{r3, r4, r5, lr}
 80153aa:	4d07      	ldr	r5, [pc, #28]	@ (80153c8 <_kill_r+0x20>)
 80153ac:	2300      	movs	r3, #0
 80153ae:	4604      	mov	r4, r0
 80153b0:	4608      	mov	r0, r1
 80153b2:	4611      	mov	r1, r2
 80153b4:	602b      	str	r3, [r5, #0]
 80153b6:	f7f4 fb39 	bl	8009a2c <_kill>
 80153ba:	1c43      	adds	r3, r0, #1
 80153bc:	d102      	bne.n	80153c4 <_kill_r+0x1c>
 80153be:	682b      	ldr	r3, [r5, #0]
 80153c0:	b103      	cbz	r3, 80153c4 <_kill_r+0x1c>
 80153c2:	6023      	str	r3, [r4, #0]
 80153c4:	bd38      	pop	{r3, r4, r5, pc}
 80153c6:	bf00      	nop
 80153c8:	20000bac 	.word	0x20000bac

080153cc <_getpid_r>:
 80153cc:	f7f4 bb26 	b.w	8009a1c <_getpid>

080153d0 <_sbrk_r>:
 80153d0:	b538      	push	{r3, r4, r5, lr}
 80153d2:	4d06      	ldr	r5, [pc, #24]	@ (80153ec <_sbrk_r+0x1c>)
 80153d4:	2300      	movs	r3, #0
 80153d6:	4604      	mov	r4, r0
 80153d8:	4608      	mov	r0, r1
 80153da:	602b      	str	r3, [r5, #0]
 80153dc:	f7f4 fbae 	bl	8009b3c <_sbrk>
 80153e0:	1c43      	adds	r3, r0, #1
 80153e2:	d102      	bne.n	80153ea <_sbrk_r+0x1a>
 80153e4:	682b      	ldr	r3, [r5, #0]
 80153e6:	b103      	cbz	r3, 80153ea <_sbrk_r+0x1a>
 80153e8:	6023      	str	r3, [r4, #0]
 80153ea:	bd38      	pop	{r3, r4, r5, pc}
 80153ec:	20000bac 	.word	0x20000bac

080153f0 <_write_r>:
 80153f0:	b538      	push	{r3, r4, r5, lr}
 80153f2:	4d07      	ldr	r5, [pc, #28]	@ (8015410 <_write_r+0x20>)
 80153f4:	4604      	mov	r4, r0
 80153f6:	4608      	mov	r0, r1
 80153f8:	4611      	mov	r1, r2
 80153fa:	2200      	movs	r2, #0
 80153fc:	602a      	str	r2, [r5, #0]
 80153fe:	461a      	mov	r2, r3
 8015400:	f7f4 fb4c 	bl	8009a9c <_write>
 8015404:	1c43      	adds	r3, r0, #1
 8015406:	d102      	bne.n	801540e <_write_r+0x1e>
 8015408:	682b      	ldr	r3, [r5, #0]
 801540a:	b103      	cbz	r3, 801540e <_write_r+0x1e>
 801540c:	6023      	str	r3, [r4, #0]
 801540e:	bd38      	pop	{r3, r4, r5, pc}
 8015410:	20000bac 	.word	0x20000bac

08015414 <__errno>:
 8015414:	4b01      	ldr	r3, [pc, #4]	@ (801541c <__errno+0x8>)
 8015416:	6818      	ldr	r0, [r3, #0]
 8015418:	4770      	bx	lr
 801541a:	bf00      	nop
 801541c:	20000090 	.word	0x20000090

08015420 <__libc_init_array>:
 8015420:	b570      	push	{r4, r5, r6, lr}
 8015422:	4d0d      	ldr	r5, [pc, #52]	@ (8015458 <__libc_init_array+0x38>)
 8015424:	4c0d      	ldr	r4, [pc, #52]	@ (801545c <__libc_init_array+0x3c>)
 8015426:	1b64      	subs	r4, r4, r5
 8015428:	10a4      	asrs	r4, r4, #2
 801542a:	2600      	movs	r6, #0
 801542c:	42a6      	cmp	r6, r4
 801542e:	d109      	bne.n	8015444 <__libc_init_array+0x24>
 8015430:	4d0b      	ldr	r5, [pc, #44]	@ (8015460 <__libc_init_array+0x40>)
 8015432:	4c0c      	ldr	r4, [pc, #48]	@ (8015464 <__libc_init_array+0x44>)
 8015434:	f003 fa1a 	bl	801886c <_init>
 8015438:	1b64      	subs	r4, r4, r5
 801543a:	10a4      	asrs	r4, r4, #2
 801543c:	2600      	movs	r6, #0
 801543e:	42a6      	cmp	r6, r4
 8015440:	d105      	bne.n	801544e <__libc_init_array+0x2e>
 8015442:	bd70      	pop	{r4, r5, r6, pc}
 8015444:	f855 3b04 	ldr.w	r3, [r5], #4
 8015448:	4798      	blx	r3
 801544a:	3601      	adds	r6, #1
 801544c:	e7ee      	b.n	801542c <__libc_init_array+0xc>
 801544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015452:	4798      	blx	r3
 8015454:	3601      	adds	r6, #1
 8015456:	e7f2      	b.n	801543e <__libc_init_array+0x1e>
 8015458:	08019e44 	.word	0x08019e44
 801545c:	08019e44 	.word	0x08019e44
 8015460:	08019e44 	.word	0x08019e44
 8015464:	08019e58 	.word	0x08019e58

08015468 <__retarget_lock_init_recursive>:
 8015468:	4770      	bx	lr

0801546a <__retarget_lock_acquire_recursive>:
 801546a:	4770      	bx	lr

0801546c <__retarget_lock_release_recursive>:
 801546c:	4770      	bx	lr

0801546e <memcpy>:
 801546e:	440a      	add	r2, r1
 8015470:	4291      	cmp	r1, r2
 8015472:	f100 33ff 	add.w	r3, r0, #4294967295
 8015476:	d100      	bne.n	801547a <memcpy+0xc>
 8015478:	4770      	bx	lr
 801547a:	b510      	push	{r4, lr}
 801547c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015484:	4291      	cmp	r1, r2
 8015486:	d1f9      	bne.n	801547c <memcpy+0xe>
 8015488:	bd10      	pop	{r4, pc}
	...

0801548c <nanf>:
 801548c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015494 <nanf+0x8>
 8015490:	4770      	bx	lr
 8015492:	bf00      	nop
 8015494:	7fc00000 	.word	0x7fc00000

08015498 <quorem>:
 8015498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801549c:	6903      	ldr	r3, [r0, #16]
 801549e:	690c      	ldr	r4, [r1, #16]
 80154a0:	42a3      	cmp	r3, r4
 80154a2:	4607      	mov	r7, r0
 80154a4:	db7e      	blt.n	80155a4 <quorem+0x10c>
 80154a6:	3c01      	subs	r4, #1
 80154a8:	f101 0814 	add.w	r8, r1, #20
 80154ac:	00a3      	lsls	r3, r4, #2
 80154ae:	f100 0514 	add.w	r5, r0, #20
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80154b8:	9301      	str	r3, [sp, #4]
 80154ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80154be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80154c2:	3301      	adds	r3, #1
 80154c4:	429a      	cmp	r2, r3
 80154c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80154ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80154ce:	d32e      	bcc.n	801552e <quorem+0x96>
 80154d0:	f04f 0a00 	mov.w	sl, #0
 80154d4:	46c4      	mov	ip, r8
 80154d6:	46ae      	mov	lr, r5
 80154d8:	46d3      	mov	fp, sl
 80154da:	f85c 3b04 	ldr.w	r3, [ip], #4
 80154de:	b298      	uxth	r0, r3
 80154e0:	fb06 a000 	mla	r0, r6, r0, sl
 80154e4:	0c02      	lsrs	r2, r0, #16
 80154e6:	0c1b      	lsrs	r3, r3, #16
 80154e8:	fb06 2303 	mla	r3, r6, r3, r2
 80154ec:	f8de 2000 	ldr.w	r2, [lr]
 80154f0:	b280      	uxth	r0, r0
 80154f2:	b292      	uxth	r2, r2
 80154f4:	1a12      	subs	r2, r2, r0
 80154f6:	445a      	add	r2, fp
 80154f8:	f8de 0000 	ldr.w	r0, [lr]
 80154fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015500:	b29b      	uxth	r3, r3
 8015502:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015506:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801550a:	b292      	uxth	r2, r2
 801550c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015510:	45e1      	cmp	r9, ip
 8015512:	f84e 2b04 	str.w	r2, [lr], #4
 8015516:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801551a:	d2de      	bcs.n	80154da <quorem+0x42>
 801551c:	9b00      	ldr	r3, [sp, #0]
 801551e:	58eb      	ldr	r3, [r5, r3]
 8015520:	b92b      	cbnz	r3, 801552e <quorem+0x96>
 8015522:	9b01      	ldr	r3, [sp, #4]
 8015524:	3b04      	subs	r3, #4
 8015526:	429d      	cmp	r5, r3
 8015528:	461a      	mov	r2, r3
 801552a:	d32f      	bcc.n	801558c <quorem+0xf4>
 801552c:	613c      	str	r4, [r7, #16]
 801552e:	4638      	mov	r0, r7
 8015530:	f001 f90c 	bl	801674c <__mcmp>
 8015534:	2800      	cmp	r0, #0
 8015536:	db25      	blt.n	8015584 <quorem+0xec>
 8015538:	4629      	mov	r1, r5
 801553a:	2000      	movs	r0, #0
 801553c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015540:	f8d1 c000 	ldr.w	ip, [r1]
 8015544:	fa1f fe82 	uxth.w	lr, r2
 8015548:	fa1f f38c 	uxth.w	r3, ip
 801554c:	eba3 030e 	sub.w	r3, r3, lr
 8015550:	4403      	add	r3, r0
 8015552:	0c12      	lsrs	r2, r2, #16
 8015554:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015558:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801555c:	b29b      	uxth	r3, r3
 801555e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015562:	45c1      	cmp	r9, r8
 8015564:	f841 3b04 	str.w	r3, [r1], #4
 8015568:	ea4f 4022 	mov.w	r0, r2, asr #16
 801556c:	d2e6      	bcs.n	801553c <quorem+0xa4>
 801556e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015576:	b922      	cbnz	r2, 8015582 <quorem+0xea>
 8015578:	3b04      	subs	r3, #4
 801557a:	429d      	cmp	r5, r3
 801557c:	461a      	mov	r2, r3
 801557e:	d30b      	bcc.n	8015598 <quorem+0x100>
 8015580:	613c      	str	r4, [r7, #16]
 8015582:	3601      	adds	r6, #1
 8015584:	4630      	mov	r0, r6
 8015586:	b003      	add	sp, #12
 8015588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801558c:	6812      	ldr	r2, [r2, #0]
 801558e:	3b04      	subs	r3, #4
 8015590:	2a00      	cmp	r2, #0
 8015592:	d1cb      	bne.n	801552c <quorem+0x94>
 8015594:	3c01      	subs	r4, #1
 8015596:	e7c6      	b.n	8015526 <quorem+0x8e>
 8015598:	6812      	ldr	r2, [r2, #0]
 801559a:	3b04      	subs	r3, #4
 801559c:	2a00      	cmp	r2, #0
 801559e:	d1ef      	bne.n	8015580 <quorem+0xe8>
 80155a0:	3c01      	subs	r4, #1
 80155a2:	e7ea      	b.n	801557a <quorem+0xe2>
 80155a4:	2000      	movs	r0, #0
 80155a6:	e7ee      	b.n	8015586 <quorem+0xee>

080155a8 <_dtoa_r>:
 80155a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ac:	69c7      	ldr	r7, [r0, #28]
 80155ae:	b099      	sub	sp, #100	@ 0x64
 80155b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80155b4:	ec55 4b10 	vmov	r4, r5, d0
 80155b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80155ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80155bc:	4683      	mov	fp, r0
 80155be:	920e      	str	r2, [sp, #56]	@ 0x38
 80155c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80155c2:	b97f      	cbnz	r7, 80155e4 <_dtoa_r+0x3c>
 80155c4:	2010      	movs	r0, #16
 80155c6:	f7fe fde1 	bl	801418c <malloc>
 80155ca:	4602      	mov	r2, r0
 80155cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80155d0:	b920      	cbnz	r0, 80155dc <_dtoa_r+0x34>
 80155d2:	4ba7      	ldr	r3, [pc, #668]	@ (8015870 <_dtoa_r+0x2c8>)
 80155d4:	21ef      	movs	r1, #239	@ 0xef
 80155d6:	48a7      	ldr	r0, [pc, #668]	@ (8015874 <_dtoa_r+0x2cc>)
 80155d8:	f7fe fda8 	bl	801412c <__assert_func>
 80155dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80155e0:	6007      	str	r7, [r0, #0]
 80155e2:	60c7      	str	r7, [r0, #12]
 80155e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80155e8:	6819      	ldr	r1, [r3, #0]
 80155ea:	b159      	cbz	r1, 8015604 <_dtoa_r+0x5c>
 80155ec:	685a      	ldr	r2, [r3, #4]
 80155ee:	604a      	str	r2, [r1, #4]
 80155f0:	2301      	movs	r3, #1
 80155f2:	4093      	lsls	r3, r2
 80155f4:	608b      	str	r3, [r1, #8]
 80155f6:	4658      	mov	r0, fp
 80155f8:	f000 fe24 	bl	8016244 <_Bfree>
 80155fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015600:	2200      	movs	r2, #0
 8015602:	601a      	str	r2, [r3, #0]
 8015604:	1e2b      	subs	r3, r5, #0
 8015606:	bfb9      	ittee	lt
 8015608:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801560c:	9303      	strlt	r3, [sp, #12]
 801560e:	2300      	movge	r3, #0
 8015610:	6033      	strge	r3, [r6, #0]
 8015612:	9f03      	ldr	r7, [sp, #12]
 8015614:	4b98      	ldr	r3, [pc, #608]	@ (8015878 <_dtoa_r+0x2d0>)
 8015616:	bfbc      	itt	lt
 8015618:	2201      	movlt	r2, #1
 801561a:	6032      	strlt	r2, [r6, #0]
 801561c:	43bb      	bics	r3, r7
 801561e:	d112      	bne.n	8015646 <_dtoa_r+0x9e>
 8015620:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015622:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015626:	6013      	str	r3, [r2, #0]
 8015628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801562c:	4323      	orrs	r3, r4
 801562e:	f000 854d 	beq.w	80160cc <_dtoa_r+0xb24>
 8015632:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015634:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801588c <_dtoa_r+0x2e4>
 8015638:	2b00      	cmp	r3, #0
 801563a:	f000 854f 	beq.w	80160dc <_dtoa_r+0xb34>
 801563e:	f10a 0303 	add.w	r3, sl, #3
 8015642:	f000 bd49 	b.w	80160d8 <_dtoa_r+0xb30>
 8015646:	ed9d 7b02 	vldr	d7, [sp, #8]
 801564a:	2200      	movs	r2, #0
 801564c:	ec51 0b17 	vmov	r0, r1, d7
 8015650:	2300      	movs	r3, #0
 8015652:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8015656:	f7eb fa5f 	bl	8000b18 <__aeabi_dcmpeq>
 801565a:	4680      	mov	r8, r0
 801565c:	b158      	cbz	r0, 8015676 <_dtoa_r+0xce>
 801565e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015660:	2301      	movs	r3, #1
 8015662:	6013      	str	r3, [r2, #0]
 8015664:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015666:	b113      	cbz	r3, 801566e <_dtoa_r+0xc6>
 8015668:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801566a:	4b84      	ldr	r3, [pc, #528]	@ (801587c <_dtoa_r+0x2d4>)
 801566c:	6013      	str	r3, [r2, #0]
 801566e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015890 <_dtoa_r+0x2e8>
 8015672:	f000 bd33 	b.w	80160dc <_dtoa_r+0xb34>
 8015676:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801567a:	aa16      	add	r2, sp, #88	@ 0x58
 801567c:	a917      	add	r1, sp, #92	@ 0x5c
 801567e:	4658      	mov	r0, fp
 8015680:	f001 f984 	bl	801698c <__d2b>
 8015684:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015688:	4681      	mov	r9, r0
 801568a:	2e00      	cmp	r6, #0
 801568c:	d077      	beq.n	801577e <_dtoa_r+0x1d6>
 801568e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015690:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801569c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80156a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80156a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80156a8:	4619      	mov	r1, r3
 80156aa:	2200      	movs	r2, #0
 80156ac:	4b74      	ldr	r3, [pc, #464]	@ (8015880 <_dtoa_r+0x2d8>)
 80156ae:	f7ea fe13 	bl	80002d8 <__aeabi_dsub>
 80156b2:	a369      	add	r3, pc, #420	@ (adr r3, 8015858 <_dtoa_r+0x2b0>)
 80156b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b8:	f7ea ffc6 	bl	8000648 <__aeabi_dmul>
 80156bc:	a368      	add	r3, pc, #416	@ (adr r3, 8015860 <_dtoa_r+0x2b8>)
 80156be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c2:	f7ea fe0b 	bl	80002dc <__adddf3>
 80156c6:	4604      	mov	r4, r0
 80156c8:	4630      	mov	r0, r6
 80156ca:	460d      	mov	r5, r1
 80156cc:	f7ea ff52 	bl	8000574 <__aeabi_i2d>
 80156d0:	a365      	add	r3, pc, #404	@ (adr r3, 8015868 <_dtoa_r+0x2c0>)
 80156d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d6:	f7ea ffb7 	bl	8000648 <__aeabi_dmul>
 80156da:	4602      	mov	r2, r0
 80156dc:	460b      	mov	r3, r1
 80156de:	4620      	mov	r0, r4
 80156e0:	4629      	mov	r1, r5
 80156e2:	f7ea fdfb 	bl	80002dc <__adddf3>
 80156e6:	4604      	mov	r4, r0
 80156e8:	460d      	mov	r5, r1
 80156ea:	f7eb fa5d 	bl	8000ba8 <__aeabi_d2iz>
 80156ee:	2200      	movs	r2, #0
 80156f0:	4607      	mov	r7, r0
 80156f2:	2300      	movs	r3, #0
 80156f4:	4620      	mov	r0, r4
 80156f6:	4629      	mov	r1, r5
 80156f8:	f7eb fa18 	bl	8000b2c <__aeabi_dcmplt>
 80156fc:	b140      	cbz	r0, 8015710 <_dtoa_r+0x168>
 80156fe:	4638      	mov	r0, r7
 8015700:	f7ea ff38 	bl	8000574 <__aeabi_i2d>
 8015704:	4622      	mov	r2, r4
 8015706:	462b      	mov	r3, r5
 8015708:	f7eb fa06 	bl	8000b18 <__aeabi_dcmpeq>
 801570c:	b900      	cbnz	r0, 8015710 <_dtoa_r+0x168>
 801570e:	3f01      	subs	r7, #1
 8015710:	2f16      	cmp	r7, #22
 8015712:	d851      	bhi.n	80157b8 <_dtoa_r+0x210>
 8015714:	4b5b      	ldr	r3, [pc, #364]	@ (8015884 <_dtoa_r+0x2dc>)
 8015716:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801571e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015722:	f7eb fa03 	bl	8000b2c <__aeabi_dcmplt>
 8015726:	2800      	cmp	r0, #0
 8015728:	d048      	beq.n	80157bc <_dtoa_r+0x214>
 801572a:	3f01      	subs	r7, #1
 801572c:	2300      	movs	r3, #0
 801572e:	9312      	str	r3, [sp, #72]	@ 0x48
 8015730:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015732:	1b9b      	subs	r3, r3, r6
 8015734:	1e5a      	subs	r2, r3, #1
 8015736:	bf44      	itt	mi
 8015738:	f1c3 0801 	rsbmi	r8, r3, #1
 801573c:	2300      	movmi	r3, #0
 801573e:	9208      	str	r2, [sp, #32]
 8015740:	bf54      	ite	pl
 8015742:	f04f 0800 	movpl.w	r8, #0
 8015746:	9308      	strmi	r3, [sp, #32]
 8015748:	2f00      	cmp	r7, #0
 801574a:	db39      	blt.n	80157c0 <_dtoa_r+0x218>
 801574c:	9b08      	ldr	r3, [sp, #32]
 801574e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015750:	443b      	add	r3, r7
 8015752:	9308      	str	r3, [sp, #32]
 8015754:	2300      	movs	r3, #0
 8015756:	930a      	str	r3, [sp, #40]	@ 0x28
 8015758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801575a:	2b09      	cmp	r3, #9
 801575c:	d864      	bhi.n	8015828 <_dtoa_r+0x280>
 801575e:	2b05      	cmp	r3, #5
 8015760:	bfc4      	itt	gt
 8015762:	3b04      	subgt	r3, #4
 8015764:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8015766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015768:	f1a3 0302 	sub.w	r3, r3, #2
 801576c:	bfcc      	ite	gt
 801576e:	2400      	movgt	r4, #0
 8015770:	2401      	movle	r4, #1
 8015772:	2b03      	cmp	r3, #3
 8015774:	d863      	bhi.n	801583e <_dtoa_r+0x296>
 8015776:	e8df f003 	tbb	[pc, r3]
 801577a:	372a      	.short	0x372a
 801577c:	5535      	.short	0x5535
 801577e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8015782:	441e      	add	r6, r3
 8015784:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015788:	2b20      	cmp	r3, #32
 801578a:	bfc1      	itttt	gt
 801578c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015790:	409f      	lslgt	r7, r3
 8015792:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015796:	fa24 f303 	lsrgt.w	r3, r4, r3
 801579a:	bfd6      	itet	le
 801579c:	f1c3 0320 	rsble	r3, r3, #32
 80157a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80157a4:	fa04 f003 	lslle.w	r0, r4, r3
 80157a8:	f7ea fed4 	bl	8000554 <__aeabi_ui2d>
 80157ac:	2201      	movs	r2, #1
 80157ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80157b2:	3e01      	subs	r6, #1
 80157b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80157b6:	e777      	b.n	80156a8 <_dtoa_r+0x100>
 80157b8:	2301      	movs	r3, #1
 80157ba:	e7b8      	b.n	801572e <_dtoa_r+0x186>
 80157bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80157be:	e7b7      	b.n	8015730 <_dtoa_r+0x188>
 80157c0:	427b      	negs	r3, r7
 80157c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80157c4:	2300      	movs	r3, #0
 80157c6:	eba8 0807 	sub.w	r8, r8, r7
 80157ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80157cc:	e7c4      	b.n	8015758 <_dtoa_r+0x1b0>
 80157ce:	2300      	movs	r3, #0
 80157d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	dc35      	bgt.n	8015844 <_dtoa_r+0x29c>
 80157d8:	2301      	movs	r3, #1
 80157da:	9300      	str	r3, [sp, #0]
 80157dc:	9307      	str	r3, [sp, #28]
 80157de:	461a      	mov	r2, r3
 80157e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80157e2:	e00b      	b.n	80157fc <_dtoa_r+0x254>
 80157e4:	2301      	movs	r3, #1
 80157e6:	e7f3      	b.n	80157d0 <_dtoa_r+0x228>
 80157e8:	2300      	movs	r3, #0
 80157ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157ee:	18fb      	adds	r3, r7, r3
 80157f0:	9300      	str	r3, [sp, #0]
 80157f2:	3301      	adds	r3, #1
 80157f4:	2b01      	cmp	r3, #1
 80157f6:	9307      	str	r3, [sp, #28]
 80157f8:	bfb8      	it	lt
 80157fa:	2301      	movlt	r3, #1
 80157fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015800:	2100      	movs	r1, #0
 8015802:	2204      	movs	r2, #4
 8015804:	f102 0514 	add.w	r5, r2, #20
 8015808:	429d      	cmp	r5, r3
 801580a:	d91f      	bls.n	801584c <_dtoa_r+0x2a4>
 801580c:	6041      	str	r1, [r0, #4]
 801580e:	4658      	mov	r0, fp
 8015810:	f000 fcd8 	bl	80161c4 <_Balloc>
 8015814:	4682      	mov	sl, r0
 8015816:	2800      	cmp	r0, #0
 8015818:	d13c      	bne.n	8015894 <_dtoa_r+0x2ec>
 801581a:	4b1b      	ldr	r3, [pc, #108]	@ (8015888 <_dtoa_r+0x2e0>)
 801581c:	4602      	mov	r2, r0
 801581e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015822:	e6d8      	b.n	80155d6 <_dtoa_r+0x2e>
 8015824:	2301      	movs	r3, #1
 8015826:	e7e0      	b.n	80157ea <_dtoa_r+0x242>
 8015828:	2401      	movs	r4, #1
 801582a:	2300      	movs	r3, #0
 801582c:	9309      	str	r3, [sp, #36]	@ 0x24
 801582e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015830:	f04f 33ff 	mov.w	r3, #4294967295
 8015834:	9300      	str	r3, [sp, #0]
 8015836:	9307      	str	r3, [sp, #28]
 8015838:	2200      	movs	r2, #0
 801583a:	2312      	movs	r3, #18
 801583c:	e7d0      	b.n	80157e0 <_dtoa_r+0x238>
 801583e:	2301      	movs	r3, #1
 8015840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015842:	e7f5      	b.n	8015830 <_dtoa_r+0x288>
 8015844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	9307      	str	r3, [sp, #28]
 801584a:	e7d7      	b.n	80157fc <_dtoa_r+0x254>
 801584c:	3101      	adds	r1, #1
 801584e:	0052      	lsls	r2, r2, #1
 8015850:	e7d8      	b.n	8015804 <_dtoa_r+0x25c>
 8015852:	bf00      	nop
 8015854:	f3af 8000 	nop.w
 8015858:	636f4361 	.word	0x636f4361
 801585c:	3fd287a7 	.word	0x3fd287a7
 8015860:	8b60c8b3 	.word	0x8b60c8b3
 8015864:	3fc68a28 	.word	0x3fc68a28
 8015868:	509f79fb 	.word	0x509f79fb
 801586c:	3fd34413 	.word	0x3fd34413
 8015870:	08019a92 	.word	0x08019a92
 8015874:	08019aa9 	.word	0x08019aa9
 8015878:	7ff00000 	.word	0x7ff00000
 801587c:	08019a5d 	.word	0x08019a5d
 8015880:	3ff80000 	.word	0x3ff80000
 8015884:	08019ba0 	.word	0x08019ba0
 8015888:	08019b01 	.word	0x08019b01
 801588c:	08019a8e 	.word	0x08019a8e
 8015890:	08019a5c 	.word	0x08019a5c
 8015894:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015898:	6018      	str	r0, [r3, #0]
 801589a:	9b07      	ldr	r3, [sp, #28]
 801589c:	2b0e      	cmp	r3, #14
 801589e:	f200 80a4 	bhi.w	80159ea <_dtoa_r+0x442>
 80158a2:	2c00      	cmp	r4, #0
 80158a4:	f000 80a1 	beq.w	80159ea <_dtoa_r+0x442>
 80158a8:	2f00      	cmp	r7, #0
 80158aa:	dd33      	ble.n	8015914 <_dtoa_r+0x36c>
 80158ac:	4bad      	ldr	r3, [pc, #692]	@ (8015b64 <_dtoa_r+0x5bc>)
 80158ae:	f007 020f 	and.w	r2, r7, #15
 80158b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80158b6:	ed93 7b00 	vldr	d7, [r3]
 80158ba:	05f8      	lsls	r0, r7, #23
 80158bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80158c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80158c4:	d516      	bpl.n	80158f4 <_dtoa_r+0x34c>
 80158c6:	4ba8      	ldr	r3, [pc, #672]	@ (8015b68 <_dtoa_r+0x5c0>)
 80158c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80158cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80158d0:	f7ea ffe4 	bl	800089c <__aeabi_ddiv>
 80158d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158d8:	f004 040f 	and.w	r4, r4, #15
 80158dc:	2603      	movs	r6, #3
 80158de:	4da2      	ldr	r5, [pc, #648]	@ (8015b68 <_dtoa_r+0x5c0>)
 80158e0:	b954      	cbnz	r4, 80158f8 <_dtoa_r+0x350>
 80158e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158ea:	f7ea ffd7 	bl	800089c <__aeabi_ddiv>
 80158ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158f2:	e028      	b.n	8015946 <_dtoa_r+0x39e>
 80158f4:	2602      	movs	r6, #2
 80158f6:	e7f2      	b.n	80158de <_dtoa_r+0x336>
 80158f8:	07e1      	lsls	r1, r4, #31
 80158fa:	d508      	bpl.n	801590e <_dtoa_r+0x366>
 80158fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015900:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015904:	f7ea fea0 	bl	8000648 <__aeabi_dmul>
 8015908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801590c:	3601      	adds	r6, #1
 801590e:	1064      	asrs	r4, r4, #1
 8015910:	3508      	adds	r5, #8
 8015912:	e7e5      	b.n	80158e0 <_dtoa_r+0x338>
 8015914:	f000 80d2 	beq.w	8015abc <_dtoa_r+0x514>
 8015918:	427c      	negs	r4, r7
 801591a:	4b92      	ldr	r3, [pc, #584]	@ (8015b64 <_dtoa_r+0x5bc>)
 801591c:	4d92      	ldr	r5, [pc, #584]	@ (8015b68 <_dtoa_r+0x5c0>)
 801591e:	f004 020f 	and.w	r2, r4, #15
 8015922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801592a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801592e:	f7ea fe8b 	bl	8000648 <__aeabi_dmul>
 8015932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015936:	1124      	asrs	r4, r4, #4
 8015938:	2300      	movs	r3, #0
 801593a:	2602      	movs	r6, #2
 801593c:	2c00      	cmp	r4, #0
 801593e:	f040 80b2 	bne.w	8015aa6 <_dtoa_r+0x4fe>
 8015942:	2b00      	cmp	r3, #0
 8015944:	d1d3      	bne.n	80158ee <_dtoa_r+0x346>
 8015946:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015948:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801594c:	2b00      	cmp	r3, #0
 801594e:	f000 80b7 	beq.w	8015ac0 <_dtoa_r+0x518>
 8015952:	4b86      	ldr	r3, [pc, #536]	@ (8015b6c <_dtoa_r+0x5c4>)
 8015954:	2200      	movs	r2, #0
 8015956:	4620      	mov	r0, r4
 8015958:	4629      	mov	r1, r5
 801595a:	f7eb f8e7 	bl	8000b2c <__aeabi_dcmplt>
 801595e:	2800      	cmp	r0, #0
 8015960:	f000 80ae 	beq.w	8015ac0 <_dtoa_r+0x518>
 8015964:	9b07      	ldr	r3, [sp, #28]
 8015966:	2b00      	cmp	r3, #0
 8015968:	f000 80aa 	beq.w	8015ac0 <_dtoa_r+0x518>
 801596c:	9b00      	ldr	r3, [sp, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	dd37      	ble.n	80159e2 <_dtoa_r+0x43a>
 8015972:	1e7b      	subs	r3, r7, #1
 8015974:	9304      	str	r3, [sp, #16]
 8015976:	4620      	mov	r0, r4
 8015978:	4b7d      	ldr	r3, [pc, #500]	@ (8015b70 <_dtoa_r+0x5c8>)
 801597a:	2200      	movs	r2, #0
 801597c:	4629      	mov	r1, r5
 801597e:	f7ea fe63 	bl	8000648 <__aeabi_dmul>
 8015982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015986:	9c00      	ldr	r4, [sp, #0]
 8015988:	3601      	adds	r6, #1
 801598a:	4630      	mov	r0, r6
 801598c:	f7ea fdf2 	bl	8000574 <__aeabi_i2d>
 8015990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015994:	f7ea fe58 	bl	8000648 <__aeabi_dmul>
 8015998:	4b76      	ldr	r3, [pc, #472]	@ (8015b74 <_dtoa_r+0x5cc>)
 801599a:	2200      	movs	r2, #0
 801599c:	f7ea fc9e 	bl	80002dc <__adddf3>
 80159a0:	4605      	mov	r5, r0
 80159a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80159a6:	2c00      	cmp	r4, #0
 80159a8:	f040 808d 	bne.w	8015ac6 <_dtoa_r+0x51e>
 80159ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159b0:	4b71      	ldr	r3, [pc, #452]	@ (8015b78 <_dtoa_r+0x5d0>)
 80159b2:	2200      	movs	r2, #0
 80159b4:	f7ea fc90 	bl	80002d8 <__aeabi_dsub>
 80159b8:	4602      	mov	r2, r0
 80159ba:	460b      	mov	r3, r1
 80159bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80159c0:	462a      	mov	r2, r5
 80159c2:	4633      	mov	r3, r6
 80159c4:	f7eb f8d0 	bl	8000b68 <__aeabi_dcmpgt>
 80159c8:	2800      	cmp	r0, #0
 80159ca:	f040 828b 	bne.w	8015ee4 <_dtoa_r+0x93c>
 80159ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159d2:	462a      	mov	r2, r5
 80159d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80159d8:	f7eb f8a8 	bl	8000b2c <__aeabi_dcmplt>
 80159dc:	2800      	cmp	r0, #0
 80159de:	f040 8128 	bne.w	8015c32 <_dtoa_r+0x68a>
 80159e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80159e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80159ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	f2c0 815a 	blt.w	8015ca6 <_dtoa_r+0x6fe>
 80159f2:	2f0e      	cmp	r7, #14
 80159f4:	f300 8157 	bgt.w	8015ca6 <_dtoa_r+0x6fe>
 80159f8:	4b5a      	ldr	r3, [pc, #360]	@ (8015b64 <_dtoa_r+0x5bc>)
 80159fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80159fe:	ed93 7b00 	vldr	d7, [r3]
 8015a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	ed8d 7b00 	vstr	d7, [sp]
 8015a0a:	da03      	bge.n	8015a14 <_dtoa_r+0x46c>
 8015a0c:	9b07      	ldr	r3, [sp, #28]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	f340 8101 	ble.w	8015c16 <_dtoa_r+0x66e>
 8015a14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015a18:	4656      	mov	r6, sl
 8015a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a1e:	4620      	mov	r0, r4
 8015a20:	4629      	mov	r1, r5
 8015a22:	f7ea ff3b 	bl	800089c <__aeabi_ddiv>
 8015a26:	f7eb f8bf 	bl	8000ba8 <__aeabi_d2iz>
 8015a2a:	4680      	mov	r8, r0
 8015a2c:	f7ea fda2 	bl	8000574 <__aeabi_i2d>
 8015a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a34:	f7ea fe08 	bl	8000648 <__aeabi_dmul>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	4629      	mov	r1, r5
 8015a40:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015a44:	f7ea fc48 	bl	80002d8 <__aeabi_dsub>
 8015a48:	f806 4b01 	strb.w	r4, [r6], #1
 8015a4c:	9d07      	ldr	r5, [sp, #28]
 8015a4e:	eba6 040a 	sub.w	r4, r6, sl
 8015a52:	42a5      	cmp	r5, r4
 8015a54:	4602      	mov	r2, r0
 8015a56:	460b      	mov	r3, r1
 8015a58:	f040 8117 	bne.w	8015c8a <_dtoa_r+0x6e2>
 8015a5c:	f7ea fc3e 	bl	80002dc <__adddf3>
 8015a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a64:	4604      	mov	r4, r0
 8015a66:	460d      	mov	r5, r1
 8015a68:	f7eb f87e 	bl	8000b68 <__aeabi_dcmpgt>
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	f040 80f9 	bne.w	8015c64 <_dtoa_r+0x6bc>
 8015a72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a76:	4620      	mov	r0, r4
 8015a78:	4629      	mov	r1, r5
 8015a7a:	f7eb f84d 	bl	8000b18 <__aeabi_dcmpeq>
 8015a7e:	b118      	cbz	r0, 8015a88 <_dtoa_r+0x4e0>
 8015a80:	f018 0f01 	tst.w	r8, #1
 8015a84:	f040 80ee 	bne.w	8015c64 <_dtoa_r+0x6bc>
 8015a88:	4649      	mov	r1, r9
 8015a8a:	4658      	mov	r0, fp
 8015a8c:	f000 fbda 	bl	8016244 <_Bfree>
 8015a90:	2300      	movs	r3, #0
 8015a92:	7033      	strb	r3, [r6, #0]
 8015a94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015a96:	3701      	adds	r7, #1
 8015a98:	601f      	str	r7, [r3, #0]
 8015a9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	f000 831d 	beq.w	80160dc <_dtoa_r+0xb34>
 8015aa2:	601e      	str	r6, [r3, #0]
 8015aa4:	e31a      	b.n	80160dc <_dtoa_r+0xb34>
 8015aa6:	07e2      	lsls	r2, r4, #31
 8015aa8:	d505      	bpl.n	8015ab6 <_dtoa_r+0x50e>
 8015aaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015aae:	f7ea fdcb 	bl	8000648 <__aeabi_dmul>
 8015ab2:	3601      	adds	r6, #1
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	1064      	asrs	r4, r4, #1
 8015ab8:	3508      	adds	r5, #8
 8015aba:	e73f      	b.n	801593c <_dtoa_r+0x394>
 8015abc:	2602      	movs	r6, #2
 8015abe:	e742      	b.n	8015946 <_dtoa_r+0x39e>
 8015ac0:	9c07      	ldr	r4, [sp, #28]
 8015ac2:	9704      	str	r7, [sp, #16]
 8015ac4:	e761      	b.n	801598a <_dtoa_r+0x3e2>
 8015ac6:	4b27      	ldr	r3, [pc, #156]	@ (8015b64 <_dtoa_r+0x5bc>)
 8015ac8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015aca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015ace:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015ad2:	4454      	add	r4, sl
 8015ad4:	2900      	cmp	r1, #0
 8015ad6:	d053      	beq.n	8015b80 <_dtoa_r+0x5d8>
 8015ad8:	4928      	ldr	r1, [pc, #160]	@ (8015b7c <_dtoa_r+0x5d4>)
 8015ada:	2000      	movs	r0, #0
 8015adc:	f7ea fede 	bl	800089c <__aeabi_ddiv>
 8015ae0:	4633      	mov	r3, r6
 8015ae2:	462a      	mov	r2, r5
 8015ae4:	f7ea fbf8 	bl	80002d8 <__aeabi_dsub>
 8015ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015aec:	4656      	mov	r6, sl
 8015aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015af2:	f7eb f859 	bl	8000ba8 <__aeabi_d2iz>
 8015af6:	4605      	mov	r5, r0
 8015af8:	f7ea fd3c 	bl	8000574 <__aeabi_i2d>
 8015afc:	4602      	mov	r2, r0
 8015afe:	460b      	mov	r3, r1
 8015b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b04:	f7ea fbe8 	bl	80002d8 <__aeabi_dsub>
 8015b08:	3530      	adds	r5, #48	@ 0x30
 8015b0a:	4602      	mov	r2, r0
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015b12:	f806 5b01 	strb.w	r5, [r6], #1
 8015b16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015b1a:	f7eb f807 	bl	8000b2c <__aeabi_dcmplt>
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	d171      	bne.n	8015c06 <_dtoa_r+0x65e>
 8015b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b26:	4911      	ldr	r1, [pc, #68]	@ (8015b6c <_dtoa_r+0x5c4>)
 8015b28:	2000      	movs	r0, #0
 8015b2a:	f7ea fbd5 	bl	80002d8 <__aeabi_dsub>
 8015b2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015b32:	f7ea fffb 	bl	8000b2c <__aeabi_dcmplt>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	f040 8095 	bne.w	8015c66 <_dtoa_r+0x6be>
 8015b3c:	42a6      	cmp	r6, r4
 8015b3e:	f43f af50 	beq.w	80159e2 <_dtoa_r+0x43a>
 8015b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015b46:	4b0a      	ldr	r3, [pc, #40]	@ (8015b70 <_dtoa_r+0x5c8>)
 8015b48:	2200      	movs	r2, #0
 8015b4a:	f7ea fd7d 	bl	8000648 <__aeabi_dmul>
 8015b4e:	4b08      	ldr	r3, [pc, #32]	@ (8015b70 <_dtoa_r+0x5c8>)
 8015b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015b54:	2200      	movs	r2, #0
 8015b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b5a:	f7ea fd75 	bl	8000648 <__aeabi_dmul>
 8015b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b62:	e7c4      	b.n	8015aee <_dtoa_r+0x546>
 8015b64:	08019ba0 	.word	0x08019ba0
 8015b68:	08019b78 	.word	0x08019b78
 8015b6c:	3ff00000 	.word	0x3ff00000
 8015b70:	40240000 	.word	0x40240000
 8015b74:	401c0000 	.word	0x401c0000
 8015b78:	40140000 	.word	0x40140000
 8015b7c:	3fe00000 	.word	0x3fe00000
 8015b80:	4631      	mov	r1, r6
 8015b82:	4628      	mov	r0, r5
 8015b84:	f7ea fd60 	bl	8000648 <__aeabi_dmul>
 8015b88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015b8c:	9415      	str	r4, [sp, #84]	@ 0x54
 8015b8e:	4656      	mov	r6, sl
 8015b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b94:	f7eb f808 	bl	8000ba8 <__aeabi_d2iz>
 8015b98:	4605      	mov	r5, r0
 8015b9a:	f7ea fceb 	bl	8000574 <__aeabi_i2d>
 8015b9e:	4602      	mov	r2, r0
 8015ba0:	460b      	mov	r3, r1
 8015ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ba6:	f7ea fb97 	bl	80002d8 <__aeabi_dsub>
 8015baa:	3530      	adds	r5, #48	@ 0x30
 8015bac:	f806 5b01 	strb.w	r5, [r6], #1
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	460b      	mov	r3, r1
 8015bb4:	42a6      	cmp	r6, r4
 8015bb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015bba:	f04f 0200 	mov.w	r2, #0
 8015bbe:	d124      	bne.n	8015c0a <_dtoa_r+0x662>
 8015bc0:	4bac      	ldr	r3, [pc, #688]	@ (8015e74 <_dtoa_r+0x8cc>)
 8015bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015bc6:	f7ea fb89 	bl	80002dc <__adddf3>
 8015bca:	4602      	mov	r2, r0
 8015bcc:	460b      	mov	r3, r1
 8015bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bd2:	f7ea ffc9 	bl	8000b68 <__aeabi_dcmpgt>
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	d145      	bne.n	8015c66 <_dtoa_r+0x6be>
 8015bda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015bde:	49a5      	ldr	r1, [pc, #660]	@ (8015e74 <_dtoa_r+0x8cc>)
 8015be0:	2000      	movs	r0, #0
 8015be2:	f7ea fb79 	bl	80002d8 <__aeabi_dsub>
 8015be6:	4602      	mov	r2, r0
 8015be8:	460b      	mov	r3, r1
 8015bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bee:	f7ea ff9d 	bl	8000b2c <__aeabi_dcmplt>
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	f43f aef5 	beq.w	80159e2 <_dtoa_r+0x43a>
 8015bf8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015bfa:	1e73      	subs	r3, r6, #1
 8015bfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8015bfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c02:	2b30      	cmp	r3, #48	@ 0x30
 8015c04:	d0f8      	beq.n	8015bf8 <_dtoa_r+0x650>
 8015c06:	9f04      	ldr	r7, [sp, #16]
 8015c08:	e73e      	b.n	8015a88 <_dtoa_r+0x4e0>
 8015c0a:	4b9b      	ldr	r3, [pc, #620]	@ (8015e78 <_dtoa_r+0x8d0>)
 8015c0c:	f7ea fd1c 	bl	8000648 <__aeabi_dmul>
 8015c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c14:	e7bc      	b.n	8015b90 <_dtoa_r+0x5e8>
 8015c16:	d10c      	bne.n	8015c32 <_dtoa_r+0x68a>
 8015c18:	4b98      	ldr	r3, [pc, #608]	@ (8015e7c <_dtoa_r+0x8d4>)
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c20:	f7ea fd12 	bl	8000648 <__aeabi_dmul>
 8015c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c28:	f7ea ff94 	bl	8000b54 <__aeabi_dcmpge>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	f000 8157 	beq.w	8015ee0 <_dtoa_r+0x938>
 8015c32:	2400      	movs	r4, #0
 8015c34:	4625      	mov	r5, r4
 8015c36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c38:	43db      	mvns	r3, r3
 8015c3a:	9304      	str	r3, [sp, #16]
 8015c3c:	4656      	mov	r6, sl
 8015c3e:	2700      	movs	r7, #0
 8015c40:	4621      	mov	r1, r4
 8015c42:	4658      	mov	r0, fp
 8015c44:	f000 fafe 	bl	8016244 <_Bfree>
 8015c48:	2d00      	cmp	r5, #0
 8015c4a:	d0dc      	beq.n	8015c06 <_dtoa_r+0x65e>
 8015c4c:	b12f      	cbz	r7, 8015c5a <_dtoa_r+0x6b2>
 8015c4e:	42af      	cmp	r7, r5
 8015c50:	d003      	beq.n	8015c5a <_dtoa_r+0x6b2>
 8015c52:	4639      	mov	r1, r7
 8015c54:	4658      	mov	r0, fp
 8015c56:	f000 faf5 	bl	8016244 <_Bfree>
 8015c5a:	4629      	mov	r1, r5
 8015c5c:	4658      	mov	r0, fp
 8015c5e:	f000 faf1 	bl	8016244 <_Bfree>
 8015c62:	e7d0      	b.n	8015c06 <_dtoa_r+0x65e>
 8015c64:	9704      	str	r7, [sp, #16]
 8015c66:	4633      	mov	r3, r6
 8015c68:	461e      	mov	r6, r3
 8015c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015c6e:	2a39      	cmp	r2, #57	@ 0x39
 8015c70:	d107      	bne.n	8015c82 <_dtoa_r+0x6da>
 8015c72:	459a      	cmp	sl, r3
 8015c74:	d1f8      	bne.n	8015c68 <_dtoa_r+0x6c0>
 8015c76:	9a04      	ldr	r2, [sp, #16]
 8015c78:	3201      	adds	r2, #1
 8015c7a:	9204      	str	r2, [sp, #16]
 8015c7c:	2230      	movs	r2, #48	@ 0x30
 8015c7e:	f88a 2000 	strb.w	r2, [sl]
 8015c82:	781a      	ldrb	r2, [r3, #0]
 8015c84:	3201      	adds	r2, #1
 8015c86:	701a      	strb	r2, [r3, #0]
 8015c88:	e7bd      	b.n	8015c06 <_dtoa_r+0x65e>
 8015c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8015e78 <_dtoa_r+0x8d0>)
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	f7ea fcdb 	bl	8000648 <__aeabi_dmul>
 8015c92:	2200      	movs	r2, #0
 8015c94:	2300      	movs	r3, #0
 8015c96:	4604      	mov	r4, r0
 8015c98:	460d      	mov	r5, r1
 8015c9a:	f7ea ff3d 	bl	8000b18 <__aeabi_dcmpeq>
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	f43f aebb 	beq.w	8015a1a <_dtoa_r+0x472>
 8015ca4:	e6f0      	b.n	8015a88 <_dtoa_r+0x4e0>
 8015ca6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015ca8:	2a00      	cmp	r2, #0
 8015caa:	f000 80db 	beq.w	8015e64 <_dtoa_r+0x8bc>
 8015cae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015cb0:	2a01      	cmp	r2, #1
 8015cb2:	f300 80bf 	bgt.w	8015e34 <_dtoa_r+0x88c>
 8015cb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015cb8:	2a00      	cmp	r2, #0
 8015cba:	f000 80b7 	beq.w	8015e2c <_dtoa_r+0x884>
 8015cbe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015cc2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015cc4:	4646      	mov	r6, r8
 8015cc6:	9a08      	ldr	r2, [sp, #32]
 8015cc8:	2101      	movs	r1, #1
 8015cca:	441a      	add	r2, r3
 8015ccc:	4658      	mov	r0, fp
 8015cce:	4498      	add	r8, r3
 8015cd0:	9208      	str	r2, [sp, #32]
 8015cd2:	f000 fbb5 	bl	8016440 <__i2b>
 8015cd6:	4605      	mov	r5, r0
 8015cd8:	b15e      	cbz	r6, 8015cf2 <_dtoa_r+0x74a>
 8015cda:	9b08      	ldr	r3, [sp, #32]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	dd08      	ble.n	8015cf2 <_dtoa_r+0x74a>
 8015ce0:	42b3      	cmp	r3, r6
 8015ce2:	9a08      	ldr	r2, [sp, #32]
 8015ce4:	bfa8      	it	ge
 8015ce6:	4633      	movge	r3, r6
 8015ce8:	eba8 0803 	sub.w	r8, r8, r3
 8015cec:	1af6      	subs	r6, r6, r3
 8015cee:	1ad3      	subs	r3, r2, r3
 8015cf0:	9308      	str	r3, [sp, #32]
 8015cf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cf4:	b1f3      	cbz	r3, 8015d34 <_dtoa_r+0x78c>
 8015cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	f000 80b7 	beq.w	8015e6c <_dtoa_r+0x8c4>
 8015cfe:	b18c      	cbz	r4, 8015d24 <_dtoa_r+0x77c>
 8015d00:	4629      	mov	r1, r5
 8015d02:	4622      	mov	r2, r4
 8015d04:	4658      	mov	r0, fp
 8015d06:	f000 fc5b 	bl	80165c0 <__pow5mult>
 8015d0a:	464a      	mov	r2, r9
 8015d0c:	4601      	mov	r1, r0
 8015d0e:	4605      	mov	r5, r0
 8015d10:	4658      	mov	r0, fp
 8015d12:	f000 fbab 	bl	801646c <__multiply>
 8015d16:	4649      	mov	r1, r9
 8015d18:	9004      	str	r0, [sp, #16]
 8015d1a:	4658      	mov	r0, fp
 8015d1c:	f000 fa92 	bl	8016244 <_Bfree>
 8015d20:	9b04      	ldr	r3, [sp, #16]
 8015d22:	4699      	mov	r9, r3
 8015d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d26:	1b1a      	subs	r2, r3, r4
 8015d28:	d004      	beq.n	8015d34 <_dtoa_r+0x78c>
 8015d2a:	4649      	mov	r1, r9
 8015d2c:	4658      	mov	r0, fp
 8015d2e:	f000 fc47 	bl	80165c0 <__pow5mult>
 8015d32:	4681      	mov	r9, r0
 8015d34:	2101      	movs	r1, #1
 8015d36:	4658      	mov	r0, fp
 8015d38:	f000 fb82 	bl	8016440 <__i2b>
 8015d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d3e:	4604      	mov	r4, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	f000 81cf 	beq.w	80160e4 <_dtoa_r+0xb3c>
 8015d46:	461a      	mov	r2, r3
 8015d48:	4601      	mov	r1, r0
 8015d4a:	4658      	mov	r0, fp
 8015d4c:	f000 fc38 	bl	80165c0 <__pow5mult>
 8015d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d52:	2b01      	cmp	r3, #1
 8015d54:	4604      	mov	r4, r0
 8015d56:	f300 8095 	bgt.w	8015e84 <_dtoa_r+0x8dc>
 8015d5a:	9b02      	ldr	r3, [sp, #8]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f040 8087 	bne.w	8015e70 <_dtoa_r+0x8c8>
 8015d62:	9b03      	ldr	r3, [sp, #12]
 8015d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	f040 8089 	bne.w	8015e80 <_dtoa_r+0x8d8>
 8015d6e:	9b03      	ldr	r3, [sp, #12]
 8015d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015d74:	0d1b      	lsrs	r3, r3, #20
 8015d76:	051b      	lsls	r3, r3, #20
 8015d78:	b12b      	cbz	r3, 8015d86 <_dtoa_r+0x7de>
 8015d7a:	9b08      	ldr	r3, [sp, #32]
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	9308      	str	r3, [sp, #32]
 8015d80:	f108 0801 	add.w	r8, r8, #1
 8015d84:	2301      	movs	r3, #1
 8015d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8015d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	f000 81b0 	beq.w	80160f0 <_dtoa_r+0xb48>
 8015d90:	6923      	ldr	r3, [r4, #16]
 8015d92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015d96:	6918      	ldr	r0, [r3, #16]
 8015d98:	f000 fb06 	bl	80163a8 <__hi0bits>
 8015d9c:	f1c0 0020 	rsb	r0, r0, #32
 8015da0:	9b08      	ldr	r3, [sp, #32]
 8015da2:	4418      	add	r0, r3
 8015da4:	f010 001f 	ands.w	r0, r0, #31
 8015da8:	d077      	beq.n	8015e9a <_dtoa_r+0x8f2>
 8015daa:	f1c0 0320 	rsb	r3, r0, #32
 8015dae:	2b04      	cmp	r3, #4
 8015db0:	dd6b      	ble.n	8015e8a <_dtoa_r+0x8e2>
 8015db2:	9b08      	ldr	r3, [sp, #32]
 8015db4:	f1c0 001c 	rsb	r0, r0, #28
 8015db8:	4403      	add	r3, r0
 8015dba:	4480      	add	r8, r0
 8015dbc:	4406      	add	r6, r0
 8015dbe:	9308      	str	r3, [sp, #32]
 8015dc0:	f1b8 0f00 	cmp.w	r8, #0
 8015dc4:	dd05      	ble.n	8015dd2 <_dtoa_r+0x82a>
 8015dc6:	4649      	mov	r1, r9
 8015dc8:	4642      	mov	r2, r8
 8015dca:	4658      	mov	r0, fp
 8015dcc:	f000 fc52 	bl	8016674 <__lshift>
 8015dd0:	4681      	mov	r9, r0
 8015dd2:	9b08      	ldr	r3, [sp, #32]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	dd05      	ble.n	8015de4 <_dtoa_r+0x83c>
 8015dd8:	4621      	mov	r1, r4
 8015dda:	461a      	mov	r2, r3
 8015ddc:	4658      	mov	r0, fp
 8015dde:	f000 fc49 	bl	8016674 <__lshift>
 8015de2:	4604      	mov	r4, r0
 8015de4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d059      	beq.n	8015e9e <_dtoa_r+0x8f6>
 8015dea:	4621      	mov	r1, r4
 8015dec:	4648      	mov	r0, r9
 8015dee:	f000 fcad 	bl	801674c <__mcmp>
 8015df2:	2800      	cmp	r0, #0
 8015df4:	da53      	bge.n	8015e9e <_dtoa_r+0x8f6>
 8015df6:	1e7b      	subs	r3, r7, #1
 8015df8:	9304      	str	r3, [sp, #16]
 8015dfa:	4649      	mov	r1, r9
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	220a      	movs	r2, #10
 8015e00:	4658      	mov	r0, fp
 8015e02:	f000 fa41 	bl	8016288 <__multadd>
 8015e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e08:	4681      	mov	r9, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	f000 8172 	beq.w	80160f4 <_dtoa_r+0xb4c>
 8015e10:	2300      	movs	r3, #0
 8015e12:	4629      	mov	r1, r5
 8015e14:	220a      	movs	r2, #10
 8015e16:	4658      	mov	r0, fp
 8015e18:	f000 fa36 	bl	8016288 <__multadd>
 8015e1c:	9b00      	ldr	r3, [sp, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	4605      	mov	r5, r0
 8015e22:	dc67      	bgt.n	8015ef4 <_dtoa_r+0x94c>
 8015e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e26:	2b02      	cmp	r3, #2
 8015e28:	dc41      	bgt.n	8015eae <_dtoa_r+0x906>
 8015e2a:	e063      	b.n	8015ef4 <_dtoa_r+0x94c>
 8015e2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015e2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015e32:	e746      	b.n	8015cc2 <_dtoa_r+0x71a>
 8015e34:	9b07      	ldr	r3, [sp, #28]
 8015e36:	1e5c      	subs	r4, r3, #1
 8015e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e3a:	42a3      	cmp	r3, r4
 8015e3c:	bfbf      	itttt	lt
 8015e3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015e40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015e42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015e44:	1ae3      	sublt	r3, r4, r3
 8015e46:	bfb4      	ite	lt
 8015e48:	18d2      	addlt	r2, r2, r3
 8015e4a:	1b1c      	subge	r4, r3, r4
 8015e4c:	9b07      	ldr	r3, [sp, #28]
 8015e4e:	bfbc      	itt	lt
 8015e50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015e52:	2400      	movlt	r4, #0
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	bfb5      	itete	lt
 8015e58:	eba8 0603 	sublt.w	r6, r8, r3
 8015e5c:	9b07      	ldrge	r3, [sp, #28]
 8015e5e:	2300      	movlt	r3, #0
 8015e60:	4646      	movge	r6, r8
 8015e62:	e730      	b.n	8015cc6 <_dtoa_r+0x71e>
 8015e64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015e66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015e68:	4646      	mov	r6, r8
 8015e6a:	e735      	b.n	8015cd8 <_dtoa_r+0x730>
 8015e6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015e6e:	e75c      	b.n	8015d2a <_dtoa_r+0x782>
 8015e70:	2300      	movs	r3, #0
 8015e72:	e788      	b.n	8015d86 <_dtoa_r+0x7de>
 8015e74:	3fe00000 	.word	0x3fe00000
 8015e78:	40240000 	.word	0x40240000
 8015e7c:	40140000 	.word	0x40140000
 8015e80:	9b02      	ldr	r3, [sp, #8]
 8015e82:	e780      	b.n	8015d86 <_dtoa_r+0x7de>
 8015e84:	2300      	movs	r3, #0
 8015e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e88:	e782      	b.n	8015d90 <_dtoa_r+0x7e8>
 8015e8a:	d099      	beq.n	8015dc0 <_dtoa_r+0x818>
 8015e8c:	9a08      	ldr	r2, [sp, #32]
 8015e8e:	331c      	adds	r3, #28
 8015e90:	441a      	add	r2, r3
 8015e92:	4498      	add	r8, r3
 8015e94:	441e      	add	r6, r3
 8015e96:	9208      	str	r2, [sp, #32]
 8015e98:	e792      	b.n	8015dc0 <_dtoa_r+0x818>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	e7f6      	b.n	8015e8c <_dtoa_r+0x8e4>
 8015e9e:	9b07      	ldr	r3, [sp, #28]
 8015ea0:	9704      	str	r7, [sp, #16]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	dc20      	bgt.n	8015ee8 <_dtoa_r+0x940>
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	dd1e      	ble.n	8015eec <_dtoa_r+0x944>
 8015eae:	9b00      	ldr	r3, [sp, #0]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f47f aec0 	bne.w	8015c36 <_dtoa_r+0x68e>
 8015eb6:	4621      	mov	r1, r4
 8015eb8:	2205      	movs	r2, #5
 8015eba:	4658      	mov	r0, fp
 8015ebc:	f000 f9e4 	bl	8016288 <__multadd>
 8015ec0:	4601      	mov	r1, r0
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	4648      	mov	r0, r9
 8015ec6:	f000 fc41 	bl	801674c <__mcmp>
 8015eca:	2800      	cmp	r0, #0
 8015ecc:	f77f aeb3 	ble.w	8015c36 <_dtoa_r+0x68e>
 8015ed0:	4656      	mov	r6, sl
 8015ed2:	2331      	movs	r3, #49	@ 0x31
 8015ed4:	f806 3b01 	strb.w	r3, [r6], #1
 8015ed8:	9b04      	ldr	r3, [sp, #16]
 8015eda:	3301      	adds	r3, #1
 8015edc:	9304      	str	r3, [sp, #16]
 8015ede:	e6ae      	b.n	8015c3e <_dtoa_r+0x696>
 8015ee0:	9c07      	ldr	r4, [sp, #28]
 8015ee2:	9704      	str	r7, [sp, #16]
 8015ee4:	4625      	mov	r5, r4
 8015ee6:	e7f3      	b.n	8015ed0 <_dtoa_r+0x928>
 8015ee8:	9b07      	ldr	r3, [sp, #28]
 8015eea:	9300      	str	r3, [sp, #0]
 8015eec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f000 8104 	beq.w	80160fc <_dtoa_r+0xb54>
 8015ef4:	2e00      	cmp	r6, #0
 8015ef6:	dd05      	ble.n	8015f04 <_dtoa_r+0x95c>
 8015ef8:	4629      	mov	r1, r5
 8015efa:	4632      	mov	r2, r6
 8015efc:	4658      	mov	r0, fp
 8015efe:	f000 fbb9 	bl	8016674 <__lshift>
 8015f02:	4605      	mov	r5, r0
 8015f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d05a      	beq.n	8015fc0 <_dtoa_r+0xa18>
 8015f0a:	6869      	ldr	r1, [r5, #4]
 8015f0c:	4658      	mov	r0, fp
 8015f0e:	f000 f959 	bl	80161c4 <_Balloc>
 8015f12:	4606      	mov	r6, r0
 8015f14:	b928      	cbnz	r0, 8015f22 <_dtoa_r+0x97a>
 8015f16:	4b84      	ldr	r3, [pc, #528]	@ (8016128 <_dtoa_r+0xb80>)
 8015f18:	4602      	mov	r2, r0
 8015f1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015f1e:	f7ff bb5a 	b.w	80155d6 <_dtoa_r+0x2e>
 8015f22:	692a      	ldr	r2, [r5, #16]
 8015f24:	3202      	adds	r2, #2
 8015f26:	0092      	lsls	r2, r2, #2
 8015f28:	f105 010c 	add.w	r1, r5, #12
 8015f2c:	300c      	adds	r0, #12
 8015f2e:	f7ff fa9e 	bl	801546e <memcpy>
 8015f32:	2201      	movs	r2, #1
 8015f34:	4631      	mov	r1, r6
 8015f36:	4658      	mov	r0, fp
 8015f38:	f000 fb9c 	bl	8016674 <__lshift>
 8015f3c:	f10a 0301 	add.w	r3, sl, #1
 8015f40:	9307      	str	r3, [sp, #28]
 8015f42:	9b00      	ldr	r3, [sp, #0]
 8015f44:	4453      	add	r3, sl
 8015f46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f48:	9b02      	ldr	r3, [sp, #8]
 8015f4a:	f003 0301 	and.w	r3, r3, #1
 8015f4e:	462f      	mov	r7, r5
 8015f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f52:	4605      	mov	r5, r0
 8015f54:	9b07      	ldr	r3, [sp, #28]
 8015f56:	4621      	mov	r1, r4
 8015f58:	3b01      	subs	r3, #1
 8015f5a:	4648      	mov	r0, r9
 8015f5c:	9300      	str	r3, [sp, #0]
 8015f5e:	f7ff fa9b 	bl	8015498 <quorem>
 8015f62:	4639      	mov	r1, r7
 8015f64:	9002      	str	r0, [sp, #8]
 8015f66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015f6a:	4648      	mov	r0, r9
 8015f6c:	f000 fbee 	bl	801674c <__mcmp>
 8015f70:	462a      	mov	r2, r5
 8015f72:	9008      	str	r0, [sp, #32]
 8015f74:	4621      	mov	r1, r4
 8015f76:	4658      	mov	r0, fp
 8015f78:	f000 fc04 	bl	8016784 <__mdiff>
 8015f7c:	68c2      	ldr	r2, [r0, #12]
 8015f7e:	4606      	mov	r6, r0
 8015f80:	bb02      	cbnz	r2, 8015fc4 <_dtoa_r+0xa1c>
 8015f82:	4601      	mov	r1, r0
 8015f84:	4648      	mov	r0, r9
 8015f86:	f000 fbe1 	bl	801674c <__mcmp>
 8015f8a:	4602      	mov	r2, r0
 8015f8c:	4631      	mov	r1, r6
 8015f8e:	4658      	mov	r0, fp
 8015f90:	920e      	str	r2, [sp, #56]	@ 0x38
 8015f92:	f000 f957 	bl	8016244 <_Bfree>
 8015f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f9a:	9e07      	ldr	r6, [sp, #28]
 8015f9c:	ea43 0102 	orr.w	r1, r3, r2
 8015fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015fa2:	4319      	orrs	r1, r3
 8015fa4:	d110      	bne.n	8015fc8 <_dtoa_r+0xa20>
 8015fa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015faa:	d029      	beq.n	8016000 <_dtoa_r+0xa58>
 8015fac:	9b08      	ldr	r3, [sp, #32]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	dd02      	ble.n	8015fb8 <_dtoa_r+0xa10>
 8015fb2:	9b02      	ldr	r3, [sp, #8]
 8015fb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015fb8:	9b00      	ldr	r3, [sp, #0]
 8015fba:	f883 8000 	strb.w	r8, [r3]
 8015fbe:	e63f      	b.n	8015c40 <_dtoa_r+0x698>
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	e7bb      	b.n	8015f3c <_dtoa_r+0x994>
 8015fc4:	2201      	movs	r2, #1
 8015fc6:	e7e1      	b.n	8015f8c <_dtoa_r+0x9e4>
 8015fc8:	9b08      	ldr	r3, [sp, #32]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	db04      	blt.n	8015fd8 <_dtoa_r+0xa30>
 8015fce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015fd0:	430b      	orrs	r3, r1
 8015fd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015fd4:	430b      	orrs	r3, r1
 8015fd6:	d120      	bne.n	801601a <_dtoa_r+0xa72>
 8015fd8:	2a00      	cmp	r2, #0
 8015fda:	dded      	ble.n	8015fb8 <_dtoa_r+0xa10>
 8015fdc:	4649      	mov	r1, r9
 8015fde:	2201      	movs	r2, #1
 8015fe0:	4658      	mov	r0, fp
 8015fe2:	f000 fb47 	bl	8016674 <__lshift>
 8015fe6:	4621      	mov	r1, r4
 8015fe8:	4681      	mov	r9, r0
 8015fea:	f000 fbaf 	bl	801674c <__mcmp>
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	dc03      	bgt.n	8015ffa <_dtoa_r+0xa52>
 8015ff2:	d1e1      	bne.n	8015fb8 <_dtoa_r+0xa10>
 8015ff4:	f018 0f01 	tst.w	r8, #1
 8015ff8:	d0de      	beq.n	8015fb8 <_dtoa_r+0xa10>
 8015ffa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015ffe:	d1d8      	bne.n	8015fb2 <_dtoa_r+0xa0a>
 8016000:	9a00      	ldr	r2, [sp, #0]
 8016002:	2339      	movs	r3, #57	@ 0x39
 8016004:	7013      	strb	r3, [r2, #0]
 8016006:	4633      	mov	r3, r6
 8016008:	461e      	mov	r6, r3
 801600a:	3b01      	subs	r3, #1
 801600c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016010:	2a39      	cmp	r2, #57	@ 0x39
 8016012:	d052      	beq.n	80160ba <_dtoa_r+0xb12>
 8016014:	3201      	adds	r2, #1
 8016016:	701a      	strb	r2, [r3, #0]
 8016018:	e612      	b.n	8015c40 <_dtoa_r+0x698>
 801601a:	2a00      	cmp	r2, #0
 801601c:	dd07      	ble.n	801602e <_dtoa_r+0xa86>
 801601e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016022:	d0ed      	beq.n	8016000 <_dtoa_r+0xa58>
 8016024:	9a00      	ldr	r2, [sp, #0]
 8016026:	f108 0301 	add.w	r3, r8, #1
 801602a:	7013      	strb	r3, [r2, #0]
 801602c:	e608      	b.n	8015c40 <_dtoa_r+0x698>
 801602e:	9b07      	ldr	r3, [sp, #28]
 8016030:	9a07      	ldr	r2, [sp, #28]
 8016032:	f803 8c01 	strb.w	r8, [r3, #-1]
 8016036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016038:	4293      	cmp	r3, r2
 801603a:	d028      	beq.n	801608e <_dtoa_r+0xae6>
 801603c:	4649      	mov	r1, r9
 801603e:	2300      	movs	r3, #0
 8016040:	220a      	movs	r2, #10
 8016042:	4658      	mov	r0, fp
 8016044:	f000 f920 	bl	8016288 <__multadd>
 8016048:	42af      	cmp	r7, r5
 801604a:	4681      	mov	r9, r0
 801604c:	f04f 0300 	mov.w	r3, #0
 8016050:	f04f 020a 	mov.w	r2, #10
 8016054:	4639      	mov	r1, r7
 8016056:	4658      	mov	r0, fp
 8016058:	d107      	bne.n	801606a <_dtoa_r+0xac2>
 801605a:	f000 f915 	bl	8016288 <__multadd>
 801605e:	4607      	mov	r7, r0
 8016060:	4605      	mov	r5, r0
 8016062:	9b07      	ldr	r3, [sp, #28]
 8016064:	3301      	adds	r3, #1
 8016066:	9307      	str	r3, [sp, #28]
 8016068:	e774      	b.n	8015f54 <_dtoa_r+0x9ac>
 801606a:	f000 f90d 	bl	8016288 <__multadd>
 801606e:	4629      	mov	r1, r5
 8016070:	4607      	mov	r7, r0
 8016072:	2300      	movs	r3, #0
 8016074:	220a      	movs	r2, #10
 8016076:	4658      	mov	r0, fp
 8016078:	f000 f906 	bl	8016288 <__multadd>
 801607c:	4605      	mov	r5, r0
 801607e:	e7f0      	b.n	8016062 <_dtoa_r+0xaba>
 8016080:	9b00      	ldr	r3, [sp, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	bfcc      	ite	gt
 8016086:	461e      	movgt	r6, r3
 8016088:	2601      	movle	r6, #1
 801608a:	4456      	add	r6, sl
 801608c:	2700      	movs	r7, #0
 801608e:	4649      	mov	r1, r9
 8016090:	2201      	movs	r2, #1
 8016092:	4658      	mov	r0, fp
 8016094:	f000 faee 	bl	8016674 <__lshift>
 8016098:	4621      	mov	r1, r4
 801609a:	4681      	mov	r9, r0
 801609c:	f000 fb56 	bl	801674c <__mcmp>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	dcb0      	bgt.n	8016006 <_dtoa_r+0xa5e>
 80160a4:	d102      	bne.n	80160ac <_dtoa_r+0xb04>
 80160a6:	f018 0f01 	tst.w	r8, #1
 80160aa:	d1ac      	bne.n	8016006 <_dtoa_r+0xa5e>
 80160ac:	4633      	mov	r3, r6
 80160ae:	461e      	mov	r6, r3
 80160b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80160b4:	2a30      	cmp	r2, #48	@ 0x30
 80160b6:	d0fa      	beq.n	80160ae <_dtoa_r+0xb06>
 80160b8:	e5c2      	b.n	8015c40 <_dtoa_r+0x698>
 80160ba:	459a      	cmp	sl, r3
 80160bc:	d1a4      	bne.n	8016008 <_dtoa_r+0xa60>
 80160be:	9b04      	ldr	r3, [sp, #16]
 80160c0:	3301      	adds	r3, #1
 80160c2:	9304      	str	r3, [sp, #16]
 80160c4:	2331      	movs	r3, #49	@ 0x31
 80160c6:	f88a 3000 	strb.w	r3, [sl]
 80160ca:	e5b9      	b.n	8015c40 <_dtoa_r+0x698>
 80160cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80160ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801612c <_dtoa_r+0xb84>
 80160d2:	b11b      	cbz	r3, 80160dc <_dtoa_r+0xb34>
 80160d4:	f10a 0308 	add.w	r3, sl, #8
 80160d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80160da:	6013      	str	r3, [r2, #0]
 80160dc:	4650      	mov	r0, sl
 80160de:	b019      	add	sp, #100	@ 0x64
 80160e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160e6:	2b01      	cmp	r3, #1
 80160e8:	f77f ae37 	ble.w	8015d5a <_dtoa_r+0x7b2>
 80160ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80160f0:	2001      	movs	r0, #1
 80160f2:	e655      	b.n	8015da0 <_dtoa_r+0x7f8>
 80160f4:	9b00      	ldr	r3, [sp, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	f77f aed6 	ble.w	8015ea8 <_dtoa_r+0x900>
 80160fc:	4656      	mov	r6, sl
 80160fe:	4621      	mov	r1, r4
 8016100:	4648      	mov	r0, r9
 8016102:	f7ff f9c9 	bl	8015498 <quorem>
 8016106:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801610a:	f806 8b01 	strb.w	r8, [r6], #1
 801610e:	9b00      	ldr	r3, [sp, #0]
 8016110:	eba6 020a 	sub.w	r2, r6, sl
 8016114:	4293      	cmp	r3, r2
 8016116:	ddb3      	ble.n	8016080 <_dtoa_r+0xad8>
 8016118:	4649      	mov	r1, r9
 801611a:	2300      	movs	r3, #0
 801611c:	220a      	movs	r2, #10
 801611e:	4658      	mov	r0, fp
 8016120:	f000 f8b2 	bl	8016288 <__multadd>
 8016124:	4681      	mov	r9, r0
 8016126:	e7ea      	b.n	80160fe <_dtoa_r+0xb56>
 8016128:	08019b01 	.word	0x08019b01
 801612c:	08019a85 	.word	0x08019a85

08016130 <_free_r>:
 8016130:	b538      	push	{r3, r4, r5, lr}
 8016132:	4605      	mov	r5, r0
 8016134:	2900      	cmp	r1, #0
 8016136:	d041      	beq.n	80161bc <_free_r+0x8c>
 8016138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801613c:	1f0c      	subs	r4, r1, #4
 801613e:	2b00      	cmp	r3, #0
 8016140:	bfb8      	it	lt
 8016142:	18e4      	addlt	r4, r4, r3
 8016144:	f7fe f8d4 	bl	80142f0 <__malloc_lock>
 8016148:	4a1d      	ldr	r2, [pc, #116]	@ (80161c0 <_free_r+0x90>)
 801614a:	6813      	ldr	r3, [r2, #0]
 801614c:	b933      	cbnz	r3, 801615c <_free_r+0x2c>
 801614e:	6063      	str	r3, [r4, #4]
 8016150:	6014      	str	r4, [r2, #0]
 8016152:	4628      	mov	r0, r5
 8016154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016158:	f7fe b8d0 	b.w	80142fc <__malloc_unlock>
 801615c:	42a3      	cmp	r3, r4
 801615e:	d908      	bls.n	8016172 <_free_r+0x42>
 8016160:	6820      	ldr	r0, [r4, #0]
 8016162:	1821      	adds	r1, r4, r0
 8016164:	428b      	cmp	r3, r1
 8016166:	bf01      	itttt	eq
 8016168:	6819      	ldreq	r1, [r3, #0]
 801616a:	685b      	ldreq	r3, [r3, #4]
 801616c:	1809      	addeq	r1, r1, r0
 801616e:	6021      	streq	r1, [r4, #0]
 8016170:	e7ed      	b.n	801614e <_free_r+0x1e>
 8016172:	461a      	mov	r2, r3
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	b10b      	cbz	r3, 801617c <_free_r+0x4c>
 8016178:	42a3      	cmp	r3, r4
 801617a:	d9fa      	bls.n	8016172 <_free_r+0x42>
 801617c:	6811      	ldr	r1, [r2, #0]
 801617e:	1850      	adds	r0, r2, r1
 8016180:	42a0      	cmp	r0, r4
 8016182:	d10b      	bne.n	801619c <_free_r+0x6c>
 8016184:	6820      	ldr	r0, [r4, #0]
 8016186:	4401      	add	r1, r0
 8016188:	1850      	adds	r0, r2, r1
 801618a:	4283      	cmp	r3, r0
 801618c:	6011      	str	r1, [r2, #0]
 801618e:	d1e0      	bne.n	8016152 <_free_r+0x22>
 8016190:	6818      	ldr	r0, [r3, #0]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	6053      	str	r3, [r2, #4]
 8016196:	4408      	add	r0, r1
 8016198:	6010      	str	r0, [r2, #0]
 801619a:	e7da      	b.n	8016152 <_free_r+0x22>
 801619c:	d902      	bls.n	80161a4 <_free_r+0x74>
 801619e:	230c      	movs	r3, #12
 80161a0:	602b      	str	r3, [r5, #0]
 80161a2:	e7d6      	b.n	8016152 <_free_r+0x22>
 80161a4:	6820      	ldr	r0, [r4, #0]
 80161a6:	1821      	adds	r1, r4, r0
 80161a8:	428b      	cmp	r3, r1
 80161aa:	bf04      	itt	eq
 80161ac:	6819      	ldreq	r1, [r3, #0]
 80161ae:	685b      	ldreq	r3, [r3, #4]
 80161b0:	6063      	str	r3, [r4, #4]
 80161b2:	bf04      	itt	eq
 80161b4:	1809      	addeq	r1, r1, r0
 80161b6:	6021      	streq	r1, [r4, #0]
 80161b8:	6054      	str	r4, [r2, #4]
 80161ba:	e7ca      	b.n	8016152 <_free_r+0x22>
 80161bc:	bd38      	pop	{r3, r4, r5, pc}
 80161be:	bf00      	nop
 80161c0:	20000a6c 	.word	0x20000a6c

080161c4 <_Balloc>:
 80161c4:	b570      	push	{r4, r5, r6, lr}
 80161c6:	69c6      	ldr	r6, [r0, #28]
 80161c8:	4604      	mov	r4, r0
 80161ca:	460d      	mov	r5, r1
 80161cc:	b976      	cbnz	r6, 80161ec <_Balloc+0x28>
 80161ce:	2010      	movs	r0, #16
 80161d0:	f7fd ffdc 	bl	801418c <malloc>
 80161d4:	4602      	mov	r2, r0
 80161d6:	61e0      	str	r0, [r4, #28]
 80161d8:	b920      	cbnz	r0, 80161e4 <_Balloc+0x20>
 80161da:	4b18      	ldr	r3, [pc, #96]	@ (801623c <_Balloc+0x78>)
 80161dc:	4818      	ldr	r0, [pc, #96]	@ (8016240 <_Balloc+0x7c>)
 80161de:	216b      	movs	r1, #107	@ 0x6b
 80161e0:	f7fd ffa4 	bl	801412c <__assert_func>
 80161e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80161e8:	6006      	str	r6, [r0, #0]
 80161ea:	60c6      	str	r6, [r0, #12]
 80161ec:	69e6      	ldr	r6, [r4, #28]
 80161ee:	68f3      	ldr	r3, [r6, #12]
 80161f0:	b183      	cbz	r3, 8016214 <_Balloc+0x50>
 80161f2:	69e3      	ldr	r3, [r4, #28]
 80161f4:	68db      	ldr	r3, [r3, #12]
 80161f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80161fa:	b9b8      	cbnz	r0, 801622c <_Balloc+0x68>
 80161fc:	2101      	movs	r1, #1
 80161fe:	fa01 f605 	lsl.w	r6, r1, r5
 8016202:	1d72      	adds	r2, r6, #5
 8016204:	0092      	lsls	r2, r2, #2
 8016206:	4620      	mov	r0, r4
 8016208:	f001 ff0a 	bl	8018020 <_calloc_r>
 801620c:	b160      	cbz	r0, 8016228 <_Balloc+0x64>
 801620e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016212:	e00e      	b.n	8016232 <_Balloc+0x6e>
 8016214:	2221      	movs	r2, #33	@ 0x21
 8016216:	2104      	movs	r1, #4
 8016218:	4620      	mov	r0, r4
 801621a:	f001 ff01 	bl	8018020 <_calloc_r>
 801621e:	69e3      	ldr	r3, [r4, #28]
 8016220:	60f0      	str	r0, [r6, #12]
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d1e4      	bne.n	80161f2 <_Balloc+0x2e>
 8016228:	2000      	movs	r0, #0
 801622a:	bd70      	pop	{r4, r5, r6, pc}
 801622c:	6802      	ldr	r2, [r0, #0]
 801622e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016232:	2300      	movs	r3, #0
 8016234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016238:	e7f7      	b.n	801622a <_Balloc+0x66>
 801623a:	bf00      	nop
 801623c:	08019a92 	.word	0x08019a92
 8016240:	08019b12 	.word	0x08019b12

08016244 <_Bfree>:
 8016244:	b570      	push	{r4, r5, r6, lr}
 8016246:	69c6      	ldr	r6, [r0, #28]
 8016248:	4605      	mov	r5, r0
 801624a:	460c      	mov	r4, r1
 801624c:	b976      	cbnz	r6, 801626c <_Bfree+0x28>
 801624e:	2010      	movs	r0, #16
 8016250:	f7fd ff9c 	bl	801418c <malloc>
 8016254:	4602      	mov	r2, r0
 8016256:	61e8      	str	r0, [r5, #28]
 8016258:	b920      	cbnz	r0, 8016264 <_Bfree+0x20>
 801625a:	4b09      	ldr	r3, [pc, #36]	@ (8016280 <_Bfree+0x3c>)
 801625c:	4809      	ldr	r0, [pc, #36]	@ (8016284 <_Bfree+0x40>)
 801625e:	218f      	movs	r1, #143	@ 0x8f
 8016260:	f7fd ff64 	bl	801412c <__assert_func>
 8016264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016268:	6006      	str	r6, [r0, #0]
 801626a:	60c6      	str	r6, [r0, #12]
 801626c:	b13c      	cbz	r4, 801627e <_Bfree+0x3a>
 801626e:	69eb      	ldr	r3, [r5, #28]
 8016270:	6862      	ldr	r2, [r4, #4]
 8016272:	68db      	ldr	r3, [r3, #12]
 8016274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016278:	6021      	str	r1, [r4, #0]
 801627a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801627e:	bd70      	pop	{r4, r5, r6, pc}
 8016280:	08019a92 	.word	0x08019a92
 8016284:	08019b12 	.word	0x08019b12

08016288 <__multadd>:
 8016288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801628c:	690d      	ldr	r5, [r1, #16]
 801628e:	4607      	mov	r7, r0
 8016290:	460c      	mov	r4, r1
 8016292:	461e      	mov	r6, r3
 8016294:	f101 0c14 	add.w	ip, r1, #20
 8016298:	2000      	movs	r0, #0
 801629a:	f8dc 3000 	ldr.w	r3, [ip]
 801629e:	b299      	uxth	r1, r3
 80162a0:	fb02 6101 	mla	r1, r2, r1, r6
 80162a4:	0c1e      	lsrs	r6, r3, #16
 80162a6:	0c0b      	lsrs	r3, r1, #16
 80162a8:	fb02 3306 	mla	r3, r2, r6, r3
 80162ac:	b289      	uxth	r1, r1
 80162ae:	3001      	adds	r0, #1
 80162b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80162b4:	4285      	cmp	r5, r0
 80162b6:	f84c 1b04 	str.w	r1, [ip], #4
 80162ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80162be:	dcec      	bgt.n	801629a <__multadd+0x12>
 80162c0:	b30e      	cbz	r6, 8016306 <__multadd+0x7e>
 80162c2:	68a3      	ldr	r3, [r4, #8]
 80162c4:	42ab      	cmp	r3, r5
 80162c6:	dc19      	bgt.n	80162fc <__multadd+0x74>
 80162c8:	6861      	ldr	r1, [r4, #4]
 80162ca:	4638      	mov	r0, r7
 80162cc:	3101      	adds	r1, #1
 80162ce:	f7ff ff79 	bl	80161c4 <_Balloc>
 80162d2:	4680      	mov	r8, r0
 80162d4:	b928      	cbnz	r0, 80162e2 <__multadd+0x5a>
 80162d6:	4602      	mov	r2, r0
 80162d8:	4b0c      	ldr	r3, [pc, #48]	@ (801630c <__multadd+0x84>)
 80162da:	480d      	ldr	r0, [pc, #52]	@ (8016310 <__multadd+0x88>)
 80162dc:	21ba      	movs	r1, #186	@ 0xba
 80162de:	f7fd ff25 	bl	801412c <__assert_func>
 80162e2:	6922      	ldr	r2, [r4, #16]
 80162e4:	3202      	adds	r2, #2
 80162e6:	f104 010c 	add.w	r1, r4, #12
 80162ea:	0092      	lsls	r2, r2, #2
 80162ec:	300c      	adds	r0, #12
 80162ee:	f7ff f8be 	bl	801546e <memcpy>
 80162f2:	4621      	mov	r1, r4
 80162f4:	4638      	mov	r0, r7
 80162f6:	f7ff ffa5 	bl	8016244 <_Bfree>
 80162fa:	4644      	mov	r4, r8
 80162fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016300:	3501      	adds	r5, #1
 8016302:	615e      	str	r6, [r3, #20]
 8016304:	6125      	str	r5, [r4, #16]
 8016306:	4620      	mov	r0, r4
 8016308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801630c:	08019b01 	.word	0x08019b01
 8016310:	08019b12 	.word	0x08019b12

08016314 <__s2b>:
 8016314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016318:	460c      	mov	r4, r1
 801631a:	4615      	mov	r5, r2
 801631c:	461f      	mov	r7, r3
 801631e:	2209      	movs	r2, #9
 8016320:	3308      	adds	r3, #8
 8016322:	4606      	mov	r6, r0
 8016324:	fb93 f3f2 	sdiv	r3, r3, r2
 8016328:	2100      	movs	r1, #0
 801632a:	2201      	movs	r2, #1
 801632c:	429a      	cmp	r2, r3
 801632e:	db09      	blt.n	8016344 <__s2b+0x30>
 8016330:	4630      	mov	r0, r6
 8016332:	f7ff ff47 	bl	80161c4 <_Balloc>
 8016336:	b940      	cbnz	r0, 801634a <__s2b+0x36>
 8016338:	4602      	mov	r2, r0
 801633a:	4b19      	ldr	r3, [pc, #100]	@ (80163a0 <__s2b+0x8c>)
 801633c:	4819      	ldr	r0, [pc, #100]	@ (80163a4 <__s2b+0x90>)
 801633e:	21d3      	movs	r1, #211	@ 0xd3
 8016340:	f7fd fef4 	bl	801412c <__assert_func>
 8016344:	0052      	lsls	r2, r2, #1
 8016346:	3101      	adds	r1, #1
 8016348:	e7f0      	b.n	801632c <__s2b+0x18>
 801634a:	9b08      	ldr	r3, [sp, #32]
 801634c:	6143      	str	r3, [r0, #20]
 801634e:	2d09      	cmp	r5, #9
 8016350:	f04f 0301 	mov.w	r3, #1
 8016354:	6103      	str	r3, [r0, #16]
 8016356:	dd16      	ble.n	8016386 <__s2b+0x72>
 8016358:	f104 0909 	add.w	r9, r4, #9
 801635c:	46c8      	mov	r8, r9
 801635e:	442c      	add	r4, r5
 8016360:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016364:	4601      	mov	r1, r0
 8016366:	3b30      	subs	r3, #48	@ 0x30
 8016368:	220a      	movs	r2, #10
 801636a:	4630      	mov	r0, r6
 801636c:	f7ff ff8c 	bl	8016288 <__multadd>
 8016370:	45a0      	cmp	r8, r4
 8016372:	d1f5      	bne.n	8016360 <__s2b+0x4c>
 8016374:	f1a5 0408 	sub.w	r4, r5, #8
 8016378:	444c      	add	r4, r9
 801637a:	1b2d      	subs	r5, r5, r4
 801637c:	1963      	adds	r3, r4, r5
 801637e:	42bb      	cmp	r3, r7
 8016380:	db04      	blt.n	801638c <__s2b+0x78>
 8016382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016386:	340a      	adds	r4, #10
 8016388:	2509      	movs	r5, #9
 801638a:	e7f6      	b.n	801637a <__s2b+0x66>
 801638c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016390:	4601      	mov	r1, r0
 8016392:	3b30      	subs	r3, #48	@ 0x30
 8016394:	220a      	movs	r2, #10
 8016396:	4630      	mov	r0, r6
 8016398:	f7ff ff76 	bl	8016288 <__multadd>
 801639c:	e7ee      	b.n	801637c <__s2b+0x68>
 801639e:	bf00      	nop
 80163a0:	08019b01 	.word	0x08019b01
 80163a4:	08019b12 	.word	0x08019b12

080163a8 <__hi0bits>:
 80163a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80163ac:	4603      	mov	r3, r0
 80163ae:	bf36      	itet	cc
 80163b0:	0403      	lslcc	r3, r0, #16
 80163b2:	2000      	movcs	r0, #0
 80163b4:	2010      	movcc	r0, #16
 80163b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80163ba:	bf3c      	itt	cc
 80163bc:	021b      	lslcc	r3, r3, #8
 80163be:	3008      	addcc	r0, #8
 80163c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80163c4:	bf3c      	itt	cc
 80163c6:	011b      	lslcc	r3, r3, #4
 80163c8:	3004      	addcc	r0, #4
 80163ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80163ce:	bf3c      	itt	cc
 80163d0:	009b      	lslcc	r3, r3, #2
 80163d2:	3002      	addcc	r0, #2
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	db05      	blt.n	80163e4 <__hi0bits+0x3c>
 80163d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80163dc:	f100 0001 	add.w	r0, r0, #1
 80163e0:	bf08      	it	eq
 80163e2:	2020      	moveq	r0, #32
 80163e4:	4770      	bx	lr

080163e6 <__lo0bits>:
 80163e6:	6803      	ldr	r3, [r0, #0]
 80163e8:	4602      	mov	r2, r0
 80163ea:	f013 0007 	ands.w	r0, r3, #7
 80163ee:	d00b      	beq.n	8016408 <__lo0bits+0x22>
 80163f0:	07d9      	lsls	r1, r3, #31
 80163f2:	d421      	bmi.n	8016438 <__lo0bits+0x52>
 80163f4:	0798      	lsls	r0, r3, #30
 80163f6:	bf49      	itett	mi
 80163f8:	085b      	lsrmi	r3, r3, #1
 80163fa:	089b      	lsrpl	r3, r3, #2
 80163fc:	2001      	movmi	r0, #1
 80163fe:	6013      	strmi	r3, [r2, #0]
 8016400:	bf5c      	itt	pl
 8016402:	6013      	strpl	r3, [r2, #0]
 8016404:	2002      	movpl	r0, #2
 8016406:	4770      	bx	lr
 8016408:	b299      	uxth	r1, r3
 801640a:	b909      	cbnz	r1, 8016410 <__lo0bits+0x2a>
 801640c:	0c1b      	lsrs	r3, r3, #16
 801640e:	2010      	movs	r0, #16
 8016410:	b2d9      	uxtb	r1, r3
 8016412:	b909      	cbnz	r1, 8016418 <__lo0bits+0x32>
 8016414:	3008      	adds	r0, #8
 8016416:	0a1b      	lsrs	r3, r3, #8
 8016418:	0719      	lsls	r1, r3, #28
 801641a:	bf04      	itt	eq
 801641c:	091b      	lsreq	r3, r3, #4
 801641e:	3004      	addeq	r0, #4
 8016420:	0799      	lsls	r1, r3, #30
 8016422:	bf04      	itt	eq
 8016424:	089b      	lsreq	r3, r3, #2
 8016426:	3002      	addeq	r0, #2
 8016428:	07d9      	lsls	r1, r3, #31
 801642a:	d403      	bmi.n	8016434 <__lo0bits+0x4e>
 801642c:	085b      	lsrs	r3, r3, #1
 801642e:	f100 0001 	add.w	r0, r0, #1
 8016432:	d003      	beq.n	801643c <__lo0bits+0x56>
 8016434:	6013      	str	r3, [r2, #0]
 8016436:	4770      	bx	lr
 8016438:	2000      	movs	r0, #0
 801643a:	4770      	bx	lr
 801643c:	2020      	movs	r0, #32
 801643e:	4770      	bx	lr

08016440 <__i2b>:
 8016440:	b510      	push	{r4, lr}
 8016442:	460c      	mov	r4, r1
 8016444:	2101      	movs	r1, #1
 8016446:	f7ff febd 	bl	80161c4 <_Balloc>
 801644a:	4602      	mov	r2, r0
 801644c:	b928      	cbnz	r0, 801645a <__i2b+0x1a>
 801644e:	4b05      	ldr	r3, [pc, #20]	@ (8016464 <__i2b+0x24>)
 8016450:	4805      	ldr	r0, [pc, #20]	@ (8016468 <__i2b+0x28>)
 8016452:	f240 1145 	movw	r1, #325	@ 0x145
 8016456:	f7fd fe69 	bl	801412c <__assert_func>
 801645a:	2301      	movs	r3, #1
 801645c:	6144      	str	r4, [r0, #20]
 801645e:	6103      	str	r3, [r0, #16]
 8016460:	bd10      	pop	{r4, pc}
 8016462:	bf00      	nop
 8016464:	08019b01 	.word	0x08019b01
 8016468:	08019b12 	.word	0x08019b12

0801646c <__multiply>:
 801646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016470:	4614      	mov	r4, r2
 8016472:	690a      	ldr	r2, [r1, #16]
 8016474:	6923      	ldr	r3, [r4, #16]
 8016476:	429a      	cmp	r2, r3
 8016478:	bfa8      	it	ge
 801647a:	4623      	movge	r3, r4
 801647c:	460f      	mov	r7, r1
 801647e:	bfa4      	itt	ge
 8016480:	460c      	movge	r4, r1
 8016482:	461f      	movge	r7, r3
 8016484:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016488:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801648c:	68a3      	ldr	r3, [r4, #8]
 801648e:	6861      	ldr	r1, [r4, #4]
 8016490:	eb0a 0609 	add.w	r6, sl, r9
 8016494:	42b3      	cmp	r3, r6
 8016496:	b085      	sub	sp, #20
 8016498:	bfb8      	it	lt
 801649a:	3101      	addlt	r1, #1
 801649c:	f7ff fe92 	bl	80161c4 <_Balloc>
 80164a0:	b930      	cbnz	r0, 80164b0 <__multiply+0x44>
 80164a2:	4602      	mov	r2, r0
 80164a4:	4b44      	ldr	r3, [pc, #272]	@ (80165b8 <__multiply+0x14c>)
 80164a6:	4845      	ldr	r0, [pc, #276]	@ (80165bc <__multiply+0x150>)
 80164a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80164ac:	f7fd fe3e 	bl	801412c <__assert_func>
 80164b0:	f100 0514 	add.w	r5, r0, #20
 80164b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80164b8:	462b      	mov	r3, r5
 80164ba:	2200      	movs	r2, #0
 80164bc:	4543      	cmp	r3, r8
 80164be:	d321      	bcc.n	8016504 <__multiply+0x98>
 80164c0:	f107 0114 	add.w	r1, r7, #20
 80164c4:	f104 0214 	add.w	r2, r4, #20
 80164c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80164cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80164d0:	9302      	str	r3, [sp, #8]
 80164d2:	1b13      	subs	r3, r2, r4
 80164d4:	3b15      	subs	r3, #21
 80164d6:	f023 0303 	bic.w	r3, r3, #3
 80164da:	3304      	adds	r3, #4
 80164dc:	f104 0715 	add.w	r7, r4, #21
 80164e0:	42ba      	cmp	r2, r7
 80164e2:	bf38      	it	cc
 80164e4:	2304      	movcc	r3, #4
 80164e6:	9301      	str	r3, [sp, #4]
 80164e8:	9b02      	ldr	r3, [sp, #8]
 80164ea:	9103      	str	r1, [sp, #12]
 80164ec:	428b      	cmp	r3, r1
 80164ee:	d80c      	bhi.n	801650a <__multiply+0x9e>
 80164f0:	2e00      	cmp	r6, #0
 80164f2:	dd03      	ble.n	80164fc <__multiply+0x90>
 80164f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d05b      	beq.n	80165b4 <__multiply+0x148>
 80164fc:	6106      	str	r6, [r0, #16]
 80164fe:	b005      	add	sp, #20
 8016500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016504:	f843 2b04 	str.w	r2, [r3], #4
 8016508:	e7d8      	b.n	80164bc <__multiply+0x50>
 801650a:	f8b1 a000 	ldrh.w	sl, [r1]
 801650e:	f1ba 0f00 	cmp.w	sl, #0
 8016512:	d024      	beq.n	801655e <__multiply+0xf2>
 8016514:	f104 0e14 	add.w	lr, r4, #20
 8016518:	46a9      	mov	r9, r5
 801651a:	f04f 0c00 	mov.w	ip, #0
 801651e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016522:	f8d9 3000 	ldr.w	r3, [r9]
 8016526:	fa1f fb87 	uxth.w	fp, r7
 801652a:	b29b      	uxth	r3, r3
 801652c:	fb0a 330b 	mla	r3, sl, fp, r3
 8016530:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016534:	f8d9 7000 	ldr.w	r7, [r9]
 8016538:	4463      	add	r3, ip
 801653a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801653e:	fb0a c70b 	mla	r7, sl, fp, ip
 8016542:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016546:	b29b      	uxth	r3, r3
 8016548:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801654c:	4572      	cmp	r2, lr
 801654e:	f849 3b04 	str.w	r3, [r9], #4
 8016552:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016556:	d8e2      	bhi.n	801651e <__multiply+0xb2>
 8016558:	9b01      	ldr	r3, [sp, #4]
 801655a:	f845 c003 	str.w	ip, [r5, r3]
 801655e:	9b03      	ldr	r3, [sp, #12]
 8016560:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016564:	3104      	adds	r1, #4
 8016566:	f1b9 0f00 	cmp.w	r9, #0
 801656a:	d021      	beq.n	80165b0 <__multiply+0x144>
 801656c:	682b      	ldr	r3, [r5, #0]
 801656e:	f104 0c14 	add.w	ip, r4, #20
 8016572:	46ae      	mov	lr, r5
 8016574:	f04f 0a00 	mov.w	sl, #0
 8016578:	f8bc b000 	ldrh.w	fp, [ip]
 801657c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016580:	fb09 770b 	mla	r7, r9, fp, r7
 8016584:	4457      	add	r7, sl
 8016586:	b29b      	uxth	r3, r3
 8016588:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801658c:	f84e 3b04 	str.w	r3, [lr], #4
 8016590:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016598:	f8be 3000 	ldrh.w	r3, [lr]
 801659c:	fb09 330a 	mla	r3, r9, sl, r3
 80165a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80165a4:	4562      	cmp	r2, ip
 80165a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80165aa:	d8e5      	bhi.n	8016578 <__multiply+0x10c>
 80165ac:	9f01      	ldr	r7, [sp, #4]
 80165ae:	51eb      	str	r3, [r5, r7]
 80165b0:	3504      	adds	r5, #4
 80165b2:	e799      	b.n	80164e8 <__multiply+0x7c>
 80165b4:	3e01      	subs	r6, #1
 80165b6:	e79b      	b.n	80164f0 <__multiply+0x84>
 80165b8:	08019b01 	.word	0x08019b01
 80165bc:	08019b12 	.word	0x08019b12

080165c0 <__pow5mult>:
 80165c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c4:	4615      	mov	r5, r2
 80165c6:	f012 0203 	ands.w	r2, r2, #3
 80165ca:	4607      	mov	r7, r0
 80165cc:	460e      	mov	r6, r1
 80165ce:	d007      	beq.n	80165e0 <__pow5mult+0x20>
 80165d0:	4c25      	ldr	r4, [pc, #148]	@ (8016668 <__pow5mult+0xa8>)
 80165d2:	3a01      	subs	r2, #1
 80165d4:	2300      	movs	r3, #0
 80165d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80165da:	f7ff fe55 	bl	8016288 <__multadd>
 80165de:	4606      	mov	r6, r0
 80165e0:	10ad      	asrs	r5, r5, #2
 80165e2:	d03d      	beq.n	8016660 <__pow5mult+0xa0>
 80165e4:	69fc      	ldr	r4, [r7, #28]
 80165e6:	b97c      	cbnz	r4, 8016608 <__pow5mult+0x48>
 80165e8:	2010      	movs	r0, #16
 80165ea:	f7fd fdcf 	bl	801418c <malloc>
 80165ee:	4602      	mov	r2, r0
 80165f0:	61f8      	str	r0, [r7, #28]
 80165f2:	b928      	cbnz	r0, 8016600 <__pow5mult+0x40>
 80165f4:	4b1d      	ldr	r3, [pc, #116]	@ (801666c <__pow5mult+0xac>)
 80165f6:	481e      	ldr	r0, [pc, #120]	@ (8016670 <__pow5mult+0xb0>)
 80165f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80165fc:	f7fd fd96 	bl	801412c <__assert_func>
 8016600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016604:	6004      	str	r4, [r0, #0]
 8016606:	60c4      	str	r4, [r0, #12]
 8016608:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801660c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016610:	b94c      	cbnz	r4, 8016626 <__pow5mult+0x66>
 8016612:	f240 2171 	movw	r1, #625	@ 0x271
 8016616:	4638      	mov	r0, r7
 8016618:	f7ff ff12 	bl	8016440 <__i2b>
 801661c:	2300      	movs	r3, #0
 801661e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016622:	4604      	mov	r4, r0
 8016624:	6003      	str	r3, [r0, #0]
 8016626:	f04f 0900 	mov.w	r9, #0
 801662a:	07eb      	lsls	r3, r5, #31
 801662c:	d50a      	bpl.n	8016644 <__pow5mult+0x84>
 801662e:	4631      	mov	r1, r6
 8016630:	4622      	mov	r2, r4
 8016632:	4638      	mov	r0, r7
 8016634:	f7ff ff1a 	bl	801646c <__multiply>
 8016638:	4631      	mov	r1, r6
 801663a:	4680      	mov	r8, r0
 801663c:	4638      	mov	r0, r7
 801663e:	f7ff fe01 	bl	8016244 <_Bfree>
 8016642:	4646      	mov	r6, r8
 8016644:	106d      	asrs	r5, r5, #1
 8016646:	d00b      	beq.n	8016660 <__pow5mult+0xa0>
 8016648:	6820      	ldr	r0, [r4, #0]
 801664a:	b938      	cbnz	r0, 801665c <__pow5mult+0x9c>
 801664c:	4622      	mov	r2, r4
 801664e:	4621      	mov	r1, r4
 8016650:	4638      	mov	r0, r7
 8016652:	f7ff ff0b 	bl	801646c <__multiply>
 8016656:	6020      	str	r0, [r4, #0]
 8016658:	f8c0 9000 	str.w	r9, [r0]
 801665c:	4604      	mov	r4, r0
 801665e:	e7e4      	b.n	801662a <__pow5mult+0x6a>
 8016660:	4630      	mov	r0, r6
 8016662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016666:	bf00      	nop
 8016668:	08019b6c 	.word	0x08019b6c
 801666c:	08019a92 	.word	0x08019a92
 8016670:	08019b12 	.word	0x08019b12

08016674 <__lshift>:
 8016674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016678:	460c      	mov	r4, r1
 801667a:	6849      	ldr	r1, [r1, #4]
 801667c:	6923      	ldr	r3, [r4, #16]
 801667e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016682:	68a3      	ldr	r3, [r4, #8]
 8016684:	4607      	mov	r7, r0
 8016686:	4691      	mov	r9, r2
 8016688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801668c:	f108 0601 	add.w	r6, r8, #1
 8016690:	42b3      	cmp	r3, r6
 8016692:	db0b      	blt.n	80166ac <__lshift+0x38>
 8016694:	4638      	mov	r0, r7
 8016696:	f7ff fd95 	bl	80161c4 <_Balloc>
 801669a:	4605      	mov	r5, r0
 801669c:	b948      	cbnz	r0, 80166b2 <__lshift+0x3e>
 801669e:	4602      	mov	r2, r0
 80166a0:	4b28      	ldr	r3, [pc, #160]	@ (8016744 <__lshift+0xd0>)
 80166a2:	4829      	ldr	r0, [pc, #164]	@ (8016748 <__lshift+0xd4>)
 80166a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80166a8:	f7fd fd40 	bl	801412c <__assert_func>
 80166ac:	3101      	adds	r1, #1
 80166ae:	005b      	lsls	r3, r3, #1
 80166b0:	e7ee      	b.n	8016690 <__lshift+0x1c>
 80166b2:	2300      	movs	r3, #0
 80166b4:	f100 0114 	add.w	r1, r0, #20
 80166b8:	f100 0210 	add.w	r2, r0, #16
 80166bc:	4618      	mov	r0, r3
 80166be:	4553      	cmp	r3, sl
 80166c0:	db33      	blt.n	801672a <__lshift+0xb6>
 80166c2:	6920      	ldr	r0, [r4, #16]
 80166c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80166c8:	f104 0314 	add.w	r3, r4, #20
 80166cc:	f019 091f 	ands.w	r9, r9, #31
 80166d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80166d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80166d8:	d02b      	beq.n	8016732 <__lshift+0xbe>
 80166da:	f1c9 0e20 	rsb	lr, r9, #32
 80166de:	468a      	mov	sl, r1
 80166e0:	2200      	movs	r2, #0
 80166e2:	6818      	ldr	r0, [r3, #0]
 80166e4:	fa00 f009 	lsl.w	r0, r0, r9
 80166e8:	4310      	orrs	r0, r2
 80166ea:	f84a 0b04 	str.w	r0, [sl], #4
 80166ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80166f2:	459c      	cmp	ip, r3
 80166f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80166f8:	d8f3      	bhi.n	80166e2 <__lshift+0x6e>
 80166fa:	ebac 0304 	sub.w	r3, ip, r4
 80166fe:	3b15      	subs	r3, #21
 8016700:	f023 0303 	bic.w	r3, r3, #3
 8016704:	3304      	adds	r3, #4
 8016706:	f104 0015 	add.w	r0, r4, #21
 801670a:	4584      	cmp	ip, r0
 801670c:	bf38      	it	cc
 801670e:	2304      	movcc	r3, #4
 8016710:	50ca      	str	r2, [r1, r3]
 8016712:	b10a      	cbz	r2, 8016718 <__lshift+0xa4>
 8016714:	f108 0602 	add.w	r6, r8, #2
 8016718:	3e01      	subs	r6, #1
 801671a:	4638      	mov	r0, r7
 801671c:	612e      	str	r6, [r5, #16]
 801671e:	4621      	mov	r1, r4
 8016720:	f7ff fd90 	bl	8016244 <_Bfree>
 8016724:	4628      	mov	r0, r5
 8016726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801672a:	f842 0f04 	str.w	r0, [r2, #4]!
 801672e:	3301      	adds	r3, #1
 8016730:	e7c5      	b.n	80166be <__lshift+0x4a>
 8016732:	3904      	subs	r1, #4
 8016734:	f853 2b04 	ldr.w	r2, [r3], #4
 8016738:	f841 2f04 	str.w	r2, [r1, #4]!
 801673c:	459c      	cmp	ip, r3
 801673e:	d8f9      	bhi.n	8016734 <__lshift+0xc0>
 8016740:	e7ea      	b.n	8016718 <__lshift+0xa4>
 8016742:	bf00      	nop
 8016744:	08019b01 	.word	0x08019b01
 8016748:	08019b12 	.word	0x08019b12

0801674c <__mcmp>:
 801674c:	690a      	ldr	r2, [r1, #16]
 801674e:	4603      	mov	r3, r0
 8016750:	6900      	ldr	r0, [r0, #16]
 8016752:	1a80      	subs	r0, r0, r2
 8016754:	b530      	push	{r4, r5, lr}
 8016756:	d10e      	bne.n	8016776 <__mcmp+0x2a>
 8016758:	3314      	adds	r3, #20
 801675a:	3114      	adds	r1, #20
 801675c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016760:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016764:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016768:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801676c:	4295      	cmp	r5, r2
 801676e:	d003      	beq.n	8016778 <__mcmp+0x2c>
 8016770:	d205      	bcs.n	801677e <__mcmp+0x32>
 8016772:	f04f 30ff 	mov.w	r0, #4294967295
 8016776:	bd30      	pop	{r4, r5, pc}
 8016778:	42a3      	cmp	r3, r4
 801677a:	d3f3      	bcc.n	8016764 <__mcmp+0x18>
 801677c:	e7fb      	b.n	8016776 <__mcmp+0x2a>
 801677e:	2001      	movs	r0, #1
 8016780:	e7f9      	b.n	8016776 <__mcmp+0x2a>
	...

08016784 <__mdiff>:
 8016784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016788:	4689      	mov	r9, r1
 801678a:	4606      	mov	r6, r0
 801678c:	4611      	mov	r1, r2
 801678e:	4648      	mov	r0, r9
 8016790:	4614      	mov	r4, r2
 8016792:	f7ff ffdb 	bl	801674c <__mcmp>
 8016796:	1e05      	subs	r5, r0, #0
 8016798:	d112      	bne.n	80167c0 <__mdiff+0x3c>
 801679a:	4629      	mov	r1, r5
 801679c:	4630      	mov	r0, r6
 801679e:	f7ff fd11 	bl	80161c4 <_Balloc>
 80167a2:	4602      	mov	r2, r0
 80167a4:	b928      	cbnz	r0, 80167b2 <__mdiff+0x2e>
 80167a6:	4b3f      	ldr	r3, [pc, #252]	@ (80168a4 <__mdiff+0x120>)
 80167a8:	f240 2137 	movw	r1, #567	@ 0x237
 80167ac:	483e      	ldr	r0, [pc, #248]	@ (80168a8 <__mdiff+0x124>)
 80167ae:	f7fd fcbd 	bl	801412c <__assert_func>
 80167b2:	2301      	movs	r3, #1
 80167b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80167b8:	4610      	mov	r0, r2
 80167ba:	b003      	add	sp, #12
 80167bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167c0:	bfbc      	itt	lt
 80167c2:	464b      	movlt	r3, r9
 80167c4:	46a1      	movlt	r9, r4
 80167c6:	4630      	mov	r0, r6
 80167c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80167cc:	bfba      	itte	lt
 80167ce:	461c      	movlt	r4, r3
 80167d0:	2501      	movlt	r5, #1
 80167d2:	2500      	movge	r5, #0
 80167d4:	f7ff fcf6 	bl	80161c4 <_Balloc>
 80167d8:	4602      	mov	r2, r0
 80167da:	b918      	cbnz	r0, 80167e4 <__mdiff+0x60>
 80167dc:	4b31      	ldr	r3, [pc, #196]	@ (80168a4 <__mdiff+0x120>)
 80167de:	f240 2145 	movw	r1, #581	@ 0x245
 80167e2:	e7e3      	b.n	80167ac <__mdiff+0x28>
 80167e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80167e8:	6926      	ldr	r6, [r4, #16]
 80167ea:	60c5      	str	r5, [r0, #12]
 80167ec:	f109 0310 	add.w	r3, r9, #16
 80167f0:	f109 0514 	add.w	r5, r9, #20
 80167f4:	f104 0e14 	add.w	lr, r4, #20
 80167f8:	f100 0b14 	add.w	fp, r0, #20
 80167fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016800:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016804:	9301      	str	r3, [sp, #4]
 8016806:	46d9      	mov	r9, fp
 8016808:	f04f 0c00 	mov.w	ip, #0
 801680c:	9b01      	ldr	r3, [sp, #4]
 801680e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016812:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016816:	9301      	str	r3, [sp, #4]
 8016818:	fa1f f38a 	uxth.w	r3, sl
 801681c:	4619      	mov	r1, r3
 801681e:	b283      	uxth	r3, r0
 8016820:	1acb      	subs	r3, r1, r3
 8016822:	0c00      	lsrs	r0, r0, #16
 8016824:	4463      	add	r3, ip
 8016826:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801682a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801682e:	b29b      	uxth	r3, r3
 8016830:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016834:	4576      	cmp	r6, lr
 8016836:	f849 3b04 	str.w	r3, [r9], #4
 801683a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801683e:	d8e5      	bhi.n	801680c <__mdiff+0x88>
 8016840:	1b33      	subs	r3, r6, r4
 8016842:	3b15      	subs	r3, #21
 8016844:	f023 0303 	bic.w	r3, r3, #3
 8016848:	3415      	adds	r4, #21
 801684a:	3304      	adds	r3, #4
 801684c:	42a6      	cmp	r6, r4
 801684e:	bf38      	it	cc
 8016850:	2304      	movcc	r3, #4
 8016852:	441d      	add	r5, r3
 8016854:	445b      	add	r3, fp
 8016856:	461e      	mov	r6, r3
 8016858:	462c      	mov	r4, r5
 801685a:	4544      	cmp	r4, r8
 801685c:	d30e      	bcc.n	801687c <__mdiff+0xf8>
 801685e:	f108 0103 	add.w	r1, r8, #3
 8016862:	1b49      	subs	r1, r1, r5
 8016864:	f021 0103 	bic.w	r1, r1, #3
 8016868:	3d03      	subs	r5, #3
 801686a:	45a8      	cmp	r8, r5
 801686c:	bf38      	it	cc
 801686e:	2100      	movcc	r1, #0
 8016870:	440b      	add	r3, r1
 8016872:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016876:	b191      	cbz	r1, 801689e <__mdiff+0x11a>
 8016878:	6117      	str	r7, [r2, #16]
 801687a:	e79d      	b.n	80167b8 <__mdiff+0x34>
 801687c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016880:	46e6      	mov	lr, ip
 8016882:	0c08      	lsrs	r0, r1, #16
 8016884:	fa1c fc81 	uxtah	ip, ip, r1
 8016888:	4471      	add	r1, lr
 801688a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801688e:	b289      	uxth	r1, r1
 8016890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016894:	f846 1b04 	str.w	r1, [r6], #4
 8016898:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801689c:	e7dd      	b.n	801685a <__mdiff+0xd6>
 801689e:	3f01      	subs	r7, #1
 80168a0:	e7e7      	b.n	8016872 <__mdiff+0xee>
 80168a2:	bf00      	nop
 80168a4:	08019b01 	.word	0x08019b01
 80168a8:	08019b12 	.word	0x08019b12

080168ac <__ulp>:
 80168ac:	b082      	sub	sp, #8
 80168ae:	ed8d 0b00 	vstr	d0, [sp]
 80168b2:	9a01      	ldr	r2, [sp, #4]
 80168b4:	4b0f      	ldr	r3, [pc, #60]	@ (80168f4 <__ulp+0x48>)
 80168b6:	4013      	ands	r3, r2
 80168b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80168bc:	2b00      	cmp	r3, #0
 80168be:	dc08      	bgt.n	80168d2 <__ulp+0x26>
 80168c0:	425b      	negs	r3, r3
 80168c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80168c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80168ca:	da04      	bge.n	80168d6 <__ulp+0x2a>
 80168cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80168d0:	4113      	asrs	r3, r2
 80168d2:	2200      	movs	r2, #0
 80168d4:	e008      	b.n	80168e8 <__ulp+0x3c>
 80168d6:	f1a2 0314 	sub.w	r3, r2, #20
 80168da:	2b1e      	cmp	r3, #30
 80168dc:	bfda      	itte	le
 80168de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80168e2:	40da      	lsrle	r2, r3
 80168e4:	2201      	movgt	r2, #1
 80168e6:	2300      	movs	r3, #0
 80168e8:	4619      	mov	r1, r3
 80168ea:	4610      	mov	r0, r2
 80168ec:	ec41 0b10 	vmov	d0, r0, r1
 80168f0:	b002      	add	sp, #8
 80168f2:	4770      	bx	lr
 80168f4:	7ff00000 	.word	0x7ff00000

080168f8 <__b2d>:
 80168f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168fc:	6906      	ldr	r6, [r0, #16]
 80168fe:	f100 0814 	add.w	r8, r0, #20
 8016902:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016906:	1f37      	subs	r7, r6, #4
 8016908:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801690c:	4610      	mov	r0, r2
 801690e:	f7ff fd4b 	bl	80163a8 <__hi0bits>
 8016912:	f1c0 0320 	rsb	r3, r0, #32
 8016916:	280a      	cmp	r0, #10
 8016918:	600b      	str	r3, [r1, #0]
 801691a:	491b      	ldr	r1, [pc, #108]	@ (8016988 <__b2d+0x90>)
 801691c:	dc15      	bgt.n	801694a <__b2d+0x52>
 801691e:	f1c0 0c0b 	rsb	ip, r0, #11
 8016922:	fa22 f30c 	lsr.w	r3, r2, ip
 8016926:	45b8      	cmp	r8, r7
 8016928:	ea43 0501 	orr.w	r5, r3, r1
 801692c:	bf34      	ite	cc
 801692e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016932:	2300      	movcs	r3, #0
 8016934:	3015      	adds	r0, #21
 8016936:	fa02 f000 	lsl.w	r0, r2, r0
 801693a:	fa23 f30c 	lsr.w	r3, r3, ip
 801693e:	4303      	orrs	r3, r0
 8016940:	461c      	mov	r4, r3
 8016942:	ec45 4b10 	vmov	d0, r4, r5
 8016946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801694a:	45b8      	cmp	r8, r7
 801694c:	bf3a      	itte	cc
 801694e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016952:	f1a6 0708 	subcc.w	r7, r6, #8
 8016956:	2300      	movcs	r3, #0
 8016958:	380b      	subs	r0, #11
 801695a:	d012      	beq.n	8016982 <__b2d+0x8a>
 801695c:	f1c0 0120 	rsb	r1, r0, #32
 8016960:	fa23 f401 	lsr.w	r4, r3, r1
 8016964:	4082      	lsls	r2, r0
 8016966:	4322      	orrs	r2, r4
 8016968:	4547      	cmp	r7, r8
 801696a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801696e:	bf8c      	ite	hi
 8016970:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016974:	2200      	movls	r2, #0
 8016976:	4083      	lsls	r3, r0
 8016978:	40ca      	lsrs	r2, r1
 801697a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801697e:	4313      	orrs	r3, r2
 8016980:	e7de      	b.n	8016940 <__b2d+0x48>
 8016982:	ea42 0501 	orr.w	r5, r2, r1
 8016986:	e7db      	b.n	8016940 <__b2d+0x48>
 8016988:	3ff00000 	.word	0x3ff00000

0801698c <__d2b>:
 801698c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016990:	460f      	mov	r7, r1
 8016992:	2101      	movs	r1, #1
 8016994:	ec59 8b10 	vmov	r8, r9, d0
 8016998:	4616      	mov	r6, r2
 801699a:	f7ff fc13 	bl	80161c4 <_Balloc>
 801699e:	4604      	mov	r4, r0
 80169a0:	b930      	cbnz	r0, 80169b0 <__d2b+0x24>
 80169a2:	4602      	mov	r2, r0
 80169a4:	4b23      	ldr	r3, [pc, #140]	@ (8016a34 <__d2b+0xa8>)
 80169a6:	4824      	ldr	r0, [pc, #144]	@ (8016a38 <__d2b+0xac>)
 80169a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80169ac:	f7fd fbbe 	bl	801412c <__assert_func>
 80169b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80169b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80169b8:	b10d      	cbz	r5, 80169be <__d2b+0x32>
 80169ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80169be:	9301      	str	r3, [sp, #4]
 80169c0:	f1b8 0300 	subs.w	r3, r8, #0
 80169c4:	d023      	beq.n	8016a0e <__d2b+0x82>
 80169c6:	4668      	mov	r0, sp
 80169c8:	9300      	str	r3, [sp, #0]
 80169ca:	f7ff fd0c 	bl	80163e6 <__lo0bits>
 80169ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80169d2:	b1d0      	cbz	r0, 8016a0a <__d2b+0x7e>
 80169d4:	f1c0 0320 	rsb	r3, r0, #32
 80169d8:	fa02 f303 	lsl.w	r3, r2, r3
 80169dc:	430b      	orrs	r3, r1
 80169de:	40c2      	lsrs	r2, r0
 80169e0:	6163      	str	r3, [r4, #20]
 80169e2:	9201      	str	r2, [sp, #4]
 80169e4:	9b01      	ldr	r3, [sp, #4]
 80169e6:	61a3      	str	r3, [r4, #24]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	bf0c      	ite	eq
 80169ec:	2201      	moveq	r2, #1
 80169ee:	2202      	movne	r2, #2
 80169f0:	6122      	str	r2, [r4, #16]
 80169f2:	b1a5      	cbz	r5, 8016a1e <__d2b+0x92>
 80169f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80169f8:	4405      	add	r5, r0
 80169fa:	603d      	str	r5, [r7, #0]
 80169fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016a00:	6030      	str	r0, [r6, #0]
 8016a02:	4620      	mov	r0, r4
 8016a04:	b003      	add	sp, #12
 8016a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a0a:	6161      	str	r1, [r4, #20]
 8016a0c:	e7ea      	b.n	80169e4 <__d2b+0x58>
 8016a0e:	a801      	add	r0, sp, #4
 8016a10:	f7ff fce9 	bl	80163e6 <__lo0bits>
 8016a14:	9b01      	ldr	r3, [sp, #4]
 8016a16:	6163      	str	r3, [r4, #20]
 8016a18:	3020      	adds	r0, #32
 8016a1a:	2201      	movs	r2, #1
 8016a1c:	e7e8      	b.n	80169f0 <__d2b+0x64>
 8016a1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016a22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016a26:	6038      	str	r0, [r7, #0]
 8016a28:	6918      	ldr	r0, [r3, #16]
 8016a2a:	f7ff fcbd 	bl	80163a8 <__hi0bits>
 8016a2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016a32:	e7e5      	b.n	8016a00 <__d2b+0x74>
 8016a34:	08019b01 	.word	0x08019b01
 8016a38:	08019b12 	.word	0x08019b12

08016a3c <__ratio>:
 8016a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a40:	b085      	sub	sp, #20
 8016a42:	e9cd 1000 	strd	r1, r0, [sp]
 8016a46:	a902      	add	r1, sp, #8
 8016a48:	f7ff ff56 	bl	80168f8 <__b2d>
 8016a4c:	9800      	ldr	r0, [sp, #0]
 8016a4e:	a903      	add	r1, sp, #12
 8016a50:	ec55 4b10 	vmov	r4, r5, d0
 8016a54:	f7ff ff50 	bl	80168f8 <__b2d>
 8016a58:	9b01      	ldr	r3, [sp, #4]
 8016a5a:	6919      	ldr	r1, [r3, #16]
 8016a5c:	9b00      	ldr	r3, [sp, #0]
 8016a5e:	691b      	ldr	r3, [r3, #16]
 8016a60:	1ac9      	subs	r1, r1, r3
 8016a62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016a66:	1a9b      	subs	r3, r3, r2
 8016a68:	ec5b ab10 	vmov	sl, fp, d0
 8016a6c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	bfce      	itee	gt
 8016a74:	462a      	movgt	r2, r5
 8016a76:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016a7a:	465a      	movle	r2, fp
 8016a7c:	462f      	mov	r7, r5
 8016a7e:	46d9      	mov	r9, fp
 8016a80:	bfcc      	ite	gt
 8016a82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016a86:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016a8a:	464b      	mov	r3, r9
 8016a8c:	4652      	mov	r2, sl
 8016a8e:	4620      	mov	r0, r4
 8016a90:	4639      	mov	r1, r7
 8016a92:	f7e9 ff03 	bl	800089c <__aeabi_ddiv>
 8016a96:	ec41 0b10 	vmov	d0, r0, r1
 8016a9a:	b005      	add	sp, #20
 8016a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016aa0 <__copybits>:
 8016aa0:	3901      	subs	r1, #1
 8016aa2:	b570      	push	{r4, r5, r6, lr}
 8016aa4:	1149      	asrs	r1, r1, #5
 8016aa6:	6914      	ldr	r4, [r2, #16]
 8016aa8:	3101      	adds	r1, #1
 8016aaa:	f102 0314 	add.w	r3, r2, #20
 8016aae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016ab2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016ab6:	1f05      	subs	r5, r0, #4
 8016ab8:	42a3      	cmp	r3, r4
 8016aba:	d30c      	bcc.n	8016ad6 <__copybits+0x36>
 8016abc:	1aa3      	subs	r3, r4, r2
 8016abe:	3b11      	subs	r3, #17
 8016ac0:	f023 0303 	bic.w	r3, r3, #3
 8016ac4:	3211      	adds	r2, #17
 8016ac6:	42a2      	cmp	r2, r4
 8016ac8:	bf88      	it	hi
 8016aca:	2300      	movhi	r3, #0
 8016acc:	4418      	add	r0, r3
 8016ace:	2300      	movs	r3, #0
 8016ad0:	4288      	cmp	r0, r1
 8016ad2:	d305      	bcc.n	8016ae0 <__copybits+0x40>
 8016ad4:	bd70      	pop	{r4, r5, r6, pc}
 8016ad6:	f853 6b04 	ldr.w	r6, [r3], #4
 8016ada:	f845 6f04 	str.w	r6, [r5, #4]!
 8016ade:	e7eb      	b.n	8016ab8 <__copybits+0x18>
 8016ae0:	f840 3b04 	str.w	r3, [r0], #4
 8016ae4:	e7f4      	b.n	8016ad0 <__copybits+0x30>

08016ae6 <__any_on>:
 8016ae6:	f100 0214 	add.w	r2, r0, #20
 8016aea:	6900      	ldr	r0, [r0, #16]
 8016aec:	114b      	asrs	r3, r1, #5
 8016aee:	4298      	cmp	r0, r3
 8016af0:	b510      	push	{r4, lr}
 8016af2:	db11      	blt.n	8016b18 <__any_on+0x32>
 8016af4:	dd0a      	ble.n	8016b0c <__any_on+0x26>
 8016af6:	f011 011f 	ands.w	r1, r1, #31
 8016afa:	d007      	beq.n	8016b0c <__any_on+0x26>
 8016afc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b00:	fa24 f001 	lsr.w	r0, r4, r1
 8016b04:	fa00 f101 	lsl.w	r1, r0, r1
 8016b08:	428c      	cmp	r4, r1
 8016b0a:	d10b      	bne.n	8016b24 <__any_on+0x3e>
 8016b0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b10:	4293      	cmp	r3, r2
 8016b12:	d803      	bhi.n	8016b1c <__any_on+0x36>
 8016b14:	2000      	movs	r0, #0
 8016b16:	bd10      	pop	{r4, pc}
 8016b18:	4603      	mov	r3, r0
 8016b1a:	e7f7      	b.n	8016b0c <__any_on+0x26>
 8016b1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b20:	2900      	cmp	r1, #0
 8016b22:	d0f5      	beq.n	8016b10 <__any_on+0x2a>
 8016b24:	2001      	movs	r0, #1
 8016b26:	e7f6      	b.n	8016b16 <__any_on+0x30>

08016b28 <sulp>:
 8016b28:	b570      	push	{r4, r5, r6, lr}
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	460d      	mov	r5, r1
 8016b2e:	ec45 4b10 	vmov	d0, r4, r5
 8016b32:	4616      	mov	r6, r2
 8016b34:	f7ff feba 	bl	80168ac <__ulp>
 8016b38:	ec51 0b10 	vmov	r0, r1, d0
 8016b3c:	b17e      	cbz	r6, 8016b5e <sulp+0x36>
 8016b3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016b42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	dd09      	ble.n	8016b5e <sulp+0x36>
 8016b4a:	051b      	lsls	r3, r3, #20
 8016b4c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016b50:	2400      	movs	r4, #0
 8016b52:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016b56:	4622      	mov	r2, r4
 8016b58:	462b      	mov	r3, r5
 8016b5a:	f7e9 fd75 	bl	8000648 <__aeabi_dmul>
 8016b5e:	ec41 0b10 	vmov	d0, r0, r1
 8016b62:	bd70      	pop	{r4, r5, r6, pc}
 8016b64:	0000      	movs	r0, r0
	...

08016b68 <_strtod_l>:
 8016b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b6c:	b09f      	sub	sp, #124	@ 0x7c
 8016b6e:	460c      	mov	r4, r1
 8016b70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016b72:	2200      	movs	r2, #0
 8016b74:	921a      	str	r2, [sp, #104]	@ 0x68
 8016b76:	9005      	str	r0, [sp, #20]
 8016b78:	f04f 0a00 	mov.w	sl, #0
 8016b7c:	f04f 0b00 	mov.w	fp, #0
 8016b80:	460a      	mov	r2, r1
 8016b82:	9219      	str	r2, [sp, #100]	@ 0x64
 8016b84:	7811      	ldrb	r1, [r2, #0]
 8016b86:	292b      	cmp	r1, #43	@ 0x2b
 8016b88:	d04a      	beq.n	8016c20 <_strtod_l+0xb8>
 8016b8a:	d838      	bhi.n	8016bfe <_strtod_l+0x96>
 8016b8c:	290d      	cmp	r1, #13
 8016b8e:	d832      	bhi.n	8016bf6 <_strtod_l+0x8e>
 8016b90:	2908      	cmp	r1, #8
 8016b92:	d832      	bhi.n	8016bfa <_strtod_l+0x92>
 8016b94:	2900      	cmp	r1, #0
 8016b96:	d03b      	beq.n	8016c10 <_strtod_l+0xa8>
 8016b98:	2200      	movs	r2, #0
 8016b9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016b9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016b9e:	782a      	ldrb	r2, [r5, #0]
 8016ba0:	2a30      	cmp	r2, #48	@ 0x30
 8016ba2:	f040 80b3 	bne.w	8016d0c <_strtod_l+0x1a4>
 8016ba6:	786a      	ldrb	r2, [r5, #1]
 8016ba8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016bac:	2a58      	cmp	r2, #88	@ 0x58
 8016bae:	d16e      	bne.n	8016c8e <_strtod_l+0x126>
 8016bb0:	9302      	str	r3, [sp, #8]
 8016bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bb4:	9301      	str	r3, [sp, #4]
 8016bb6:	ab1a      	add	r3, sp, #104	@ 0x68
 8016bb8:	9300      	str	r3, [sp, #0]
 8016bba:	4a8e      	ldr	r2, [pc, #568]	@ (8016df4 <_strtod_l+0x28c>)
 8016bbc:	9805      	ldr	r0, [sp, #20]
 8016bbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016bc0:	a919      	add	r1, sp, #100	@ 0x64
 8016bc2:	f001 faa9 	bl	8018118 <__gethex>
 8016bc6:	f010 060f 	ands.w	r6, r0, #15
 8016bca:	4604      	mov	r4, r0
 8016bcc:	d005      	beq.n	8016bda <_strtod_l+0x72>
 8016bce:	2e06      	cmp	r6, #6
 8016bd0:	d128      	bne.n	8016c24 <_strtod_l+0xbc>
 8016bd2:	3501      	adds	r5, #1
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	9519      	str	r5, [sp, #100]	@ 0x64
 8016bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016bda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	f040 858e 	bne.w	80176fe <_strtod_l+0xb96>
 8016be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016be4:	b1cb      	cbz	r3, 8016c1a <_strtod_l+0xb2>
 8016be6:	4652      	mov	r2, sl
 8016be8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016bec:	ec43 2b10 	vmov	d0, r2, r3
 8016bf0:	b01f      	add	sp, #124	@ 0x7c
 8016bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf6:	2920      	cmp	r1, #32
 8016bf8:	d1ce      	bne.n	8016b98 <_strtod_l+0x30>
 8016bfa:	3201      	adds	r2, #1
 8016bfc:	e7c1      	b.n	8016b82 <_strtod_l+0x1a>
 8016bfe:	292d      	cmp	r1, #45	@ 0x2d
 8016c00:	d1ca      	bne.n	8016b98 <_strtod_l+0x30>
 8016c02:	2101      	movs	r1, #1
 8016c04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016c06:	1c51      	adds	r1, r2, #1
 8016c08:	9119      	str	r1, [sp, #100]	@ 0x64
 8016c0a:	7852      	ldrb	r2, [r2, #1]
 8016c0c:	2a00      	cmp	r2, #0
 8016c0e:	d1c5      	bne.n	8016b9c <_strtod_l+0x34>
 8016c10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c12:	9419      	str	r4, [sp, #100]	@ 0x64
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	f040 8570 	bne.w	80176fa <_strtod_l+0xb92>
 8016c1a:	4652      	mov	r2, sl
 8016c1c:	465b      	mov	r3, fp
 8016c1e:	e7e5      	b.n	8016bec <_strtod_l+0x84>
 8016c20:	2100      	movs	r1, #0
 8016c22:	e7ef      	b.n	8016c04 <_strtod_l+0x9c>
 8016c24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016c26:	b13a      	cbz	r2, 8016c38 <_strtod_l+0xd0>
 8016c28:	2135      	movs	r1, #53	@ 0x35
 8016c2a:	a81c      	add	r0, sp, #112	@ 0x70
 8016c2c:	f7ff ff38 	bl	8016aa0 <__copybits>
 8016c30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016c32:	9805      	ldr	r0, [sp, #20]
 8016c34:	f7ff fb06 	bl	8016244 <_Bfree>
 8016c38:	3e01      	subs	r6, #1
 8016c3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016c3c:	2e04      	cmp	r6, #4
 8016c3e:	d806      	bhi.n	8016c4e <_strtod_l+0xe6>
 8016c40:	e8df f006 	tbb	[pc, r6]
 8016c44:	201d0314 	.word	0x201d0314
 8016c48:	14          	.byte	0x14
 8016c49:	00          	.byte	0x00
 8016c4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016c4e:	05e1      	lsls	r1, r4, #23
 8016c50:	bf48      	it	mi
 8016c52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016c56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016c5a:	0d1b      	lsrs	r3, r3, #20
 8016c5c:	051b      	lsls	r3, r3, #20
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d1bb      	bne.n	8016bda <_strtod_l+0x72>
 8016c62:	f7fe fbd7 	bl	8015414 <__errno>
 8016c66:	2322      	movs	r3, #34	@ 0x22
 8016c68:	6003      	str	r3, [r0, #0]
 8016c6a:	e7b6      	b.n	8016bda <_strtod_l+0x72>
 8016c6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016c70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016c74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016c78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016c7c:	e7e7      	b.n	8016c4e <_strtod_l+0xe6>
 8016c7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8016dfc <_strtod_l+0x294>
 8016c82:	e7e4      	b.n	8016c4e <_strtod_l+0xe6>
 8016c84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016c88:	f04f 3aff 	mov.w	sl, #4294967295
 8016c8c:	e7df      	b.n	8016c4e <_strtod_l+0xe6>
 8016c8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c90:	1c5a      	adds	r2, r3, #1
 8016c92:	9219      	str	r2, [sp, #100]	@ 0x64
 8016c94:	785b      	ldrb	r3, [r3, #1]
 8016c96:	2b30      	cmp	r3, #48	@ 0x30
 8016c98:	d0f9      	beq.n	8016c8e <_strtod_l+0x126>
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d09d      	beq.n	8016bda <_strtod_l+0x72>
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ca4:	930c      	str	r3, [sp, #48]	@ 0x30
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	9308      	str	r3, [sp, #32]
 8016caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8016cac:	461f      	mov	r7, r3
 8016cae:	220a      	movs	r2, #10
 8016cb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016cb2:	7805      	ldrb	r5, [r0, #0]
 8016cb4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016cb8:	b2d9      	uxtb	r1, r3
 8016cba:	2909      	cmp	r1, #9
 8016cbc:	d928      	bls.n	8016d10 <_strtod_l+0x1a8>
 8016cbe:	494e      	ldr	r1, [pc, #312]	@ (8016df8 <_strtod_l+0x290>)
 8016cc0:	2201      	movs	r2, #1
 8016cc2:	f001 f991 	bl	8017fe8 <strncmp>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	d032      	beq.n	8016d30 <_strtod_l+0x1c8>
 8016cca:	2000      	movs	r0, #0
 8016ccc:	462a      	mov	r2, r5
 8016cce:	4681      	mov	r9, r0
 8016cd0:	463d      	mov	r5, r7
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	2a65      	cmp	r2, #101	@ 0x65
 8016cd6:	d001      	beq.n	8016cdc <_strtod_l+0x174>
 8016cd8:	2a45      	cmp	r2, #69	@ 0x45
 8016cda:	d114      	bne.n	8016d06 <_strtod_l+0x19e>
 8016cdc:	b91d      	cbnz	r5, 8016ce6 <_strtod_l+0x17e>
 8016cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ce0:	4302      	orrs	r2, r0
 8016ce2:	d095      	beq.n	8016c10 <_strtod_l+0xa8>
 8016ce4:	2500      	movs	r5, #0
 8016ce6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016ce8:	1c62      	adds	r2, r4, #1
 8016cea:	9219      	str	r2, [sp, #100]	@ 0x64
 8016cec:	7862      	ldrb	r2, [r4, #1]
 8016cee:	2a2b      	cmp	r2, #43	@ 0x2b
 8016cf0:	d077      	beq.n	8016de2 <_strtod_l+0x27a>
 8016cf2:	2a2d      	cmp	r2, #45	@ 0x2d
 8016cf4:	d07b      	beq.n	8016dee <_strtod_l+0x286>
 8016cf6:	f04f 0c00 	mov.w	ip, #0
 8016cfa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016cfe:	2909      	cmp	r1, #9
 8016d00:	f240 8082 	bls.w	8016e08 <_strtod_l+0x2a0>
 8016d04:	9419      	str	r4, [sp, #100]	@ 0x64
 8016d06:	f04f 0800 	mov.w	r8, #0
 8016d0a:	e0a2      	b.n	8016e52 <_strtod_l+0x2ea>
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	e7c7      	b.n	8016ca0 <_strtod_l+0x138>
 8016d10:	2f08      	cmp	r7, #8
 8016d12:	bfd5      	itete	le
 8016d14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8016d16:	9908      	ldrgt	r1, [sp, #32]
 8016d18:	fb02 3301 	mlale	r3, r2, r1, r3
 8016d1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016d20:	f100 0001 	add.w	r0, r0, #1
 8016d24:	bfd4      	ite	le
 8016d26:	930a      	strle	r3, [sp, #40]	@ 0x28
 8016d28:	9308      	strgt	r3, [sp, #32]
 8016d2a:	3701      	adds	r7, #1
 8016d2c:	9019      	str	r0, [sp, #100]	@ 0x64
 8016d2e:	e7bf      	b.n	8016cb0 <_strtod_l+0x148>
 8016d30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d32:	1c5a      	adds	r2, r3, #1
 8016d34:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d36:	785a      	ldrb	r2, [r3, #1]
 8016d38:	b37f      	cbz	r7, 8016d9a <_strtod_l+0x232>
 8016d3a:	4681      	mov	r9, r0
 8016d3c:	463d      	mov	r5, r7
 8016d3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016d42:	2b09      	cmp	r3, #9
 8016d44:	d912      	bls.n	8016d6c <_strtod_l+0x204>
 8016d46:	2301      	movs	r3, #1
 8016d48:	e7c4      	b.n	8016cd4 <_strtod_l+0x16c>
 8016d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d4c:	1c5a      	adds	r2, r3, #1
 8016d4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d50:	785a      	ldrb	r2, [r3, #1]
 8016d52:	3001      	adds	r0, #1
 8016d54:	2a30      	cmp	r2, #48	@ 0x30
 8016d56:	d0f8      	beq.n	8016d4a <_strtod_l+0x1e2>
 8016d58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016d5c:	2b08      	cmp	r3, #8
 8016d5e:	f200 84d3 	bhi.w	8017708 <_strtod_l+0xba0>
 8016d62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d64:	930c      	str	r3, [sp, #48]	@ 0x30
 8016d66:	4681      	mov	r9, r0
 8016d68:	2000      	movs	r0, #0
 8016d6a:	4605      	mov	r5, r0
 8016d6c:	3a30      	subs	r2, #48	@ 0x30
 8016d6e:	f100 0301 	add.w	r3, r0, #1
 8016d72:	d02a      	beq.n	8016dca <_strtod_l+0x262>
 8016d74:	4499      	add	r9, r3
 8016d76:	eb00 0c05 	add.w	ip, r0, r5
 8016d7a:	462b      	mov	r3, r5
 8016d7c:	210a      	movs	r1, #10
 8016d7e:	4563      	cmp	r3, ip
 8016d80:	d10d      	bne.n	8016d9e <_strtod_l+0x236>
 8016d82:	1c69      	adds	r1, r5, #1
 8016d84:	4401      	add	r1, r0
 8016d86:	4428      	add	r0, r5
 8016d88:	2808      	cmp	r0, #8
 8016d8a:	dc16      	bgt.n	8016dba <_strtod_l+0x252>
 8016d8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016d8e:	230a      	movs	r3, #10
 8016d90:	fb03 2300 	mla	r3, r3, r0, r2
 8016d94:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d96:	2300      	movs	r3, #0
 8016d98:	e018      	b.n	8016dcc <_strtod_l+0x264>
 8016d9a:	4638      	mov	r0, r7
 8016d9c:	e7da      	b.n	8016d54 <_strtod_l+0x1ec>
 8016d9e:	2b08      	cmp	r3, #8
 8016da0:	f103 0301 	add.w	r3, r3, #1
 8016da4:	dc03      	bgt.n	8016dae <_strtod_l+0x246>
 8016da6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016da8:	434e      	muls	r6, r1
 8016daa:	960a      	str	r6, [sp, #40]	@ 0x28
 8016dac:	e7e7      	b.n	8016d7e <_strtod_l+0x216>
 8016dae:	2b10      	cmp	r3, #16
 8016db0:	bfde      	ittt	le
 8016db2:	9e08      	ldrle	r6, [sp, #32]
 8016db4:	434e      	mulle	r6, r1
 8016db6:	9608      	strle	r6, [sp, #32]
 8016db8:	e7e1      	b.n	8016d7e <_strtod_l+0x216>
 8016dba:	280f      	cmp	r0, #15
 8016dbc:	dceb      	bgt.n	8016d96 <_strtod_l+0x22e>
 8016dbe:	9808      	ldr	r0, [sp, #32]
 8016dc0:	230a      	movs	r3, #10
 8016dc2:	fb03 2300 	mla	r3, r3, r0, r2
 8016dc6:	9308      	str	r3, [sp, #32]
 8016dc8:	e7e5      	b.n	8016d96 <_strtod_l+0x22e>
 8016dca:	4629      	mov	r1, r5
 8016dcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016dce:	1c50      	adds	r0, r2, #1
 8016dd0:	9019      	str	r0, [sp, #100]	@ 0x64
 8016dd2:	7852      	ldrb	r2, [r2, #1]
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	460d      	mov	r5, r1
 8016dd8:	e7b1      	b.n	8016d3e <_strtod_l+0x1d6>
 8016dda:	f04f 0900 	mov.w	r9, #0
 8016dde:	2301      	movs	r3, #1
 8016de0:	e77d      	b.n	8016cde <_strtod_l+0x176>
 8016de2:	f04f 0c00 	mov.w	ip, #0
 8016de6:	1ca2      	adds	r2, r4, #2
 8016de8:	9219      	str	r2, [sp, #100]	@ 0x64
 8016dea:	78a2      	ldrb	r2, [r4, #2]
 8016dec:	e785      	b.n	8016cfa <_strtod_l+0x192>
 8016dee:	f04f 0c01 	mov.w	ip, #1
 8016df2:	e7f8      	b.n	8016de6 <_strtod_l+0x27e>
 8016df4:	08019c80 	.word	0x08019c80
 8016df8:	08019c68 	.word	0x08019c68
 8016dfc:	7ff00000 	.word	0x7ff00000
 8016e00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e02:	1c51      	adds	r1, r2, #1
 8016e04:	9119      	str	r1, [sp, #100]	@ 0x64
 8016e06:	7852      	ldrb	r2, [r2, #1]
 8016e08:	2a30      	cmp	r2, #48	@ 0x30
 8016e0a:	d0f9      	beq.n	8016e00 <_strtod_l+0x298>
 8016e0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016e10:	2908      	cmp	r1, #8
 8016e12:	f63f af78 	bhi.w	8016d06 <_strtod_l+0x19e>
 8016e16:	3a30      	subs	r2, #48	@ 0x30
 8016e18:	920e      	str	r2, [sp, #56]	@ 0x38
 8016e1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016e1e:	f04f 080a 	mov.w	r8, #10
 8016e22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e24:	1c56      	adds	r6, r2, #1
 8016e26:	9619      	str	r6, [sp, #100]	@ 0x64
 8016e28:	7852      	ldrb	r2, [r2, #1]
 8016e2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016e2e:	f1be 0f09 	cmp.w	lr, #9
 8016e32:	d939      	bls.n	8016ea8 <_strtod_l+0x340>
 8016e34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016e36:	1a76      	subs	r6, r6, r1
 8016e38:	2e08      	cmp	r6, #8
 8016e3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016e3e:	dc03      	bgt.n	8016e48 <_strtod_l+0x2e0>
 8016e40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016e42:	4588      	cmp	r8, r1
 8016e44:	bfa8      	it	ge
 8016e46:	4688      	movge	r8, r1
 8016e48:	f1bc 0f00 	cmp.w	ip, #0
 8016e4c:	d001      	beq.n	8016e52 <_strtod_l+0x2ea>
 8016e4e:	f1c8 0800 	rsb	r8, r8, #0
 8016e52:	2d00      	cmp	r5, #0
 8016e54:	d14e      	bne.n	8016ef4 <_strtod_l+0x38c>
 8016e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016e58:	4308      	orrs	r0, r1
 8016e5a:	f47f aebe 	bne.w	8016bda <_strtod_l+0x72>
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f47f aed6 	bne.w	8016c10 <_strtod_l+0xa8>
 8016e64:	2a69      	cmp	r2, #105	@ 0x69
 8016e66:	d028      	beq.n	8016eba <_strtod_l+0x352>
 8016e68:	dc25      	bgt.n	8016eb6 <_strtod_l+0x34e>
 8016e6a:	2a49      	cmp	r2, #73	@ 0x49
 8016e6c:	d025      	beq.n	8016eba <_strtod_l+0x352>
 8016e6e:	2a4e      	cmp	r2, #78	@ 0x4e
 8016e70:	f47f aece 	bne.w	8016c10 <_strtod_l+0xa8>
 8016e74:	499b      	ldr	r1, [pc, #620]	@ (80170e4 <_strtod_l+0x57c>)
 8016e76:	a819      	add	r0, sp, #100	@ 0x64
 8016e78:	f001 fb70 	bl	801855c <__match>
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	f43f aec7 	beq.w	8016c10 <_strtod_l+0xa8>
 8016e82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	2b28      	cmp	r3, #40	@ 0x28
 8016e88:	d12e      	bne.n	8016ee8 <_strtod_l+0x380>
 8016e8a:	4997      	ldr	r1, [pc, #604]	@ (80170e8 <_strtod_l+0x580>)
 8016e8c:	aa1c      	add	r2, sp, #112	@ 0x70
 8016e8e:	a819      	add	r0, sp, #100	@ 0x64
 8016e90:	f001 fb78 	bl	8018584 <__hexnan>
 8016e94:	2805      	cmp	r0, #5
 8016e96:	d127      	bne.n	8016ee8 <_strtod_l+0x380>
 8016e98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016e9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016e9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016ea2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016ea6:	e698      	b.n	8016bda <_strtod_l+0x72>
 8016ea8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016eaa:	fb08 2101 	mla	r1, r8, r1, r2
 8016eae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016eb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8016eb4:	e7b5      	b.n	8016e22 <_strtod_l+0x2ba>
 8016eb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8016eb8:	e7da      	b.n	8016e70 <_strtod_l+0x308>
 8016eba:	498c      	ldr	r1, [pc, #560]	@ (80170ec <_strtod_l+0x584>)
 8016ebc:	a819      	add	r0, sp, #100	@ 0x64
 8016ebe:	f001 fb4d 	bl	801855c <__match>
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	f43f aea4 	beq.w	8016c10 <_strtod_l+0xa8>
 8016ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016eca:	4989      	ldr	r1, [pc, #548]	@ (80170f0 <_strtod_l+0x588>)
 8016ecc:	3b01      	subs	r3, #1
 8016ece:	a819      	add	r0, sp, #100	@ 0x64
 8016ed0:	9319      	str	r3, [sp, #100]	@ 0x64
 8016ed2:	f001 fb43 	bl	801855c <__match>
 8016ed6:	b910      	cbnz	r0, 8016ede <_strtod_l+0x376>
 8016ed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016eda:	3301      	adds	r3, #1
 8016edc:	9319      	str	r3, [sp, #100]	@ 0x64
 8016ede:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8017100 <_strtod_l+0x598>
 8016ee2:	f04f 0a00 	mov.w	sl, #0
 8016ee6:	e678      	b.n	8016bda <_strtod_l+0x72>
 8016ee8:	4882      	ldr	r0, [pc, #520]	@ (80170f4 <_strtod_l+0x58c>)
 8016eea:	f001 f891 	bl	8018010 <nan>
 8016eee:	ec5b ab10 	vmov	sl, fp, d0
 8016ef2:	e672      	b.n	8016bda <_strtod_l+0x72>
 8016ef4:	eba8 0309 	sub.w	r3, r8, r9
 8016ef8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016efc:	2f00      	cmp	r7, #0
 8016efe:	bf08      	it	eq
 8016f00:	462f      	moveq	r7, r5
 8016f02:	2d10      	cmp	r5, #16
 8016f04:	462c      	mov	r4, r5
 8016f06:	bfa8      	it	ge
 8016f08:	2410      	movge	r4, #16
 8016f0a:	f7e9 fb23 	bl	8000554 <__aeabi_ui2d>
 8016f0e:	2d09      	cmp	r5, #9
 8016f10:	4682      	mov	sl, r0
 8016f12:	468b      	mov	fp, r1
 8016f14:	dc13      	bgt.n	8016f3e <_strtod_l+0x3d6>
 8016f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	f43f ae5e 	beq.w	8016bda <_strtod_l+0x72>
 8016f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f20:	dd78      	ble.n	8017014 <_strtod_l+0x4ac>
 8016f22:	2b16      	cmp	r3, #22
 8016f24:	dc5f      	bgt.n	8016fe6 <_strtod_l+0x47e>
 8016f26:	4974      	ldr	r1, [pc, #464]	@ (80170f8 <_strtod_l+0x590>)
 8016f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f30:	4652      	mov	r2, sl
 8016f32:	465b      	mov	r3, fp
 8016f34:	f7e9 fb88 	bl	8000648 <__aeabi_dmul>
 8016f38:	4682      	mov	sl, r0
 8016f3a:	468b      	mov	fp, r1
 8016f3c:	e64d      	b.n	8016bda <_strtod_l+0x72>
 8016f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80170f8 <_strtod_l+0x590>)
 8016f40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016f44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016f48:	f7e9 fb7e 	bl	8000648 <__aeabi_dmul>
 8016f4c:	4682      	mov	sl, r0
 8016f4e:	9808      	ldr	r0, [sp, #32]
 8016f50:	468b      	mov	fp, r1
 8016f52:	f7e9 faff 	bl	8000554 <__aeabi_ui2d>
 8016f56:	4602      	mov	r2, r0
 8016f58:	460b      	mov	r3, r1
 8016f5a:	4650      	mov	r0, sl
 8016f5c:	4659      	mov	r1, fp
 8016f5e:	f7e9 f9bd 	bl	80002dc <__adddf3>
 8016f62:	2d0f      	cmp	r5, #15
 8016f64:	4682      	mov	sl, r0
 8016f66:	468b      	mov	fp, r1
 8016f68:	ddd5      	ble.n	8016f16 <_strtod_l+0x3ae>
 8016f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f6c:	1b2c      	subs	r4, r5, r4
 8016f6e:	441c      	add	r4, r3
 8016f70:	2c00      	cmp	r4, #0
 8016f72:	f340 8096 	ble.w	80170a2 <_strtod_l+0x53a>
 8016f76:	f014 030f 	ands.w	r3, r4, #15
 8016f7a:	d00a      	beq.n	8016f92 <_strtod_l+0x42a>
 8016f7c:	495e      	ldr	r1, [pc, #376]	@ (80170f8 <_strtod_l+0x590>)
 8016f7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016f82:	4652      	mov	r2, sl
 8016f84:	465b      	mov	r3, fp
 8016f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f8a:	f7e9 fb5d 	bl	8000648 <__aeabi_dmul>
 8016f8e:	4682      	mov	sl, r0
 8016f90:	468b      	mov	fp, r1
 8016f92:	f034 040f 	bics.w	r4, r4, #15
 8016f96:	d073      	beq.n	8017080 <_strtod_l+0x518>
 8016f98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016f9c:	dd48      	ble.n	8017030 <_strtod_l+0x4c8>
 8016f9e:	2400      	movs	r4, #0
 8016fa0:	46a0      	mov	r8, r4
 8016fa2:	940a      	str	r4, [sp, #40]	@ 0x28
 8016fa4:	46a1      	mov	r9, r4
 8016fa6:	9a05      	ldr	r2, [sp, #20]
 8016fa8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017100 <_strtod_l+0x598>
 8016fac:	2322      	movs	r3, #34	@ 0x22
 8016fae:	6013      	str	r3, [r2, #0]
 8016fb0:	f04f 0a00 	mov.w	sl, #0
 8016fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	f43f ae0f 	beq.w	8016bda <_strtod_l+0x72>
 8016fbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016fbe:	9805      	ldr	r0, [sp, #20]
 8016fc0:	f7ff f940 	bl	8016244 <_Bfree>
 8016fc4:	9805      	ldr	r0, [sp, #20]
 8016fc6:	4649      	mov	r1, r9
 8016fc8:	f7ff f93c 	bl	8016244 <_Bfree>
 8016fcc:	9805      	ldr	r0, [sp, #20]
 8016fce:	4641      	mov	r1, r8
 8016fd0:	f7ff f938 	bl	8016244 <_Bfree>
 8016fd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016fd6:	9805      	ldr	r0, [sp, #20]
 8016fd8:	f7ff f934 	bl	8016244 <_Bfree>
 8016fdc:	9805      	ldr	r0, [sp, #20]
 8016fde:	4621      	mov	r1, r4
 8016fe0:	f7ff f930 	bl	8016244 <_Bfree>
 8016fe4:	e5f9      	b.n	8016bda <_strtod_l+0x72>
 8016fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016fe8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016fec:	4293      	cmp	r3, r2
 8016fee:	dbbc      	blt.n	8016f6a <_strtod_l+0x402>
 8016ff0:	4c41      	ldr	r4, [pc, #260]	@ (80170f8 <_strtod_l+0x590>)
 8016ff2:	f1c5 050f 	rsb	r5, r5, #15
 8016ff6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016ffa:	4652      	mov	r2, sl
 8016ffc:	465b      	mov	r3, fp
 8016ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017002:	f7e9 fb21 	bl	8000648 <__aeabi_dmul>
 8017006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017008:	1b5d      	subs	r5, r3, r5
 801700a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801700e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017012:	e78f      	b.n	8016f34 <_strtod_l+0x3cc>
 8017014:	3316      	adds	r3, #22
 8017016:	dba8      	blt.n	8016f6a <_strtod_l+0x402>
 8017018:	4b37      	ldr	r3, [pc, #220]	@ (80170f8 <_strtod_l+0x590>)
 801701a:	eba9 0808 	sub.w	r8, r9, r8
 801701e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017022:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017026:	4650      	mov	r0, sl
 8017028:	4659      	mov	r1, fp
 801702a:	f7e9 fc37 	bl	800089c <__aeabi_ddiv>
 801702e:	e783      	b.n	8016f38 <_strtod_l+0x3d0>
 8017030:	4b32      	ldr	r3, [pc, #200]	@ (80170fc <_strtod_l+0x594>)
 8017032:	9308      	str	r3, [sp, #32]
 8017034:	2300      	movs	r3, #0
 8017036:	1124      	asrs	r4, r4, #4
 8017038:	4650      	mov	r0, sl
 801703a:	4659      	mov	r1, fp
 801703c:	461e      	mov	r6, r3
 801703e:	2c01      	cmp	r4, #1
 8017040:	dc21      	bgt.n	8017086 <_strtod_l+0x51e>
 8017042:	b10b      	cbz	r3, 8017048 <_strtod_l+0x4e0>
 8017044:	4682      	mov	sl, r0
 8017046:	468b      	mov	fp, r1
 8017048:	492c      	ldr	r1, [pc, #176]	@ (80170fc <_strtod_l+0x594>)
 801704a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801704e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017052:	4652      	mov	r2, sl
 8017054:	465b      	mov	r3, fp
 8017056:	e9d1 0100 	ldrd	r0, r1, [r1]
 801705a:	f7e9 faf5 	bl	8000648 <__aeabi_dmul>
 801705e:	4b28      	ldr	r3, [pc, #160]	@ (8017100 <_strtod_l+0x598>)
 8017060:	460a      	mov	r2, r1
 8017062:	400b      	ands	r3, r1
 8017064:	4927      	ldr	r1, [pc, #156]	@ (8017104 <_strtod_l+0x59c>)
 8017066:	428b      	cmp	r3, r1
 8017068:	4682      	mov	sl, r0
 801706a:	d898      	bhi.n	8016f9e <_strtod_l+0x436>
 801706c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017070:	428b      	cmp	r3, r1
 8017072:	bf86      	itte	hi
 8017074:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8017108 <_strtod_l+0x5a0>
 8017078:	f04f 3aff 	movhi.w	sl, #4294967295
 801707c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017080:	2300      	movs	r3, #0
 8017082:	9308      	str	r3, [sp, #32]
 8017084:	e07a      	b.n	801717c <_strtod_l+0x614>
 8017086:	07e2      	lsls	r2, r4, #31
 8017088:	d505      	bpl.n	8017096 <_strtod_l+0x52e>
 801708a:	9b08      	ldr	r3, [sp, #32]
 801708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017090:	f7e9 fada 	bl	8000648 <__aeabi_dmul>
 8017094:	2301      	movs	r3, #1
 8017096:	9a08      	ldr	r2, [sp, #32]
 8017098:	3208      	adds	r2, #8
 801709a:	3601      	adds	r6, #1
 801709c:	1064      	asrs	r4, r4, #1
 801709e:	9208      	str	r2, [sp, #32]
 80170a0:	e7cd      	b.n	801703e <_strtod_l+0x4d6>
 80170a2:	d0ed      	beq.n	8017080 <_strtod_l+0x518>
 80170a4:	4264      	negs	r4, r4
 80170a6:	f014 020f 	ands.w	r2, r4, #15
 80170aa:	d00a      	beq.n	80170c2 <_strtod_l+0x55a>
 80170ac:	4b12      	ldr	r3, [pc, #72]	@ (80170f8 <_strtod_l+0x590>)
 80170ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170b2:	4650      	mov	r0, sl
 80170b4:	4659      	mov	r1, fp
 80170b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ba:	f7e9 fbef 	bl	800089c <__aeabi_ddiv>
 80170be:	4682      	mov	sl, r0
 80170c0:	468b      	mov	fp, r1
 80170c2:	1124      	asrs	r4, r4, #4
 80170c4:	d0dc      	beq.n	8017080 <_strtod_l+0x518>
 80170c6:	2c1f      	cmp	r4, #31
 80170c8:	dd20      	ble.n	801710c <_strtod_l+0x5a4>
 80170ca:	2400      	movs	r4, #0
 80170cc:	46a0      	mov	r8, r4
 80170ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80170d0:	46a1      	mov	r9, r4
 80170d2:	9a05      	ldr	r2, [sp, #20]
 80170d4:	2322      	movs	r3, #34	@ 0x22
 80170d6:	f04f 0a00 	mov.w	sl, #0
 80170da:	f04f 0b00 	mov.w	fp, #0
 80170de:	6013      	str	r3, [r2, #0]
 80170e0:	e768      	b.n	8016fb4 <_strtod_l+0x44c>
 80170e2:	bf00      	nop
 80170e4:	08019a59 	.word	0x08019a59
 80170e8:	08019c6c 	.word	0x08019c6c
 80170ec:	08019a51 	.word	0x08019a51
 80170f0:	08019a88 	.word	0x08019a88
 80170f4:	08019a4b 	.word	0x08019a4b
 80170f8:	08019ba0 	.word	0x08019ba0
 80170fc:	08019b78 	.word	0x08019b78
 8017100:	7ff00000 	.word	0x7ff00000
 8017104:	7ca00000 	.word	0x7ca00000
 8017108:	7fefffff 	.word	0x7fefffff
 801710c:	f014 0310 	ands.w	r3, r4, #16
 8017110:	bf18      	it	ne
 8017112:	236a      	movne	r3, #106	@ 0x6a
 8017114:	4ea9      	ldr	r6, [pc, #676]	@ (80173bc <_strtod_l+0x854>)
 8017116:	9308      	str	r3, [sp, #32]
 8017118:	4650      	mov	r0, sl
 801711a:	4659      	mov	r1, fp
 801711c:	2300      	movs	r3, #0
 801711e:	07e2      	lsls	r2, r4, #31
 8017120:	d504      	bpl.n	801712c <_strtod_l+0x5c4>
 8017122:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017126:	f7e9 fa8f 	bl	8000648 <__aeabi_dmul>
 801712a:	2301      	movs	r3, #1
 801712c:	1064      	asrs	r4, r4, #1
 801712e:	f106 0608 	add.w	r6, r6, #8
 8017132:	d1f4      	bne.n	801711e <_strtod_l+0x5b6>
 8017134:	b10b      	cbz	r3, 801713a <_strtod_l+0x5d2>
 8017136:	4682      	mov	sl, r0
 8017138:	468b      	mov	fp, r1
 801713a:	9b08      	ldr	r3, [sp, #32]
 801713c:	b1b3      	cbz	r3, 801716c <_strtod_l+0x604>
 801713e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017142:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8017146:	2b00      	cmp	r3, #0
 8017148:	4659      	mov	r1, fp
 801714a:	dd0f      	ble.n	801716c <_strtod_l+0x604>
 801714c:	2b1f      	cmp	r3, #31
 801714e:	dd55      	ble.n	80171fc <_strtod_l+0x694>
 8017150:	2b34      	cmp	r3, #52	@ 0x34
 8017152:	bfde      	ittt	le
 8017154:	f04f 33ff 	movle.w	r3, #4294967295
 8017158:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801715c:	4093      	lslle	r3, r2
 801715e:	f04f 0a00 	mov.w	sl, #0
 8017162:	bfcc      	ite	gt
 8017164:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017168:	ea03 0b01 	andle.w	fp, r3, r1
 801716c:	2200      	movs	r2, #0
 801716e:	2300      	movs	r3, #0
 8017170:	4650      	mov	r0, sl
 8017172:	4659      	mov	r1, fp
 8017174:	f7e9 fcd0 	bl	8000b18 <__aeabi_dcmpeq>
 8017178:	2800      	cmp	r0, #0
 801717a:	d1a6      	bne.n	80170ca <_strtod_l+0x562>
 801717c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801717e:	9300      	str	r3, [sp, #0]
 8017180:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017182:	9805      	ldr	r0, [sp, #20]
 8017184:	462b      	mov	r3, r5
 8017186:	463a      	mov	r2, r7
 8017188:	f7ff f8c4 	bl	8016314 <__s2b>
 801718c:	900a      	str	r0, [sp, #40]	@ 0x28
 801718e:	2800      	cmp	r0, #0
 8017190:	f43f af05 	beq.w	8016f9e <_strtod_l+0x436>
 8017194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017196:	2a00      	cmp	r2, #0
 8017198:	eba9 0308 	sub.w	r3, r9, r8
 801719c:	bfa8      	it	ge
 801719e:	2300      	movge	r3, #0
 80171a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80171a2:	2400      	movs	r4, #0
 80171a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80171a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80171aa:	46a0      	mov	r8, r4
 80171ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171ae:	9805      	ldr	r0, [sp, #20]
 80171b0:	6859      	ldr	r1, [r3, #4]
 80171b2:	f7ff f807 	bl	80161c4 <_Balloc>
 80171b6:	4681      	mov	r9, r0
 80171b8:	2800      	cmp	r0, #0
 80171ba:	f43f aef4 	beq.w	8016fa6 <_strtod_l+0x43e>
 80171be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171c0:	691a      	ldr	r2, [r3, #16]
 80171c2:	3202      	adds	r2, #2
 80171c4:	f103 010c 	add.w	r1, r3, #12
 80171c8:	0092      	lsls	r2, r2, #2
 80171ca:	300c      	adds	r0, #12
 80171cc:	f7fe f94f 	bl	801546e <memcpy>
 80171d0:	ec4b ab10 	vmov	d0, sl, fp
 80171d4:	9805      	ldr	r0, [sp, #20]
 80171d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80171d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80171da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80171de:	f7ff fbd5 	bl	801698c <__d2b>
 80171e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80171e4:	2800      	cmp	r0, #0
 80171e6:	f43f aede 	beq.w	8016fa6 <_strtod_l+0x43e>
 80171ea:	9805      	ldr	r0, [sp, #20]
 80171ec:	2101      	movs	r1, #1
 80171ee:	f7ff f927 	bl	8016440 <__i2b>
 80171f2:	4680      	mov	r8, r0
 80171f4:	b948      	cbnz	r0, 801720a <_strtod_l+0x6a2>
 80171f6:	f04f 0800 	mov.w	r8, #0
 80171fa:	e6d4      	b.n	8016fa6 <_strtod_l+0x43e>
 80171fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017200:	fa02 f303 	lsl.w	r3, r2, r3
 8017204:	ea03 0a0a 	and.w	sl, r3, sl
 8017208:	e7b0      	b.n	801716c <_strtod_l+0x604>
 801720a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801720c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801720e:	2d00      	cmp	r5, #0
 8017210:	bfab      	itete	ge
 8017212:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8017214:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017216:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8017218:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801721a:	bfac      	ite	ge
 801721c:	18ef      	addge	r7, r5, r3
 801721e:	1b5e      	sublt	r6, r3, r5
 8017220:	9b08      	ldr	r3, [sp, #32]
 8017222:	1aed      	subs	r5, r5, r3
 8017224:	4415      	add	r5, r2
 8017226:	4b66      	ldr	r3, [pc, #408]	@ (80173c0 <_strtod_l+0x858>)
 8017228:	3d01      	subs	r5, #1
 801722a:	429d      	cmp	r5, r3
 801722c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8017230:	da50      	bge.n	80172d4 <_strtod_l+0x76c>
 8017232:	1b5b      	subs	r3, r3, r5
 8017234:	2b1f      	cmp	r3, #31
 8017236:	eba2 0203 	sub.w	r2, r2, r3
 801723a:	f04f 0101 	mov.w	r1, #1
 801723e:	dc3d      	bgt.n	80172bc <_strtod_l+0x754>
 8017240:	fa01 f303 	lsl.w	r3, r1, r3
 8017244:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017246:	2300      	movs	r3, #0
 8017248:	9310      	str	r3, [sp, #64]	@ 0x40
 801724a:	18bd      	adds	r5, r7, r2
 801724c:	9b08      	ldr	r3, [sp, #32]
 801724e:	42af      	cmp	r7, r5
 8017250:	4416      	add	r6, r2
 8017252:	441e      	add	r6, r3
 8017254:	463b      	mov	r3, r7
 8017256:	bfa8      	it	ge
 8017258:	462b      	movge	r3, r5
 801725a:	42b3      	cmp	r3, r6
 801725c:	bfa8      	it	ge
 801725e:	4633      	movge	r3, r6
 8017260:	2b00      	cmp	r3, #0
 8017262:	bfc2      	ittt	gt
 8017264:	1aed      	subgt	r5, r5, r3
 8017266:	1af6      	subgt	r6, r6, r3
 8017268:	1aff      	subgt	r7, r7, r3
 801726a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801726c:	2b00      	cmp	r3, #0
 801726e:	dd16      	ble.n	801729e <_strtod_l+0x736>
 8017270:	4641      	mov	r1, r8
 8017272:	9805      	ldr	r0, [sp, #20]
 8017274:	461a      	mov	r2, r3
 8017276:	f7ff f9a3 	bl	80165c0 <__pow5mult>
 801727a:	4680      	mov	r8, r0
 801727c:	2800      	cmp	r0, #0
 801727e:	d0ba      	beq.n	80171f6 <_strtod_l+0x68e>
 8017280:	4601      	mov	r1, r0
 8017282:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017284:	9805      	ldr	r0, [sp, #20]
 8017286:	f7ff f8f1 	bl	801646c <__multiply>
 801728a:	900e      	str	r0, [sp, #56]	@ 0x38
 801728c:	2800      	cmp	r0, #0
 801728e:	f43f ae8a 	beq.w	8016fa6 <_strtod_l+0x43e>
 8017292:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017294:	9805      	ldr	r0, [sp, #20]
 8017296:	f7fe ffd5 	bl	8016244 <_Bfree>
 801729a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801729c:	931a      	str	r3, [sp, #104]	@ 0x68
 801729e:	2d00      	cmp	r5, #0
 80172a0:	dc1d      	bgt.n	80172de <_strtod_l+0x776>
 80172a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	dd23      	ble.n	80172f0 <_strtod_l+0x788>
 80172a8:	4649      	mov	r1, r9
 80172aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80172ac:	9805      	ldr	r0, [sp, #20]
 80172ae:	f7ff f987 	bl	80165c0 <__pow5mult>
 80172b2:	4681      	mov	r9, r0
 80172b4:	b9e0      	cbnz	r0, 80172f0 <_strtod_l+0x788>
 80172b6:	f04f 0900 	mov.w	r9, #0
 80172ba:	e674      	b.n	8016fa6 <_strtod_l+0x43e>
 80172bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80172c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80172c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80172c8:	35e2      	adds	r5, #226	@ 0xe2
 80172ca:	fa01 f305 	lsl.w	r3, r1, r5
 80172ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80172d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80172d2:	e7ba      	b.n	801724a <_strtod_l+0x6e2>
 80172d4:	2300      	movs	r3, #0
 80172d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80172d8:	2301      	movs	r3, #1
 80172da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80172dc:	e7b5      	b.n	801724a <_strtod_l+0x6e2>
 80172de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80172e0:	9805      	ldr	r0, [sp, #20]
 80172e2:	462a      	mov	r2, r5
 80172e4:	f7ff f9c6 	bl	8016674 <__lshift>
 80172e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d1d9      	bne.n	80172a2 <_strtod_l+0x73a>
 80172ee:	e65a      	b.n	8016fa6 <_strtod_l+0x43e>
 80172f0:	2e00      	cmp	r6, #0
 80172f2:	dd07      	ble.n	8017304 <_strtod_l+0x79c>
 80172f4:	4649      	mov	r1, r9
 80172f6:	9805      	ldr	r0, [sp, #20]
 80172f8:	4632      	mov	r2, r6
 80172fa:	f7ff f9bb 	bl	8016674 <__lshift>
 80172fe:	4681      	mov	r9, r0
 8017300:	2800      	cmp	r0, #0
 8017302:	d0d8      	beq.n	80172b6 <_strtod_l+0x74e>
 8017304:	2f00      	cmp	r7, #0
 8017306:	dd08      	ble.n	801731a <_strtod_l+0x7b2>
 8017308:	4641      	mov	r1, r8
 801730a:	9805      	ldr	r0, [sp, #20]
 801730c:	463a      	mov	r2, r7
 801730e:	f7ff f9b1 	bl	8016674 <__lshift>
 8017312:	4680      	mov	r8, r0
 8017314:	2800      	cmp	r0, #0
 8017316:	f43f ae46 	beq.w	8016fa6 <_strtod_l+0x43e>
 801731a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801731c:	9805      	ldr	r0, [sp, #20]
 801731e:	464a      	mov	r2, r9
 8017320:	f7ff fa30 	bl	8016784 <__mdiff>
 8017324:	4604      	mov	r4, r0
 8017326:	2800      	cmp	r0, #0
 8017328:	f43f ae3d 	beq.w	8016fa6 <_strtod_l+0x43e>
 801732c:	68c3      	ldr	r3, [r0, #12]
 801732e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017330:	2300      	movs	r3, #0
 8017332:	60c3      	str	r3, [r0, #12]
 8017334:	4641      	mov	r1, r8
 8017336:	f7ff fa09 	bl	801674c <__mcmp>
 801733a:	2800      	cmp	r0, #0
 801733c:	da46      	bge.n	80173cc <_strtod_l+0x864>
 801733e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017340:	ea53 030a 	orrs.w	r3, r3, sl
 8017344:	d16c      	bne.n	8017420 <_strtod_l+0x8b8>
 8017346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801734a:	2b00      	cmp	r3, #0
 801734c:	d168      	bne.n	8017420 <_strtod_l+0x8b8>
 801734e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017352:	0d1b      	lsrs	r3, r3, #20
 8017354:	051b      	lsls	r3, r3, #20
 8017356:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801735a:	d961      	bls.n	8017420 <_strtod_l+0x8b8>
 801735c:	6963      	ldr	r3, [r4, #20]
 801735e:	b913      	cbnz	r3, 8017366 <_strtod_l+0x7fe>
 8017360:	6923      	ldr	r3, [r4, #16]
 8017362:	2b01      	cmp	r3, #1
 8017364:	dd5c      	ble.n	8017420 <_strtod_l+0x8b8>
 8017366:	4621      	mov	r1, r4
 8017368:	2201      	movs	r2, #1
 801736a:	9805      	ldr	r0, [sp, #20]
 801736c:	f7ff f982 	bl	8016674 <__lshift>
 8017370:	4641      	mov	r1, r8
 8017372:	4604      	mov	r4, r0
 8017374:	f7ff f9ea 	bl	801674c <__mcmp>
 8017378:	2800      	cmp	r0, #0
 801737a:	dd51      	ble.n	8017420 <_strtod_l+0x8b8>
 801737c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017380:	9a08      	ldr	r2, [sp, #32]
 8017382:	0d1b      	lsrs	r3, r3, #20
 8017384:	051b      	lsls	r3, r3, #20
 8017386:	2a00      	cmp	r2, #0
 8017388:	d06b      	beq.n	8017462 <_strtod_l+0x8fa>
 801738a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801738e:	d868      	bhi.n	8017462 <_strtod_l+0x8fa>
 8017390:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017394:	f67f ae9d 	bls.w	80170d2 <_strtod_l+0x56a>
 8017398:	4b0a      	ldr	r3, [pc, #40]	@ (80173c4 <_strtod_l+0x85c>)
 801739a:	4650      	mov	r0, sl
 801739c:	4659      	mov	r1, fp
 801739e:	2200      	movs	r2, #0
 80173a0:	f7e9 f952 	bl	8000648 <__aeabi_dmul>
 80173a4:	4b08      	ldr	r3, [pc, #32]	@ (80173c8 <_strtod_l+0x860>)
 80173a6:	400b      	ands	r3, r1
 80173a8:	4682      	mov	sl, r0
 80173aa:	468b      	mov	fp, r1
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	f47f ae05 	bne.w	8016fbc <_strtod_l+0x454>
 80173b2:	9a05      	ldr	r2, [sp, #20]
 80173b4:	2322      	movs	r3, #34	@ 0x22
 80173b6:	6013      	str	r3, [r2, #0]
 80173b8:	e600      	b.n	8016fbc <_strtod_l+0x454>
 80173ba:	bf00      	nop
 80173bc:	08019c98 	.word	0x08019c98
 80173c0:	fffffc02 	.word	0xfffffc02
 80173c4:	39500000 	.word	0x39500000
 80173c8:	7ff00000 	.word	0x7ff00000
 80173cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80173d0:	d165      	bne.n	801749e <_strtod_l+0x936>
 80173d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80173d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173d8:	b35a      	cbz	r2, 8017432 <_strtod_l+0x8ca>
 80173da:	4a9f      	ldr	r2, [pc, #636]	@ (8017658 <_strtod_l+0xaf0>)
 80173dc:	4293      	cmp	r3, r2
 80173de:	d12b      	bne.n	8017438 <_strtod_l+0x8d0>
 80173e0:	9b08      	ldr	r3, [sp, #32]
 80173e2:	4651      	mov	r1, sl
 80173e4:	b303      	cbz	r3, 8017428 <_strtod_l+0x8c0>
 80173e6:	4b9d      	ldr	r3, [pc, #628]	@ (801765c <_strtod_l+0xaf4>)
 80173e8:	465a      	mov	r2, fp
 80173ea:	4013      	ands	r3, r2
 80173ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80173f0:	f04f 32ff 	mov.w	r2, #4294967295
 80173f4:	d81b      	bhi.n	801742e <_strtod_l+0x8c6>
 80173f6:	0d1b      	lsrs	r3, r3, #20
 80173f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80173fc:	fa02 f303 	lsl.w	r3, r2, r3
 8017400:	4299      	cmp	r1, r3
 8017402:	d119      	bne.n	8017438 <_strtod_l+0x8d0>
 8017404:	4b96      	ldr	r3, [pc, #600]	@ (8017660 <_strtod_l+0xaf8>)
 8017406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017408:	429a      	cmp	r2, r3
 801740a:	d102      	bne.n	8017412 <_strtod_l+0x8aa>
 801740c:	3101      	adds	r1, #1
 801740e:	f43f adca 	beq.w	8016fa6 <_strtod_l+0x43e>
 8017412:	4b92      	ldr	r3, [pc, #584]	@ (801765c <_strtod_l+0xaf4>)
 8017414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017416:	401a      	ands	r2, r3
 8017418:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801741c:	f04f 0a00 	mov.w	sl, #0
 8017420:	9b08      	ldr	r3, [sp, #32]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d1b8      	bne.n	8017398 <_strtod_l+0x830>
 8017426:	e5c9      	b.n	8016fbc <_strtod_l+0x454>
 8017428:	f04f 33ff 	mov.w	r3, #4294967295
 801742c:	e7e8      	b.n	8017400 <_strtod_l+0x898>
 801742e:	4613      	mov	r3, r2
 8017430:	e7e6      	b.n	8017400 <_strtod_l+0x898>
 8017432:	ea53 030a 	orrs.w	r3, r3, sl
 8017436:	d0a1      	beq.n	801737c <_strtod_l+0x814>
 8017438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801743a:	b1db      	cbz	r3, 8017474 <_strtod_l+0x90c>
 801743c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801743e:	4213      	tst	r3, r2
 8017440:	d0ee      	beq.n	8017420 <_strtod_l+0x8b8>
 8017442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017444:	9a08      	ldr	r2, [sp, #32]
 8017446:	4650      	mov	r0, sl
 8017448:	4659      	mov	r1, fp
 801744a:	b1bb      	cbz	r3, 801747c <_strtod_l+0x914>
 801744c:	f7ff fb6c 	bl	8016b28 <sulp>
 8017450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017454:	ec53 2b10 	vmov	r2, r3, d0
 8017458:	f7e8 ff40 	bl	80002dc <__adddf3>
 801745c:	4682      	mov	sl, r0
 801745e:	468b      	mov	fp, r1
 8017460:	e7de      	b.n	8017420 <_strtod_l+0x8b8>
 8017462:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017466:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801746a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801746e:	f04f 3aff 	mov.w	sl, #4294967295
 8017472:	e7d5      	b.n	8017420 <_strtod_l+0x8b8>
 8017474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017476:	ea13 0f0a 	tst.w	r3, sl
 801747a:	e7e1      	b.n	8017440 <_strtod_l+0x8d8>
 801747c:	f7ff fb54 	bl	8016b28 <sulp>
 8017480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017484:	ec53 2b10 	vmov	r2, r3, d0
 8017488:	f7e8 ff26 	bl	80002d8 <__aeabi_dsub>
 801748c:	2200      	movs	r2, #0
 801748e:	2300      	movs	r3, #0
 8017490:	4682      	mov	sl, r0
 8017492:	468b      	mov	fp, r1
 8017494:	f7e9 fb40 	bl	8000b18 <__aeabi_dcmpeq>
 8017498:	2800      	cmp	r0, #0
 801749a:	d0c1      	beq.n	8017420 <_strtod_l+0x8b8>
 801749c:	e619      	b.n	80170d2 <_strtod_l+0x56a>
 801749e:	4641      	mov	r1, r8
 80174a0:	4620      	mov	r0, r4
 80174a2:	f7ff facb 	bl	8016a3c <__ratio>
 80174a6:	ec57 6b10 	vmov	r6, r7, d0
 80174aa:	2200      	movs	r2, #0
 80174ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80174b0:	4630      	mov	r0, r6
 80174b2:	4639      	mov	r1, r7
 80174b4:	f7e9 fb44 	bl	8000b40 <__aeabi_dcmple>
 80174b8:	2800      	cmp	r0, #0
 80174ba:	d06f      	beq.n	801759c <_strtod_l+0xa34>
 80174bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d17a      	bne.n	80175b8 <_strtod_l+0xa50>
 80174c2:	f1ba 0f00 	cmp.w	sl, #0
 80174c6:	d158      	bne.n	801757a <_strtod_l+0xa12>
 80174c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d15a      	bne.n	8017588 <_strtod_l+0xa20>
 80174d2:	4b64      	ldr	r3, [pc, #400]	@ (8017664 <_strtod_l+0xafc>)
 80174d4:	2200      	movs	r2, #0
 80174d6:	4630      	mov	r0, r6
 80174d8:	4639      	mov	r1, r7
 80174da:	f7e9 fb27 	bl	8000b2c <__aeabi_dcmplt>
 80174de:	2800      	cmp	r0, #0
 80174e0:	d159      	bne.n	8017596 <_strtod_l+0xa2e>
 80174e2:	4630      	mov	r0, r6
 80174e4:	4639      	mov	r1, r7
 80174e6:	4b60      	ldr	r3, [pc, #384]	@ (8017668 <_strtod_l+0xb00>)
 80174e8:	2200      	movs	r2, #0
 80174ea:	f7e9 f8ad 	bl	8000648 <__aeabi_dmul>
 80174ee:	4606      	mov	r6, r0
 80174f0:	460f      	mov	r7, r1
 80174f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80174f6:	9606      	str	r6, [sp, #24]
 80174f8:	9307      	str	r3, [sp, #28]
 80174fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80174fe:	4d57      	ldr	r5, [pc, #348]	@ (801765c <_strtod_l+0xaf4>)
 8017500:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017506:	401d      	ands	r5, r3
 8017508:	4b58      	ldr	r3, [pc, #352]	@ (801766c <_strtod_l+0xb04>)
 801750a:	429d      	cmp	r5, r3
 801750c:	f040 80b2 	bne.w	8017674 <_strtod_l+0xb0c>
 8017510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017512:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017516:	ec4b ab10 	vmov	d0, sl, fp
 801751a:	f7ff f9c7 	bl	80168ac <__ulp>
 801751e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017522:	ec51 0b10 	vmov	r0, r1, d0
 8017526:	f7e9 f88f 	bl	8000648 <__aeabi_dmul>
 801752a:	4652      	mov	r2, sl
 801752c:	465b      	mov	r3, fp
 801752e:	f7e8 fed5 	bl	80002dc <__adddf3>
 8017532:	460b      	mov	r3, r1
 8017534:	4949      	ldr	r1, [pc, #292]	@ (801765c <_strtod_l+0xaf4>)
 8017536:	4a4e      	ldr	r2, [pc, #312]	@ (8017670 <_strtod_l+0xb08>)
 8017538:	4019      	ands	r1, r3
 801753a:	4291      	cmp	r1, r2
 801753c:	4682      	mov	sl, r0
 801753e:	d942      	bls.n	80175c6 <_strtod_l+0xa5e>
 8017540:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017542:	4b47      	ldr	r3, [pc, #284]	@ (8017660 <_strtod_l+0xaf8>)
 8017544:	429a      	cmp	r2, r3
 8017546:	d103      	bne.n	8017550 <_strtod_l+0x9e8>
 8017548:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801754a:	3301      	adds	r3, #1
 801754c:	f43f ad2b 	beq.w	8016fa6 <_strtod_l+0x43e>
 8017550:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017660 <_strtod_l+0xaf8>
 8017554:	f04f 3aff 	mov.w	sl, #4294967295
 8017558:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801755a:	9805      	ldr	r0, [sp, #20]
 801755c:	f7fe fe72 	bl	8016244 <_Bfree>
 8017560:	9805      	ldr	r0, [sp, #20]
 8017562:	4649      	mov	r1, r9
 8017564:	f7fe fe6e 	bl	8016244 <_Bfree>
 8017568:	9805      	ldr	r0, [sp, #20]
 801756a:	4641      	mov	r1, r8
 801756c:	f7fe fe6a 	bl	8016244 <_Bfree>
 8017570:	9805      	ldr	r0, [sp, #20]
 8017572:	4621      	mov	r1, r4
 8017574:	f7fe fe66 	bl	8016244 <_Bfree>
 8017578:	e618      	b.n	80171ac <_strtod_l+0x644>
 801757a:	f1ba 0f01 	cmp.w	sl, #1
 801757e:	d103      	bne.n	8017588 <_strtod_l+0xa20>
 8017580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017582:	2b00      	cmp	r3, #0
 8017584:	f43f ada5 	beq.w	80170d2 <_strtod_l+0x56a>
 8017588:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017638 <_strtod_l+0xad0>
 801758c:	4f35      	ldr	r7, [pc, #212]	@ (8017664 <_strtod_l+0xafc>)
 801758e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017592:	2600      	movs	r6, #0
 8017594:	e7b1      	b.n	80174fa <_strtod_l+0x992>
 8017596:	4f34      	ldr	r7, [pc, #208]	@ (8017668 <_strtod_l+0xb00>)
 8017598:	2600      	movs	r6, #0
 801759a:	e7aa      	b.n	80174f2 <_strtod_l+0x98a>
 801759c:	4b32      	ldr	r3, [pc, #200]	@ (8017668 <_strtod_l+0xb00>)
 801759e:	4630      	mov	r0, r6
 80175a0:	4639      	mov	r1, r7
 80175a2:	2200      	movs	r2, #0
 80175a4:	f7e9 f850 	bl	8000648 <__aeabi_dmul>
 80175a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175aa:	4606      	mov	r6, r0
 80175ac:	460f      	mov	r7, r1
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d09f      	beq.n	80174f2 <_strtod_l+0x98a>
 80175b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80175b6:	e7a0      	b.n	80174fa <_strtod_l+0x992>
 80175b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017640 <_strtod_l+0xad8>
 80175bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80175c0:	ec57 6b17 	vmov	r6, r7, d7
 80175c4:	e799      	b.n	80174fa <_strtod_l+0x992>
 80175c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80175ca:	9b08      	ldr	r3, [sp, #32]
 80175cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d1c1      	bne.n	8017558 <_strtod_l+0x9f0>
 80175d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80175d8:	0d1b      	lsrs	r3, r3, #20
 80175da:	051b      	lsls	r3, r3, #20
 80175dc:	429d      	cmp	r5, r3
 80175de:	d1bb      	bne.n	8017558 <_strtod_l+0x9f0>
 80175e0:	4630      	mov	r0, r6
 80175e2:	4639      	mov	r1, r7
 80175e4:	f7e9 fb90 	bl	8000d08 <__aeabi_d2lz>
 80175e8:	f7e9 f800 	bl	80005ec <__aeabi_l2d>
 80175ec:	4602      	mov	r2, r0
 80175ee:	460b      	mov	r3, r1
 80175f0:	4630      	mov	r0, r6
 80175f2:	4639      	mov	r1, r7
 80175f4:	f7e8 fe70 	bl	80002d8 <__aeabi_dsub>
 80175f8:	460b      	mov	r3, r1
 80175fa:	4602      	mov	r2, r0
 80175fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017600:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017606:	ea46 060a 	orr.w	r6, r6, sl
 801760a:	431e      	orrs	r6, r3
 801760c:	d06f      	beq.n	80176ee <_strtod_l+0xb86>
 801760e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017648 <_strtod_l+0xae0>)
 8017610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017614:	f7e9 fa8a 	bl	8000b2c <__aeabi_dcmplt>
 8017618:	2800      	cmp	r0, #0
 801761a:	f47f accf 	bne.w	8016fbc <_strtod_l+0x454>
 801761e:	a30c      	add	r3, pc, #48	@ (adr r3, 8017650 <_strtod_l+0xae8>)
 8017620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017628:	f7e9 fa9e 	bl	8000b68 <__aeabi_dcmpgt>
 801762c:	2800      	cmp	r0, #0
 801762e:	d093      	beq.n	8017558 <_strtod_l+0x9f0>
 8017630:	e4c4      	b.n	8016fbc <_strtod_l+0x454>
 8017632:	bf00      	nop
 8017634:	f3af 8000 	nop.w
 8017638:	00000000 	.word	0x00000000
 801763c:	bff00000 	.word	0xbff00000
 8017640:	00000000 	.word	0x00000000
 8017644:	3ff00000 	.word	0x3ff00000
 8017648:	94a03595 	.word	0x94a03595
 801764c:	3fdfffff 	.word	0x3fdfffff
 8017650:	35afe535 	.word	0x35afe535
 8017654:	3fe00000 	.word	0x3fe00000
 8017658:	000fffff 	.word	0x000fffff
 801765c:	7ff00000 	.word	0x7ff00000
 8017660:	7fefffff 	.word	0x7fefffff
 8017664:	3ff00000 	.word	0x3ff00000
 8017668:	3fe00000 	.word	0x3fe00000
 801766c:	7fe00000 	.word	0x7fe00000
 8017670:	7c9fffff 	.word	0x7c9fffff
 8017674:	9b08      	ldr	r3, [sp, #32]
 8017676:	b323      	cbz	r3, 80176c2 <_strtod_l+0xb5a>
 8017678:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801767c:	d821      	bhi.n	80176c2 <_strtod_l+0xb5a>
 801767e:	a328      	add	r3, pc, #160	@ (adr r3, 8017720 <_strtod_l+0xbb8>)
 8017680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017684:	4630      	mov	r0, r6
 8017686:	4639      	mov	r1, r7
 8017688:	f7e9 fa5a 	bl	8000b40 <__aeabi_dcmple>
 801768c:	b1a0      	cbz	r0, 80176b8 <_strtod_l+0xb50>
 801768e:	4639      	mov	r1, r7
 8017690:	4630      	mov	r0, r6
 8017692:	f7e9 fab1 	bl	8000bf8 <__aeabi_d2uiz>
 8017696:	2801      	cmp	r0, #1
 8017698:	bf38      	it	cc
 801769a:	2001      	movcc	r0, #1
 801769c:	f7e8 ff5a 	bl	8000554 <__aeabi_ui2d>
 80176a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176a2:	4606      	mov	r6, r0
 80176a4:	460f      	mov	r7, r1
 80176a6:	b9fb      	cbnz	r3, 80176e8 <_strtod_l+0xb80>
 80176a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80176ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80176ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80176b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80176b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80176b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80176ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80176be:	1b5b      	subs	r3, r3, r5
 80176c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80176c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80176c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80176ca:	f7ff f8ef 	bl	80168ac <__ulp>
 80176ce:	4650      	mov	r0, sl
 80176d0:	ec53 2b10 	vmov	r2, r3, d0
 80176d4:	4659      	mov	r1, fp
 80176d6:	f7e8 ffb7 	bl	8000648 <__aeabi_dmul>
 80176da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80176de:	f7e8 fdfd 	bl	80002dc <__adddf3>
 80176e2:	4682      	mov	sl, r0
 80176e4:	468b      	mov	fp, r1
 80176e6:	e770      	b.n	80175ca <_strtod_l+0xa62>
 80176e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80176ec:	e7e0      	b.n	80176b0 <_strtod_l+0xb48>
 80176ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8017728 <_strtod_l+0xbc0>)
 80176f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176f4:	f7e9 fa1a 	bl	8000b2c <__aeabi_dcmplt>
 80176f8:	e798      	b.n	801762c <_strtod_l+0xac4>
 80176fa:	2300      	movs	r3, #0
 80176fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80176fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017702:	6013      	str	r3, [r2, #0]
 8017704:	f7ff ba6d 	b.w	8016be2 <_strtod_l+0x7a>
 8017708:	2a65      	cmp	r2, #101	@ 0x65
 801770a:	f43f ab66 	beq.w	8016dda <_strtod_l+0x272>
 801770e:	2a45      	cmp	r2, #69	@ 0x45
 8017710:	f43f ab63 	beq.w	8016dda <_strtod_l+0x272>
 8017714:	2301      	movs	r3, #1
 8017716:	f7ff bb9e 	b.w	8016e56 <_strtod_l+0x2ee>
 801771a:	bf00      	nop
 801771c:	f3af 8000 	nop.w
 8017720:	ffc00000 	.word	0xffc00000
 8017724:	41dfffff 	.word	0x41dfffff
 8017728:	94a03595 	.word	0x94a03595
 801772c:	3fcfffff 	.word	0x3fcfffff

08017730 <_strtod_r>:
 8017730:	4b01      	ldr	r3, [pc, #4]	@ (8017738 <_strtod_r+0x8>)
 8017732:	f7ff ba19 	b.w	8016b68 <_strtod_l>
 8017736:	bf00      	nop
 8017738:	200000e0 	.word	0x200000e0

0801773c <_strtol_l.constprop.0>:
 801773c:	2b24      	cmp	r3, #36	@ 0x24
 801773e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017742:	4686      	mov	lr, r0
 8017744:	4690      	mov	r8, r2
 8017746:	d801      	bhi.n	801774c <_strtol_l.constprop.0+0x10>
 8017748:	2b01      	cmp	r3, #1
 801774a:	d106      	bne.n	801775a <_strtol_l.constprop.0+0x1e>
 801774c:	f7fd fe62 	bl	8015414 <__errno>
 8017750:	2316      	movs	r3, #22
 8017752:	6003      	str	r3, [r0, #0]
 8017754:	2000      	movs	r0, #0
 8017756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801775a:	4834      	ldr	r0, [pc, #208]	@ (801782c <_strtol_l.constprop.0+0xf0>)
 801775c:	460d      	mov	r5, r1
 801775e:	462a      	mov	r2, r5
 8017760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017764:	5d06      	ldrb	r6, [r0, r4]
 8017766:	f016 0608 	ands.w	r6, r6, #8
 801776a:	d1f8      	bne.n	801775e <_strtol_l.constprop.0+0x22>
 801776c:	2c2d      	cmp	r4, #45	@ 0x2d
 801776e:	d12d      	bne.n	80177cc <_strtol_l.constprop.0+0x90>
 8017770:	782c      	ldrb	r4, [r5, #0]
 8017772:	2601      	movs	r6, #1
 8017774:	1c95      	adds	r5, r2, #2
 8017776:	f033 0210 	bics.w	r2, r3, #16
 801777a:	d109      	bne.n	8017790 <_strtol_l.constprop.0+0x54>
 801777c:	2c30      	cmp	r4, #48	@ 0x30
 801777e:	d12a      	bne.n	80177d6 <_strtol_l.constprop.0+0x9a>
 8017780:	782a      	ldrb	r2, [r5, #0]
 8017782:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017786:	2a58      	cmp	r2, #88	@ 0x58
 8017788:	d125      	bne.n	80177d6 <_strtol_l.constprop.0+0x9a>
 801778a:	786c      	ldrb	r4, [r5, #1]
 801778c:	2310      	movs	r3, #16
 801778e:	3502      	adds	r5, #2
 8017790:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017794:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017798:	2200      	movs	r2, #0
 801779a:	fbbc f9f3 	udiv	r9, ip, r3
 801779e:	4610      	mov	r0, r2
 80177a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80177a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80177a8:	2f09      	cmp	r7, #9
 80177aa:	d81b      	bhi.n	80177e4 <_strtol_l.constprop.0+0xa8>
 80177ac:	463c      	mov	r4, r7
 80177ae:	42a3      	cmp	r3, r4
 80177b0:	dd27      	ble.n	8017802 <_strtol_l.constprop.0+0xc6>
 80177b2:	1c57      	adds	r7, r2, #1
 80177b4:	d007      	beq.n	80177c6 <_strtol_l.constprop.0+0x8a>
 80177b6:	4581      	cmp	r9, r0
 80177b8:	d320      	bcc.n	80177fc <_strtol_l.constprop.0+0xc0>
 80177ba:	d101      	bne.n	80177c0 <_strtol_l.constprop.0+0x84>
 80177bc:	45a2      	cmp	sl, r4
 80177be:	db1d      	blt.n	80177fc <_strtol_l.constprop.0+0xc0>
 80177c0:	fb00 4003 	mla	r0, r0, r3, r4
 80177c4:	2201      	movs	r2, #1
 80177c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177ca:	e7eb      	b.n	80177a4 <_strtol_l.constprop.0+0x68>
 80177cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80177ce:	bf04      	itt	eq
 80177d0:	782c      	ldrbeq	r4, [r5, #0]
 80177d2:	1c95      	addeq	r5, r2, #2
 80177d4:	e7cf      	b.n	8017776 <_strtol_l.constprop.0+0x3a>
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d1da      	bne.n	8017790 <_strtol_l.constprop.0+0x54>
 80177da:	2c30      	cmp	r4, #48	@ 0x30
 80177dc:	bf0c      	ite	eq
 80177de:	2308      	moveq	r3, #8
 80177e0:	230a      	movne	r3, #10
 80177e2:	e7d5      	b.n	8017790 <_strtol_l.constprop.0+0x54>
 80177e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80177e8:	2f19      	cmp	r7, #25
 80177ea:	d801      	bhi.n	80177f0 <_strtol_l.constprop.0+0xb4>
 80177ec:	3c37      	subs	r4, #55	@ 0x37
 80177ee:	e7de      	b.n	80177ae <_strtol_l.constprop.0+0x72>
 80177f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80177f4:	2f19      	cmp	r7, #25
 80177f6:	d804      	bhi.n	8017802 <_strtol_l.constprop.0+0xc6>
 80177f8:	3c57      	subs	r4, #87	@ 0x57
 80177fa:	e7d8      	b.n	80177ae <_strtol_l.constprop.0+0x72>
 80177fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017800:	e7e1      	b.n	80177c6 <_strtol_l.constprop.0+0x8a>
 8017802:	1c53      	adds	r3, r2, #1
 8017804:	d108      	bne.n	8017818 <_strtol_l.constprop.0+0xdc>
 8017806:	2322      	movs	r3, #34	@ 0x22
 8017808:	f8ce 3000 	str.w	r3, [lr]
 801780c:	4660      	mov	r0, ip
 801780e:	f1b8 0f00 	cmp.w	r8, #0
 8017812:	d0a0      	beq.n	8017756 <_strtol_l.constprop.0+0x1a>
 8017814:	1e69      	subs	r1, r5, #1
 8017816:	e006      	b.n	8017826 <_strtol_l.constprop.0+0xea>
 8017818:	b106      	cbz	r6, 801781c <_strtol_l.constprop.0+0xe0>
 801781a:	4240      	negs	r0, r0
 801781c:	f1b8 0f00 	cmp.w	r8, #0
 8017820:	d099      	beq.n	8017756 <_strtol_l.constprop.0+0x1a>
 8017822:	2a00      	cmp	r2, #0
 8017824:	d1f6      	bne.n	8017814 <_strtol_l.constprop.0+0xd8>
 8017826:	f8c8 1000 	str.w	r1, [r8]
 801782a:	e794      	b.n	8017756 <_strtol_l.constprop.0+0x1a>
 801782c:	08019cc1 	.word	0x08019cc1

08017830 <_strtol_r>:
 8017830:	f7ff bf84 	b.w	801773c <_strtol_l.constprop.0>

08017834 <__ssputs_r>:
 8017834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017838:	688e      	ldr	r6, [r1, #8]
 801783a:	461f      	mov	r7, r3
 801783c:	42be      	cmp	r6, r7
 801783e:	680b      	ldr	r3, [r1, #0]
 8017840:	4682      	mov	sl, r0
 8017842:	460c      	mov	r4, r1
 8017844:	4690      	mov	r8, r2
 8017846:	d82d      	bhi.n	80178a4 <__ssputs_r+0x70>
 8017848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801784c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017850:	d026      	beq.n	80178a0 <__ssputs_r+0x6c>
 8017852:	6965      	ldr	r5, [r4, #20]
 8017854:	6909      	ldr	r1, [r1, #16]
 8017856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801785a:	eba3 0901 	sub.w	r9, r3, r1
 801785e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017862:	1c7b      	adds	r3, r7, #1
 8017864:	444b      	add	r3, r9
 8017866:	106d      	asrs	r5, r5, #1
 8017868:	429d      	cmp	r5, r3
 801786a:	bf38      	it	cc
 801786c:	461d      	movcc	r5, r3
 801786e:	0553      	lsls	r3, r2, #21
 8017870:	d527      	bpl.n	80178c2 <__ssputs_r+0x8e>
 8017872:	4629      	mov	r1, r5
 8017874:	f7fc fcbc 	bl	80141f0 <_malloc_r>
 8017878:	4606      	mov	r6, r0
 801787a:	b360      	cbz	r0, 80178d6 <__ssputs_r+0xa2>
 801787c:	6921      	ldr	r1, [r4, #16]
 801787e:	464a      	mov	r2, r9
 8017880:	f7fd fdf5 	bl	801546e <memcpy>
 8017884:	89a3      	ldrh	r3, [r4, #12]
 8017886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801788a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801788e:	81a3      	strh	r3, [r4, #12]
 8017890:	6126      	str	r6, [r4, #16]
 8017892:	6165      	str	r5, [r4, #20]
 8017894:	444e      	add	r6, r9
 8017896:	eba5 0509 	sub.w	r5, r5, r9
 801789a:	6026      	str	r6, [r4, #0]
 801789c:	60a5      	str	r5, [r4, #8]
 801789e:	463e      	mov	r6, r7
 80178a0:	42be      	cmp	r6, r7
 80178a2:	d900      	bls.n	80178a6 <__ssputs_r+0x72>
 80178a4:	463e      	mov	r6, r7
 80178a6:	6820      	ldr	r0, [r4, #0]
 80178a8:	4632      	mov	r2, r6
 80178aa:	4641      	mov	r1, r8
 80178ac:	f7fd fcdf 	bl	801526e <memmove>
 80178b0:	68a3      	ldr	r3, [r4, #8]
 80178b2:	1b9b      	subs	r3, r3, r6
 80178b4:	60a3      	str	r3, [r4, #8]
 80178b6:	6823      	ldr	r3, [r4, #0]
 80178b8:	4433      	add	r3, r6
 80178ba:	6023      	str	r3, [r4, #0]
 80178bc:	2000      	movs	r0, #0
 80178be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178c2:	462a      	mov	r2, r5
 80178c4:	f000 ff0b 	bl	80186de <_realloc_r>
 80178c8:	4606      	mov	r6, r0
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d1e0      	bne.n	8017890 <__ssputs_r+0x5c>
 80178ce:	6921      	ldr	r1, [r4, #16]
 80178d0:	4650      	mov	r0, sl
 80178d2:	f7fe fc2d 	bl	8016130 <_free_r>
 80178d6:	230c      	movs	r3, #12
 80178d8:	f8ca 3000 	str.w	r3, [sl]
 80178dc:	89a3      	ldrh	r3, [r4, #12]
 80178de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178e2:	81a3      	strh	r3, [r4, #12]
 80178e4:	f04f 30ff 	mov.w	r0, #4294967295
 80178e8:	e7e9      	b.n	80178be <__ssputs_r+0x8a>
	...

080178ec <_svfiprintf_r>:
 80178ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f0:	4698      	mov	r8, r3
 80178f2:	898b      	ldrh	r3, [r1, #12]
 80178f4:	061b      	lsls	r3, r3, #24
 80178f6:	b09d      	sub	sp, #116	@ 0x74
 80178f8:	4607      	mov	r7, r0
 80178fa:	460d      	mov	r5, r1
 80178fc:	4614      	mov	r4, r2
 80178fe:	d510      	bpl.n	8017922 <_svfiprintf_r+0x36>
 8017900:	690b      	ldr	r3, [r1, #16]
 8017902:	b973      	cbnz	r3, 8017922 <_svfiprintf_r+0x36>
 8017904:	2140      	movs	r1, #64	@ 0x40
 8017906:	f7fc fc73 	bl	80141f0 <_malloc_r>
 801790a:	6028      	str	r0, [r5, #0]
 801790c:	6128      	str	r0, [r5, #16]
 801790e:	b930      	cbnz	r0, 801791e <_svfiprintf_r+0x32>
 8017910:	230c      	movs	r3, #12
 8017912:	603b      	str	r3, [r7, #0]
 8017914:	f04f 30ff 	mov.w	r0, #4294967295
 8017918:	b01d      	add	sp, #116	@ 0x74
 801791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801791e:	2340      	movs	r3, #64	@ 0x40
 8017920:	616b      	str	r3, [r5, #20]
 8017922:	2300      	movs	r3, #0
 8017924:	9309      	str	r3, [sp, #36]	@ 0x24
 8017926:	2320      	movs	r3, #32
 8017928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801792c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017930:	2330      	movs	r3, #48	@ 0x30
 8017932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017ad0 <_svfiprintf_r+0x1e4>
 8017936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801793a:	f04f 0901 	mov.w	r9, #1
 801793e:	4623      	mov	r3, r4
 8017940:	469a      	mov	sl, r3
 8017942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017946:	b10a      	cbz	r2, 801794c <_svfiprintf_r+0x60>
 8017948:	2a25      	cmp	r2, #37	@ 0x25
 801794a:	d1f9      	bne.n	8017940 <_svfiprintf_r+0x54>
 801794c:	ebba 0b04 	subs.w	fp, sl, r4
 8017950:	d00b      	beq.n	801796a <_svfiprintf_r+0x7e>
 8017952:	465b      	mov	r3, fp
 8017954:	4622      	mov	r2, r4
 8017956:	4629      	mov	r1, r5
 8017958:	4638      	mov	r0, r7
 801795a:	f7ff ff6b 	bl	8017834 <__ssputs_r>
 801795e:	3001      	adds	r0, #1
 8017960:	f000 80a7 	beq.w	8017ab2 <_svfiprintf_r+0x1c6>
 8017964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017966:	445a      	add	r2, fp
 8017968:	9209      	str	r2, [sp, #36]	@ 0x24
 801796a:	f89a 3000 	ldrb.w	r3, [sl]
 801796e:	2b00      	cmp	r3, #0
 8017970:	f000 809f 	beq.w	8017ab2 <_svfiprintf_r+0x1c6>
 8017974:	2300      	movs	r3, #0
 8017976:	f04f 32ff 	mov.w	r2, #4294967295
 801797a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801797e:	f10a 0a01 	add.w	sl, sl, #1
 8017982:	9304      	str	r3, [sp, #16]
 8017984:	9307      	str	r3, [sp, #28]
 8017986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801798a:	931a      	str	r3, [sp, #104]	@ 0x68
 801798c:	4654      	mov	r4, sl
 801798e:	2205      	movs	r2, #5
 8017990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017994:	484e      	ldr	r0, [pc, #312]	@ (8017ad0 <_svfiprintf_r+0x1e4>)
 8017996:	f7e8 fc43 	bl	8000220 <memchr>
 801799a:	9a04      	ldr	r2, [sp, #16]
 801799c:	b9d8      	cbnz	r0, 80179d6 <_svfiprintf_r+0xea>
 801799e:	06d0      	lsls	r0, r2, #27
 80179a0:	bf44      	itt	mi
 80179a2:	2320      	movmi	r3, #32
 80179a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179a8:	0711      	lsls	r1, r2, #28
 80179aa:	bf44      	itt	mi
 80179ac:	232b      	movmi	r3, #43	@ 0x2b
 80179ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179b2:	f89a 3000 	ldrb.w	r3, [sl]
 80179b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80179b8:	d015      	beq.n	80179e6 <_svfiprintf_r+0xfa>
 80179ba:	9a07      	ldr	r2, [sp, #28]
 80179bc:	4654      	mov	r4, sl
 80179be:	2000      	movs	r0, #0
 80179c0:	f04f 0c0a 	mov.w	ip, #10
 80179c4:	4621      	mov	r1, r4
 80179c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179ca:	3b30      	subs	r3, #48	@ 0x30
 80179cc:	2b09      	cmp	r3, #9
 80179ce:	d94b      	bls.n	8017a68 <_svfiprintf_r+0x17c>
 80179d0:	b1b0      	cbz	r0, 8017a00 <_svfiprintf_r+0x114>
 80179d2:	9207      	str	r2, [sp, #28]
 80179d4:	e014      	b.n	8017a00 <_svfiprintf_r+0x114>
 80179d6:	eba0 0308 	sub.w	r3, r0, r8
 80179da:	fa09 f303 	lsl.w	r3, r9, r3
 80179de:	4313      	orrs	r3, r2
 80179e0:	9304      	str	r3, [sp, #16]
 80179e2:	46a2      	mov	sl, r4
 80179e4:	e7d2      	b.n	801798c <_svfiprintf_r+0xa0>
 80179e6:	9b03      	ldr	r3, [sp, #12]
 80179e8:	1d19      	adds	r1, r3, #4
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	9103      	str	r1, [sp, #12]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	bfbb      	ittet	lt
 80179f2:	425b      	neglt	r3, r3
 80179f4:	f042 0202 	orrlt.w	r2, r2, #2
 80179f8:	9307      	strge	r3, [sp, #28]
 80179fa:	9307      	strlt	r3, [sp, #28]
 80179fc:	bfb8      	it	lt
 80179fe:	9204      	strlt	r2, [sp, #16]
 8017a00:	7823      	ldrb	r3, [r4, #0]
 8017a02:	2b2e      	cmp	r3, #46	@ 0x2e
 8017a04:	d10a      	bne.n	8017a1c <_svfiprintf_r+0x130>
 8017a06:	7863      	ldrb	r3, [r4, #1]
 8017a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a0a:	d132      	bne.n	8017a72 <_svfiprintf_r+0x186>
 8017a0c:	9b03      	ldr	r3, [sp, #12]
 8017a0e:	1d1a      	adds	r2, r3, #4
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	9203      	str	r2, [sp, #12]
 8017a14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017a18:	3402      	adds	r4, #2
 8017a1a:	9305      	str	r3, [sp, #20]
 8017a1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017ae0 <_svfiprintf_r+0x1f4>
 8017a20:	7821      	ldrb	r1, [r4, #0]
 8017a22:	2203      	movs	r2, #3
 8017a24:	4650      	mov	r0, sl
 8017a26:	f7e8 fbfb 	bl	8000220 <memchr>
 8017a2a:	b138      	cbz	r0, 8017a3c <_svfiprintf_r+0x150>
 8017a2c:	9b04      	ldr	r3, [sp, #16]
 8017a2e:	eba0 000a 	sub.w	r0, r0, sl
 8017a32:	2240      	movs	r2, #64	@ 0x40
 8017a34:	4082      	lsls	r2, r0
 8017a36:	4313      	orrs	r3, r2
 8017a38:	3401      	adds	r4, #1
 8017a3a:	9304      	str	r3, [sp, #16]
 8017a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a40:	4824      	ldr	r0, [pc, #144]	@ (8017ad4 <_svfiprintf_r+0x1e8>)
 8017a42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a46:	2206      	movs	r2, #6
 8017a48:	f7e8 fbea 	bl	8000220 <memchr>
 8017a4c:	2800      	cmp	r0, #0
 8017a4e:	d036      	beq.n	8017abe <_svfiprintf_r+0x1d2>
 8017a50:	4b21      	ldr	r3, [pc, #132]	@ (8017ad8 <_svfiprintf_r+0x1ec>)
 8017a52:	bb1b      	cbnz	r3, 8017a9c <_svfiprintf_r+0x1b0>
 8017a54:	9b03      	ldr	r3, [sp, #12]
 8017a56:	3307      	adds	r3, #7
 8017a58:	f023 0307 	bic.w	r3, r3, #7
 8017a5c:	3308      	adds	r3, #8
 8017a5e:	9303      	str	r3, [sp, #12]
 8017a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a62:	4433      	add	r3, r6
 8017a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a66:	e76a      	b.n	801793e <_svfiprintf_r+0x52>
 8017a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a6c:	460c      	mov	r4, r1
 8017a6e:	2001      	movs	r0, #1
 8017a70:	e7a8      	b.n	80179c4 <_svfiprintf_r+0xd8>
 8017a72:	2300      	movs	r3, #0
 8017a74:	3401      	adds	r4, #1
 8017a76:	9305      	str	r3, [sp, #20]
 8017a78:	4619      	mov	r1, r3
 8017a7a:	f04f 0c0a 	mov.w	ip, #10
 8017a7e:	4620      	mov	r0, r4
 8017a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a84:	3a30      	subs	r2, #48	@ 0x30
 8017a86:	2a09      	cmp	r2, #9
 8017a88:	d903      	bls.n	8017a92 <_svfiprintf_r+0x1a6>
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d0c6      	beq.n	8017a1c <_svfiprintf_r+0x130>
 8017a8e:	9105      	str	r1, [sp, #20]
 8017a90:	e7c4      	b.n	8017a1c <_svfiprintf_r+0x130>
 8017a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a96:	4604      	mov	r4, r0
 8017a98:	2301      	movs	r3, #1
 8017a9a:	e7f0      	b.n	8017a7e <_svfiprintf_r+0x192>
 8017a9c:	ab03      	add	r3, sp, #12
 8017a9e:	9300      	str	r3, [sp, #0]
 8017aa0:	462a      	mov	r2, r5
 8017aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8017adc <_svfiprintf_r+0x1f0>)
 8017aa4:	a904      	add	r1, sp, #16
 8017aa6:	4638      	mov	r0, r7
 8017aa8:	f7fc fcce 	bl	8014448 <_printf_float>
 8017aac:	1c42      	adds	r2, r0, #1
 8017aae:	4606      	mov	r6, r0
 8017ab0:	d1d6      	bne.n	8017a60 <_svfiprintf_r+0x174>
 8017ab2:	89ab      	ldrh	r3, [r5, #12]
 8017ab4:	065b      	lsls	r3, r3, #25
 8017ab6:	f53f af2d 	bmi.w	8017914 <_svfiprintf_r+0x28>
 8017aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017abc:	e72c      	b.n	8017918 <_svfiprintf_r+0x2c>
 8017abe:	ab03      	add	r3, sp, #12
 8017ac0:	9300      	str	r3, [sp, #0]
 8017ac2:	462a      	mov	r2, r5
 8017ac4:	4b05      	ldr	r3, [pc, #20]	@ (8017adc <_svfiprintf_r+0x1f0>)
 8017ac6:	a904      	add	r1, sp, #16
 8017ac8:	4638      	mov	r0, r7
 8017aca:	f7fc ff55 	bl	8014978 <_printf_i>
 8017ace:	e7ed      	b.n	8017aac <_svfiprintf_r+0x1c0>
 8017ad0:	08019dc1 	.word	0x08019dc1
 8017ad4:	08019dcb 	.word	0x08019dcb
 8017ad8:	08014449 	.word	0x08014449
 8017adc:	08017835 	.word	0x08017835
 8017ae0:	08019dc7 	.word	0x08019dc7

08017ae4 <__sfputc_r>:
 8017ae4:	6893      	ldr	r3, [r2, #8]
 8017ae6:	3b01      	subs	r3, #1
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	b410      	push	{r4}
 8017aec:	6093      	str	r3, [r2, #8]
 8017aee:	da08      	bge.n	8017b02 <__sfputc_r+0x1e>
 8017af0:	6994      	ldr	r4, [r2, #24]
 8017af2:	42a3      	cmp	r3, r4
 8017af4:	db01      	blt.n	8017afa <__sfputc_r+0x16>
 8017af6:	290a      	cmp	r1, #10
 8017af8:	d103      	bne.n	8017b02 <__sfputc_r+0x1e>
 8017afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017afe:	f000 b9df 	b.w	8017ec0 <__swbuf_r>
 8017b02:	6813      	ldr	r3, [r2, #0]
 8017b04:	1c58      	adds	r0, r3, #1
 8017b06:	6010      	str	r0, [r2, #0]
 8017b08:	7019      	strb	r1, [r3, #0]
 8017b0a:	4608      	mov	r0, r1
 8017b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b10:	4770      	bx	lr

08017b12 <__sfputs_r>:
 8017b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b14:	4606      	mov	r6, r0
 8017b16:	460f      	mov	r7, r1
 8017b18:	4614      	mov	r4, r2
 8017b1a:	18d5      	adds	r5, r2, r3
 8017b1c:	42ac      	cmp	r4, r5
 8017b1e:	d101      	bne.n	8017b24 <__sfputs_r+0x12>
 8017b20:	2000      	movs	r0, #0
 8017b22:	e007      	b.n	8017b34 <__sfputs_r+0x22>
 8017b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b28:	463a      	mov	r2, r7
 8017b2a:	4630      	mov	r0, r6
 8017b2c:	f7ff ffda 	bl	8017ae4 <__sfputc_r>
 8017b30:	1c43      	adds	r3, r0, #1
 8017b32:	d1f3      	bne.n	8017b1c <__sfputs_r+0xa>
 8017b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b38 <_vfiprintf_r>:
 8017b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b3c:	460d      	mov	r5, r1
 8017b3e:	b09d      	sub	sp, #116	@ 0x74
 8017b40:	4614      	mov	r4, r2
 8017b42:	4698      	mov	r8, r3
 8017b44:	4606      	mov	r6, r0
 8017b46:	b118      	cbz	r0, 8017b50 <_vfiprintf_r+0x18>
 8017b48:	6a03      	ldr	r3, [r0, #32]
 8017b4a:	b90b      	cbnz	r3, 8017b50 <_vfiprintf_r+0x18>
 8017b4c:	f7fd fad4 	bl	80150f8 <__sinit>
 8017b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b52:	07d9      	lsls	r1, r3, #31
 8017b54:	d405      	bmi.n	8017b62 <_vfiprintf_r+0x2a>
 8017b56:	89ab      	ldrh	r3, [r5, #12]
 8017b58:	059a      	lsls	r2, r3, #22
 8017b5a:	d402      	bmi.n	8017b62 <_vfiprintf_r+0x2a>
 8017b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b5e:	f7fd fc84 	bl	801546a <__retarget_lock_acquire_recursive>
 8017b62:	89ab      	ldrh	r3, [r5, #12]
 8017b64:	071b      	lsls	r3, r3, #28
 8017b66:	d501      	bpl.n	8017b6c <_vfiprintf_r+0x34>
 8017b68:	692b      	ldr	r3, [r5, #16]
 8017b6a:	b99b      	cbnz	r3, 8017b94 <_vfiprintf_r+0x5c>
 8017b6c:	4629      	mov	r1, r5
 8017b6e:	4630      	mov	r0, r6
 8017b70:	f000 f9e4 	bl	8017f3c <__swsetup_r>
 8017b74:	b170      	cbz	r0, 8017b94 <_vfiprintf_r+0x5c>
 8017b76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b78:	07dc      	lsls	r4, r3, #31
 8017b7a:	d504      	bpl.n	8017b86 <_vfiprintf_r+0x4e>
 8017b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b80:	b01d      	add	sp, #116	@ 0x74
 8017b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b86:	89ab      	ldrh	r3, [r5, #12]
 8017b88:	0598      	lsls	r0, r3, #22
 8017b8a:	d4f7      	bmi.n	8017b7c <_vfiprintf_r+0x44>
 8017b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b8e:	f7fd fc6d 	bl	801546c <__retarget_lock_release_recursive>
 8017b92:	e7f3      	b.n	8017b7c <_vfiprintf_r+0x44>
 8017b94:	2300      	movs	r3, #0
 8017b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b98:	2320      	movs	r3, #32
 8017b9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ba2:	2330      	movs	r3, #48	@ 0x30
 8017ba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017d54 <_vfiprintf_r+0x21c>
 8017ba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017bac:	f04f 0901 	mov.w	r9, #1
 8017bb0:	4623      	mov	r3, r4
 8017bb2:	469a      	mov	sl, r3
 8017bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bb8:	b10a      	cbz	r2, 8017bbe <_vfiprintf_r+0x86>
 8017bba:	2a25      	cmp	r2, #37	@ 0x25
 8017bbc:	d1f9      	bne.n	8017bb2 <_vfiprintf_r+0x7a>
 8017bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8017bc2:	d00b      	beq.n	8017bdc <_vfiprintf_r+0xa4>
 8017bc4:	465b      	mov	r3, fp
 8017bc6:	4622      	mov	r2, r4
 8017bc8:	4629      	mov	r1, r5
 8017bca:	4630      	mov	r0, r6
 8017bcc:	f7ff ffa1 	bl	8017b12 <__sfputs_r>
 8017bd0:	3001      	adds	r0, #1
 8017bd2:	f000 80a7 	beq.w	8017d24 <_vfiprintf_r+0x1ec>
 8017bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017bd8:	445a      	add	r2, fp
 8017bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8017bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	f000 809f 	beq.w	8017d24 <_vfiprintf_r+0x1ec>
 8017be6:	2300      	movs	r3, #0
 8017be8:	f04f 32ff 	mov.w	r2, #4294967295
 8017bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bf0:	f10a 0a01 	add.w	sl, sl, #1
 8017bf4:	9304      	str	r3, [sp, #16]
 8017bf6:	9307      	str	r3, [sp, #28]
 8017bf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017bfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017bfe:	4654      	mov	r4, sl
 8017c00:	2205      	movs	r2, #5
 8017c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c06:	4853      	ldr	r0, [pc, #332]	@ (8017d54 <_vfiprintf_r+0x21c>)
 8017c08:	f7e8 fb0a 	bl	8000220 <memchr>
 8017c0c:	9a04      	ldr	r2, [sp, #16]
 8017c0e:	b9d8      	cbnz	r0, 8017c48 <_vfiprintf_r+0x110>
 8017c10:	06d1      	lsls	r1, r2, #27
 8017c12:	bf44      	itt	mi
 8017c14:	2320      	movmi	r3, #32
 8017c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c1a:	0713      	lsls	r3, r2, #28
 8017c1c:	bf44      	itt	mi
 8017c1e:	232b      	movmi	r3, #43	@ 0x2b
 8017c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c24:	f89a 3000 	ldrb.w	r3, [sl]
 8017c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c2a:	d015      	beq.n	8017c58 <_vfiprintf_r+0x120>
 8017c2c:	9a07      	ldr	r2, [sp, #28]
 8017c2e:	4654      	mov	r4, sl
 8017c30:	2000      	movs	r0, #0
 8017c32:	f04f 0c0a 	mov.w	ip, #10
 8017c36:	4621      	mov	r1, r4
 8017c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c3c:	3b30      	subs	r3, #48	@ 0x30
 8017c3e:	2b09      	cmp	r3, #9
 8017c40:	d94b      	bls.n	8017cda <_vfiprintf_r+0x1a2>
 8017c42:	b1b0      	cbz	r0, 8017c72 <_vfiprintf_r+0x13a>
 8017c44:	9207      	str	r2, [sp, #28]
 8017c46:	e014      	b.n	8017c72 <_vfiprintf_r+0x13a>
 8017c48:	eba0 0308 	sub.w	r3, r0, r8
 8017c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8017c50:	4313      	orrs	r3, r2
 8017c52:	9304      	str	r3, [sp, #16]
 8017c54:	46a2      	mov	sl, r4
 8017c56:	e7d2      	b.n	8017bfe <_vfiprintf_r+0xc6>
 8017c58:	9b03      	ldr	r3, [sp, #12]
 8017c5a:	1d19      	adds	r1, r3, #4
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	9103      	str	r1, [sp, #12]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	bfbb      	ittet	lt
 8017c64:	425b      	neglt	r3, r3
 8017c66:	f042 0202 	orrlt.w	r2, r2, #2
 8017c6a:	9307      	strge	r3, [sp, #28]
 8017c6c:	9307      	strlt	r3, [sp, #28]
 8017c6e:	bfb8      	it	lt
 8017c70:	9204      	strlt	r2, [sp, #16]
 8017c72:	7823      	ldrb	r3, [r4, #0]
 8017c74:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c76:	d10a      	bne.n	8017c8e <_vfiprintf_r+0x156>
 8017c78:	7863      	ldrb	r3, [r4, #1]
 8017c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c7c:	d132      	bne.n	8017ce4 <_vfiprintf_r+0x1ac>
 8017c7e:	9b03      	ldr	r3, [sp, #12]
 8017c80:	1d1a      	adds	r2, r3, #4
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	9203      	str	r2, [sp, #12]
 8017c86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c8a:	3402      	adds	r4, #2
 8017c8c:	9305      	str	r3, [sp, #20]
 8017c8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017d64 <_vfiprintf_r+0x22c>
 8017c92:	7821      	ldrb	r1, [r4, #0]
 8017c94:	2203      	movs	r2, #3
 8017c96:	4650      	mov	r0, sl
 8017c98:	f7e8 fac2 	bl	8000220 <memchr>
 8017c9c:	b138      	cbz	r0, 8017cae <_vfiprintf_r+0x176>
 8017c9e:	9b04      	ldr	r3, [sp, #16]
 8017ca0:	eba0 000a 	sub.w	r0, r0, sl
 8017ca4:	2240      	movs	r2, #64	@ 0x40
 8017ca6:	4082      	lsls	r2, r0
 8017ca8:	4313      	orrs	r3, r2
 8017caa:	3401      	adds	r4, #1
 8017cac:	9304      	str	r3, [sp, #16]
 8017cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cb2:	4829      	ldr	r0, [pc, #164]	@ (8017d58 <_vfiprintf_r+0x220>)
 8017cb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017cb8:	2206      	movs	r2, #6
 8017cba:	f7e8 fab1 	bl	8000220 <memchr>
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	d03f      	beq.n	8017d42 <_vfiprintf_r+0x20a>
 8017cc2:	4b26      	ldr	r3, [pc, #152]	@ (8017d5c <_vfiprintf_r+0x224>)
 8017cc4:	bb1b      	cbnz	r3, 8017d0e <_vfiprintf_r+0x1d6>
 8017cc6:	9b03      	ldr	r3, [sp, #12]
 8017cc8:	3307      	adds	r3, #7
 8017cca:	f023 0307 	bic.w	r3, r3, #7
 8017cce:	3308      	adds	r3, #8
 8017cd0:	9303      	str	r3, [sp, #12]
 8017cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cd4:	443b      	add	r3, r7
 8017cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cd8:	e76a      	b.n	8017bb0 <_vfiprintf_r+0x78>
 8017cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cde:	460c      	mov	r4, r1
 8017ce0:	2001      	movs	r0, #1
 8017ce2:	e7a8      	b.n	8017c36 <_vfiprintf_r+0xfe>
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	3401      	adds	r4, #1
 8017ce8:	9305      	str	r3, [sp, #20]
 8017cea:	4619      	mov	r1, r3
 8017cec:	f04f 0c0a 	mov.w	ip, #10
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cf6:	3a30      	subs	r2, #48	@ 0x30
 8017cf8:	2a09      	cmp	r2, #9
 8017cfa:	d903      	bls.n	8017d04 <_vfiprintf_r+0x1cc>
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d0c6      	beq.n	8017c8e <_vfiprintf_r+0x156>
 8017d00:	9105      	str	r1, [sp, #20]
 8017d02:	e7c4      	b.n	8017c8e <_vfiprintf_r+0x156>
 8017d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d08:	4604      	mov	r4, r0
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	e7f0      	b.n	8017cf0 <_vfiprintf_r+0x1b8>
 8017d0e:	ab03      	add	r3, sp, #12
 8017d10:	9300      	str	r3, [sp, #0]
 8017d12:	462a      	mov	r2, r5
 8017d14:	4b12      	ldr	r3, [pc, #72]	@ (8017d60 <_vfiprintf_r+0x228>)
 8017d16:	a904      	add	r1, sp, #16
 8017d18:	4630      	mov	r0, r6
 8017d1a:	f7fc fb95 	bl	8014448 <_printf_float>
 8017d1e:	4607      	mov	r7, r0
 8017d20:	1c78      	adds	r0, r7, #1
 8017d22:	d1d6      	bne.n	8017cd2 <_vfiprintf_r+0x19a>
 8017d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d26:	07d9      	lsls	r1, r3, #31
 8017d28:	d405      	bmi.n	8017d36 <_vfiprintf_r+0x1fe>
 8017d2a:	89ab      	ldrh	r3, [r5, #12]
 8017d2c:	059a      	lsls	r2, r3, #22
 8017d2e:	d402      	bmi.n	8017d36 <_vfiprintf_r+0x1fe>
 8017d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d32:	f7fd fb9b 	bl	801546c <__retarget_lock_release_recursive>
 8017d36:	89ab      	ldrh	r3, [r5, #12]
 8017d38:	065b      	lsls	r3, r3, #25
 8017d3a:	f53f af1f 	bmi.w	8017b7c <_vfiprintf_r+0x44>
 8017d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d40:	e71e      	b.n	8017b80 <_vfiprintf_r+0x48>
 8017d42:	ab03      	add	r3, sp, #12
 8017d44:	9300      	str	r3, [sp, #0]
 8017d46:	462a      	mov	r2, r5
 8017d48:	4b05      	ldr	r3, [pc, #20]	@ (8017d60 <_vfiprintf_r+0x228>)
 8017d4a:	a904      	add	r1, sp, #16
 8017d4c:	4630      	mov	r0, r6
 8017d4e:	f7fc fe13 	bl	8014978 <_printf_i>
 8017d52:	e7e4      	b.n	8017d1e <_vfiprintf_r+0x1e6>
 8017d54:	08019dc1 	.word	0x08019dc1
 8017d58:	08019dcb 	.word	0x08019dcb
 8017d5c:	08014449 	.word	0x08014449
 8017d60:	08017b13 	.word	0x08017b13
 8017d64:	08019dc7 	.word	0x08019dc7

08017d68 <__sflush_r>:
 8017d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d70:	0716      	lsls	r6, r2, #28
 8017d72:	4605      	mov	r5, r0
 8017d74:	460c      	mov	r4, r1
 8017d76:	d454      	bmi.n	8017e22 <__sflush_r+0xba>
 8017d78:	684b      	ldr	r3, [r1, #4]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	dc02      	bgt.n	8017d84 <__sflush_r+0x1c>
 8017d7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	dd48      	ble.n	8017e16 <__sflush_r+0xae>
 8017d84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d86:	2e00      	cmp	r6, #0
 8017d88:	d045      	beq.n	8017e16 <__sflush_r+0xae>
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017d90:	682f      	ldr	r7, [r5, #0]
 8017d92:	6a21      	ldr	r1, [r4, #32]
 8017d94:	602b      	str	r3, [r5, #0]
 8017d96:	d030      	beq.n	8017dfa <__sflush_r+0x92>
 8017d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017d9a:	89a3      	ldrh	r3, [r4, #12]
 8017d9c:	0759      	lsls	r1, r3, #29
 8017d9e:	d505      	bpl.n	8017dac <__sflush_r+0x44>
 8017da0:	6863      	ldr	r3, [r4, #4]
 8017da2:	1ad2      	subs	r2, r2, r3
 8017da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017da6:	b10b      	cbz	r3, 8017dac <__sflush_r+0x44>
 8017da8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017daa:	1ad2      	subs	r2, r2, r3
 8017dac:	2300      	movs	r3, #0
 8017dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017db0:	6a21      	ldr	r1, [r4, #32]
 8017db2:	4628      	mov	r0, r5
 8017db4:	47b0      	blx	r6
 8017db6:	1c43      	adds	r3, r0, #1
 8017db8:	89a3      	ldrh	r3, [r4, #12]
 8017dba:	d106      	bne.n	8017dca <__sflush_r+0x62>
 8017dbc:	6829      	ldr	r1, [r5, #0]
 8017dbe:	291d      	cmp	r1, #29
 8017dc0:	d82b      	bhi.n	8017e1a <__sflush_r+0xb2>
 8017dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8017e6c <__sflush_r+0x104>)
 8017dc4:	410a      	asrs	r2, r1
 8017dc6:	07d6      	lsls	r6, r2, #31
 8017dc8:	d427      	bmi.n	8017e1a <__sflush_r+0xb2>
 8017dca:	2200      	movs	r2, #0
 8017dcc:	6062      	str	r2, [r4, #4]
 8017dce:	04d9      	lsls	r1, r3, #19
 8017dd0:	6922      	ldr	r2, [r4, #16]
 8017dd2:	6022      	str	r2, [r4, #0]
 8017dd4:	d504      	bpl.n	8017de0 <__sflush_r+0x78>
 8017dd6:	1c42      	adds	r2, r0, #1
 8017dd8:	d101      	bne.n	8017dde <__sflush_r+0x76>
 8017dda:	682b      	ldr	r3, [r5, #0]
 8017ddc:	b903      	cbnz	r3, 8017de0 <__sflush_r+0x78>
 8017dde:	6560      	str	r0, [r4, #84]	@ 0x54
 8017de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017de2:	602f      	str	r7, [r5, #0]
 8017de4:	b1b9      	cbz	r1, 8017e16 <__sflush_r+0xae>
 8017de6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017dea:	4299      	cmp	r1, r3
 8017dec:	d002      	beq.n	8017df4 <__sflush_r+0x8c>
 8017dee:	4628      	mov	r0, r5
 8017df0:	f7fe f99e 	bl	8016130 <_free_r>
 8017df4:	2300      	movs	r3, #0
 8017df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8017df8:	e00d      	b.n	8017e16 <__sflush_r+0xae>
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	47b0      	blx	r6
 8017e00:	4602      	mov	r2, r0
 8017e02:	1c50      	adds	r0, r2, #1
 8017e04:	d1c9      	bne.n	8017d9a <__sflush_r+0x32>
 8017e06:	682b      	ldr	r3, [r5, #0]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d0c6      	beq.n	8017d9a <__sflush_r+0x32>
 8017e0c:	2b1d      	cmp	r3, #29
 8017e0e:	d001      	beq.n	8017e14 <__sflush_r+0xac>
 8017e10:	2b16      	cmp	r3, #22
 8017e12:	d11e      	bne.n	8017e52 <__sflush_r+0xea>
 8017e14:	602f      	str	r7, [r5, #0]
 8017e16:	2000      	movs	r0, #0
 8017e18:	e022      	b.n	8017e60 <__sflush_r+0xf8>
 8017e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e1e:	b21b      	sxth	r3, r3
 8017e20:	e01b      	b.n	8017e5a <__sflush_r+0xf2>
 8017e22:	690f      	ldr	r7, [r1, #16]
 8017e24:	2f00      	cmp	r7, #0
 8017e26:	d0f6      	beq.n	8017e16 <__sflush_r+0xae>
 8017e28:	0793      	lsls	r3, r2, #30
 8017e2a:	680e      	ldr	r6, [r1, #0]
 8017e2c:	bf08      	it	eq
 8017e2e:	694b      	ldreq	r3, [r1, #20]
 8017e30:	600f      	str	r7, [r1, #0]
 8017e32:	bf18      	it	ne
 8017e34:	2300      	movne	r3, #0
 8017e36:	eba6 0807 	sub.w	r8, r6, r7
 8017e3a:	608b      	str	r3, [r1, #8]
 8017e3c:	f1b8 0f00 	cmp.w	r8, #0
 8017e40:	dde9      	ble.n	8017e16 <__sflush_r+0xae>
 8017e42:	6a21      	ldr	r1, [r4, #32]
 8017e44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017e46:	4643      	mov	r3, r8
 8017e48:	463a      	mov	r2, r7
 8017e4a:	4628      	mov	r0, r5
 8017e4c:	47b0      	blx	r6
 8017e4e:	2800      	cmp	r0, #0
 8017e50:	dc08      	bgt.n	8017e64 <__sflush_r+0xfc>
 8017e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e5a:	81a3      	strh	r3, [r4, #12]
 8017e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e64:	4407      	add	r7, r0
 8017e66:	eba8 0800 	sub.w	r8, r8, r0
 8017e6a:	e7e7      	b.n	8017e3c <__sflush_r+0xd4>
 8017e6c:	dfbffffe 	.word	0xdfbffffe

08017e70 <_fflush_r>:
 8017e70:	b538      	push	{r3, r4, r5, lr}
 8017e72:	690b      	ldr	r3, [r1, #16]
 8017e74:	4605      	mov	r5, r0
 8017e76:	460c      	mov	r4, r1
 8017e78:	b913      	cbnz	r3, 8017e80 <_fflush_r+0x10>
 8017e7a:	2500      	movs	r5, #0
 8017e7c:	4628      	mov	r0, r5
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	b118      	cbz	r0, 8017e8a <_fflush_r+0x1a>
 8017e82:	6a03      	ldr	r3, [r0, #32]
 8017e84:	b90b      	cbnz	r3, 8017e8a <_fflush_r+0x1a>
 8017e86:	f7fd f937 	bl	80150f8 <__sinit>
 8017e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d0f3      	beq.n	8017e7a <_fflush_r+0xa>
 8017e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017e94:	07d0      	lsls	r0, r2, #31
 8017e96:	d404      	bmi.n	8017ea2 <_fflush_r+0x32>
 8017e98:	0599      	lsls	r1, r3, #22
 8017e9a:	d402      	bmi.n	8017ea2 <_fflush_r+0x32>
 8017e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e9e:	f7fd fae4 	bl	801546a <__retarget_lock_acquire_recursive>
 8017ea2:	4628      	mov	r0, r5
 8017ea4:	4621      	mov	r1, r4
 8017ea6:	f7ff ff5f 	bl	8017d68 <__sflush_r>
 8017eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017eac:	07da      	lsls	r2, r3, #31
 8017eae:	4605      	mov	r5, r0
 8017eb0:	d4e4      	bmi.n	8017e7c <_fflush_r+0xc>
 8017eb2:	89a3      	ldrh	r3, [r4, #12]
 8017eb4:	059b      	lsls	r3, r3, #22
 8017eb6:	d4e1      	bmi.n	8017e7c <_fflush_r+0xc>
 8017eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017eba:	f7fd fad7 	bl	801546c <__retarget_lock_release_recursive>
 8017ebe:	e7dd      	b.n	8017e7c <_fflush_r+0xc>

08017ec0 <__swbuf_r>:
 8017ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ec2:	460e      	mov	r6, r1
 8017ec4:	4614      	mov	r4, r2
 8017ec6:	4605      	mov	r5, r0
 8017ec8:	b118      	cbz	r0, 8017ed2 <__swbuf_r+0x12>
 8017eca:	6a03      	ldr	r3, [r0, #32]
 8017ecc:	b90b      	cbnz	r3, 8017ed2 <__swbuf_r+0x12>
 8017ece:	f7fd f913 	bl	80150f8 <__sinit>
 8017ed2:	69a3      	ldr	r3, [r4, #24]
 8017ed4:	60a3      	str	r3, [r4, #8]
 8017ed6:	89a3      	ldrh	r3, [r4, #12]
 8017ed8:	071a      	lsls	r2, r3, #28
 8017eda:	d501      	bpl.n	8017ee0 <__swbuf_r+0x20>
 8017edc:	6923      	ldr	r3, [r4, #16]
 8017ede:	b943      	cbnz	r3, 8017ef2 <__swbuf_r+0x32>
 8017ee0:	4621      	mov	r1, r4
 8017ee2:	4628      	mov	r0, r5
 8017ee4:	f000 f82a 	bl	8017f3c <__swsetup_r>
 8017ee8:	b118      	cbz	r0, 8017ef2 <__swbuf_r+0x32>
 8017eea:	f04f 37ff 	mov.w	r7, #4294967295
 8017eee:	4638      	mov	r0, r7
 8017ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ef2:	6823      	ldr	r3, [r4, #0]
 8017ef4:	6922      	ldr	r2, [r4, #16]
 8017ef6:	1a98      	subs	r0, r3, r2
 8017ef8:	6963      	ldr	r3, [r4, #20]
 8017efa:	b2f6      	uxtb	r6, r6
 8017efc:	4283      	cmp	r3, r0
 8017efe:	4637      	mov	r7, r6
 8017f00:	dc05      	bgt.n	8017f0e <__swbuf_r+0x4e>
 8017f02:	4621      	mov	r1, r4
 8017f04:	4628      	mov	r0, r5
 8017f06:	f7ff ffb3 	bl	8017e70 <_fflush_r>
 8017f0a:	2800      	cmp	r0, #0
 8017f0c:	d1ed      	bne.n	8017eea <__swbuf_r+0x2a>
 8017f0e:	68a3      	ldr	r3, [r4, #8]
 8017f10:	3b01      	subs	r3, #1
 8017f12:	60a3      	str	r3, [r4, #8]
 8017f14:	6823      	ldr	r3, [r4, #0]
 8017f16:	1c5a      	adds	r2, r3, #1
 8017f18:	6022      	str	r2, [r4, #0]
 8017f1a:	701e      	strb	r6, [r3, #0]
 8017f1c:	6962      	ldr	r2, [r4, #20]
 8017f1e:	1c43      	adds	r3, r0, #1
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d004      	beq.n	8017f2e <__swbuf_r+0x6e>
 8017f24:	89a3      	ldrh	r3, [r4, #12]
 8017f26:	07db      	lsls	r3, r3, #31
 8017f28:	d5e1      	bpl.n	8017eee <__swbuf_r+0x2e>
 8017f2a:	2e0a      	cmp	r6, #10
 8017f2c:	d1df      	bne.n	8017eee <__swbuf_r+0x2e>
 8017f2e:	4621      	mov	r1, r4
 8017f30:	4628      	mov	r0, r5
 8017f32:	f7ff ff9d 	bl	8017e70 <_fflush_r>
 8017f36:	2800      	cmp	r0, #0
 8017f38:	d0d9      	beq.n	8017eee <__swbuf_r+0x2e>
 8017f3a:	e7d6      	b.n	8017eea <__swbuf_r+0x2a>

08017f3c <__swsetup_r>:
 8017f3c:	b538      	push	{r3, r4, r5, lr}
 8017f3e:	4b29      	ldr	r3, [pc, #164]	@ (8017fe4 <__swsetup_r+0xa8>)
 8017f40:	4605      	mov	r5, r0
 8017f42:	6818      	ldr	r0, [r3, #0]
 8017f44:	460c      	mov	r4, r1
 8017f46:	b118      	cbz	r0, 8017f50 <__swsetup_r+0x14>
 8017f48:	6a03      	ldr	r3, [r0, #32]
 8017f4a:	b90b      	cbnz	r3, 8017f50 <__swsetup_r+0x14>
 8017f4c:	f7fd f8d4 	bl	80150f8 <__sinit>
 8017f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f54:	0719      	lsls	r1, r3, #28
 8017f56:	d422      	bmi.n	8017f9e <__swsetup_r+0x62>
 8017f58:	06da      	lsls	r2, r3, #27
 8017f5a:	d407      	bmi.n	8017f6c <__swsetup_r+0x30>
 8017f5c:	2209      	movs	r2, #9
 8017f5e:	602a      	str	r2, [r5, #0]
 8017f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f64:	81a3      	strh	r3, [r4, #12]
 8017f66:	f04f 30ff 	mov.w	r0, #4294967295
 8017f6a:	e033      	b.n	8017fd4 <__swsetup_r+0x98>
 8017f6c:	0758      	lsls	r0, r3, #29
 8017f6e:	d512      	bpl.n	8017f96 <__swsetup_r+0x5a>
 8017f70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f72:	b141      	cbz	r1, 8017f86 <__swsetup_r+0x4a>
 8017f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f78:	4299      	cmp	r1, r3
 8017f7a:	d002      	beq.n	8017f82 <__swsetup_r+0x46>
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	f7fe f8d7 	bl	8016130 <_free_r>
 8017f82:	2300      	movs	r3, #0
 8017f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f86:	89a3      	ldrh	r3, [r4, #12]
 8017f88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017f8c:	81a3      	strh	r3, [r4, #12]
 8017f8e:	2300      	movs	r3, #0
 8017f90:	6063      	str	r3, [r4, #4]
 8017f92:	6923      	ldr	r3, [r4, #16]
 8017f94:	6023      	str	r3, [r4, #0]
 8017f96:	89a3      	ldrh	r3, [r4, #12]
 8017f98:	f043 0308 	orr.w	r3, r3, #8
 8017f9c:	81a3      	strh	r3, [r4, #12]
 8017f9e:	6923      	ldr	r3, [r4, #16]
 8017fa0:	b94b      	cbnz	r3, 8017fb6 <__swsetup_r+0x7a>
 8017fa2:	89a3      	ldrh	r3, [r4, #12]
 8017fa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017fac:	d003      	beq.n	8017fb6 <__swsetup_r+0x7a>
 8017fae:	4621      	mov	r1, r4
 8017fb0:	4628      	mov	r0, r5
 8017fb2:	f000 fbf5 	bl	80187a0 <__smakebuf_r>
 8017fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fba:	f013 0201 	ands.w	r2, r3, #1
 8017fbe:	d00a      	beq.n	8017fd6 <__swsetup_r+0x9a>
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	60a2      	str	r2, [r4, #8]
 8017fc4:	6962      	ldr	r2, [r4, #20]
 8017fc6:	4252      	negs	r2, r2
 8017fc8:	61a2      	str	r2, [r4, #24]
 8017fca:	6922      	ldr	r2, [r4, #16]
 8017fcc:	b942      	cbnz	r2, 8017fe0 <__swsetup_r+0xa4>
 8017fce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017fd2:	d1c5      	bne.n	8017f60 <__swsetup_r+0x24>
 8017fd4:	bd38      	pop	{r3, r4, r5, pc}
 8017fd6:	0799      	lsls	r1, r3, #30
 8017fd8:	bf58      	it	pl
 8017fda:	6962      	ldrpl	r2, [r4, #20]
 8017fdc:	60a2      	str	r2, [r4, #8]
 8017fde:	e7f4      	b.n	8017fca <__swsetup_r+0x8e>
 8017fe0:	2000      	movs	r0, #0
 8017fe2:	e7f7      	b.n	8017fd4 <__swsetup_r+0x98>
 8017fe4:	20000090 	.word	0x20000090

08017fe8 <strncmp>:
 8017fe8:	b510      	push	{r4, lr}
 8017fea:	b16a      	cbz	r2, 8018008 <strncmp+0x20>
 8017fec:	3901      	subs	r1, #1
 8017fee:	1884      	adds	r4, r0, r2
 8017ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ff4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d103      	bne.n	8018004 <strncmp+0x1c>
 8017ffc:	42a0      	cmp	r0, r4
 8017ffe:	d001      	beq.n	8018004 <strncmp+0x1c>
 8018000:	2a00      	cmp	r2, #0
 8018002:	d1f5      	bne.n	8017ff0 <strncmp+0x8>
 8018004:	1ad0      	subs	r0, r2, r3
 8018006:	bd10      	pop	{r4, pc}
 8018008:	4610      	mov	r0, r2
 801800a:	e7fc      	b.n	8018006 <strncmp+0x1e>
 801800c:	0000      	movs	r0, r0
	...

08018010 <nan>:
 8018010:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018018 <nan+0x8>
 8018014:	4770      	bx	lr
 8018016:	bf00      	nop
 8018018:	00000000 	.word	0x00000000
 801801c:	7ff80000 	.word	0x7ff80000

08018020 <_calloc_r>:
 8018020:	b570      	push	{r4, r5, r6, lr}
 8018022:	fba1 5402 	umull	r5, r4, r1, r2
 8018026:	b93c      	cbnz	r4, 8018038 <_calloc_r+0x18>
 8018028:	4629      	mov	r1, r5
 801802a:	f7fc f8e1 	bl	80141f0 <_malloc_r>
 801802e:	4606      	mov	r6, r0
 8018030:	b928      	cbnz	r0, 801803e <_calloc_r+0x1e>
 8018032:	2600      	movs	r6, #0
 8018034:	4630      	mov	r0, r6
 8018036:	bd70      	pop	{r4, r5, r6, pc}
 8018038:	220c      	movs	r2, #12
 801803a:	6002      	str	r2, [r0, #0]
 801803c:	e7f9      	b.n	8018032 <_calloc_r+0x12>
 801803e:	462a      	mov	r2, r5
 8018040:	4621      	mov	r1, r4
 8018042:	f7fd f92e 	bl	80152a2 <memset>
 8018046:	e7f5      	b.n	8018034 <_calloc_r+0x14>

08018048 <rshift>:
 8018048:	6903      	ldr	r3, [r0, #16]
 801804a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801804e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018052:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018056:	f100 0414 	add.w	r4, r0, #20
 801805a:	dd45      	ble.n	80180e8 <rshift+0xa0>
 801805c:	f011 011f 	ands.w	r1, r1, #31
 8018060:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018064:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018068:	d10c      	bne.n	8018084 <rshift+0x3c>
 801806a:	f100 0710 	add.w	r7, r0, #16
 801806e:	4629      	mov	r1, r5
 8018070:	42b1      	cmp	r1, r6
 8018072:	d334      	bcc.n	80180de <rshift+0x96>
 8018074:	1a9b      	subs	r3, r3, r2
 8018076:	009b      	lsls	r3, r3, #2
 8018078:	1eea      	subs	r2, r5, #3
 801807a:	4296      	cmp	r6, r2
 801807c:	bf38      	it	cc
 801807e:	2300      	movcc	r3, #0
 8018080:	4423      	add	r3, r4
 8018082:	e015      	b.n	80180b0 <rshift+0x68>
 8018084:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018088:	f1c1 0820 	rsb	r8, r1, #32
 801808c:	40cf      	lsrs	r7, r1
 801808e:	f105 0e04 	add.w	lr, r5, #4
 8018092:	46a1      	mov	r9, r4
 8018094:	4576      	cmp	r6, lr
 8018096:	46f4      	mov	ip, lr
 8018098:	d815      	bhi.n	80180c6 <rshift+0x7e>
 801809a:	1a9a      	subs	r2, r3, r2
 801809c:	0092      	lsls	r2, r2, #2
 801809e:	3a04      	subs	r2, #4
 80180a0:	3501      	adds	r5, #1
 80180a2:	42ae      	cmp	r6, r5
 80180a4:	bf38      	it	cc
 80180a6:	2200      	movcc	r2, #0
 80180a8:	18a3      	adds	r3, r4, r2
 80180aa:	50a7      	str	r7, [r4, r2]
 80180ac:	b107      	cbz	r7, 80180b0 <rshift+0x68>
 80180ae:	3304      	adds	r3, #4
 80180b0:	1b1a      	subs	r2, r3, r4
 80180b2:	42a3      	cmp	r3, r4
 80180b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80180b8:	bf08      	it	eq
 80180ba:	2300      	moveq	r3, #0
 80180bc:	6102      	str	r2, [r0, #16]
 80180be:	bf08      	it	eq
 80180c0:	6143      	streq	r3, [r0, #20]
 80180c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180c6:	f8dc c000 	ldr.w	ip, [ip]
 80180ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80180ce:	ea4c 0707 	orr.w	r7, ip, r7
 80180d2:	f849 7b04 	str.w	r7, [r9], #4
 80180d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80180da:	40cf      	lsrs	r7, r1
 80180dc:	e7da      	b.n	8018094 <rshift+0x4c>
 80180de:	f851 cb04 	ldr.w	ip, [r1], #4
 80180e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80180e6:	e7c3      	b.n	8018070 <rshift+0x28>
 80180e8:	4623      	mov	r3, r4
 80180ea:	e7e1      	b.n	80180b0 <rshift+0x68>

080180ec <__hexdig_fun>:
 80180ec:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80180f0:	2b09      	cmp	r3, #9
 80180f2:	d802      	bhi.n	80180fa <__hexdig_fun+0xe>
 80180f4:	3820      	subs	r0, #32
 80180f6:	b2c0      	uxtb	r0, r0
 80180f8:	4770      	bx	lr
 80180fa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80180fe:	2b05      	cmp	r3, #5
 8018100:	d801      	bhi.n	8018106 <__hexdig_fun+0x1a>
 8018102:	3847      	subs	r0, #71	@ 0x47
 8018104:	e7f7      	b.n	80180f6 <__hexdig_fun+0xa>
 8018106:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801810a:	2b05      	cmp	r3, #5
 801810c:	d801      	bhi.n	8018112 <__hexdig_fun+0x26>
 801810e:	3827      	subs	r0, #39	@ 0x27
 8018110:	e7f1      	b.n	80180f6 <__hexdig_fun+0xa>
 8018112:	2000      	movs	r0, #0
 8018114:	4770      	bx	lr
	...

08018118 <__gethex>:
 8018118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801811c:	b085      	sub	sp, #20
 801811e:	468a      	mov	sl, r1
 8018120:	9302      	str	r3, [sp, #8]
 8018122:	680b      	ldr	r3, [r1, #0]
 8018124:	9001      	str	r0, [sp, #4]
 8018126:	4690      	mov	r8, r2
 8018128:	1c9c      	adds	r4, r3, #2
 801812a:	46a1      	mov	r9, r4
 801812c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018130:	2830      	cmp	r0, #48	@ 0x30
 8018132:	d0fa      	beq.n	801812a <__gethex+0x12>
 8018134:	eba9 0303 	sub.w	r3, r9, r3
 8018138:	f1a3 0b02 	sub.w	fp, r3, #2
 801813c:	f7ff ffd6 	bl	80180ec <__hexdig_fun>
 8018140:	4605      	mov	r5, r0
 8018142:	2800      	cmp	r0, #0
 8018144:	d168      	bne.n	8018218 <__gethex+0x100>
 8018146:	49a0      	ldr	r1, [pc, #640]	@ (80183c8 <__gethex+0x2b0>)
 8018148:	2201      	movs	r2, #1
 801814a:	4648      	mov	r0, r9
 801814c:	f7ff ff4c 	bl	8017fe8 <strncmp>
 8018150:	4607      	mov	r7, r0
 8018152:	2800      	cmp	r0, #0
 8018154:	d167      	bne.n	8018226 <__gethex+0x10e>
 8018156:	f899 0001 	ldrb.w	r0, [r9, #1]
 801815a:	4626      	mov	r6, r4
 801815c:	f7ff ffc6 	bl	80180ec <__hexdig_fun>
 8018160:	2800      	cmp	r0, #0
 8018162:	d062      	beq.n	801822a <__gethex+0x112>
 8018164:	4623      	mov	r3, r4
 8018166:	7818      	ldrb	r0, [r3, #0]
 8018168:	2830      	cmp	r0, #48	@ 0x30
 801816a:	4699      	mov	r9, r3
 801816c:	f103 0301 	add.w	r3, r3, #1
 8018170:	d0f9      	beq.n	8018166 <__gethex+0x4e>
 8018172:	f7ff ffbb 	bl	80180ec <__hexdig_fun>
 8018176:	fab0 f580 	clz	r5, r0
 801817a:	096d      	lsrs	r5, r5, #5
 801817c:	f04f 0b01 	mov.w	fp, #1
 8018180:	464a      	mov	r2, r9
 8018182:	4616      	mov	r6, r2
 8018184:	3201      	adds	r2, #1
 8018186:	7830      	ldrb	r0, [r6, #0]
 8018188:	f7ff ffb0 	bl	80180ec <__hexdig_fun>
 801818c:	2800      	cmp	r0, #0
 801818e:	d1f8      	bne.n	8018182 <__gethex+0x6a>
 8018190:	498d      	ldr	r1, [pc, #564]	@ (80183c8 <__gethex+0x2b0>)
 8018192:	2201      	movs	r2, #1
 8018194:	4630      	mov	r0, r6
 8018196:	f7ff ff27 	bl	8017fe8 <strncmp>
 801819a:	2800      	cmp	r0, #0
 801819c:	d13f      	bne.n	801821e <__gethex+0x106>
 801819e:	b944      	cbnz	r4, 80181b2 <__gethex+0x9a>
 80181a0:	1c74      	adds	r4, r6, #1
 80181a2:	4622      	mov	r2, r4
 80181a4:	4616      	mov	r6, r2
 80181a6:	3201      	adds	r2, #1
 80181a8:	7830      	ldrb	r0, [r6, #0]
 80181aa:	f7ff ff9f 	bl	80180ec <__hexdig_fun>
 80181ae:	2800      	cmp	r0, #0
 80181b0:	d1f8      	bne.n	80181a4 <__gethex+0x8c>
 80181b2:	1ba4      	subs	r4, r4, r6
 80181b4:	00a7      	lsls	r7, r4, #2
 80181b6:	7833      	ldrb	r3, [r6, #0]
 80181b8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80181bc:	2b50      	cmp	r3, #80	@ 0x50
 80181be:	d13e      	bne.n	801823e <__gethex+0x126>
 80181c0:	7873      	ldrb	r3, [r6, #1]
 80181c2:	2b2b      	cmp	r3, #43	@ 0x2b
 80181c4:	d033      	beq.n	801822e <__gethex+0x116>
 80181c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80181c8:	d034      	beq.n	8018234 <__gethex+0x11c>
 80181ca:	1c71      	adds	r1, r6, #1
 80181cc:	2400      	movs	r4, #0
 80181ce:	7808      	ldrb	r0, [r1, #0]
 80181d0:	f7ff ff8c 	bl	80180ec <__hexdig_fun>
 80181d4:	1e43      	subs	r3, r0, #1
 80181d6:	b2db      	uxtb	r3, r3
 80181d8:	2b18      	cmp	r3, #24
 80181da:	d830      	bhi.n	801823e <__gethex+0x126>
 80181dc:	f1a0 0210 	sub.w	r2, r0, #16
 80181e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80181e4:	f7ff ff82 	bl	80180ec <__hexdig_fun>
 80181e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80181ec:	fa5f fc8c 	uxtb.w	ip, ip
 80181f0:	f1bc 0f18 	cmp.w	ip, #24
 80181f4:	f04f 030a 	mov.w	r3, #10
 80181f8:	d91e      	bls.n	8018238 <__gethex+0x120>
 80181fa:	b104      	cbz	r4, 80181fe <__gethex+0xe6>
 80181fc:	4252      	negs	r2, r2
 80181fe:	4417      	add	r7, r2
 8018200:	f8ca 1000 	str.w	r1, [sl]
 8018204:	b1ed      	cbz	r5, 8018242 <__gethex+0x12a>
 8018206:	f1bb 0f00 	cmp.w	fp, #0
 801820a:	bf0c      	ite	eq
 801820c:	2506      	moveq	r5, #6
 801820e:	2500      	movne	r5, #0
 8018210:	4628      	mov	r0, r5
 8018212:	b005      	add	sp, #20
 8018214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018218:	2500      	movs	r5, #0
 801821a:	462c      	mov	r4, r5
 801821c:	e7b0      	b.n	8018180 <__gethex+0x68>
 801821e:	2c00      	cmp	r4, #0
 8018220:	d1c7      	bne.n	80181b2 <__gethex+0x9a>
 8018222:	4627      	mov	r7, r4
 8018224:	e7c7      	b.n	80181b6 <__gethex+0x9e>
 8018226:	464e      	mov	r6, r9
 8018228:	462f      	mov	r7, r5
 801822a:	2501      	movs	r5, #1
 801822c:	e7c3      	b.n	80181b6 <__gethex+0x9e>
 801822e:	2400      	movs	r4, #0
 8018230:	1cb1      	adds	r1, r6, #2
 8018232:	e7cc      	b.n	80181ce <__gethex+0xb6>
 8018234:	2401      	movs	r4, #1
 8018236:	e7fb      	b.n	8018230 <__gethex+0x118>
 8018238:	fb03 0002 	mla	r0, r3, r2, r0
 801823c:	e7ce      	b.n	80181dc <__gethex+0xc4>
 801823e:	4631      	mov	r1, r6
 8018240:	e7de      	b.n	8018200 <__gethex+0xe8>
 8018242:	eba6 0309 	sub.w	r3, r6, r9
 8018246:	3b01      	subs	r3, #1
 8018248:	4629      	mov	r1, r5
 801824a:	2b07      	cmp	r3, #7
 801824c:	dc0a      	bgt.n	8018264 <__gethex+0x14c>
 801824e:	9801      	ldr	r0, [sp, #4]
 8018250:	f7fd ffb8 	bl	80161c4 <_Balloc>
 8018254:	4604      	mov	r4, r0
 8018256:	b940      	cbnz	r0, 801826a <__gethex+0x152>
 8018258:	4b5c      	ldr	r3, [pc, #368]	@ (80183cc <__gethex+0x2b4>)
 801825a:	4602      	mov	r2, r0
 801825c:	21e4      	movs	r1, #228	@ 0xe4
 801825e:	485c      	ldr	r0, [pc, #368]	@ (80183d0 <__gethex+0x2b8>)
 8018260:	f7fb ff64 	bl	801412c <__assert_func>
 8018264:	3101      	adds	r1, #1
 8018266:	105b      	asrs	r3, r3, #1
 8018268:	e7ef      	b.n	801824a <__gethex+0x132>
 801826a:	f100 0a14 	add.w	sl, r0, #20
 801826e:	2300      	movs	r3, #0
 8018270:	4655      	mov	r5, sl
 8018272:	469b      	mov	fp, r3
 8018274:	45b1      	cmp	r9, r6
 8018276:	d337      	bcc.n	80182e8 <__gethex+0x1d0>
 8018278:	f845 bb04 	str.w	fp, [r5], #4
 801827c:	eba5 050a 	sub.w	r5, r5, sl
 8018280:	10ad      	asrs	r5, r5, #2
 8018282:	6125      	str	r5, [r4, #16]
 8018284:	4658      	mov	r0, fp
 8018286:	f7fe f88f 	bl	80163a8 <__hi0bits>
 801828a:	016d      	lsls	r5, r5, #5
 801828c:	f8d8 6000 	ldr.w	r6, [r8]
 8018290:	1a2d      	subs	r5, r5, r0
 8018292:	42b5      	cmp	r5, r6
 8018294:	dd54      	ble.n	8018340 <__gethex+0x228>
 8018296:	1bad      	subs	r5, r5, r6
 8018298:	4629      	mov	r1, r5
 801829a:	4620      	mov	r0, r4
 801829c:	f7fe fc23 	bl	8016ae6 <__any_on>
 80182a0:	4681      	mov	r9, r0
 80182a2:	b178      	cbz	r0, 80182c4 <__gethex+0x1ac>
 80182a4:	1e6b      	subs	r3, r5, #1
 80182a6:	1159      	asrs	r1, r3, #5
 80182a8:	f003 021f 	and.w	r2, r3, #31
 80182ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80182b0:	f04f 0901 	mov.w	r9, #1
 80182b4:	fa09 f202 	lsl.w	r2, r9, r2
 80182b8:	420a      	tst	r2, r1
 80182ba:	d003      	beq.n	80182c4 <__gethex+0x1ac>
 80182bc:	454b      	cmp	r3, r9
 80182be:	dc36      	bgt.n	801832e <__gethex+0x216>
 80182c0:	f04f 0902 	mov.w	r9, #2
 80182c4:	4629      	mov	r1, r5
 80182c6:	4620      	mov	r0, r4
 80182c8:	f7ff febe 	bl	8018048 <rshift>
 80182cc:	442f      	add	r7, r5
 80182ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182d2:	42bb      	cmp	r3, r7
 80182d4:	da42      	bge.n	801835c <__gethex+0x244>
 80182d6:	9801      	ldr	r0, [sp, #4]
 80182d8:	4621      	mov	r1, r4
 80182da:	f7fd ffb3 	bl	8016244 <_Bfree>
 80182de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80182e0:	2300      	movs	r3, #0
 80182e2:	6013      	str	r3, [r2, #0]
 80182e4:	25a3      	movs	r5, #163	@ 0xa3
 80182e6:	e793      	b.n	8018210 <__gethex+0xf8>
 80182e8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80182ec:	2a2e      	cmp	r2, #46	@ 0x2e
 80182ee:	d012      	beq.n	8018316 <__gethex+0x1fe>
 80182f0:	2b20      	cmp	r3, #32
 80182f2:	d104      	bne.n	80182fe <__gethex+0x1e6>
 80182f4:	f845 bb04 	str.w	fp, [r5], #4
 80182f8:	f04f 0b00 	mov.w	fp, #0
 80182fc:	465b      	mov	r3, fp
 80182fe:	7830      	ldrb	r0, [r6, #0]
 8018300:	9303      	str	r3, [sp, #12]
 8018302:	f7ff fef3 	bl	80180ec <__hexdig_fun>
 8018306:	9b03      	ldr	r3, [sp, #12]
 8018308:	f000 000f 	and.w	r0, r0, #15
 801830c:	4098      	lsls	r0, r3
 801830e:	ea4b 0b00 	orr.w	fp, fp, r0
 8018312:	3304      	adds	r3, #4
 8018314:	e7ae      	b.n	8018274 <__gethex+0x15c>
 8018316:	45b1      	cmp	r9, r6
 8018318:	d8ea      	bhi.n	80182f0 <__gethex+0x1d8>
 801831a:	492b      	ldr	r1, [pc, #172]	@ (80183c8 <__gethex+0x2b0>)
 801831c:	9303      	str	r3, [sp, #12]
 801831e:	2201      	movs	r2, #1
 8018320:	4630      	mov	r0, r6
 8018322:	f7ff fe61 	bl	8017fe8 <strncmp>
 8018326:	9b03      	ldr	r3, [sp, #12]
 8018328:	2800      	cmp	r0, #0
 801832a:	d1e1      	bne.n	80182f0 <__gethex+0x1d8>
 801832c:	e7a2      	b.n	8018274 <__gethex+0x15c>
 801832e:	1ea9      	subs	r1, r5, #2
 8018330:	4620      	mov	r0, r4
 8018332:	f7fe fbd8 	bl	8016ae6 <__any_on>
 8018336:	2800      	cmp	r0, #0
 8018338:	d0c2      	beq.n	80182c0 <__gethex+0x1a8>
 801833a:	f04f 0903 	mov.w	r9, #3
 801833e:	e7c1      	b.n	80182c4 <__gethex+0x1ac>
 8018340:	da09      	bge.n	8018356 <__gethex+0x23e>
 8018342:	1b75      	subs	r5, r6, r5
 8018344:	4621      	mov	r1, r4
 8018346:	9801      	ldr	r0, [sp, #4]
 8018348:	462a      	mov	r2, r5
 801834a:	f7fe f993 	bl	8016674 <__lshift>
 801834e:	1b7f      	subs	r7, r7, r5
 8018350:	4604      	mov	r4, r0
 8018352:	f100 0a14 	add.w	sl, r0, #20
 8018356:	f04f 0900 	mov.w	r9, #0
 801835a:	e7b8      	b.n	80182ce <__gethex+0x1b6>
 801835c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018360:	42bd      	cmp	r5, r7
 8018362:	dd6f      	ble.n	8018444 <__gethex+0x32c>
 8018364:	1bed      	subs	r5, r5, r7
 8018366:	42ae      	cmp	r6, r5
 8018368:	dc34      	bgt.n	80183d4 <__gethex+0x2bc>
 801836a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801836e:	2b02      	cmp	r3, #2
 8018370:	d022      	beq.n	80183b8 <__gethex+0x2a0>
 8018372:	2b03      	cmp	r3, #3
 8018374:	d024      	beq.n	80183c0 <__gethex+0x2a8>
 8018376:	2b01      	cmp	r3, #1
 8018378:	d115      	bne.n	80183a6 <__gethex+0x28e>
 801837a:	42ae      	cmp	r6, r5
 801837c:	d113      	bne.n	80183a6 <__gethex+0x28e>
 801837e:	2e01      	cmp	r6, #1
 8018380:	d10b      	bne.n	801839a <__gethex+0x282>
 8018382:	9a02      	ldr	r2, [sp, #8]
 8018384:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018388:	6013      	str	r3, [r2, #0]
 801838a:	2301      	movs	r3, #1
 801838c:	6123      	str	r3, [r4, #16]
 801838e:	f8ca 3000 	str.w	r3, [sl]
 8018392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018394:	2562      	movs	r5, #98	@ 0x62
 8018396:	601c      	str	r4, [r3, #0]
 8018398:	e73a      	b.n	8018210 <__gethex+0xf8>
 801839a:	1e71      	subs	r1, r6, #1
 801839c:	4620      	mov	r0, r4
 801839e:	f7fe fba2 	bl	8016ae6 <__any_on>
 80183a2:	2800      	cmp	r0, #0
 80183a4:	d1ed      	bne.n	8018382 <__gethex+0x26a>
 80183a6:	9801      	ldr	r0, [sp, #4]
 80183a8:	4621      	mov	r1, r4
 80183aa:	f7fd ff4b 	bl	8016244 <_Bfree>
 80183ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80183b0:	2300      	movs	r3, #0
 80183b2:	6013      	str	r3, [r2, #0]
 80183b4:	2550      	movs	r5, #80	@ 0x50
 80183b6:	e72b      	b.n	8018210 <__gethex+0xf8>
 80183b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d1f3      	bne.n	80183a6 <__gethex+0x28e>
 80183be:	e7e0      	b.n	8018382 <__gethex+0x26a>
 80183c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d1dd      	bne.n	8018382 <__gethex+0x26a>
 80183c6:	e7ee      	b.n	80183a6 <__gethex+0x28e>
 80183c8:	08019c68 	.word	0x08019c68
 80183cc:	08019b01 	.word	0x08019b01
 80183d0:	08019dda 	.word	0x08019dda
 80183d4:	1e6f      	subs	r7, r5, #1
 80183d6:	f1b9 0f00 	cmp.w	r9, #0
 80183da:	d130      	bne.n	801843e <__gethex+0x326>
 80183dc:	b127      	cbz	r7, 80183e8 <__gethex+0x2d0>
 80183de:	4639      	mov	r1, r7
 80183e0:	4620      	mov	r0, r4
 80183e2:	f7fe fb80 	bl	8016ae6 <__any_on>
 80183e6:	4681      	mov	r9, r0
 80183e8:	117a      	asrs	r2, r7, #5
 80183ea:	2301      	movs	r3, #1
 80183ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80183f0:	f007 071f 	and.w	r7, r7, #31
 80183f4:	40bb      	lsls	r3, r7
 80183f6:	4213      	tst	r3, r2
 80183f8:	4629      	mov	r1, r5
 80183fa:	4620      	mov	r0, r4
 80183fc:	bf18      	it	ne
 80183fe:	f049 0902 	orrne.w	r9, r9, #2
 8018402:	f7ff fe21 	bl	8018048 <rshift>
 8018406:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801840a:	1b76      	subs	r6, r6, r5
 801840c:	2502      	movs	r5, #2
 801840e:	f1b9 0f00 	cmp.w	r9, #0
 8018412:	d047      	beq.n	80184a4 <__gethex+0x38c>
 8018414:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018418:	2b02      	cmp	r3, #2
 801841a:	d015      	beq.n	8018448 <__gethex+0x330>
 801841c:	2b03      	cmp	r3, #3
 801841e:	d017      	beq.n	8018450 <__gethex+0x338>
 8018420:	2b01      	cmp	r3, #1
 8018422:	d109      	bne.n	8018438 <__gethex+0x320>
 8018424:	f019 0f02 	tst.w	r9, #2
 8018428:	d006      	beq.n	8018438 <__gethex+0x320>
 801842a:	f8da 3000 	ldr.w	r3, [sl]
 801842e:	ea49 0903 	orr.w	r9, r9, r3
 8018432:	f019 0f01 	tst.w	r9, #1
 8018436:	d10e      	bne.n	8018456 <__gethex+0x33e>
 8018438:	f045 0510 	orr.w	r5, r5, #16
 801843c:	e032      	b.n	80184a4 <__gethex+0x38c>
 801843e:	f04f 0901 	mov.w	r9, #1
 8018442:	e7d1      	b.n	80183e8 <__gethex+0x2d0>
 8018444:	2501      	movs	r5, #1
 8018446:	e7e2      	b.n	801840e <__gethex+0x2f6>
 8018448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801844a:	f1c3 0301 	rsb	r3, r3, #1
 801844e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018452:	2b00      	cmp	r3, #0
 8018454:	d0f0      	beq.n	8018438 <__gethex+0x320>
 8018456:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801845a:	f104 0314 	add.w	r3, r4, #20
 801845e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018462:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018466:	f04f 0c00 	mov.w	ip, #0
 801846a:	4618      	mov	r0, r3
 801846c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018470:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018474:	d01b      	beq.n	80184ae <__gethex+0x396>
 8018476:	3201      	adds	r2, #1
 8018478:	6002      	str	r2, [r0, #0]
 801847a:	2d02      	cmp	r5, #2
 801847c:	f104 0314 	add.w	r3, r4, #20
 8018480:	d13c      	bne.n	80184fc <__gethex+0x3e4>
 8018482:	f8d8 2000 	ldr.w	r2, [r8]
 8018486:	3a01      	subs	r2, #1
 8018488:	42b2      	cmp	r2, r6
 801848a:	d109      	bne.n	80184a0 <__gethex+0x388>
 801848c:	1171      	asrs	r1, r6, #5
 801848e:	2201      	movs	r2, #1
 8018490:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018494:	f006 061f 	and.w	r6, r6, #31
 8018498:	fa02 f606 	lsl.w	r6, r2, r6
 801849c:	421e      	tst	r6, r3
 801849e:	d13a      	bne.n	8018516 <__gethex+0x3fe>
 80184a0:	f045 0520 	orr.w	r5, r5, #32
 80184a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80184a6:	601c      	str	r4, [r3, #0]
 80184a8:	9b02      	ldr	r3, [sp, #8]
 80184aa:	601f      	str	r7, [r3, #0]
 80184ac:	e6b0      	b.n	8018210 <__gethex+0xf8>
 80184ae:	4299      	cmp	r1, r3
 80184b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80184b4:	d8d9      	bhi.n	801846a <__gethex+0x352>
 80184b6:	68a3      	ldr	r3, [r4, #8]
 80184b8:	459b      	cmp	fp, r3
 80184ba:	db17      	blt.n	80184ec <__gethex+0x3d4>
 80184bc:	6861      	ldr	r1, [r4, #4]
 80184be:	9801      	ldr	r0, [sp, #4]
 80184c0:	3101      	adds	r1, #1
 80184c2:	f7fd fe7f 	bl	80161c4 <_Balloc>
 80184c6:	4681      	mov	r9, r0
 80184c8:	b918      	cbnz	r0, 80184d2 <__gethex+0x3ba>
 80184ca:	4b1a      	ldr	r3, [pc, #104]	@ (8018534 <__gethex+0x41c>)
 80184cc:	4602      	mov	r2, r0
 80184ce:	2184      	movs	r1, #132	@ 0x84
 80184d0:	e6c5      	b.n	801825e <__gethex+0x146>
 80184d2:	6922      	ldr	r2, [r4, #16]
 80184d4:	3202      	adds	r2, #2
 80184d6:	f104 010c 	add.w	r1, r4, #12
 80184da:	0092      	lsls	r2, r2, #2
 80184dc:	300c      	adds	r0, #12
 80184de:	f7fc ffc6 	bl	801546e <memcpy>
 80184e2:	4621      	mov	r1, r4
 80184e4:	9801      	ldr	r0, [sp, #4]
 80184e6:	f7fd fead 	bl	8016244 <_Bfree>
 80184ea:	464c      	mov	r4, r9
 80184ec:	6923      	ldr	r3, [r4, #16]
 80184ee:	1c5a      	adds	r2, r3, #1
 80184f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80184f4:	6122      	str	r2, [r4, #16]
 80184f6:	2201      	movs	r2, #1
 80184f8:	615a      	str	r2, [r3, #20]
 80184fa:	e7be      	b.n	801847a <__gethex+0x362>
 80184fc:	6922      	ldr	r2, [r4, #16]
 80184fe:	455a      	cmp	r2, fp
 8018500:	dd0b      	ble.n	801851a <__gethex+0x402>
 8018502:	2101      	movs	r1, #1
 8018504:	4620      	mov	r0, r4
 8018506:	f7ff fd9f 	bl	8018048 <rshift>
 801850a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801850e:	3701      	adds	r7, #1
 8018510:	42bb      	cmp	r3, r7
 8018512:	f6ff aee0 	blt.w	80182d6 <__gethex+0x1be>
 8018516:	2501      	movs	r5, #1
 8018518:	e7c2      	b.n	80184a0 <__gethex+0x388>
 801851a:	f016 061f 	ands.w	r6, r6, #31
 801851e:	d0fa      	beq.n	8018516 <__gethex+0x3fe>
 8018520:	4453      	add	r3, sl
 8018522:	f1c6 0620 	rsb	r6, r6, #32
 8018526:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801852a:	f7fd ff3d 	bl	80163a8 <__hi0bits>
 801852e:	42b0      	cmp	r0, r6
 8018530:	dbe7      	blt.n	8018502 <__gethex+0x3ea>
 8018532:	e7f0      	b.n	8018516 <__gethex+0x3fe>
 8018534:	08019b01 	.word	0x08019b01

08018538 <L_shift>:
 8018538:	f1c2 0208 	rsb	r2, r2, #8
 801853c:	0092      	lsls	r2, r2, #2
 801853e:	b570      	push	{r4, r5, r6, lr}
 8018540:	f1c2 0620 	rsb	r6, r2, #32
 8018544:	6843      	ldr	r3, [r0, #4]
 8018546:	6804      	ldr	r4, [r0, #0]
 8018548:	fa03 f506 	lsl.w	r5, r3, r6
 801854c:	432c      	orrs	r4, r5
 801854e:	40d3      	lsrs	r3, r2
 8018550:	6004      	str	r4, [r0, #0]
 8018552:	f840 3f04 	str.w	r3, [r0, #4]!
 8018556:	4288      	cmp	r0, r1
 8018558:	d3f4      	bcc.n	8018544 <L_shift+0xc>
 801855a:	bd70      	pop	{r4, r5, r6, pc}

0801855c <__match>:
 801855c:	b530      	push	{r4, r5, lr}
 801855e:	6803      	ldr	r3, [r0, #0]
 8018560:	3301      	adds	r3, #1
 8018562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018566:	b914      	cbnz	r4, 801856e <__match+0x12>
 8018568:	6003      	str	r3, [r0, #0]
 801856a:	2001      	movs	r0, #1
 801856c:	bd30      	pop	{r4, r5, pc}
 801856e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018572:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8018576:	2d19      	cmp	r5, #25
 8018578:	bf98      	it	ls
 801857a:	3220      	addls	r2, #32
 801857c:	42a2      	cmp	r2, r4
 801857e:	d0f0      	beq.n	8018562 <__match+0x6>
 8018580:	2000      	movs	r0, #0
 8018582:	e7f3      	b.n	801856c <__match+0x10>

08018584 <__hexnan>:
 8018584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018588:	680b      	ldr	r3, [r1, #0]
 801858a:	6801      	ldr	r1, [r0, #0]
 801858c:	115e      	asrs	r6, r3, #5
 801858e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018592:	f013 031f 	ands.w	r3, r3, #31
 8018596:	b087      	sub	sp, #28
 8018598:	bf18      	it	ne
 801859a:	3604      	addne	r6, #4
 801859c:	2500      	movs	r5, #0
 801859e:	1f37      	subs	r7, r6, #4
 80185a0:	4682      	mov	sl, r0
 80185a2:	4690      	mov	r8, r2
 80185a4:	9301      	str	r3, [sp, #4]
 80185a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80185aa:	46b9      	mov	r9, r7
 80185ac:	463c      	mov	r4, r7
 80185ae:	9502      	str	r5, [sp, #8]
 80185b0:	46ab      	mov	fp, r5
 80185b2:	784a      	ldrb	r2, [r1, #1]
 80185b4:	1c4b      	adds	r3, r1, #1
 80185b6:	9303      	str	r3, [sp, #12]
 80185b8:	b342      	cbz	r2, 801860c <__hexnan+0x88>
 80185ba:	4610      	mov	r0, r2
 80185bc:	9105      	str	r1, [sp, #20]
 80185be:	9204      	str	r2, [sp, #16]
 80185c0:	f7ff fd94 	bl	80180ec <__hexdig_fun>
 80185c4:	2800      	cmp	r0, #0
 80185c6:	d151      	bne.n	801866c <__hexnan+0xe8>
 80185c8:	9a04      	ldr	r2, [sp, #16]
 80185ca:	9905      	ldr	r1, [sp, #20]
 80185cc:	2a20      	cmp	r2, #32
 80185ce:	d818      	bhi.n	8018602 <__hexnan+0x7e>
 80185d0:	9b02      	ldr	r3, [sp, #8]
 80185d2:	459b      	cmp	fp, r3
 80185d4:	dd13      	ble.n	80185fe <__hexnan+0x7a>
 80185d6:	454c      	cmp	r4, r9
 80185d8:	d206      	bcs.n	80185e8 <__hexnan+0x64>
 80185da:	2d07      	cmp	r5, #7
 80185dc:	dc04      	bgt.n	80185e8 <__hexnan+0x64>
 80185de:	462a      	mov	r2, r5
 80185e0:	4649      	mov	r1, r9
 80185e2:	4620      	mov	r0, r4
 80185e4:	f7ff ffa8 	bl	8018538 <L_shift>
 80185e8:	4544      	cmp	r4, r8
 80185ea:	d952      	bls.n	8018692 <__hexnan+0x10e>
 80185ec:	2300      	movs	r3, #0
 80185ee:	f1a4 0904 	sub.w	r9, r4, #4
 80185f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80185f6:	f8cd b008 	str.w	fp, [sp, #8]
 80185fa:	464c      	mov	r4, r9
 80185fc:	461d      	mov	r5, r3
 80185fe:	9903      	ldr	r1, [sp, #12]
 8018600:	e7d7      	b.n	80185b2 <__hexnan+0x2e>
 8018602:	2a29      	cmp	r2, #41	@ 0x29
 8018604:	d157      	bne.n	80186b6 <__hexnan+0x132>
 8018606:	3102      	adds	r1, #2
 8018608:	f8ca 1000 	str.w	r1, [sl]
 801860c:	f1bb 0f00 	cmp.w	fp, #0
 8018610:	d051      	beq.n	80186b6 <__hexnan+0x132>
 8018612:	454c      	cmp	r4, r9
 8018614:	d206      	bcs.n	8018624 <__hexnan+0xa0>
 8018616:	2d07      	cmp	r5, #7
 8018618:	dc04      	bgt.n	8018624 <__hexnan+0xa0>
 801861a:	462a      	mov	r2, r5
 801861c:	4649      	mov	r1, r9
 801861e:	4620      	mov	r0, r4
 8018620:	f7ff ff8a 	bl	8018538 <L_shift>
 8018624:	4544      	cmp	r4, r8
 8018626:	d936      	bls.n	8018696 <__hexnan+0x112>
 8018628:	f1a8 0204 	sub.w	r2, r8, #4
 801862c:	4623      	mov	r3, r4
 801862e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018632:	f842 1f04 	str.w	r1, [r2, #4]!
 8018636:	429f      	cmp	r7, r3
 8018638:	d2f9      	bcs.n	801862e <__hexnan+0xaa>
 801863a:	1b3b      	subs	r3, r7, r4
 801863c:	f023 0303 	bic.w	r3, r3, #3
 8018640:	3304      	adds	r3, #4
 8018642:	3401      	adds	r4, #1
 8018644:	3e03      	subs	r6, #3
 8018646:	42b4      	cmp	r4, r6
 8018648:	bf88      	it	hi
 801864a:	2304      	movhi	r3, #4
 801864c:	4443      	add	r3, r8
 801864e:	2200      	movs	r2, #0
 8018650:	f843 2b04 	str.w	r2, [r3], #4
 8018654:	429f      	cmp	r7, r3
 8018656:	d2fb      	bcs.n	8018650 <__hexnan+0xcc>
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	b91b      	cbnz	r3, 8018664 <__hexnan+0xe0>
 801865c:	4547      	cmp	r7, r8
 801865e:	d128      	bne.n	80186b2 <__hexnan+0x12e>
 8018660:	2301      	movs	r3, #1
 8018662:	603b      	str	r3, [r7, #0]
 8018664:	2005      	movs	r0, #5
 8018666:	b007      	add	sp, #28
 8018668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801866c:	3501      	adds	r5, #1
 801866e:	2d08      	cmp	r5, #8
 8018670:	f10b 0b01 	add.w	fp, fp, #1
 8018674:	dd06      	ble.n	8018684 <__hexnan+0x100>
 8018676:	4544      	cmp	r4, r8
 8018678:	d9c1      	bls.n	80185fe <__hexnan+0x7a>
 801867a:	2300      	movs	r3, #0
 801867c:	f844 3c04 	str.w	r3, [r4, #-4]
 8018680:	2501      	movs	r5, #1
 8018682:	3c04      	subs	r4, #4
 8018684:	6822      	ldr	r2, [r4, #0]
 8018686:	f000 000f 	and.w	r0, r0, #15
 801868a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801868e:	6020      	str	r0, [r4, #0]
 8018690:	e7b5      	b.n	80185fe <__hexnan+0x7a>
 8018692:	2508      	movs	r5, #8
 8018694:	e7b3      	b.n	80185fe <__hexnan+0x7a>
 8018696:	9b01      	ldr	r3, [sp, #4]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d0dd      	beq.n	8018658 <__hexnan+0xd4>
 801869c:	f1c3 0320 	rsb	r3, r3, #32
 80186a0:	f04f 32ff 	mov.w	r2, #4294967295
 80186a4:	40da      	lsrs	r2, r3
 80186a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80186aa:	4013      	ands	r3, r2
 80186ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80186b0:	e7d2      	b.n	8018658 <__hexnan+0xd4>
 80186b2:	3f04      	subs	r7, #4
 80186b4:	e7d0      	b.n	8018658 <__hexnan+0xd4>
 80186b6:	2004      	movs	r0, #4
 80186b8:	e7d5      	b.n	8018666 <__hexnan+0xe2>

080186ba <__ascii_mbtowc>:
 80186ba:	b082      	sub	sp, #8
 80186bc:	b901      	cbnz	r1, 80186c0 <__ascii_mbtowc+0x6>
 80186be:	a901      	add	r1, sp, #4
 80186c0:	b142      	cbz	r2, 80186d4 <__ascii_mbtowc+0x1a>
 80186c2:	b14b      	cbz	r3, 80186d8 <__ascii_mbtowc+0x1e>
 80186c4:	7813      	ldrb	r3, [r2, #0]
 80186c6:	600b      	str	r3, [r1, #0]
 80186c8:	7812      	ldrb	r2, [r2, #0]
 80186ca:	1e10      	subs	r0, r2, #0
 80186cc:	bf18      	it	ne
 80186ce:	2001      	movne	r0, #1
 80186d0:	b002      	add	sp, #8
 80186d2:	4770      	bx	lr
 80186d4:	4610      	mov	r0, r2
 80186d6:	e7fb      	b.n	80186d0 <__ascii_mbtowc+0x16>
 80186d8:	f06f 0001 	mvn.w	r0, #1
 80186dc:	e7f8      	b.n	80186d0 <__ascii_mbtowc+0x16>

080186de <_realloc_r>:
 80186de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186e2:	4680      	mov	r8, r0
 80186e4:	4615      	mov	r5, r2
 80186e6:	460c      	mov	r4, r1
 80186e8:	b921      	cbnz	r1, 80186f4 <_realloc_r+0x16>
 80186ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186ee:	4611      	mov	r1, r2
 80186f0:	f7fb bd7e 	b.w	80141f0 <_malloc_r>
 80186f4:	b92a      	cbnz	r2, 8018702 <_realloc_r+0x24>
 80186f6:	f7fd fd1b 	bl	8016130 <_free_r>
 80186fa:	2400      	movs	r4, #0
 80186fc:	4620      	mov	r0, r4
 80186fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018702:	f000 f8ab 	bl	801885c <_malloc_usable_size_r>
 8018706:	4285      	cmp	r5, r0
 8018708:	4606      	mov	r6, r0
 801870a:	d802      	bhi.n	8018712 <_realloc_r+0x34>
 801870c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018710:	d8f4      	bhi.n	80186fc <_realloc_r+0x1e>
 8018712:	4629      	mov	r1, r5
 8018714:	4640      	mov	r0, r8
 8018716:	f7fb fd6b 	bl	80141f0 <_malloc_r>
 801871a:	4607      	mov	r7, r0
 801871c:	2800      	cmp	r0, #0
 801871e:	d0ec      	beq.n	80186fa <_realloc_r+0x1c>
 8018720:	42b5      	cmp	r5, r6
 8018722:	462a      	mov	r2, r5
 8018724:	4621      	mov	r1, r4
 8018726:	bf28      	it	cs
 8018728:	4632      	movcs	r2, r6
 801872a:	f7fc fea0 	bl	801546e <memcpy>
 801872e:	4621      	mov	r1, r4
 8018730:	4640      	mov	r0, r8
 8018732:	f7fd fcfd 	bl	8016130 <_free_r>
 8018736:	463c      	mov	r4, r7
 8018738:	e7e0      	b.n	80186fc <_realloc_r+0x1e>

0801873a <__ascii_wctomb>:
 801873a:	4603      	mov	r3, r0
 801873c:	4608      	mov	r0, r1
 801873e:	b141      	cbz	r1, 8018752 <__ascii_wctomb+0x18>
 8018740:	2aff      	cmp	r2, #255	@ 0xff
 8018742:	d904      	bls.n	801874e <__ascii_wctomb+0x14>
 8018744:	228a      	movs	r2, #138	@ 0x8a
 8018746:	601a      	str	r2, [r3, #0]
 8018748:	f04f 30ff 	mov.w	r0, #4294967295
 801874c:	4770      	bx	lr
 801874e:	700a      	strb	r2, [r1, #0]
 8018750:	2001      	movs	r0, #1
 8018752:	4770      	bx	lr

08018754 <__swhatbuf_r>:
 8018754:	b570      	push	{r4, r5, r6, lr}
 8018756:	460c      	mov	r4, r1
 8018758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801875c:	2900      	cmp	r1, #0
 801875e:	b096      	sub	sp, #88	@ 0x58
 8018760:	4615      	mov	r5, r2
 8018762:	461e      	mov	r6, r3
 8018764:	da0d      	bge.n	8018782 <__swhatbuf_r+0x2e>
 8018766:	89a3      	ldrh	r3, [r4, #12]
 8018768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801876c:	f04f 0100 	mov.w	r1, #0
 8018770:	bf14      	ite	ne
 8018772:	2340      	movne	r3, #64	@ 0x40
 8018774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018778:	2000      	movs	r0, #0
 801877a:	6031      	str	r1, [r6, #0]
 801877c:	602b      	str	r3, [r5, #0]
 801877e:	b016      	add	sp, #88	@ 0x58
 8018780:	bd70      	pop	{r4, r5, r6, pc}
 8018782:	466a      	mov	r2, sp
 8018784:	f000 f848 	bl	8018818 <_fstat_r>
 8018788:	2800      	cmp	r0, #0
 801878a:	dbec      	blt.n	8018766 <__swhatbuf_r+0x12>
 801878c:	9901      	ldr	r1, [sp, #4]
 801878e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018796:	4259      	negs	r1, r3
 8018798:	4159      	adcs	r1, r3
 801879a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801879e:	e7eb      	b.n	8018778 <__swhatbuf_r+0x24>

080187a0 <__smakebuf_r>:
 80187a0:	898b      	ldrh	r3, [r1, #12]
 80187a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80187a4:	079d      	lsls	r5, r3, #30
 80187a6:	4606      	mov	r6, r0
 80187a8:	460c      	mov	r4, r1
 80187aa:	d507      	bpl.n	80187bc <__smakebuf_r+0x1c>
 80187ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80187b0:	6023      	str	r3, [r4, #0]
 80187b2:	6123      	str	r3, [r4, #16]
 80187b4:	2301      	movs	r3, #1
 80187b6:	6163      	str	r3, [r4, #20]
 80187b8:	b003      	add	sp, #12
 80187ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187bc:	ab01      	add	r3, sp, #4
 80187be:	466a      	mov	r2, sp
 80187c0:	f7ff ffc8 	bl	8018754 <__swhatbuf_r>
 80187c4:	9f00      	ldr	r7, [sp, #0]
 80187c6:	4605      	mov	r5, r0
 80187c8:	4639      	mov	r1, r7
 80187ca:	4630      	mov	r0, r6
 80187cc:	f7fb fd10 	bl	80141f0 <_malloc_r>
 80187d0:	b948      	cbnz	r0, 80187e6 <__smakebuf_r+0x46>
 80187d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187d6:	059a      	lsls	r2, r3, #22
 80187d8:	d4ee      	bmi.n	80187b8 <__smakebuf_r+0x18>
 80187da:	f023 0303 	bic.w	r3, r3, #3
 80187de:	f043 0302 	orr.w	r3, r3, #2
 80187e2:	81a3      	strh	r3, [r4, #12]
 80187e4:	e7e2      	b.n	80187ac <__smakebuf_r+0xc>
 80187e6:	89a3      	ldrh	r3, [r4, #12]
 80187e8:	6020      	str	r0, [r4, #0]
 80187ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80187ee:	81a3      	strh	r3, [r4, #12]
 80187f0:	9b01      	ldr	r3, [sp, #4]
 80187f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80187f6:	b15b      	cbz	r3, 8018810 <__smakebuf_r+0x70>
 80187f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80187fc:	4630      	mov	r0, r6
 80187fe:	f000 f81d 	bl	801883c <_isatty_r>
 8018802:	b128      	cbz	r0, 8018810 <__smakebuf_r+0x70>
 8018804:	89a3      	ldrh	r3, [r4, #12]
 8018806:	f023 0303 	bic.w	r3, r3, #3
 801880a:	f043 0301 	orr.w	r3, r3, #1
 801880e:	81a3      	strh	r3, [r4, #12]
 8018810:	89a3      	ldrh	r3, [r4, #12]
 8018812:	431d      	orrs	r5, r3
 8018814:	81a5      	strh	r5, [r4, #12]
 8018816:	e7cf      	b.n	80187b8 <__smakebuf_r+0x18>

08018818 <_fstat_r>:
 8018818:	b538      	push	{r3, r4, r5, lr}
 801881a:	4d07      	ldr	r5, [pc, #28]	@ (8018838 <_fstat_r+0x20>)
 801881c:	2300      	movs	r3, #0
 801881e:	4604      	mov	r4, r0
 8018820:	4608      	mov	r0, r1
 8018822:	4611      	mov	r1, r2
 8018824:	602b      	str	r3, [r5, #0]
 8018826:	f7f1 f961 	bl	8009aec <_fstat>
 801882a:	1c43      	adds	r3, r0, #1
 801882c:	d102      	bne.n	8018834 <_fstat_r+0x1c>
 801882e:	682b      	ldr	r3, [r5, #0]
 8018830:	b103      	cbz	r3, 8018834 <_fstat_r+0x1c>
 8018832:	6023      	str	r3, [r4, #0]
 8018834:	bd38      	pop	{r3, r4, r5, pc}
 8018836:	bf00      	nop
 8018838:	20000bac 	.word	0x20000bac

0801883c <_isatty_r>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	4d06      	ldr	r5, [pc, #24]	@ (8018858 <_isatty_r+0x1c>)
 8018840:	2300      	movs	r3, #0
 8018842:	4604      	mov	r4, r0
 8018844:	4608      	mov	r0, r1
 8018846:	602b      	str	r3, [r5, #0]
 8018848:	f7f1 f960 	bl	8009b0c <_isatty>
 801884c:	1c43      	adds	r3, r0, #1
 801884e:	d102      	bne.n	8018856 <_isatty_r+0x1a>
 8018850:	682b      	ldr	r3, [r5, #0]
 8018852:	b103      	cbz	r3, 8018856 <_isatty_r+0x1a>
 8018854:	6023      	str	r3, [r4, #0]
 8018856:	bd38      	pop	{r3, r4, r5, pc}
 8018858:	20000bac 	.word	0x20000bac

0801885c <_malloc_usable_size_r>:
 801885c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018860:	1f18      	subs	r0, r3, #4
 8018862:	2b00      	cmp	r3, #0
 8018864:	bfbc      	itt	lt
 8018866:	580b      	ldrlt	r3, [r1, r0]
 8018868:	18c0      	addlt	r0, r0, r3
 801886a:	4770      	bx	lr

0801886c <_init>:
 801886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801886e:	bf00      	nop
 8018870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018872:	bc08      	pop	{r3}
 8018874:	469e      	mov	lr, r3
 8018876:	4770      	bx	lr

08018878 <_fini>:
 8018878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801887a:	bf00      	nop
 801887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801887e:	bc08      	pop	{r3}
 8018880:	469e      	mov	lr, r3
 8018882:	4770      	bx	lr
