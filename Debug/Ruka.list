
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000143e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000157c  080145c8  080145c8  000245c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b44  08015b44  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08015b44  08015b44  00025b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b4c  08015b4c  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08015b4c  08015b4c  00025b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08015b5c  08015b5c  00025b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08015b6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000210  08015d7c  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  08015d7c  0003080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040b81  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007821  00000000  00000000  00070e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002178  00000000  00000000  00078628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a20  00000000  00000000  0007a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ee1d  00000000  00000000  0007c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c314  00000000  00000000  000aafdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116870  00000000  00000000  000d72f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a680  00000000  00000000  001edb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001f81e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	080145b0 	.word	0x080145b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	080145b0 	.word	0x080145b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	08014ff4 	.word	0x08014ff4

08001060 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	08014ff4 	.word	0x08014ff4

08001080 <_ZN15Adafruit_SensorD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800108e:	2108      	movs	r1, #8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f00e fe58 	bl	800fd46 <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffb9 	bl	8001040 <_ZN15Adafruit_SensorC1Ev>
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	609a      	str	r2, [r3, #8]
  _address = address;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	715a      	strb	r2, [r3, #5]
}
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08014fd8 	.word	0x08014fd8

080010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa5c 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2206      	movs	r2, #6
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f00f ff06 	bl	8010f1e <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	83fb      	strh	r3, [r7, #30]
 8001116:	8bfb      	ldrh	r3, [r7, #30]
 8001118:	83bb      	strh	r3, [r7, #28]
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800111e:	f107 0214 	add.w	r2, r7, #20
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	2306      	movs	r3, #6
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 fa05 	bl	8001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800112c:	7d3b      	ldrb	r3, [r7, #20]
 800112e:	b21a      	sxth	r2, r3
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	b21a      	sxth	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001148:	7e3b      	ldrb	r3, [r7, #24]
 800114a:	b21a      	sxth	r2, r3
 800114c:	7e7b      	ldrb	r3, [r7, #25]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3b08      	subs	r3, #8
 800115a:	2b26      	cmp	r3, #38	; 0x26
 800115c:	f200 8152 	bhi.w	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001385 	.word	0x08001385
 800116c:	08001405 	.word	0x08001405
 8001170:	08001405 	.word	0x08001405
 8001174:	08001405 	.word	0x08001405
 8001178:	08001405 	.word	0x08001405
 800117c:	08001405 	.word	0x08001405
 8001180:	08001205 	.word	0x08001205
 8001184:	08001405 	.word	0x08001405
 8001188:	08001405 	.word	0x08001405
 800118c:	08001405 	.word	0x08001405
 8001190:	08001405 	.word	0x08001405
 8001194:	08001405 	.word	0x08001405
 8001198:	08001285 	.word	0x08001285
 800119c:	08001405 	.word	0x08001405
 80011a0:	08001405 	.word	0x08001405
 80011a4:	08001405 	.word	0x08001405
 80011a8:	08001405 	.word	0x08001405
 80011ac:	08001405 	.word	0x08001405
 80011b0:	08001305 	.word	0x08001305
 80011b4:	08001405 	.word	0x08001405
 80011b8:	08001405 	.word	0x08001405
 80011bc:	08001405 	.word	0x08001405
 80011c0:	08001405 	.word	0x08001405
 80011c4:	08001405 	.word	0x08001405
 80011c8:	08001405 	.word	0x08001405
 80011cc:	08001405 	.word	0x08001405
 80011d0:	08001405 	.word	0x08001405
 80011d4:	08001405 	.word	0x08001405
 80011d8:	08001405 	.word	0x08001405
 80011dc:	08001405 	.word	0x08001405
 80011e0:	08001405 	.word	0x08001405
 80011e4:	08001405 	.word	0x08001405
 80011e8:	08001385 	.word	0x08001385
 80011ec:	08001405 	.word	0x08001405
 80011f0:	08001405 	.word	0x08001405
 80011f4:	08001405 	.word	0x08001405
 80011f8:	08001405 	.word	0x08001405
 80011fc:	08001405 	.word	0x08001405
 8001200:	08001385 	.word	0x08001385
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9b3 	bl	8000574 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001214:	f7ff fb42 	bl	800089c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	2100      	movs	r1, #0
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9d9 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001228:	4603      	mov	r3, r0
 800122a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800122e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f99e 	bl	8000574 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800123e:	f7ff fb2d 	bl	800089c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	2101      	movs	r1, #1
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9c4 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001252:	4603      	mov	r3, r0
 8001254:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 8001258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f989 	bl	8000574 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001268:	f7ff fb18 	bl	800089c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	2102      	movs	r1, #2
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9af 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800127c:	4603      	mov	r3, r0
 800127e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001282:	e0bf      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f973 	bl	8000574 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001294:	f7ff fb02 	bl	800089c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f999 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f95e 	bl	8000574 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012be:	f7ff faed 	bl	800089c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f984 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f949 	bl	8000574 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012e8:	f7ff fad8 	bl	800089c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	2102      	movs	r1, #2
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f96f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001302:	e07f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001304:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f933 	bl	8000574 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001314:	f7ff fac2 	bl	800089c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f959 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001328:	4603      	mov	r3, r0
 800132a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800132e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f91e 	bl	8000574 <__aeabi_i2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4614      	mov	r4, r2
 8001348:	461d      	mov	r5, r3
 800134a:	2101      	movs	r1, #1
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f944 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001352:	4603      	mov	r3, r0
 8001354:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f909 	bl	8000574 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001368:	f7ff fa98 	bl	800089c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	2102      	movs	r1, #2
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f92f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800137c:	4603      	mov	r3, r0
 800137e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001382:	e03f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001384:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8f3 	bl	8000574 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001394:	f7ff fa82 	bl	800089c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f919 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013a8:	4603      	mov	r3, r0
 80013aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8de 	bl	8000574 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013be:	f7ff fa6d 	bl	800089c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	2101      	movs	r1, #1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f904 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8c9 	bl	8000574 <__aeabi_i2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	2102      	movs	r1, #2
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f8ef 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001402:	bf00      	nop
  }

  return xyz;
 8001404:	bf00      	nop
}
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	bf00      	nop
 8001410:	40300000 	.word	0x40300000
 8001414:	408c2000 	.word	0x408c2000
 8001418:	40590000 	.word	0x40590000

0800141c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f00f fd77 	bl	8010f1e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	220b      	movs	r2, #11
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001436:	4618      	mov	r0, r3
 8001438:	f00f fd79 	bl	8010f2e <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2203      	movs	r2, #3
 8001454:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0.0F;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001470:	621a      	str	r2, [r3, #32]
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	080145c8 	.word	0x080145c8
 8001480:	3c23d70a 	.word	0x3c23d70a

08001484 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2100      	movs	r1, #0
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f00f fd43 	bl	8010f1e <memset>

  event->version   = sizeof(sensors_event_t);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2203      	movs	r2, #3
 80014aa:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014ac:	f006 ff1a 	bl	80082e4 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	221a      	movs	r2, #26
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe15 	bl	80010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f853 	bl	8001576 <_ZN3imu6VectorILh3EE1xEv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbad 	bl	8000c38 <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84f 	bl	800158c <_ZN3imu6VectorILh3EE1yEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb9e 	bl	8000c38 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f84c 	bl	80015a4 <_ZN3imu6VectorILh3EE1zEv>
 800150c:	4603      	mov	r3, r0
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb8f 	bl	8000c38 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	61da      	str	r2, [r3, #28]

  return true;
 8001520:	2401      	movs	r4, #1
}
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f81a 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800152c:	4623      	mov	r3, r4
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
 8001546:	4613      	mov	r3, r2
 8001548:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800154a:	7aba      	ldrb	r2, [r7, #10]
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f89b 	bl	800168c <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    {
    }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3310      	adds	r3, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2218      	movs	r2, #24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00f fca7 	bl	8010f1e <memset>
    }
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd29 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08014fd8 	.word	0x08014fd8

0800161c <_ZN15Adafruit_BNO055D0Ev>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
 800162a:	2110      	movs	r1, #16
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f00e fb8a 	bl	800fd46 <_ZdlPvj>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_ZN3imu10QuaternionC1Ev+0x4c>)
 800164c:	e9c1 2300 	strd	r2, r3, [r1]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	3ff00000 	.word	0x3ff00000

0800168c <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2164      	movs	r1, #100	; 0x64
 80016a6:	9102      	str	r1, [sp, #8]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2152      	movs	r1, #82	; 0x52
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016b4:	f008 f890 	bl	80097d8 <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016bc:	bf00      	nop
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016c0:	f008 fa59 	bl	8009b76 <HAL_I2C_GetState>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f4      	bne.n	80016be <I2C_n_byte_receive+0x32>

  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002dc 	.word	0x200002dc

080016e4 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10a      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016fe:	2229      	movs	r2, #41	; 0x29
 8001700:	2137      	movs	r1, #55	; 0x37
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001704:	f7ff fcd8 	bl	80010b8 <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800170a:	f7ff ff97 	bl	800163c <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001710:	f7ff ff54 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	4293      	cmp	r3, r2
 8001722:	d105      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001726:	f7ff ff1b 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800172c:	f7ff ff64 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000022c 	.word	0x2000022c
 800173c:	20000240 	.word	0x20000240
 8001740:	20000260 	.word	0x20000260

08001744 <_GLOBAL__sub_I_bno>:
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ffc9 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001752:	bd80      	pop	{r7, pc}

08001754 <_GLOBAL__sub_D_bno>:
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffc1 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_DMA_Init+0x60>)
 800176c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_DMA_Init+0x60>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6493      	str	r3, [r2, #72]	; 0x48
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_DMA_Init+0x60>)
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_DMA_Init+0x60>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <MX_DMA_Init+0x60>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6493      	str	r3, [r2, #72]	; 0x48
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_DMA_Init+0x60>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200b      	movs	r0, #11
 80017a0:	f006 fe87 	bl	80084b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a4:	200b      	movs	r0, #11
 80017a6:	f006 fe9e 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200c      	movs	r0, #12
 80017b0:	f006 fe7f 	bl	80084b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b4:	200c      	movs	r0, #12
 80017b6:	f006 fe96 	bl	80084e6 <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_FDCAN1_Init+0x8c>)
 80017d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001800:	2201      	movs	r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001806:	221d      	movs	r2, #29
 8001808:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800180c:	220a      	movs	r2, #10
 800180e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001812:	2204      	movs	r2, #4
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001818:	2201      	movs	r2, #1
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800181e:	2202      	movs	r2, #2
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001824:	2202      	movs	r2, #2
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001830:	2203      	movs	r2, #3
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800183c:	f007 f8f6 	bl	8008a2c <HAL_FDCAN_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001846:	f000 fa8a 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000278 	.word	0x20000278
 8001854:	40006400 	.word	0x40006400

08001858 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09e      	sub	sp, #120	; 0x78
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f00f fb50 	bl	8010f1e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_FDCAN_MspInit+0xac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d138      	bne.n	80018fa <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800188e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4618      	mov	r0, r3
 800189a:	f009 ff85 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80018a4:	f000 fa5b 	bl	8001d5e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018ea:	2309      	movs	r3, #9
 80018ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_FDCAN_MspInit+0xb4>)
 80018f6:	f007 fd1f 	bl	8009338 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3778      	adds	r7, #120	; 0x78
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40006400 	.word	0x40006400
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <MX_GPIO_Init+0xe8>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <MX_GPIO_Init+0xe8>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <MX_GPIO_Init+0xe8>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_GPIO_Init+0xe8>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <MX_GPIO_Init+0xe8>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <MX_GPIO_Init+0xe8>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2120      	movs	r1, #32
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a6:	f007 fe49 	bl	800963c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2104      	movs	r1, #4
 80019ae:	4813      	ldr	r0, [pc, #76]	; (80019fc <MX_GPIO_Init+0xec>)
 80019b0:	f007 fe44 	bl	800963c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80019b4:	2320      	movs	r3, #32
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f007 fcb3 	bl	8009338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80019d2:	2304      	movs	r3, #4
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_GPIO_Init+0xec>)
 80019ea:	f007 fca5 	bl	8009338 <HAL_GPIO_Init>

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000c00 	.word	0x48000c00

08001a00 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <MX_I2C4_Init+0x78>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <MX_I2C4_Init+0x7c>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a3c:	f007 fe30 	bl	80096a0 <HAL_I2C_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001a46:	f000 f98a 	bl	8001d5e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4809      	ldr	r0, [pc, #36]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a4e:	f009 f831 	bl	800aab4 <HAL_I2CEx_ConfigAnalogFilter>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001a58:	f000 f981 	bl	8001d5e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a60:	f009 f873 	bl	800ab4a <HAL_I2CEx_ConfigDigitalFilter>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 f978 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200002dc 	.word	0x200002dc
 8001a78:	40008400 	.word	0x40008400
 8001a7c:	00702991 	.word	0x00702991

08001a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0a0      	sub	sp, #128	; 0x80
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	2254      	movs	r2, #84	; 0x54
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00f fa3c 	bl	8010f1e <memset>
  if(i2cHandle->Instance==I2C4)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a5e      	ldr	r2, [pc, #376]	; (8001c24 <HAL_I2C_MspInit+0x1a4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	f040 80b5 	bne.w	8001c1c <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f009 fe71 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001acc:	f000 f947 	bl	8001d5e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad0:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001adc:	4b52      	ldr	r3, [pc, #328]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b00:	2340      	movs	r3, #64	; 0x40
 8001b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001b10:	2308      	movs	r3, #8
 8001b12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4844      	ldr	r0, [pc, #272]	; (8001c2c <HAL_I2C_MspInit+0x1ac>)
 8001b1c:	f007 fc0c 	bl	8009338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b24:	2312      	movs	r3, #18
 8001b26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001b30:	2303      	movs	r3, #3
 8001b32:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b38:	4619      	mov	r1, r3
 8001b3a:	483d      	ldr	r0, [pc, #244]	; (8001c30 <HAL_I2C_MspInit+0x1b0>)
 8001b3c:	f007 fbfc 	bl	8009338 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001b46:	f043 0302 	orr.w	r3, r3, #2
 8001b4a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_I2C_MspInit+0x1a8>)
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b5a:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <HAL_I2C_MspInit+0x1b8>)
 8001b5c:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b60:	2216      	movs	r2, #22
 8001b62:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b72:	2280      	movs	r2, #128	; 0x80
 8001b74:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001b8e:	4829      	ldr	r0, [pc, #164]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001b90:	f006 fcc4 	bl	800851c <HAL_DMA_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001b9a:	f000 f8e0 	bl	8001d5e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001ba2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_I2C_MspInit+0x1b4>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bac:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <HAL_I2C_MspInit+0x1c0>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bb2:	2217      	movs	r2, #23
 8001bb4:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bb8:	2210      	movs	r2, #16
 8001bba:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001be0:	4816      	ldr	r0, [pc, #88]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001be2:	f006 fc9b 	bl	800851c <HAL_DMA_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001bec:	f000 f8b7 	bl	8001d5e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8001bf6:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <HAL_I2C_MspInit+0x1bc>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2052      	movs	r0, #82	; 0x52
 8001c02:	f006 fc56 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001c06:	2052      	movs	r0, #82	; 0x52
 8001c08:	f006 fc6d 	bl	80084e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2053      	movs	r0, #83	; 0x53
 8001c12:	f006 fc4e 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001c16:	2053      	movs	r0, #83	; 0x53
 8001c18:	f006 fc65 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3780      	adds	r7, #128	; 0x80
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40008400 	.word	0x40008400
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	48000400 	.word	0x48000400
 8001c34:	20000330 	.word	0x20000330
 8001c38:	40020008 	.word	0x40020008
 8001c3c:	20000390 	.word	0x20000390
 8001c40:	4002001c 	.word	0x4002001c

08001c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b092      	sub	sp, #72	; 0x48
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4a:	f006 fae6 	bl	800821a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4e:	f000 f83b 	bl	8001cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c52:	f7ff fe5d 	bl	8001910 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c56:	f7ff fd85 	bl	8001764 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001c5a:	f7ff fdb5 	bl	80017c8 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001c5e:	f7ff fecf 	bl	8001a00 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8001c62:	f006 fa05 	bl	8008070 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8001c66:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <main+0x80>)
 8001c68:	f004 f83e 	bl	8005ce8 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8001c6c:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <main+0x80>)
 8001c6e:	f003 ffb3 	bl	8005bd8 <setup_cyphal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	643b      	str	r3, [r7, #64]	; 0x40
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8001c76:	f006 fb35 	bl	80082e4 <HAL_GetTick>
 8001c7a:	6478      	str	r0, [r7, #68]	; 0x44

  vec_4ax linear = {0};
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  //IMU_setup();

  while (1)
  {

      uint32_t now = HAL_GetTick();
 8001ca4:	f006 fb1e 	bl	80082e4 <HAL_GetTick>
 8001ca8:	63f8      	str	r0, [r7, #60]	; 0x3c
      if ( (now - last_hbeat) >= 100) {
 8001caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b63      	cmp	r3, #99	; 0x63
 8001cb2:	d903      	bls.n	8001cbc <main+0x78>
      	  //imu_get_quat(&quat);
      	  //imu_get_linear(&linear);
      	  //imu_get_gyro(&gyro);
          last_hbeat = now;
 8001cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb6:	647b      	str	r3, [r7, #68]	; 0x44
          heartbeat();
 8001cb8:	f003 ff68 	bl	8005b8c <heartbeat>
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      cyphal_loop();
 8001cbc:	f004 f806 	bl	8005ccc <cyphal_loop>
  {
 8001cc0:	e7f0      	b.n	8001ca4 <main+0x60>
 8001cc2:	bf00      	nop
 8001cc4:	20000278 	.word	0x20000278

08001cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b094      	sub	sp, #80	; 0x50
 8001ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cce:	f107 0318 	add.w	r3, r7, #24
 8001cd2:	2238      	movs	r2, #56	; 0x38
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f00f f921 	bl	8010f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f008 ff7a 	bl	800abe4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d06:	2328      	movs	r3, #40	; 0x28
 8001d08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d16:	f107 0318 	add.w	r3, r7, #24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f009 f816 	bl	800ad4c <HAL_RCC_OscConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d26:	f000 f81a 	bl	8001d5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2104      	movs	r1, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 fb12 	bl	800b370 <HAL_RCC_ClockConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d52:	f000 f804 	bl	8001d5e <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3750      	adds	r7, #80	; 0x50
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d62:	b672      	cpsid	i
}
 8001d64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <Error_Handler+0x8>

08001d68 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	1e5a      	subs	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d019      	beq.n	8001df6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	1e5a      	subs	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
        }
    }
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	4798      	blx	r3
    }
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffd4 	bl	8001e2a <_ZNSt14_Function_baseD1Ev>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZNSt8functionIFvvEED1Ev>:
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ffc7 	bl	8001e2a <_ZNSt14_Function_baseD1Ev>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 ffec 	bl	8005e94 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3310      	adds	r3, #16
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 f811 	bl	8005eea <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	080150b8 	.word	0x080150b8

08001f00 <_Z7alloc_fP14CanardInstancej>:
#include "cyphal/definitions.h"
#include "libcanard/canard.h"

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001f0a:	480d      	ldr	r0, [pc, #52]	; (8001f40 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001f0c:	f004 f818 	bl	8005f40 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f083 0301 	eor.w	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f00d ff59 	bl	800fdd4 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001f24:	f004 f81d 	bl	8005f62 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	6814      	ldr	r4, [r2, #0]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	47a0      	blx	r4
 8001f36:	4603      	mov	r3, r0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	200006b8 	.word	0x200006b8

08001f44 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <_Z6free_fP14CanardInstancePv+0x40>)
 8001f50:	f003 fff6 	bl	8005f40 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f083 0301 	eor.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f00d ff37 	bl	800fdd4 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <_Z6free_fP14CanardInstancePv+0x40>)
 8001f68:	f003 fffb 	bl	8005f62 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	3204      	adds	r2, #4
 8001f72:	6814      	ldr	r4, [r2, #0]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	47a0      	blx	r4
 8001f7c:	bf00      	nop
}
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	200006b8 	.word	0x200006b8

08001f88 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
        WIRE_MTU(wire_mtu),
        CANARD_MTU(canard_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00d fc02 	bl	800f7bc <canardTxInit>
        utilities(utilities)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	0801509c 	.word	0x0801509c

08001fcc <_ZN15CyphalInterfaceC1EhR13UtilityConfig>:

class CyphalInterface {
private:
    const CanardNodeID node_id;
    std::unique_ptr<AbstractCANProvider> provider;
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config) : node_id(node_id), utilities(config) {};
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	72fb      	strb	r3, [r7, #11]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	7afa      	ldrb	r2, [r7, #11]
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 ffef 	bl	8005fc8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2248      	movs	r2, #72	; 0x48
 8002014:	2140      	movs	r1, #64	; 0x40
 8002016:	f7ff ffb7 	bl	8001f88 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	08015258 	.word	0x08015258

08002034 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include "../allocator.h"

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff44 	bl	8001ed4 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	0801513c 	.word	0x0801513c

08002060 <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	ed87 0a01 	vstr	s0, [r7, #4]
 800206a:	edd7 7a01 	vldr	s15, [r7, #4]
 800206e:	eef0 7ae7 	vabs.f32	s15, s15
 8002072:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80020a4 <_ZSt8isfinitef+0x44>
 8002076:	eef4 7a47 	vcmp.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	bf8c      	ite	hi
 8002080:	2301      	movhi	r3, #1
 8002082:	2300      	movls	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	7f7fffff 	.word	0x7f7fffff

080020a8 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d201      	bcs.n	80020be <nunavutChooseMin+0x16>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	e000      	b.n	80020c0 <nunavutChooseMin+0x18>
 80020be:	683b      	ldr	r3, [r7, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7ff ffe1 	bl	80020a8 <nunavutChooseMin>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80020ee:	6939      	ldr	r1, [r7, #16]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ffd9 	bl	80020a8 <nunavutChooseMin>
 80020f6:	4603      	mov	r3, r0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b092      	sub	sp, #72	; 0x48
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 800210e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	2b00      	cmp	r3, #0
 8002116:	d145      	bne.n	80021a4 <nunavutCopyBits+0xa4>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	2b00      	cmp	r3, #0
 8002120:	d140      	bne.n	80021a4 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8002128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212a:	08db      	lsrs	r3, r3, #3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 800213c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800213e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002140:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002142:	f00e fed2 	bl	8010eea <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8002152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 808a 	beq.w	8002270 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 800215c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800215e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002160:	4413      	add	r3, r2
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8002164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002168:	4413      	add	r3, r2
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 800216c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002170:	2201      	movs	r2, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002186:	43db      	mvns	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4013      	ands	r3, r2
 800218c:	b2da      	uxtb	r2, r3
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	7819      	ldrb	r1, [r3, #0]
 8002192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002196:	400b      	ands	r3, r1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b2da      	uxtb	r2, r3
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	701a      	strb	r2, [r3, #0]
        }
    }
 80021a2:	e065      	b.n	8002270 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 80021ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ae:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 80021b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 80021bc:	e053      	b.n	8002266 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80021be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80021c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80021d2:	7dfa      	ldrb	r2, [r7, #23]
 80021d4:	7dbb      	ldrb	r3, [r7, #22]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d901      	bls.n	80021de <nunavutCopyBits+0xde>
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	e000      	b.n	80021e0 <nunavutCopyBits+0xe0>
 80021de:	7dbb      	ldrb	r3, [r7, #22]
 80021e0:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80021e2:	7d7b      	ldrb	r3, [r7, #21]
 80021e4:	f1c3 0008 	rsb	r0, r3, #8
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7ff ff5a 	bl	80020a8 <nunavutChooseMin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80021f8:	7d3b      	ldrb	r3, [r7, #20]
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 800220a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	6a3a      	ldr	r2, [r7, #32]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	fa42 f303 	asr.w	r3, r2, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	7dbb      	ldrb	r3, [r7, #22]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8002228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222a:	08db      	lsrs	r3, r3, #3
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	7cfb      	ldrb	r3, [r7, #19]
 8002234:	43db      	mvns	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4013      	ands	r3, r2
 800223a:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 800223c:	7cba      	ldrb	r2, [r7, #18]
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	4013      	ands	r3, r2
 8002242:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8002244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002246:	08db      	lsrs	r3, r3, #3
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	7c79      	ldrb	r1, [r7, #17]
 800224e:	7c3a      	ldrb	r2, [r7, #16]
 8002250:	430a      	orrs	r2, r1
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8002256:	7d3b      	ldrb	r3, [r7, #20]
 8002258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800225a:	4413      	add	r3, r2
 800225c:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 800225e:	7d3b      	ldrb	r3, [r7, #20]
 8002260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002262:	4413      	add	r3, r2
 8002264:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226a:	429a      	cmp	r2, r3
 800226c:	d8a7      	bhi.n	80021be <nunavutCopyBits+0xbe>
        }

    }
}
 800226e:	e000      	b.n	8002272 <nunavutCopyBits+0x172>
    }
 8002270:	bf00      	nop
}
 8002272:	bf00      	nop
 8002274:	3748      	adds	r7, #72	; 0x48
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b088      	sub	sp, #32
 800227e:	af02      	add	r7, sp, #8
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff1d 	bl	80020cc <nunavutSaturateBufferFragmentBitLength>
 8002292:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	18d0      	adds	r0, r2, r3
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	3307      	adds	r3, #7
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	f00e fe37 	bl	8010f1e <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	2100      	movs	r1, #0
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff ff20 	bl	8002100 <nunavutCopyBits>
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	00da      	lsls	r2, r3, #3
 80022d8:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	440b      	add	r3, r1
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d202      	bcs.n	80022ea <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80022e4:	f06f 0302 	mvn.w	r3, #2
 80022e8:	e010      	b.n	800230c <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80022ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022ee:	2140      	movs	r1, #64	; 0x40
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fed9 	bl	80020a8 <nunavutChooseMin>
 80022f6:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 80022f8:	2300      	movs	r3, #0
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fefb 	bl	8002100 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	2110      	movs	r1, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff febe 	bl	80020a8 <nunavutChooseMin>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	68b8      	ldr	r0, [r7, #8]
 8002334:	f7ff feca 	bl	80020cc <nunavutSaturateBufferFragmentBitLength>
 8002338:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 800233e:	f107 0012 	add.w	r0, r7, #18
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	2100      	movs	r1, #0
 800234c:	f7ff fed8 	bl	8002100 <nunavutCopyBits>
    return val;
 8002350:	8a7b      	ldrh	r3, [r7, #18]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b088      	sub	sp, #32
 800235e:	af02      	add	r7, sp, #8
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2120      	movs	r1, #32
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe9b 	bl	80020a8 <nunavutChooseMin>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68b8      	ldr	r0, [r7, #8]
 800237a:	f7ff fea7 	bl	80020cc <nunavutSaturateBufferFragmentBitLength>
 800237e:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002384:	f107 0010 	add.w	r0, r7, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	2100      	movs	r1, #0
 8002392:	f7ff feb5 	bl	8002100 <nunavutCopyBits>
    return val;
 8002396:	693b      	ldr	r3, [r7, #16]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	; 0x2c
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <nunavutFloat16Pack+0xb8>)
 80023ac:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 80023ae:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80023b2:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 80023b4:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 80023b8:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 80023ba:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 80023be:	613b      	str	r3, [r7, #16]
    in.real = value;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ca:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4053      	eors	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d313      	bcc.n	8002408 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 80023ea:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 80023ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023f0:	e025      	b.n	800243e <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d902      	bls.n	8002400 <nunavutFloat16Pack+0x60>
 80023fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80023fe:	e001      	b.n	8002404 <nunavutFloat16Pack+0x64>
 8002400:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8002404:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002406:	e01a      	b.n	800243e <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800240e:	f023 030f 	bic.w	r3, r3, #15
 8002412:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 8002414:	ed97 7a03 	vldr	s14, [r7, #12]
 8002418:	edd7 7a04 	vldr	s15, [r7, #16]
 800241c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002420:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242a:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	d901      	bls.n	8002438 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	0b5b      	lsrs	r3, r3, #13
 800243c:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	b29a      	uxth	r2, r3
 8002444:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002446:	4313      	orrs	r3, r2
 8002448:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 800244a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800244c:	4618      	mov	r0, r3
 800244e:	372c      	adds	r7, #44	; 0x2c
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	fffff000 	.word	0xfffff000

0800245c <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 8002466:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 800246a:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 800246c:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8002470:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	035a      	lsls	r2, r3, #13
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <nunavutFloat16Unpack+0x6c>)
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 800247c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002480:	edd7 7a05 	vldr	s15, [r7, #20]
 8002484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002488:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 800248c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002490:	edd7 7a04 	vldr	s15, [r7, #16]
 8002494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	db03      	blt.n	80024a6 <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 80024a4:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
    return out.real;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	ee07 3a90 	vmov	s15, r3
}
 80024ba:	eeb0 0a67 	vmov.f32	s0, s15
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	0fffe000 	.word	0x0fffe000

080024cc <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 80024d8:	2310      	movs	r3, #16
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff ff18 	bl	8002314 <nunavutGetU16>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ffb8 	bl	800245c <nunavutFloat16Unpack>
 80024ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80024f0:	eeb0 0a67 	vmov.f32	s0, s15
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8002506:	2320      	movs	r3, #32
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7ff ff24 	bl	800235a <nunavutGetU32>
 8002512:	4603      	mov	r3, r0
 8002514:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	ee07 3a90 	vmov	s15, r3
}
 800251c:	eeb0 0a67 	vmov.f32	s0, s15
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b08c      	sub	sp, #48	; 0x30
 800252a:	af04      	add	r7, sp, #16
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <uavcan_node_Health_1_0_serialize_+0x1e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002544:	f06f 0301 	mvn.w	r3, #1
 8002548:	e048      	b.n	80025dc <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	2b07      	cmp	r3, #7
 8002556:	d802      	bhi.n	800255e <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002558:	f06f 0302 	mvn.w	r3, #2
 800255c:	e03e      	b.n	80025dc <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002568:	7efb      	ldrb	r3, [r7, #27]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d901      	bls.n	8002572 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 800256e:	2303      	movs	r3, #3
 8002570:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4413      	add	r3, r2
 800257a:	7efa      	ldrb	r2, [r7, #27]
 800257c:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3302      	adds	r3, #2
 8002582:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	2b00      	cmp	r3, #0
 800258c:	d021      	beq.n	80025d2 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f1c3 0308 	rsb	r3, r3, #8
 800259c:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9cd 2300 	strd	r2, r3, [sp]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	68b8      	ldr	r0, [r7, #8]
 80025b4:	f7ff fe88 	bl	80022c8 <nunavutSetUxx>
 80025b8:	4603      	mov	r3, r0
 80025ba:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80025bc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da02      	bge.n	80025ca <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 80025c4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80025c8:	e008      	b.n	80025dc <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <uavcan_node_Health_1_0_deserialize_+0x26>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <uavcan_node_Health_1_0_deserialize_+0x26>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800260a:	f06f 0301 	mvn.w	r3, #1
 800260e:	e030      	b.n	8002672 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002618:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3302      	adds	r3, #2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	429a      	cmp	r2, r3
 8002632:	d30a      	bcc.n	800264a <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	08db      	lsrs	r3, r3, #3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e002      	b.n	8002650 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3302      	adds	r3, #2
 8002654:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3307      	adds	r3, #7
 800265a:	f023 0307 	bic.w	r3, r3, #7
 800265e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff fd20 	bl	80020a8 <nunavutChooseMin>
 8002668:	4603      	mov	r3, r0
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	08015008 	.word	0x08015008

08002680 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af04      	add	r7, sp, #16
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800269e:	f06f 0301 	mvn.w	r3, #1
 80026a2:	e048      	b.n	8002736 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	2b07      	cmp	r3, #7
 80026b0:	d802      	bhi.n	80026b8 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80026b2:	f06f 0302 	mvn.w	r3, #2
 80026b6:	e03e      	b.n	8002736 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 80026c2:	7efb      	ldrb	r3, [r7, #27]
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	d901      	bls.n	80026cc <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 80026c8:	2307      	movs	r3, #7
 80026ca:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	4413      	add	r3, r2
 80026d4:	7efa      	ldrb	r2, [r7, #27]
 80026d6:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3303      	adds	r3, #3
 80026dc:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d021      	beq.n	800272c <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f1c3 0308 	rsb	r3, r3, #8
 80026f6:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	9302      	str	r3, [sp, #8]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9cd 2300 	strd	r2, r3, [sp]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	6979      	ldr	r1, [r7, #20]
 800270c:	68b8      	ldr	r0, [r7, #8]
 800270e:	f7ff fddb 	bl	80022c8 <nunavutSetUxx>
 8002712:	4603      	mov	r3, r0
 8002714:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002716:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800271a:	2b00      	cmp	r3, #0
 800271c:	da02      	bge.n	8002724 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 800271e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002722:	e008      	b.n	8002736 <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <uavcan_node_Mode_1_0_deserialize_+0x2c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002766:	f06f 0301 	mvn.w	r3, #1
 800276a:	e030      	b.n	80027ce <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002774:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3303      	adds	r3, #3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	429a      	cmp	r2, r3
 800278e:	d30a      	bcc.n	80027a6 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08db      	lsrs	r3, r3, #3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	4413      	add	r3, r2
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e002      	b.n	80027ac <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3303      	adds	r3, #3
 80027b0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3307      	adds	r3, #7
 80027b6:	f023 0307 	bic.w	r3, r3, #7
 80027ba:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80027bc:	69b9      	ldr	r1, [r7, #24]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff fc72 	bl	80020a8 <nunavutChooseMin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	08015008 	.word	0x08015008

080027dc <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08e      	sub	sp, #56	; 0x38
 80027e0:	af04      	add	r7, sp, #16
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027fa:	f06f 0301 	mvn.w	r3, #1
 80027fe:	e0cf      	b.n	80029a0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	2b37      	cmp	r3, #55	; 0x37
 800280c:	d802      	bhi.n	8002814 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800280e:	f06f 0302 	mvn.w	r3, #2
 8002812:	e0c5      	b.n	80029a0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	4413      	add	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3320      	adds	r3, #32
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	2b00      	cmp	r3, #0
 8002834:	d021      	beq.n	800287a <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f1c3 0308 	rsb	r3, r3, #8
 8002844:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	9302      	str	r3, [sp, #8]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	e9cd 2300 	strd	r2, r3, [sp]
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	6a39      	ldr	r1, [r7, #32]
 800285a:	68b8      	ldr	r0, [r7, #8]
 800285c:	f7ff fd34 	bl	80022c8 <nunavutSetUxx>
 8002860:	4603      	mov	r3, r0
 8002862:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002864:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002868:	2b00      	cmp	r3, #0
 800286a:	da02      	bge.n	8002872 <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 800286c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002870:	e096      	b.n	80029a0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002872:	7ffb      	ldrb	r3, [r7, #31]
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	4413      	add	r3, r2
 8002878:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 800287a:	2301      	movs	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4413      	add	r3, r2
 800288a:	f107 0214 	add.w	r2, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	f7ff fe49 	bl	8002526 <uavcan_node_Health_1_0_serialize_>
 8002894:	4603      	mov	r3, r0
 8002896:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002898:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800289c:	2b00      	cmp	r3, #0
 800289e:	da02      	bge.n	80028a6 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 80028a0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80028a4:	e07c      	b.n	80029a0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	4413      	add	r3, r2
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d021      	beq.n	80028fe <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f1c3 0308 	rsb	r3, r3, #8
 80028c8:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80028ca:	7f3b      	ldrb	r3, [r7, #28]
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9cd 2300 	strd	r2, r3, [sp]
 80028da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028dc:	6a39      	ldr	r1, [r7, #32]
 80028de:	68b8      	ldr	r0, [r7, #8]
 80028e0:	f7ff fcf2 	bl	80022c8 <nunavutSetUxx>
 80028e4:	4603      	mov	r3, r0
 80028e6:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 80028e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da02      	bge.n	80028f6 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 80028f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80028f4:	e054      	b.n	80029a0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 80028f6:	7f3b      	ldrb	r3, [r7, #28]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	4413      	add	r3, r2
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 80028fe:	2301      	movs	r3, #1
 8002900:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4413      	add	r3, r2
 800290e:	f107 0210 	add.w	r2, r7, #16
 8002912:	4619      	mov	r1, r3
 8002914:	f7ff feb4 	bl	8002680 <uavcan_node_Mode_1_0_serialize_>
 8002918:	4603      	mov	r3, r0
 800291a:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 800291c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da02      	bge.n	800292a <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002924:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002928:	e03a      	b.n	80029a0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	4413      	add	r3, r2
 8002932:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	08db      	lsrs	r3, r3, #3
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	4413      	add	r3, r2
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	7992      	ldrb	r2, [r2, #6]
 8002940:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3308      	adds	r3, #8
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	2b00      	cmp	r3, #0
 8002950:	d021      	beq.n	8002996 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f1c3 0308 	rsb	r3, r3, #8
 8002960:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002962:	7e7b      	ldrb	r3, [r7, #25]
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9cd 2300 	strd	r2, r3, [sp]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	68b8      	ldr	r0, [r7, #8]
 8002978:	f7ff fca6 	bl	80022c8 <nunavutSetUxx>
 800297c:	4603      	mov	r3, r0
 800297e:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002980:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	da02      	bge.n	800298e <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002988:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800298c:	e008      	b.n	80029a0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 800298e:	7e7b      	ldrb	r3, [r7, #25]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	4413      	add	r3, r2
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3728      	adds	r7, #40	; 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80029ce:	f06f 0301 	mvn.w	r3, #1
 80029d2:	e089      	b.n	8002ae8 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80029da:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 80029dc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 80029ee:	2320      	movs	r3, #32
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f4:	68b8      	ldr	r0, [r7, #8]
 80029f6:	f7ff fcb0 	bl	800235a <nunavutGetU32>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3320      	adds	r3, #32
 8002a04:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3307      	adds	r3, #7
 8002a0a:	f023 0307 	bic.w	r3, r3, #7
 8002a0e:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	08db      	lsrs	r3, r3, #3
 8002a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fb46 	bl	80020a8 <nunavutChooseMin>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f107 0214 	add.w	r2, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7ff fdd5 	bl	80025e4 <uavcan_node_Health_1_0_deserialize_>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002a3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da02      	bge.n	8002a4c <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002a46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002a4a:	e04d      	b.n	8002ae8 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3307      	adds	r3, #7
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fb1e 	bl	80020a8 <nunavutChooseMin>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f107 0210 	add.w	r2, r7, #16
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7ff fe5b 	bl	8002740 <uavcan_node_Mode_1_0_deserialize_>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002a8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da02      	bge.n	8002a9c <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002a96:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002a9a:	e025      	b.n	8002ae8 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	6a3a      	ldr	r2, [r7, #32]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d307      	bcc.n	8002ac0 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08db      	lsrs	r3, r3, #3
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	719a      	strb	r2, [r3, #6]
 8002abe:	e002      	b.n	8002ac6 <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3308      	adds	r3, #8
 8002aca:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3307      	adds	r3, #7
 8002ad0:	f023 0307 	bic.w	r3, r3, #7
 8002ad4:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002ad6:	6a39      	ldr	r1, [r7, #32]
 8002ad8:	69f8      	ldr	r0, [r7, #28]
 8002ada:	f7ff fae5 	bl	80020a8 <nunavutChooseMin>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3728      	adds	r7, #40	; 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	08015008 	.word	0x08015008

08002af4 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b1a:	f06f 0301 	mvn.w	r3, #1
 8002b1e:	e027      	b.n	8002b70 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002b28:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	69f9      	ldr	r1, [r7, #28]
 8002b3e:	68b8      	ldr	r0, [r7, #8]
 8002b40:	f7ff fcdb 	bl	80024fa <nunavutGetF32>
 8002b44:	eef0 7a40 	vmov.f32	s15, s0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3320      	adds	r3, #32
 8002b52:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3307      	adds	r3, #7
 8002b58:	f023 0307 	bic.w	r3, r3, #7
 8002b5c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	6978      	ldr	r0, [r7, #20]
 8002b62:	f7ff faa1 	bl	80020a8 <nunavutChooseMin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	08015008 	.word	0x08015008

08002b7c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ba2:	f06f 0301 	mvn.w	r3, #1
 8002ba6:	e027      	b.n	8002bf8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8002bb0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	69f9      	ldr	r1, [r7, #28]
 8002bc6:	68b8      	ldr	r0, [r7, #8]
 8002bc8:	f7ff fc97 	bl	80024fa <nunavutGetF32>
 8002bcc:	eef0 7a40 	vmov.f32	s15, s0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3320      	adds	r3, #32
 8002bda:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3307      	adds	r3, #7
 8002be0:	f023 0307 	bic.w	r3, r3, #7
 8002be4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002be6:	69b9      	ldr	r1, [r7, #24]
 8002be8:	6978      	ldr	r0, [r7, #20]
 8002bea:	f7ff fa5d 	bl	80020a8 <nunavutChooseMin>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08015008 	.word	0x08015008

08002c04 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c2a:	f06f 0301 	mvn.w	r3, #1
 8002c2e:	e027      	b.n	8002c80 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 8002c38:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	69f9      	ldr	r1, [r7, #28]
 8002c4e:	68b8      	ldr	r0, [r7, #8]
 8002c50:	f7ff fc53 	bl	80024fa <nunavutGetF32>
 8002c54:	eef0 7a40 	vmov.f32	s15, s0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3320      	adds	r3, #32
 8002c62:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3307      	adds	r3, #7
 8002c68:	f023 0307 	bic.w	r3, r3, #7
 8002c6c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f7ff fa19 	bl	80020a8 <nunavutChooseMin>
 8002c76:	4603      	mov	r3, r0
 8002c78:	08da      	lsrs	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	08015008 	.word	0x08015008

08002c8c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002cb2:	f06f 0301 	mvn.w	r3, #1
 8002cb6:	e090      	b.n	8002dda <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8002cc0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff f9e5 	bl	80020a8 <nunavutChooseMin>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002ce6:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f107 021c 	add.w	r2, r7, #28
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7ff fefd 	bl	8002af4 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 8002d00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da02      	bge.n	8002d0e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8002d08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002d0c:	e065      	b.n	8002dda <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	4413      	add	r3, r2
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	3307      	adds	r3, #7
 8002d1c:	f023 0307 	bic.w	r3, r3, #7
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	08db      	lsrs	r3, r3, #3
 8002d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f9bd 	bl	80020a8 <nunavutChooseMin>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4413      	add	r3, r2
 8002d42:	f107 0218 	add.w	r2, r7, #24
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7ff ff5c 	bl	8002c04 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 8002d52:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da02      	bge.n	8002d60 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8002d5a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002d5e:	e03c      	b.n	8002dda <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	4413      	add	r3, r2
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	3307      	adds	r3, #7
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	08db      	lsrs	r3, r3, #3
 8002d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f994 	bl	80020a8 <nunavutChooseMin>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	4413      	add	r3, r2
 8002d96:	f107 0214 	add.w	r2, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7ff feee 	bl	8002b7c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 8002da6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	da02      	bge.n	8002db4 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 8002dae:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002db2:	e012      	b.n	8002dda <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dba:	4413      	add	r3, r2
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	3307      	adds	r3, #7
 8002dc2:	f023 0307 	bic.w	r3, r3, #7
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dcc:	f7ff f96c 	bl	80020a8 <nunavutChooseMin>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3730      	adds	r7, #48	; 0x30
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	08015008 	.word	0x08015008

08002de8 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <uavcan_register_Name_1_0_deserialize_+0x26>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d006      	beq.n	8002e0e <uavcan_register_Name_1_0_deserialize_+0x26>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <uavcan_register_Name_1_0_deserialize_+0x2c>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e0e:	f06f 0301 	mvn.w	r3, #1
 8002e12:	e04a      	b.n	8002eaa <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 8002e1c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3308      	adds	r3, #8
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d309      	bcc.n	8002e4c <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	08db      	lsrs	r3, r3, #3
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8002e4a:	e003      	b.n	8002e54 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3308      	adds	r3, #8
 8002e58:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e60:	2bff      	cmp	r3, #255	; 0xff
 8002e62:	d902      	bls.n	8002e6a <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002e64:	f06f 0309 	mvn.w	r3, #9
 8002e68:	e01f      	b.n	8002eaa <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	f7ff f9fd 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3307      	adds	r3, #7
 8002e92:	f023 0307 	bic.w	r3, r3, #7
 8002e96:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f7ff f904 	bl	80020a8 <nunavutChooseMin>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	08015008 	.word	0x08015008

08002eb8 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ed6:	f06f 0301 	mvn.w	r3, #1
 8002eda:	e003      	b.n	8002ee4 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f16:	f06f 0301 	mvn.w	r3, #1
 8002f1a:	e008      	b.n	8002f2e <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8002f24:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	08015008 	.word	0x08015008

08002f40 <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af04      	add	r7, sp, #16
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <uavcan_primitive_String_1_0_serialize_+0x1e>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <uavcan_primitive_String_1_0_serialize_+0x1e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f5e:	f06f 0301 	mvn.w	r3, #1
 8002f62:	e060      	b.n	8003026 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002f72:	d202      	bcs.n	8002f7a <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002f74:	f06f 0302 	mvn.w	r3, #2
 8002f78:	e055      	b.n	8003026 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d902      	bls.n	8002f90 <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002f8a:	f06f 0309 	mvn.w	r3, #9
 8002f8e:	e04a      	b.n	8003026 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	08db      	lsrs	r3, r3, #3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	4413      	add	r3, r2
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3310      	adds	r3, #16
 8002fa8:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002fb0:	00da      	lsls	r2, r3, #3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	9100      	str	r1, [sp, #0]
 8002fb8:	69f9      	ldr	r1, [r7, #28]
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f7ff f8a0 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d021      	beq.n	800301c <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f1c3 0308 	rsb	r3, r3, #8
 8002fe6:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	9302      	str	r3, [sp, #8]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9cd 2300 	strd	r2, r3, [sp]
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	69b9      	ldr	r1, [r7, #24]
 8002ffc:	68b8      	ldr	r0, [r7, #8]
 8002ffe:	f7ff f963 	bl	80022c8 <nunavutSetUxx>
 8003002:	4603      	mov	r3, r0
 8003004:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003006:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800300a:	2b00      	cmp	r3, #0
 800300c:	da02      	bge.n	8003014 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 800300e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003012:	e008      	b.n	8003026 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	08da      	lsrs	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <uavcan_primitive_String_1_0_deserialize_+0x2c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003056:	f06f 0301 	mvn.w	r3, #1
 800305a:	e043      	b.n	80030e4 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8003064:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003076:	2310      	movs	r3, #16
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	69f9      	ldr	r1, [r7, #28]
 800307c:	68b8      	ldr	r0, [r7, #8]
 800307e:	f7ff f949 	bl	8002314 <nunavutGetU16>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3310      	adds	r3, #16
 8003090:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309c:	d902      	bls.n	80030a4 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800309e:	f06f 0309 	mvn.w	r3, #9
 80030a2:	e01f      	b.n	80030e4 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	f7ff f8e0 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4413      	add	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3307      	adds	r3, #7
 80030cc:	f023 0307 	bic.w	r3, r3, #7
 80030d0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	6978      	ldr	r0, [r7, #20]
 80030d6:	f7fe ffe7 	bl	80020a8 <nunavutChooseMin>
 80030da:	4603      	mov	r3, r0
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	08015008 	.word	0x08015008

080030f0 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	; 0x30
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800310e:	f06f 0301 	mvn.w	r3, #1
 8003112:	e060      	b.n	80031d6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003122:	d202      	bcs.n	800312a <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003124:	f06f 0302 	mvn.w	r3, #2
 8003128:	e055      	b.n	80031d6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003138:	d902      	bls.n	8003140 <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800313a:	f06f 0309 	mvn.w	r3, #9
 800313e:	e04a      	b.n	80031d6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	08db      	lsrs	r3, r3, #3
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	4413      	add	r3, r2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	b292      	uxth	r2, r2
 8003152:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3310      	adds	r3, #16
 8003158:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003160:	00da      	lsls	r2, r3, #3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2100      	movs	r1, #0
 8003166:	9100      	str	r1, [sp, #0]
 8003168:	69f9      	ldr	r1, [r7, #28]
 800316a:	68b8      	ldr	r0, [r7, #8]
 800316c:	f7fe ffc8 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	2b00      	cmp	r3, #0
 8003186:	d021      	beq.n	80031cc <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f1c3 0308 	rsb	r3, r3, #8
 8003196:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9cd 2300 	strd	r2, r3, [sp]
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	69b9      	ldr	r1, [r7, #24]
 80031ac:	68b8      	ldr	r0, [r7, #8]
 80031ae:	f7ff f88b 	bl	80022c8 <nunavutSetUxx>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80031b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da02      	bge.n	80031c4 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 80031be:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031c2:	e008      	b.n	80031d6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	08da      	lsrs	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003206:	f06f 0301 	mvn.w	r3, #1
 800320a:	e043      	b.n	8003294 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 8003214:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003226:	2310      	movs	r3, #16
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	69f9      	ldr	r1, [r7, #28]
 800322c:	68b8      	ldr	r0, [r7, #8]
 800322e:	f7ff f871 	bl	8002314 <nunavutGetU16>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3310      	adds	r3, #16
 8003240:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324c:	d902      	bls.n	8003254 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800324e:	f06f 0309 	mvn.w	r3, #9
 8003252:	e01f      	b.n	8003294 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	f7ff f808 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4413      	add	r3, r2
 8003276:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3307      	adds	r3, #7
 800327c:	f023 0307 	bic.w	r3, r3, #7
 8003280:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003282:	69b9      	ldr	r1, [r7, #24]
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	f7fe ff0f 	bl	80020a8 <nunavutChooseMin>
 800328a:	4603      	mov	r3, r0
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	08015008 	.word	0x08015008

080032a0 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08c      	sub	sp, #48	; 0x30
 80032a4:	af04      	add	r7, sp, #16
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80032be:	f06f 0301 	mvn.w	r3, #1
 80032c2:	e05e      	b.n	8003382 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80032d2:	d202      	bcs.n	80032da <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80032d4:	f06f 0302 	mvn.w	r3, #2
 80032d8:	e053      	b.n	8003382 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e8:	d902      	bls.n	80032f0 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80032ea:	f06f 0309 	mvn.w	r3, #9
 80032ee:	e048      	b.n	8003382 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	08db      	lsrs	r3, r3, #3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	4413      	add	r3, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80032fe:	8812      	ldrh	r2, [r2, #0]
 8003300:	b292      	uxth	r2, r2
 8003302:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3310      	adds	r3, #16
 8003308:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2100      	movs	r1, #0
 8003314:	9100      	str	r1, [sp, #0]
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	68b8      	ldr	r0, [r7, #8]
 800331a:	f7fe fef1 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	4413      	add	r3, r2
 8003328:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	2b00      	cmp	r3, #0
 8003332:	d021      	beq.n	8003378 <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f1c3 0308 	rsb	r3, r3, #8
 8003342:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	9302      	str	r3, [sp, #8]
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9cd 2300 	strd	r2, r3, [sp]
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	f7fe ffb5 	bl	80022c8 <nunavutSetUxx>
 800335e:	4603      	mov	r3, r0
 8003360:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003362:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da02      	bge.n	8003370 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 800336a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800336e:	e008      	b.n	8003382 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	08da      	lsrs	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033b2:	f06f 0301 	mvn.w	r3, #1
 80033b6:	e041      	b.n	800343c <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 80033c0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80033d2:	2310      	movs	r3, #16
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	69f9      	ldr	r1, [r7, #28]
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	f7fe ff9b 	bl	8002314 <nunavutGetU16>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3310      	adds	r3, #16
 80033ec:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80033f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f8:	d902      	bls.n	8003400 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80033fa:	f06f 0309 	mvn.w	r3, #9
 80033fe:	e01d      	b.n	800343c <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	f7fe ff33 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4413      	add	r3, r2
 800341e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3307      	adds	r3, #7
 8003424:	f023 0307 	bic.w	r3, r3, #7
 8003428:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f7fe fe3b 	bl	80020a8 <nunavutChooseMin>
 8003432:	4603      	mov	r3, r0
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	08015008 	.word	0x08015008

08003448 <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	; 0x30
 800344c:	af04      	add	r7, sp, #16
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003466:	f06f 0301 	mvn.w	r3, #1
 800346a:	e05f      	b.n	800352c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f640 0207 	movw	r2, #2055	; 0x807
 800347a:	4293      	cmp	r3, r2
 800347c:	d802      	bhi.n	8003484 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800347e:	f06f 0302 	mvn.w	r3, #2
 8003482:	e053      	b.n	800352c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d902      	bls.n	8003498 <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003492:	f06f 0309 	mvn.w	r3, #9
 8003496:	e049      	b.n	800352c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	4413      	add	r3, r2
 80034a6:	b2ca      	uxtb	r2, r1
 80034a8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3308      	adds	r3, #8
 80034ae:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034b6:	011a      	lsls	r2, r3, #4
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2100      	movs	r1, #0
 80034bc:	9100      	str	r1, [sp, #0]
 80034be:	69f9      	ldr	r1, [r7, #28]
 80034c0:	68b8      	ldr	r0, [r7, #8]
 80034c2:	f7fe fe1d 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d021      	beq.n	8003522 <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f1c3 0308 	rsb	r3, r3, #8
 80034ec:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	9302      	str	r3, [sp, #8]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9cd 2300 	strd	r2, r3, [sp]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	68b8      	ldr	r0, [r7, #8]
 8003504:	f7fe fee0 	bl	80022c8 <nunavutSetUxx>
 8003508:	4603      	mov	r3, r0
 800350a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800350c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da02      	bge.n	800351a <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003514:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003518:	e008      	b.n	800352c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	08da      	lsrs	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d006      	beq.n	800355a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800355a:	f06f 0301 	mvn.w	r3, #1
 800355e:	e04a      	b.n	80035f6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 8003568:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3308      	adds	r3, #8
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d309      	bcc.n	8003598 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	08db      	lsrs	r3, r3, #3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003596:	e003      	b.n	80035a0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3308      	adds	r3, #8
 80035a4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035ac:	2b80      	cmp	r3, #128	; 0x80
 80035ae:	d902      	bls.n	80035b6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035b0:	f06f 0309 	mvn.w	r3, #9
 80035b4:	e01f      	b.n	80035f6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	f7fe fe57 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4413      	add	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3307      	adds	r3, #7
 80035de:	f023 0307 	bic.w	r3, r3, #7
 80035e2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80035e4:	69b9      	ldr	r1, [r7, #24]
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f7fe fd5e 	bl	80020a8 <nunavutChooseMin>
 80035ec:	4603      	mov	r3, r0
 80035ee:	08da      	lsrs	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	08015008 	.word	0x08015008

08003604 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	; 0x30
 8003608:	af04      	add	r7, sp, #16
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003622:	f06f 0301 	mvn.w	r3, #1
 8003626:	e05f      	b.n	80036e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	f640 0207 	movw	r2, #2055	; 0x807
 8003636:	4293      	cmp	r3, r2
 8003638:	d802      	bhi.n	8003640 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800363a:	f06f 0302 	mvn.w	r3, #2
 800363e:	e053      	b.n	80036e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d902      	bls.n	8003654 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800364e:	f06f 0309 	mvn.w	r3, #9
 8003652:	e049      	b.n	80036e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4413      	add	r3, r2
 8003662:	b2ca      	uxtb	r2, r1
 8003664:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3308      	adds	r3, #8
 800366a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2100      	movs	r1, #0
 8003678:	9100      	str	r1, [sp, #0]
 800367a:	69f9      	ldr	r1, [r7, #28]
 800367c:	68b8      	ldr	r0, [r7, #8]
 800367e:	f7fe fd3f 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003688:	015b      	lsls	r3, r3, #5
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	2b00      	cmp	r3, #0
 8003698:	d021      	beq.n	80036de <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f1c3 0308 	rsb	r3, r3, #8
 80036a8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	9302      	str	r3, [sp, #8]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	e9cd 2300 	strd	r2, r3, [sp]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	69b9      	ldr	r1, [r7, #24]
 80036be:	68b8      	ldr	r0, [r7, #8]
 80036c0:	f7fe fe02 	bl	80022c8 <nunavutSetUxx>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80036c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da02      	bge.n	80036d6 <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80036d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036d4:	e008      	b.n	80036e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d006      	beq.n	8003716 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003716:	f06f 0301 	mvn.w	r3, #1
 800371a:	e04a      	b.n	80037b2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 8003724:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3308      	adds	r3, #8
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	429a      	cmp	r2, r3
 800373e:	d309      	bcc.n	8003754 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	08db      	lsrs	r3, r3, #3
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4413      	add	r3, r2
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003752:	e003      	b.n	800375c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3308      	adds	r3, #8
 8003760:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d902      	bls.n	8003772 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800376c:	f06f 0309 	mvn.w	r3, #9
 8003770:	e01f      	b.n	80037b2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800377a:	015b      	lsls	r3, r3, #5
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	f7fe fd79 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800378e:	015b      	lsls	r3, r3, #5
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4413      	add	r3, r2
 8003794:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3307      	adds	r3, #7
 800379a:	f023 0307 	bic.w	r3, r3, #7
 800379e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80037a0:	69b9      	ldr	r1, [r7, #24]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7fe fc80 	bl	80020a8 <nunavutChooseMin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	08015008 	.word	0x08015008

080037c0 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af04      	add	r7, sp, #16
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037de:	f06f 0301 	mvn.w	r3, #1
 80037e2:	e05f      	b.n	80038a4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	f640 0207 	movw	r2, #2055	; 0x807
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d802      	bhi.n	80037fc <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80037f6:	f06f 0302 	mvn.w	r3, #2
 80037fa:	e053      	b.n	80038a4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003806:	2b20      	cmp	r3, #32
 8003808:	d902      	bls.n	8003810 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800380a:	f06f 0309 	mvn.w	r3, #9
 800380e:	e049      	b.n	80038a4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08db      	lsrs	r3, r3, #3
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4413      	add	r3, r2
 800381e:	b2ca      	uxtb	r2, r1
 8003820:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3308      	adds	r3, #8
 8003826:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800382e:	019a      	lsls	r2, r3, #6
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2100      	movs	r1, #0
 8003834:	9100      	str	r1, [sp, #0]
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68b8      	ldr	r0, [r7, #8]
 800383a:	f7fe fc61 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003844:	019b      	lsls	r3, r3, #6
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f1c3 0308 	rsb	r3, r3, #8
 8003864:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9cd 2300 	strd	r2, r3, [sp]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f7fe fd24 	bl	80022c8 <nunavutSetUxx>
 8003880:	4603      	mov	r3, r0
 8003882:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003884:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003888:	2b00      	cmp	r3, #0
 800388a:	da02      	bge.n	8003892 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 800388c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003890:	e008      	b.n	80038a4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038d2:	f06f 0301 	mvn.w	r3, #1
 80038d6:	e04a      	b.n	800396e <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 80038e0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3308      	adds	r3, #8
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d309      	bcc.n	8003910 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	4413      	add	r3, r2
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800390e:	e003      	b.n	8003918 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3308      	adds	r3, #8
 800391c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003924:	2b20      	cmp	r3, #32
 8003926:	d902      	bls.n	800392e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003928:	f06f 0309 	mvn.w	r3, #9
 800392c:	e01f      	b.n	800396e <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003936:	019b      	lsls	r3, r3, #6
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	f7fe fc9b 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800394a:	019b      	lsls	r3, r3, #6
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3307      	adds	r3, #7
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7fe fba2 	bl	80020a8 <nunavutChooseMin>
 8003964:	4603      	mov	r3, r0
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	08015008 	.word	0x08015008

0800397c <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af04      	add	r7, sp, #16
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800399a:	f06f 0301 	mvn.w	r3, #1
 800399e:	e060      	b.n	8003a62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80039ae:	d202      	bcs.n	80039b6 <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80039b0:	f06f 0302 	mvn.w	r3, #2
 80039b4:	e055      	b.n	8003a62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c4:	d902      	bls.n	80039cc <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039c6:	f06f 0309 	mvn.w	r3, #9
 80039ca:	e04a      	b.n	8003a62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	08db      	lsrs	r3, r3, #3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4413      	add	r3, r2
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80039da:	8812      	ldrh	r2, [r2, #0]
 80039dc:	b292      	uxth	r2, r2
 80039de:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	3310      	adds	r3, #16
 80039e4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039ec:	00da      	lsls	r2, r3, #3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2100      	movs	r1, #0
 80039f2:	9100      	str	r1, [sp, #0]
 80039f4:	69f9      	ldr	r1, [r7, #28]
 80039f6:	68b8      	ldr	r0, [r7, #8]
 80039f8:	f7fe fb82 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f1c3 0308 	rsb	r3, r3, #8
 8003a22:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9cd 2300 	strd	r2, r3, [sp]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	68b8      	ldr	r0, [r7, #8]
 8003a3a:	f7fe fc45 	bl	80022c8 <nunavutSetUxx>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003a42:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da02      	bge.n	8003a50 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003a4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a4e:	e008      	b.n	8003a62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d006      	beq.n	8003a92 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a92:	f06f 0301 	mvn.w	r3, #1
 8003a96:	e043      	b.n	8003b20 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003aa0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	69f9      	ldr	r1, [r7, #28]
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f7fe fc2b 	bl	8002314 <nunavutGetU16>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3310      	adds	r3, #16
 8003acc:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad8:	d902      	bls.n	8003ae0 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ada:	f06f 0309 	mvn.w	r3, #9
 8003ade:	e01f      	b.n	8003b20 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	f7fe fbc2 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4413      	add	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3307      	adds	r3, #7
 8003b08:	f023 0307 	bic.w	r3, r3, #7
 8003b0c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003b0e:	69b9      	ldr	r1, [r7, #24]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f7fe fac9 	bl	80020a8 <nunavutChooseMin>
 8003b16:	4603      	mov	r3, r0
 8003b18:	08da      	lsrs	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	08015008 	.word	0x08015008

08003b2c <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08c      	sub	sp, #48	; 0x30
 8003b30:	af04      	add	r7, sp, #16
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b4a:	f06f 0301 	mvn.w	r3, #1
 8003b4e:	e05f      	b.n	8003c10 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	f640 0207 	movw	r2, #2055	; 0x807
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d802      	bhi.n	8003b68 <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003b62:	f06f 0302 	mvn.w	r3, #2
 8003b66:	e053      	b.n	8003c10 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d902      	bls.n	8003b7c <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b76:	f06f 0309 	mvn.w	r3, #9
 8003b7a:	e049      	b.n	8003c10 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	08db      	lsrs	r3, r3, #3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	b2ca      	uxtb	r2, r1
 8003b8c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3308      	adds	r3, #8
 8003b92:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b9a:	011a      	lsls	r2, r3, #4
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	9100      	str	r1, [sp, #0]
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	68b8      	ldr	r0, [r7, #8]
 8003ba6:	f7fe faab 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d021      	beq.n	8003c06 <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f1c3 0308 	rsb	r3, r3, #8
 8003bd0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	9302      	str	r3, [sp, #8]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9cd 2300 	strd	r2, r3, [sp]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	69b9      	ldr	r1, [r7, #24]
 8003be6:	68b8      	ldr	r0, [r7, #8]
 8003be8:	f7fe fb6e 	bl	80022c8 <nunavutSetUxx>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003bf0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	da02      	bge.n	8003bfe <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003bf8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfc:	e008      	b.n	8003c10 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	08da      	lsrs	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c3e:	f06f 0301 	mvn.w	r3, #1
 8003c42:	e04a      	b.n	8003cda <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 8003c4c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3308      	adds	r3, #8
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d309      	bcc.n	8003c7c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4413      	add	r3, r2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003c7a:	e003      	b.n	8003c84 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3308      	adds	r3, #8
 8003c88:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c90:	2b80      	cmp	r3, #128	; 0x80
 8003c92:	d902      	bls.n	8003c9a <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003c94:	f06f 0309 	mvn.w	r3, #9
 8003c98:	e01f      	b.n	8003cda <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	f7fe fae5 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	3307      	adds	r3, #7
 8003cc2:	f023 0307 	bic.w	r3, r3, #7
 8003cc6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7fe f9ec 	bl	80020a8 <nunavutChooseMin>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	08015008 	.word	0x08015008

08003ce8 <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af04      	add	r7, sp, #16
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d06:	f06f 0301 	mvn.w	r3, #1
 8003d0a:	e05f      	b.n	8003dcc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f640 0207 	movw	r2, #2055	; 0x807
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d802      	bhi.n	8003d24 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003d1e:	f06f 0302 	mvn.w	r3, #2
 8003d22:	e053      	b.n	8003dcc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d902      	bls.n	8003d38 <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d32:	f06f 0309 	mvn.w	r3, #9
 8003d36:	e049      	b.n	8003dcc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	08db      	lsrs	r3, r3, #3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4413      	add	r3, r2
 8003d46:	b2ca      	uxtb	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	9100      	str	r1, [sp, #0]
 8003d5e:	69f9      	ldr	r1, [r7, #28]
 8003d60:	68b8      	ldr	r0, [r7, #8]
 8003d62:	f7fe f9cd 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d6c:	015b      	lsls	r3, r3, #5
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d021      	beq.n	8003dc2 <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f1c3 0308 	rsb	r3, r3, #8
 8003d8c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	9302      	str	r3, [sp, #8]
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	68b8      	ldr	r0, [r7, #8]
 8003da4:	f7fe fa90 	bl	80022c8 <nunavutSetUxx>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003dac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	da02      	bge.n	8003dba <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003db4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003db8:	e008      	b.n	8003dcc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	08da      	lsrs	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003dfa:	f06f 0301 	mvn.w	r3, #1
 8003dfe:	e04a      	b.n	8003e96 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8003e08:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d309      	bcc.n	8003e38 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	08db      	lsrs	r3, r3, #3
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003e36:	e003      	b.n	8003e40 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3308      	adds	r3, #8
 8003e44:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d902      	bls.n	8003e56 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e50:	f06f 0309 	mvn.w	r3, #9
 8003e54:	e01f      	b.n	8003e96 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e5e:	015b      	lsls	r3, r3, #5
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	f7fe fa07 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e72:	015b      	lsls	r3, r3, #5
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4413      	add	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7fe f90e 	bl	80020a8 <nunavutChooseMin>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	08da      	lsrs	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	08015008 	.word	0x08015008

08003ea4 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	; 0x30
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ec2:	f06f 0301 	mvn.w	r3, #1
 8003ec6:	e05f      	b.n	8003f88 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	f640 0207 	movw	r2, #2055	; 0x807
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003eda:	f06f 0302 	mvn.w	r3, #2
 8003ede:	e053      	b.n	8003f88 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	d902      	bls.n	8003ef4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003eee:	f06f 0309 	mvn.w	r3, #9
 8003ef2:	e049      	b.n	8003f88 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4413      	add	r3, r2
 8003f02:	b2ca      	uxtb	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f12:	019a      	lsls	r2, r3, #6
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2100      	movs	r1, #0
 8003f18:	9100      	str	r1, [sp, #0]
 8003f1a:	69f9      	ldr	r1, [r7, #28]
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f7fe f8ef 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d021      	beq.n	8003f7e <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f1c3 0308 	rsb	r3, r3, #8
 8003f48:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	9302      	str	r3, [sp, #8]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	e9cd 2300 	strd	r2, r3, [sp]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	68b8      	ldr	r0, [r7, #8]
 8003f60:	f7fe f9b2 	bl	80022c8 <nunavutSetUxx>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003f68:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da02      	bge.n	8003f76 <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003f70:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f74:	e008      	b.n	8003f88 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	08da      	lsrs	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003fb6:	f06f 0301 	mvn.w	r3, #1
 8003fba:	e04a      	b.n	8004052 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003fc2:	4b26      	ldr	r3, [pc, #152]	; (800405c <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 8003fc4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d309      	bcc.n	8003ff4 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003ff2:	e003      	b.n	8003ffc <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3308      	adds	r3, #8
 8004000:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004008:	2b20      	cmp	r3, #32
 800400a:	d902      	bls.n	8004012 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800400c:	f06f 0309 	mvn.w	r3, #9
 8004010:	e01f      	b.n	8004052 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800401a:	019b      	lsls	r3, r3, #6
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	f7fe f929 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800402e:	019b      	lsls	r3, r3, #6
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	3307      	adds	r3, #7
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7fe f830 	bl	80020a8 <nunavutChooseMin>
 8004048:	4603      	mov	r3, r0
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	08015008 	.word	0x08015008

08004060 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af04      	add	r7, sp, #16
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800407e:	f06f 0301 	mvn.w	r3, #1
 8004082:	e060      	b.n	8004146 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004092:	d202      	bcs.n	800409a <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004094:	f06f 0302 	mvn.w	r3, #2
 8004098:	e055      	b.n	8004146 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a8:	d902      	bls.n	80040b0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80040aa:	f06f 0309 	mvn.w	r3, #9
 80040ae:	e04a      	b.n	8004146 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	08db      	lsrs	r3, r3, #3
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	4413      	add	r3, r2
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80040be:	8812      	ldrh	r2, [r2, #0]
 80040c0:	b292      	uxth	r2, r2
 80040c2:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3310      	adds	r3, #16
 80040c8:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040d0:	00da      	lsls	r2, r3, #3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2100      	movs	r1, #0
 80040d6:	9100      	str	r1, [sp, #0]
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	68b8      	ldr	r0, [r7, #8]
 80040dc:	f7fe f810 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d021      	beq.n	800413c <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f1c3 0308 	rsb	r3, r3, #8
 8004106:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9cd 2300 	strd	r2, r3, [sp]
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	68b8      	ldr	r0, [r7, #8]
 800411e:	f7fe f8d3 	bl	80022c8 <nunavutSetUxx>
 8004122:	4603      	mov	r3, r0
 8004124:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004126:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800412a:	2b00      	cmp	r3, #0
 800412c:	da02      	bge.n	8004134 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 800412e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004132:	e008      	b.n	8004146 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004176:	f06f 0301 	mvn.w	r3, #1
 800417a:	e043      	b.n	8004204 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004182:	4b22      	ldr	r3, [pc, #136]	; (800420c <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 8004184:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004196:	2310      	movs	r3, #16
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	69f9      	ldr	r1, [r7, #28]
 800419c:	68b8      	ldr	r0, [r7, #8]
 800419e:	f7fe f8b9 	bl	8002314 <nunavutGetU16>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3310      	adds	r3, #16
 80041b0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041bc:	d902      	bls.n	80041c4 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80041be:	f06f 0309 	mvn.w	r3, #9
 80041c2:	e01f      	b.n	8004204 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	f7fe f850 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3307      	adds	r3, #7
 80041ec:	f023 0307 	bic.w	r3, r3, #7
 80041f0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80041f2:	69b9      	ldr	r1, [r7, #24]
 80041f4:	6978      	ldr	r0, [r7, #20]
 80041f6:	f7fd ff57 	bl	80020a8 <nunavutChooseMin>
 80041fa:	4603      	mov	r3, r0
 80041fc:	08da      	lsrs	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	08015008 	.word	0x08015008

08004210 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08e      	sub	sp, #56	; 0x38
 8004214:	af04      	add	r7, sp, #16
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800422e:	f06f 0301 	mvn.w	r3, #1
 8004232:	e08b      	b.n	800434c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	f640 0207 	movw	r2, #2055	; 0x807
 8004242:	4293      	cmp	r3, r2
 8004244:	d802      	bhi.n	800424c <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004246:	f06f 0302 	mvn.w	r3, #2
 800424a:	e07f      	b.n	800434c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d902      	bls.n	8004260 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800425a:	f06f 0309 	mvn.w	r3, #9
 800425e:	e075      	b.n	800434c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	08db      	lsrs	r3, r3, #3
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	b2ca      	uxtb	r2, r1
 8004270:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	3308      	adds	r3, #8
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004278:	2300      	movs	r3, #0
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	e034      	b.n	80042e8 <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 800428a:	ed97 0a07 	vldr	s0, [r7, #28]
 800428e:	f7fd fee7 	bl	8002060 <_ZSt8isfinitef>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 8004298:	edd7 7a07 	vldr	s15, [r7, #28]
 800429c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004354 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 80042a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d501      	bpl.n	80042ae <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 80042aa:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 80042ac:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 80042ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80042b2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800435c <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 80042b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	dd01      	ble.n	80042c4 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 80042c2:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 80042c4:	ed97 0a07 	vldr	s0, [r7, #28]
 80042c8:	f7fe f86a 	bl	80023a0 <nunavutFloat16Pack>
 80042cc:	4603      	mov	r3, r0
 80042ce:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	4413      	add	r3, r2
 80042d8:	8aba      	ldrh	r2, [r7, #20]
 80042da:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	3310      	adds	r3, #16
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	3301      	adds	r3, #1
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d3c4      	bcc.n	800427e <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d021      	beq.n	8004342 <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f1c3 0308 	rsb	r3, r3, #8
 800430c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9cd 2300 	strd	r2, r3, [sp]
 800431e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	68b8      	ldr	r0, [r7, #8]
 8004324:	f7fd ffd0 	bl	80022c8 <nunavutSetUxx>
 8004328:	4603      	mov	r3, r0
 800432a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800432c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004330:	2b00      	cmp	r3, #0
 8004332:	da02      	bge.n	800433a <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8004334:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004338:	e008      	b.n	800434c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	4413      	add	r3, r2
 8004340:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	08da      	lsrs	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	c77fe000 	.word	0xc77fe000
 8004358:	c77fe000 	.word	0xc77fe000
 800435c:	477fe000 	.word	0x477fe000
 8004360:	477fe000 	.word	0x477fe000

08004364 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800438a:	f06f 0301 	mvn.w	r3, #1
 800438e:	e054      	b.n	800443a <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004396:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 8004398:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3308      	adds	r3, #8
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d309      	bcc.n	80043c8 <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08db      	lsrs	r3, r3, #3
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4413      	add	r3, r2
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80043c6:	e003      	b.n	80043d0 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3308      	adds	r3, #8
 80043d4:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043dc:	2b80      	cmp	r3, #128	; 0x80
 80043de:	d902      	bls.n	80043e6 <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80043e0:	f06f 0309 	mvn.w	r3, #9
 80043e4:	e029      	b.n	800443a <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	e012      	b.n	8004412 <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	68b8      	ldr	r0, [r7, #8]
 80043f2:	f7fe f86b 	bl	80024cc <nunavutGetF16>
 80043f6:	eef0 7a40 	vmov.f32	s15, s0
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3310      	adds	r3, #16
 800440a:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	3301      	adds	r3, #1
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	429a      	cmp	r2, r3
 800441c:	d3e6      	bcc.n	80043ec <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3307      	adds	r3, #7
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004428:	6939      	ldr	r1, [r7, #16]
 800442a:	69f8      	ldr	r0, [r7, #28]
 800442c:	f7fd fe3c 	bl	80020a8 <nunavutChooseMin>
 8004430:	4603      	mov	r3, r0
 8004432:	08da      	lsrs	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	08015008 	.word	0x08015008

08004448 <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	; 0x30
 800444c:	af04      	add	r7, sp, #16
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004466:	f06f 0301 	mvn.w	r3, #1
 800446a:	e05f      	b.n	800452c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f640 0207 	movw	r2, #2055	; 0x807
 800447a:	4293      	cmp	r3, r2
 800447c:	d802      	bhi.n	8004484 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800447e:	f06f 0302 	mvn.w	r3, #2
 8004482:	e053      	b.n	800452c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d902      	bls.n	8004498 <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004492:	f06f 0309 	mvn.w	r3, #9
 8004496:	e049      	b.n	800452c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	08db      	lsrs	r3, r3, #3
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4413      	add	r3, r2
 80044a6:	b2ca      	uxtb	r2, r1
 80044a8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3308      	adds	r3, #8
 80044ae:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2100      	movs	r1, #0
 80044bc:	9100      	str	r1, [sp, #0]
 80044be:	69f9      	ldr	r1, [r7, #28]
 80044c0:	68b8      	ldr	r0, [r7, #8]
 80044c2:	f7fd fe1d 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044cc:	015b      	lsls	r3, r3, #5
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d021      	beq.n	8004522 <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f1c3 0308 	rsb	r3, r3, #8
 80044ec:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	9302      	str	r3, [sp, #8]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9cd 2300 	strd	r2, r3, [sp]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	69b9      	ldr	r1, [r7, #24]
 8004502:	68b8      	ldr	r0, [r7, #8]
 8004504:	f7fd fee0 	bl	80022c8 <nunavutSetUxx>
 8004508:	4603      	mov	r3, r0
 800450a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800450c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004510:	2b00      	cmp	r3, #0
 8004512:	da02      	bge.n	800451a <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004514:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004518:	e008      	b.n	800452c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	08da      	lsrs	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800455a:	f06f 0301 	mvn.w	r3, #1
 800455e:	e04a      	b.n	80045f6 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004566:	4b26      	ldr	r3, [pc, #152]	; (8004600 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 8004568:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3308      	adds	r3, #8
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	429a      	cmp	r2, r3
 8004582:	d309      	bcc.n	8004598 <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	08db      	lsrs	r3, r3, #3
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	4413      	add	r3, r2
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004596:	e003      	b.n	80045a0 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3308      	adds	r3, #8
 80045a4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d902      	bls.n	80045b6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80045b0:	f06f 0309 	mvn.w	r3, #9
 80045b4:	e01f      	b.n	80045f6 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	f7fd fe57 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80045d2:	015b      	lsls	r3, r3, #5
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4413      	add	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	3307      	adds	r3, #7
 80045de:	f023 0307 	bic.w	r3, r3, #7
 80045e2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f7fd fd5e 	bl	80020a8 <nunavutChooseMin>
 80045ec:	4603      	mov	r3, r0
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	08015008 	.word	0x08015008

08004604 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08c      	sub	sp, #48	; 0x30
 8004608:	af04      	add	r7, sp, #16
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d102      	bne.n	8004628 <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004622:	f06f 0301 	mvn.w	r3, #1
 8004626:	e05f      	b.n	80046e8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	f640 0207 	movw	r2, #2055	; 0x807
 8004636:	4293      	cmp	r3, r2
 8004638:	d802      	bhi.n	8004640 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800463a:	f06f 0302 	mvn.w	r3, #2
 800463e:	e053      	b.n	80046e8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800464a:	2b20      	cmp	r3, #32
 800464c:	d902      	bls.n	8004654 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800464e:	f06f 0309 	mvn.w	r3, #9
 8004652:	e049      	b.n	80046e8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4413      	add	r3, r2
 8004662:	b2ca      	uxtb	r2, r1
 8004664:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3308      	adds	r3, #8
 800466a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004672:	019a      	lsls	r2, r3, #6
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2100      	movs	r1, #0
 8004678:	9100      	str	r1, [sp, #0]
 800467a:	69f9      	ldr	r1, [r7, #28]
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f7fd fd3f 	bl	8002100 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b00      	cmp	r3, #0
 8004698:	d021      	beq.n	80046de <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f1c3 0308 	rsb	r3, r3, #8
 80046a8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9cd 2300 	strd	r2, r3, [sp]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	68b8      	ldr	r0, [r7, #8]
 80046c0:	f7fd fe02 	bl	80022c8 <nunavutSetUxx>
 80046c4:	4603      	mov	r3, r0
 80046c6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80046c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da02      	bge.n	80046d6 <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 80046d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80046d4:	e008      	b.n	80046e8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	08da      	lsrs	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004716:	f06f 0301 	mvn.w	r3, #1
 800471a:	e04a      	b.n	80047b2 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004722:	4b26      	ldr	r3, [pc, #152]	; (80047bc <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 8004724:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3308      	adds	r3, #8
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	429a      	cmp	r2, r3
 800473e:	d309      	bcc.n	8004754 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	4413      	add	r3, r2
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004752:	e003      	b.n	800475c <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3308      	adds	r3, #8
 8004760:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004768:	2b20      	cmp	r3, #32
 800476a:	d902      	bls.n	8004772 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800476c:	f06f 0309 	mvn.w	r3, #9
 8004770:	e01f      	b.n	80047b2 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800477a:	019b      	lsls	r3, r3, #6
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	f7fd fd79 	bl	800227a <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800478e:	019b      	lsls	r3, r3, #6
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4413      	add	r3, r2
 8004794:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3307      	adds	r3, #7
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7fd fc80 	bl	80020a8 <nunavutChooseMin>
 80047a8:	4603      	mov	r3, r0
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08015008 	.word	0x08015008

080047c0 <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b09e      	sub	sp, #120	; 0x78
 80047c4:	af04      	add	r7, sp, #16
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <uavcan_register_Value_1_0_serialize_+0x1e>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <uavcan_register_Value_1_0_serialize_+0x1e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80047de:	f06f 0301 	mvn.w	r3, #1
 80047e2:	e248      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	663b      	str	r3, [r7, #96]	; 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 80047ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	f640 0217 	movw	r2, #2071	; 0x817
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d802      	bhi.n	80047fc <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80047f6:	f06f 0302 	mvn.w	r3, #2
 80047fa:	e23c      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	667b      	str	r3, [r7, #100]	; 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8004800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4413      	add	r3, r2
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 800480e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004812:	3308      	adds	r3, #8
 8004814:	667b      	str	r3, [r7, #100]	; 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11b      	bne.n	8004858 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 8004820:	2300      	movs	r3, #0
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8004824:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 8004826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004828:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4413      	add	r3, r2
 800482e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004832:	4619      	mov	r1, r3
 8004834:	f7fe fb40 	bl	8002eb8 <uavcan_primitive_Empty_1_0_serialize_>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
        if (_err0_ < 0)
 800483e:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004842:	2b00      	cmp	r3, #0
 8004844:	da02      	bge.n	800484c <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 8004846:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 800484a:	e214      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004852:	4413      	add	r3, r2
 8004854:	667b      	str	r3, [r7, #100]	; 0x64
 8004856:	e1de      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800485e:	2b01      	cmp	r3, #1
 8004860:	d11c      	bne.n	800489c <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 8004862:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004866:	647b      	str	r3, [r7, #68]	; 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8004868:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 800486a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800486c:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004876:	4619      	mov	r1, r3
 8004878:	f7fe fb62 	bl	8002f40 <uavcan_primitive_String_1_0_serialize_>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (_err1_ < 0)
 8004882:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004886:	2b00      	cmp	r3, #0
 8004888:	da02      	bge.n	8004890 <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 800488a:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800488e:	e1f2      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8004890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004896:	4413      	add	r3, r2
 8004898:	667b      	str	r3, [r7, #100]	; 0x64
 800489a:	e1bc      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11c      	bne.n	80048e0 <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 80048a6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80048aa:	643b      	str	r3, [r7, #64]	; 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 80048ac:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 80048ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b0:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4413      	add	r3, r2
 80048b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80048ba:	4619      	mov	r1, r3
 80048bc:	f7fe fc18 	bl	80030f0 <uavcan_primitive_Unstructured_1_0_serialize_>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (_err2_ < 0)
 80048c6:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da02      	bge.n	80048d4 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 80048ce:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80048d2:	e1d0      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80048d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048da:	4413      	add	r3, r2
 80048dc:	667b      	str	r3, [r7, #100]	; 0x64
 80048de:	e19a      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d11c      	bne.n	8004924 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 80048ea:	f44f 7381 	mov.w	r3, #258	; 0x102
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 80048f0:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 80048f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f4:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4413      	add	r3, r2
 80048fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80048fe:	4619      	mov	r1, r3
 8004900:	f7fe fcce 	bl	80032a0 <uavcan_primitive_array_Bit_1_0_serialize_>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        if (_err3_ < 0)
 800490a:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 800490e:	2b00      	cmp	r3, #0
 8004910:	da02      	bge.n	8004918 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 8004912:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004916:	e1ae      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800491e:	4413      	add	r3, r2
 8004920:	667b      	str	r3, [r7, #100]	; 0x64
 8004922:	e178      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800492a:	2b04      	cmp	r3, #4
 800492c:	d11c      	bne.n	8004968 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 800492e:	f240 1301 	movw	r3, #257	; 0x101
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8004934:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 8004936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004938:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004942:	4619      	mov	r1, r3
 8004944:	f7fe ff3c 	bl	80037c0 <uavcan_primitive_array_Integer64_1_0_serialize_>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if (_err4_ < 0)
 800494e:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8004952:	2b00      	cmp	r3, #0
 8004954:	da02      	bge.n	800495c <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 8004956:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800495a:	e18c      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004962:	4413      	add	r3, r2
 8004964:	667b      	str	r3, [r7, #100]	; 0x64
 8004966:	e156      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800496e:	2b05      	cmp	r3, #5
 8004970:	d11c      	bne.n	80049ac <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 8004972:	f240 1301 	movw	r3, #257	; 0x101
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8004978:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 800497a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800497c:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4413      	add	r3, r2
 8004982:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004986:	4619      	mov	r1, r3
 8004988:	f7fe fe3c 	bl	8003604 <uavcan_primitive_array_Integer32_1_0_serialize_>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        if (_err5_ < 0)
 8004992:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004996:	2b00      	cmp	r3, #0
 8004998:	da02      	bge.n	80049a0 <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 800499a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800499e:	e16a      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049a6:	4413      	add	r3, r2
 80049a8:	667b      	str	r3, [r7, #100]	; 0x64
 80049aa:	e134      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d11c      	bne.n	80049f0 <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 80049b6:	f240 1301 	movw	r3, #257	; 0x101
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80049bc:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 80049be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c0:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80049ca:	4619      	mov	r1, r3
 80049cc:	f7fe fd3c 	bl	8003448 <uavcan_primitive_array_Integer16_1_0_serialize_>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (_err6_ < 0)
 80049d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da02      	bge.n	80049e4 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 80049de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049e2:	e148      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049ea:	4413      	add	r3, r2
 80049ec:	667b      	str	r3, [r7, #100]	; 0x64
 80049ee:	e112      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049f6:	2b07      	cmp	r3, #7
 80049f8:	d11c      	bne.n	8004a34 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 80049fa:	f44f 7381 	mov.w	r3, #258	; 0x102
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004a00:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8004a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a04:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f7fe ffb4 	bl	800397c <uavcan_primitive_array_Integer8_1_0_serialize_>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
        if (_err7_ < 0)
 8004a1a:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	da02      	bge.n	8004a28 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 8004a22:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004a26:	e126      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a2e:	4413      	add	r3, r2
 8004a30:	667b      	str	r3, [r7, #100]	; 0x64
 8004a32:	e0f0      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d11c      	bne.n	8004a78 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8004a3e:	f240 1301 	movw	r3, #257	; 0x101
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8004a44:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8004a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a48:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a52:	4619      	mov	r1, r3
 8004a54:	f7ff fa26 	bl	8003ea4 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        if (_err8_ < 0)
 8004a5e:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da02      	bge.n	8004a6c <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 8004a66:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8004a6a:	e104      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a72:	4413      	add	r3, r2
 8004a74:	667b      	str	r3, [r7, #100]	; 0x64
 8004a76:	e0ce      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	d11c      	bne.n	8004abc <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 8004a82:	f240 1301 	movw	r3, #257	; 0x101
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8004a88:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8004a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8c:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7ff f926 	bl	8003ce8 <uavcan_primitive_array_Natural32_1_0_serialize_>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
        if (_err9_ < 0)
 8004aa2:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da02      	bge.n	8004ab0 <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 8004aaa:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8004aae:	e0e2      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ab6:	4413      	add	r3, r2
 8004ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8004aba:	e0ac      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	d11c      	bne.n	8004b00 <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8004ac6:	f240 1301 	movw	r3, #257	; 0x101
 8004aca:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004acc:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 8004ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad0:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f107 0220 	add.w	r2, r7, #32
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7ff f826 	bl	8003b2c <uavcan_primitive_array_Natural16_1_0_serialize_>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if (_err10_ < 0)
 8004ae6:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da02      	bge.n	8004af4 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 8004aee:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004af2:	e0c0      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004afa:	4413      	add	r3, r2
 8004afc:	667b      	str	r3, [r7, #100]	; 0x64
 8004afe:	e08a      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b06:	2b0b      	cmp	r3, #11
 8004b08:	d11c      	bne.n	8004b44 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 8004b0a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004b0e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004b10:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 8004b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b14:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f107 021c 	add.w	r2, r7, #28
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f7ff fa9e 	bl	8004060 <uavcan_primitive_array_Natural8_1_0_serialize_>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (_err11_ < 0)
 8004b2a:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da02      	bge.n	8004b38 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 8004b32:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 8004b36:	e09e      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b3e:	4413      	add	r3, r2
 8004b40:	667b      	str	r3, [r7, #100]	; 0x64
 8004b42:	e068      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d11c      	bne.n	8004b88 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 8004b4e:	f240 1301 	movw	r3, #257	; 0x101
 8004b52:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004b54:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 8004b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b58:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f107 0218 	add.w	r2, r7, #24
 8004b62:	4619      	mov	r1, r3
 8004b64:	f7ff fd4e 	bl	8004604 <uavcan_primitive_array_Real64_1_0_serialize_>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if (_err12_ < 0)
 8004b6e:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da02      	bge.n	8004b7c <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8004b76:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8004b7a:	e07c      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b82:	4413      	add	r3, r2
 8004b84:	667b      	str	r3, [r7, #100]	; 0x64
 8004b86:	e046      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b8e:	2b0d      	cmp	r3, #13
 8004b90:	d11c      	bne.n	8004bcc <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 8004b92:	f240 1301 	movw	r3, #257	; 0x101
 8004b96:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004b98:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8004b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b9c:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f107 0214 	add.w	r2, r7, #20
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f7ff fc4e 	bl	8004448 <uavcan_primitive_array_Real32_1_0_serialize_>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if (_err13_ < 0)
 8004bb2:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da02      	bge.n	8004bc0 <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 8004bba:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004bbe:	e05a      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bc6:	4413      	add	r3, r2
 8004bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bca:	e024      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004bd2:	2b0e      	cmp	r3, #14
 8004bd4:	d11c      	bne.n	8004c10 <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 8004bd6:	f240 1301 	movw	r3, #257	; 0x101
 8004bda:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004bdc:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 8004bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004be0:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	f107 0210 	add.w	r2, r7, #16
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7ff fb10 	bl	8004210 <uavcan_primitive_array_Real16_1_0_serialize_>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (_err14_ < 0)
 8004bf6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da02      	bge.n	8004c04 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 8004bfe:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004c02:	e038      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c0a:	4413      	add	r3, r2
 8004c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c0e:	e002      	b.n	8004c16 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8004c10:	f06f 030a 	mvn.w	r3, #10
 8004c14:	e02f      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d025      	beq.n	8004c6c <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f1c3 0308 	rsb	r3, r3, #8
 8004c2e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004c32:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004c36:	9302      	str	r3, [sp, #8]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9cd 2300 	strd	r2, r3, [sp]
 8004c44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c48:	68b8      	ldr	r0, [r7, #8]
 8004c4a:	f7fd fb3d 	bl	80022c8 <nunavutSetUxx>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (_err15_ < 0)
 8004c54:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	da02      	bge.n	8004c62 <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8004c5c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c60:	e009      	b.n	8004c76 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 8004c62:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004c66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c68:	4413      	add	r3, r2
 8004c6a:	667b      	str	r3, [r7, #100]	; 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c6e:	08da      	lsrs	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3768      	adds	r7, #104	; 0x68
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b09a      	sub	sp, #104	; 0x68
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <uavcan_register_Value_1_0_deserialize_+0x26>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <uavcan_register_Value_1_0_deserialize_+0x26>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <uavcan_register_Value_1_0_deserialize_+0x2c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004ca6:	f06f 0301 	mvn.w	r3, #1
 8004caa:	e29b      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004cb2:	4bb0      	ldr	r3, [pc, #704]	; (8004f74 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 8004cb4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	667b      	str	r3, [r7, #100]	; 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc8:	3308      	adds	r3, #8
 8004cca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d308      	bcc.n	8004ce2 <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 8004cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cd2:	08db      	lsrs	r3, r3, #3
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8004ce0:	e003      	b.n	8004cea <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 8004cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cec:	3308      	adds	r3, #8
 8004cee:	667b      	str	r3, [r7, #100]	; 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d123      	bne.n	8004d42 <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cfc:	08db      	lsrs	r3, r3, #3
 8004cfe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fd f9d1 	bl	80020a8 <nunavutChooseMin>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004d0e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 8004d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d12:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	4413      	add	r3, r2
 8004d18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f7fe f8e7 	bl	8002ef0 <uavcan_primitive_Empty_1_0_deserialize_>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 8004d28:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da02      	bge.n	8004d36 <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 8004d30:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004d34:	e256      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8004d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d3c:	4413      	add	r3, r2
 8004d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d40:	e242      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d123      	bne.n	8004d94 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fd f9a8 	bl	80020a8 <nunavutChooseMin>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004d60:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8004d62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d64:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f7fe f95e 	bl	8003030 <uavcan_primitive_String_1_0_deserialize_>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 8004d7a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	da02      	bge.n	8004d88 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 8004d82:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8004d86:	e22d      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d8e:	4413      	add	r3, r2
 8004d90:	667b      	str	r3, [r7, #100]	; 0x64
 8004d92:	e219      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d123      	bne.n	8004de6 <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fd f97f 	bl	80020a8 <nunavutChooseMin>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004db2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8004db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db6:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f7fe fa0d 	bl	80031e0 <uavcan_primitive_Unstructured_1_0_deserialize_>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 8004dcc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	da02      	bge.n	8004dda <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 8004dd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004dd8:	e204      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 8004dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004de0:	4413      	add	r3, r2
 8004de2:	667b      	str	r3, [r7, #100]	; 0x64
 8004de4:	e1f0      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d123      	bne.n	8004e38 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd f956 	bl	80020a8 <nunavutChooseMin>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004e04:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 8004e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e08:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004e12:	4619      	mov	r1, r3
 8004e14:	f7fe faba 	bl	800338c <uavcan_primitive_array_Bit_1_0_deserialize_>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 8004e1e:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da02      	bge.n	8004e2c <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 8004e26:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004e2a:	e1db      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e32:	4413      	add	r3, r2
 8004e34:	667b      	str	r3, [r7, #100]	; 0x64
 8004e36:	e1c7      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d123      	bne.n	8004e8a <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd f92d 	bl	80020a8 <nunavutChooseMin>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004e56:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8004e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e5a:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e64:	4619      	mov	r1, r3
 8004e66:	f7fe fd21 	bl	80038ac <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 8004e70:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	da02      	bge.n	8004e7e <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8004e78:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004e7c:	e1b2      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e84:	4413      	add	r3, r2
 8004e86:	667b      	str	r3, [r7, #100]	; 0x64
 8004e88:	e19e      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d123      	bne.n	8004edc <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fd f904 	bl	80020a8 <nunavutChooseMin>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004ea8:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8004eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eac:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f7fe fc1a 	bl	80036f0 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 8004ec2:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da02      	bge.n	8004ed0 <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 8004eca:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004ece:	e189      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ed6:	4413      	add	r3, r2
 8004ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eda:	e175      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d123      	bne.n	8004f2e <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fd f8db 	bl	80020a8 <nunavutChooseMin>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004efa:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 8004efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efe:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	4413      	add	r3, r2
 8004f04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f7fe fb13 	bl	8003534 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 8004f14:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	da02      	bge.n	8004f22 <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 8004f1c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004f20:	e160      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f28:	4413      	add	r3, r2
 8004f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f2c:	e14c      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f34:	2b07      	cmp	r3, #7
 8004f36:	d125      	bne.n	8004f84 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3a:	08db      	lsrs	r3, r3, #3
 8004f3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fd f8b2 	bl	80020a8 <nunavutChooseMin>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004f4c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8004f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f50:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4413      	add	r3, r2
 8004f56:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f7fe fd86 	bl	8003a6c <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 8004f66:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da04      	bge.n	8004f78 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 8004f6e:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004f72:	e137      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
 8004f74:	08015008 	.word	0x08015008
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f7e:	4413      	add	r3, r2
 8004f80:	667b      	str	r3, [r7, #100]	; 0x64
 8004f82:	e121      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d123      	bne.n	8004fd6 <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f90:	08db      	lsrs	r3, r3, #3
 8004f92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fd f887 	bl	80020a8 <nunavutChooseMin>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8004fa2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8004fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa6:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	4413      	add	r3, r2
 8004fac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f7fe ffed 	bl	8003f90 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 8004fbc:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	da02      	bge.n	8004fca <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 8004fc4:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8004fc8:	e10c      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fd0:	4413      	add	r3, r2
 8004fd2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fd4:	e0f8      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004fdc:	2b09      	cmp	r3, #9
 8004fde:	d123      	bne.n	8005028 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe2:	08db      	lsrs	r3, r3, #3
 8004fe4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fd f85e 	bl	80020a8 <nunavutChooseMin>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8004ff4:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 8004ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff8:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005002:	4619      	mov	r1, r3
 8005004:	f7fe fee6 	bl	8003dd4 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 800500e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8005012:	2b00      	cmp	r3, #0
 8005014:	da02      	bge.n	800501c <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 8005016:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800501a:	e0e3      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005022:	4413      	add	r3, r2
 8005024:	667b      	str	r3, [r7, #100]	; 0x64
 8005026:	e0cf      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800502e:	2b0a      	cmp	r3, #10
 8005030:	d123      	bne.n	800507a <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005034:	08db      	lsrs	r3, r3, #3
 8005036:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005038:	4618      	mov	r0, r3
 800503a:	f7fd f835 	bl	80020a8 <nunavutChooseMin>
 800503e:	4602      	mov	r2, r0
 8005040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8005046:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 8005048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800504a:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	4413      	add	r3, r2
 8005050:	f107 0220 	add.w	r2, r7, #32
 8005054:	4619      	mov	r1, r3
 8005056:	f7fe fddf 	bl	8003c18 <uavcan_primitive_array_Natural16_1_0_deserialize_>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 8005060:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005064:	2b00      	cmp	r3, #0
 8005066:	da02      	bge.n	800506e <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 8005068:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800506c:	e0ba      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005074:	4413      	add	r3, r2
 8005076:	667b      	str	r3, [r7, #100]	; 0x64
 8005078:	e0a6      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005080:	2b0b      	cmp	r3, #11
 8005082:	d123      	bne.n	80050cc <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005086:	08db      	lsrs	r3, r3, #3
 8005088:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800508a:	4618      	mov	r0, r3
 800508c:	f7fd f80c 	bl	80020a8 <nunavutChooseMin>
 8005090:	4602      	mov	r2, r0
 8005092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005098:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 800509a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800509c:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	f107 021c 	add.w	r2, r7, #28
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7ff f852 	bl	8004150 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 80050b2:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da02      	bge.n	80050c0 <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 80050ba:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 80050be:	e091      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050c6:	4413      	add	r3, r2
 80050c8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ca:	e07d      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d123      	bne.n	800511e <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80050d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d8:	08db      	lsrs	r3, r3, #3
 80050da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fc ffe3 	bl	80020a8 <nunavutChooseMin>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80050ea:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 80050ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ee:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4413      	add	r3, r2
 80050f4:	f107 0218 	add.w	r2, r7, #24
 80050f8:	4619      	mov	r1, r3
 80050fa:	f7ff faf9 	bl	80046f0 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 8005104:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8005108:	2b00      	cmp	r3, #0
 800510a:	da02      	bge.n	8005112 <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 800510c:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8005110:	e068      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005118:	4413      	add	r3, r2
 800511a:	667b      	str	r3, [r7, #100]	; 0x64
 800511c:	e054      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005124:	2b0d      	cmp	r3, #13
 8005126:	d123      	bne.n	8005170 <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512a:	08db      	lsrs	r3, r3, #3
 800512c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800512e:	4618      	mov	r0, r3
 8005130:	f7fc ffba 	bl	80020a8 <nunavutChooseMin>
 8005134:	4602      	mov	r2, r0
 8005136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 800513c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 800513e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005140:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4413      	add	r3, r2
 8005146:	f107 0214 	add.w	r2, r7, #20
 800514a:	4619      	mov	r1, r3
 800514c:	f7ff f9f2 	bl	8004534 <uavcan_primitive_array_Real32_1_0_deserialize_>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 8005156:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 800515a:	2b00      	cmp	r3, #0
 800515c:	da02      	bge.n	8005164 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 800515e:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8005162:	e03f      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800516a:	4413      	add	r3, r2
 800516c:	667b      	str	r3, [r7, #100]	; 0x64
 800516e:	e02b      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005176:	2b0e      	cmp	r3, #14
 8005178:	d123      	bne.n	80051c2 <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800517a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517c:	08db      	lsrs	r3, r3, #3
 800517e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005180:	4618      	mov	r0, r3
 8005182:	f7fc ff91 	bl	80020a8 <nunavutChooseMin>
 8005186:	4602      	mov	r2, r0
 8005188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 800518e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 8005190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005192:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4413      	add	r3, r2
 8005198:	f107 0210 	add.w	r2, r7, #16
 800519c:	4619      	mov	r1, r3
 800519e:	f7ff f8e1 	bl	8004364 <uavcan_primitive_array_Real16_1_0_deserialize_>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 80051a8:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	da02      	bge.n	80051b6 <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 80051b0:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80051b4:	e016      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051bc:	4413      	add	r3, r2
 80051be:	667b      	str	r3, [r7, #100]	; 0x64
 80051c0:	e002      	b.n	80051c8 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80051c2:	f06f 030a 	mvn.w	r3, #10
 80051c6:	e00d      	b.n	80051e4 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80051c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ca:	3307      	adds	r3, #7
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80051d2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80051d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80051d6:	f7fc ff67 	bl	80020a8 <nunavutChooseMin>
 80051da:	4603      	mov	r3, r0
 80051dc:	08da      	lsrs	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3768      	adds	r7, #104	; 0x68
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08c      	sub	sp, #48	; 0x30
 80051f0:	af04      	add	r7, sp, #16
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800520a:	f06f 0301 	mvn.w	r3, #1
 800520e:	e043      	b.n	8005298 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	2b37      	cmp	r3, #55	; 0x37
 800521c:	d802      	bhi.n	8005224 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800521e:	f06f 0302 	mvn.w	r3, #2
 8005222:	e039      	b.n	8005298 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	08db      	lsrs	r3, r3, #3
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	4413      	add	r3, r2
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	2207      	movs	r2, #7
 8005234:	4618      	mov	r0, r3
 8005236:	f00b fe58 	bl	8010eea <memmove>
        offset_bits += 56U;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3338      	adds	r3, #56	; 0x38
 800523e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d021      	beq.n	800528e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f1c3 0308 	rsb	r3, r3, #8
 8005258:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	9302      	str	r3, [sp, #8]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9cd 2300 	strd	r2, r3, [sp]
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	68b8      	ldr	r0, [r7, #8]
 8005270:	f7fd f82a 	bl	80022c8 <nunavutSetUxx>
 8005274:	4603      	mov	r3, r0
 8005276:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005278:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800527c:	2b00      	cmp	r3, #0
 800527e:	da02      	bge.n	8005286 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 8005280:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005284:	e008      	b.n	8005298 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	08da      	lsrs	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80052c6:	f06f 0301 	mvn.w	r3, #1
 80052ca:	e065      	b.n	8005398 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80052d2:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 80052d4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	08db      	lsrs	r3, r3, #3
 80052ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fc fedb 	bl	80020a8 <nunavutChooseMin>
 80052f2:	4602      	mov	r2, r0
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 80052fa:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	4413      	add	r3, r2
 8005304:	f107 0214 	add.w	r2, r7, #20
 8005308:	4619      	mov	r1, r3
 800530a:	f7fd fd6d 	bl	8002de8 <uavcan_register_Name_1_0_deserialize_>
 800530e:	4603      	mov	r3, r0
 8005310:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8005312:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005316:	2b00      	cmp	r3, #0
 8005318:	da02      	bge.n	8005320 <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 800531a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800531e:	e03b      	b.n	8005398 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3307      	adds	r3, #7
 800532e:	f023 0307 	bic.w	r3, r3, #7
 8005332:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc feb4 	bl	80020a8 <nunavutChooseMin>
 8005340:	4602      	mov	r2, r0
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4413      	add	r3, r2
 8005356:	f107 0210 	add.w	r2, r7, #16
 800535a:	4619      	mov	r1, r3
 800535c:	f7ff fc90 	bl	8004c80 <uavcan_register_Value_1_0_deserialize_>
 8005360:	4603      	mov	r3, r0
 8005362:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 8005364:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005368:	2b00      	cmp	r3, #0
 800536a:	da02      	bge.n	8005372 <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 800536c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005370:	e012      	b.n	8005398 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3307      	adds	r3, #7
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005386:	6a39      	ldr	r1, [r7, #32]
 8005388:	69f8      	ldr	r0, [r7, #28]
 800538a:	f7fc fe8d 	bl	80020a8 <nunavutChooseMin>
 800538e:	4603      	mov	r3, r0
 8005390:	08da      	lsrs	r2, r3, #3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	; 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	08015008 	.word	0x08015008

080053a4 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80053c2:	f06f 0301 	mvn.w	r3, #1
 80053c6:	e0f0      	b.n	80055aa <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	f640 0257 	movw	r2, #2135	; 0x857
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d802      	bhi.n	80053e0 <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80053da:	f06f 0302 	mvn.w	r3, #2
 80053de:	e0e4      	b.n	80055aa <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 80053e4:	2307      	movs	r3, #7
 80053e6:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 80053e8:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4413      	add	r3, r2
 80053f2:	f107 0214 	add.w	r2, r7, #20
 80053f6:	4619      	mov	r1, r3
 80053f8:	f7ff fef8 	bl	80051ec <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 80053fc:	4603      	mov	r3, r0
 80053fe:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 8005400:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005404:	2b00      	cmp	r3, #0
 8005406:	da02      	bge.n	800540e <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 8005408:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800540c:	e0cd      	b.n	80055aa <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005414:	4413      	add	r3, r2
 8005416:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	7a1b      	ldrb	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 8005420:	2101      	movs	r1, #1
 8005422:	e000      	b.n	8005426 <uavcan_register_Access_Response_1_0_serialize_+0x82>
 8005424:	2100      	movs	r1, #0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	08db      	lsrs	r3, r3, #3
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	460a      	mov	r2, r1
 8005430:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	3301      	adds	r3, #1
 8005436:	627b      	str	r3, [r7, #36]	; 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	7a5b      	ldrb	r3, [r3, #9]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	08db      	lsrs	r3, r3, #3
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	4413      	add	r3, r2
 8005448:	7819      	ldrb	r1, [r3, #0]
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	2201      	movs	r2, #1
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	68b8      	ldr	r0, [r7, #8]
 800545e:	4403      	add	r3, r0
 8005460:	430a      	orrs	r2, r1
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e014      	b.n	8005492 <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	4413      	add	r3, r2
 8005470:	7819      	ldrb	r1, [r3, #0]
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	2201      	movs	r2, #1
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	b2da      	uxtb	r2, r3
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	08db      	lsrs	r3, r3, #3
 8005488:	68b8      	ldr	r0, [r7, #8]
 800548a:	4403      	add	r3, r0
 800548c:	400a      	ands	r2, r1
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	3301      	adds	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	; 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005498:	2306      	movs	r3, #6
 800549a:	9302      	str	r3, [sp, #8]
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	e9cd 2300 	strd	r2, r3, [sp]
 80054a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054aa:	6a39      	ldr	r1, [r7, #32]
 80054ac:	68b8      	ldr	r0, [r7, #8]
 80054ae:	f7fc ff0b 	bl	80022c8 <nunavutSetUxx>
 80054b2:	4603      	mov	r3, r0
 80054b4:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 80054b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da02      	bge.n	80054c4 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 80054be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80054c2:	e072      	b.n	80055aa <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	3306      	adds	r3, #6
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d021      	beq.n	8005518 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f1c3 0308 	rsb	r3, r3, #8
 80054e2:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80054e4:	7f7b      	ldrb	r3, [r7, #29]
 80054e6:	9302      	str	r3, [sp, #8]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	e9cd 2300 	strd	r2, r3, [sp]
 80054f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f6:	6a39      	ldr	r1, [r7, #32]
 80054f8:	68b8      	ldr	r0, [r7, #8]
 80054fa:	f7fc fee5 	bl	80022c8 <nunavutSetUxx>
 80054fe:	4603      	mov	r3, r0
 8005500:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8005502:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	da02      	bge.n	8005510 <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 800550a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800550e:	e04c      	b.n	80055aa <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8005510:	7f7b      	ldrb	r3, [r7, #29]
 8005512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005514:	4413      	add	r3, r2
 8005516:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005518:	f240 1303 	movw	r3, #259	; 0x103
 800551c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	4413      	add	r3, r2
 800552c:	f107 0210 	add.w	r2, r7, #16
 8005530:	4619      	mov	r1, r3
 8005532:	f7ff f945 	bl	80047c0 <uavcan_register_Value_1_0_serialize_>
 8005536:	4603      	mov	r3, r0
 8005538:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 800553a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800553e:	2b00      	cmp	r3, #0
 8005540:	da02      	bge.n	8005548 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 8005542:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005546:	e030      	b.n	80055aa <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	4413      	add	r3, r2
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	2b00      	cmp	r3, #0
 800555a:	d021      	beq.n	80055a0 <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f1c3 0308 	rsb	r3, r3, #8
 800556a:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 800556c:	7ebb      	ldrb	r3, [r7, #26]
 800556e:	9302      	str	r3, [sp, #8]
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9cd 2300 	strd	r2, r3, [sp]
 800557c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557e:	6a39      	ldr	r1, [r7, #32]
 8005580:	68b8      	ldr	r0, [r7, #8]
 8005582:	f7fc fea1 	bl	80022c8 <nunavutSetUxx>
 8005586:	4603      	mov	r3, r0
 8005588:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 800558a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800558e:	2b00      	cmp	r3, #0
 8005590:	da02      	bge.n	8005598 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8005592:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005596:	e008      	b.n	80055aa <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005598:	7ebb      	ldrb	r3, [r7, #26]
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	4413      	add	r3, r2
 800559e:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	08da      	lsrs	r2, r3, #3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3728      	adds	r7, #40	; 0x28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fd34 	bl	800602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
      { }
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 80055ea:	b580      	push	{r7, lr}
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	f7fc fbb6 	bl	8001d5e <Error_Handler>
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <micros_64>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 80055f6:	b5b0      	push	{r4, r5, r7, lr}
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	f002 fe73 	bl	80082e4 <HAL_GetTick>
 80055fe:	4603      	mov	r3, r0
 8005600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	2200      	movs	r2, #0
 800560a:	461c      	mov	r4, r3
 800560c:	4615      	mov	r5, r2
 800560e:	4622      	mov	r2, r4
 8005610:	462b      	mov	r3, r5
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	bdb0      	pop	{r4, r5, r7, pc}

08005618 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f000 fd6b 	bl	8006110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ffdf 	bl	8005618 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff ff9f 	bl	80055b2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 800568a:	687c      	ldr	r4, [r7, #4]
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff ffd6 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005698:	f107 0308 	add.w	r3, r7, #8
 800569c:	f641 5255 	movw	r2, #7509	; 0x1d55
 80056a0:	4619      	mov	r1, r3
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 fd4b 	bl	800613e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff ffd9 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80056b2:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd90      	pop	{r4, r7, pc}
 80056c2:	bf00      	nop
 80056c4:	08015070 	.word	0x08015070

080056c8 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80056d4:	2120      	movs	r1, #32
 80056d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056da:	f003 ffc7 	bl	800966c <HAL_GPIO_TogglePin>
    }
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 80056f2:	687c      	ldr	r4, [r7, #4]
 80056f4:	f107 0308 	add.w	r3, r7, #8
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff ffa2 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	f240 4265 	movw	r2, #1125	; 0x465
 8005708:	4619      	mov	r1, r3
 800570a:	4620      	mov	r0, r4
 800570c:	f000 fd35 	bl	800617a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ffa5 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800571a:	4a04      	ldr	r2, [pc, #16]	; (800572c <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bd90      	pop	{r4, r7, pc}
 800572a:	bf00      	nop
 800572c:	08015050 	.word	0x08015050

08005730 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override {
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800573c:	2104      	movs	r1, #4
 800573e:	4803      	ldr	r0, [pc, #12]	; (800574c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x1c>)
 8005740:	f003 ff94 	bl	800966c <HAL_GPIO_TogglePin>
    }
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	48000c00 	.word	0x48000c00

08005750 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

RegisterListReader* reg_list_service;

class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 800575a:	687c      	ldr	r4, [r7, #4]
 800575c:	f107 0308 	add.w	r3, r7, #8
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff6e 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005768:	f107 0108 	add.w	r1, r7, #8
 800576c:	2302      	movs	r3, #2
 800576e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005772:	4620      	mov	r0, r4
 8005774:	f000 fd30 	bl	80061d8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005778:	f107 0308 	add.w	r3, r7, #8
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff71 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005782:	4a04      	ldr	r2, [pc, #16]	; (8005794 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bd90      	pop	{r4, r7, pc}
 8005792:	bf00      	nop
 8005794:	08015030 	.word	0x08015030

08005798 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:


void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 8005798:	b580      	push	{r7, lr}
 800579a:	f5ad 6dad 	sub.w	sp, sp, #1384	; 0x568
 800579e:	af02      	add	r7, sp, #8
 80057a0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80057a4:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80057a8:	6018      	str	r0, [r3, #0]
 80057aa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80057ae:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80057b2:	6019      	str	r1, [r3, #0]
 80057b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80057b8:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80057bc:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 80057be:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80057c2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80057c6:	4618      	mov	r0, r3
 80057c8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80057cc:	461a      	mov	r2, r3
 80057ce:	2100      	movs	r1, #0
 80057d0:	f00b fba5 	bl	8010f1e <memset>

    register_access_response.timestamp.microsecond = micros_64();
 80057d4:	f7ff ff0f 	bl	80055f6 <micros_64>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80057e0:	f5a1 710e 	sub.w	r1, r1, #568	; 0x238
 80057e4:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 80057e8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80057ec:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80057f0:	4618      	mov	r0, r3
 80057f2:	f44f 7304 	mov.w	r3, #528	; 0x210
 80057f6:	461a      	mov	r2, r3
 80057f8:	2100      	movs	r1, #0
 80057fa:	f00b fb90 	bl	8010f1e <memset>
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 80057fe:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005802:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2208      	movs	r2, #8
 800580a:	49d8      	ldr	r1, [pc, #864]	; (8005b6c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3d4>)
 800580c:	4618      	mov	r0, r3
 800580e:	f00b fb5c 	bl	8010eca <memcmp>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d150      	bne.n	80058ba <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x122>
    {
        if (register_access_request.value._tag_ == 11) {
 8005818:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800581c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8005826:	2b0b      	cmp	r3, #11
 8005828:	d10c      	bne.n	8005844 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xac>
            if (register_access_request.value.natural8.value.elements[0] > 0) {
 800582a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800582e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xac>
            	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800583c:	2104      	movs	r1, #4
 800583e:	48cc      	ldr	r0, [pc, #816]	; (8005b70 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3d8>)
 8005840:	f003 ff14 	bl	800966c <HAL_GPIO_TogglePin>
                //controller.velocity_regulator.prev_error = 0;
                //motor_set_speed(0);
            }
        }

        register_access_response.persistent = true;
 8005844:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005848:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800584c:	2201      	movs	r2, #1
 800584e:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005850:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005854:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005858:	2201      	movs	r2, #1
 800585a:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 800585c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005860:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005864:	220b      	movs	r2, #11
 8005866:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 800586a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800586e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005872:	4618      	mov	r0, r3
 8005874:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005878:	461a      	mov	r2, r3
 800587a:	2100      	movs	r1, #0
 800587c:	f00b fb4f 	bl	8010f1e <memset>
        result.value.elements[0] = 127; //(uint8_t)motor_get_state();
 8005880:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005884:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005888:	227f      	movs	r2, #127	; 0x7f
 800588a:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 800588c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005890:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005894:	2201      	movs	r2, #1
 8005896:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 800589a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800589e:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 80058a2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80058a6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80058aa:	4610      	mov	r0, r2
 80058ac:	4619      	mov	r1, r3
 80058ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80058b2:	461a      	mov	r2, r3
 80058b4:	f00b fc19 	bl	80110ea <memcpy>
 80058b8:	e12d      	b.n	8005b16 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x37e>
    } else if (memcmp(register_access_request.name.name.elements, motor_speed_reg_name, MOTOR_SPEED_REG_NAME_LEN) == 0) {
 80058ba:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80058be:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	220b      	movs	r2, #11
 80058c6:	49ab      	ldr	r1, [pc, #684]	; (8005b74 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3dc>)
 80058c8:	4618      	mov	r0, r3
 80058ca:	f00b fafe 	bl	8010eca <memcmp>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d151      	bne.n	8005978 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1e0>
        if (register_access_request.value._tag_ == 12) {
 80058d4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80058d8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d10a      	bne.n	80058fc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x164>
            double new_speed = register_access_request.value.real64.value.elements[0];
 80058e6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80058ea:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80058f4:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80058f8:	e9c1 2300 	strd	r2, r3, [r1]
            //motor_set_speed(new_speed);
        }

        register_access_response.persistent = true;
 80058fc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005900:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005904:	2201      	movs	r2, #1
 8005906:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005908:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800590c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005910:	2201      	movs	r2, #1
 8005912:	721a      	strb	r2, [r3, #8]
        value._tag_ = 12;
 8005914:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005918:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800591c:	220c      	movs	r2, #12
 800591e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Real64_1_0 result = {};
 8005922:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005926:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800592a:	4618      	mov	r0, r3
 800592c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005930:	461a      	mov	r2, r3
 8005932:	2100      	movs	r1, #0
 8005934:	f00b faf3 	bl	8010f1e <memset>
        result.value.elements[0] = 11; //motor_get_speed();
 8005938:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800593c:	f5a3 61aa 	sub.w	r1, r3, #1360	; 0x550
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	4b8c      	ldr	r3, [pc, #560]	; (8005b78 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3e0>)
 8005946:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 800594a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800594e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005952:	2201      	movs	r2, #1
 8005954:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.real64 = result;
 8005958:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800595c:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 8005960:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005964:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005968:	4610      	mov	r0, r2
 800596a:	4619      	mov	r1, r3
 800596c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005970:	461a      	mov	r2, r3
 8005972:	f00b fbba 	bl	80110ea <memcpy>
 8005976:	e0ce      	b.n	8005b16 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x37e>
    } else if (memcmp(register_access_request.name.name.elements, motor_current_lim_reg_name, MOTOR_CURRENT_LIM_REG_NAME_LEN) == 0) {
 8005978:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800597c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2213      	movs	r2, #19
 8005984:	497d      	ldr	r1, [pc, #500]	; (8005b7c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3e4>)
 8005986:	4618      	mov	r0, r3
 8005988:	f00b fa9f 	bl	8010eca <memcmp>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d151      	bne.n	8005a36 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x29e>
        if (register_access_request.value._tag_ == 12) {
 8005992:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005996:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d10a      	bne.n	80059ba <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x222>
            double new_current_lim = register_access_request.value.real64.value.elements[0];
 80059a4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80059a8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80059b2:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80059b6:	e9c1 2300 	strd	r2, r3, [r1]
            if (new_current_lim > 0) {
                //motor_set_current_lim(new_current_lim);
            }
        }

        register_access_response.persistent = true;
 80059ba:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80059be:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80059c2:	2201      	movs	r2, #1
 80059c4:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80059c6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80059ca:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80059ce:	2201      	movs	r2, #1
 80059d0:	721a      	strb	r2, [r3, #8]
        value._tag_ = 12;
 80059d2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80059d6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80059da:	220c      	movs	r2, #12
 80059dc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Real64_1_0 result = {};
 80059e0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80059e4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80059e8:	4618      	mov	r0, r3
 80059ea:	f44f 7384 	mov.w	r3, #264	; 0x108
 80059ee:	461a      	mov	r2, r3
 80059f0:	2100      	movs	r1, #0
 80059f2:	f00b fa94 	bl	8010f1e <memset>
        result.value.elements[0] = 1; //motor_get_current_lim();
 80059f6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80059fa:	f5a3 61aa 	sub.w	r1, r3, #1360	; 0x550
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	4b5f      	ldr	r3, [pc, #380]	; (8005b80 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3e8>)
 8005a04:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8005a08:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a0c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005a10:	2201      	movs	r2, #1
 8005a12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.real64 = result;
 8005a16:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a1a:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 8005a1e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a22:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f00b fb5b 	bl	80110ea <memcpy>
 8005a34:	e06f      	b.n	8005b16 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x37e>
    } else if (memcmp(register_access_request.name.name.elements, motor_voltage_reg_name, MOTOR_VOLTAGE_REG_NAME_LEN) == 0) {
 8005a36:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a3a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	220d      	movs	r2, #13
 8005a42:	4950      	ldr	r1, [pc, #320]	; (8005b84 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ec>)
 8005a44:	4618      	mov	r0, r3
 8005a46:	f00b fa40 	bl	8010eca <memcmp>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d155      	bne.n	8005afc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x364>
        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005a50:	2104      	movs	r1, #4
 8005a52:	4847      	ldr	r0, [pc, #284]	; (8005b70 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3d8>)
 8005a54:	f003 fe0a 	bl	800966c <HAL_GPIO_TogglePin>
        if (register_access_request.value._tag_ == 12) {
 8005a58:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a5c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d10a      	bne.n	8005a80 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2e8>
            double new_voltage = register_access_request.value.real64.value.elements[0];
 8005a6a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a6e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8005a78:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8005a7c:	e9c1 2300 	strd	r2, r3, [r1]
            //motor_set_voltage(new_voltage);
        }

        register_access_response.persistent = true;
 8005a80:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a84:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005a88:	2201      	movs	r2, #1
 8005a8a:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005a8c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a90:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005a94:	2201      	movs	r2, #1
 8005a96:	721a      	strb	r2, [r3, #8]
        value._tag_ = 12;
 8005a98:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005a9c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005aa0:	220c      	movs	r2, #12
 8005aa2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Real64_1_0 result = {};
 8005aa6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005aaa:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	f00b fa31 	bl	8010f1e <memset>
        result.value.elements[0] = 1; //motor_get_current_lim();
 8005abc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ac0:	f5a3 61aa 	sub.w	r1, r3, #1360	; 0x550
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	; (8005b80 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3e8>)
 8005aca:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8005ace:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ad2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.real64 = result;
 8005adc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ae0:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 8005ae4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ae8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005af4:	461a      	mov	r2, r3
 8005af6:	f00b faf8 	bl	80110ea <memcpy>
 8005afa:	e00c      	b.n	8005b16 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x37e>
    } else {
        value._tag_ = 0;
 8005afc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005b00:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 8005b0a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005b0e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 8005b16:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005b1a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005b1e:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8005b22:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8005b26:	3310      	adds	r3, #16
 8005b28:	4611      	mov	r1, r2
 8005b2a:	f44f 7204 	mov.w	r2, #528	; 0x210
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f00b fadb 	bl	80110ea <memcpy>

    interface->send_cyphal_response<RegisterAccessResponse>(
 8005b34:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005b38:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb76 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005b48:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005b4c:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8005b50:	f507 714a 	add.w	r1, r7, #808	; 0x328
 8005b54:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3f0>)
 8005b5e:	f000 fb75 	bl	800624c <_ZNK15CyphalInterface20send_cyphal_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransfert>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 8005b62:	bf00      	nop
 8005b64:	f507 67ac 	add.w	r7, r7, #1376	; 0x560
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000000 	.word	0x20000000
 8005b70:	48000c00 	.word	0x48000c00
 8005b74:	20000020 	.word	0x20000020
 8005b78:	40260000 	.word	0x40260000
 8005b7c:	2000000c 	.word	0x2000000c
 8005b80:	3ff00000 	.word	0x3ff00000
 8005b84:	2000002c 	.word	0x2000002c
 8005b88:	2000047c 	.word	0x2000047c

08005b8c <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af02      	add	r7, sp, #8
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 8005b92:	463b      	mov	r3, r7
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <heartbeat+0x3c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	603b      	str	r3, [r7, #0]
    interface->send_cyphal_default_msg<HBeat>(
 8005ba0:	480a      	ldr	r0, [pc, #40]	; (8005bcc <heartbeat+0x40>)
 8005ba2:	f000 fb47 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <heartbeat+0x44>)
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	f641 5355 	movw	r3, #7509	; 0x1d55
 8005bb0:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <heartbeat+0x48>)
 8005bb2:	f000 fb8d 	bl	80062d0 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8005bb6:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <heartbeat+0x3c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	4a02      	ldr	r2, [pc, #8]	; (8005bc8 <heartbeat+0x3c>)
 8005bbe:	6013      	str	r3, [r2, #0]

}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000590 	.word	0x20000590
 8005bcc:	20000448 	.word	0x20000448
 8005bd0:	2000058f 	.word	0x2000058f
 8005bd4:	20000588 	.word	0x20000588

08005bd8 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8005bd8:	b5b0      	push	{r4, r5, r7, lr}
 8005bda:	b08c      	sub	sp, #48	; 0x30
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8005be0:	4b34      	ldr	r3, [pc, #208]	; (8005cb4 <setup_cyphal+0xdc>)
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	2105      	movs	r1, #5
 8005bec:	4832      	ldr	r0, [pc, #200]	; (8005cb8 <setup_cyphal+0xe0>)
 8005bee:	f000 fb89 	bl	8006304 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f107 0308 	add.w	r3, r7, #8
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fbc3 	bl	8006386 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8005c00:	f107 0308 	add.w	r3, r7, #8
 8005c04:	4619      	mov	r1, r3
 8005c06:	482d      	ldr	r0, [pc, #180]	; (8005cbc <setup_cyphal+0xe4>)
 8005c08:	f000 fbcc 	bl	80063a4 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8005c0c:	f107 0308 	add.w	r3, r7, #8
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fd27 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8005c16:	f107 0310 	add.w	r3, r7, #16
 8005c1a:	4928      	ldr	r1, [pc, #160]	; (8005cbc <setup_cyphal+0xe4>)
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fd11 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005c22:	f107 0510 	add.w	r5, r7, #16
 8005c26:	f44f 700e 	mov.w	r0, #568	; 0x238
 8005c2a:	f00a f88e 	bl	800fd4a <_Znwj>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461c      	mov	r4, r3
 8005c32:	4629      	mov	r1, r5
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7ff fd23 	bl	8005680 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8005c3a:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <setup_cyphal+0xe8>)
 8005c3c:	601c      	str	r4, [r3, #0]
 8005c3e:	f107 0310 	add.w	r3, r7, #16
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fd0e 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8005c48:	f107 0318 	add.w	r3, r7, #24
 8005c4c:	491b      	ldr	r1, [pc, #108]	; (8005cbc <setup_cyphal+0xe4>)
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fcf8 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005c54:	f107 0518 	add.w	r5, r7, #24
 8005c58:	f44f 700e 	mov.w	r0, #568	; 0x238
 8005c5c:	f00a f875 	bl	800fd4a <_Znwj>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461c      	mov	r4, r3
 8005c64:	4629      	mov	r1, r5
 8005c66:	4620      	mov	r0, r4
 8005c68:	f7ff fd3e 	bl	80056e8 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8005c6c:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <setup_cyphal+0xec>)
 8005c6e:	601c      	str	r4, [r3, #0]
 8005c70:	f107 0318 	add.w	r3, r7, #24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fcf5 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 8005c7a:	f107 0320 	add.w	r3, r7, #32
 8005c7e:	490f      	ldr	r1, [pc, #60]	; (8005cbc <setup_cyphal+0xe4>)
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fcdf 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005c86:	f107 0520 	add.w	r5, r7, #32
 8005c8a:	f44f 700e 	mov.w	r0, #568	; 0x238
 8005c8e:	f00a f85c 	bl	800fd4a <_Znwj>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461c      	mov	r4, r3
 8005c96:	4629      	mov	r1, r5
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7ff fd59 	bl	8005750 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <setup_cyphal+0xf0>)
 8005ca0:	601c      	str	r4, [r3, #0]
 8005ca2:	f107 0320 	add.w	r3, r7, #32
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fcdc 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8005cac:	bf00      	nop
 8005cae:	3728      	adds	r7, #40	; 0x28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005cb4:	20000450 	.word	0x20000450
 8005cb8:	200003f0 	.word	0x200003f0
 8005cbc:	20000448 	.word	0x20000448
 8005cc0:	20000470 	.word	0x20000470
 8005cc4:	20000474 	.word	0x20000474
 8005cc8:	20000478 	.word	0x20000478

08005ccc <cyphal_loop>:

void cyphal_loop() {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
    interface->loop();
 8005cd0:	4804      	ldr	r0, [pc, #16]	; (8005ce4 <cyphal_loop+0x18>)
 8005cd2:	f000 faaf 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f007 fa9b 	bl	800d214 <_ZN15CyphalInterface4loopEv>
}
 8005cde:	bf00      	nop
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000448 	.word	0x20000448

08005ce8 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8005cf0:	f107 0320 	add.w	r3, r7, #32
 8005cf4:	2105      	movs	r1, #5
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f009 ffd8 	bl	800fcac <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 8005cfc:	f107 0318 	add.w	r3, r7, #24
 8005d00:	f240 4165 	movw	r1, #1125	; 0x465
 8005d04:	4618      	mov	r0, r3
 8005d06:	f009 ffb1 	bl	800fc6c <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	f641 5155 	movw	r1, #7509	; 0x1d55
 8005d12:	4618      	mov	r0, r3
 8005d14:	f009 ffaa 	bl	800fc6c <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	f107 0218 	add.w	r2, r7, #24
 8005d20:	f107 0120 	add.w	r1, r7, #32
 8005d24:	4618      	mov	r0, r3
 8005d26:	f009 ffe3 	bl	800fcf0 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8005d2a:	4b45      	ldr	r3, [pc, #276]	; (8005e40 <cyphal_can_starter+0x158>)
 8005d2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d30:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8005d32:	4b43      	ldr	r3, [pc, #268]	; (8005e40 <cyphal_can_starter+0x158>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8005d38:	4b41      	ldr	r3, [pc, #260]	; (8005e40 <cyphal_can_starter+0x158>)
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8005d3e:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <cyphal_can_starter+0x158>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	4a3e      	ldr	r2, [pc, #248]	; (8005e40 <cyphal_can_starter+0x158>)
 8005d48:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	4a3c      	ldr	r2, [pc, #240]	; (8005e40 <cyphal_can_starter+0x158>)
 8005d4e:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8005d50:	4b3c      	ldr	r3, [pc, #240]	; (8005e44 <cyphal_can_starter+0x15c>)
 8005d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d56:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8005d58:	4b3a      	ldr	r3, [pc, #232]	; (8005e44 <cyphal_can_starter+0x15c>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8005d5e:	4b39      	ldr	r3, [pc, #228]	; (8005e44 <cyphal_can_starter+0x15c>)
 8005d60:	2202      	movs	r2, #2
 8005d62:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8005d64:	4b37      	ldr	r3, [pc, #220]	; (8005e44 <cyphal_can_starter+0x15c>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	4a35      	ldr	r2, [pc, #212]	; (8005e44 <cyphal_can_starter+0x15c>)
 8005d6e:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4a34      	ldr	r2, [pc, #208]	; (8005e44 <cyphal_can_starter+0x15c>)
 8005d74:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8005d76:	4b34      	ldr	r3, [pc, #208]	; (8005e48 <cyphal_can_starter+0x160>)
 8005d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d7c:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 8005d7e:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <cyphal_can_starter+0x160>)
 8005d80:	2202      	movs	r2, #2
 8005d82:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8005d84:	4b30      	ldr	r3, [pc, #192]	; (8005e48 <cyphal_can_starter+0x160>)
 8005d86:	2202      	movs	r2, #2
 8005d88:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	; (8005e48 <cyphal_can_starter+0x160>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4a2d      	ldr	r2, [pc, #180]	; (8005e48 <cyphal_can_starter+0x160>)
 8005d94:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <cyphal_can_starter+0x160>)
 8005d9a:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	2302      	movs	r3, #2
 8005da2:	2202      	movs	r2, #2
 8005da4:	2102      	movs	r1, #2
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f002 fff4 	bl	8008d94 <HAL_FDCAN_ConfigGlobalFilter>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf14      	ite	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	2300      	moveq	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8005dbc:	f7fb ffcf 	bl	8001d5e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 8005dc0:	491f      	ldr	r1, [pc, #124]	; (8005e40 <cyphal_can_starter+0x158>)
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f002 ff8c 	bl	8008ce0 <HAL_FDCAN_ConfigFilter>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bf14      	ite	ne
 8005dce:	2301      	movne	r3, #1
 8005dd0:	2300      	moveq	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <cyphal_can_starter+0xf4>
	  Error_Handler();
 8005dd8:	f7fb ffc1 	bl	8001d5e <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8005ddc:	491a      	ldr	r1, [pc, #104]	; (8005e48 <cyphal_can_starter+0x160>)
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f002 ff7e 	bl	8008ce0 <HAL_FDCAN_ConfigFilter>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf14      	ite	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	2300      	moveq	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <cyphal_can_starter+0x110>
	  Error_Handler();
 8005df4:	f7fb ffb3 	bl	8001d5e <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2105      	movs	r1, #5
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f002 fffa 	bl	8008df6 <HAL_FDCAN_ConfigTxDelayCompensation>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <cyphal_can_starter+0x12e>
	  Error_Handler();
 8005e12:	f7fb ffa4 	bl	8001d5e <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f003 f80f 	bl	8008e3a <HAL_FDCAN_EnableTxDelayCompensation>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <cyphal_can_starter+0x148>
	  Error_Handler();
 8005e2c:	f7fb ff97 	bl	8001d5e <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f003 f823 	bl	8008e7c <HAL_FDCAN_Start>
}
 8005e36:	bf00      	nop
 8005e38:	3728      	adds	r7, #40	; 0x28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	200005c4 	.word	0x200005c4
 8005e44:	20000594 	.word	0x20000594
 8005e48:	200005ac 	.word	0x200005ac

08005e4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
      { delete this; }
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	6053      	str	r3, [r2, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	609a      	str	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	6053      	str	r3, [r2, #4]
 8005ea8:	6093      	str	r3, [r2, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff ffde 	bl	8005e6e <_ZNSt14_Function_baseC1Ev>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8005eb8:	6838      	ldr	r0, [r7, #0]
 8005eba:	f000 faa7 	bl	800640c <_ZNKSt8functionIFyvEEcvbEv>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	609a      	str	r2, [r3, #8]
	  }
      }
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	6053      	str	r3, [r2, #4]
 8005efe:	6093      	str	r3, [r2, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff ffb3 	bl	8005e6e <_ZNSt14_Function_baseC1Ev>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8005f0e:	6838      	ldr	r0, [r7, #0]
 8005f10:	f000 fa8c 	bl	800642c <_ZNKSt8functionIFvvEEcvbEv>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	2202      	movs	r2, #2
 8005f24:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	609a      	str	r2, [r3, #8]
      }
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa7f 	bl	800644c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
	return get();
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa6e 	bl	800644c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8005f70:	4603      	mov	r3, r0
      }
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fa6e 	bl	8006466 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff ffeb 	bl	8005f7a <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff ffeb 	bl	8005f94 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	: _M_t()
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ffe8 	bl	8005fae <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fa47 	bl	8006486 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8005ff8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00c      	beq.n	800601c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa4c 	bl	80064a0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8006008:	4604      	mov	r4, r0
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fa55 	bl	80064ba <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8006010:	4603      	mov	r3, r0
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	4620      	mov	r0, r4
 8006018:	f000 fa5a 	bl	80064d0 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
      }
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	bd90      	pop	{r4, r7, pc}

0800602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f7fb feac 	bl	8001d9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	461a      	mov	r2, r3
 800605e:	2300      	movs	r3, #0
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	6053      	str	r3, [r2, #4]
 8006064:	6093      	str	r3, [r2, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff00 	bl	8005e6e <_ZNSt14_Function_baseC1Ev>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8006074:	6838      	ldr	r0, [r7, #0]
 8006076:	f000 fa3b 	bl	80064f0 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00e      	beq.n	800609e <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8006080:	687c      	ldr	r4, [r7, #4]
 8006082:	6838      	ldr	r0, [r7, #0]
 8006084:	f000 fa44 	bl	8006510 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006088:	4603      	mov	r3, r0
 800608a:	4619      	mov	r1, r3
 800608c:	4620      	mov	r0, r4
 800608e:	f000 fa4a 	bl	8006526 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8006096:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a04      	ldr	r2, [pc, #16]	; (80060ac <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 800609c:	609a      	str	r2, [r3, #8]
	    }
	}
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}
 80060a8:	0800654b 	.word	0x0800654b
 80060ac:	0800656f 	.word	0x0800656f

080060b0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	461a      	mov	r2, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	6053      	str	r3, [r2, #4]
 80060c4:	6093      	str	r3, [r2, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fed0 	bl	8005e6e <_ZNSt14_Function_baseC1Ev>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80060d4:	6838      	ldr	r0, [r7, #0]
 80060d6:	f000 fa69 	bl	80065ac <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00e      	beq.n	80060fe <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80060e0:	687c      	ldr	r4, [r7, #4]
 80060e2:	6838      	ldr	r0, [r7, #0]
 80060e4:	f000 fa72 	bl	80065cc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80060e8:	4603      	mov	r3, r0
 80060ea:	4619      	mov	r1, r3
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fa78 	bl	80065e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 80060f6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a04      	ldr	r2, [pc, #16]	; (800610c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 80060fc:	609a      	str	r2, [r3, #8]
	}
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	bd90      	pop	{r4, r7, pc}
 8006108:	08006607 	.word	0x08006607
 800610c:	08006625 	.word	0x08006625

08006110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fb fe26 	bl	8001d80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800613e:	b580      	push	{r7, lr}
 8006140:	b086      	sub	sp, #24
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 800614c:	f107 0310 	add.w	r3, r7, #16
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff fa76 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	f107 0110 	add.w	r1, r7, #16
 800615e:	2300      	movs	r3, #0
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fa7f 	bl	8006664 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8006166:	f107 0310 	add.w	r3, r7, #16
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fa7a 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	4613      	mov	r3, r2
 8006186:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8006188:	f107 0310 	add.w	r3, r7, #16
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fa58 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	f107 0110 	add.w	r1, r7, #16
 800619a:	2300      	movs	r3, #0
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fa8f 	bl	80066c0 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80061a2:	f107 0310 	add.w	r3, r7, #16
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff fa5c 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	08015090 	.word	0x08015090

080061d8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	460b      	mov	r3, r1
 80061e8:	80fb      	strh	r3, [r7, #6]
 80061ea:	4613      	mov	r3, r2
 80061ec:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface) {
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff ffe1 	bl	80061b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80061f6:	4a0e      	ldr	r2, [pc, #56]	; (8006230 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3308      	adds	r3, #8
 8006200:	f44f 720a 	mov.w	r2, #552	; 0x228
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f00a fe89 	bl	8010f1e <memset>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fa15 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 800621a:	797a      	ldrb	r2, [r7, #5]
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	4619      	mov	r1, r3
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fa7b 	bl	800671c <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	08015040 	.word	0x08015040

08006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	return _M_get();
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa8c 	bl	800675a <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8006242:	4603      	mov	r3, r0
      }
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <_ZNK15CyphalInterface20send_cyphal_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransfert>:
        to_node_id
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_cyphal_response(
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	; 0x30
 8006250:	af04      	add	r7, sp, #16
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
    typename TypeAlias::Type *obj,
    uint8_t buffer[],
    CanardRxTransfer *transfer,
    CanardPortID port
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800625a:	f240 130b 	movw	r3, #267	; 0x10b
 800625e:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8006260:	f107 031c 	add.w	r3, r7, #28
 8006264:	461a      	mov	r2, r3
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	f7ff f89b 	bl	80053a4 <uavcan_register_Access_Response_1_0_serialize_>
 800626e:	4603      	mov	r3, r0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <_ZNK15CyphalInterface20send_cyphal_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransfert+0x3a>
        utilities.error_handler();
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	3310      	adds	r3, #16
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fa76 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006286:	f107 0314 	add.w	r3, r7, #20
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	809a      	strh	r2, [r3, #4]
 8006290:	2304      	movs	r3, #4
 8006292:	753b      	strb	r3, [r7, #20]
 8006294:	2301      	movs	r3, #1
 8006296:	757b      	strb	r3, [r7, #21]
 8006298:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800629a:	82fb      	strh	r3, [r7, #22]
            .priority = CanardPriorityNominal,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80062a0:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80062a6:	767b      	strb	r3, [r7, #25]
    };
    push(
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	9202      	str	r2, [sp, #8]
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	f107 0314 	add.w	r3, r7, #20
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4a05      	ldr	r2, [pc, #20]	; (80062cc <_ZNK15CyphalInterface20send_cyphal_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransfert+0x80>)
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f006 ff3b 	bl	800d138 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        DEFAULT_TIMEOUT_MICROS,
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 80062c2:	bf00      	nop
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	000f4240 	.word	0x000f4240

080062d0 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>:
inline void CyphalInterface::send_cyphal_default_msg(
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af04      	add	r7, sp, #16
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	807b      	strh	r3, [r7, #2]
    send_cyphal<TypeAlias>(
 80062de:	887a      	ldrh	r2, [r7, #2]
 80062e0:	23ff      	movs	r3, #255	; 0xff
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	2300      	movs	r3, #0
 80062e6:	9302      	str	r3, [sp, #8]
 80062e8:	2304      	movs	r3, #4
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fa52 	bl	80067a0 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    UtilityConfig& utilities;
public:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create(
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b08b      	sub	sp, #44	; 0x2c
 8006308:	af02      	add	r7, sp, #8
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	460b      	mov	r3, r1
 8006312:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8006314:	f107 030c 	add.w	r3, r7, #12
 8006318:	61fb      	str	r3, [r7, #28]
        auto provider  = std::unique_ptr<Provider>(Provider::template create<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config));
 800631a:	7afa      	ldrb	r2, [r7, #11]
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	69f8      	ldr	r0, [r7, #28]
 8006326:	f000 fa89 	bl	800683c <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 800632a:	4602      	mov	r2, r0
 800632c:	f107 0310 	add.w	r3, r7, #16
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f000 facf 	bl	80068d6 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>
    
        std::byte* interface_ptr = *inout_buffer;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	61bb      	str	r3, [r7, #24]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	4619      	mov	r1, r3
 8006342:	200c      	movs	r0, #12
 8006344:	f7fb fd10 	bl	8001d68 <_ZnwjPv>
 8006348:	4604      	mov	r4, r0
 800634a:	7afb      	ldrb	r3, [r7, #11]
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	4619      	mov	r1, r3
 8006350:	4620      	mov	r0, r4
 8006352:	f7fb fe3b 	bl	8001fcc <_ZN15CyphalInterfaceC1EhR13UtilityConfig>
 8006356:	617c      	str	r4, [r7, #20]

        interface->provider = std::move(provider);
 8006358:	f107 0310 	add.w	r3, r7, #16
 800635c:	4618      	mov	r0, r3
 800635e:	f000 faeb 	bl	8006938 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8006362:	4602      	mov	r2, r0
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	3304      	adds	r3, #4
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f000 faef 	bl	800694e <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
        return interface;
 8006370:	697c      	ldr	r4, [r7, #20]
    }
 8006372:	f107 0310 	add.w	r3, r7, #16
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fabc 	bl	80068f4 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>
        return interface;
 800637c:	4623      	mov	r3, r4
    }
 800637e:	4618      	mov	r0, r3
 8006380:	3724      	adds	r7, #36	; 0x24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd90      	pop	{r4, r7, pc}

08006386 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fafd 	bl	8006994 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80063ae:	687c      	ldr	r4, [r7, #4]
 80063b0:	6838      	ldr	r0, [r7, #0]
 80063b2:	f000 fb07 	bl	80069c4 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 80063b6:	4603      	mov	r3, r0
 80063b8:	4619      	mov	r1, r3
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fb0d 	bl	80069da <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 80063c0:	687b      	ldr	r3, [r7, #4]
      }
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd90      	pop	{r4, r7, pc}
	...

080063cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
      { }
 80063d4:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	080150d0 	.word	0x080150d0

080063ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
      { }
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ffe9 	bl	80063cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80063fa:	210c      	movs	r1, #12
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f009 fca2 	bl	800fd46 <_ZdlPvj>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fb fd1a 	bl	8001e50 <_ZNKSt14_Function_base8_M_emptyEv>
 800641c:	4603      	mov	r3, r0
 800641e:	f083 0301 	eor.w	r3, r3, #1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fb fd0a 	bl	8001e50 <_ZNKSt14_Function_base8_M_emptyEv>
 800643c:	4603      	mov	r3, r0
 800643e:	f083 0301 	eor.w	r3, r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fade 	bl	8006a18 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800645c:	4603      	mov	r3, r0
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fae0 	bl	8006a34 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fae8 	bl	8006a4c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fae9 	bl	8006a68 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8006496:	4603      	mov	r3, r0
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fae9 	bl	8006a82 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 80064b0:	4603      	mov	r3, r0
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x18>
 80064e0:	2140      	movs	r1, #64	; 0x40
 80064e2:	4618      	mov	r0, r3
 80064e4:	f009 fc2f 	bl	800fd46 <_ZdlPvj>
      }
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bf14      	ite	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	2300      	moveq	r3, #0
 8006502:	b2db      	uxtb	r3, r3
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8006526:	b590      	push	{r4, r7, lr}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8006530:	6838      	ldr	r0, [r7, #0]
 8006532:	f7ff ffed 	bl	8006510 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006536:	4603      	mov	r3, r0
 8006538:	4622      	mov	r2, r4
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 faad 	bl	8006a9c <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	bd90      	pop	{r4, r7, pc}

0800654a <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 faba 	bl	8006acc <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006558:	4603      	mov	r3, r0
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fac6 	bl	8006aec <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
      }
 8006564:	4610      	mov	r0, r2
 8006566:	4619      	mov	r1, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800656e:	b590      	push	{r4, r7, lr}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d109      	bne.n	8006596 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f000 faa2 	bl	8006acc <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006588:	4604      	mov	r4, r0
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fac1 	bl	8006b12 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8006590:	4603      	mov	r3, r0
 8006592:	601c      	str	r4, [r3, #0]
	    break;
 8006594:	e005      	b.n	80065a2 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	461a      	mov	r2, r3
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fac5 	bl	8006b2c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80065a2:	2300      	movs	r3, #0
      }
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}

080065ac <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80065e2:	b590      	push	{r4, r7, lr}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80065ec:	6838      	ldr	r0, [r7, #0]
 80065ee:	f7ff ffed 	bl	80065cc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80065f2:	4603      	mov	r3, r0
 80065f4:	4622      	mov	r2, r4
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fad1 	bl	8006ba0 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}

08006606 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fade 	bl	8006bd0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8006614:	4603      	mov	r3, r0
 8006616:	4618      	mov	r0, r3
 8006618:	f000 faea 	bl	8006bf0 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800661c:	bf00      	nop
      }
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8006624:	b590      	push	{r4, r7, lr}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d109      	bne.n	800664c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006638:	68b8      	ldr	r0, [r7, #8]
 800663a:	f000 fac9 	bl	8006bd0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800663e:	4604      	mov	r4, r0
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fae5 	bl	8006c10 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8006646:	4603      	mov	r3, r0
 8006648:	601c      	str	r4, [r3, #0]
	    break;
 800664a:	e005      	b.n	8006658 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	461a      	mov	r2, r3
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fae8 	bl	8006c28 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8006658:	2300      	movs	r3, #0
      }
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	bd90      	pop	{r4, r7, pc}
	...

08006664 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4611      	mov	r1, r2
 8006670:	461a      	mov	r2, r3
 8006672:	460b      	mov	r3, r1
 8006674:	80fb      	strh	r3, [r7, #6]
 8006676:	4613      	mov	r3, r2
 8006678:	717b      	strb	r3, [r7, #5]
    ): interface(interface) {
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fd9b 	bl	80061b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006682:	4a0e      	ldr	r2, [pc, #56]	; (80066bc <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3308      	adds	r3, #8
 800668c:	f44f 720a 	mov.w	r2, #552	; 0x228
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f00a fc43 	bl	8010f1e <memset>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe ffcf 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80066a6:	797a      	ldrb	r2, [r7, #5]
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	4619      	mov	r1, r3
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 faf5 	bl	8006c9c <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	08015080 	.word	0x08015080

080066c0 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4611      	mov	r1, r2
 80066cc:	461a      	mov	r2, r3
 80066ce:	460b      	mov	r3, r1
 80066d0:	80fb      	strh	r3, [r7, #6]
 80066d2:	4613      	mov	r3, r2
 80066d4:	717b      	strb	r3, [r7, #5]
    ): interface(interface) {
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fd6d 	bl	80061b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80066de:	4a0e      	ldr	r2, [pc, #56]	; (8006718 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3308      	adds	r3, #8
 80066e8:	f44f 720a 	mov.w	r2, #552	; 0x228
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f00a fc15 	bl	8010f1e <memset>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe ffa1 	bl	8005644 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8006702:	797a      	ldrb	r2, [r7, #5]
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	4619      	mov	r1, r3
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fae5 	bl	8006cd8 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	08015060 	.word	0x08015060

0800671c <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	807b      	strh	r3, [r7, #2]
 8006728:	4613      	mov	r3, r2
 800672a:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fd7b 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3308      	adds	r3, #8
 8006742:	787a      	ldrb	r2, [r7, #1]
 8006744:	8879      	ldrh	r1, [r7, #2]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	f240 2203 	movw	r2, #515	; 0x203
 800674e:	f006 fd2d 	bl	800d1ac <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fad6 	bl	8006d14 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8006768:	4603      	mov	r3, r0
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fb fb67 	bl	8001e50 <_ZNKSt14_Function_base8_M_emptyEv>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8006788:	f009 faf0 	bl	800fd6c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4610      	mov	r0, r2
 8006794:	4798      	blx	r3
 8006796:	bf00      	nop
      }
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 80067a0:	b5b0      	push	{r4, r5, r7, lr}
 80067a2:	b08c      	sub	sp, #48	; 0x30
 80067a4:	af04      	add	r7, sp, #16
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80067ae:	2307      	movs	r3, #7
 80067b0:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80067b2:	f107 031c 	add.w	r3, r7, #28
 80067b6:	461a      	mov	r2, r3
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	68b8      	ldr	r0, [r7, #8]
 80067bc:	f7fc f80e 	bl	80027dc <uavcan_node_Heartbeat_1_0_serialize_>
 80067c0:	4603      	mov	r3, r0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	09db      	lsrs	r3, r3, #7
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	3310      	adds	r3, #16
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff ffcd 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80067d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80067dc:	753b      	strb	r3, [r7, #20]
 80067de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80067e2:	757b      	strb	r3, [r7, #21]
 80067e4:	887b      	ldrh	r3, [r7, #2]
 80067e6:	82fb      	strh	r3, [r7, #22]
 80067e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80067ec:	763b      	strb	r3, [r7, #24]
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fa97 	bl	8006d2c <_ZNKSt8functionIFyvEEclEv>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
    push(
 8006802:	490d      	ldr	r1, [pc, #52]	; (8006838 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 8006804:	1854      	adds	r4, r2, r1
 8006806:	f143 0500 	adc.w	r5, r3, #0
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	9202      	str	r2, [sp, #8]
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4622      	mov	r2, r4
 800681a:	462b      	mov	r3, r5
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f006 fc8b 	bl	800d138 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	3301      	adds	r3, #1
 8006828:	b2da      	uxtb	r2, r3
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	701a      	strb	r2, [r3, #0]
}
 800682e:	bf00      	nop
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bdb0      	pop	{r4, r5, r7, pc}
 8006836:	bf00      	nop
 8006838:	000f4240 	.word	0x000f4240

0800683c <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create(
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	4613      	mov	r3, r2
 800684a:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem), args..., utilities);
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4619      	mov	r1, r3
 8006856:	2008      	movs	r0, #8
 8006858:	f7fb fa86 	bl	8001d68 <_ZnwjPv>
 800685c:	4604      	mov	r4, r0
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686a:	4619      	mov	r1, r3
 800686c:	4620      	mov	r0, r4
 800686e:	f7fb fbe1 	bl	8002034 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8006872:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	3308      	adds	r3, #8
 8006878:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len / 2, utilities);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	4619      	mov	r1, r3
 800687e:	2044      	movs	r0, #68	; 0x44
 8006880:	f7fb fa72 	bl	8001d68 <_ZnwjPv>
 8006884:	4604      	mov	r4, r0
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	085a      	lsrs	r2, r3, #1
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	4620      	mov	r0, r4
 8006890:	f7fb fbb4 	bl	8001ffc <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8006894:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	79fa      	ldrb	r2, [r7, #7]
 800689a:	69b9      	ldr	r1, [r7, #24]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fa5f 	bl	8006d60 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	601a      	str	r2, [r3, #0]
        return ptr;
 80068ac:	693b      	ldr	r3, [r7, #16]
    }
 80068ae:	4618      	mov	r0, r3
 80068b0:	3724      	adds	r7, #36	; 0x24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd90      	pop	{r4, r7, pc}

080068b6 <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	4611      	mov	r1, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fa8e 	bl	8006de8 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ffe6 	bl	80068b6 <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fa86 	bl	8006e10 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8006904:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa8b 	bl	8006e2a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 8006914:	4604      	mov	r4, r0
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fa94 	bl	8006e44 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>
 800691c:	4603      	mov	r3, r0
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fa99 	bl	8006e5a <_ZNKSt14default_deleteI5G4CANEclEPS0_>
	__ptr = pointer();
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
      }
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	bd90      	pop	{r4, r7, pc}

08006938 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8006958:	6838      	ldr	r0, [r7, #0]
 800695a:	f000 faa2 	bl	8006ea2 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>
 800695e:	4603      	mov	r3, r0
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa89 	bl	8006e7a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8006968:	6838      	ldr	r0, [r7, #0]
 800696a:	f000 fa5e 	bl	8006e2a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 800696e:	4603      	mov	r3, r0
 8006970:	4618      	mov	r0, r3
 8006972:	f000 faa3 	bl	8006ebc <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006976:	4602      	mov	r2, r0
 8006978:	f107 030c 	add.w	r3, r7, #12
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f000 faa7 	bl	8006ed2 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fd8b 	bl	80064a0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 800698a:	687b      	ldr	r3, [r7, #4]
	}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4622      	mov	r2, r4
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fa9c 	bl	8006eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 faa7 	bl	8006f08 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd90      	pop	{r4, r7, pc}

080069c4 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 80069e4:	6838      	ldr	r0, [r7, #0]
 80069e6:	f000 fa9a 	bl	8006f1e <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 80069ea:	4602      	mov	r2, r0
 80069ec:	f107 0308 	add.w	r3, r7, #8
 80069f0:	4611      	mov	r1, r2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fa9e 	bl	8006f34 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 80069f8:	f107 0308 	add.w	r3, r7, #8
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fab6 	bl	8006f70 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8006a04:	f107 0308 	add.w	r3, r7, #8
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fdd2 	bl	80055b2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8006a0e:	687b      	ldr	r3, [r7, #4]
      }
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fabb 	bl	8006f9e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fabb 	bl	8006fb8 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 faab 	bl	8006fce <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 faaa 	bl	8006fe6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8006a92:	4603      	mov	r3, r0
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8006aa8:	68b8      	ldr	r0, [r7, #8]
 8006aaa:	f7ff fd31 	bl	8006510 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006aae:	4604      	mov	r4, r0
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7fb f9a4 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4619      	mov	r1, r3
 8006aba:	2004      	movs	r0, #4
 8006abc:	f7fb f954 	bl	8001d68 <_ZnwjPv>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	601c      	str	r4, [r3, #0]
	  }
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd90      	pop	{r4, r7, pc}

08006acc <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fa92 	bl	8006ffe <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8006ada:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 fa9a 	bl	8007016 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8006ae2:	4603      	mov	r3, r0
	}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006aec:	b590      	push	{r4, r7, lr}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fa99 	bl	800702c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006afa:	4603      	mov	r3, r0
 8006afc:	4619      	mov	r1, r3
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 fa9f 	bl	8007042 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd90      	pop	{r4, r7, pc}

08006b12 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fb f96f 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 8006b20:	4603      	mov	r3, r0
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006b2c:	b590      	push	{r4, r7, lr}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d82a      	bhi.n	8006b96 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8006b40:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8006b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	08006b59 	.word	0x08006b59
 8006b4c:	08006b67 	.word	0x08006b67
 8006b50:	08006b7b 	.word	0x08006b7b
 8006b54:	08006b8d 	.word	0x08006b8d
	      __dest._M_access<const type_info*>() = nullptr;
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fa84 	bl	8007066 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
	      break;
 8006b64:	e017      	b.n	8006b96 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006b66:	68b8      	ldr	r0, [r7, #8]
 8006b68:	f7ff ffb0 	bl	8006acc <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff ffcf 	bl	8006b12 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8006b74:	4603      	mov	r3, r0
 8006b76:	601c      	str	r4, [r3, #0]
	      break;
 8006b78:	e00d      	b.n	8006b96 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8006b7a:	68b8      	ldr	r0, [r7, #8]
 8006b7c:	f7ff ffa6 	bl	8006acc <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006b80:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8006b82:	4619      	mov	r1, r3
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fa7a 	bl	800707e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8006b8a:	e004      	b.n	8006b96 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fa87 	bl	80070a2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006b94:	bf00      	nop
	  return false;
 8006b96:	2300      	movs	r3, #0
	}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd90      	pop	{r4, r7, pc}

08006ba0 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8006bac:	68b8      	ldr	r0, [r7, #8]
 8006bae:	f7ff fd0d 	bl	80065cc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7fb f922 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	2004      	movs	r0, #4
 8006bc0:	f7fb f8d2 	bl	8001d68 <_ZnwjPv>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	601c      	str	r4, [r3, #0]
	  }
 8006bc8:	bf00      	nop
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd90      	pop	{r4, r7, pc}

08006bd0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fa6e 	bl	80070ba <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8006bde:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fa76 	bl	80070d2 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8006be6:	4603      	mov	r3, r0
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fa75 	bl	80070e8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4619      	mov	r1, r3
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 fa7b 	bl	80070fe <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd90      	pop	{r4, r7, pc}

08006c10 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fb f8f0 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d82a      	bhi.n	8006c92 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c63 	.word	0x08006c63
 8006c4c:	08006c77 	.word	0x08006c77
 8006c50:	08006c89 	.word	0x08006c89
	      __dest._M_access<const type_info*>() = nullptr;
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fa06 	bl	8007066 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
	      break;
 8006c60:	e017      	b.n	8006c92 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006c62:	68b8      	ldr	r0, [r7, #8]
 8006c64:	f7ff ffb4 	bl	8006bd0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8006c68:	4604      	mov	r4, r0
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff ffd0 	bl	8006c10 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8006c70:	4603      	mov	r3, r0
 8006c72:	601c      	str	r4, [r3, #0]
	      break;
 8006c74:	e00d      	b.n	8006c92 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8006c76:	68b8      	ldr	r0, [r7, #8]
 8006c78:	f7ff ffaa 	bl	8006bd0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8006c7c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8006c7e:	4619      	mov	r1, r3
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fa4b 	bl	800711c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8006c86:	e004      	b.n	8006c92 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8006c88:	4621      	mov	r1, r4
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fa58 	bl	8007140 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006c90:	bf00      	nop
	  return false;
 8006c92:	2300      	movs	r3, #0
	}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd90      	pop	{r4, r7, pc}

08006c9c <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	807b      	strh	r3, [r7, #2]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fabb 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	787a      	ldrb	r2, [r7, #1]
 8006cc4:	8879      	ldrh	r1, [r7, #2]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	220c      	movs	r2, #12
 8006ccc:	f006 fa6e 	bl	800d1ac <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fa9d 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	787a      	ldrb	r2, [r7, #1]
 8006d00:	8879      	ldrh	r1, [r7, #2]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	4613      	mov	r3, r2
 8006d06:	220c      	movs	r2, #12
 8006d08:	f006 fa50 	bl	800d1ac <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fb f88a 	bl	8001e50 <_ZNKSt14_Function_base8_M_emptyEv>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8006d42:	f009 f813 	bl	800fd6c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
      }
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8006d60:	b5b0      	push	{r4, r5, r7, lr}
 8006d62:	b08e      	sub	sp, #56	; 0x38
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d68:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8006d70:	481a      	ldr	r0, [pc, #104]	; (8006ddc <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8006d72:	f7ff f8e5 	bl	8005f40 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	3310      	adds	r3, #16
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff fcf5 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8006d88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 f9f2 	bl	8007178 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8006d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4810      	ldr	r0, [pc, #64]	; (8006ddc <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8006d9c:	f000 fa1d 	bl	80071da <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8006da0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 f9f6 	bl	8007196 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 8006daa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8006dac:	463b      	mov	r3, r7
 8006dae:	4a0c      	ldr	r2, [pc, #48]	; (8006de0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8006db0:	490c      	ldr	r1, [pc, #48]	; (8006de4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 8006db2:	4618      	mov	r0, r3
 8006db4:	f008 fcc4 	bl	800f740 <canardInit>
 8006db8:	3420      	adds	r4, #32
 8006dba:	463d      	mov	r5, r7
 8006dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8006dd2:	bf00      	nop
 8006dd4:	3738      	adds	r7, #56	; 0x38
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200006b8 	.word	0x200006b8
 8006de0:	08001f45 	.word	0x08001f45
 8006de4:	08001f01 	.word	0x08001f01

08006de8 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fa13 	bl	8007220 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8006dfa:	683c      	ldr	r4, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f807 	bl	8006e10 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8006e02:	4603      	mov	r3, r0
 8006e04:	601c      	str	r4, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd90      	pop	{r4, r7, pc}

08006e10 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fa0d 	bl	800723a <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8006e20:	4603      	mov	r3, r0
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fa0d 	bl	8007254 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <_ZNKSt14default_deleteI5G4CANEclEPS0_>:
      operator()(_Tp* __ptr) const
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <_ZNKSt14default_deleteI5G4CANEclEPS0_+0x18>
 8006e6a:	2144      	movs	r1, #68	; 0x44
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f008 ff6a 	bl	800fd46 <_ZdlPvj>
      }
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8006e7a:	b590      	push	{r4, r7, lr}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8006e84:	687c      	ldr	r4, [r7, #4]
 8006e86:	463b      	mov	r3, r7
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fb16 	bl	80064ba <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 f9ea 	bl	800726e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
      }
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd90      	pop	{r4, r7, pc}

08006ea2 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f9fe 	bl	80072ae <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f9fb 	bl	80072f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
	{ }
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fb3f 	bl	80055ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 f9e2 	bl	8007324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
      }
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f9ef 	bl	8007364 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f000 f9c7 	bl	8007324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 f9fa 	bl	80073a2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9ef 	bl	80073ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9f0 	bl	80073d4 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fa ff04 	bl	8001e14 <_ZNKSt9_Any_data9_M_accessEv>
 800700c:	4603      	mov	r3, r0
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	7138      	strb	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800704c:	6838      	ldr	r0, [r7, #0]
 800704e:	f7ff ffed 	bl	800702c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007052:	4603      	mov	r3, r0
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4798      	blx	r3
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4610      	mov	r0, r2
 800705e:	4619      	mov	r1, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fa fec5 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 8007074:	4603      	mov	r3, r0
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800707e:	b590      	push	{r4, r7, lr}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007088:	6838      	ldr	r0, [r7, #0]
 800708a:	f000 f9af 	bl	80073ec <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800708e:	4603      	mov	r3, r0
 8007090:	4622      	mov	r2, r4
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f9b4 	bl	8007402 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd90      	pop	{r4, r7, pc}

080070a2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9c1 	bl	8007434 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fa fea6 	bl	8001e14 <_ZNKSt9_Any_data9_M_accessEv>
 80070c8:	4603      	mov	r3, r0
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	7138      	strb	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007108:	6838      	ldr	r0, [r7, #0]
 800710a:	f7ff ffed 	bl	80070e8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800710e:	4603      	mov	r3, r0
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4798      	blx	r3
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800711c:	b590      	push	{r4, r7, lr}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007126:	6838      	ldr	r0, [r7, #0]
 8007128:	f000 f990 	bl	800744c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800712c:	4603      	mov	r3, r0
 800712e:	4622      	mov	r2, r4
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f995 	bl	8007462 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bd90      	pop	{r4, r7, pc}

08007140 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f9a2 	bl	8007494 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f000 f99f 	bl	80074ac <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f7ff ffe6 	bl	8007158 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8007196:	b590      	push	{r4, r7, lr}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 f997 	bl	80074d4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80071a6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00c      	beq.n	80071ca <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f99c 	bl	80074ee <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80071b6:	4604      	mov	r4, r0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f9a5 	bl	8007508 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80071be:	4603      	mov	r3, r0
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 f9aa 	bl	800751e <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
      }
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd90      	pop	{r4, r7, pc}

080071da <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80071e4:	6838      	ldr	r0, [r7, #0]
 80071e6:	f000 f9bf 	bl	8007568 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80071ea:	4603      	mov	r3, r0
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9a6 	bl	8007540 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f000 f97a 	bl	80074ee <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80071fa:	4603      	mov	r3, r0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f9cd 	bl	800759c <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007202:	4602      	mov	r2, r0
 8007204:	f107 030c 	add.w	r3, r7, #12
 8007208:	4611      	mov	r1, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f9d1 	bl	80075b2 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f9b6 	bl	8007582 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8007216:	687b      	ldr	r3, [r7, #4]
	}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f9cd 	bl	80075ca <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f9d0 	bl	80075ea <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800724a:	4603      	mov	r3, r0
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f9cf 	bl	8007602 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007264:	4603      	mov	r3, r0
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800726e:	b590      	push	{r4, r7, lr}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff f904 	bl	8006486 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800727e:	4603      	mov	r3, r0
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8007284:	683c      	ldr	r4, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff f8fd 	bl	8006486 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800728c:	4603      	mov	r3, r0
 800728e:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fbf3 	bl	8006a82 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 800729c:	4603      	mov	r3, r0
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff f915 	bl	80064d0 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
      }
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}

080072ae <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fdaa 	bl	8006e10 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 80072bc:	4603      	mov	r3, r0
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fda4 	bl	8006e10 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
	return __p;
 80072ce:	68fb      	ldr	r3, [r7, #12]
      }
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fe7f 	bl	8005fe8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8007304:	2010      	movs	r0, #16
 8007306:	f008 fd20 	bl	800fd4a <_Znwj>
 800730a:	4603      	mov	r3, r0
 800730c:	461c      	mov	r4, r3
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	4620      	mov	r0, r4
 8007312:	f000 f983 	bl	800761c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	601c      	str	r4, [r3, #0]
	}
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bd90      	pop	{r4, r7, pc}

08007324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	601a      	str	r2, [r3, #0]
      }
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ffed 	bl	800734e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8007374:	4603      	mov	r3, r0
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800737a:	6838      	ldr	r0, [r7, #0]
 800737c:	f7ff ffe7 	bl	800734e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8007380:	4603      	mov	r3, r0
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8007388:	f107 030c 	add.w	r3, r7, #12
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff ffde 	bl	800734e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8007392:	4603      	mov	r3, r0
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	601a      	str	r2, [r3, #0]
    }
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f94c 	bl	8007648 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 80073b0:	4603      	mov	r3, r0
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f94c 	bl	8007662 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 80073ca:	4603      	mov	r3, r0
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f94b 	bl	8007678 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8007402:	b590      	push	{r4, r7, lr}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800740e:	68b8      	ldr	r0, [r7, #8]
 8007410:	f7ff ffec 	bl	80073ec <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007414:	4603      	mov	r3, r0
 8007416:	681c      	ldr	r4, [r3, #0]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7fa fcf0 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 800741e:	4603      	mov	r3, r0
 8007420:	4619      	mov	r1, r3
 8007422:	2004      	movs	r0, #4
 8007424:	f7fa fca0 	bl	8001d68 <_ZnwjPv>
 8007428:	4603      	mov	r3, r0
 800742a:	601c      	str	r4, [r3, #0]
	  }
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	bd90      	pop	{r4, r7, pc}

08007434 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7fa fcde 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 8007442:	4603      	mov	r3, r0
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8007462:	b590      	push	{r4, r7, lr}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800746e:	68b8      	ldr	r0, [r7, #8]
 8007470:	f7ff ffec 	bl	800744c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007474:	4603      	mov	r3, r0
 8007476:	681c      	ldr	r4, [r3, #0]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7fa fcc0 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 800747e:	4603      	mov	r3, r0
 8007480:	4619      	mov	r1, r3
 8007482:	2004      	movs	r0, #4
 8007484:	f7fa fc70 	bl	8001d68 <_ZnwjPv>
 8007488:	4603      	mov	r3, r0
 800748a:	601c      	str	r4, [r3, #0]
	  }
 800748c:	bf00      	nop
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	bd90      	pop	{r4, r7, pc}

08007494 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fa fcae 	bl	8001dfe <_ZNSt9_Any_data9_M_accessEv>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f8e9 	bl	8007690 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80074be:	683c      	ldr	r4, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f807 	bl	80074d4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80074c6:	4603      	mov	r3, r0
 80074c8:	601c      	str	r4, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd90      	pop	{r4, r7, pc}

080074d4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f8e3 	bl	80076aa <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80074e4:	4603      	mov	r3, r0
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f8e3 	bl	80076c4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 80074fe:	4603      	mov	r3, r0
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	320c      	adds	r2, #12
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	4790      	blx	r2
      }
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 8007540:	b590      	push	{r4, r7, lr}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 800754a:	687c      	ldr	r4, [r7, #4]
 800754c:	463b      	mov	r3, r7
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f8c5 	bl	80076de <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8007554:	4603      	mov	r3, r0
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4619      	mov	r1, r3
 800755a:	4620      	mov	r0, r4
 800755c:	f000 f8ca 	bl	80076f4 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bd90      	pop	{r4, r7, pc}

08007568 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f8de 	bl	8007734 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8007578:	4603      	mov	r3, r0
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f8e6 	bl	800775e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007592:	4603      	mov	r3, r0
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8d0 	bl	8007778 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f8d8 	bl	8007790 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f8da 	bl	80077ac <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>
 80075f8:	4603      	mov	r3, r0
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f8db 	bl	80077c6 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007610:	4603      	mov	r3, r0
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 f8d9 	bl	80077e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800762e:	4a05      	ldr	r2, [pc, #20]	; (8007644 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	08015014 	.word	0x08015014

08007648 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 f8da 	bl	800780c <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8007658:	4603      	mov	r3, r0
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f8ce 	bl	8007822 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8007686:	4603      	mov	r3, r0
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 f8cc 	bl	8007838 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 f8cf 	bl	8007858 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f8ce 	bl	8007870 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80076d4:	4603      	mov	r3, r0
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8c2 	bl	8007888 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007704:	4603      	mov	r3, r0
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800770a:	683c      	ldr	r4, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f8bb 	bl	8007888 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007712:	4603      	mov	r3, r0
 8007714:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f81e 	bl	800775e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007722:	4603      	mov	r3, r0
 8007724:	68f9      	ldr	r1, [r7, #12]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f8bb 	bl	80078a2 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 800772c:	bf00      	nop
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	bd90      	pop	{r4, r7, pc}

08007734 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fec9 	bl	80074d4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007742:	4603      	mov	r3, r0
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fec3 	bl	80074d4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800774e:	4603      	mov	r3, r0
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
	return __p;
 8007754:	68fb      	ldr	r3, [r7, #12]
      }
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 f8ab 	bl	80078c4 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800776e:	4603      	mov	r3, r0
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>:
      _Tuple_impl()
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f8ab 	bl	80078dc <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>:
      constexpr _Head_base()
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f89b 	bl	80078f2 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>
 80077bc:	4603      	mov	r3, r0
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f89a 	bl	8007908 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>
 80077d4:	4603      	mov	r3, r0
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80077e8:	4a07      	ldr	r2, [pc, #28]	; (8007808 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	609a      	str	r2, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	080150d0 	.word	0x080150d0

0800780c <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f86d 	bl	8007920 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f875 	bl	8007938 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f877 	bl	8007954 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8007866:	4603      	mov	r3, r0
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f878 	bl	800796e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800787e:	4603      	mov	r3, r0
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f877 	bl	8007986 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007898:	4603      	mov	r3, r0
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	320c      	adds	r2, #12
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	4790      	blx	r2
      }
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f867 	bl	80079a0 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80078d2:	4603      	mov	r3, r0
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>:
      constexpr _Head_base()
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f851 	bl	80079b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>
 8007916:	4603      	mov	r3, r0
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f850 	bl	80079ce <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 f840 	bl	80079e4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8007964:	4603      	mov	r3, r0
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f83f 	bl	80079fa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 800797c:	4603      	mov	r3, r0
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f83e 	bl	8007a12 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007996:	4603      	mov	r3, r0
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f83e 	bl	8007a2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 80079ae:	4603      	mov	r3, r0
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f81d 	bl	8007a42 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f81c 	bl	8007a58 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f81d 	bl	8007a72 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 f810 	bl	8007a88 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fc8b 	bl	80063cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	08015014 	.word	0x08015014

08007ac4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff ffe7 	bl	8007aa0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007ad2:	2110      	movs	r1, #16
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f008 f936 	bl	800fd46 <_ZdlPvj>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3310      	adds	r3, #16
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fa f9cb 	bl	8001e8c <_ZNSt8functionIFvvEED1Ev>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fa f9ba 	bl	8001e72 <_ZNSt8functionIFyvEED1Ev>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <_Z41__static_initialization_and_destruction_0ii>:

}
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d122      	bne.n	8007b5e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d11d      	bne.n	8007b5e <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	4917      	ldr	r1, [pc, #92]	; (8007b84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fa91 	bl	8006050 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8007b2e:	f107 0318 	add.w	r3, r7, #24
 8007b32:	4915      	ldr	r1, [pc, #84]	; (8007b88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fabb 	bl	80060b0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8007b3a:	f107 0218 	add.w	r2, r7, #24
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	4619      	mov	r1, r3
 8007b44:	4811      	ldr	r0, [pc, #68]	; (8007b8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007b46:	f7fa f9ae 	bl	8001ea6 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8007b4a:	f107 0318 	add.w	r3, r7, #24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fa f99c 	bl	8001e8c <_ZNSt8functionIFvvEED1Ev>
 8007b54:	f107 0308 	add.w	r3, r7, #8
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fa f98a 	bl	8001e72 <_ZNSt8functionIFyvEED1Ev>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d105      	bne.n	8007b7a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8007b6e:	4807      	ldr	r0, [pc, #28]	; (8007b8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007b70:	f7ff ffb8 	bl	8007ae4 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8007b74:	4806      	ldr	r0, [pc, #24]	; (8007b90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007b76:	f7fd fd75 	bl	8005664 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8007b7a:	bf00      	nop
 8007b7c:	3728      	adds	r7, #40	; 0x28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	080055f7 	.word	0x080055f7
 8007b88:	080055eb 	.word	0x080055eb
 8007b8c:	20000450 	.word	0x20000450
 8007b90:	20000448 	.word	0x20000448

08007b94 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8007b94:	b590      	push	{r4, r7, lr}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68dc      	ldr	r4, [r3, #12]
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	d006      	beq.n	8007bb2 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7ff fb97 	bl	80072d8 <_ZN15CyphalInterfaceD1Ev>
 8007baa:	210c      	movs	r1, #12
 8007bac:	4620      	mov	r0, r4
 8007bae:	f008 f8ca 	bl	800fd46 <_ZdlPvj>
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd90      	pop	{r4, r7, pc}

08007bba <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
      { delete this; }
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff ff7b 	bl	8007ac4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8007be0:	2300      	movs	r3, #0
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:

    void accept(CanardRxTransfer* transfer) {
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8007bfa:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8007bfe:	6018      	str	r0, [r3, #0]
 8007c00:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8007c04:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8007c08:	6019      	str	r1, [r3, #0]
        Type object;
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8007c0a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8007c0e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fb0b 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007c1e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8007c22:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8007c26:	f107 0108 	add.w	r1, r7, #8
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	f000 f856 	bl	8007cdc <_ZNK15CyphalInterface27cyphal_deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8007c30:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8007c34:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8007c44:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8007c50:	f5a0 7047 	sub.w	r0, r0, #796	; 0x31c
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	6800      	ldr	r0, [r0, #0]
 8007c58:	4798      	blx	r3
    }
 8007c5a:	bf00      	nop
 8007c5c:	f507 7748 	add.w	r7, r7, #800	; 0x320
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fe fadd 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007c7a:	f107 030c 	add.w	r3, r7, #12
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	4619      	mov	r1, r3
 8007c82:	f000 f84c 	bl	8007d1e <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f107 010c 	add.w	r1, r7, #12
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
    }
 8007c98:	bf00      	nop
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fabf 	bl	8006234 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007cb6:	f107 0308 	add.w	r3, r7, #8
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f000 f84e 	bl	8007d5e <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f107 0108 	add.w	r1, r7, #8
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
    }
 8007cd4:	bf00      	nop
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <_ZNK15CyphalInterface27cyphal_deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:

template <typename TypeAlias>
inline void CyphalInterface::cyphal_deserialize_transfer(
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8007ce8:	f240 2303 	movw	r3, #515	; 0x203
 8007cec:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	f107 0214 	add.w	r2, r7, #20
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68b8      	ldr	r0, [r7, #8]
 8007cfa:	f7fd fad1 	bl	80052a0 <uavcan_register_Access_Request_1_0_deserialize_>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	09db      	lsrs	r3, r3, #7
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <_ZNK15CyphalInterface27cyphal_deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	3310      	adds	r3, #16
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fd2e 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8007d16:	bf00      	nop
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::cyphal_deserialize_transfer(
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8007d2a:	230c      	movs	r3, #12
 8007d2c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f107 0214 	add.w	r2, r7, #20
 8007d36:	4619      	mov	r1, r3
 8007d38:	68b8      	ldr	r0, [r7, #8]
 8007d3a:	f7fa ffa7 	bl	8002c8c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	09db      	lsrs	r3, r3, #7
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	3310      	adds	r3, #16
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fd0e 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
}
 8007d56:	bf00      	nop
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::cyphal_deserialize_transfer(
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f107 0214 	add.w	r2, r7, #20
 8007d76:	4619      	mov	r1, r3
 8007d78:	68b8      	ldr	r0, [r7, #8]
 8007d7a:	f7fa fe15 	bl	80029a8 <uavcan_node_Heartbeat_1_0_deserialize_>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	09db      	lsrs	r3, r3, #7
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	3310      	adds	r3, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe fcee 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
}
 8007d96:	bf00      	nop
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <_GLOBAL__sub_I_buffer>:
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007da6:	2001      	movs	r0, #1
 8007da8:	f7ff feae 	bl	8007b08 <_Z41__static_initialization_and_destruction_0ii>
 8007dac:	bd80      	pop	{r7, pc}

08007dae <_GLOBAL__sub_D_buffer>:
 8007dae:	b580      	push	{r7, lr}
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007db6:	2000      	movs	r0, #0
 8007db8:	f7ff fea6 	bl	8007b08 <_Z41__static_initialization_and_destruction_0ii>
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dc6:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <HAL_MspInit+0x44>)
 8007dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dca:	4a0e      	ldr	r2, [pc, #56]	; (8007e04 <HAL_MspInit+0x44>)
 8007dcc:	f043 0301 	orr.w	r3, r3, #1
 8007dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8007dd2:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <HAL_MspInit+0x44>)
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	607b      	str	r3, [r7, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <HAL_MspInit+0x44>)
 8007de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de2:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <HAL_MspInit+0x44>)
 8007de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de8:	6593      	str	r3, [r2, #88]	; 0x58
 8007dea:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <HAL_MspInit+0x44>)
 8007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007df6:	f002 ff99 	bl	800ad2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40021000 	.word	0x40021000

08007e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007e0c:	e7fe      	b.n	8007e0c <NMI_Handler+0x4>

08007e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e12:	e7fe      	b.n	8007e12 <HardFault_Handler+0x4>

08007e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e18:	e7fe      	b.n	8007e18 <MemManage_Handler+0x4>

08007e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e1e:	e7fe      	b.n	8007e1e <BusFault_Handler+0x4>

08007e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e24:	e7fe      	b.n	8007e24 <UsageFault_Handler+0x4>

08007e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e26:	b480      	push	{r7}
 8007e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e2a:	bf00      	nop
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e38:	bf00      	nop
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e42:	b480      	push	{r7}
 8007e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e46:	bf00      	nop
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e54:	f000 fa34 	bl	80082c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e58:	bf00      	nop
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8007e60:	4802      	ldr	r0, [pc, #8]	; (8007e6c <DMA1_Channel1_IRQHandler+0x10>)
 8007e62:	f000 fcc3 	bl	80087ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007e66:	bf00      	nop
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000330 	.word	0x20000330

08007e70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8007e74:	4802      	ldr	r0, [pc, #8]	; (8007e80 <DMA1_Channel2_IRQHandler+0x10>)
 8007e76:	f000 fcb9 	bl	80087ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007e7a:	bf00      	nop
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000390 	.word	0x20000390

08007e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007e88:	4802      	ldr	r0, [pc, #8]	; (8007e94 <USART2_IRQHandler+0x10>)
 8007e8a:	f003 ff2b 	bl	800bce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007e8e:	bf00      	nop
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	200005e0 	.word	0x200005e0

08007e98 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8007e9c:	4802      	ldr	r0, [pc, #8]	; (8007ea8 <I2C4_EV_IRQHandler+0x10>)
 8007e9e:	f001 fdb5 	bl	8009a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8007ea2:	bf00      	nop
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200002dc 	.word	0x200002dc

08007eac <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8007eb0:	4802      	ldr	r0, [pc, #8]	; (8007ebc <I2C4_ER_IRQHandler+0x10>)
 8007eb2:	f001 fdc5 	bl	8009a40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8007eb6:	bf00      	nop
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200002dc 	.word	0x200002dc

08007ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  return 1;
 8007ec4:	2301      	movs	r3, #1
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <_kill>:

int _kill(int pid, int sig)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007eda:	f009 f8d9 	bl	8011090 <__errno>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2216      	movs	r2, #22
 8007ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8007ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <_exit>:

void _exit (int status)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff ffe7 	bl	8007ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007f02:	e7fe      	b.n	8007f02 <_exit+0x12>

08007f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	e00a      	b.n	8007f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007f16:	f3af 8000 	nop.w
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	60ba      	str	r2, [r7, #8]
 8007f22:	b2ca      	uxtb	r2, r1
 8007f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	dbf0      	blt.n	8007f16 <_read+0x12>
  }

  return len;
 8007f34:	687b      	ldr	r3, [r7, #4]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b086      	sub	sp, #24
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e009      	b.n	8007f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	60ba      	str	r2, [r7, #8]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	3301      	adds	r3, #1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	dbf1      	blt.n	8007f50 <_write+0x12>
  }
  return len;
 8007f6c:	687b      	ldr	r3, [r7, #4]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <_close>:

int _close(int file)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <_isatty>:

int _isatty(int file)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007fb6:	2301      	movs	r3, #1
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fe8:	4a14      	ldr	r2, [pc, #80]	; (800803c <_sbrk+0x5c>)
 8007fea:	4b15      	ldr	r3, [pc, #84]	; (8008040 <_sbrk+0x60>)
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ff4:	4b13      	ldr	r3, [pc, #76]	; (8008044 <_sbrk+0x64>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ffc:	4b11      	ldr	r3, [pc, #68]	; (8008044 <_sbrk+0x64>)
 8007ffe:	4a12      	ldr	r2, [pc, #72]	; (8008048 <_sbrk+0x68>)
 8008000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008002:	4b10      	ldr	r3, [pc, #64]	; (8008044 <_sbrk+0x64>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	429a      	cmp	r2, r3
 800800e:	d207      	bcs.n	8008020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008010:	f009 f83e 	bl	8011090 <__errno>
 8008014:	4603      	mov	r3, r0
 8008016:	220c      	movs	r2, #12
 8008018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	e009      	b.n	8008034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008020:	4b08      	ldr	r3, [pc, #32]	; (8008044 <_sbrk+0x64>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008026:	4b07      	ldr	r3, [pc, #28]	; (8008044 <_sbrk+0x64>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	4a05      	ldr	r2, [pc, #20]	; (8008044 <_sbrk+0x64>)
 8008030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008032:	68fb      	ldr	r3, [r7, #12]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20020000 	.word	0x20020000
 8008040:	00000400 	.word	0x00000400
 8008044:	200005dc 	.word	0x200005dc
 8008048:	20000810 	.word	0x20000810

0800804c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008050:	4b06      	ldr	r3, [pc, #24]	; (800806c <SystemInit+0x20>)
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008056:	4a05      	ldr	r2, [pc, #20]	; (800806c <SystemInit+0x20>)
 8008058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800805c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008060:	bf00      	nop
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	e000ed00 	.word	0xe000ed00

08008070 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008074:	4b22      	ldr	r3, [pc, #136]	; (8008100 <MX_USART2_UART_Init+0x90>)
 8008076:	4a23      	ldr	r2, [pc, #140]	; (8008104 <MX_USART2_UART_Init+0x94>)
 8008078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800807a:	4b21      	ldr	r3, [pc, #132]	; (8008100 <MX_USART2_UART_Init+0x90>)
 800807c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008082:	4b1f      	ldr	r3, [pc, #124]	; (8008100 <MX_USART2_UART_Init+0x90>)
 8008084:	2200      	movs	r2, #0
 8008086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <MX_USART2_UART_Init+0x90>)
 800808a:	2200      	movs	r2, #0
 800808c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800808e:	4b1c      	ldr	r3, [pc, #112]	; (8008100 <MX_USART2_UART_Init+0x90>)
 8008090:	2200      	movs	r2, #0
 8008092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008094:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <MX_USART2_UART_Init+0x90>)
 8008096:	220c      	movs	r2, #12
 8008098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800809a:	4b19      	ldr	r3, [pc, #100]	; (8008100 <MX_USART2_UART_Init+0x90>)
 800809c:	2200      	movs	r2, #0
 800809e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80080a0:	4b17      	ldr	r3, [pc, #92]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80080a6:	4b16      	ldr	r3, [pc, #88]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80080ac:	4b14      	ldr	r3, [pc, #80]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80080b2:	4b13      	ldr	r3, [pc, #76]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80080b8:	4811      	ldr	r0, [pc, #68]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080ba:	f003 fdc3 	bl	800bc44 <HAL_UART_Init>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80080c4:	f7f9 fe4b 	bl	8001d5e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80080c8:	2100      	movs	r1, #0
 80080ca:	480d      	ldr	r0, [pc, #52]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080cc:	f004 ff01 	bl	800ced2 <HAL_UARTEx_SetTxFifoThreshold>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80080d6:	f7f9 fe42 	bl	8001d5e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80080da:	2100      	movs	r1, #0
 80080dc:	4808      	ldr	r0, [pc, #32]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080de:	f004 ff36 	bl	800cf4e <HAL_UARTEx_SetRxFifoThreshold>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80080e8:	f7f9 fe39 	bl	8001d5e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80080ec:	4804      	ldr	r0, [pc, #16]	; (8008100 <MX_USART2_UART_Init+0x90>)
 80080ee:	f004 feb7 	bl	800ce60 <HAL_UARTEx_DisableFifoMode>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80080f8:	f7f9 fe31 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80080fc:	bf00      	nop
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	200005e0 	.word	0x200005e0
 8008104:	40004400 	.word	0x40004400

08008108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b09e      	sub	sp, #120	; 0x78
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008110:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	605a      	str	r2, [r3, #4]
 800811a:	609a      	str	r2, [r3, #8]
 800811c:	60da      	str	r2, [r3, #12]
 800811e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008120:	f107 0310 	add.w	r3, r7, #16
 8008124:	2254      	movs	r2, #84	; 0x54
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f008 fef8 	bl	8010f1e <memset>
  if(uartHandle->Instance==USART2)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a23      	ldr	r2, [pc, #140]	; (80081c0 <HAL_UART_MspInit+0xb8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d13e      	bne.n	80081b6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008138:	2302      	movs	r3, #2
 800813a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800813c:	2300      	movs	r3, #0
 800813e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008140:	f107 0310 	add.w	r3, r7, #16
 8008144:	4618      	mov	r0, r3
 8008146:	f003 fb2f 	bl	800b7a8 <HAL_RCCEx_PeriphCLKConfig>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008150:	f7f9 fe05 	bl	8001d5e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008154:	4b1b      	ldr	r3, [pc, #108]	; (80081c4 <HAL_UART_MspInit+0xbc>)
 8008156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008158:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <HAL_UART_MspInit+0xbc>)
 800815a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800815e:	6593      	str	r3, [r2, #88]	; 0x58
 8008160:	4b18      	ldr	r3, [pc, #96]	; (80081c4 <HAL_UART_MspInit+0xbc>)
 8008162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800816c:	4b15      	ldr	r3, [pc, #84]	; (80081c4 <HAL_UART_MspInit+0xbc>)
 800816e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008170:	4a14      	ldr	r2, [pc, #80]	; (80081c4 <HAL_UART_MspInit+0xbc>)
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008178:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <HAL_UART_MspInit+0xbc>)
 800817a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	60bb      	str	r3, [r7, #8]
 8008182:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008184:	230c      	movs	r3, #12
 8008186:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008188:	2302      	movs	r3, #2
 800818a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818c:	2300      	movs	r3, #0
 800818e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008190:	2300      	movs	r3, #0
 8008192:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008194:	2307      	movs	r3, #7
 8008196:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008198:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800819c:	4619      	mov	r1, r3
 800819e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081a2:	f001 f8c9 	bl	8009338 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	2026      	movs	r0, #38	; 0x26
 80081ac:	f000 f981 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80081b0:	2026      	movs	r0, #38	; 0x26
 80081b2:	f000 f998 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80081b6:	bf00      	nop
 80081b8:	3778      	adds	r7, #120	; 0x78
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	40004400 	.word	0x40004400
 80081c4:	40021000 	.word	0x40021000

080081c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80081c8:	480d      	ldr	r0, [pc, #52]	; (8008200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80081ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80081cc:	f7ff ff3e 	bl	800804c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80081d0:	480c      	ldr	r0, [pc, #48]	; (8008204 <LoopForever+0x6>)
  ldr r1, =_edata
 80081d2:	490d      	ldr	r1, [pc, #52]	; (8008208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80081d4:	4a0d      	ldr	r2, [pc, #52]	; (800820c <LoopForever+0xe>)
  movs r3, #0
 80081d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80081d8:	e002      	b.n	80081e0 <LoopCopyDataInit>

080081da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80081da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80081dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80081de:	3304      	adds	r3, #4

080081e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80081e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80081e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80081e4:	d3f9      	bcc.n	80081da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80081e6:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80081e8:	4c0a      	ldr	r4, [pc, #40]	; (8008214 <LoopForever+0x16>)
  movs r3, #0
 80081ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80081ec:	e001      	b.n	80081f2 <LoopFillZerobss>

080081ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80081ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80081f0:	3204      	adds	r2, #4

080081f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80081f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80081f4:	d3fb      	bcc.n	80081ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80081f6:	f008 ff51 	bl	801109c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80081fa:	f7f9 fd23 	bl	8001c44 <main>

080081fe <LoopForever>:

LoopForever:
    b LoopForever
 80081fe:	e7fe      	b.n	80081fe <LoopForever>
  ldr   r0, =_estack
 8008200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008208:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800820c:	08015b6c 	.word	0x08015b6c
  ldr r2, =_sbss
 8008210:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8008214:	2000080c 	.word	0x2000080c

08008218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008218:	e7fe      	b.n	8008218 <ADC1_2_IRQHandler>

0800821a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008224:	2003      	movs	r0, #3
 8008226:	f000 f939 	bl	800849c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800822a:	200f      	movs	r0, #15
 800822c:	f000 f80e 	bl	800824c <HAL_InitTick>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	71fb      	strb	r3, [r7, #7]
 800823a:	e001      	b.n	8008240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800823c:	f7ff fdc0 	bl	8007dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008240:	79fb      	ldrb	r3, [r7, #7]

}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <HAL_InitTick+0x68>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d022      	beq.n	80082a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008260:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <HAL_InitTick+0x6c>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <HAL_InitTick+0x68>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800826c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	4618      	mov	r0, r3
 8008276:	f000 f944 	bl	8008502 <HAL_SYSTICK_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10f      	bne.n	80082a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b0f      	cmp	r3, #15
 8008284:	d809      	bhi.n	800829a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008286:	2200      	movs	r2, #0
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	f000 f910 	bl	80084b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008292:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <HAL_InitTick+0x70>)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	e007      	b.n	80082aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	73fb      	strb	r3, [r7, #15]
 800829e:	e004      	b.n	80082aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
 80082a4:	e001      	b.n	80082aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000044 	.word	0x20000044
 80082b8:	2000003c 	.word	0x2000003c
 80082bc:	20000040 	.word	0x20000040

080082c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <HAL_IncTick+0x1c>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <HAL_IncTick+0x20>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4413      	add	r3, r2
 80082ce:	4a03      	ldr	r2, [pc, #12]	; (80082dc <HAL_IncTick+0x1c>)
 80082d0:	6013      	str	r3, [r2, #0]
}
 80082d2:	bf00      	nop
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	20000674 	.word	0x20000674
 80082e0:	20000044 	.word	0x20000044

080082e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return uwTick;
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <HAL_GetTick+0x14>)
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000674 	.word	0x20000674

080082fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800830c:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <__NVIC_SetPriorityGrouping+0x44>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008318:	4013      	ands	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800832e:	4a04      	ldr	r2, [pc, #16]	; (8008340 <__NVIC_SetPriorityGrouping+0x44>)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	60d3      	str	r3, [r2, #12]
}
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	e000ed00 	.word	0xe000ed00

08008344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <__NVIC_GetPriorityGrouping+0x18>)
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	f003 0307 	and.w	r3, r3, #7
}
 8008352:	4618      	mov	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	e000ed00 	.word	0xe000ed00

08008360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800836a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800836e:	2b00      	cmp	r3, #0
 8008370:	db0b      	blt.n	800838a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	f003 021f 	and.w	r2, r3, #31
 8008378:	4907      	ldr	r1, [pc, #28]	; (8008398 <__NVIC_EnableIRQ+0x38>)
 800837a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	2001      	movs	r0, #1
 8008382:	fa00 f202 	lsl.w	r2, r0, r2
 8008386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	e000e100 	.word	0xe000e100

0800839c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	db0a      	blt.n	80083c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	490c      	ldr	r1, [pc, #48]	; (80083e8 <__NVIC_SetPriority+0x4c>)
 80083b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ba:	0112      	lsls	r2, r2, #4
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	440b      	add	r3, r1
 80083c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80083c4:	e00a      	b.n	80083dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	4908      	ldr	r1, [pc, #32]	; (80083ec <__NVIC_SetPriority+0x50>)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	3b04      	subs	r3, #4
 80083d4:	0112      	lsls	r2, r2, #4
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	440b      	add	r3, r1
 80083da:	761a      	strb	r2, [r3, #24]
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	e000e100 	.word	0xe000e100
 80083ec:	e000ed00 	.word	0xe000ed00

080083f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b089      	sub	sp, #36	; 0x24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f1c3 0307 	rsb	r3, r3, #7
 800840a:	2b04      	cmp	r3, #4
 800840c:	bf28      	it	cs
 800840e:	2304      	movcs	r3, #4
 8008410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	3304      	adds	r3, #4
 8008416:	2b06      	cmp	r3, #6
 8008418:	d902      	bls.n	8008420 <NVIC_EncodePriority+0x30>
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3b03      	subs	r3, #3
 800841e:	e000      	b.n	8008422 <NVIC_EncodePriority+0x32>
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008424:	f04f 32ff 	mov.w	r2, #4294967295
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	43da      	mvns	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	401a      	ands	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008438:	f04f 31ff 	mov.w	r1, #4294967295
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	fa01 f303 	lsl.w	r3, r1, r3
 8008442:	43d9      	mvns	r1, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008448:	4313      	orrs	r3, r2
         );
}
 800844a:	4618      	mov	r0, r3
 800844c:	3724      	adds	r7, #36	; 0x24
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3b01      	subs	r3, #1
 8008464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008468:	d301      	bcc.n	800846e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800846a:	2301      	movs	r3, #1
 800846c:	e00f      	b.n	800848e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800846e:	4a0a      	ldr	r2, [pc, #40]	; (8008498 <SysTick_Config+0x40>)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3b01      	subs	r3, #1
 8008474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008476:	210f      	movs	r1, #15
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	f7ff ff8e 	bl	800839c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <SysTick_Config+0x40>)
 8008482:	2200      	movs	r2, #0
 8008484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008486:	4b04      	ldr	r3, [pc, #16]	; (8008498 <SysTick_Config+0x40>)
 8008488:	2207      	movs	r2, #7
 800848a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	e000e010 	.word	0xe000e010

0800849c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff ff29 	bl	80082fc <__NVIC_SetPriorityGrouping>
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	4603      	mov	r3, r0
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80084c0:	f7ff ff40 	bl	8008344 <__NVIC_GetPriorityGrouping>
 80084c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f7ff ff90 	bl	80083f0 <NVIC_EncodePriority>
 80084d0:	4602      	mov	r2, r0
 80084d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff ff5f 	bl	800839c <__NVIC_SetPriority>
}
 80084de:	bf00      	nop
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	4603      	mov	r3, r0
 80084ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff ff33 	bl	8008360 <__NVIC_EnableIRQ>
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff ffa4 	bl	8008458 <SysTick_Config>
 8008510:	4603      	mov	r3, r0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e08d      	b.n	800864a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	4b47      	ldr	r3, [pc, #284]	; (8008654 <HAL_DMA_Init+0x138>)
 8008536:	429a      	cmp	r2, r3
 8008538:	d80f      	bhi.n	800855a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	4b45      	ldr	r3, [pc, #276]	; (8008658 <HAL_DMA_Init+0x13c>)
 8008542:	4413      	add	r3, r2
 8008544:	4a45      	ldr	r2, [pc, #276]	; (800865c <HAL_DMA_Init+0x140>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	091b      	lsrs	r3, r3, #4
 800854c:	009a      	lsls	r2, r3, #2
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a42      	ldr	r2, [pc, #264]	; (8008660 <HAL_DMA_Init+0x144>)
 8008556:	641a      	str	r2, [r3, #64]	; 0x40
 8008558:	e00e      	b.n	8008578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	4b40      	ldr	r3, [pc, #256]	; (8008664 <HAL_DMA_Init+0x148>)
 8008562:	4413      	add	r3, r2
 8008564:	4a3d      	ldr	r2, [pc, #244]	; (800865c <HAL_DMA_Init+0x140>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	009a      	lsls	r2, r3, #2
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a3c      	ldr	r2, [pc, #240]	; (8008668 <HAL_DMA_Init+0x14c>)
 8008576:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800858e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800859c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f9cc 	bl	8008968 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d8:	d102      	bne.n	80085e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d010      	beq.n	8008620 <HAL_DMA_Init+0x104>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2b04      	cmp	r3, #4
 8008604:	d80c      	bhi.n	8008620 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9ec 	bl	80089e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	e008      	b.n	8008632 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40020407 	.word	0x40020407
 8008658:	bffdfff8 	.word	0xbffdfff8
 800865c:	cccccccd 	.word	0xcccccccd
 8008660:	40020000 	.word	0x40020000
 8008664:	bffdfbf8 	.word	0xbffdfbf8
 8008668:	40020400 	.word	0x40020400

0800866c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d005      	beq.n	8008690 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2204      	movs	r2, #4
 8008688:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	e037      	b.n	8008700 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 020e 	bic.w	r2, r2, #14
 800869e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086ae:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c4:	f003 021f 	and.w	r2, r3, #31
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	2101      	movs	r1, #1
 80086ce:	fa01 f202 	lsl.w	r2, r1, r2
 80086d2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80086dc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086f4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80086fe:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d00d      	beq.n	8008752 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2204      	movs	r2, #4
 800873a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
 8008750:	e047      	b.n	80087e2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 020e 	bic.w	r2, r2, #14
 8008760:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 0201 	bic.w	r2, r2, #1
 8008770:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800877c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008786:	f003 021f 	and.w	r2, r3, #31
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	2101      	movs	r1, #1
 8008790:	fa01 f202 	lsl.w	r2, r1, r2
 8008794:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800879e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00c      	beq.n	80087c2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80087c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
    }
  }
  return status;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008808:	f003 031f 	and.w	r3, r3, #31
 800880c:	2204      	movs	r2, #4
 800880e:	409a      	lsls	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4013      	ands	r3, r2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d026      	beq.n	8008866 <HAL_DMA_IRQHandler+0x7a>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 0304 	and.w	r3, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d021      	beq.n	8008866 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d107      	bne.n	8008840 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0204 	bic.w	r2, r2, #4
 800883e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008844:	f003 021f 	and.w	r2, r3, #31
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	2104      	movs	r1, #4
 800884e:	fa01 f202 	lsl.w	r2, r1, r2
 8008852:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	2b00      	cmp	r3, #0
 800885a:	d071      	beq.n	8008940 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008864:	e06c      	b.n	8008940 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	2202      	movs	r2, #2
 8008870:	409a      	lsls	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4013      	ands	r3, r2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d02e      	beq.n	80088d8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d029      	beq.n	80088d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 020a 	bic.w	r2, r2, #10
 80088a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	f003 021f 	and.w	r2, r3, #31
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	2102      	movs	r1, #2
 80088b8:	fa01 f202 	lsl.w	r2, r1, r2
 80088bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d038      	beq.n	8008940 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80088d6:	e033      	b.n	8008940 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2208      	movs	r2, #8
 80088e2:	409a      	lsls	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d02a      	beq.n	8008942 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f003 0308 	and.w	r3, r3, #8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d025      	beq.n	8008942 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 020e 	bic.w	r2, r2, #14
 8008904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890a:	f003 021f 	and.w	r2, r3, #31
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	2101      	movs	r1, #1
 8008914:	fa01 f202 	lsl.w	r2, r1, r2
 8008918:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008940:	bf00      	nop
 8008942:	bf00      	nop
}
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008958:	b2db      	uxtb	r3, r3
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	4b16      	ldr	r3, [pc, #88]	; (80089d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008978:	429a      	cmp	r2, r3
 800897a:	d802      	bhi.n	8008982 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800897c:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e001      	b.n	8008986 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008984:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	3b08      	subs	r3, #8
 8008992:	4a12      	ldr	r2, [pc, #72]	; (80089dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008994:	fba2 2303 	umull	r2, r3, r2, r3
 8008998:	091b      	lsrs	r3, r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a0:	089b      	lsrs	r3, r3, #2
 80089a2:	009a      	lsls	r2, r3, #2
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	4413      	add	r3, r2
 80089a8:	461a      	mov	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a0b      	ldr	r2, [pc, #44]	; (80089e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80089b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2201      	movs	r2, #1
 80089bc:	409a      	lsls	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	40020407 	.word	0x40020407
 80089d4:	40020800 	.word	0x40020800
 80089d8:	40020820 	.word	0x40020820
 80089dc:	cccccccd 	.word	0xcccccccd
 80089e0:	40020880 	.word	0x40020880

080089e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	461a      	mov	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008a06:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	f003 031f 	and.w	r3, r3, #31
 8008a10:	2201      	movs	r2, #1
 8008a12:	409a      	lsls	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008a18:	bf00      	nop
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	1000823f 	.word	0x1000823f
 8008a28:	40020940 	.word	0x40020940

08008a2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e147      	b.n	8008cce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d106      	bne.n	8008a58 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7f8 ff00 	bl	8001858 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0210 	bic.w	r2, r2, #16
 8008a66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a68:	f7ff fc3c 	bl	80082e4 <HAL_GetTick>
 8008a6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008a6e:	e012      	b.n	8008a96 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008a70:	f7ff fc38 	bl	80082e4 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b0a      	cmp	r3, #10
 8008a7c:	d90b      	bls.n	8008a96 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a82:	f043 0201 	orr.w	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e11b      	b.n	8008cce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d0e5      	beq.n	8008a70 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ab4:	f7ff fc16 	bl	80082e4 <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008aba:	e012      	b.n	8008ae2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008abc:	f7ff fc12 	bl	80082e4 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b0a      	cmp	r3, #10
 8008ac8:	d90b      	bls.n	8008ae2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ace:	f043 0201 	orr.w	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e0f5      	b.n	8008cce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0e5      	beq.n	8008abc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0202 	orr.w	r2, r2, #2
 8008afe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a74      	ldr	r2, [pc, #464]	; (8008cd8 <HAL_FDCAN_Init+0x2ac>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d103      	bne.n	8008b12 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008b0a:	4a74      	ldr	r2, [pc, #464]	; (8008cdc <HAL_FDCAN_Init+0x2b0>)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7c1b      	ldrb	r3, [r3, #16]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d108      	bne.n	8008b2c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699a      	ldr	r2, [r3, #24]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b28:	619a      	str	r2, [r3, #24]
 8008b2a:	e007      	b.n	8008b3c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699a      	ldr	r2, [r3, #24]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7c5b      	ldrb	r3, [r3, #17]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d108      	bne.n	8008b56 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699a      	ldr	r2, [r3, #24]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b52:	619a      	str	r2, [r3, #24]
 8008b54:	e007      	b.n	8008b66 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699a      	ldr	r2, [r3, #24]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b64:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7c9b      	ldrb	r3, [r3, #18]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d108      	bne.n	8008b80 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b7c:	619a      	str	r2, [r3, #24]
 8008b7e:	e007      	b.n	8008b90 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689a      	ldr	r2, [r3, #8]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	699a      	ldr	r2, [r3, #24]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008bb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0210 	bic.w	r2, r2, #16
 8008bc4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d108      	bne.n	8008be0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	699a      	ldr	r2, [r3, #24]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0204 	orr.w	r2, r2, #4
 8008bdc:	619a      	str	r2, [r3, #24]
 8008bde:	e02c      	b.n	8008c3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d028      	beq.n	8008c3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d01c      	beq.n	8008c2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bfe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	691a      	ldr	r2, [r3, #16]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0210 	orr.w	r2, r2, #16
 8008c0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d110      	bne.n	8008c3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699a      	ldr	r2, [r3, #24]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0220 	orr.w	r2, r2, #32
 8008c26:	619a      	str	r2, [r3, #24]
 8008c28:	e007      	b.n	8008c3a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	699a      	ldr	r2, [r3, #24]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f042 0220 	orr.w	r2, r2, #32
 8008c38:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008c4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008c52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008c62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008c64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c6e:	d115      	bne.n	8008c9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008c7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c84:	3b01      	subs	r3, #1
 8008c86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008c88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	3b01      	subs	r3, #1
 8008c92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008c98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008c9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa58 	bl	8009168 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40006400 	.word	0x40006400
 8008cdc:	40006500 	.word	0x40006500

08008ce0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cf0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d002      	beq.n	8008cfe <HAL_FDCAN_ConfigFilter+0x1e>
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d13d      	bne.n	8008d7a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d119      	bne.n	8008d3a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d12:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008d1a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	e01d      	b.n	8008d76 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	075a      	lsls	r2, r3, #29
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	079a      	lsls	r2, r3, #30
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	e006      	b.n	8008d88 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d7e:	f043 0202 	orr.w	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
  }
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d116      	bne.n	8008ddc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008db6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	011a      	lsls	r2, r3, #4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e006      	b.n	8008dea <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de0:	f043 0204 	orr.w	r2, r3, #4
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d108      	bne.n	8008e20 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	0219      	lsls	r1, r3, #8
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e006      	b.n	8008e2e <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e24:	f043 0204 	orr.w	r2, r3, #4
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
  }
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d109      	bne.n	8008e62 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008e5c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e006      	b.n	8008e70 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e66:	f043 0204 	orr.w	r2, r3, #4
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
  }
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d110      	bne.n	8008eb2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699a      	ldr	r2, [r3, #24]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e006      	b.n	8008ec0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb6:	f043 0204 	orr.w	r2, r3, #4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d12c      	bne.n	8008f3e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e023      	b.n	8008f4c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008f0c:	0c1b      	lsrs	r3, r3, #16
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	68b9      	ldr	r1, [r7, #8]
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f990 	bl	8009240 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2101      	movs	r1, #1
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	fa01 f202 	lsl.w	r2, r1, r2
 8008f2c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008f30:	2201      	movs	r2, #1
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	409a      	lsls	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e006      	b.n	8008f4c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f42:	f043 0208 	orr.w	r2, r3, #8
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
  }
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b08b      	sub	sp, #44	; 0x2c
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f68:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008f6a:	7efb      	ldrb	r3, [r7, #27]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	f040 80bc 	bne.w	80090ea <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	d121      	bne.n	8008fbc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f80:	f003 030f 	and.w	r3, r3, #15
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e0af      	b.n	80090f8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa0:	0a1b      	lsrs	r3, r3, #8
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	440b      	add	r3, r1
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fba:	e020      	b.n	8008ffe <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fc4:	f003 030f 	and.w	r3, r3, #15
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d107      	bne.n	8008fdc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e08d      	b.n	80090f8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fe4:	0a1b      	lsrs	r3, r3, #8
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	4413      	add	r3, r2
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	440b      	add	r3, r1
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d107      	bne.n	8009022 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	0c9b      	lsrs	r3, r3, #18
 8009018:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	e005      	b.n	800902e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	3304      	adds	r3, #4
 800904a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	b29a      	uxth	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	0e1b      	lsrs	r3, r3, #24
 8009080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	0fda      	lsrs	r2, r3, #31
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	3304      	adds	r3, #4
 8009096:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800909c:	2300      	movs	r3, #0
 800909e:	623b      	str	r3, [r7, #32]
 80090a0:	e00a      	b.n	80090b8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	441a      	add	r2, r3
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	440b      	add	r3, r1
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	3301      	adds	r3, #1
 80090b6:	623b      	str	r3, [r7, #32]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	0c1b      	lsrs	r3, r3, #16
 80090be:	4a11      	ldr	r2, [pc, #68]	; (8009104 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80090c0:	5cd3      	ldrb	r3, [r2, r3]
 80090c2:	461a      	mov	r2, r3
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d3eb      	bcc.n	80090a2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d105      	bne.n	80090dc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80090da:	e004      	b.n	80090e6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e006      	b.n	80090f8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ee:	f043 0208 	orr.w	r2, r3, #8
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
  }
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	372c      	adds	r7, #44	; 0x2c
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	080150fc 	.word	0x080150fc

08009108 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d107      	bne.n	8009128 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009120:	f003 030f 	and.w	r3, r3, #15
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e006      	b.n	8009136 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8009136:	68fb      	ldr	r3, [r7, #12]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800915a:	68fb      	ldr	r3, [r7, #12]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009170:	4b30      	ldr	r3, [pc, #192]	; (8009234 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009172:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a2f      	ldr	r2, [pc, #188]	; (8009238 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d103      	bne.n	8009186 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009184:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a2c      	ldr	r2, [pc, #176]	; (800923c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d103      	bne.n	8009198 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8009196:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091a6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ae:	041a      	lsls	r2, r3, #16
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091cc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	061a      	lsls	r2, r3, #24
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	e005      	b.n	800921a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3304      	adds	r3, #4
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	429a      	cmp	r2, r3
 8009224:	d3f3      	bcc.n	800920e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	4000a400 	.word	0x4000a400
 8009238:	40006800 	.word	0x40006800
 800923c:	40006c00 	.word	0x40006c00

08009240 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8009240:	b480      	push	{r7}
 8009242:	b089      	sub	sp, #36	; 0x24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10a      	bne.n	800926c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800925e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009266:	4313      	orrs	r3, r2
 8009268:	61fb      	str	r3, [r7, #28]
 800926a:	e00a      	b.n	8009282 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009274:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800927a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800927c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009280:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800928c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009292:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009298:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	4613      	mov	r3, r2
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	4413      	add	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	440b      	add	r3, r1
 80092b2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	3304      	adds	r3, #4
 80092be:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	3304      	adds	r3, #4
 80092ca:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	e020      	b.n	8009314 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	3303      	adds	r3, #3
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	4413      	add	r3, r2
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	3302      	adds	r3, #2
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	440b      	add	r3, r1
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80092ea:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	3301      	adds	r3, #1
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	440b      	add	r3, r1
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80092f8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	440a      	add	r2, r1
 8009300:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009302:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	3304      	adds	r3, #4
 800930c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	3304      	adds	r3, #4
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	0c1b      	lsrs	r3, r3, #16
 800931a:	4a06      	ldr	r2, [pc, #24]	; (8009334 <FDCAN_CopyMessageToRAM+0xf4>)
 800931c:	5cd3      	ldrb	r3, [r2, r3]
 800931e:	461a      	mov	r2, r3
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	4293      	cmp	r3, r2
 8009324:	d3d5      	bcc.n	80092d2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	3724      	adds	r7, #36	; 0x24
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	080150fc 	.word	0x080150fc

08009338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009346:	e15a      	b.n	80095fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	2101      	movs	r1, #1
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	fa01 f303 	lsl.w	r3, r1, r3
 8009354:	4013      	ands	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 814c 	beq.w	80095f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	2b01      	cmp	r3, #1
 800936a:	d005      	beq.n	8009378 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009374:	2b02      	cmp	r3, #2
 8009376:	d130      	bne.n	80093da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	2203      	movs	r2, #3
 8009384:	fa02 f303 	lsl.w	r3, r2, r3
 8009388:	43db      	mvns	r3, r3
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	4013      	ands	r3, r2
 800938e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	fa02 f303 	lsl.w	r3, r2, r3
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80093ae:	2201      	movs	r2, #1
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	fa02 f303 	lsl.w	r3, r2, r3
 80093b6:	43db      	mvns	r3, r3
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	4013      	ands	r3, r2
 80093bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	091b      	lsrs	r3, r3, #4
 80093c4:	f003 0201 	and.w	r2, r3, #1
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	fa02 f303 	lsl.w	r3, r2, r3
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d017      	beq.n	8009416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	2203      	movs	r2, #3
 80093f2:	fa02 f303 	lsl.w	r3, r2, r3
 80093f6:	43db      	mvns	r3, r3
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	4013      	ands	r3, r2
 80093fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	fa02 f303 	lsl.w	r3, r2, r3
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d123      	bne.n	800946a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	08da      	lsrs	r2, r3, #3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3208      	adds	r2, #8
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	220f      	movs	r2, #15
 800943a:	fa02 f303 	lsl.w	r3, r2, r3
 800943e:	43db      	mvns	r3, r3
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	4013      	ands	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	691a      	ldr	r2, [r3, #16]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	fa02 f303 	lsl.w	r3, r2, r3
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	4313      	orrs	r3, r2
 800945a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	08da      	lsrs	r2, r3, #3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3208      	adds	r2, #8
 8009464:	6939      	ldr	r1, [r7, #16]
 8009466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	2203      	movs	r2, #3
 8009476:	fa02 f303 	lsl.w	r3, r2, r3
 800947a:	43db      	mvns	r3, r3
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4013      	ands	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f003 0203 	and.w	r2, r3, #3
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80a6 	beq.w	80095f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094ac:	4b5b      	ldr	r3, [pc, #364]	; (800961c <HAL_GPIO_Init+0x2e4>)
 80094ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b0:	4a5a      	ldr	r2, [pc, #360]	; (800961c <HAL_GPIO_Init+0x2e4>)
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	6613      	str	r3, [r2, #96]	; 0x60
 80094b8:	4b58      	ldr	r3, [pc, #352]	; (800961c <HAL_GPIO_Init+0x2e4>)
 80094ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	60bb      	str	r3, [r7, #8]
 80094c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80094c4:	4a56      	ldr	r2, [pc, #344]	; (8009620 <HAL_GPIO_Init+0x2e8>)
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	089b      	lsrs	r3, r3, #2
 80094ca:	3302      	adds	r3, #2
 80094cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f003 0303 	and.w	r3, r3, #3
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	220f      	movs	r2, #15
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	43db      	mvns	r3, r3
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4013      	ands	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80094ee:	d01f      	beq.n	8009530 <HAL_GPIO_Init+0x1f8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a4c      	ldr	r2, [pc, #304]	; (8009624 <HAL_GPIO_Init+0x2ec>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d019      	beq.n	800952c <HAL_GPIO_Init+0x1f4>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a4b      	ldr	r2, [pc, #300]	; (8009628 <HAL_GPIO_Init+0x2f0>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d013      	beq.n	8009528 <HAL_GPIO_Init+0x1f0>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a4a      	ldr	r2, [pc, #296]	; (800962c <HAL_GPIO_Init+0x2f4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00d      	beq.n	8009524 <HAL_GPIO_Init+0x1ec>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a49      	ldr	r2, [pc, #292]	; (8009630 <HAL_GPIO_Init+0x2f8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d007      	beq.n	8009520 <HAL_GPIO_Init+0x1e8>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a48      	ldr	r2, [pc, #288]	; (8009634 <HAL_GPIO_Init+0x2fc>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d101      	bne.n	800951c <HAL_GPIO_Init+0x1e4>
 8009518:	2305      	movs	r3, #5
 800951a:	e00a      	b.n	8009532 <HAL_GPIO_Init+0x1fa>
 800951c:	2306      	movs	r3, #6
 800951e:	e008      	b.n	8009532 <HAL_GPIO_Init+0x1fa>
 8009520:	2304      	movs	r3, #4
 8009522:	e006      	b.n	8009532 <HAL_GPIO_Init+0x1fa>
 8009524:	2303      	movs	r3, #3
 8009526:	e004      	b.n	8009532 <HAL_GPIO_Init+0x1fa>
 8009528:	2302      	movs	r3, #2
 800952a:	e002      	b.n	8009532 <HAL_GPIO_Init+0x1fa>
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <HAL_GPIO_Init+0x1fa>
 8009530:	2300      	movs	r3, #0
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	f002 0203 	and.w	r2, r2, #3
 8009538:	0092      	lsls	r2, r2, #2
 800953a:	4093      	lsls	r3, r2
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009542:	4937      	ldr	r1, [pc, #220]	; (8009620 <HAL_GPIO_Init+0x2e8>)
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	089b      	lsrs	r3, r3, #2
 8009548:	3302      	adds	r3, #2
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009550:	4b39      	ldr	r3, [pc, #228]	; (8009638 <HAL_GPIO_Init+0x300>)
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	43db      	mvns	r3, r3
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	4013      	ands	r3, r2
 800955e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009574:	4a30      	ldr	r2, [pc, #192]	; (8009638 <HAL_GPIO_Init+0x300>)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800957a:	4b2f      	ldr	r3, [pc, #188]	; (8009638 <HAL_GPIO_Init+0x300>)
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	43db      	mvns	r3, r3
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4013      	ands	r3, r2
 8009588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800959e:	4a26      	ldr	r2, [pc, #152]	; (8009638 <HAL_GPIO_Init+0x300>)
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80095a4:	4b24      	ldr	r3, [pc, #144]	; (8009638 <HAL_GPIO_Init+0x300>)
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	43db      	mvns	r3, r3
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	4013      	ands	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80095c8:	4a1b      	ldr	r2, [pc, #108]	; (8009638 <HAL_GPIO_Init+0x300>)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80095ce:	4b1a      	ldr	r3, [pc, #104]	; (8009638 <HAL_GPIO_Init+0x300>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	43db      	mvns	r3, r3
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	4013      	ands	r3, r2
 80095dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80095f2:	4a11      	ldr	r2, [pc, #68]	; (8009638 <HAL_GPIO_Init+0x300>)
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	3301      	adds	r3, #1
 80095fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	f47f ae9d 	bne.w	8009348 <HAL_GPIO_Init+0x10>
  }
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	40021000 	.word	0x40021000
 8009620:	40010000 	.word	0x40010000
 8009624:	48000400 	.word	0x48000400
 8009628:	48000800 	.word	0x48000800
 800962c:	48000c00 	.word	0x48000c00
 8009630:	48001000 	.word	0x48001000
 8009634:	48001400 	.word	0x48001400
 8009638:	40010400 	.word	0x40010400

0800963c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	807b      	strh	r3, [r7, #2]
 8009648:	4613      	mov	r3, r2
 800964a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800964c:	787b      	ldrb	r3, [r7, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009652:	887a      	ldrh	r2, [r7, #2]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009658:	e002      	b.n	8009660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800965a:	887a      	ldrh	r2, [r7, #2]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800967e:	887a      	ldrh	r2, [r7, #2]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4013      	ands	r3, r2
 8009684:	041a      	lsls	r2, r3, #16
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	43d9      	mvns	r1, r3
 800968a:	887b      	ldrh	r3, [r7, #2]
 800968c:	400b      	ands	r3, r1
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	619a      	str	r2, [r3, #24]
}
 8009694:	bf00      	nop
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e08d      	b.n	80097ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7f8 f9da 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2224      	movs	r2, #36	; 0x24
 80096d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0201 	bic.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d107      	bne.n	800971a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009716:	609a      	str	r2, [r3, #8]
 8009718:	e006      	b.n	8009728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d108      	bne.n	8009742 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973e:	605a      	str	r2, [r3, #4]
 8009740:	e007      	b.n	8009752 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009750:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68da      	ldr	r2, [r3, #12]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691a      	ldr	r2, [r3, #16]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	69d9      	ldr	r1, [r3, #28]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a1a      	ldr	r2, [r3, #32]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 0201 	orr.w	r2, r2, #1
 80097ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
	...

080097d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af02      	add	r7, sp, #8
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	4608      	mov	r0, r1
 80097e2:	4611      	mov	r1, r2
 80097e4:	461a      	mov	r2, r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	817b      	strh	r3, [r7, #10]
 80097ea:	460b      	mov	r3, r1
 80097ec:	813b      	strh	r3, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	f040 80fd 	bne.w	80099fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <HAL_I2C_Mem_Read+0x34>
 8009806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009808:	2b00      	cmp	r3, #0
 800980a:	d105      	bne.n	8009818 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009812:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e0f1      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_I2C_Mem_Read+0x4e>
 8009822:	2302      	movs	r3, #2
 8009824:	e0ea      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800982e:	f7fe fd59 	bl	80082e4 <HAL_GetTick>
 8009832:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	2319      	movs	r3, #25
 800983a:	2201      	movs	r2, #1
 800983c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fee4 	bl	800a60e <I2C_WaitOnFlagUntilTimeout>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e0d5      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2222      	movs	r2, #34	; 0x22
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2240      	movs	r2, #64	; 0x40
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a3a      	ldr	r2, [r7, #32]
 800986a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009878:	88f8      	ldrh	r0, [r7, #6]
 800987a:	893a      	ldrh	r2, [r7, #8]
 800987c:	8979      	ldrh	r1, [r7, #10]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	4603      	mov	r3, r0
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 fa7b 	bl	8009d84 <I2C_RequestMemoryRead>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e0ad      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	2bff      	cmp	r3, #255	; 0xff
 80098a8:	d90e      	bls.n	80098c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	22ff      	movs	r2, #255	; 0xff
 80098ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	8979      	ldrh	r1, [r7, #10]
 80098b8:	4b52      	ldr	r3, [pc, #328]	; (8009a04 <HAL_I2C_Mem_Read+0x22c>)
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f001 f867 	bl	800a994 <I2C_TransferConfig>
 80098c6:	e00f      	b.n	80098e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	8979      	ldrh	r1, [r7, #10]
 80098da:	4b4a      	ldr	r3, [pc, #296]	; (8009a04 <HAL_I2C_Mem_Read+0x22c>)
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f001 f856 	bl	800a994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	2200      	movs	r2, #0
 80098f0:	2104      	movs	r1, #4
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 fe8b 	bl	800a60e <I2C_WaitOnFlagUntilTimeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e07c      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	b2d2      	uxtb	r2, r2
 800990e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991e:	3b01      	subs	r3, #1
 8009920:	b29a      	uxth	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d034      	beq.n	80099a8 <HAL_I2C_Mem_Read+0x1d0>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d130      	bne.n	80099a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	2200      	movs	r2, #0
 800994e:	2180      	movs	r1, #128	; 0x80
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fe5c 	bl	800a60e <I2C_WaitOnFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e04d      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009964:	b29b      	uxth	r3, r3
 8009966:	2bff      	cmp	r3, #255	; 0xff
 8009968:	d90e      	bls.n	8009988 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	22ff      	movs	r2, #255	; 0xff
 800996e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009974:	b2da      	uxtb	r2, r3
 8009976:	8979      	ldrh	r1, [r7, #10]
 8009978:	2300      	movs	r3, #0
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f001 f807 	bl	800a994 <I2C_TransferConfig>
 8009986:	e00f      	b.n	80099a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998c:	b29a      	uxth	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009996:	b2da      	uxtb	r2, r3
 8009998:	8979      	ldrh	r1, [r7, #10]
 800999a:	2300      	movs	r3, #0
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fff6 	bl	800a994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d19a      	bne.n	80098e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fec9 	bl	800a74e <I2C_WaitOnSTOPFlagUntilTimeout>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e01a      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2220      	movs	r2, #32
 80099cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6859      	ldr	r1, [r3, #4]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <HAL_I2C_Mem_Read+0x230>)
 80099da:	400b      	ands	r3, r1
 80099dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	e000      	b.n	80099fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80099fa:	2302      	movs	r3, #2
  }
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	80002400 	.word	0x80002400
 8009a08:	fe00e800 	.word	0xfe00e800

08009a0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	68f9      	ldr	r1, [r7, #12]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	4798      	blx	r3
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00f      	beq.n	8009a82 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a70:	f043 0201 	orr.w	r2, r3, #1
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a80:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00f      	beq.n	8009aac <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	f043 0208 	orr.w	r2, r3, #8
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009aaa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00f      	beq.n	8009ad6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac4:	f043 0202 	orr.w	r2, r3, #2
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ad4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f003 030b 	and.w	r3, r3, #11
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc37 	bl	800a35c <I2C_ITError>
  }
}
 8009aee:	bf00      	nop
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009afe:	bf00      	nop
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009b2e:	bf00      	nop
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b083      	sub	sp, #12
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009b6a:	bf00      	nop
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b84:	b2db      	uxtb	r3, r3
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b086      	sub	sp, #24
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	60f8      	str	r0, [r7, #12]
 8009b9a:	60b9      	str	r1, [r7, #8]
 8009b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <I2C_Slave_ISR_IT+0x24>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e0e2      	b.n	8009d7c <I2C_Slave_ISR_IT+0x1ea>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f003 0320 	and.w	r3, r3, #32
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d009      	beq.n	8009bdc <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d004      	beq.n	8009bdc <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009bd2:	6939      	ldr	r1, [r7, #16]
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 fa09 	bl	8009fec <I2C_ITSlaveCplt>
 8009bda:	e0ca      	b.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f003 0310 	and.w	r3, r3, #16
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d04b      	beq.n	8009c7e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d046      	beq.n	8009c7e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d128      	bne.n	8009c4c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b28      	cmp	r3, #40	; 0x28
 8009c04:	d108      	bne.n	8009c18 <I2C_Slave_ISR_IT+0x86>
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c0c:	d104      	bne.n	8009c18 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009c0e:	6939      	ldr	r1, [r7, #16]
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 fb4f 	bl	800a2b4 <I2C_ITListenCplt>
 8009c16:	e031      	b.n	8009c7c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b29      	cmp	r3, #41	; 0x29
 8009c22:	d10e      	bne.n	8009c42 <I2C_Slave_ISR_IT+0xb0>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c2a:	d00a      	beq.n	8009c42 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2210      	movs	r2, #16
 8009c32:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 fca8 	bl	800a58a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f97a 	bl	8009f34 <I2C_ITSlaveSeqCplt>
 8009c40:	e01c      	b.n	8009c7c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2210      	movs	r2, #16
 8009c48:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009c4a:	e08f      	b.n	8009d6c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2210      	movs	r2, #16
 8009c52:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c58:	f043 0204 	orr.w	r2, r3, #4
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <I2C_Slave_ISR_IT+0xdc>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c6c:	d17e      	bne.n	8009d6c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c72:	4619      	mov	r1, r3
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 fb71 	bl	800a35c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009c7a:	e077      	b.n	8009d6c <I2C_Slave_ISR_IT+0x1da>
 8009c7c:	e076      	b.n	8009d6c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d02f      	beq.n	8009ce8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d02a      	beq.n	8009ce8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d018      	beq.n	8009cce <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	b2d2      	uxtb	r2, r2
 8009ca8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d14b      	bne.n	8009d70 <I2C_Slave_ISR_IT+0x1de>
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cde:	d047      	beq.n	8009d70 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f927 	bl	8009f34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009ce6:	e043      	b.n	8009d70 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d004      	beq.n	8009d06 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009cfc:	6939      	ldr	r1, [r7, #16]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f894 	bl	8009e2c <I2C_ITAddrCplt>
 8009d04:	e035      	b.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d030      	beq.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d02b      	beq.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d018      	beq.n	8009d56 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	851a      	strh	r2, [r3, #40]	; 0x28
 8009d54:	e00d      	b.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d5c:	d002      	beq.n	8009d64 <I2C_Slave_ISR_IT+0x1d2>
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 f8e5 	bl	8009f34 <I2C_ITSlaveSeqCplt>
 8009d6a:	e002      	b.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8009d6c:	bf00      	nop
 8009d6e:	e000      	b.n	8009d72 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8009d70:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	4611      	mov	r1, r2
 8009d90:	461a      	mov	r2, r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	817b      	strh	r3, [r7, #10]
 8009d96:	460b      	mov	r3, r1
 8009d98:	813b      	strh	r3, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d9e:	88fb      	ldrh	r3, [r7, #6]
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	8979      	ldrh	r1, [r7, #10]
 8009da4:	4b20      	ldr	r3, [pc, #128]	; (8009e28 <I2C_RequestMemoryRead+0xa4>)
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	2300      	movs	r3, #0
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f000 fdf2 	bl	800a994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	69b9      	ldr	r1, [r7, #24]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 fc83 	bl	800a6c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e02c      	b.n	8009e1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dc4:	88fb      	ldrh	r3, [r7, #6]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d105      	bne.n	8009dd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dca:	893b      	ldrh	r3, [r7, #8]
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8009dd4:	e015      	b.n	8009e02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009dd6:	893b      	ldrh	r3, [r7, #8]
 8009dd8:	0a1b      	lsrs	r3, r3, #8
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	69b9      	ldr	r1, [r7, #24]
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fc69 	bl	800a6c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e012      	b.n	8009e1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009df8:	893b      	ldrh	r3, [r7, #8]
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2140      	movs	r1, #64	; 0x40
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 fbfe 	bl	800a60e <I2C_WaitOnFlagUntilTimeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e000      	b.n	8009e1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	80002000 	.word	0x80002000

08009e2c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e42:	2b28      	cmp	r3, #40	; 0x28
 8009e44:	d16a      	bne.n	8009f1c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	0c1b      	lsrs	r3, r3, #16
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	0c1b      	lsrs	r3, r3, #16
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009e64:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e72:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009e80:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d138      	bne.n	8009efc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009e8a:	897b      	ldrh	r3, [r7, #10]
 8009e8c:	09db      	lsrs	r3, r3, #7
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	89bb      	ldrh	r3, [r7, #12]
 8009e92:	4053      	eors	r3, r2
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	f003 0306 	and.w	r3, r3, #6
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d11c      	bne.n	8009ed8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009e9e:	897b      	ldrh	r3, [r7, #10]
 8009ea0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d13b      	bne.n	8009f2c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2208      	movs	r2, #8
 8009ec0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009eca:	89ba      	ldrh	r2, [r7, #12]
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff fe24 	bl	8009b1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ed6:	e029      	b.n	8009f2c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009ed8:	893b      	ldrh	r3, [r7, #8]
 8009eda:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fd89 	bl	800a9f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009eee:	89ba      	ldrh	r2, [r7, #12]
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff fe12 	bl	8009b1e <HAL_I2C_AddrCallback>
}
 8009efa:	e017      	b.n	8009f2c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fd79 	bl	800a9f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009f0e:	89ba      	ldrh	r2, [r7, #12]
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff fe02 	bl	8009b1e <HAL_I2C_AddrCallback>
}
 8009f1a:	e007      	b.n	8009f2c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2208      	movs	r2, #8
 8009f22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d008      	beq.n	8009f68 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	e00c      	b.n	8009f82 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d007      	beq.n	8009f82 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b29      	cmp	r3, #41	; 0x29
 8009f8c:	d112      	bne.n	8009fb4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2228      	movs	r2, #40	; 0x28
 8009f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2221      	movs	r2, #33	; 0x21
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fd2a 	bl	800a9f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff fda2 	bl	8009af6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009fb2:	e017      	b.n	8009fe4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8009fbe:	d111      	bne.n	8009fe4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2228      	movs	r2, #40	; 0x28
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2222      	movs	r2, #34	; 0x22
 8009fcc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009fce:	2102      	movs	r1, #2
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fd11 	bl	800a9f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff fd93 	bl	8009b0a <HAL_I2C_SlaveRxCpltCallback>
}
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a00e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2220      	movs	r2, #32
 800a016:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	2b21      	cmp	r3, #33	; 0x21
 800a01c:	d002      	beq.n	800a024 <I2C_ITSlaveCplt+0x38>
 800a01e:	7afb      	ldrb	r3, [r7, #11]
 800a020:	2b29      	cmp	r3, #41	; 0x29
 800a022:	d108      	bne.n	800a036 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a024:	f248 0101 	movw	r1, #32769	; 0x8001
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fce5 	bl	800a9f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2221      	movs	r2, #33	; 0x21
 800a032:	631a      	str	r2, [r3, #48]	; 0x30
 800a034:	e019      	b.n	800a06a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a036:	7afb      	ldrb	r3, [r7, #11]
 800a038:	2b22      	cmp	r3, #34	; 0x22
 800a03a:	d002      	beq.n	800a042 <I2C_ITSlaveCplt+0x56>
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	2b2a      	cmp	r3, #42	; 0x2a
 800a040:	d108      	bne.n	800a054 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a042:	f248 0102 	movw	r1, #32770	; 0x8002
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fcd6 	bl	800a9f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2222      	movs	r2, #34	; 0x22
 800a050:	631a      	str	r2, [r3, #48]	; 0x30
 800a052:	e00a      	b.n	800a06a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	2b28      	cmp	r3, #40	; 0x28
 800a058:	d107      	bne.n	800a06a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a05a:	f248 0103 	movw	r1, #32771	; 0x8003
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fcca 	bl	800a9f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a078:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6859      	ldr	r1, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b89      	ldr	r3, [pc, #548]	; (800a2ac <I2C_ITSlaveCplt+0x2c0>)
 800a086:	400b      	ands	r3, r1
 800a088:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa7d 	bl	800a58a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d013      	beq.n	800a0c2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a0a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d01f      	beq.n	800a0f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0c0:	e017      	b.n	800a0f2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d012      	beq.n	800a0f2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d006      	beq.n	800a0f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d020      	beq.n	800a13e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f023 0304 	bic.w	r3, r3, #4
 800a102:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	b2d2      	uxtb	r2, r2
 800a110:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00c      	beq.n	800a13e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a128:	3b01      	subs	r3, #1
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a134:	b29b      	uxth	r3, r3
 800a136:	3b01      	subs	r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a142:	b29b      	uxth	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d005      	beq.n	800a154 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14c:	f043 0204 	orr.w	r2, r3, #4
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f003 0310 	and.w	r3, r3, #16
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d049      	beq.n	800a1f2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a164:	2b00      	cmp	r3, #0
 800a166:	d044      	beq.n	800a1f2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d128      	bne.n	800a1c4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b28      	cmp	r3, #40	; 0x28
 800a17c:	d108      	bne.n	800a190 <I2C_ITSlaveCplt+0x1a4>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a184:	d104      	bne.n	800a190 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a186:	6979      	ldr	r1, [r7, #20]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f893 	bl	800a2b4 <I2C_ITListenCplt>
 800a18e:	e030      	b.n	800a1f2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b29      	cmp	r3, #41	; 0x29
 800a19a:	d10e      	bne.n	800a1ba <I2C_ITSlaveCplt+0x1ce>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1a2:	d00a      	beq.n	800a1ba <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2210      	movs	r2, #16
 800a1aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f9ec 	bl	800a58a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7ff febe 	bl	8009f34 <I2C_ITSlaveSeqCplt>
 800a1b8:	e01b      	b.n	800a1f2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2210      	movs	r2, #16
 800a1c0:	61da      	str	r2, [r3, #28]
 800a1c2:	e016      	b.n	800a1f2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2210      	movs	r2, #16
 800a1ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d0:	f043 0204 	orr.w	r2, r3, #4
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <I2C_ITSlaveCplt+0x1fa>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1e4:	d105      	bne.n	800a1f2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f8b5 	bl	800a35c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f8a4 	bl	800a35c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b28      	cmp	r3, #40	; 0x28
 800a21e:	d141      	bne.n	800a2a4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a220:	6979      	ldr	r1, [r7, #20]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f846 	bl	800a2b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a228:	e03c      	b.n	800a2a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a232:	d014      	beq.n	800a25e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fe7d 	bl	8009f34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a1c      	ldr	r2, [pc, #112]	; (800a2b0 <I2C_ITSlaveCplt+0x2c4>)
 800a23e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2220      	movs	r2, #32
 800a244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff fc6f 	bl	8009b3a <HAL_I2C_ListenCpltCallback>
}
 800a25c:	e022      	b.n	800a2a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b22      	cmp	r3, #34	; 0x22
 800a268:	d10e      	bne.n	800a288 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff fc42 	bl	8009b0a <HAL_I2C_SlaveRxCpltCallback>
}
 800a286:	e00d      	b.n	800a2a4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fc29 	bl	8009af6 <HAL_I2C_SlaveTxCpltCallback>
}
 800a2a4:	bf00      	nop
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	fe00e800 	.word	0xfe00e800
 800a2b0:	ffff0000 	.word	0xffff0000

0800a2b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a25      	ldr	r2, [pc, #148]	; (800a358 <I2C_ITListenCplt+0xa4>)
 800a2c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	f003 0304 	and.w	r3, r3, #4
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d022      	beq.n	800a330 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	b2d2      	uxtb	r2, r2
 800a2f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a306:	2b00      	cmp	r3, #0
 800a308:	d012      	beq.n	800a330 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a30e:	3b01      	subs	r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	3b01      	subs	r3, #1
 800a31e:	b29a      	uxth	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a328:	f043 0204 	orr.w	r2, r3, #4
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a330:	f248 0103 	movw	r1, #32771	; 0x8003
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fb5f 	bl	800a9f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2210      	movs	r2, #16
 800a340:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff fbf5 	bl	8009b3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	ffff0000 	.word	0xffff0000

0800a35c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a36c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a6d      	ldr	r2, [pc, #436]	; (800a530 <I2C_ITError+0x1d4>)
 800a37a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	2b28      	cmp	r3, #40	; 0x28
 800a392:	d005      	beq.n	800a3a0 <I2C_ITError+0x44>
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	2b29      	cmp	r3, #41	; 0x29
 800a398:	d002      	beq.n	800a3a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	2b2a      	cmp	r3, #42	; 0x2a
 800a39e:	d10b      	bne.n	800a3b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a3a0:	2103      	movs	r1, #3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fb28 	bl	800a9f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2228      	movs	r2, #40	; 0x28
 800a3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a60      	ldr	r2, [pc, #384]	; (800a534 <I2C_ITError+0x1d8>)
 800a3b4:	635a      	str	r2, [r3, #52]	; 0x34
 800a3b6:	e030      	b.n	800a41a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a3b8:	f248 0103 	movw	r1, #32771	; 0x8003
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fb1b 	bl	800a9f8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f8e1 	bl	800a58a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b60      	cmp	r3, #96	; 0x60
 800a3d2:	d01f      	beq.n	800a414 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	f003 0320 	and.w	r3, r3, #32
 800a3e6:	2b20      	cmp	r3, #32
 800a3e8:	d114      	bne.n	800a414 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	f003 0310 	and.w	r3, r3, #16
 800a3f4:	2b10      	cmp	r3, #16
 800a3f6:	d109      	bne.n	800a40c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2210      	movs	r2, #16
 800a3fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a404:	f043 0204 	orr.w	r2, r3, #4
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2220      	movs	r2, #32
 800a412:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	d039      	beq.n	800a49c <I2C_ITError+0x140>
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b11      	cmp	r3, #17
 800a42c:	d002      	beq.n	800a434 <I2C_ITError+0xd8>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b21      	cmp	r3, #33	; 0x21
 800a432:	d133      	bne.n	800a49c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a43e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a442:	d107      	bne.n	800a454 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a452:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe fa76 	bl	800894a <HAL_DMA_GetState>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b01      	cmp	r3, #1
 800a462:	d017      	beq.n	800a494 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a468:	4a33      	ldr	r2, [pc, #204]	; (800a538 <I2C_ITError+0x1dc>)
 800a46a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fe f950 	bl	800871e <HAL_DMA_Abort_IT>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d04d      	beq.n	800a520 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a48e:	4610      	mov	r0, r2
 800a490:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a492:	e045      	b.n	800a520 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f851 	bl	800a53c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a49a:	e041      	b.n	800a520 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d039      	beq.n	800a518 <I2C_ITError+0x1bc>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b12      	cmp	r3, #18
 800a4a8:	d002      	beq.n	800a4b0 <I2C_ITError+0x154>
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b22      	cmp	r3, #34	; 0x22
 800a4ae:	d133      	bne.n	800a518 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4be:	d107      	bne.n	800a4d0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fa38 	bl	800894a <HAL_DMA_GetState>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d017      	beq.n	800a510 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e4:	4a14      	ldr	r2, [pc, #80]	; (800a538 <I2C_ITError+0x1dc>)
 800a4e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe f912 	bl	800871e <HAL_DMA_Abort_IT>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d011      	beq.n	800a524 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a50a:	4610      	mov	r0, r2
 800a50c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a50e:	e009      	b.n	800a524 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f813 	bl	800a53c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a516:	e005      	b.n	800a524 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f80f 	bl	800a53c <I2C_TreatErrorCallback>
  }
}
 800a51e:	e002      	b.n	800a526 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a524:	bf00      	nop
}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	ffff0000 	.word	0xffff0000
 800a534:	08009b93 	.word	0x08009b93
 800a538:	0800a5d3 	.word	0x0800a5d3

0800a53c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b60      	cmp	r3, #96	; 0x60
 800a54e:	d10e      	bne.n	800a56e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff fafb 	bl	8009b62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a56c:	e009      	b.n	800a582 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff fae6 	bl	8009b4e <HAL_I2C_ErrorCallback>
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d103      	bne.n	800a5a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d007      	beq.n	800a5c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699a      	ldr	r2, [r3, #24]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f042 0201 	orr.w	r2, r2, #1
 800a5c4:	619a      	str	r2, [r3, #24]
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff ff9b 	bl	800a53c <I2C_TreatErrorCallback>
}
 800a606:	bf00      	nop
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	603b      	str	r3, [r7, #0]
 800a61a:	4613      	mov	r3, r2
 800a61c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a61e:	e03b      	b.n	800a698 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a620:	69ba      	ldr	r2, [r7, #24]
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f8d5 	bl	800a7d4 <I2C_IsErrorOccurred>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e041      	b.n	800a6b8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63a:	d02d      	beq.n	800a698 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a63c:	f7fd fe52 	bl	80082e4 <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d302      	bcc.n	800a652 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d122      	bne.n	800a698 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4013      	ands	r3, r2
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	429a      	cmp	r2, r3
 800a660:	bf0c      	ite	eq
 800a662:	2301      	moveq	r3, #1
 800a664:	2300      	movne	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	461a      	mov	r2, r3
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d113      	bne.n	800a698 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a674:	f043 0220 	orr.w	r2, r3, #32
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2220      	movs	r2, #32
 800a680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e00f      	b.n	800a6b8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	bf0c      	ite	eq
 800a6a8:	2301      	moveq	r3, #1
 800a6aa:	2300      	movne	r3, #0
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d0b4      	beq.n	800a620 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a6cc:	e033      	b.n	800a736 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	68b9      	ldr	r1, [r7, #8]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f87e 	bl	800a7d4 <I2C_IsErrorOccurred>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e031      	b.n	800a746 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e8:	d025      	beq.n	800a736 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ea:	f7fd fdfb 	bl	80082e4 <HAL_GetTick>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d302      	bcc.n	800a700 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d11a      	bne.n	800a736 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d013      	beq.n	800a736 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a712:	f043 0220 	orr.w	r2, r3, #32
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e007      	b.n	800a746 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b02      	cmp	r3, #2
 800a742:	d1c4      	bne.n	800a6ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a75a:	e02f      	b.n	800a7bc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f837 	bl	800a7d4 <I2C_IsErrorOccurred>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e02d      	b.n	800a7cc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a770:	f7fd fdb8 	bl	80082e4 <HAL_GetTick>
 800a774:	4602      	mov	r2, r0
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d302      	bcc.n	800a786 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d11a      	bne.n	800a7bc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	f003 0320 	and.w	r3, r3, #32
 800a790:	2b20      	cmp	r3, #32
 800a792:	d013      	beq.n	800a7bc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a798:	f043 0220 	orr.w	r2, r3, #32
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e007      	b.n	800a7cc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d1c8      	bne.n	800a75c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	f003 0310 	and.w	r3, r3, #16
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d068      	beq.n	800a8d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2210      	movs	r2, #16
 800a806:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a808:	e049      	b.n	800a89e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a810:	d045      	beq.n	800a89e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a812:	f7fd fd67 	bl	80082e4 <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d302      	bcc.n	800a828 <I2C_IsErrorOccurred+0x54>
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d13a      	bne.n	800a89e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a832:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a83a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a84a:	d121      	bne.n	800a890 <I2C_IsErrorOccurred+0xbc>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a852:	d01d      	beq.n	800a890 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a854:	7cfb      	ldrb	r3, [r7, #19]
 800a856:	2b20      	cmp	r3, #32
 800a858:	d01a      	beq.n	800a890 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a868:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a86a:	f7fd fd3b 	bl	80082e4 <HAL_GetTick>
 800a86e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a870:	e00e      	b.n	800a890 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a872:	f7fd fd37 	bl	80082e4 <HAL_GetTick>
 800a876:	4602      	mov	r2, r0
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	2b19      	cmp	r3, #25
 800a87e:	d907      	bls.n	800a890 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	f043 0320 	orr.w	r3, r3, #32
 800a886:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a88e:	e006      	b.n	800a89e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	f003 0320 	and.w	r3, r3, #32
 800a89a:	2b20      	cmp	r3, #32
 800a89c:	d1e9      	bne.n	800a872 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	f003 0320 	and.w	r3, r3, #32
 800a8a8:	2b20      	cmp	r3, #32
 800a8aa:	d003      	beq.n	800a8b4 <I2C_IsErrorOccurred+0xe0>
 800a8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0aa      	beq.n	800a80a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	f043 0304 	orr.w	r3, r3, #4
 800a8ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00b      	beq.n	800a91e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	f043 0308 	orr.w	r3, r3, #8
 800a90c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a916:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00b      	beq.n	800a940 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	f043 0302 	orr.w	r3, r3, #2
 800a92e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01c      	beq.n	800a982 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7ff fe1e 	bl	800a58a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6859      	ldr	r1, [r3, #4]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <I2C_IsErrorOccurred+0x1bc>)
 800a95a:	400b      	ands	r3, r1
 800a95c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	431a      	orrs	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a986:	4618      	mov	r0, r3
 800a988:	3728      	adds	r7, #40	; 0x28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	fe00e800 	.word	0xfe00e800

0800a994 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	607b      	str	r3, [r7, #4]
 800a99e:	460b      	mov	r3, r1
 800a9a0:	817b      	strh	r3, [r7, #10]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a9a6:	897b      	ldrh	r3, [r7, #10]
 800a9a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a9ac:	7a7b      	ldrb	r3, [r7, #9]
 800a9ae:	041b      	lsls	r3, r3, #16
 800a9b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a9b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	0d5b      	lsrs	r3, r3, #21
 800a9ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a9d2:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <I2C_TransferConfig+0x60>)
 800a9d4:	430b      	orrs	r3, r1
 800a9d6:	43db      	mvns	r3, r3
 800a9d8:	ea02 0103 	and.w	r1, r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a9e6:	bf00      	nop
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	03ff63ff 	.word	0x03ff63ff

0800a9f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aa08:	887b      	ldrh	r3, [r7, #2]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00f      	beq.n	800aa32 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800aa18:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa26:	2b28      	cmp	r3, #40	; 0x28
 800aa28:	d003      	beq.n	800aa32 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800aa30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aa32:	887b      	ldrh	r3, [r7, #2]
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00f      	beq.n	800aa5c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800aa42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa50:	2b28      	cmp	r3, #40	; 0x28
 800aa52:	d003      	beq.n	800aa5c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800aa5a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aa5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	da03      	bge.n	800aa6c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aa6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800aa6c:	887b      	ldrh	r3, [r7, #2]
 800aa6e:	2b10      	cmp	r3, #16
 800aa70:	d103      	bne.n	800aa7a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800aa78:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aa7a:	887b      	ldrh	r3, [r7, #2]
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d103      	bne.n	800aa88 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f043 0320 	orr.w	r3, r3, #32
 800aa86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800aa88:	887b      	ldrh	r3, [r7, #2]
 800aa8a:	2b40      	cmp	r3, #64	; 0x40
 800aa8c:	d103      	bne.n	800aa96 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa94:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6819      	ldr	r1, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	43da      	mvns	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	400a      	ands	r2, r1
 800aaa6:	601a      	str	r2, [r3, #0]
}
 800aaa8:	bf00      	nop
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	d138      	bne.n	800ab3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e032      	b.n	800ab3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2224      	movs	r2, #36	; 0x24
 800aae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f022 0201 	bic.w	r2, r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6819      	ldr	r1, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	430a      	orrs	r2, r1
 800ab16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f042 0201 	orr.w	r2, r2, #1
 800ab26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2220      	movs	r2, #32
 800ab2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e000      	b.n	800ab3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab3c:	2302      	movs	r3, #2
  }
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b085      	sub	sp, #20
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b20      	cmp	r3, #32
 800ab5e:	d139      	bne.n	800abd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e033      	b.n	800abd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2224      	movs	r2, #36	; 0x24
 800ab7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 0201 	bic.w	r2, r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ab9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	021b      	lsls	r3, r3, #8
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f042 0201 	orr.w	r2, r2, #1
 800abbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2220      	movs	r2, #32
 800abc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	e000      	b.n	800abd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800abd4:	2302      	movs	r3, #2
  }
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
	...

0800abe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d141      	bne.n	800ac76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800abf2:	4b4b      	ldr	r3, [pc, #300]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800abfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abfe:	d131      	bne.n	800ac64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac00:	4b47      	ldr	r3, [pc, #284]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac06:	4a46      	ldr	r2, [pc, #280]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac10:	4b43      	ldr	r3, [pc, #268]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ac18:	4a41      	ldr	r2, [pc, #260]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ac20:	4b40      	ldr	r3, [pc, #256]	; (800ad24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2232      	movs	r2, #50	; 0x32
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
 800ac2a:	4a3f      	ldr	r2, [pc, #252]	; (800ad28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ac2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac30:	0c9b      	lsrs	r3, r3, #18
 800ac32:	3301      	adds	r3, #1
 800ac34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac36:	e002      	b.n	800ac3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac3e:	4b38      	ldr	r3, [pc, #224]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4a:	d102      	bne.n	800ac52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1f2      	bne.n	800ac38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ac52:	4b33      	ldr	r3, [pc, #204]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac5e:	d158      	bne.n	800ad12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	e057      	b.n	800ad14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac64:	4b2e      	ldr	r3, [pc, #184]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac6a:	4a2d      	ldr	r2, [pc, #180]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ac74:	e04d      	b.n	800ad12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac7c:	d141      	bne.n	800ad02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ac7e:	4b28      	ldr	r3, [pc, #160]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac8a:	d131      	bne.n	800acf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac8c:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac92:	4a23      	ldr	r2, [pc, #140]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac9c:	4b20      	ldr	r3, [pc, #128]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aca4:	4a1e      	ldr	r2, [pc, #120]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800acac:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2232      	movs	r2, #50	; 0x32
 800acb2:	fb02 f303 	mul.w	r3, r2, r3
 800acb6:	4a1c      	ldr	r2, [pc, #112]	; (800ad28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800acb8:	fba2 2303 	umull	r2, r3, r2, r3
 800acbc:	0c9b      	lsrs	r3, r3, #18
 800acbe:	3301      	adds	r3, #1
 800acc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800acc2:	e002      	b.n	800acca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800acca:	4b15      	ldr	r3, [pc, #84]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd6:	d102      	bne.n	800acde <HAL_PWREx_ControlVoltageScaling+0xfa>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1f2      	bne.n	800acc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800acde:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ace6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acea:	d112      	bne.n	800ad12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e011      	b.n	800ad14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800acf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf6:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800acf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ad00:	e007      	b.n	800ad12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad0a:	4a05      	ldr	r2, [pc, #20]	; (800ad20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	40007000 	.word	0x40007000
 800ad24:	2000003c 	.word	0x2000003c
 800ad28:	431bde83 	.word	0x431bde83

0800ad2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800ad30:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	4a04      	ldr	r2, [pc, #16]	; (800ad48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ad36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad3a:	6093      	str	r3, [r2, #8]
}
 800ad3c:	bf00      	nop
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40007000 	.word	0x40007000

0800ad4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e2fe      	b.n	800b35c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d075      	beq.n	800ae56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad6a:	4b97      	ldr	r3, [pc, #604]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f003 030c 	and.w	r3, r3, #12
 800ad72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad74:	4b94      	ldr	r3, [pc, #592]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	f003 0303 	and.w	r3, r3, #3
 800ad7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b0c      	cmp	r3, #12
 800ad82:	d102      	bne.n	800ad8a <HAL_RCC_OscConfig+0x3e>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d002      	beq.n	800ad90 <HAL_RCC_OscConfig+0x44>
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	2b08      	cmp	r3, #8
 800ad8e:	d10b      	bne.n	800ada8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad90:	4b8d      	ldr	r3, [pc, #564]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d05b      	beq.n	800ae54 <HAL_RCC_OscConfig+0x108>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d157      	bne.n	800ae54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e2d9      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb0:	d106      	bne.n	800adc0 <HAL_RCC_OscConfig+0x74>
 800adb2:	4b85      	ldr	r3, [pc, #532]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a84      	ldr	r2, [pc, #528]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800adb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	e01d      	b.n	800adfc <HAL_RCC_OscConfig+0xb0>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adc8:	d10c      	bne.n	800ade4 <HAL_RCC_OscConfig+0x98>
 800adca:	4b7f      	ldr	r3, [pc, #508]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a7e      	ldr	r2, [pc, #504]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800add0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	4b7c      	ldr	r3, [pc, #496]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a7b      	ldr	r2, [pc, #492]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800addc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	e00b      	b.n	800adfc <HAL_RCC_OscConfig+0xb0>
 800ade4:	4b78      	ldr	r3, [pc, #480]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a77      	ldr	r2, [pc, #476]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800adea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	4b75      	ldr	r3, [pc, #468]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a74      	ldr	r2, [pc, #464]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800adf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d013      	beq.n	800ae2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae04:	f7fd fa6e 	bl	80082e4 <HAL_GetTick>
 800ae08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae0a:	e008      	b.n	800ae1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae0c:	f7fd fa6a 	bl	80082e4 <HAL_GetTick>
 800ae10:	4602      	mov	r2, r0
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	2b64      	cmp	r3, #100	; 0x64
 800ae18:	d901      	bls.n	800ae1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e29e      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae1e:	4b6a      	ldr	r3, [pc, #424]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0f0      	beq.n	800ae0c <HAL_RCC_OscConfig+0xc0>
 800ae2a:	e014      	b.n	800ae56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2c:	f7fd fa5a 	bl	80082e4 <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae34:	f7fd fa56 	bl	80082e4 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b64      	cmp	r3, #100	; 0x64
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e28a      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae46:	4b60      	ldr	r3, [pc, #384]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f0      	bne.n	800ae34 <HAL_RCC_OscConfig+0xe8>
 800ae52:	e000      	b.n	800ae56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d075      	beq.n	800af4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae62:	4b59      	ldr	r3, [pc, #356]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f003 030c 	and.w	r3, r3, #12
 800ae6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae6c:	4b56      	ldr	r3, [pc, #344]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f003 0303 	and.w	r3, r3, #3
 800ae74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	2b0c      	cmp	r3, #12
 800ae7a:	d102      	bne.n	800ae82 <HAL_RCC_OscConfig+0x136>
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d002      	beq.n	800ae88 <HAL_RCC_OscConfig+0x13c>
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d11f      	bne.n	800aec8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae88:	4b4f      	ldr	r3, [pc, #316]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d005      	beq.n	800aea0 <HAL_RCC_OscConfig+0x154>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e25d      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aea0:	4b49      	ldr	r3, [pc, #292]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	061b      	lsls	r3, r3, #24
 800aeae:	4946      	ldr	r1, [pc, #280]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aeb4:	4b45      	ldr	r3, [pc, #276]	; (800afcc <HAL_RCC_OscConfig+0x280>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fd f9c7 	bl	800824c <HAL_InitTick>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d043      	beq.n	800af4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e249      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d023      	beq.n	800af18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aed0:	4b3d      	ldr	r3, [pc, #244]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a3c      	ldr	r2, [pc, #240]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800aed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aedc:	f7fd fa02 	bl	80082e4 <HAL_GetTick>
 800aee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aee2:	e008      	b.n	800aef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aee4:	f7fd f9fe 	bl	80082e4 <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d901      	bls.n	800aef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e232      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aef6:	4b34      	ldr	r3, [pc, #208]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0f0      	beq.n	800aee4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af02:	4b31      	ldr	r3, [pc, #196]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	061b      	lsls	r3, r3, #24
 800af10:	492d      	ldr	r1, [pc, #180]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af12:	4313      	orrs	r3, r2
 800af14:	604b      	str	r3, [r1, #4]
 800af16:	e01a      	b.n	800af4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af18:	4b2b      	ldr	r3, [pc, #172]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a2a      	ldr	r2, [pc, #168]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af24:	f7fd f9de 	bl	80082e4 <HAL_GetTick>
 800af28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af2a:	e008      	b.n	800af3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af2c:	f7fd f9da 	bl	80082e4 <HAL_GetTick>
 800af30:	4602      	mov	r2, r0
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d901      	bls.n	800af3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e20e      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af3e:	4b22      	ldr	r3, [pc, #136]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f0      	bne.n	800af2c <HAL_RCC_OscConfig+0x1e0>
 800af4a:	e000      	b.n	800af4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0308 	and.w	r3, r3, #8
 800af56:	2b00      	cmp	r3, #0
 800af58:	d041      	beq.n	800afde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d01c      	beq.n	800af9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af62:	4b19      	ldr	r3, [pc, #100]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af68:	4a17      	ldr	r2, [pc, #92]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af6a:	f043 0301 	orr.w	r3, r3, #1
 800af6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af72:	f7fd f9b7 	bl	80082e4 <HAL_GetTick>
 800af76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af78:	e008      	b.n	800af8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af7a:	f7fd f9b3 	bl	80082e4 <HAL_GetTick>
 800af7e:	4602      	mov	r2, r0
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	2b02      	cmp	r3, #2
 800af86:	d901      	bls.n	800af8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	e1e7      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af8c:	4b0e      	ldr	r3, [pc, #56]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b00      	cmp	r3, #0
 800af98:	d0ef      	beq.n	800af7a <HAL_RCC_OscConfig+0x22e>
 800af9a:	e020      	b.n	800afde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af9c:	4b0a      	ldr	r3, [pc, #40]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800af9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afa2:	4a09      	ldr	r2, [pc, #36]	; (800afc8 <HAL_RCC_OscConfig+0x27c>)
 800afa4:	f023 0301 	bic.w	r3, r3, #1
 800afa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afac:	f7fd f99a 	bl	80082e4 <HAL_GetTick>
 800afb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800afb2:	e00d      	b.n	800afd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afb4:	f7fd f996 	bl	80082e4 <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d906      	bls.n	800afd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e1ca      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
 800afc6:	bf00      	nop
 800afc8:	40021000 	.word	0x40021000
 800afcc:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800afd0:	4b8c      	ldr	r3, [pc, #560]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800afd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afd6:	f003 0302 	and.w	r3, r3, #2
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1ea      	bne.n	800afb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0304 	and.w	r3, r3, #4
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 80a6 	beq.w	800b138 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afec:	2300      	movs	r3, #0
 800afee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aff0:	4b84      	ldr	r3, [pc, #528]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800aff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <HAL_RCC_OscConfig+0x2b4>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <HAL_RCC_OscConfig+0x2b6>
 800b000:	2300      	movs	r3, #0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00d      	beq.n	800b022 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b006:	4b7f      	ldr	r3, [pc, #508]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b00a:	4a7e      	ldr	r2, [pc, #504]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b00c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b010:	6593      	str	r3, [r2, #88]	; 0x58
 800b012:	4b7c      	ldr	r3, [pc, #496]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b01e:	2301      	movs	r3, #1
 800b020:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b022:	4b79      	ldr	r3, [pc, #484]	; (800b208 <HAL_RCC_OscConfig+0x4bc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d118      	bne.n	800b060 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b02e:	4b76      	ldr	r3, [pc, #472]	; (800b208 <HAL_RCC_OscConfig+0x4bc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a75      	ldr	r2, [pc, #468]	; (800b208 <HAL_RCC_OscConfig+0x4bc>)
 800b034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b03a:	f7fd f953 	bl	80082e4 <HAL_GetTick>
 800b03e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b040:	e008      	b.n	800b054 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b042:	f7fd f94f 	bl	80082e4 <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d901      	bls.n	800b054 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e183      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b054:	4b6c      	ldr	r3, [pc, #432]	; (800b208 <HAL_RCC_OscConfig+0x4bc>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0f0      	beq.n	800b042 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d108      	bne.n	800b07a <HAL_RCC_OscConfig+0x32e>
 800b068:	4b66      	ldr	r3, [pc, #408]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b06e:	4a65      	ldr	r2, [pc, #404]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b070:	f043 0301 	orr.w	r3, r3, #1
 800b074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b078:	e024      	b.n	800b0c4 <HAL_RCC_OscConfig+0x378>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	2b05      	cmp	r3, #5
 800b080:	d110      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x358>
 800b082:	4b60      	ldr	r3, [pc, #384]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b088:	4a5e      	ldr	r2, [pc, #376]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b08a:	f043 0304 	orr.w	r3, r3, #4
 800b08e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b092:	4b5c      	ldr	r3, [pc, #368]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b098:	4a5a      	ldr	r2, [pc, #360]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b09a:	f043 0301 	orr.w	r3, r3, #1
 800b09e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b0a2:	e00f      	b.n	800b0c4 <HAL_RCC_OscConfig+0x378>
 800b0a4:	4b57      	ldr	r3, [pc, #348]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0aa:	4a56      	ldr	r2, [pc, #344]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b0ac:	f023 0301 	bic.w	r3, r3, #1
 800b0b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b0b4:	4b53      	ldr	r3, [pc, #332]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0ba:	4a52      	ldr	r2, [pc, #328]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b0bc:	f023 0304 	bic.w	r3, r3, #4
 800b0c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d016      	beq.n	800b0fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0cc:	f7fd f90a 	bl	80082e4 <HAL_GetTick>
 800b0d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0d2:	e00a      	b.n	800b0ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0d4:	f7fd f906 	bl	80082e4 <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d901      	bls.n	800b0ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e138      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0ea:	4b46      	ldr	r3, [pc, #280]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0ed      	beq.n	800b0d4 <HAL_RCC_OscConfig+0x388>
 800b0f8:	e015      	b.n	800b126 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0fa:	f7fd f8f3 	bl	80082e4 <HAL_GetTick>
 800b0fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b100:	e00a      	b.n	800b118 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b102:	f7fd f8ef 	bl	80082e4 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b110:	4293      	cmp	r3, r2
 800b112:	d901      	bls.n	800b118 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	e121      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b118:	4b3a      	ldr	r3, [pc, #232]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b11e:	f003 0302 	and.w	r3, r3, #2
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1ed      	bne.n	800b102 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b126:	7ffb      	ldrb	r3, [r7, #31]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d105      	bne.n	800b138 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b12c:	4b35      	ldr	r3, [pc, #212]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b130:	4a34      	ldr	r2, [pc, #208]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b136:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0320 	and.w	r3, r3, #32
 800b140:	2b00      	cmp	r3, #0
 800b142:	d03c      	beq.n	800b1be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01c      	beq.n	800b186 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b14c:	4b2d      	ldr	r3, [pc, #180]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b14e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b152:	4a2c      	ldr	r2, [pc, #176]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b154:	f043 0301 	orr.w	r3, r3, #1
 800b158:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b15c:	f7fd f8c2 	bl	80082e4 <HAL_GetTick>
 800b160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b162:	e008      	b.n	800b176 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b164:	f7fd f8be 	bl	80082e4 <HAL_GetTick>
 800b168:	4602      	mov	r2, r0
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d901      	bls.n	800b176 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e0f2      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b176:	4b23      	ldr	r3, [pc, #140]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b17c:	f003 0302 	and.w	r3, r3, #2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d0ef      	beq.n	800b164 <HAL_RCC_OscConfig+0x418>
 800b184:	e01b      	b.n	800b1be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b186:	4b1f      	ldr	r3, [pc, #124]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b18c:	4a1d      	ldr	r2, [pc, #116]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b18e:	f023 0301 	bic.w	r3, r3, #1
 800b192:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b196:	f7fd f8a5 	bl	80082e4 <HAL_GetTick>
 800b19a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b19c:	e008      	b.n	800b1b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b19e:	f7fd f8a1 	bl	80082e4 <HAL_GetTick>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d901      	bls.n	800b1b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e0d5      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b1b0:	4b14      	ldr	r3, [pc, #80]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b1b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1b6:	f003 0302 	and.w	r3, r3, #2
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1ef      	bne.n	800b19e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 80c9 	beq.w	800b35a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b1c8:	4b0e      	ldr	r3, [pc, #56]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f003 030c 	and.w	r3, r3, #12
 800b1d0:	2b0c      	cmp	r3, #12
 800b1d2:	f000 8083 	beq.w	800b2dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d15e      	bne.n	800b29c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1de:	4b09      	ldr	r3, [pc, #36]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a08      	ldr	r2, [pc, #32]	; (800b204 <HAL_RCC_OscConfig+0x4b8>)
 800b1e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ea:	f7fd f87b 	bl	80082e4 <HAL_GetTick>
 800b1ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1f0:	e00c      	b.n	800b20c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1f2:	f7fd f877 	bl	80082e4 <HAL_GetTick>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d905      	bls.n	800b20c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b200:	2303      	movs	r3, #3
 800b202:	e0ab      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
 800b204:	40021000 	.word	0x40021000
 800b208:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b20c:	4b55      	ldr	r3, [pc, #340]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1ec      	bne.n	800b1f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b218:	4b52      	ldr	r3, [pc, #328]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b21a:	68da      	ldr	r2, [r3, #12]
 800b21c:	4b52      	ldr	r3, [pc, #328]	; (800b368 <HAL_RCC_OscConfig+0x61c>)
 800b21e:	4013      	ands	r3, r2
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6a11      	ldr	r1, [r2, #32]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b228:	3a01      	subs	r2, #1
 800b22a:	0112      	lsls	r2, r2, #4
 800b22c:	4311      	orrs	r1, r2
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b232:	0212      	lsls	r2, r2, #8
 800b234:	4311      	orrs	r1, r2
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b23a:	0852      	lsrs	r2, r2, #1
 800b23c:	3a01      	subs	r2, #1
 800b23e:	0552      	lsls	r2, r2, #21
 800b240:	4311      	orrs	r1, r2
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b246:	0852      	lsrs	r2, r2, #1
 800b248:	3a01      	subs	r2, #1
 800b24a:	0652      	lsls	r2, r2, #25
 800b24c:	4311      	orrs	r1, r2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b252:	06d2      	lsls	r2, r2, #27
 800b254:	430a      	orrs	r2, r1
 800b256:	4943      	ldr	r1, [pc, #268]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b25c:	4b41      	ldr	r3, [pc, #260]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a40      	ldr	r2, [pc, #256]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b266:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b268:	4b3e      	ldr	r3, [pc, #248]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	4a3d      	ldr	r2, [pc, #244]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b26e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b272:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b274:	f7fd f836 	bl	80082e4 <HAL_GetTick>
 800b278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b27c:	f7fd f832 	bl	80082e4 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e066      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b28e:	4b35      	ldr	r3, [pc, #212]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b296:	2b00      	cmp	r3, #0
 800b298:	d0f0      	beq.n	800b27c <HAL_RCC_OscConfig+0x530>
 800b29a:	e05e      	b.n	800b35a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b29c:	4b31      	ldr	r3, [pc, #196]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a30      	ldr	r2, [pc, #192]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b2a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2a8:	f7fd f81c 	bl	80082e4 <HAL_GetTick>
 800b2ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b2ae:	e008      	b.n	800b2c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2b0:	f7fd f818 	bl	80082e4 <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d901      	bls.n	800b2c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e04c      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b2c2:	4b28      	ldr	r3, [pc, #160]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1f0      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b2ce:	4b25      	ldr	r3, [pc, #148]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b2d0:	68da      	ldr	r2, [r3, #12]
 800b2d2:	4924      	ldr	r1, [pc, #144]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b2d4:	4b25      	ldr	r3, [pc, #148]	; (800b36c <HAL_RCC_OscConfig+0x620>)
 800b2d6:	4013      	ands	r3, r2
 800b2d8:	60cb      	str	r3, [r1, #12]
 800b2da:	e03e      	b.n	800b35a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d101      	bne.n	800b2e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e039      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b2e8:	4b1e      	ldr	r3, [pc, #120]	; (800b364 <HAL_RCC_OscConfig+0x618>)
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f003 0203 	and.w	r2, r3, #3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d12c      	bne.n	800b356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	3b01      	subs	r3, #1
 800b308:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d123      	bne.n	800b356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b318:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d11b      	bne.n	800b356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d113      	bne.n	800b356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b338:	085b      	lsrs	r3, r3, #1
 800b33a:	3b01      	subs	r3, #1
 800b33c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b33e:	429a      	cmp	r2, r3
 800b340:	d109      	bne.n	800b356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34c:	085b      	lsrs	r3, r3, #1
 800b34e:	3b01      	subs	r3, #1
 800b350:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b352:	429a      	cmp	r2, r3
 800b354:	d001      	beq.n	800b35a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3720      	adds	r7, #32
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	40021000 	.word	0x40021000
 800b368:	019f800c 	.word	0x019f800c
 800b36c:	feeefffc 	.word	0xfeeefffc

0800b370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b37a:	2300      	movs	r3, #0
 800b37c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e11e      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b388:	4b91      	ldr	r3, [pc, #580]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 030f 	and.w	r3, r3, #15
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d910      	bls.n	800b3b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b396:	4b8e      	ldr	r3, [pc, #568]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f023 020f 	bic.w	r2, r3, #15
 800b39e:	498c      	ldr	r1, [pc, #560]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3a6:	4b8a      	ldr	r3, [pc, #552]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 030f 	and.w	r3, r3, #15
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d001      	beq.n	800b3b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e106      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d073      	beq.n	800b4ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d129      	bne.n	800b420 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3cc:	4b81      	ldr	r3, [pc, #516]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e0f4      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b3dc:	f000 f99e 	bl	800b71c <RCC_GetSysClockFreqFromPLLSource>
 800b3e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	4a7c      	ldr	r2, [pc, #496]	; (800b5d8 <HAL_RCC_ClockConfig+0x268>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d93f      	bls.n	800b46a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b3ea:	4b7a      	ldr	r3, [pc, #488]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d009      	beq.n	800b40a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d033      	beq.n	800b46a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b406:	2b00      	cmp	r3, #0
 800b408:	d12f      	bne.n	800b46a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b40a:	4b72      	ldr	r3, [pc, #456]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b412:	4a70      	ldr	r2, [pc, #448]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b418:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b41a:	2380      	movs	r3, #128	; 0x80
 800b41c:	617b      	str	r3, [r7, #20]
 800b41e:	e024      	b.n	800b46a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2b02      	cmp	r3, #2
 800b426:	d107      	bne.n	800b438 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b428:	4b6a      	ldr	r3, [pc, #424]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d109      	bne.n	800b448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e0c6      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b438:	4b66      	ldr	r3, [pc, #408]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e0be      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b448:	f000 f8ce 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800b44c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	4a61      	ldr	r2, [pc, #388]	; (800b5d8 <HAL_RCC_ClockConfig+0x268>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d909      	bls.n	800b46a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b456:	4b5f      	ldr	r3, [pc, #380]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b45e:	4a5d      	ldr	r2, [pc, #372]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b464:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b466:	2380      	movs	r3, #128	; 0x80
 800b468:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b46a:	4b5a      	ldr	r3, [pc, #360]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f023 0203 	bic.w	r2, r3, #3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	4957      	ldr	r1, [pc, #348]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b47c:	f7fc ff32 	bl	80082e4 <HAL_GetTick>
 800b480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b482:	e00a      	b.n	800b49a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b484:	f7fc ff2e 	bl	80082e4 <HAL_GetTick>
 800b488:	4602      	mov	r2, r0
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	1ad3      	subs	r3, r2, r3
 800b48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b492:	4293      	cmp	r3, r2
 800b494:	d901      	bls.n	800b49a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e095      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b49a:	4b4e      	ldr	r3, [pc, #312]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f003 020c 	and.w	r2, r3, #12
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d1eb      	bne.n	800b484 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d023      	beq.n	800b500 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d005      	beq.n	800b4d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4c4:	4b43      	ldr	r3, [pc, #268]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	4a42      	ldr	r2, [pc, #264]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b4ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b4ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0308 	and.w	r3, r3, #8
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b4dc:	4b3d      	ldr	r3, [pc, #244]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4e4:	4a3b      	ldr	r2, [pc, #236]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b4e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b4ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4ec:	4b39      	ldr	r3, [pc, #228]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	4936      	ldr	r1, [pc, #216]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	608b      	str	r3, [r1, #8]
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b80      	cmp	r3, #128	; 0x80
 800b504:	d105      	bne.n	800b512 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b506:	4b33      	ldr	r3, [pc, #204]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	4a32      	ldr	r2, [pc, #200]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b50c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b510:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b512:	4b2f      	ldr	r3, [pc, #188]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 030f 	and.w	r3, r3, #15
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d21d      	bcs.n	800b55c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b520:	4b2b      	ldr	r3, [pc, #172]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f023 020f 	bic.w	r2, r3, #15
 800b528:	4929      	ldr	r1, [pc, #164]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b530:	f7fc fed8 	bl	80082e4 <HAL_GetTick>
 800b534:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b536:	e00a      	b.n	800b54e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b538:	f7fc fed4 	bl	80082e4 <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	f241 3288 	movw	r2, #5000	; 0x1388
 800b546:	4293      	cmp	r3, r2
 800b548:	d901      	bls.n	800b54e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e03b      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b54e:	4b20      	ldr	r3, [pc, #128]	; (800b5d0 <HAL_RCC_ClockConfig+0x260>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 030f 	and.w	r3, r3, #15
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d1ed      	bne.n	800b538 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b00      	cmp	r3, #0
 800b566:	d008      	beq.n	800b57a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b568:	4b1a      	ldr	r3, [pc, #104]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	4917      	ldr	r1, [pc, #92]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b576:	4313      	orrs	r3, r2
 800b578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 0308 	and.w	r3, r3, #8
 800b582:	2b00      	cmp	r3, #0
 800b584:	d009      	beq.n	800b59a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b586:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	490f      	ldr	r1, [pc, #60]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b596:	4313      	orrs	r3, r2
 800b598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b59a:	f000 f825 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <HAL_RCC_ClockConfig+0x264>)
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	091b      	lsrs	r3, r3, #4
 800b5a6:	f003 030f 	and.w	r3, r3, #15
 800b5aa:	490c      	ldr	r1, [pc, #48]	; (800b5dc <HAL_RCC_ClockConfig+0x26c>)
 800b5ac:	5ccb      	ldrb	r3, [r1, r3]
 800b5ae:	f003 031f 	and.w	r3, r3, #31
 800b5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5b6:	4a0a      	ldr	r2, [pc, #40]	; (800b5e0 <HAL_RCC_ClockConfig+0x270>)
 800b5b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b5ba:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <HAL_RCC_ClockConfig+0x274>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fc fe44 	bl	800824c <HAL_InitTick>
 800b5c4:	4603      	mov	r3, r0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	40022000 	.word	0x40022000
 800b5d4:	40021000 	.word	0x40021000
 800b5d8:	04c4b400 	.word	0x04c4b400
 800b5dc:	080150e4 	.word	0x080150e4
 800b5e0:	2000003c 	.word	0x2000003c
 800b5e4:	20000040 	.word	0x20000040

0800b5e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b5ee:	4b2c      	ldr	r3, [pc, #176]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f003 030c 	and.w	r3, r3, #12
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d102      	bne.n	800b600 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b5fa:	4b2a      	ldr	r3, [pc, #168]	; (800b6a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b5fc:	613b      	str	r3, [r7, #16]
 800b5fe:	e047      	b.n	800b690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b600:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f003 030c 	and.w	r3, r3, #12
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d102      	bne.n	800b612 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b60c:	4b26      	ldr	r3, [pc, #152]	; (800b6a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	e03e      	b.n	800b690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b612:	4b23      	ldr	r3, [pc, #140]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	f003 030c 	and.w	r3, r3, #12
 800b61a:	2b0c      	cmp	r3, #12
 800b61c:	d136      	bne.n	800b68c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b61e:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b628:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	091b      	lsrs	r3, r3, #4
 800b62e:	f003 030f 	and.w	r3, r3, #15
 800b632:	3301      	adds	r3, #1
 800b634:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b03      	cmp	r3, #3
 800b63a:	d10c      	bne.n	800b656 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b63c:	4a1a      	ldr	r2, [pc, #104]	; (800b6a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	fbb2 f3f3 	udiv	r3, r2, r3
 800b644:	4a16      	ldr	r2, [pc, #88]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b646:	68d2      	ldr	r2, [r2, #12]
 800b648:	0a12      	lsrs	r2, r2, #8
 800b64a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b64e:	fb02 f303 	mul.w	r3, r2, r3
 800b652:	617b      	str	r3, [r7, #20]
      break;
 800b654:	e00c      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b656:	4a13      	ldr	r2, [pc, #76]	; (800b6a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	4a10      	ldr	r2, [pc, #64]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b660:	68d2      	ldr	r2, [r2, #12]
 800b662:	0a12      	lsrs	r2, r2, #8
 800b664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b668:	fb02 f303 	mul.w	r3, r2, r3
 800b66c:	617b      	str	r3, [r7, #20]
      break;
 800b66e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b670:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	0e5b      	lsrs	r3, r3, #25
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	3301      	adds	r3, #1
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	fbb2 f3f3 	udiv	r3, r2, r3
 800b688:	613b      	str	r3, [r7, #16]
 800b68a:	e001      	b.n	800b690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b690:	693b      	ldr	r3, [r7, #16]
}
 800b692:	4618      	mov	r0, r3
 800b694:	371c      	adds	r7, #28
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	40021000 	.word	0x40021000
 800b6a4:	00f42400 	.word	0x00f42400
 800b6a8:	007a1200 	.word	0x007a1200

0800b6ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6b0:	4b03      	ldr	r3, [pc, #12]	; (800b6c0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	2000003c 	.word	0x2000003c

0800b6c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b6c8:	f7ff fff0 	bl	800b6ac <HAL_RCC_GetHCLKFreq>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	0a1b      	lsrs	r3, r3, #8
 800b6d4:	f003 0307 	and.w	r3, r3, #7
 800b6d8:	4904      	ldr	r1, [pc, #16]	; (800b6ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800b6da:	5ccb      	ldrb	r3, [r1, r3]
 800b6dc:	f003 031f 	and.w	r3, r3, #31
 800b6e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	40021000 	.word	0x40021000
 800b6ec:	080150f4 	.word	0x080150f4

0800b6f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b6f4:	f7ff ffda 	bl	800b6ac <HAL_RCC_GetHCLKFreq>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	4b06      	ldr	r3, [pc, #24]	; (800b714 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	0adb      	lsrs	r3, r3, #11
 800b700:	f003 0307 	and.w	r3, r3, #7
 800b704:	4904      	ldr	r1, [pc, #16]	; (800b718 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b706:	5ccb      	ldrb	r3, [r1, r3]
 800b708:	f003 031f 	and.w	r3, r3, #31
 800b70c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b710:	4618      	mov	r0, r3
 800b712:	bd80      	pop	{r7, pc}
 800b714:	40021000 	.word	0x40021000
 800b718:	080150f4 	.word	0x080150f4

0800b71c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b722:	4b1e      	ldr	r3, [pc, #120]	; (800b79c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f003 0303 	and.w	r3, r3, #3
 800b72a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b72c:	4b1b      	ldr	r3, [pc, #108]	; (800b79c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	091b      	lsrs	r3, r3, #4
 800b732:	f003 030f 	and.w	r3, r3, #15
 800b736:	3301      	adds	r3, #1
 800b738:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d10c      	bne.n	800b75a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b740:	4a17      	ldr	r2, [pc, #92]	; (800b7a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	fbb2 f3f3 	udiv	r3, r2, r3
 800b748:	4a14      	ldr	r2, [pc, #80]	; (800b79c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b74a:	68d2      	ldr	r2, [r2, #12]
 800b74c:	0a12      	lsrs	r2, r2, #8
 800b74e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b752:	fb02 f303 	mul.w	r3, r2, r3
 800b756:	617b      	str	r3, [r7, #20]
    break;
 800b758:	e00c      	b.n	800b774 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b75a:	4a12      	ldr	r2, [pc, #72]	; (800b7a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b762:	4a0e      	ldr	r2, [pc, #56]	; (800b79c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b764:	68d2      	ldr	r2, [r2, #12]
 800b766:	0a12      	lsrs	r2, r2, #8
 800b768:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b76c:	fb02 f303 	mul.w	r3, r2, r3
 800b770:	617b      	str	r3, [r7, #20]
    break;
 800b772:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b774:	4b09      	ldr	r3, [pc, #36]	; (800b79c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	0e5b      	lsrs	r3, r3, #25
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	3301      	adds	r3, #1
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b78e:	687b      	ldr	r3, [r7, #4]
}
 800b790:	4618      	mov	r0, r3
 800b792:	371c      	adds	r7, #28
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	40021000 	.word	0x40021000
 800b7a0:	007a1200 	.word	0x007a1200
 800b7a4:	00f42400 	.word	0x00f42400

0800b7a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 8098 	beq.w	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7ca:	4b43      	ldr	r3, [pc, #268]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10d      	bne.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7d6:	4b40      	ldr	r3, [pc, #256]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7da:	4a3f      	ldr	r2, [pc, #252]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b7e2:	4b3d      	ldr	r3, [pc, #244]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ea:	60bb      	str	r3, [r7, #8]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7f2:	4b3a      	ldr	r3, [pc, #232]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a39      	ldr	r2, [pc, #228]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b7f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7fe:	f7fc fd71 	bl	80082e4 <HAL_GetTick>
 800b802:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b804:	e009      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b806:	f7fc fd6d 	bl	80082e4 <HAL_GetTick>
 800b80a:	4602      	mov	r2, r0
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	2b02      	cmp	r3, #2
 800b812:	d902      	bls.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	74fb      	strb	r3, [r7, #19]
        break;
 800b818:	e005      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b81a:	4b30      	ldr	r3, [pc, #192]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0ef      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b826:	7cfb      	ldrb	r3, [r7, #19]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d159      	bne.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b82c:	4b2a      	ldr	r3, [pc, #168]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b836:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d01e      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	429a      	cmp	r2, r3
 800b846:	d019      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b848:	4b23      	ldr	r3, [pc, #140]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b84e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b854:	4b20      	ldr	r3, [pc, #128]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b85a:	4a1f      	ldr	r2, [pc, #124]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b85c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b864:	4b1c      	ldr	r3, [pc, #112]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b86a:	4a1b      	ldr	r2, [pc, #108]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b86c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b874:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d016      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b886:	f7fc fd2d 	bl	80082e4 <HAL_GetTick>
 800b88a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b88c:	e00b      	b.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b88e:	f7fc fd29 	bl	80082e4 <HAL_GetTick>
 800b892:	4602      	mov	r2, r0
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	f241 3288 	movw	r2, #5000	; 0x1388
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d902      	bls.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	74fb      	strb	r3, [r7, #19]
            break;
 800b8a4:	e006      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b8a6:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ac:	f003 0302 	and.w	r3, r3, #2
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0ec      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b8b4:	7cfb      	ldrb	r3, [r7, #19]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b8ba:	4b07      	ldr	r3, [pc, #28]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c8:	4903      	ldr	r1, [pc, #12]	; (800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b8d0:	e008      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8d2:	7cfb      	ldrb	r3, [r7, #19]
 800b8d4:	74bb      	strb	r3, [r7, #18]
 800b8d6:	e005      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b8d8:	40021000 	.word	0x40021000
 800b8dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e0:	7cfb      	ldrb	r3, [r7, #19]
 800b8e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b8e4:	7c7b      	ldrb	r3, [r7, #17]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d105      	bne.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8ea:	4ba7      	ldr	r3, [pc, #668]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ee:	4aa6      	ldr	r2, [pc, #664]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b902:	4ba1      	ldr	r3, [pc, #644]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b908:	f023 0203 	bic.w	r2, r3, #3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	499d      	ldr	r1, [pc, #628]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b912:	4313      	orrs	r3, r2
 800b914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0302 	and.w	r3, r3, #2
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b924:	4b98      	ldr	r3, [pc, #608]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92a:	f023 020c 	bic.w	r2, r3, #12
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	4995      	ldr	r1, [pc, #596]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b934:	4313      	orrs	r3, r2
 800b936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 0304 	and.w	r3, r3, #4
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b946:	4b90      	ldr	r3, [pc, #576]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b94c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	498c      	ldr	r1, [pc, #560]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b956:	4313      	orrs	r3, r2
 800b958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0308 	and.w	r3, r3, #8
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00a      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b968:	4b87      	ldr	r3, [pc, #540]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b96e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	4984      	ldr	r1, [pc, #528]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 0310 	and.w	r3, r3, #16
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b98a:	4b7f      	ldr	r3, [pc, #508]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	497b      	ldr	r1, [pc, #492]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0320 	and.w	r3, r3, #32
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00a      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b9ac:	4b76      	ldr	r3, [pc, #472]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	4973      	ldr	r1, [pc, #460]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b9ce:	4b6e      	ldr	r3, [pc, #440]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	496a      	ldr	r1, [pc, #424]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b9f0:	4b65      	ldr	r3, [pc, #404]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	4962      	ldr	r1, [pc, #392]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ba12:	4b5d      	ldr	r3, [pc, #372]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	4959      	ldr	r1, [pc, #356]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba22:	4313      	orrs	r3, r2
 800ba24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba34:	4b54      	ldr	r3, [pc, #336]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba3a:	f023 0203 	bic.w	r2, r3, #3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba42:	4951      	ldr	r1, [pc, #324]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba56:	4b4c      	ldr	r3, [pc, #304]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	4948      	ldr	r1, [pc, #288]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba66:	4313      	orrs	r3, r2
 800ba68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d015      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba78:	4b43      	ldr	r3, [pc, #268]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba86:	4940      	ldr	r1, [pc, #256]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba96:	d105      	bne.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba98:	4b3b      	ldr	r3, [pc, #236]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	4a3a      	ldr	r2, [pc, #232]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baa2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baac:	2b00      	cmp	r3, #0
 800baae:	d015      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bab0:	4b35      	ldr	r3, [pc, #212]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babe:	4932      	ldr	r1, [pc, #200]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bac0:	4313      	orrs	r3, r2
 800bac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bace:	d105      	bne.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bad0:	4b2d      	ldr	r3, [pc, #180]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	4a2c      	ldr	r2, [pc, #176]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bada:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d015      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bae8:	4b27      	ldr	r3, [pc, #156]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf6:	4924      	ldr	r1, [pc, #144]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb06:	d105      	bne.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb08:	4b1f      	ldr	r3, [pc, #124]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	4a1e      	ldr	r2, [pc, #120]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d015      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb20:	4b19      	ldr	r3, [pc, #100]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2e:	4916      	ldr	r1, [pc, #88]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb30:	4313      	orrs	r3, r2
 800bb32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb3e:	d105      	bne.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb40:	4b11      	ldr	r3, [pc, #68]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	4a10      	ldr	r2, [pc, #64]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d019      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb58:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	4908      	ldr	r1, [pc, #32]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb76:	d109      	bne.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb78:	4b03      	ldr	r3, [pc, #12]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	4a02      	ldr	r2, [pc, #8]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb82:	60d3      	str	r3, [r2, #12]
 800bb84:	e002      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bb86:	bf00      	nop
 800bb88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d015      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bb98:	4b29      	ldr	r3, [pc, #164]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba6:	4926      	ldr	r1, [pc, #152]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbb6:	d105      	bne.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bbb8:	4b21      	ldr	r3, [pc, #132]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	4a20      	ldr	r2, [pc, #128]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbc2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d015      	beq.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bbd0:	4b1b      	ldr	r3, [pc, #108]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbd6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbde:	4918      	ldr	r1, [pc, #96]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbee:	d105      	bne.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bbf0:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	4a12      	ldr	r2, [pc, #72]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbfa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d015      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bc08:	4b0d      	ldr	r3, [pc, #52]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc16:	490a      	ldr	r1, [pc, #40]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc26:	d105      	bne.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc28:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	4a04      	ldr	r2, [pc, #16]	; (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bc34:	7cbb      	ldrb	r3, [r7, #18]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	40021000 	.word	0x40021000

0800bc44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e042      	b.n	800bcdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d106      	bne.n	800bc6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7fc fa4d 	bl	8008108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2224      	movs	r2, #36	; 0x24
 800bc72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 0201 	bic.w	r2, r2, #1
 800bc84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fe68 	bl	800c964 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fb69 	bl	800c36c <UART_SetConfig>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d101      	bne.n	800bca4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e01b      	b.n	800bcdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	689a      	ldr	r2, [r3, #8]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bcc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f042 0201 	orr.w	r2, r2, #1
 800bcd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fee7 	bl	800caa8 <UART_CheckIdleState>
 800bcda:	4603      	mov	r3, r0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b0ba      	sub	sp, #232	; 0xe8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bd0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800bd12:	4013      	ands	r3, r2
 800bd14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bd18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d11b      	bne.n	800bd58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd24:	f003 0320 	and.w	r3, r3, #32
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d015      	beq.n	800bd58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd30:	f003 0320 	and.w	r3, r3, #32
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d105      	bne.n	800bd44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d009      	beq.n	800bd58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 82e3 	beq.w	800c314 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	4798      	blx	r3
      }
      return;
 800bd56:	e2dd      	b.n	800c314 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bd58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8123 	beq.w	800bfa8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bd66:	4b8d      	ldr	r3, [pc, #564]	; (800bf9c <HAL_UART_IRQHandler+0x2b8>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d106      	bne.n	800bd7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bd72:	4b8b      	ldr	r3, [pc, #556]	; (800bfa0 <HAL_UART_IRQHandler+0x2bc>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 8116 	beq.w	800bfa8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d011      	beq.n	800bdac <HAL_UART_IRQHandler+0xc8>
 800bd88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00b      	beq.n	800bdac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda2:	f043 0201 	orr.w	r2, r3, #1
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d011      	beq.n	800bddc <HAL_UART_IRQHandler+0xf8>
 800bdb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdd2:	f043 0204 	orr.w	r2, r3, #4
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bde0:	f003 0304 	and.w	r3, r3, #4
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d011      	beq.n	800be0c <HAL_UART_IRQHandler+0x128>
 800bde8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdec:	f003 0301 	and.w	r3, r3, #1
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00b      	beq.n	800be0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2204      	movs	r2, #4
 800bdfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be02:	f043 0202 	orr.w	r2, r3, #2
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b00      	cmp	r3, #0
 800be16:	d017      	beq.n	800be48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be1c:	f003 0320 	and.w	r3, r3, #32
 800be20:	2b00      	cmp	r3, #0
 800be22:	d105      	bne.n	800be30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be28:	4b5c      	ldr	r3, [pc, #368]	; (800bf9c <HAL_UART_IRQHandler+0x2b8>)
 800be2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00b      	beq.n	800be48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2208      	movs	r2, #8
 800be36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be3e:	f043 0208 	orr.w	r2, r3, #8
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be50:	2b00      	cmp	r3, #0
 800be52:	d012      	beq.n	800be7a <HAL_UART_IRQHandler+0x196>
 800be54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00c      	beq.n	800be7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be70:	f043 0220 	orr.w	r2, r3, #32
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 8249 	beq.w	800c318 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be8a:	f003 0320 	and.w	r3, r3, #32
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d013      	beq.n	800beba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be96:	f003 0320 	and.w	r3, r3, #32
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d105      	bne.n	800beaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d007      	beq.n	800beba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d003      	beq.n	800beba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bece:	2b40      	cmp	r3, #64	; 0x40
 800bed0:	d005      	beq.n	800bede <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bed6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d054      	beq.n	800bf88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fef9 	bl	800ccd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beee:	2b40      	cmp	r3, #64	; 0x40
 800bef0:	d146      	bne.n	800bf80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3308      	adds	r3, #8
 800bef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf00:	e853 3f00 	ldrex	r3, [r3]
 800bf04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3308      	adds	r3, #8
 800bf1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1d9      	bne.n	800bef2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d017      	beq.n	800bf78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf4e:	4a15      	ldr	r2, [pc, #84]	; (800bfa4 <HAL_UART_IRQHandler+0x2c0>)
 800bf50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fc fbe0 	bl	800871e <HAL_DMA_Abort_IT>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d019      	beq.n	800bf98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bf72:	4610      	mov	r0, r2
 800bf74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf76:	e00f      	b.n	800bf98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f9e1 	bl	800c340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf7e:	e00b      	b.n	800bf98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f9dd 	bl	800c340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf86:	e007      	b.n	800bf98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f9d9 	bl	800c340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bf96:	e1bf      	b.n	800c318 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf98:	bf00      	nop
    return;
 800bf9a:	e1bd      	b.n	800c318 <HAL_UART_IRQHandler+0x634>
 800bf9c:	10000001 	.word	0x10000001
 800bfa0:	04000120 	.word	0x04000120
 800bfa4:	0800cda3 	.word	0x0800cda3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	f040 8153 	bne.w	800c258 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bfb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfb6:	f003 0310 	and.w	r3, r3, #16
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 814c 	beq.w	800c258 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bfc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfc4:	f003 0310 	and.w	r3, r3, #16
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 8145 	beq.w	800c258 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2210      	movs	r2, #16
 800bfd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe0:	2b40      	cmp	r3, #64	; 0x40
 800bfe2:	f040 80bb 	bne.w	800c15c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 818f 	beq.w	800c31c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c004:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c008:	429a      	cmp	r2, r3
 800c00a:	f080 8187 	bcs.w	800c31c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 0320 	and.w	r3, r3, #32
 800c026:	2b00      	cmp	r3, #0
 800c028:	f040 8087 	bne.w	800c13a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c038:	e853 3f00 	ldrex	r3, [r3]
 800c03c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	461a      	mov	r2, r3
 800c052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c05a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c062:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c06e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1da      	bne.n	800c02c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3308      	adds	r3, #8
 800c07c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c080:	e853 3f00 	ldrex	r3, [r3]
 800c084:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c088:	f023 0301 	bic.w	r3, r3, #1
 800c08c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3308      	adds	r3, #8
 800c096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c09a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c09e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c0ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e1      	bne.n	800c076 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0bc:	e853 3f00 	ldrex	r3, [r3]
 800c0c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c0c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c0d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c0d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0de:	e841 2300 	strex	r3, r2, [r1]
 800c0e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e3      	bne.n	800c0b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c100:	e853 3f00 	ldrex	r3, [r3]
 800c104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c108:	f023 0310 	bic.w	r3, r3, #16
 800c10c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	461a      	mov	r2, r3
 800c116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c11a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c11c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e4      	bne.n	800c0f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c134:	4618      	mov	r0, r3
 800c136:	f7fc fa99 	bl	800866c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2202      	movs	r2, #2
 800c13e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	b29b      	uxth	r3, r3
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f8fd 	bl	800c354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c15a:	e0df      	b.n	800c31c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c168:	b29b      	uxth	r3, r3
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c176:	b29b      	uxth	r3, r3
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 80d1 	beq.w	800c320 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800c17e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c182:	2b00      	cmp	r3, #0
 800c184:	f000 80cc 	beq.w	800c320 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	e853 3f00 	ldrex	r3, [r3]
 800c194:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c19c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1aa:	647b      	str	r3, [r7, #68]	; 0x44
 800c1ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1b2:	e841 2300 	strex	r3, r2, [r1]
 800c1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1e4      	bne.n	800c188 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	e853 3f00 	ldrex	r3, [r3]
 800c1cc:	623b      	str	r3, [r7, #32]
   return(result);
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1d4:	f023 0301 	bic.w	r3, r3, #1
 800c1d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c1e6:	633a      	str	r2, [r7, #48]	; 0x30
 800c1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ee:	e841 2300 	strex	r3, r2, [r1]
 800c1f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1e1      	bne.n	800c1be <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2220      	movs	r2, #32
 800c1fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	e853 3f00 	ldrex	r3, [r3]
 800c21a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f023 0310 	bic.w	r3, r3, #16
 800c222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c230:	61fb      	str	r3, [r7, #28]
 800c232:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c234:	69b9      	ldr	r1, [r7, #24]
 800c236:	69fa      	ldr	r2, [r7, #28]
 800c238:	e841 2300 	strex	r3, r2, [r1]
 800c23c:	617b      	str	r3, [r7, #20]
   return(result);
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e4      	bne.n	800c20e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2202      	movs	r2, #2
 800c248:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c24a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f87f 	bl	800c354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c256:	e063      	b.n	800c320 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00e      	beq.n	800c282 <HAL_UART_IRQHandler+0x59e>
 800c264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d008      	beq.n	800c282 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fdd2 	bl	800ce24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c280:	e051      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d014      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c28e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c296:	2b00      	cmp	r3, #0
 800c298:	d105      	bne.n	800c2a6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c29a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c29e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d008      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d03a      	beq.n	800c324 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4798      	blx	r3
    }
    return;
 800c2b6:	e035      	b.n	800c324 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d009      	beq.n	800c2d8 <HAL_UART_IRQHandler+0x5f4>
 800c2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d003      	beq.n	800c2d8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fd7c 	bl	800cdce <UART_EndTransmit_IT>
    return;
 800c2d6:	e026      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d009      	beq.n	800c2f8 <HAL_UART_IRQHandler+0x614>
 800c2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d003      	beq.n	800c2f8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fdab 	bl	800ce4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2f6:	e016      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d010      	beq.n	800c326 <HAL_UART_IRQHandler+0x642>
 800c304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	da0c      	bge.n	800c326 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fd93 	bl	800ce38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c312:	e008      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
      return;
 800c314:	bf00      	nop
 800c316:	e006      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
    return;
 800c318:	bf00      	nop
 800c31a:	e004      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
      return;
 800c31c:	bf00      	nop
 800c31e:	e002      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
      return;
 800c320:	bf00      	nop
 800c322:	e000      	b.n	800c326 <HAL_UART_IRQHandler+0x642>
    return;
 800c324:	bf00      	nop
  }
}
 800c326:	37e8      	adds	r7, #232	; 0xe8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c36c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c370:	b08c      	sub	sp, #48	; 0x30
 800c372:	af00      	add	r7, sp, #0
 800c374:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	431a      	orrs	r2, r3
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	431a      	orrs	r2, r3
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	69db      	ldr	r3, [r3, #28]
 800c390:	4313      	orrs	r3, r2
 800c392:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	4baa      	ldr	r3, [pc, #680]	; (800c644 <UART_SetConfig+0x2d8>)
 800c39c:	4013      	ands	r3, r2
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	6812      	ldr	r2, [r2, #0]
 800c3a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	68da      	ldr	r2, [r3, #12]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a9f      	ldr	r2, [pc, #636]	; (800c648 <UART_SetConfig+0x2dc>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d004      	beq.n	800c3d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c3e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	6812      	ldr	r2, [r2, #0]
 800c3ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3ec:	430b      	orrs	r3, r1
 800c3ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f6:	f023 010f 	bic.w	r1, r3, #15
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	430a      	orrs	r2, r1
 800c404:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a90      	ldr	r2, [pc, #576]	; (800c64c <UART_SetConfig+0x2e0>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d125      	bne.n	800c45c <UART_SetConfig+0xf0>
 800c410:	4b8f      	ldr	r3, [pc, #572]	; (800c650 <UART_SetConfig+0x2e4>)
 800c412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c416:	f003 0303 	and.w	r3, r3, #3
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d81a      	bhi.n	800c454 <UART_SetConfig+0xe8>
 800c41e:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <UART_SetConfig+0xb8>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c435 	.word	0x0800c435
 800c428:	0800c445 	.word	0x0800c445
 800c42c:	0800c43d 	.word	0x0800c43d
 800c430:	0800c44d 	.word	0x0800c44d
 800c434:	2301      	movs	r3, #1
 800c436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c43a:	e116      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c43c:	2302      	movs	r3, #2
 800c43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c442:	e112      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c444:	2304      	movs	r3, #4
 800c446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c44a:	e10e      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c44c:	2308      	movs	r3, #8
 800c44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c452:	e10a      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c454:	2310      	movs	r3, #16
 800c456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c45a:	e106      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a7c      	ldr	r2, [pc, #496]	; (800c654 <UART_SetConfig+0x2e8>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d138      	bne.n	800c4d8 <UART_SetConfig+0x16c>
 800c466:	4b7a      	ldr	r3, [pc, #488]	; (800c650 <UART_SetConfig+0x2e4>)
 800c468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46c:	f003 030c 	and.w	r3, r3, #12
 800c470:	2b0c      	cmp	r3, #12
 800c472:	d82d      	bhi.n	800c4d0 <UART_SetConfig+0x164>
 800c474:	a201      	add	r2, pc, #4	; (adr r2, 800c47c <UART_SetConfig+0x110>)
 800c476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47a:	bf00      	nop
 800c47c:	0800c4b1 	.word	0x0800c4b1
 800c480:	0800c4d1 	.word	0x0800c4d1
 800c484:	0800c4d1 	.word	0x0800c4d1
 800c488:	0800c4d1 	.word	0x0800c4d1
 800c48c:	0800c4c1 	.word	0x0800c4c1
 800c490:	0800c4d1 	.word	0x0800c4d1
 800c494:	0800c4d1 	.word	0x0800c4d1
 800c498:	0800c4d1 	.word	0x0800c4d1
 800c49c:	0800c4b9 	.word	0x0800c4b9
 800c4a0:	0800c4d1 	.word	0x0800c4d1
 800c4a4:	0800c4d1 	.word	0x0800c4d1
 800c4a8:	0800c4d1 	.word	0x0800c4d1
 800c4ac:	0800c4c9 	.word	0x0800c4c9
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4b6:	e0d8      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4be:	e0d4      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c4c0:	2304      	movs	r3, #4
 800c4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4c6:	e0d0      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c4c8:	2308      	movs	r3, #8
 800c4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4ce:	e0cc      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c4d0:	2310      	movs	r3, #16
 800c4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4d6:	e0c8      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a5e      	ldr	r2, [pc, #376]	; (800c658 <UART_SetConfig+0x2ec>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d125      	bne.n	800c52e <UART_SetConfig+0x1c2>
 800c4e2:	4b5b      	ldr	r3, [pc, #364]	; (800c650 <UART_SetConfig+0x2e4>)
 800c4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c4ec:	2b30      	cmp	r3, #48	; 0x30
 800c4ee:	d016      	beq.n	800c51e <UART_SetConfig+0x1b2>
 800c4f0:	2b30      	cmp	r3, #48	; 0x30
 800c4f2:	d818      	bhi.n	800c526 <UART_SetConfig+0x1ba>
 800c4f4:	2b20      	cmp	r3, #32
 800c4f6:	d00a      	beq.n	800c50e <UART_SetConfig+0x1a2>
 800c4f8:	2b20      	cmp	r3, #32
 800c4fa:	d814      	bhi.n	800c526 <UART_SetConfig+0x1ba>
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <UART_SetConfig+0x19a>
 800c500:	2b10      	cmp	r3, #16
 800c502:	d008      	beq.n	800c516 <UART_SetConfig+0x1aa>
 800c504:	e00f      	b.n	800c526 <UART_SetConfig+0x1ba>
 800c506:	2300      	movs	r3, #0
 800c508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c50c:	e0ad      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c50e:	2302      	movs	r3, #2
 800c510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c514:	e0a9      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c516:	2304      	movs	r3, #4
 800c518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c51c:	e0a5      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c51e:	2308      	movs	r3, #8
 800c520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c524:	e0a1      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c526:	2310      	movs	r3, #16
 800c528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c52c:	e09d      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a4a      	ldr	r2, [pc, #296]	; (800c65c <UART_SetConfig+0x2f0>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d125      	bne.n	800c584 <UART_SetConfig+0x218>
 800c538:	4b45      	ldr	r3, [pc, #276]	; (800c650 <UART_SetConfig+0x2e4>)
 800c53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c53e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c542:	2bc0      	cmp	r3, #192	; 0xc0
 800c544:	d016      	beq.n	800c574 <UART_SetConfig+0x208>
 800c546:	2bc0      	cmp	r3, #192	; 0xc0
 800c548:	d818      	bhi.n	800c57c <UART_SetConfig+0x210>
 800c54a:	2b80      	cmp	r3, #128	; 0x80
 800c54c:	d00a      	beq.n	800c564 <UART_SetConfig+0x1f8>
 800c54e:	2b80      	cmp	r3, #128	; 0x80
 800c550:	d814      	bhi.n	800c57c <UART_SetConfig+0x210>
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <UART_SetConfig+0x1f0>
 800c556:	2b40      	cmp	r3, #64	; 0x40
 800c558:	d008      	beq.n	800c56c <UART_SetConfig+0x200>
 800c55a:	e00f      	b.n	800c57c <UART_SetConfig+0x210>
 800c55c:	2300      	movs	r3, #0
 800c55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c562:	e082      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c564:	2302      	movs	r3, #2
 800c566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c56a:	e07e      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c56c:	2304      	movs	r3, #4
 800c56e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c572:	e07a      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c574:	2308      	movs	r3, #8
 800c576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c57a:	e076      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c57c:	2310      	movs	r3, #16
 800c57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c582:	e072      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a35      	ldr	r2, [pc, #212]	; (800c660 <UART_SetConfig+0x2f4>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d12a      	bne.n	800c5e4 <UART_SetConfig+0x278>
 800c58e:	4b30      	ldr	r3, [pc, #192]	; (800c650 <UART_SetConfig+0x2e4>)
 800c590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c59c:	d01a      	beq.n	800c5d4 <UART_SetConfig+0x268>
 800c59e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5a2:	d81b      	bhi.n	800c5dc <UART_SetConfig+0x270>
 800c5a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5a8:	d00c      	beq.n	800c5c4 <UART_SetConfig+0x258>
 800c5aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5ae:	d815      	bhi.n	800c5dc <UART_SetConfig+0x270>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <UART_SetConfig+0x250>
 800c5b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b8:	d008      	beq.n	800c5cc <UART_SetConfig+0x260>
 800c5ba:	e00f      	b.n	800c5dc <UART_SetConfig+0x270>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5c2:	e052      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5ca:	e04e      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c5cc:	2304      	movs	r3, #4
 800c5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5d2:	e04a      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c5d4:	2308      	movs	r3, #8
 800c5d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5da:	e046      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c5dc:	2310      	movs	r3, #16
 800c5de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5e2:	e042      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a17      	ldr	r2, [pc, #92]	; (800c648 <UART_SetConfig+0x2dc>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d13a      	bne.n	800c664 <UART_SetConfig+0x2f8>
 800c5ee:	4b18      	ldr	r3, [pc, #96]	; (800c650 <UART_SetConfig+0x2e4>)
 800c5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c5f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5fc:	d01a      	beq.n	800c634 <UART_SetConfig+0x2c8>
 800c5fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c602:	d81b      	bhi.n	800c63c <UART_SetConfig+0x2d0>
 800c604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c608:	d00c      	beq.n	800c624 <UART_SetConfig+0x2b8>
 800c60a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c60e:	d815      	bhi.n	800c63c <UART_SetConfig+0x2d0>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d003      	beq.n	800c61c <UART_SetConfig+0x2b0>
 800c614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c618:	d008      	beq.n	800c62c <UART_SetConfig+0x2c0>
 800c61a:	e00f      	b.n	800c63c <UART_SetConfig+0x2d0>
 800c61c:	2300      	movs	r3, #0
 800c61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c622:	e022      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c624:	2302      	movs	r3, #2
 800c626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c62a:	e01e      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c62c:	2304      	movs	r3, #4
 800c62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c632:	e01a      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c634:	2308      	movs	r3, #8
 800c636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c63a:	e016      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c63c:	2310      	movs	r3, #16
 800c63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c642:	e012      	b.n	800c66a <UART_SetConfig+0x2fe>
 800c644:	cfff69f3 	.word	0xcfff69f3
 800c648:	40008000 	.word	0x40008000
 800c64c:	40013800 	.word	0x40013800
 800c650:	40021000 	.word	0x40021000
 800c654:	40004400 	.word	0x40004400
 800c658:	40004800 	.word	0x40004800
 800c65c:	40004c00 	.word	0x40004c00
 800c660:	40005000 	.word	0x40005000
 800c664:	2310      	movs	r3, #16
 800c666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4aae      	ldr	r2, [pc, #696]	; (800c928 <UART_SetConfig+0x5bc>)
 800c670:	4293      	cmp	r3, r2
 800c672:	f040 8097 	bne.w	800c7a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c67a:	2b08      	cmp	r3, #8
 800c67c:	d823      	bhi.n	800c6c6 <UART_SetConfig+0x35a>
 800c67e:	a201      	add	r2, pc, #4	; (adr r2, 800c684 <UART_SetConfig+0x318>)
 800c680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c684:	0800c6a9 	.word	0x0800c6a9
 800c688:	0800c6c7 	.word	0x0800c6c7
 800c68c:	0800c6b1 	.word	0x0800c6b1
 800c690:	0800c6c7 	.word	0x0800c6c7
 800c694:	0800c6b7 	.word	0x0800c6b7
 800c698:	0800c6c7 	.word	0x0800c6c7
 800c69c:	0800c6c7 	.word	0x0800c6c7
 800c6a0:	0800c6c7 	.word	0x0800c6c7
 800c6a4:	0800c6bf 	.word	0x0800c6bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6a8:	f7ff f80c 	bl	800b6c4 <HAL_RCC_GetPCLK1Freq>
 800c6ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c6ae:	e010      	b.n	800c6d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6b0:	4b9e      	ldr	r3, [pc, #632]	; (800c92c <UART_SetConfig+0x5c0>)
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c6b4:	e00d      	b.n	800c6d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6b6:	f7fe ff97 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800c6ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c6bc:	e009      	b.n	800c6d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c6c4:	e005      	b.n	800c6d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c6d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 8130 	beq.w	800c93a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	4a94      	ldr	r2, [pc, #592]	; (800c930 <UART_SetConfig+0x5c4>)
 800c6e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	4413      	add	r3, r2
 800c6f8:	69ba      	ldr	r2, [r7, #24]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d305      	bcc.n	800c70a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c704:	69ba      	ldr	r2, [r7, #24]
 800c706:	429a      	cmp	r2, r3
 800c708:	d903      	bls.n	800c712 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c710:	e113      	b.n	800c93a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c714:	2200      	movs	r2, #0
 800c716:	60bb      	str	r3, [r7, #8]
 800c718:	60fa      	str	r2, [r7, #12]
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	4a84      	ldr	r2, [pc, #528]	; (800c930 <UART_SetConfig+0x5c4>)
 800c720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c724:	b29b      	uxth	r3, r3
 800c726:	2200      	movs	r2, #0
 800c728:	603b      	str	r3, [r7, #0]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c730:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c734:	f7f4 fad0 	bl	8000cd8 <__aeabi_uldivmod>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4610      	mov	r0, r2
 800c73e:	4619      	mov	r1, r3
 800c740:	f04f 0200 	mov.w	r2, #0
 800c744:	f04f 0300 	mov.w	r3, #0
 800c748:	020b      	lsls	r3, r1, #8
 800c74a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c74e:	0202      	lsls	r2, r0, #8
 800c750:	6979      	ldr	r1, [r7, #20]
 800c752:	6849      	ldr	r1, [r1, #4]
 800c754:	0849      	lsrs	r1, r1, #1
 800c756:	2000      	movs	r0, #0
 800c758:	460c      	mov	r4, r1
 800c75a:	4605      	mov	r5, r0
 800c75c:	eb12 0804 	adds.w	r8, r2, r4
 800c760:	eb43 0905 	adc.w	r9, r3, r5
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	469a      	mov	sl, r3
 800c76c:	4693      	mov	fp, r2
 800c76e:	4652      	mov	r2, sl
 800c770:	465b      	mov	r3, fp
 800c772:	4640      	mov	r0, r8
 800c774:	4649      	mov	r1, r9
 800c776:	f7f4 faaf 	bl	8000cd8 <__aeabi_uldivmod>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	4613      	mov	r3, r2
 800c780:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c788:	d308      	bcc.n	800c79c <UART_SetConfig+0x430>
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c790:	d204      	bcs.n	800c79c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6a3a      	ldr	r2, [r7, #32]
 800c798:	60da      	str	r2, [r3, #12]
 800c79a:	e0ce      	b.n	800c93a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c7a2:	e0ca      	b.n	800c93a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7ac:	d166      	bne.n	800c87c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c7ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7b2:	2b08      	cmp	r3, #8
 800c7b4:	d827      	bhi.n	800c806 <UART_SetConfig+0x49a>
 800c7b6:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <UART_SetConfig+0x450>)
 800c7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7bc:	0800c7e1 	.word	0x0800c7e1
 800c7c0:	0800c7e9 	.word	0x0800c7e9
 800c7c4:	0800c7f1 	.word	0x0800c7f1
 800c7c8:	0800c807 	.word	0x0800c807
 800c7cc:	0800c7f7 	.word	0x0800c7f7
 800c7d0:	0800c807 	.word	0x0800c807
 800c7d4:	0800c807 	.word	0x0800c807
 800c7d8:	0800c807 	.word	0x0800c807
 800c7dc:	0800c7ff 	.word	0x0800c7ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7e0:	f7fe ff70 	bl	800b6c4 <HAL_RCC_GetPCLK1Freq>
 800c7e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c7e6:	e014      	b.n	800c812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7e8:	f7fe ff82 	bl	800b6f0 <HAL_RCC_GetPCLK2Freq>
 800c7ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c7ee:	e010      	b.n	800c812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7f0:	4b4e      	ldr	r3, [pc, #312]	; (800c92c <UART_SetConfig+0x5c0>)
 800c7f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c7f4:	e00d      	b.n	800c812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7f6:	f7fe fef7 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800c7fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c7fc:	e009      	b.n	800c812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c804:	e005      	b.n	800c812 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 8090 	beq.w	800c93a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81e:	4a44      	ldr	r2, [pc, #272]	; (800c930 <UART_SetConfig+0x5c4>)
 800c820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c824:	461a      	mov	r2, r3
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	fbb3 f3f2 	udiv	r3, r3, r2
 800c82c:	005a      	lsls	r2, r3, #1
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	085b      	lsrs	r3, r3, #1
 800c834:	441a      	add	r2, r3
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c83e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	2b0f      	cmp	r3, #15
 800c844:	d916      	bls.n	800c874 <UART_SetConfig+0x508>
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c84c:	d212      	bcs.n	800c874 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c84e:	6a3b      	ldr	r3, [r7, #32]
 800c850:	b29b      	uxth	r3, r3
 800c852:	f023 030f 	bic.w	r3, r3, #15
 800c856:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	085b      	lsrs	r3, r3, #1
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	f003 0307 	and.w	r3, r3, #7
 800c862:	b29a      	uxth	r2, r3
 800c864:	8bfb      	ldrh	r3, [r7, #30]
 800c866:	4313      	orrs	r3, r2
 800c868:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	8bfa      	ldrh	r2, [r7, #30]
 800c870:	60da      	str	r2, [r3, #12]
 800c872:	e062      	b.n	800c93a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c87a:	e05e      	b.n	800c93a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c87c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c880:	2b08      	cmp	r3, #8
 800c882:	d828      	bhi.n	800c8d6 <UART_SetConfig+0x56a>
 800c884:	a201      	add	r2, pc, #4	; (adr r2, 800c88c <UART_SetConfig+0x520>)
 800c886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88a:	bf00      	nop
 800c88c:	0800c8b1 	.word	0x0800c8b1
 800c890:	0800c8b9 	.word	0x0800c8b9
 800c894:	0800c8c1 	.word	0x0800c8c1
 800c898:	0800c8d7 	.word	0x0800c8d7
 800c89c:	0800c8c7 	.word	0x0800c8c7
 800c8a0:	0800c8d7 	.word	0x0800c8d7
 800c8a4:	0800c8d7 	.word	0x0800c8d7
 800c8a8:	0800c8d7 	.word	0x0800c8d7
 800c8ac:	0800c8cf 	.word	0x0800c8cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8b0:	f7fe ff08 	bl	800b6c4 <HAL_RCC_GetPCLK1Freq>
 800c8b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8b6:	e014      	b.n	800c8e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8b8:	f7fe ff1a 	bl	800b6f0 <HAL_RCC_GetPCLK2Freq>
 800c8bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8be:	e010      	b.n	800c8e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8c0:	4b1a      	ldr	r3, [pc, #104]	; (800c92c <UART_SetConfig+0x5c0>)
 800c8c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8c4:	e00d      	b.n	800c8e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8c6:	f7fe fe8f 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800c8ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8cc:	e009      	b.n	800c8e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8d4:	e005      	b.n	800c8e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c8e0:	bf00      	nop
    }

    if (pclk != 0U)
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d028      	beq.n	800c93a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	4a10      	ldr	r2, [pc, #64]	; (800c930 <UART_SetConfig+0x5c4>)
 800c8ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	085b      	lsrs	r3, r3, #1
 800c900:	441a      	add	r2, r3
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	fbb2 f3f3 	udiv	r3, r2, r3
 800c90a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	2b0f      	cmp	r3, #15
 800c910:	d910      	bls.n	800c934 <UART_SetConfig+0x5c8>
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c918:	d20c      	bcs.n	800c934 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60da      	str	r2, [r3, #12]
 800c924:	e009      	b.n	800c93a <UART_SetConfig+0x5ce>
 800c926:	bf00      	nop
 800c928:	40008000 	.word	0x40008000
 800c92c:	00f42400 	.word	0x00f42400
 800c930:	0801510c 	.word	0x0801510c
      }
      else
      {
        ret = HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2201      	movs	r2, #1
 800c946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2200      	movs	r2, #0
 800c94e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2200      	movs	r2, #0
 800c954:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c956:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3730      	adds	r7, #48	; 0x30
 800c95e:	46bd      	mov	sp, r7
 800c960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c970:	f003 0308 	and.w	r3, r3, #8
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00a      	beq.n	800c98e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	430a      	orrs	r2, r1
 800c98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c992:	f003 0301 	and.w	r3, r3, #1
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b4:	f003 0302 	and.w	r3, r3, #2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00a      	beq.n	800c9d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	430a      	orrs	r2, r1
 800c9d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00a      	beq.n	800c9f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f8:	f003 0310 	and.w	r3, r3, #16
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1a:	f003 0320 	and.w	r3, r3, #32
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00a      	beq.n	800ca38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d01a      	beq.n	800ca7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca62:	d10a      	bne.n	800ca7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	430a      	orrs	r2, r1
 800ca78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00a      	beq.n	800ca9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	430a      	orrs	r2, r1
 800ca9a:	605a      	str	r2, [r3, #4]
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b098      	sub	sp, #96	; 0x60
 800caac:	af02      	add	r7, sp, #8
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cab8:	f7fb fc14 	bl	80082e4 <HAL_GetTick>
 800cabc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0308 	and.w	r3, r3, #8
 800cac8:	2b08      	cmp	r3, #8
 800caca:	d12f      	bne.n	800cb2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cacc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad4:	2200      	movs	r2, #0
 800cad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f88e 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d022      	beq.n	800cb2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	e853 3f00 	ldrex	r3, [r3]
 800caf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800caf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cafa:	653b      	str	r3, [r7, #80]	; 0x50
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb04:	647b      	str	r3, [r7, #68]	; 0x44
 800cb06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb0c:	e841 2300 	strex	r3, r2, [r1]
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1e6      	bne.n	800cae6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2220      	movs	r2, #32
 800cb1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e063      	b.n	800cbf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0304 	and.w	r3, r3, #4
 800cb36:	2b04      	cmp	r3, #4
 800cb38:	d149      	bne.n	800cbce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb42:	2200      	movs	r2, #0
 800cb44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f857 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d03c      	beq.n	800cbce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	e853 3f00 	ldrex	r3, [r3]
 800cb60:	623b      	str	r3, [r7, #32]
   return(result);
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb72:	633b      	str	r3, [r7, #48]	; 0x30
 800cb74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e6      	bne.n	800cb54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3308      	adds	r3, #8
 800cb8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	e853 3f00 	ldrex	r3, [r3]
 800cb94:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f023 0301 	bic.w	r3, r3, #1
 800cb9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3308      	adds	r3, #8
 800cba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cba6:	61fa      	str	r2, [r7, #28]
 800cba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbaa:	69b9      	ldr	r1, [r7, #24]
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	e841 2300 	strex	r3, r2, [r1]
 800cbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1e5      	bne.n	800cb86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2220      	movs	r2, #32
 800cbbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	e012      	b.n	800cbf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2220      	movs	r2, #32
 800cbd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3758      	adds	r7, #88	; 0x58
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc0c:	e04f      	b.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc14:	d04b      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc16:	f7fb fb65 	bl	80082e4 <HAL_GetTick>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d302      	bcc.n	800cc2c <UART_WaitOnFlagUntilTimeout+0x30>
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e04e      	b.n	800ccce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0304 	and.w	r3, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d037      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b80      	cmp	r3, #128	; 0x80
 800cc42:	d034      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b40      	cmp	r3, #64	; 0x40
 800cc48:	d031      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	69db      	ldr	r3, [r3, #28]
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b08      	cmp	r3, #8
 800cc56:	d110      	bne.n	800cc7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2208      	movs	r2, #8
 800cc5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 f838 	bl	800ccd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2208      	movs	r2, #8
 800cc6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e029      	b.n	800ccce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc88:	d111      	bne.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 f81e 	bl	800ccd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e00f      	b.n	800ccce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	69da      	ldr	r2, [r3, #28]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	bf0c      	ite	eq
 800ccbe:	2301      	moveq	r3, #1
 800ccc0:	2300      	movne	r3, #0
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d0a0      	beq.n	800cc0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b095      	sub	sp, #84	; 0x54
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce6:	e853 3f00 	ldrex	r3, [r3]
 800ccea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccfc:	643b      	str	r3, [r7, #64]	; 0x40
 800ccfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd04:	e841 2300 	strex	r3, r2, [r1]
 800cd08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e6      	bne.n	800ccde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3308      	adds	r3, #8
 800cd16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd18:	6a3b      	ldr	r3, [r7, #32]
 800cd1a:	e853 3f00 	ldrex	r3, [r3]
 800cd1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd26:	f023 0301 	bic.w	r3, r3, #1
 800cd2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3308      	adds	r3, #8
 800cd32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd34:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd3c:	e841 2300 	strex	r3, r2, [r1]
 800cd40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1e3      	bne.n	800cd10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d118      	bne.n	800cd82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	e853 3f00 	ldrex	r3, [r3]
 800cd5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	f023 0310 	bic.w	r3, r3, #16
 800cd64:	647b      	str	r3, [r7, #68]	; 0x44
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd6e:	61bb      	str	r3, [r7, #24]
 800cd70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd72:	6979      	ldr	r1, [r7, #20]
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	e841 2300 	strex	r3, r2, [r1]
 800cd7a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1e6      	bne.n	800cd50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2220      	movs	r2, #32
 800cd86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cd96:	bf00      	nop
 800cd98:	3754      	adds	r7, #84	; 0x54
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff fabd 	bl	800c340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdc6:	bf00      	nop
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b088      	sub	sp, #32
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	e853 3f00 	ldrex	r3, [r3]
 800cde2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdea:	61fb      	str	r3, [r7, #28]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	61bb      	str	r3, [r7, #24]
 800cdf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf8:	6979      	ldr	r1, [r7, #20]
 800cdfa:	69ba      	ldr	r2, [r7, #24]
 800cdfc:	e841 2300 	strex	r3, r2, [r1]
 800ce00:	613b      	str	r3, [r7, #16]
   return(result);
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1e6      	bne.n	800cdd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2220      	movs	r2, #32
 800ce0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff fa88 	bl	800c32c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce1c:	bf00      	nop
 800ce1e:	3720      	adds	r7, #32
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce2c:	bf00      	nop
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d101      	bne.n	800ce76 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce72:	2302      	movs	r3, #2
 800ce74:	e027      	b.n	800cec6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2224      	movs	r2, #36	; 0x24
 800ce82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f022 0201 	bic.w	r2, r2, #1
 800ce9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cea4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d101      	bne.n	800ceea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cee6:	2302      	movs	r3, #2
 800cee8:	e02d      	b.n	800cf46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2224      	movs	r2, #36	; 0x24
 800cef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f022 0201 	bic.w	r2, r2, #1
 800cf10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f850 	bl	800cfcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2220      	movs	r2, #32
 800cf38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d101      	bne.n	800cf66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf62:	2302      	movs	r3, #2
 800cf64:	e02d      	b.n	800cfc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2224      	movs	r2, #36	; 0x24
 800cf72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f022 0201 	bic.w	r2, r2, #1
 800cf8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	430a      	orrs	r2, r1
 800cfa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f812 	bl	800cfcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d108      	bne.n	800cfee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfec:	e031      	b.n	800d052 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfee:	2308      	movs	r3, #8
 800cff0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cff2:	2308      	movs	r3, #8
 800cff4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	0e5b      	lsrs	r3, r3, #25
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	f003 0307 	and.w	r3, r3, #7
 800d004:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	0f5b      	lsrs	r3, r3, #29
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f003 0307 	and.w	r3, r3, #7
 800d014:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d016:	7bbb      	ldrb	r3, [r7, #14]
 800d018:	7b3a      	ldrb	r2, [r7, #12]
 800d01a:	4911      	ldr	r1, [pc, #68]	; (800d060 <UARTEx_SetNbDataToProcess+0x94>)
 800d01c:	5c8a      	ldrb	r2, [r1, r2]
 800d01e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d022:	7b3a      	ldrb	r2, [r7, #12]
 800d024:	490f      	ldr	r1, [pc, #60]	; (800d064 <UARTEx_SetNbDataToProcess+0x98>)
 800d026:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d028:	fb93 f3f2 	sdiv	r3, r3, r2
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	7b7a      	ldrb	r2, [r7, #13]
 800d038:	4909      	ldr	r1, [pc, #36]	; (800d060 <UARTEx_SetNbDataToProcess+0x94>)
 800d03a:	5c8a      	ldrb	r2, [r1, r2]
 800d03c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d040:	7b7a      	ldrb	r2, [r7, #13]
 800d042:	4908      	ldr	r1, [pc, #32]	; (800d064 <UARTEx_SetNbDataToProcess+0x98>)
 800d044:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d046:	fb93 f3f2 	sdiv	r3, r3, r2
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d052:	bf00      	nop
 800d054:	3714      	adds	r7, #20
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	08015124 	.word	0x08015124
 800d064:	0801512c 	.word	0x0801512c

0800d068 <_ZN17AbstractAllocatorD1Ev>:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	4a04      	ldr	r2, [pc, #16]	; (800d084 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	080150b8 	.word	0x080150b8

0800d088 <_ZN17AbstractAllocatorD0Ev>:
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ffe9 	bl	800d068 <_ZN17AbstractAllocatorD1Ev>
 800d096:	2108      	movs	r1, #8
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f002 fe54 	bl	800fd46 <_ZdlPvj>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include "sys_allocator.h"
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f002 fe9f 	bl	800fdf8 <malloc>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d105      	bne.n	800d0d0 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	3310      	adds	r3, #16
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7f9 fb51 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 800d0d0:	697b      	ldr	r3, [r7, #20]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3718      	adds	r7, #24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b084      	sub	sp, #16
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	60f8      	str	r0, [r7, #12]
 800d0e2:	60b9      	str	r1, [r7, #8]
 800d0e4:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f002 fe8e 	bl	800fe08 <free>
}
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	4a05      	ldr	r2, [pc, #20]	; (800d114 <_ZN15SystemAllocatorD1Ev+0x20>)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff ffaf 	bl	800d068 <_ZN17AbstractAllocatorD1Ev>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	0801513c 	.word	0x0801513c

0800d118 <_ZN15SystemAllocatorD0Ev>:
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7ff ffe7 	bl	800d0f4 <_ZN15SystemAllocatorD1Ev>
 800d126:	2108      	movs	r1, #8
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f002 fe0c 	bl	800fd46 <_ZdlPvj>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800d138:	b590      	push	{r4, r7, lr}
 800d13a:	b08b      	sub	sp, #44	; 0x2c
 800d13c:	af04      	add	r7, sp, #16
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3304      	adds	r3, #4
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 f876 	bl	800d23a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800d14e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800d150:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	3304      	adds	r3, #4
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 f86e 	bl	800d23a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800d15e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800d160:	f103 0120 	add.w	r1, r3, #32
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	9302      	str	r3, [sp, #8]
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d174:	4620      	mov	r0, r4
 800d176:	f002 fb3f 	bl	800f7f8 <canardTxPush>
 800d17a:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	f113 0f03 	cmn.w	r3, #3
 800d182:	d106      	bne.n	800d192 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	3310      	adds	r3, #16
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7f9 faf1 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800d190:	e008      	b.n	800d1a4 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2b00      	cmp	r3, #0
 800d196:	da05      	bge.n	800d1a4 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	3310      	adds	r3, #16
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f9 fae7 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800d1a4:	371c      	adds	r7, #28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd90      	pop	{r4, r7, pc}
	...

0800d1ac <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 800d1ac:	b590      	push	{r4, r7, lr}
 800d1ae:	b089      	sub	sp, #36	; 0x24
 800d1b0:	af04      	add	r7, sp, #16
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	607a      	str	r2, [r7, #4]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	817b      	strh	r3, [r7, #10]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 f838 	bl	800d23a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800d1ca:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 800d1cc:	f103 0020 	add.w	r0, r3, #32
 800d1d0:	897c      	ldrh	r4, [r7, #10]
 800d1d2:	7a79      	ldrb	r1, [r7, #9]
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	9302      	str	r3, [sp, #8]
 800d1d8:	4a0d      	ldr	r2, [pc, #52]	; (800d210 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800d1da:	f04f 0300 	mov.w	r3, #0
 800d1de:	e9cd 2300 	strd	r2, r3, [sp]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	f002 fc57 	bl	800fa98 <canardRxSubscribe>
 800d1ea:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	bf14      	ite	ne
 800d1f0:	2301      	movne	r3, #1
 800d1f2:	2300      	moveq	r3, #0
 800d1f4:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	3310      	adds	r3, #16
 800d200:	4618      	mov	r0, r3
 800d202:	f7f9 fab6 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800d206:	bf00      	nop
 800d208:	3714      	adds	r7, #20
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd90      	pop	{r4, r7, pc}
 800d20e:	bf00      	nop
 800d210:	001e8480 	.word	0x001e8480

0800d214 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	3304      	adds	r3, #4
 800d220:	4618      	mov	r0, r3
 800d222:	f000 f80a 	bl	800d23a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800d226:	4603      	mov	r3, r0
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	3208      	adds	r2, #8
 800d22c:	6812      	ldr	r2, [r2, #0]
 800d22e:	4618      	mov	r0, r3
 800d230:	4790      	blx	r2
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
	return get();
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f805 	bl	800d252 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800d248:	4603      	mov	r3, r0
      }
 800d24a:	4618      	mov	r0, r3
 800d24c:	3708      	adds	r7, #8
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 f805 	bl	800d26c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800d262:	4603      	mov	r3, r0
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4618      	mov	r0, r3
 800d278:	f000 f806 	bl	800d288 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d27c:	4603      	mov	r3, r0
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4618      	mov	r0, r3
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4618      	mov	r0, r3
 800d294:	f000 f805 	bl	800d2a2 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d298:	4603      	mov	r3, r0
 800d29a:	4618      	mov	r0, r3
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f805 	bl	800d2ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b082      	sub	sp, #8
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 f805 	bl	800d2d4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 800d2ea:	b480      	push	{r7}
 800d2ec:	b085      	sub	sp, #20
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	0c1b      	lsrs	r3, r3, #16
 800d2f6:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	2b08      	cmp	r3, #8
 800d2fc:	d801      	bhi.n	800d302 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	e009      	b.n	800d316 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 800d302:	7bfb      	ldrb	r3, [r7, #15]
 800d304:	2b0c      	cmp	r3, #12
 800d306:	d803      	bhi.n	800d310 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	3b06      	subs	r3, #6
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	e002      	b.n	800d316 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 800d310:	7bfb      	ldrb	r3, [r7, #15]
 800d312:	3b0b      	subs	r3, #11
 800d314:	011b      	lsls	r3, r3, #4
}
 800d316:	4618      	mov	r0, r3
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
	...

0800d324 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 800d324:	f1a0 0308 	sub.w	r3, r0, #8
 800d328:	4a07      	ldr	r2, [pc, #28]	; (800d348 <_ZL12delay_cyclest+0x24>)
 800d32a:	fb82 1203 	smull	r1, r2, r2, r3
 800d32e:	17db      	asrs	r3, r3, #31
 800d330:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 800d334:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d338:	d004      	beq.n	800d344 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800d33a:	bf00      	nop
    while (real_cycles--) {
 800d33c:	3b01      	subs	r3, #1
 800d33e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d342:	d1fa      	bne.n	800d33a <_ZL12delay_cyclest+0x16>
    }
}
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	66666667 	.word	0x66666667

0800d34c <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include "FDCAN_generic.h"

uint32_t G4CAN::len_to_dlc(size_t len) {
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800d356:	4a05      	ldr	r2, [pc, #20]	; (800d36c <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	0801514c 	.word	0x0801514c

0800d370 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800d37a:	6838      	ldr	r0, [r7, #0]
 800d37c:	f7ff ffb5 	bl	800d2ea <_Z16fdcan_dlc_to_lenm>
 800d380:	4603      	mov	r3, r0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b086      	sub	sp, #24
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800d392:	e017      	b.n	800d3c4 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	330c      	adds	r3, #12
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f107 0208 	add.w	r2, r7, #8
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	4798      	blx	r3
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	f083 0301 	eor.w	r3, r3, #1
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d115      	bne.n	800d3e2 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f107 0208 	add.w	r2, r7, #8
 800d3bc:	4611      	mov	r1, r2
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 f8e2 	bl	800d588 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c8:	2140      	movs	r1, #64	; 0x40
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fb fe9c 	bl	8009108 <HAL_FDCAN_GetRxFifoFillLevel>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	bf14      	ite	ne
 800d3d6:	2301      	movne	r3, #1
 800d3d8:	2300      	moveq	r3, #0
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1d9      	bne.n	800d394 <_ZN5G4CAN8can_loopEv+0xa>
 800d3e0:	e000      	b.n	800d3e4 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 800d3e2:	bf00      	nop
    }

    process_canard_tx();
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 f92e 	bl	800d648 <_ZN19AbstractCANProvider17process_canard_txEv>
}
 800d3ec:	bf00      	nop
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};

bool G4CAN::read_frame(CanardFrame* rxf) {
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08e      	sub	sp, #56	; 0x38
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
    // may want to check 2 FIFOs in the future
    uint32_t rx_fifo = -1;
 800d3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d402:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d408:	2140      	movs	r1, #64	; 0x40
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fb fe7c 	bl	8009108 <HAL_FDCAN_GetRxFifoFillLevel>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	bf14      	ite	ne
 800d416:	2301      	movne	r3, #1
 800d418:	2300      	moveq	r3, #0
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d002      	beq.n	800d426 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 800d420:	2340      	movs	r3, #64	; 0x40
 800d422:	637b      	str	r3, [r7, #52]	; 0x34
 800d424:	e00f      	b.n	800d446 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	2141      	movs	r1, #65	; 0x41
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fb fe6b 	bl	8009108 <HAL_FDCAN_GetRxFifoFillLevel>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	bf14      	ite	ne
 800d438:	2301      	movne	r3, #1
 800d43a:	2300      	moveq	r3, #0
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d001      	beq.n	800d446 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 800d442:	2341      	movs	r3, #65	; 0x41
 800d444:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800d446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44c:	d101      	bne.n	800d452 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 800d44e:	2300      	movs	r3, #0
 800d450:	e02e      	b.n	800d4b0 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 800d452:	f107 030c 	add.w	r3, r7, #12
 800d456:	2228      	movs	r2, #40	; 0x28
 800d458:	2100      	movs	r1, #0
 800d45a:	4618      	mov	r0, r3
 800d45c:	f003 fd5f 	bl	8010f1e <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d464:	f107 020c 	add.w	r2, r7, #12
 800d468:	4b13      	ldr	r3, [pc, #76]	; (800d4b8 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800d46a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d46c:	f7fb fd72 	bl	8008f54 <HAL_FDCAN_GetRxMessage>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	bf14      	ite	ne
 800d476:	2301      	movne	r3, #1
 800d478:	2300      	moveq	r3, #0
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d005      	beq.n	800d48c <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d484:	3310      	adds	r3, #16
 800d486:	4618      	mov	r0, r3
 800d488:	f7f9 f973 	bl	8006772 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3304      	adds	r3, #4
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	69ba      	ldr	r2, [r7, #24]
 800d49c:	4611      	mov	r1, r2
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	4798      	blx	r3
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	4a03      	ldr	r2, [pc, #12]	; (800d4b8 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800d4ac:	609a      	str	r2, [r3, #8]
    return true;
 800d4ae:	2301      	movs	r3, #1
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3738      	adds	r7, #56	; 0x38
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	20000678 	.word	0x20000678

0800d4bc <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08c      	sub	sp, #48	; 0x30
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800d4cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4d0:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	4a2a      	ldr	r2, [pc, #168]	; (800d584 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800d4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4e0:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800d4e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d4ea:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800d4ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d4f0:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800d4f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d4f6:	627b      	str	r3, [r7, #36]	; 0x24
    TxHeader.MessageMarker = 0x0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	62bb      	str	r3, [r7, #40]	; 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d500:	e006      	b.n	800d510 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 800d502:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800d506:	f7ff ff0d 	bl	800d324 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	3301      	adds	r3, #1
 800d50e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d514:	4618      	mov	r0, r3
 800d516:	f7fb fe15 	bl	8009144 <HAL_FDCAN_GetTxFifoFreeLevel>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	d004      	beq.n	800d52a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d522:	2b02      	cmp	r3, #2
 800d524:	dc01      	bgt.n	800d52a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800d526:	2301      	movs	r3, #1
 800d528:	e000      	b.n	800d52c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800d52a:	2300      	movs	r3, #0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1e8      	bne.n	800d502 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d534:	4618      	mov	r0, r3
 800d536:	f7fb fe05 	bl	8009144 <HAL_FDCAN_GetTxFifoFreeLevel>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	bf14      	ite	ne
 800d540:	2301      	movne	r3, #1
 800d542:	2300      	moveq	r3, #0
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800d54a:	f04f 33ff 	mov.w	r3, #4294967295
 800d54e:	e014      	b.n	800d57a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d558:	f107 0308 	add.w	r3, r7, #8
 800d55c:	4619      	mov	r1, r3
 800d55e:	f7fb fcb5 	bl	8008ecc <HAL_FDCAN_AddMessageToTxFifoQ>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	bf14      	ite	ne
 800d568:	2301      	movne	r3, #1
 800d56a:	2300      	moveq	r3, #0
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 800d572:	f04f 33ff 	mov.w	r3, #4294967295
 800d576:	e000      	b.n	800d57a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800d578:	697b      	ldr	r3, [r7, #20]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3730      	adds	r7, #48	; 0x30
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	0801514c 	.word	0x0801514c

0800d588 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800d588:	b590      	push	{r4, r7, lr}
 800d58a:	b093      	sub	sp, #76	; 0x4c
 800d58c:	af04      	add	r7, sp, #16
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 800d592:	f107 0310 	add.w	r3, r7, #16
 800d596:	2200      	movs	r2, #0
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	605a      	str	r2, [r3, #4]
 800d59c:	609a      	str	r2, [r3, #8]
 800d59e:	60da      	str	r2, [r3, #12]
 800d5a0:	611a      	str	r2, [r3, #16]
 800d5a2:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	60fb      	str	r3, [r7, #12]
    void (*processor)(CanardRxTransfer*) = nullptr;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	637b      	str	r3, [r7, #52]	; 0x34
    IListener<CanardRxTransfer*>* listener = nullptr;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	633b      	str	r3, [r7, #48]	; 0x30

    const int8_t accept_result = canardRxAccept(
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    const int8_t accept_result = canardRxAccept(
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7f9 fbb6 	bl	8006d2c <_ZNKSt8functionIFyvEEclEv>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	f107 010c 	add.w	r1, r7, #12
 800d5c8:	9103      	str	r1, [sp, #12]
 800d5ca:	f107 0110 	add.w	r1, r7, #16
 800d5ce:	9102      	str	r1, [sp, #8]
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	9101      	str	r1, [sp, #4]
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	9100      	str	r1, [sp, #0]
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f002 f9cd 	bl	800f978 <canardRxAccept>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 0 || accept_result > 1) {
 800d5e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d029      	beq.n	800d640 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
 800d5ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	dc25      	bgt.n	800d640 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }
    if (accept_result < 0) goto exit;
 800d5f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	db11      	blt.n	800d620 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x98>
    if (subscription == nullptr) goto exit;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d010      	beq.n	800d624 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x9c>

    listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6a1b      	ldr	r3, [r3, #32]
 800d606:	633b      	str	r3, [r7, #48]	; 0x30
    if (listener == nullptr) goto exit;
 800d608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00c      	beq.n	800d628 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
    listener->accept(&transfer);
 800d60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f107 0210 	add.w	r2, r7, #16
 800d618:	4611      	mov	r1, r2
 800d61a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d61c:	4798      	blx	r3
 800d61e:	e004      	b.n	800d62a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (accept_result < 0) goto exit;
 800d620:	bf00      	nop
 800d622:	e002      	b.n	800d62a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (subscription == nullptr) goto exit;
 800d624:	bf00      	nop
 800d626:	e000      	b.n	800d62a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (listener == nullptr) goto exit;
 800d628:	bf00      	nop

exit:
    if (transfer.payload != nullptr) {
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d008      	beq.n	800d642 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        canard.memory_free(&canard, transfer.payload);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	3220      	adds	r2, #32
 800d638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d63a:	4610      	mov	r0, r2
 800d63c:	4798      	blx	r3
 800d63e:	e000      	b.n	800d642 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        return;
 800d640:	bf00      	nop
    }
}
 800d642:	373c      	adds	r7, #60	; 0x3c
 800d644:	46bd      	mov	sp, r7
 800d646:	bd90      	pop	{r4, r7, pc}

0800d648 <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800d648:	b5b0      	push	{r4, r5, r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 800d650:	e036      	b.n	800d6c0 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	330c      	adds	r3, #12
 800d656:	4618      	mov	r0, r3
 800d658:	f002 f958 	bl	800f90c <canardTxPeek>
 800d65c:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d664:	4313      	orrs	r3, r2
 800d666:	d00c      	beq.n	800d682 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	4618      	mov	r0, r3
 800d674:	f7f9 fb5a 	bl	8006d2c <_ZNKSt8functionIFyvEEclEv>
 800d678:	4602      	mov	r2, r0
 800d67a:	460b      	mov	r3, r1
 800d67c:	42a2      	cmp	r2, r4
 800d67e:	41ab      	sbcs	r3, r5
 800d680:	d201      	bcs.n	800d686 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800d682:	2301      	movs	r3, #1
 800d684:	e000      	b.n	800d688 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800d686:	2300      	movs	r3, #0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00a      	beq.n	800d6a2 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3310      	adds	r3, #16
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68f9      	ldr	r1, [r7, #12]
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	4798      	blx	r3
 800d69a:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	db13      	blt.n	800d6ca <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f103 0520 	add.w	r5, r3, #32
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	330c      	adds	r3, #12
 800d6b0:	68f9      	ldr	r1, [r7, #12]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f002 f93f 	bl	800f936 <canardTxPop>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	4628      	mov	r0, r5
 800d6be:	47a0      	blx	r4
    while (queue.size != 0) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	695b      	ldr	r3, [r3, #20]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1c4      	bne.n	800d652 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 800d6c8:	e000      	b.n	800d6cc <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 800d6ca:	bf00      	nop
}
 800d6cc:	bf00      	nop
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bdb0      	pop	{r4, r5, r7, pc}

0800d6d4 <_Z41__static_initialization_and_destruction_0ii>:
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d107      	bne.n	800d6f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d102      	bne.n	800d6f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800d6ee:	4803      	ldr	r0, [pc, #12]	; (800d6fc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800d6f0:	f000 f806 	bl	800d700 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800d6f4:	bf00      	nop
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	200006b8 	.word	0x200006b8

0800d700 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800d700:	b590      	push	{r4, r7, lr}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fa f8bc 	bl	8007888 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800d710:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00c      	beq.n	800d734 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7f9 ff31 	bl	8007582 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800d720:	4604      	mov	r4, r0
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f7f9 ffdb 	bl	80076de <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800d728:	4603      	mov	r3, r0
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4619      	mov	r1, r3
 800d72e:	4620      	mov	r0, r4
 800d730:	f7fa f8b7 	bl	80078a2 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2200      	movs	r2, #0
 800d738:	601a      	str	r2, [r3, #0]
      }
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	bd90      	pop	{r4, r7, pc}

0800d744 <_GLOBAL__sub_I_queue>:
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0
 800d748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d74c:	2001      	movs	r0, #1
 800d74e:	f7ff ffc1 	bl	800d6d4 <_Z41__static_initialization_and_destruction_0ii>
 800d752:	bd80      	pop	{r7, pc}

0800d754 <_GLOBAL__sub_D_queue>:
 800d754:	b580      	push	{r7, lr}
 800d756:	af00      	add	r7, sp, #0
 800d758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d75c:	2000      	movs	r0, #0
 800d75e:	f7ff ffb9 	bl	800d6d4 <_Z41__static_initialization_and_destruction_0ii>
 800d762:	bd80      	pop	{r7, pc}

0800d764 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	460b      	mov	r3, r1
 800d76e:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800d770:	2300      	movs	r3, #0
 800d772:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800d778:	e007      	b.n	800d78a <cavlFindExtremum+0x26>
    {
        result = c;
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800d77e:	78fb      	ldrb	r3, [r7, #3]
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1f4      	bne.n	800d77a <cavlFindExtremum+0x16>
    }
    return result;
 800d790:	68fb      	ldr	r3, [r7, #12]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3714      	adds	r7, #20
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
	...

0800d7a0 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d014      	beq.n	800d7dc <cavlPrivateRotate+0x3c>
 800d7b2:	78fb      	ldrb	r3, [r7, #3]
 800d7b4:	f083 0301 	eor.w	r3, r3, #1
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	4413      	add	r3, r2
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00a      	beq.n	800d7dc <cavlPrivateRotate+0x3c>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d0:	db04      	blt.n	800d7dc <cavlPrivateRotate+0x3c>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	dd05      	ble.n	800d7e8 <cavlPrivateRotate+0x48>
 800d7dc:	4b2a      	ldr	r3, [pc, #168]	; (800d888 <cavlPrivateRotate+0xe8>)
 800d7de:	4a2b      	ldr	r2, [pc, #172]	; (800d88c <cavlPrivateRotate+0xec>)
 800d7e0:	2162      	movs	r1, #98	; 0x62
 800d7e2:	482b      	ldr	r0, [pc, #172]	; (800d890 <cavlPrivateRotate+0xf0>)
 800d7e4:	f002 fad8 	bl	800fd98 <__assert_func>
    Cavl* const z = x->lr[!r];
 800d7e8:	78fb      	ldrb	r3, [r7, #3]
 800d7ea:	f083 0301 	eor.w	r3, r3, #1
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00e      	beq.n	800d820 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	4299      	cmp	r1, r3
 800d810:	bf0c      	ite	eq
 800d812:	2301      	moveq	r3, #1
 800d814:	2300      	movne	r3, #0
 800d816:	b2db      	uxtb	r3, r3
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800d82e:	78fb      	ldrb	r3, [r7, #3]
 800d830:	78fa      	ldrb	r2, [r7, #3]
 800d832:	f082 0201 	eor.w	r2, r2, #1
 800d836:	b2d2      	uxtb	r2, r2
 800d838:	4610      	mov	r0, r2
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	6879      	ldr	r1, [r7, #4]
 800d844:	0083      	lsls	r3, r0, #2
 800d846:	440b      	add	r3, r1
 800d848:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	f083 0301 	eor.w	r3, r3, #1
 800d850:	b2db      	uxtb	r3, r3
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d009      	beq.n	800d872 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800d85e:	78fb      	ldrb	r3, [r7, #3]
 800d860:	f083 0301 	eor.w	r3, r3, #1
 800d864:	b2db      	uxtb	r3, r3
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	605a      	str	r2, [r3, #4]
}
 800d87e:	bf00      	nop
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	080145d0 	.word	0x080145d0
 800d88c:	080155d8 	.word	0x080155d8
 800d890:	08014618 	.word	0x08014618

0800d894 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	460b      	mov	r3, r1
 800d89e:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00a      	beq.n	800d8bc <cavlPrivateAdjustBalance+0x28>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b0:	db04      	blt.n	800d8bc <cavlPrivateAdjustBalance+0x28>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	dd05      	ble.n	800d8c8 <cavlPrivateAdjustBalance+0x34>
 800d8bc:	4b61      	ldr	r3, [pc, #388]	; (800da44 <cavlPrivateAdjustBalance+0x1b0>)
 800d8be:	4a62      	ldr	r2, [pc, #392]	; (800da48 <cavlPrivateAdjustBalance+0x1b4>)
 800d8c0:	2177      	movs	r1, #119	; 0x77
 800d8c2:	4862      	ldr	r0, [pc, #392]	; (800da4c <cavlPrivateAdjustBalance+0x1b8>)
 800d8c4:	f002 fa68 	bl	800fd98 <__assert_func>
    Cavl*        out    = x;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	78fa      	ldrb	r2, [r7, #3]
 800d8d6:	2a00      	cmp	r2, #0
 800d8d8:	d001      	beq.n	800d8de <cavlPrivateAdjustBalance+0x4a>
 800d8da:	2201      	movs	r2, #1
 800d8dc:	e000      	b.n	800d8e0 <cavlPrivateAdjustBalance+0x4c>
 800d8de:	22ff      	movs	r2, #255	; 0xff
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800d8e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ee:	db04      	blt.n	800d8fa <cavlPrivateAdjustBalance+0x66>
 800d8f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	f340 809c 	ble.w	800da32 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800d8fa:	7cfb      	ldrb	r3, [r7, #19]
 800d8fc:	09db      	lsrs	r3, r3, #7
 800d8fe:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800d900:	7cbb      	ldrb	r3, [r7, #18]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <cavlPrivateAdjustBalance+0x76>
 800d906:	2301      	movs	r3, #1
 800d908:	e001      	b.n	800d90e <cavlPrivateAdjustBalance+0x7a>
 800d90a:	f04f 33ff 	mov.w	r3, #4294967295
 800d90e:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800d910:	7cbb      	ldrb	r3, [r7, #18]
 800d912:	f083 0301 	eor.w	r3, r3, #1
 800d916:	b2db      	uxtb	r3, r3
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d105      	bne.n	800d934 <cavlPrivateAdjustBalance+0xa0>
 800d928:	4b49      	ldr	r3, [pc, #292]	; (800da50 <cavlPrivateAdjustBalance+0x1bc>)
 800d92a:	4a47      	ldr	r2, [pc, #284]	; (800da48 <cavlPrivateAdjustBalance+0x1b4>)
 800d92c:	217f      	movs	r1, #127	; 0x7f
 800d92e:	4847      	ldr	r0, [pc, #284]	; (800da4c <cavlPrivateAdjustBalance+0x1b8>)
 800d930:	f002 fa32 	bl	800fd98 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d93a:	461a      	mov	r2, r3
 800d93c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800d940:	fb02 f303 	mul.w	r3, r2, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	dc1c      	bgt.n	800d982 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800d94c:	7cbb      	ldrb	r3, [r7, #18]
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff ff25 	bl	800d7a0 <cavlPrivateRotate>
            if (0 == z->bf)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800d960:	7c7b      	ldrb	r3, [r7, #17]
 800d962:	425b      	negs	r3, r3
 800d964:	b2db      	uxtb	r3, r3
 800d966:	b25a      	sxtb	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	7c7a      	ldrb	r2, [r7, #17]
 800d970:	731a      	strb	r2, [r3, #12]
    {
 800d972:	e061      	b.n	800da38 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	731a      	strb	r2, [r3, #12]
    {
 800d980:	e05a      	b.n	800da38 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800d982:	7cbb      	ldrb	r3, [r7, #18]
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d105      	bne.n	800d9a0 <cavlPrivateAdjustBalance+0x10c>
 800d994:	4b2f      	ldr	r3, [pc, #188]	; (800da54 <cavlPrivateAdjustBalance+0x1c0>)
 800d996:	4a2c      	ldr	r2, [pc, #176]	; (800da48 <cavlPrivateAdjustBalance+0x1b4>)
 800d998:	2192      	movs	r1, #146	; 0x92
 800d99a:	482c      	ldr	r0, [pc, #176]	; (800da4c <cavlPrivateAdjustBalance+0x1b8>)
 800d99c:	f002 f9fc 	bl	800fd98 <__assert_func>
            out = y;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800d9a4:	7cbb      	ldrb	r3, [r7, #18]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bf14      	ite	ne
 800d9aa:	2301      	movne	r3, #1
 800d9ac:	2300      	moveq	r3, #0
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f083 0301 	eor.w	r3, r3, #1
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	4619      	mov	r1, r3
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff feee 	bl	800d7a0 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800d9c4:	7cbb      	ldrb	r3, [r7, #18]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff fee9 	bl	800d7a0 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800d9da:	fb02 f303 	mul.w	r3, r2, r3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	da09      	bge.n	800d9f6 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7c7a      	ldrb	r2, [r7, #17]
 800d9e6:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	731a      	strb	r2, [r3, #12]
    {
 800d9f4:	e020      	b.n	800da38 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800da02:	fb02 f303 	mul.w	r3, r2, r3
 800da06:	2b00      	cmp	r3, #0
 800da08:	dd0c      	ble.n	800da24 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2200      	movs	r2, #0
 800da14:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800da16:	7c7b      	ldrb	r3, [r7, #17]
 800da18:	425b      	negs	r3, r3
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	b25a      	sxtb	r2, r3
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	731a      	strb	r2, [r3, #12]
    {
 800da22:	e009      	b.n	800da38 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	731a      	strb	r2, [r3, #12]
    {
 800da30:	e002      	b.n	800da38 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	7cfa      	ldrb	r2, [r7, #19]
 800da36:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800da38:	697b      	ldr	r3, [r7, #20]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	08014644 	.word	0x08014644
 800da48:	080155bc 	.word	0x080155bc
 800da4c:	08014618 	.word	0x08014618
 800da50:	08014674 	.word	0x08014674
 800da54:	08014680 	.word	0x08014680

0800da58 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d004      	beq.n	800da70 <cavlPrivateRetraceOnGrowth+0x18>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d005      	beq.n	800da7c <cavlPrivateRetraceOnGrowth+0x24>
 800da70:	4b23      	ldr	r3, [pc, #140]	; (800db00 <cavlPrivateRetraceOnGrowth+0xa8>)
 800da72:	4a24      	ldr	r2, [pc, #144]	; (800db04 <cavlPrivateRetraceOnGrowth+0xac>)
 800da74:	21b5      	movs	r1, #181	; 0xb5
 800da76:	4824      	ldr	r0, [pc, #144]	; (800db08 <cavlPrivateRetraceOnGrowth+0xb0>)
 800da78:	f002 f98e 	bl	800fd98 <__assert_func>
    Cavl* c = added;      // Child
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800da86:	e023      	b.n	800dad0 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	429a      	cmp	r2, r3
 800da90:	bf0c      	ite	eq
 800da92:	2301      	moveq	r3, #1
 800da94:	2300      	movne	r3, #0
 800da96:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4413      	add	r3, r2
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d005      	beq.n	800dab4 <cavlPrivateRetraceOnGrowth+0x5c>
 800daa8:	4b18      	ldr	r3, [pc, #96]	; (800db0c <cavlPrivateRetraceOnGrowth+0xb4>)
 800daaa:	4a16      	ldr	r2, [pc, #88]	; (800db04 <cavlPrivateRetraceOnGrowth+0xac>)
 800daac:	21bb      	movs	r1, #187	; 0xbb
 800daae:	4816      	ldr	r0, [pc, #88]	; (800db08 <cavlPrivateRetraceOnGrowth+0xb0>)
 800dab0:	f002 f972 	bl	800fd98 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	4619      	mov	r1, r3
 800dab8:	6938      	ldr	r0, [r7, #16]
 800daba:	f7ff feeb 	bl	800d894 <cavlPrivateAdjustBalance>
 800dabe:	6178      	str	r0, [r7, #20]
        p = c->up;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d003      	beq.n	800dad8 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1d8      	bne.n	800da88 <cavlPrivateRetraceOnGrowth+0x30>
 800dad6:	e000      	b.n	800dada <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800dad8:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d105      	bne.n	800daec <cavlPrivateRetraceOnGrowth+0x94>
 800dae0:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <cavlPrivateRetraceOnGrowth+0xb8>)
 800dae2:	4a08      	ldr	r2, [pc, #32]	; (800db04 <cavlPrivateRetraceOnGrowth+0xac>)
 800dae4:	21c3      	movs	r1, #195	; 0xc3
 800dae6:	4808      	ldr	r0, [pc, #32]	; (800db08 <cavlPrivateRetraceOnGrowth+0xb0>)
 800dae8:	f002 f956 	bl	800fd98 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <cavlPrivateRetraceOnGrowth+0x9e>
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	e000      	b.n	800daf8 <cavlPrivateRetraceOnGrowth+0xa0>
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	0801468c 	.word	0x0801468c
 800db04:	080155a0 	.word	0x080155a0
 800db08:	08014618 	.word	0x08014618
 800db0c:	080146b0 	.word	0x080146b0
 800db10:	080146c0 	.word	0x080146c0

0800db14 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b08a      	sub	sp, #40	; 0x28
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
 800db20:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d065      	beq.n	800dbf8 <cavlSearch+0xe4>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d062      	beq.n	800dbf8 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800db3c:	e02f      	b.n	800db9e <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4611      	mov	r1, r2
 800db46:	68b8      	ldr	r0, [r7, #8]
 800db48:	4798      	blx	r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800db4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d103      	bne.n	800db5e <cavlSearch+0x4a>
            {
                out = *n;
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800db5c:	e023      	b.n	800dba6 <cavlSearch+0x92>
            }
            up = *n;
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	bfcc      	ite	gt
 800db70:	2301      	movgt	r3, #1
 800db72:	2300      	movle	r3, #0
 800db74:	b2db      	uxtb	r3, r3
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4413      	add	r3, r2
 800db7a:	3304      	adds	r3, #4
 800db7c:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00b      	beq.n	800db9e <cavlSearch+0x8a>
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6a3a      	ldr	r2, [r7, #32]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d005      	beq.n	800db9e <cavlSearch+0x8a>
 800db92:	4b1c      	ldr	r3, [pc, #112]	; (800dc04 <cavlSearch+0xf0>)
 800db94:	4a1c      	ldr	r2, [pc, #112]	; (800dc08 <cavlSearch+0xf4>)
 800db96:	21db      	movs	r1, #219	; 0xdb
 800db98:	481c      	ldr	r0, [pc, #112]	; (800dc0c <cavlSearch+0xf8>)
 800db9a:	f002 f8fd 	bl	800fd98 <__assert_func>
        while (*n != NULL)
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1cb      	bne.n	800db3e <cavlSearch+0x2a>
        }
        if (NULL == out)
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d125      	bne.n	800dbf8 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <cavlSearch+0xa8>
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	68b8      	ldr	r0, [r7, #8]
 800dbb6:	4798      	blx	r3
 800dbb8:	4603      	mov	r3, r0
 800dbba:	e000      	b.n	800dbbe <cavlSearch+0xaa>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d018      	beq.n	800dbf8 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbca:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	2200      	movs	r2, #0
 800dbd0:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	6a3a      	ldr	r2, [r7, #32]
 800dbdc:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800dbe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbe6:	f7ff ff37 	bl	800da58 <cavlPrivateRetraceOnGrowth>
 800dbea:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d002      	beq.n	800dbf8 <cavlSearch+0xe4>
                {
                    *root = rt;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	697a      	ldr	r2, [r7, #20]
 800dbf6:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3728      	adds	r7, #40	; 0x28
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	080146cc 	.word	0x080146cc
 800dc08:	08015594 	.word	0x08015594
 800dc0c:	08014618 	.word	0x08014618

0800dc10 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 8116 	beq.w	800de4e <cavlRemove+0x23e>
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 8112 	beq.w	800de4e <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d105      	bne.n	800dc3e <cavlRemove+0x2e>
 800dc32:	4b89      	ldr	r3, [pc, #548]	; (800de58 <cavlRemove+0x248>)
 800dc34:	4a89      	ldr	r2, [pc, #548]	; (800de5c <cavlRemove+0x24c>)
 800dc36:	21f6      	movs	r1, #246	; 0xf6
 800dc38:	4889      	ldr	r0, [pc, #548]	; (800de60 <cavlRemove+0x250>)
 800dc3a:	f002 f8ad 	bl	800fd98 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10a      	bne.n	800dc5c <cavlRemove+0x4c>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d005      	beq.n	800dc5c <cavlRemove+0x4c>
 800dc50:	4b84      	ldr	r3, [pc, #528]	; (800de64 <cavlRemove+0x254>)
 800dc52:	4a82      	ldr	r2, [pc, #520]	; (800de5c <cavlRemove+0x24c>)
 800dc54:	21f7      	movs	r1, #247	; 0xf7
 800dc56:	4882      	ldr	r0, [pc, #520]	; (800de60 <cavlRemove+0x250>)
 800dc58:	f002 f89e 	bl	800fd98 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800dc60:	2300      	movs	r3, #0
 800dc62:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d073      	beq.n	800dd54 <cavlRemove+0x144>
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d06f      	beq.n	800dd54 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7ff fd72 	bl	800d764 <cavlFindExtremum>
 800dc80:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d007      	beq.n	800dc98 <cavlRemove+0x88>
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d103      	bne.n	800dc98 <cavlRemove+0x88>
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d105      	bne.n	800dca4 <cavlRemove+0x94>
 800dc98:	4b73      	ldr	r3, [pc, #460]	; (800de68 <cavlRemove+0x258>)
 800dc9a:	4a70      	ldr	r2, [pc, #448]	; (800de5c <cavlRemove+0x24c>)
 800dc9c:	21ff      	movs	r1, #255	; 0xff
 800dc9e:	4870      	ldr	r0, [pc, #448]	; (800de60 <cavlRemove+0x250>)
 800dca0:	f002 f87a 	bl	800fd98 <__assert_func>
            re->bf        = node->bf;
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	685a      	ldr	r2, [r3, #4]
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d025      	beq.n	800dd14 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d006      	beq.n	800dce6 <cavlRemove+0xd6>
 800dcd8:	4b64      	ldr	r3, [pc, #400]	; (800de6c <cavlRemove+0x25c>)
 800dcda:	4a60      	ldr	r2, [pc, #384]	; (800de5c <cavlRemove+0x24c>)
 800dcdc:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dce0:	485f      	ldr	r0, [pc, #380]	; (800de60 <cavlRemove+0x250>)
 800dce2:	f002 f859 	bl	800fd98 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	689a      	ldr	r2, [r3, #8]
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	69fa      	ldr	r2, [r7, #28]
 800dcfc:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	689a      	ldr	r2, [r3, #8]
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	601a      	str	r2, [r3, #0]
                r             = false;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	76fb      	strb	r3, [r7, #27]
 800dd12:	e003      	b.n	800dd1c <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800dd18:	2301      	movs	r3, #1
 800dd1a:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00f      	beq.n	800dd4c <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	6839      	ldr	r1, [r7, #0]
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	bf0c      	ite	eq
 800dd3c:	2301      	moveq	r3, #1
 800dd3e:	2300      	movne	r3, #0
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	605a      	str	r2, [r3, #4]
        {
 800dd4a:	e046      	b.n	800ddda <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	697a      	ldr	r2, [r7, #20]
 800dd50:	601a      	str	r2, [r3, #0]
        {
 800dd52:	e042      	b.n	800ddda <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	bf14      	ite	ne
 800dd62:	2301      	movne	r3, #1
 800dd64:	2300      	moveq	r3, #0
 800dd66:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800dd68:	7cfb      	ldrb	r3, [r7, #19]
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	4413      	add	r3, r2
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d006      	beq.n	800dd84 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800dd76:	7cfb      	ldrb	r3, [r7, #19]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	69fa      	ldr	r2, [r7, #28]
 800dd82:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d020      	beq.n	800ddcc <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	683a      	ldr	r2, [r7, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	bf0c      	ite	eq
 800dd94:	2301      	moveq	r3, #1
 800dd96:	2300      	movne	r3, #0
 800dd98:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800dd9a:	7cfb      	ldrb	r3, [r7, #19]
 800dd9c:	7ef8      	ldrb	r0, [r7, #27]
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	69f9      	ldr	r1, [r7, #28]
 800dda8:	0083      	lsls	r3, r0, #2
 800ddaa:	440b      	add	r3, r1
 800ddac:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800ddae:	7efb      	ldrb	r3, [r7, #27]
 800ddb0:	69fa      	ldr	r2, [r7, #28]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00e      	beq.n	800ddda <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800ddbc:	7efb      	ldrb	r3, [r7, #27]
 800ddbe:	69fa      	ldr	r2, [r7, #28]
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	69fa      	ldr	r2, [r7, #28]
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	e006      	b.n	800ddda <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800ddcc:	7cfb      	ldrb	r3, [r7, #19]
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d036      	beq.n	800de4e <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800dde0:	2300      	movs	r3, #0
 800dde2:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800dde4:	7efb      	ldrb	r3, [r7, #27]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	bf14      	ite	ne
 800ddea:	2301      	movne	r3, #1
 800ddec:	2300      	moveq	r3, #0
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	f083 0301 	eor.w	r3, r3, #1
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	f003 0301 	and.w	r3, r3, #1
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	69f8      	ldr	r0, [r7, #28]
 800de00:	f7ff fd48 	bl	800d894 <cavlPrivateAdjustBalance>
 800de04:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10b      	bne.n	800de2e <cavlRemove+0x21e>
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d008      	beq.n	800de2e <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	429a      	cmp	r2, r3
 800de24:	bf0c      	ite	eq
 800de26:	2301      	moveq	r3, #1
 800de28:	2300      	movne	r3, #0
 800de2a:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800de2c:	e7da      	b.n	800dde4 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10c      	bne.n	800de4e <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d106      	bne.n	800de48 <cavlRemove+0x238>
 800de3a:	4b0d      	ldr	r3, [pc, #52]	; (800de70 <cavlRemove+0x260>)
 800de3c:	4a07      	ldr	r2, [pc, #28]	; (800de5c <cavlRemove+0x24c>)
 800de3e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800de42:	4807      	ldr	r0, [pc, #28]	; (800de60 <cavlRemove+0x250>)
 800de44:	f001 ffa8 	bl	800fd98 <__assert_func>
                *root = c;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800de4e:	bf00      	nop
 800de50:	3720      	adds	r7, #32
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	080146f0 	.word	0x080146f0
 800de5c:	0801561c 	.word	0x0801561c
 800de60:	08014618 	.word	0x08014618
 800de64:	08014700 	.word	0x08014700
 800de68:	08014728 	.word	0x08014728
 800de6c:	08014760 	.word	0x08014760
 800de70:	080146c0 	.word	0x080146c0

0800de74 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800de7c:	687b      	ldr	r3, [r7, #4]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
	...

0800de8c <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	4603      	mov	r3, r0
 800de94:	460a      	mov	r2, r1
 800de96:	80fb      	strh	r3, [r7, #6]
 800de98:	4613      	mov	r3, r2
 800de9a:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800de9c:	88fb      	ldrh	r3, [r7, #6]
 800de9e:	021b      	lsls	r3, r3, #8
 800dea0:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800dea2:	88fb      	ldrh	r3, [r7, #6]
 800dea4:	0a1b      	lsrs	r3, r3, #8
 800dea6:	b299      	uxth	r1, r3
 800dea8:	797b      	ldrb	r3, [r7, #5]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	404b      	eors	r3, r1
 800deae:	b29b      	uxth	r3, r3
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	4905      	ldr	r1, [pc, #20]	; (800dec8 <crcAddByte+0x3c>)
 800deb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800deb8:	4053      	eors	r3, r2
 800deba:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800debc:	4618      	mov	r0, r3
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	0801526c 	.word	0x0801526c

0800decc <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b088      	sub	sp, #32
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d108      	bne.n	800def2 <crcAdd+0x26>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d005      	beq.n	800def2 <crcAdd+0x26>
 800dee6:	4b12      	ldr	r3, [pc, #72]	; (800df30 <crcAdd+0x64>)
 800dee8:	4a12      	ldr	r2, [pc, #72]	; (800df34 <crcAdd+0x68>)
 800deea:	2185      	movs	r1, #133	; 0x85
 800deec:	4812      	ldr	r0, [pc, #72]	; (800df38 <crcAdd+0x6c>)
 800deee:	f001 ff53 	bl	800fd98 <__assert_func>
    TransferCRC    out = crc;
 800def2:	89fb      	ldrh	r3, [r7, #14]
 800def4:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800defa:	2300      	movs	r3, #0
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	e00e      	b.n	800df1e <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	781a      	ldrb	r2, [r3, #0]
 800df04:	8bfb      	ldrh	r3, [r7, #30]
 800df06:	4611      	mov	r1, r2
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff ffbf 	bl	800de8c <crcAddByte>
 800df0e:	4603      	mov	r3, r0
 800df10:	83fb      	strh	r3, [r7, #30]
        ++p;
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	3301      	adds	r3, #1
 800df16:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	3301      	adds	r3, #1
 800df1c:	617b      	str	r3, [r7, #20]
 800df1e:	697a      	ldr	r2, [r7, #20]
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	429a      	cmp	r2, r3
 800df24:	d3ec      	bcc.n	800df00 <crcAdd+0x34>
    }
    return out;
 800df26:	8bfb      	ldrh	r3, [r7, #30]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3720      	adds	r7, #32
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	08014770 	.word	0x08014770
 800df34:	080154e8 	.word	0x080154e8
 800df38:	08014798 	.word	0x08014798

0800df3c <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	460a      	mov	r2, r1
 800df46:	80fb      	strh	r3, [r7, #6]
 800df48:	4613      	mov	r3, r2
 800df4a:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800df4c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800df50:	2b00      	cmp	r3, #0
 800df52:	da05      	bge.n	800df60 <txMakeMessageSessionSpecifier+0x24>
 800df54:	4b0e      	ldr	r3, [pc, #56]	; (800df90 <txMakeMessageSessionSpecifier+0x54>)
 800df56:	4a0f      	ldr	r2, [pc, #60]	; (800df94 <txMakeMessageSessionSpecifier+0x58>)
 800df58:	21ac      	movs	r1, #172	; 0xac
 800df5a:	480f      	ldr	r0, [pc, #60]	; (800df98 <txMakeMessageSessionSpecifier+0x5c>)
 800df5c:	f001 ff1c 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800df60:	88fb      	ldrh	r3, [r7, #6]
 800df62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df66:	d305      	bcc.n	800df74 <txMakeMessageSessionSpecifier+0x38>
 800df68:	4b0c      	ldr	r3, [pc, #48]	; (800df9c <txMakeMessageSessionSpecifier+0x60>)
 800df6a:	4a0a      	ldr	r2, [pc, #40]	; (800df94 <txMakeMessageSessionSpecifier+0x58>)
 800df6c:	21ad      	movs	r1, #173	; 0xad
 800df6e:	480a      	ldr	r0, [pc, #40]	; (800df98 <txMakeMessageSessionSpecifier+0x5c>)
 800df70:	f001 ff12 	bl	800fd98 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800df74:	88fb      	ldrh	r3, [r7, #6]
 800df76:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800df7e:	797a      	ldrb	r2, [r7, #5]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	021b      	lsls	r3, r3, #8
 800df84:	4313      	orrs	r3, r2
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	080147c8 	.word	0x080147c8
 800df94:	080154f0 	.word	0x080154f0
 800df98:	08014798 	.word	0x08014798
 800df9c:	080147dc 	.word	0x080147dc

0800dfa0 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800dfa0:	b590      	push	{r4, r7, lr}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	4611      	mov	r1, r2
 800dfac:	461a      	mov	r2, r3
 800dfae:	4623      	mov	r3, r4
 800dfb0:	80fb      	strh	r3, [r7, #6]
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	717b      	strb	r3, [r7, #5]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	713b      	strb	r3, [r7, #4]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800dfbe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	da05      	bge.n	800dfd2 <txMakeServiceSessionSpecifier+0x32>
 800dfc6:	4b17      	ldr	r3, [pc, #92]	; (800e024 <txMakeServiceSessionSpecifier+0x84>)
 800dfc8:	4a17      	ldr	r2, [pc, #92]	; (800e028 <txMakeServiceSessionSpecifier+0x88>)
 800dfca:	21b7      	movs	r1, #183	; 0xb7
 800dfcc:	4817      	ldr	r0, [pc, #92]	; (800e02c <txMakeServiceSessionSpecifier+0x8c>)
 800dfce:	f001 fee3 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800dfd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	da05      	bge.n	800dfe6 <txMakeServiceSessionSpecifier+0x46>
 800dfda:	4b15      	ldr	r3, [pc, #84]	; (800e030 <txMakeServiceSessionSpecifier+0x90>)
 800dfdc:	4a12      	ldr	r2, [pc, #72]	; (800e028 <txMakeServiceSessionSpecifier+0x88>)
 800dfde:	21b8      	movs	r1, #184	; 0xb8
 800dfe0:	4812      	ldr	r0, [pc, #72]	; (800e02c <txMakeServiceSessionSpecifier+0x8c>)
 800dfe2:	f001 fed9 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800dfe6:	88fb      	ldrh	r3, [r7, #6]
 800dfe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfec:	d305      	bcc.n	800dffa <txMakeServiceSessionSpecifier+0x5a>
 800dfee:	4b11      	ldr	r3, [pc, #68]	; (800e034 <txMakeServiceSessionSpecifier+0x94>)
 800dff0:	4a0d      	ldr	r2, [pc, #52]	; (800e028 <txMakeServiceSessionSpecifier+0x88>)
 800dff2:	21b9      	movs	r1, #185	; 0xb9
 800dff4:	480d      	ldr	r0, [pc, #52]	; (800e02c <txMakeServiceSessionSpecifier+0x8c>)
 800dff6:	f001 fecf 	bl	800fd98 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800dffa:	793a      	ldrb	r2, [r7, #4]
 800dffc:	78fb      	ldrb	r3, [r7, #3]
 800dffe:	01db      	lsls	r3, r3, #7
 800e000:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800e002:	88fb      	ldrh	r3, [r7, #6]
 800e004:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800e006:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800e008:	797a      	ldrb	r2, [r7, #5]
 800e00a:	2a00      	cmp	r2, #0
 800e00c:	d002      	beq.n	800e014 <txMakeServiceSessionSpecifier+0x74>
 800e00e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e012:	e000      	b.n	800e016 <txMakeServiceSessionSpecifier+0x76>
 800e014:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800e016:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800e018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	bd90      	pop	{r4, r7, pc}
 800e024:	080147c8 	.word	0x080147c8
 800e028:	08015510 	.word	0x08015510
 800e02c:	08014798 	.word	0x08014798
 800e030:	080147f0 	.word	0x080147f0
 800e034:	08014804 	.word	0x08014804

0800e038 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800e040:	2340      	movs	r3, #64	; 0x40
 800e042:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800e044:	2300      	movs	r3, #0
 800e046:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b07      	cmp	r3, #7
 800e04c:	d802      	bhi.n	800e054 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800e04e:	2308      	movs	r3, #8
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e014      	b.n	800e07e <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d808      	bhi.n	800e06e <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800e05c:	4a0c      	ldr	r2, [pc, #48]	; (800e090 <adjustPresentationLayerMTU+0x58>)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4413      	add	r3, r2
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	461a      	mov	r2, r3
 800e066:	4b0b      	ldr	r3, [pc, #44]	; (800e094 <adjustPresentationLayerMTU+0x5c>)
 800e068:	5c9b      	ldrb	r3, [r3, r2]
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	e007      	b.n	800e07e <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800e06e:	4a08      	ldr	r2, [pc, #32]	; (800e090 <adjustPresentationLayerMTU+0x58>)
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	4413      	add	r3, r2
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	4b06      	ldr	r3, [pc, #24]	; (800e094 <adjustPresentationLayerMTU+0x5c>)
 800e07a:	5c9b      	ldrb	r3, [r3, r2]
 800e07c:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3b01      	subs	r3, #1
}
 800e082:	4618      	mov	r0, r3
 800e084:	3714      	adds	r7, #20
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	0801547c 	.word	0x0801547c
 800e094:	0801546c 	.word	0x0801546c

0800e098 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b08a      	sub	sp, #40	; 0x28
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
 800e0a4:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d105      	bne.n	800e0b8 <txMakeCANID+0x20>
 800e0ac:	4b60      	ldr	r3, [pc, #384]	; (800e230 <txMakeCANID+0x198>)
 800e0ae:	4a61      	ldr	r2, [pc, #388]	; (800e234 <txMakeCANID+0x19c>)
 800e0b0:	21d9      	movs	r1, #217	; 0xd9
 800e0b2:	4861      	ldr	r0, [pc, #388]	; (800e238 <txMakeCANID+0x1a0>)
 800e0b4:	f001 fe70 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800e0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d105      	bne.n	800e0ca <txMakeCANID+0x32>
 800e0be:	4b5f      	ldr	r3, [pc, #380]	; (800e23c <txMakeCANID+0x1a4>)
 800e0c0:	4a5c      	ldr	r2, [pc, #368]	; (800e234 <txMakeCANID+0x19c>)
 800e0c2:	21da      	movs	r1, #218	; 0xda
 800e0c4:	485c      	ldr	r0, [pc, #368]	; (800e238 <txMakeCANID+0x1a0>)
 800e0c6:	f001 fe67 	bl	800fd98 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800e0ca:	f06f 0301 	mvn.w	r3, #1
 800e0ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	785b      	ldrb	r3, [r3, #1]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d157      	bne.n	800e188 <txMakeCANID+0xf0>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	791b      	ldrb	r3, [r3, #4]
 800e0dc:	2bff      	cmp	r3, #255	; 0xff
 800e0de:	d153      	bne.n	800e188 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800e0e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0e8:	d24e      	bcs.n	800e188 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800e0ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	db11      	blt.n	800e116 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	885b      	ldrh	r3, [r3, #2]
 800e0f6:	78fa      	ldrb	r2, [r7, #3]
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff ff1e 	bl	800df3c <txMakeMessageSessionSpecifier>
 800e100:	4603      	mov	r3, r0
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	2b00      	cmp	r3, #0
 800e108:	da75      	bge.n	800e1f6 <txMakeCANID+0x15e>
 800e10a:	4b4d      	ldr	r3, [pc, #308]	; (800e240 <txMakeCANID+0x1a8>)
 800e10c:	4a49      	ldr	r2, [pc, #292]	; (800e234 <txMakeCANID+0x19c>)
 800e10e:	21e2      	movs	r1, #226	; 0xe2
 800e110:	4849      	ldr	r0, [pc, #292]	; (800e238 <txMakeCANID+0x1a0>)
 800e112:	f001 fe41 	bl	800fd98 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d830      	bhi.n	800e180 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d108      	bne.n	800e136 <txMakeCANID+0x9e>
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d005      	beq.n	800e136 <txMakeCANID+0x9e>
 800e12a:	4b46      	ldr	r3, [pc, #280]	; (800e244 <txMakeCANID+0x1ac>)
 800e12c:	4a41      	ldr	r2, [pc, #260]	; (800e234 <txMakeCANID+0x19c>)
 800e12e:	21e6      	movs	r1, #230	; 0xe6
 800e130:	4841      	ldr	r0, [pc, #260]	; (800e238 <txMakeCANID+0x1a0>)
 800e132:	f001 fe31 	bl	800fd98 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	68b9      	ldr	r1, [r7, #8]
 800e13a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e13e:	f7ff fec5 	bl	800decc <crcAdd>
 800e142:	4603      	mov	r3, r0
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e14a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	885b      	ldrh	r3, [r3, #2]
 800e152:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800e156:	4611      	mov	r1, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff feef 	bl	800df3c <txMakeMessageSessionSpecifier>
 800e15e:	4603      	mov	r3, r0
 800e160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e164:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e16c:	d305      	bcc.n	800e17a <txMakeCANID+0xe2>
 800e16e:	4b36      	ldr	r3, [pc, #216]	; (800e248 <txMakeCANID+0x1b0>)
 800e170:	4a30      	ldr	r2, [pc, #192]	; (800e234 <txMakeCANID+0x19c>)
 800e172:	21e9      	movs	r1, #233	; 0xe9
 800e174:	4830      	ldr	r0, [pc, #192]	; (800e238 <txMakeCANID+0x1a0>)
 800e176:	f001 fe0f 	bl	800fd98 <__assert_func>
            out = (int32_t) spec;
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800e17e:	e03a      	b.n	800e1f6 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800e180:	f06f 0301 	mvn.w	r3, #1
 800e184:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800e186:	e036      	b.n	800e1f6 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	785b      	ldrb	r3, [r3, #1]
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d003      	beq.n	800e198 <txMakeCANID+0x100>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	785b      	ldrb	r3, [r3, #1]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d12a      	bne.n	800e1ee <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	791b      	ldrb	r3, [r3, #4]
 800e19c:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	db25      	blt.n	800e1ee <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	885b      	ldrh	r3, [r3, #2]
 800e1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1aa:	d220      	bcs.n	800e1ee <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800e1ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	db18      	blt.n	800e1e6 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	bf0c      	ite	eq
 800e1c0:	2301      	moveq	r3, #1
 800e1c2:	2300      	movne	r3, #0
 800e1c4:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	f7ff fee8 	bl	800dfa0 <txMakeServiceSessionSpecifier>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	da0f      	bge.n	800e1fa <txMakeCANID+0x162>
 800e1da:	4b19      	ldr	r3, [pc, #100]	; (800e240 <txMakeCANID+0x1a8>)
 800e1dc:	4a15      	ldr	r2, [pc, #84]	; (800e234 <txMakeCANID+0x19c>)
 800e1de:	21fa      	movs	r1, #250	; 0xfa
 800e1e0:	4815      	ldr	r0, [pc, #84]	; (800e238 <txMakeCANID+0x1a0>)
 800e1e2:	f001 fdd9 	bl	800fd98 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800e1e6:	f06f 0301 	mvn.w	r3, #1
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800e1ec:	e005      	b.n	800e1fa <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800e1ee:	f06f 0301 	mvn.w	r3, #1
 800e1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800e1f4:	e002      	b.n	800e1fc <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800e1f6:	bf00      	nop
 800e1f8:	e000      	b.n	800e1fc <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800e1fa:	bf00      	nop
    }

    if (out >= 0)
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	db10      	blt.n	800e224 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	2b07      	cmp	r3, #7
 800e20c:	d807      	bhi.n	800e21e <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	069a      	lsls	r2, r3, #26
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	4313      	orrs	r3, r2
 800e216:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	627b      	str	r3, [r7, #36]	; 0x24
 800e21c:	e002      	b.n	800e224 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800e21e:	f06f 0301 	mvn.w	r3, #1
 800e222:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e226:	4618      	mov	r0, r3
 800e228:	3728      	adds	r7, #40	; 0x28
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	08014818 	.word	0x08014818
 800e234:	080154dc 	.word	0x080154dc
 800e238:	08014798 	.word	0x08014798
 800e23c:	0801482c 	.word	0x0801482c
 800e240:	08014848 	.word	0x08014848
 800e244:	08014854 	.word	0x08014854
 800e248:	08014888 	.word	0x08014888

0800e24c <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800e24c:	b590      	push	{r4, r7, lr}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	4604      	mov	r4, r0
 800e254:	4608      	mov	r0, r1
 800e256:	4611      	mov	r1, r2
 800e258:	461a      	mov	r2, r3
 800e25a:	4623      	mov	r3, r4
 800e25c:	71fb      	strb	r3, [r7, #7]
 800e25e:	4603      	mov	r3, r0
 800e260:	71bb      	strb	r3, [r7, #6]
 800e262:	460b      	mov	r3, r1
 800e264:	717b      	strb	r3, [r7, #5]
 800e266:	4613      	mov	r3, r2
 800e268:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d009      	beq.n	800e284 <txMakeTailByte+0x38>
 800e270:	797b      	ldrb	r3, [r7, #5]
 800e272:	2b01      	cmp	r3, #1
 800e274:	d006      	beq.n	800e284 <txMakeTailByte+0x38>
 800e276:	4b13      	ldr	r3, [pc, #76]	; (800e2c4 <txMakeTailByte+0x78>)
 800e278:	4a13      	ldr	r2, [pc, #76]	; (800e2c8 <txMakeTailByte+0x7c>)
 800e27a:	f240 111b 	movw	r1, #283	; 0x11b
 800e27e:	4813      	ldr	r0, [pc, #76]	; (800e2cc <txMakeTailByte+0x80>)
 800e280:	f001 fd8a 	bl	800fd98 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <txMakeTailByte+0x42>
 800e28a:	2280      	movs	r2, #128	; 0x80
 800e28c:	e000      	b.n	800e290 <txMakeTailByte+0x44>
 800e28e:	2200      	movs	r2, #0
 800e290:	79bb      	ldrb	r3, [r7, #6]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <txMakeTailByte+0x4e>
 800e296:	2340      	movs	r3, #64	; 0x40
 800e298:	e000      	b.n	800e29c <txMakeTailByte+0x50>
 800e29a:	2300      	movs	r3, #0
 800e29c:	4313      	orrs	r3, r2
 800e29e:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800e2a0:	797a      	ldrb	r2, [r7, #5]
 800e2a2:	2a00      	cmp	r2, #0
 800e2a4:	d001      	beq.n	800e2aa <txMakeTailByte+0x5e>
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	e000      	b.n	800e2ac <txMakeTailByte+0x60>
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	4313      	orrs	r3, r2
 800e2ae:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800e2b0:	793b      	ldrb	r3, [r7, #4]
 800e2b2:	f003 031f 	and.w	r3, r3, #31
 800e2b6:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	b2db      	uxtb	r3, r3
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd90      	pop	{r4, r7, pc}
 800e2c4:	080148a4 	.word	0x080148a4
 800e2c8:	08015584 	.word	0x08015584
 800e2cc:	08014798 	.word	0x08014798

0800e2d0 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b40      	cmp	r3, #64	; 0x40
 800e2dc:	d906      	bls.n	800e2ec <txRoundFramePayloadSizeUp+0x1c>
 800e2de:	4b0f      	ldr	r3, [pc, #60]	; (800e31c <txRoundFramePayloadSizeUp+0x4c>)
 800e2e0:	4a0f      	ldr	r2, [pc, #60]	; (800e320 <txRoundFramePayloadSizeUp+0x50>)
 800e2e2:	f44f 7192 	mov.w	r1, #292	; 0x124
 800e2e6:	480f      	ldr	r0, [pc, #60]	; (800e324 <txRoundFramePayloadSizeUp+0x54>)
 800e2e8:	f001 fd56 	bl	800fd98 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800e2ec:	4a0e      	ldr	r2, [pc, #56]	; (800e328 <txRoundFramePayloadSizeUp+0x58>)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b0f      	cmp	r3, #15
 800e2fa:	d906      	bls.n	800e30a <txRoundFramePayloadSizeUp+0x3a>
 800e2fc:	4b0b      	ldr	r3, [pc, #44]	; (800e32c <txRoundFramePayloadSizeUp+0x5c>)
 800e2fe:	4a08      	ldr	r2, [pc, #32]	; (800e320 <txRoundFramePayloadSizeUp+0x50>)
 800e300:	f240 1127 	movw	r1, #295	; 0x127
 800e304:	4807      	ldr	r0, [pc, #28]	; (800e324 <txRoundFramePayloadSizeUp+0x54>)
 800e306:	f001 fd47 	bl	800fd98 <__assert_func>
    return CanardCANDLCToLength[y];
 800e30a:	4a09      	ldr	r2, [pc, #36]	; (800e330 <txRoundFramePayloadSizeUp+0x60>)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	4413      	add	r3, r2
 800e310:	781b      	ldrb	r3, [r3, #0]
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	080148cc 	.word	0x080148cc
 800e320:	08015554 	.word	0x08015554
 800e324:	08014798 	.word	0x08014798
 800e328:	0801547c 	.word	0x0801547c
 800e32c:	08014914 	.word	0x08014914
 800e330:	0801546c 	.word	0x0801546c

0800e334 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d106      	bne.n	800e356 <txAllocateQueueItem+0x22>
 800e348:	4b1f      	ldr	r3, [pc, #124]	; (800e3c8 <txAllocateQueueItem+0x94>)
 800e34a:	4a20      	ldr	r2, [pc, #128]	; (800e3cc <txAllocateQueueItem+0x98>)
 800e34c:	f240 1131 	movw	r1, #305	; 0x131
 800e350:	481f      	ldr	r0, [pc, #124]	; (800e3d0 <txAllocateQueueItem+0x9c>)
 800e352:	f001 fd21 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d106      	bne.n	800e36a <txAllocateQueueItem+0x36>
 800e35c:	4b1d      	ldr	r3, [pc, #116]	; (800e3d4 <txAllocateQueueItem+0xa0>)
 800e35e:	4a1b      	ldr	r2, [pc, #108]	; (800e3cc <txAllocateQueueItem+0x98>)
 800e360:	f44f 7199 	mov.w	r1, #306	; 0x132
 800e364:	481a      	ldr	r0, [pc, #104]	; (800e3d0 <txAllocateQueueItem+0x9c>)
 800e366:	f001 fd17 	bl	800fd98 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	6a3a      	ldr	r2, [r7, #32]
 800e370:	3230      	adds	r2, #48	; 0x30
 800e372:	4611      	mov	r1, r2
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	4798      	blx	r3
 800e378:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d01e      	beq.n	800e3be <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	2200      	movs	r2, #0
 800e384:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2200      	movs	r2, #0
 800e38a:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	2200      	movs	r2, #0
 800e390:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2200      	movs	r2, #0
 800e396:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	2200      	movs	r2, #0
 800e39c:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800e39e:	6979      	ldr	r1, [r7, #20]
 800e3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3a4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	6a3a      	ldr	r2, [r7, #32]
 800e3ac:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	621a      	str	r2, [r3, #32]
    }
    return out;
 800e3be:	697b      	ldr	r3, [r7, #20]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	0801495c 	.word	0x0801495c
 800e3cc:	08015570 	.word	0x08015570
 800e3d0:	08014798 	.word	0x08014798
 800e3d4:	08014970 	.word	0x08014970

0800e3d8 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <txAVLPredicate+0x1e>
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d106      	bne.n	800e404 <txAVLPredicate+0x2c>
 800e3f6:	4b0a      	ldr	r3, [pc, #40]	; (800e420 <txAVLPredicate+0x48>)
 800e3f8:	4a0a      	ldr	r2, [pc, #40]	; (800e424 <txAVLPredicate+0x4c>)
 800e3fa:	f240 114d 	movw	r1, #333	; 0x14d
 800e3fe:	480a      	ldr	r0, [pc, #40]	; (800e428 <txAVLPredicate+0x50>)
 800e400:	f001 fcca 	bl	800fd98 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6a1a      	ldr	r2, [r3, #32]
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	6a1b      	ldr	r3, [r3, #32]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d301      	bcc.n	800e414 <txAVLPredicate+0x3c>
 800e410:	2301      	movs	r3, #1
 800e412:	e001      	b.n	800e418 <txAVLPredicate+0x40>
 800e414:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	08014984 	.word	0x08014984
 800e424:	08015544 	.word	0x08015544
 800e428:	08014798 	.word	0x08014798

0800e42c <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800e42c:	b590      	push	{r4, r7, lr}
 800e42e:	b08d      	sub	sp, #52	; 0x34
 800e430:	af02      	add	r7, sp, #8
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d106      	bne.n	800e44e <txPushSingleFrame+0x22>
 800e440:	4b5c      	ldr	r3, [pc, #368]	; (800e5b4 <txPushSingleFrame+0x188>)
 800e442:	4a5d      	ldr	r2, [pc, #372]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e444:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800e448:	485c      	ldr	r0, [pc, #368]	; (800e5bc <txPushSingleFrame+0x190>)
 800e44a:	f001 fca5 	bl	800fd98 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800e44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e450:	2b00      	cmp	r3, #0
 800e452:	d109      	bne.n	800e468 <txPushSingleFrame+0x3c>
 800e454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e456:	2b00      	cmp	r3, #0
 800e458:	d006      	beq.n	800e468 <txPushSingleFrame+0x3c>
 800e45a:	4b59      	ldr	r3, [pc, #356]	; (800e5c0 <txPushSingleFrame+0x194>)
 800e45c:	4a56      	ldr	r2, [pc, #344]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e45e:	f240 115b 	movw	r1, #347	; 0x15b
 800e462:	4856      	ldr	r0, [pc, #344]	; (800e5bc <txPushSingleFrame+0x190>)
 800e464:	f001 fc98 	bl	800fd98 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800e468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46a:	3301      	adds	r3, #1
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7ff ff2f 	bl	800e2d0 <txRoundFramePayloadSizeUp>
 800e472:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800e474:	6a3a      	ldr	r2, [r7, #32]
 800e476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e478:	429a      	cmp	r2, r3
 800e47a:	d806      	bhi.n	800e48a <txPushSingleFrame+0x5e>
 800e47c:	4b51      	ldr	r3, [pc, #324]	; (800e5c4 <txPushSingleFrame+0x198>)
 800e47e:	4a4e      	ldr	r2, [pc, #312]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e480:	f240 115d 	movw	r1, #349	; 0x15d
 800e484:	484d      	ldr	r0, [pc, #308]	; (800e5bc <txPushSingleFrame+0x190>)
 800e486:	f001 fc87 	bl	800fd98 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800e48a:	6a3a      	ldr	r2, [r7, #32]
 800e48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	3b01      	subs	r3, #1
 800e492:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800e494:	69fa      	ldr	r2, [r7, #28]
 800e496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e498:	4413      	add	r3, r2
 800e49a:	3301      	adds	r3, #1
 800e49c:	6a3a      	ldr	r2, [r7, #32]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d006      	beq.n	800e4b0 <txPushSingleFrame+0x84>
 800e4a2:	4b49      	ldr	r3, [pc, #292]	; (800e5c8 <txPushSingleFrame+0x19c>)
 800e4a4:	4a44      	ldr	r2, [pc, #272]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e4a6:	f240 115f 	movw	r1, #351	; 0x15f
 800e4aa:	4844      	ldr	r0, [pc, #272]	; (800e5bc <txPushSingleFrame+0x190>)
 800e4ac:	f001 fc74 	bl	800fd98 <__assert_func>
    int32_t       out = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	689a      	ldr	r2, [r3, #8]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d209      	bcs.n	800e4d4 <txPushSingleFrame+0xa8>
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e4ca:	68b8      	ldr	r0, [r7, #8]
 800e4cc:	f7ff ff32 	bl	800e334 <txAllocateQueueItem>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	e000      	b.n	800e4d6 <txPushSingleFrame+0xaa>
 800e4d4:	2300      	movs	r3, #0
    TxItem* const tqi =
 800e4d6:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d054      	beq.n	800e588 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800e4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d010      	beq.n	800e506 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800e4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d106      	bne.n	800e4f8 <txPushSingleFrame+0xcc>
 800e4ea:	4b38      	ldr	r3, [pc, #224]	; (800e5cc <txPushSingleFrame+0x1a0>)
 800e4ec:	4a32      	ldr	r2, [pc, #200]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e4ee:	f240 1167 	movw	r1, #359	; 0x167
 800e4f2:	4832      	ldr	r0, [pc, #200]	; (800e5bc <txPushSingleFrame+0x190>)
 800e4f4:	f001 fc50 	bl	800fd98 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	3330      	adds	r3, #48	; 0x30
 800e4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e500:	4618      	mov	r0, r3
 800e502:	f002 fdf2 	bl	80110ea <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800e506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e508:	3330      	adds	r3, #48	; 0x30
 800e50a:	69ba      	ldr	r2, [r7, #24]
 800e50c:	4413      	add	r3, r2
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	2100      	movs	r1, #0
 800e512:	4618      	mov	r0, r3
 800e514:	f002 fd03 	bl	8010f1e <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	1e5c      	subs	r4, r3, #1
 800e51c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e520:	2201      	movs	r2, #1
 800e522:	2101      	movs	r1, #1
 800e524:	2001      	movs	r0, #1
 800e526:	f7ff fe91 	bl	800e24c <txMakeTailByte>
 800e52a:	4603      	mov	r3, r0
 800e52c:	461a      	mov	r2, r3
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	4423      	add	r3, r4
 800e532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f103 000c 	add.w	r0, r3, #12
 800e53c:	69b9      	ldr	r1, [r7, #24]
 800e53e:	4b24      	ldr	r3, [pc, #144]	; (800e5d0 <txPushSingleFrame+0x1a4>)
 800e540:	4a24      	ldr	r2, [pc, #144]	; (800e5d4 <txPushSingleFrame+0x1a8>)
 800e542:	f7ff fae7 	bl	800db14 <cavlSearch>
 800e546:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d006      	beq.n	800e55e <txPushSingleFrame+0x132>
 800e550:	4b21      	ldr	r3, [pc, #132]	; (800e5d8 <txPushSingleFrame+0x1ac>)
 800e552:	4a19      	ldr	r2, [pc, #100]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e554:	f240 1173 	movw	r1, #371	; 0x173
 800e558:	4818      	ldr	r0, [pc, #96]	; (800e5bc <txPushSingleFrame+0x190>)
 800e55a:	f001 fc1d 	bl	800fd98 <__assert_func>
        que->size++;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	1c5a      	adds	r2, r3, #1
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	689a      	ldr	r2, [r3, #8]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	429a      	cmp	r2, r3
 800e572:	d906      	bls.n	800e582 <txPushSingleFrame+0x156>
 800e574:	4b19      	ldr	r3, [pc, #100]	; (800e5dc <txPushSingleFrame+0x1b0>)
 800e576:	4a10      	ldr	r2, [pc, #64]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e578:	f240 1175 	movw	r1, #373	; 0x175
 800e57c:	480f      	ldr	r0, [pc, #60]	; (800e5bc <txPushSingleFrame+0x190>)
 800e57e:	f001 fc0b 	bl	800fd98 <__assert_func>
        out = 1;  // One frame enqueued.
 800e582:	2301      	movs	r3, #1
 800e584:	627b      	str	r3, [r7, #36]	; 0x24
 800e586:	e002      	b.n	800e58e <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800e588:	f06f 0302 	mvn.w	r3, #2
 800e58c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	2b00      	cmp	r3, #0
 800e592:	db09      	blt.n	800e5a8 <txPushSingleFrame+0x17c>
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	2b01      	cmp	r3, #1
 800e598:	d006      	beq.n	800e5a8 <txPushSingleFrame+0x17c>
 800e59a:	4b11      	ldr	r3, [pc, #68]	; (800e5e0 <txPushSingleFrame+0x1b4>)
 800e59c:	4a06      	ldr	r2, [pc, #24]	; (800e5b8 <txPushSingleFrame+0x18c>)
 800e59e:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800e5a2:	4806      	ldr	r0, [pc, #24]	; (800e5bc <txPushSingleFrame+0x190>)
 800e5a4:	f001 fbf8 	bl	800fd98 <__assert_func>
    return out;
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	372c      	adds	r7, #44	; 0x2c
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd90      	pop	{r4, r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	0801495c 	.word	0x0801495c
 800e5b8:	08015530 	.word	0x08015530
 800e5bc:	08014798 	.word	0x08014798
 800e5c0:	080149b8 	.word	0x080149b8
 800e5c4:	080149e8 	.word	0x080149e8
 800e5c8:	08014a0c 	.word	0x08014a0c
 800e5cc:	08014a48 	.word	0x08014a48
 800e5d0:	0800de75 	.word	0x0800de75
 800e5d4:	0800e3d9 	.word	0x0800e3d9
 800e5d8:	08014a60 	.word	0x08014a60
 800e5dc:	08014a78 	.word	0x08014a78
 800e5e0:	08014a94 	.word	0x08014a94

0800e5e4 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800e5e4:	b590      	push	{r4, r7, lr}
 800e5e6:	b093      	sub	sp, #76	; 0x4c
 800e5e8:	af02      	add	r7, sp, #8
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <txGenerateMultiFrameChain+0x20>
 800e5f6:	4b93      	ldr	r3, [pc, #588]	; (800e844 <txGenerateMultiFrameChain+0x260>)
 800e5f8:	4a93      	ldr	r2, [pc, #588]	; (800e848 <txGenerateMultiFrameChain+0x264>)
 800e5fa:	f240 1189 	movw	r1, #393	; 0x189
 800e5fe:	4893      	ldr	r0, [pc, #588]	; (800e84c <txGenerateMultiFrameChain+0x268>)
 800e600:	f001 fbca 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <txGenerateMultiFrameChain+0x34>
 800e60a:	4b91      	ldr	r3, [pc, #580]	; (800e850 <txGenerateMultiFrameChain+0x26c>)
 800e60c:	4a8e      	ldr	r2, [pc, #568]	; (800e848 <txGenerateMultiFrameChain+0x264>)
 800e60e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800e612:	488e      	ldr	r0, [pc, #568]	; (800e84c <txGenerateMultiFrameChain+0x268>)
 800e614:	f001 fbc0 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800e618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d806      	bhi.n	800e62e <txGenerateMultiFrameChain+0x4a>
 800e620:	4b8c      	ldr	r3, [pc, #560]	; (800e854 <txGenerateMultiFrameChain+0x270>)
 800e622:	4a89      	ldr	r2, [pc, #548]	; (800e848 <txGenerateMultiFrameChain+0x264>)
 800e624:	f240 118b 	movw	r1, #395	; 0x18b
 800e628:	4888      	ldr	r0, [pc, #544]	; (800e84c <txGenerateMultiFrameChain+0x268>)
 800e62a:	f001 fbb5 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800e62e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e630:	2b00      	cmp	r3, #0
 800e632:	d106      	bne.n	800e642 <txGenerateMultiFrameChain+0x5e>
 800e634:	4b88      	ldr	r3, [pc, #544]	; (800e858 <txGenerateMultiFrameChain+0x274>)
 800e636:	4a84      	ldr	r2, [pc, #528]	; (800e848 <txGenerateMultiFrameChain+0x264>)
 800e638:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800e63c:	4883      	ldr	r0, [pc, #524]	; (800e84c <txGenerateMultiFrameChain+0x268>)
 800e63e:	f001 fbab 	bl	800fd98 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800e642:	2300      	movs	r3, #0
 800e644:	613b      	str	r3, [r7, #16]
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]
 800e64a:	2300      	movs	r3, #0
 800e64c:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800e64e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e650:	3302      	adds	r3, #2
 800e652:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 800e654:	2300      	movs	r3, #0
 800e656:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800e658:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e65a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e65c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e660:	f7ff fc34 	bl	800decc <crcAdd>
 800e664:	4603      	mov	r3, r0
 800e666:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800e668:	2301      	movs	r3, #1
 800e66a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800e66e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e670:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 800e672:	e0d4      	b.n	800e81e <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	3301      	adds	r3, #1
 800e678:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800e67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e67e:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	d908      	bls.n	800e698 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800e686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	3301      	adds	r3, #1
 800e68e:	4618      	mov	r0, r3
 800e690:	f7ff fe1e 	bl	800e2d0 <txRoundFramePayloadSizeUp>
 800e694:	4603      	mov	r3, r0
 800e696:	e001      	b.n	800e69c <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800e69c:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e6a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e6a8:	68b8      	ldr	r0, [r7, #8]
 800e6aa:	f7ff fe43 	bl	800e334 <txAllocateQueueItem>
 800e6ae:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d102      	bne.n	800e6bc <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	613b      	str	r3, [r7, #16]
 800e6ba:	e002      	b.n	800e6c2 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	6a3a      	ldr	r2, [r7, #32]
 800e6c0:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 80ae 	beq.w	800e82a <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 800e6d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d21c      	bcs.n	800e71a <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800e6e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 800e6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d901      	bls.n	800e6f4 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	3330      	adds	r3, #48	; 0x30
 800e6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f002 fcf4 	bl	80110ea <memcpy>
            frame_offset = frame_offset + move_size;
 800e702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	4413      	add	r3, r2
 800e708:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 800e70a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	4413      	add	r3, r2
 800e710:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 800e712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	4413      	add	r3, r2
 800e718:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800e71a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e71c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e71e:	429a      	cmp	r2, r3
 800e720:	d343      	bcc.n	800e7aa <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800e722:	e00f      	b.n	800e744 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e728:	4413      	add	r3, r2
 800e72a:	3330      	adds	r3, #48	; 0x30
 800e72c:	2200      	movs	r2, #0
 800e72e:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	3301      	adds	r3, #1
 800e734:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800e736:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e738:	2100      	movs	r1, #0
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7ff fba6 	bl	800de8c <crcAddByte>
 800e740:	4603      	mov	r3, r0
 800e742:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800e744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e746:	3302      	adds	r3, #2
 800e748:	69fa      	ldr	r2, [r7, #28]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d8ea      	bhi.n	800e724 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800e74e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	429a      	cmp	r2, r3
 800e754:	d213      	bcs.n	800e77e <txGenerateMultiFrameChain+0x19a>
 800e756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d10f      	bne.n	800e77e <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800e75e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e760:	0a1b      	lsrs	r3, r3, #8
 800e762:	b29b      	uxth	r3, r3
 800e764:	697a      	ldr	r2, [r7, #20]
 800e766:	b2d9      	uxtb	r1, r3
 800e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76a:	4413      	add	r3, r2
 800e76c:	3330      	adds	r3, #48	; 0x30
 800e76e:	460a      	mov	r2, r1
 800e770:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	3301      	adds	r3, #1
 800e776:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800e778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77a:	3301      	adds	r3, #1
 800e77c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800e77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	429a      	cmp	r2, r3
 800e784:	d211      	bcs.n	800e7aa <txGenerateMultiFrameChain+0x1c6>
 800e786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d90d      	bls.n	800e7aa <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e792:	b2d9      	uxtb	r1, r3
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	4413      	add	r3, r2
 800e798:	3330      	adds	r3, #48	; 0x30
 800e79a:	460a      	mov	r2, r1
 800e79c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800e79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800e7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	1c5a      	adds	r2, r3, #1
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d006      	beq.n	800e7c4 <txGenerateMultiFrameChain+0x1e0>
 800e7b6:	4b29      	ldr	r3, [pc, #164]	; (800e85c <txGenerateMultiFrameChain+0x278>)
 800e7b8:	4a23      	ldr	r2, [pc, #140]	; (800e848 <txGenerateMultiFrameChain+0x264>)
 800e7ba:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e7be:	4823      	ldr	r0, [pc, #140]	; (800e84c <txGenerateMultiFrameChain+0x268>)
 800e7c0:	f001 faea 	bl	800fd98 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	bf0c      	ite	eq
 800e7cc:	2301      	moveq	r3, #1
 800e7ce:	2300      	movne	r3, #0
 800e7d0:	b2d8      	uxtb	r0, r3
 800e7d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	bf2c      	ite	cs
 800e7da:	2301      	movcs	r3, #1
 800e7dc:	2300      	movcc	r3, #0
 800e7de:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800e7e0:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800e7e2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800e7e6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800e7ea:	f7ff fd2f 	bl	800e24c <txMakeTailByte>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800e7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f4:	4423      	add	r3, r4
 800e7f6:	3330      	adds	r3, #48	; 0x30
 800e7f8:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800e7fa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bf14      	ite	ne
 800e802:	2301      	movne	r3, #1
 800e804:	2300      	moveq	r3, #0
 800e806:	b2db      	uxtb	r3, r3
 800e808:	f083 0301 	eor.w	r3, r3, #1
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800e812:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e816:	f003 0301 	and.w	r3, r3, #1
 800e81a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 800e81e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	429a      	cmp	r2, r3
 800e824:	f4ff af26 	bcc.w	800e674 <txGenerateMultiFrameChain+0x90>
 800e828:	e000      	b.n	800e82c <txGenerateMultiFrameChain+0x248>
            break;
 800e82a:	bf00      	nop
    }
    return out;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	461c      	mov	r4, r3
 800e830:	f107 0310 	add.w	r3, r7, #16
 800e834:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	3744      	adds	r7, #68	; 0x44
 800e840:	46bd      	mov	sp, r7
 800e842:	bd90      	pop	{r4, r7, pc}
 800e844:	0801495c 	.word	0x0801495c
 800e848:	08015600 	.word	0x08015600
 800e84c:	08014798 	.word	0x08014798
 800e850:	08014aac 	.word	0x08014aac
 800e854:	08014ac8 	.word	0x08014ac8
 800e858:	08014a48 	.word	0x08014a48
 800e85c:	08014af0 	.word	0x08014af0

0800e860 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b094      	sub	sp, #80	; 0x50
 800e864:	af06      	add	r7, sp, #24
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <txPushMultiFrame+0x18>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <txPushMultiFrame+0x26>
 800e878:	4b65      	ldr	r3, [pc, #404]	; (800ea10 <txPushMultiFrame+0x1b0>)
 800e87a:	4a66      	ldr	r2, [pc, #408]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e87c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800e880:	4865      	ldr	r0, [pc, #404]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e882:	f001 fa89 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d106      	bne.n	800e89a <txPushMultiFrame+0x3a>
 800e88c:	4b63      	ldr	r3, [pc, #396]	; (800ea1c <txPushMultiFrame+0x1bc>)
 800e88e:	4a61      	ldr	r2, [pc, #388]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e890:	f240 11ed 	movw	r1, #493	; 0x1ed
 800e894:	4860      	ldr	r0, [pc, #384]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e896:	f001 fa7f 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800e89a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d806      	bhi.n	800e8b0 <txPushMultiFrame+0x50>
 800e8a2:	4b5f      	ldr	r3, [pc, #380]	; (800ea20 <txPushMultiFrame+0x1c0>)
 800e8a4:	4a5b      	ldr	r2, [pc, #364]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e8a6:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800e8aa:	485b      	ldr	r0, [pc, #364]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e8ac:	f001 fa74 	bl	800fd98 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800e8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b6:	3302      	adds	r3, #2
 800e8b8:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800e8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4413      	add	r3, r2
 800e8c0:	1e5a      	subs	r2, r3, #1
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c8:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d806      	bhi.n	800e8de <txPushMultiFrame+0x7e>
 800e8d0:	4b54      	ldr	r3, [pc, #336]	; (800ea24 <txPushMultiFrame+0x1c4>)
 800e8d2:	4a50      	ldr	r2, [pc, #320]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e8d4:	f240 11f3 	movw	r1, #499	; 0x1f3
 800e8d8:	484f      	ldr	r0, [pc, #316]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e8da:	f001 fa5d 	bl	800fd98 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	689a      	ldr	r2, [r3, #8]
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	441a      	add	r2, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d87b      	bhi.n	800e9e6 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800e8ee:	f107 0010 	add.w	r0, r7, #16
 800e8f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8f4:	9305      	str	r3, [sp, #20]
 800e8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f8:	9304      	str	r3, [sp, #16]
 800e8fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e8fe:	9303      	str	r3, [sp, #12]
 800e900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e902:	9302      	str	r3, [sp, #8]
 800e904:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e908:	e9cd 2300 	strd	r2, r3, [sp]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	68b9      	ldr	r1, [r7, #8]
 800e910:	f7ff fe68 	bl	800e5e4 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d051      	beq.n	800e9be <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f103 000c 	add.w	r0, r3, #12
 800e924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e926:	4b40      	ldr	r3, [pc, #256]	; (800ea28 <txPushMultiFrame+0x1c8>)
 800e928:	4a40      	ldr	r2, [pc, #256]	; (800ea2c <txPushMultiFrame+0x1cc>)
 800e92a:	f7ff f8f3 	bl	800db14 <cavlSearch>
 800e92e:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	69fa      	ldr	r2, [r7, #28]
 800e934:	429a      	cmp	r2, r3
 800e936:	d006      	beq.n	800e946 <txPushMultiFrame+0xe6>
 800e938:	4b3d      	ldr	r3, [pc, #244]	; (800ea30 <txPushMultiFrame+0x1d0>)
 800e93a:	4a36      	ldr	r2, [pc, #216]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e93c:	f240 2105 	movw	r1, #517	; 0x205
 800e940:	4835      	ldr	r0, [pc, #212]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e942:	f001 fa29 	bl	800fd98 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <txPushMultiFrame+0xfc>
 800e94e:	4b39      	ldr	r3, [pc, #228]	; (800ea34 <txPushMultiFrame+0x1d4>)
 800e950:	4a30      	ldr	r2, [pc, #192]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e952:	f240 2106 	movw	r1, #518	; 0x206
 800e956:	4830      	ldr	r0, [pc, #192]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e958:	f001 fa1e 	bl	800fd98 <__assert_func>
                next = next->next_in_transfer;
 800e95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 800e962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1da      	bne.n	800e91e <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d006      	beq.n	800e97e <txPushMultiFrame+0x11e>
 800e970:	4b31      	ldr	r3, [pc, #196]	; (800ea38 <txPushMultiFrame+0x1d8>)
 800e972:	4a28      	ldr	r2, [pc, #160]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e974:	f240 2109 	movw	r1, #521	; 0x209
 800e978:	4827      	ldr	r0, [pc, #156]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e97a:	f001 fa0d 	bl	800fd98 <__assert_func>
            que->size += sq.size;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	689a      	ldr	r2, [r3, #8]
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	441a      	add	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	689a      	ldr	r2, [r3, #8]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	429a      	cmp	r2, r3
 800e994:	d906      	bls.n	800e9a4 <txPushMultiFrame+0x144>
 800e996:	4b29      	ldr	r3, [pc, #164]	; (800ea3c <txPushMultiFrame+0x1dc>)
 800e998:	4a1e      	ldr	r2, [pc, #120]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e99a:	f240 210b 	movw	r1, #523	; 0x20b
 800e99e:	481e      	ldr	r0, [pc, #120]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e9a0:	f001 f9fa 	bl	800fd98 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	da06      	bge.n	800e9b8 <txPushMultiFrame+0x158>
 800e9aa:	4b25      	ldr	r3, [pc, #148]	; (800ea40 <txPushMultiFrame+0x1e0>)
 800e9ac:	4a19      	ldr	r2, [pc, #100]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e9ae:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800e9b2:	4819      	ldr	r0, [pc, #100]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800e9b4:	f001 f9f0 	bl	800fd98 <__assert_func>
            out = (int32_t) sq.size;
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800e9bc:	e016      	b.n	800e9ec <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800e9be:	f06f 0302 	mvn.w	r3, #2
 800e9c2:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800e9c8:	e009      	b.n	800e9de <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	691b      	ldr	r3, [r3, #16]
 800e9ce:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9d6:	68b8      	ldr	r0, [r7, #8]
 800e9d8:	4798      	blx	r3
                head = next;
 800e9da:	6a3b      	ldr	r3, [r7, #32]
 800e9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1f2      	bne.n	800e9ca <txPushMultiFrame+0x16a>
 800e9e4:	e002      	b.n	800e9ec <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800e9e6:	f06f 0302 	mvn.w	r3, #2
 800e9ea:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800e9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	db09      	blt.n	800ea06 <txPushMultiFrame+0x1a6>
 800e9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	dc06      	bgt.n	800ea06 <txPushMultiFrame+0x1a6>
 800e9f8:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <txPushMultiFrame+0x1e4>)
 800e9fa:	4a06      	ldr	r2, [pc, #24]	; (800ea14 <txPushMultiFrame+0x1b4>)
 800e9fc:	f240 211f 	movw	r1, #543	; 0x21f
 800ea00:	4805      	ldr	r0, [pc, #20]	; (800ea18 <txPushMultiFrame+0x1b8>)
 800ea02:	f001 f9c9 	bl	800fd98 <__assert_func>
    return out;
 800ea06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3738      	adds	r7, #56	; 0x38
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	08014b2c 	.word	0x08014b2c
 800ea14:	080155ec 	.word	0x080155ec
 800ea18:	08014798 	.word	0x08014798
 800ea1c:	08014aac 	.word	0x08014aac
 800ea20:	08014ac8 	.word	0x08014ac8
 800ea24:	08014b5c 	.word	0x08014b5c
 800ea28:	0800de75 	.word	0x0800de75
 800ea2c:	0800e3d9 	.word	0x0800e3d9
 800ea30:	08014b6c 	.word	0x08014b6c
 800ea34:	08014b80 	.word	0x08014b80
 800ea38:	08014b9c 	.word	0x08014b9c
 800ea3c:	08014a78 	.word	0x08014a78
 800ea40:	08014bb4 	.word	0x08014bb4
 800ea44:	08014bd8 	.word	0x08014bd8

0800ea48 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
 800ea54:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d106      	bne.n	800ea6a <rxTryParseFrame+0x22>
 800ea5c:	4b96      	ldr	r3, [pc, #600]	; (800ecb8 <rxTryParseFrame+0x270>)
 800ea5e:	4a97      	ldr	r2, [pc, #604]	; (800ecbc <rxTryParseFrame+0x274>)
 800ea60:	f240 214e 	movw	r1, #590	; 0x24e
 800ea64:	4896      	ldr	r0, [pc, #600]	; (800ecc0 <rxTryParseFrame+0x278>)
 800ea66:	f001 f997 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea72:	d306      	bcc.n	800ea82 <rxTryParseFrame+0x3a>
 800ea74:	4b93      	ldr	r3, [pc, #588]	; (800ecc4 <rxTryParseFrame+0x27c>)
 800ea76:	4a91      	ldr	r2, [pc, #580]	; (800ecbc <rxTryParseFrame+0x274>)
 800ea78:	f240 214f 	movw	r1, #591	; 0x24f
 800ea7c:	4890      	ldr	r0, [pc, #576]	; (800ecc0 <rxTryParseFrame+0x278>)
 800ea7e:	f001 f98b 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d106      	bne.n	800ea96 <rxTryParseFrame+0x4e>
 800ea88:	4b8f      	ldr	r3, [pc, #572]	; (800ecc8 <rxTryParseFrame+0x280>)
 800ea8a:	4a8c      	ldr	r2, [pc, #560]	; (800ecbc <rxTryParseFrame+0x274>)
 800ea8c:	f44f 7114 	mov.w	r1, #592	; 0x250
 800ea90:	488b      	ldr	r0, [pc, #556]	; (800ecc0 <rxTryParseFrame+0x278>)
 800ea92:	f001 f981 	bl	800fd98 <__assert_func>
    bool valid = false;
 800ea96:	2300      	movs	r3, #0
 800ea98:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 8105 	beq.w	800ecae <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d106      	bne.n	800eaba <rxTryParseFrame+0x72>
 800eaac:	4b87      	ldr	r3, [pc, #540]	; (800eccc <rxTryParseFrame+0x284>)
 800eaae:	4a83      	ldr	r2, [pc, #524]	; (800ecbc <rxTryParseFrame+0x274>)
 800eab0:	f44f 7115 	mov.w	r1, #596	; 0x254
 800eab4:	4882      	ldr	r0, [pc, #520]	; (800ecc0 <rxTryParseFrame+0x278>)
 800eab6:	f001 f96f 	bl	800fd98 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800eaba:	6839      	ldr	r1, [r7, #0]
 800eabc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eac0:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	0e9b      	lsrs	r3, r3, #26
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	f003 0307 	and.w	r3, r3, #7
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d128      	bne.n	800eb44 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	0a1b      	lsrs	r3, r3, #8
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d002      	beq.n	800eb18 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	22ff      	movs	r2, #255	; 0xff
 800eb16:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	22ff      	movs	r2, #255	; 0xff
 800eb1c:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d106      	bne.n	800eb36 <rxTryParseFrame+0xee>
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <rxTryParseFrame+0xee>
 800eb32:	2301      	movs	r3, #1
 800eb34:	e000      	b.n	800eb38 <rxTryParseFrame+0xf0>
 800eb36:	2300      	movs	r3, #0
 800eb38:	77fb      	strb	r3, [r7, #31]
 800eb3a:	7ffb      	ldrb	r3, [r7, #31]
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	77fb      	strb	r3, [r7, #31]
 800eb42:	e02c      	b.n	800eb9e <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <rxTryParseFrame+0x10a>
 800eb4e:	2202      	movs	r2, #2
 800eb50:	e000      	b.n	800eb54 <rxTryParseFrame+0x10c>
 800eb52:	2201      	movs	r2, #1
            out->transfer_kind =
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	0b9b      	lsrs	r3, r3, #14
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	09db      	lsrs	r3, r3, #7
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d107      	bne.n	800eb92 <rxTryParseFrame+0x14a>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	7b1a      	ldrb	r2, [r3, #12]
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	7b5b      	ldrb	r3, [r3, #13]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d001      	beq.n	800eb92 <rxTryParseFrame+0x14a>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e000      	b.n	800eb94 <rxTryParseFrame+0x14c>
 800eb92:	2300      	movs	r3, #0
 800eb94:	77fb      	strb	r3, [r7, #31]
 800eb96:	7ffb      	ldrb	r3, [r7, #31]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	1e5a      	subs	r2, r3, #1
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689a      	ldr	r2, [r3, #8]
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	699a      	ldr	r2, [r3, #24]
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	695b      	ldr	r3, [r3, #20]
 800ebb8:	4413      	add	r3, r2
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800ebbe:	7dfb      	ldrb	r3, [r7, #23]
 800ebc0:	f003 031f 	and.w	r3, r3, #31
 800ebc4:	b2da      	uxtb	r2, r3
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800ebca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	09db      	lsrs	r3, r3, #7
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800ebd8:	7dfb      	ldrb	r3, [r7, #23]
 800ebda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	bf14      	ite	ne
 800ebe2:	2301      	movne	r3, #1
 800ebe4:	2300      	moveq	r3, #0
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
 800ebee:	f003 0320 	and.w	r3, r3, #32
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	bf14      	ite	ne
 800ebf6:	2301      	movne	r3, #1
 800ebf8:	2300      	moveq	r3, #0
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800ec00:	7ffb      	ldrb	r3, [r7, #31]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00c      	beq.n	800ec20 <rxTryParseFrame+0x1d8>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	7bdb      	ldrb	r3, [r3, #15]
 800ec0a:	f083 0301 	eor.w	r3, r3, #1
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d103      	bne.n	800ec1c <rxTryParseFrame+0x1d4>
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	7c5b      	ldrb	r3, [r3, #17]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d001      	beq.n	800ec20 <rxTryParseFrame+0x1d8>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e000      	b.n	800ec22 <rxTryParseFrame+0x1da>
 800ec20:	2300      	movs	r3, #0
 800ec22:	77fb      	strb	r3, [r7, #31]
 800ec24:	7ffb      	ldrb	r3, [r7, #31]
 800ec26:	f003 0301 	and.w	r3, r3, #1
 800ec2a:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800ec2c:	7ffb      	ldrb	r3, [r7, #31]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00d      	beq.n	800ec4e <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d003      	beq.n	800ec42 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	7c1b      	ldrb	r3, [r3, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d103      	bne.n	800ec4a <rxTryParseFrame+0x202>
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	7b1b      	ldrb	r3, [r3, #12]
 800ec46:	2bff      	cmp	r3, #255	; 0xff
 800ec48:	d001      	beq.n	800ec4e <rxTryParseFrame+0x206>
        valid = valid &&
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e000      	b.n	800ec50 <rxTryParseFrame+0x208>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	77fb      	strb	r3, [r7, #31]
 800ec52:	7ffb      	ldrb	r3, [r7, #31]
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800ec5a:	7ffb      	ldrb	r3, [r7, #31]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d009      	beq.n	800ec74 <rxTryParseFrame+0x22c>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	695b      	ldr	r3, [r3, #20]
 800ec64:	2b06      	cmp	r3, #6
 800ec66:	d803      	bhi.n	800ec70 <rxTryParseFrame+0x228>
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	7c1b      	ldrb	r3, [r3, #16]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d001      	beq.n	800ec74 <rxTryParseFrame+0x22c>
 800ec70:	2301      	movs	r3, #1
 800ec72:	e000      	b.n	800ec76 <rxTryParseFrame+0x22e>
 800ec74:	2300      	movs	r3, #0
 800ec76:	77fb      	strb	r3, [r7, #31]
 800ec78:	7ffb      	ldrb	r3, [r7, #31]
 800ec7a:	f003 0301 	and.w	r3, r3, #1
 800ec7e:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800ec80:	7ffb      	ldrb	r3, [r7, #31]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00d      	beq.n	800eca2 <rxTryParseFrame+0x25a>
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	695b      	ldr	r3, [r3, #20]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d107      	bne.n	800ec9e <rxTryParseFrame+0x256>
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	7bdb      	ldrb	r3, [r3, #15]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <rxTryParseFrame+0x25a>
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	7c1b      	ldrb	r3, [r3, #16]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <rxTryParseFrame+0x25a>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e000      	b.n	800eca4 <rxTryParseFrame+0x25c>
 800eca2:	2300      	movs	r3, #0
 800eca4:	77fb      	strb	r3, [r7, #31]
 800eca6:	7ffb      	ldrb	r3, [r7, #31]
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800ecae:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3720      	adds	r7, #32
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	08014bf0 	.word	0x08014bf0
 800ecbc:	0801563c 	.word	0x0801563c
 800ecc0:	08014798 	.word	0x08014798
 800ecc4:	08014c08 	.word	0x08014c08
 800ecc8:	08014c38 	.word	0x08014c38
 800eccc:	08014c4c 	.word	0x08014c4c

0800ecd0 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d106      	bne.n	800ecee <rxInitTransferMetadataFromFrame+0x1e>
 800ece0:	4b19      	ldr	r3, [pc, #100]	; (800ed48 <rxInitTransferMetadataFromFrame+0x78>)
 800ece2:	4a1a      	ldr	r2, [pc, #104]	; (800ed4c <rxInitTransferMetadataFromFrame+0x7c>)
 800ece4:	f240 218f 	movw	r1, #655	; 0x28f
 800ece8:	4819      	ldr	r0, [pc, #100]	; (800ed50 <rxInitTransferMetadataFromFrame+0x80>)
 800ecea:	f001 f855 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <rxInitTransferMetadataFromFrame+0x34>
 800ecf6:	4b17      	ldr	r3, [pc, #92]	; (800ed54 <rxInitTransferMetadataFromFrame+0x84>)
 800ecf8:	4a14      	ldr	r2, [pc, #80]	; (800ed4c <rxInitTransferMetadataFromFrame+0x7c>)
 800ecfa:	f44f 7124 	mov.w	r1, #656	; 0x290
 800ecfe:	4814      	ldr	r0, [pc, #80]	; (800ed50 <rxInitTransferMetadataFromFrame+0x80>)
 800ed00:	f001 f84a 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <rxInitTransferMetadataFromFrame+0x48>
 800ed0a:	4b13      	ldr	r3, [pc, #76]	; (800ed58 <rxInitTransferMetadataFromFrame+0x88>)
 800ed0c:	4a0f      	ldr	r2, [pc, #60]	; (800ed4c <rxInitTransferMetadataFromFrame+0x7c>)
 800ed0e:	f240 2191 	movw	r1, #657	; 0x291
 800ed12:	480f      	ldr	r0, [pc, #60]	; (800ed50 <rxInitTransferMetadataFromFrame+0x80>)
 800ed14:	f001 f840 	bl	800fd98 <__assert_func>
    out_transfer->priority       = frame->priority;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	7a1a      	ldrb	r2, [r3, #8]
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	7a5a      	ldrb	r2, [r3, #9]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	895a      	ldrh	r2, [r3, #10]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	7b1a      	ldrb	r2, [r3, #12]
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	7b9a      	ldrb	r2, [r3, #14]
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	715a      	strb	r2, [r3, #5]
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	08014bf0 	.word	0x08014bf0
 800ed4c:	080156d0 	.word	0x080156d0
 800ed50:	08014798 	.word	0x08014798
 800ed54:	08014c4c 	.word	0x08014c4c
 800ed58:	08014c6c 	.word	0x08014c6c

0800ed5c <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	460a      	mov	r2, r1
 800ed66:	71fb      	strb	r3, [r7, #7]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	2b1f      	cmp	r3, #31
 800ed70:	d906      	bls.n	800ed80 <rxComputeTransferIDDifference+0x24>
 800ed72:	4b15      	ldr	r3, [pc, #84]	; (800edc8 <rxComputeTransferIDDifference+0x6c>)
 800ed74:	4a15      	ldr	r2, [pc, #84]	; (800edcc <rxComputeTransferIDDifference+0x70>)
 800ed76:	f44f 7127 	mov.w	r1, #668	; 0x29c
 800ed7a:	4815      	ldr	r0, [pc, #84]	; (800edd0 <rxComputeTransferIDDifference+0x74>)
 800ed7c:	f001 f80c 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800ed80:	79bb      	ldrb	r3, [r7, #6]
 800ed82:	2b1f      	cmp	r3, #31
 800ed84:	d906      	bls.n	800ed94 <rxComputeTransferIDDifference+0x38>
 800ed86:	4b13      	ldr	r3, [pc, #76]	; (800edd4 <rxComputeTransferIDDifference+0x78>)
 800ed88:	4a10      	ldr	r2, [pc, #64]	; (800edcc <rxComputeTransferIDDifference+0x70>)
 800ed8a:	f240 219d 	movw	r1, #669	; 0x29d
 800ed8e:	4810      	ldr	r0, [pc, #64]	; (800edd0 <rxComputeTransferIDDifference+0x74>)
 800ed90:	f001 f802 	bl	800fd98 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800ed94:	79fb      	ldrb	r3, [r7, #7]
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	79bb      	ldrb	r3, [r7, #6]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800eda2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	da07      	bge.n	800edba <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800edaa:	2320      	movs	r3, #32
 800edac:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800edae:	7b7b      	ldrb	r3, [r7, #13]
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	89fb      	ldrh	r3, [r7, #14]
 800edb4:	4413      	add	r3, r2
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800edba:	89fb      	ldrh	r3, [r7, #14]
 800edbc:	b2db      	uxtb	r3, r3
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	08014c88 	.word	0x08014c88
 800edcc:	0801566c 	.word	0x0801566c
 800edd0:	08014798 	.word	0x08014798
 800edd4:	08014ca0 	.word	0x08014ca0

0800edd8 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d106      	bne.n	800edfa <rxSessionWritePayload+0x22>
 800edec:	4b67      	ldr	r3, [pc, #412]	; (800ef8c <rxSessionWritePayload+0x1b4>)
 800edee:	4a68      	ldr	r2, [pc, #416]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800edf0:	f240 21ad 	movw	r1, #685	; 0x2ad
 800edf4:	4867      	ldr	r0, [pc, #412]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800edf6:	f000 ffcf 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <rxSessionWritePayload+0x36>
 800ee00:	4b65      	ldr	r3, [pc, #404]	; (800ef98 <rxSessionWritePayload+0x1c0>)
 800ee02:	4a63      	ldr	r2, [pc, #396]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ee04:	f240 21ae 	movw	r1, #686	; 0x2ae
 800ee08:	4862      	ldr	r0, [pc, #392]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ee0a:	f000 ffc5 	bl	800fd98 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800ee0e:	6a3b      	ldr	r3, [r7, #32]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d109      	bne.n	800ee28 <rxSessionWritePayload+0x50>
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d006      	beq.n	800ee28 <rxSessionWritePayload+0x50>
 800ee1a:	4b60      	ldr	r3, [pc, #384]	; (800ef9c <rxSessionWritePayload+0x1c4>)
 800ee1c:	4a5c      	ldr	r2, [pc, #368]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ee1e:	f240 21af 	movw	r1, #687	; 0x2af
 800ee22:	485c      	ldr	r0, [pc, #368]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ee24:	f000 ffb8 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d206      	bcs.n	800ee40 <rxSessionWritePayload+0x68>
 800ee32:	4b5b      	ldr	r3, [pc, #364]	; (800efa0 <rxSessionWritePayload+0x1c8>)
 800ee34:	4a56      	ldr	r2, [pc, #344]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ee36:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800ee3a:	4856      	ldr	r0, [pc, #344]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ee3c:	f000 ffac 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	68da      	ldr	r2, [r3, #12]
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d906      	bls.n	800ee5a <rxSessionWritePayload+0x82>
 800ee4c:	4b55      	ldr	r3, [pc, #340]	; (800efa4 <rxSessionWritePayload+0x1cc>)
 800ee4e:	4a50      	ldr	r2, [pc, #320]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ee50:	f240 21b1 	movw	r1, #689	; 0x2b1
 800ee54:	484f      	ldr	r0, [pc, #316]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ee56:	f000 ff9f 	bl	800fd98 <__assert_func>

    rxs->total_payload_size += payload_size;
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	689a      	ldr	r2, [r3, #8]
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	441a      	add	r2, r3
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d115      	bne.n	800ee9a <rxSessionWritePayload+0xc2>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d012      	beq.n	800ee9a <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d006      	beq.n	800ee8a <rxSessionWritePayload+0xb2>
 800ee7c:	4b4a      	ldr	r3, [pc, #296]	; (800efa8 <rxSessionWritePayload+0x1d0>)
 800ee7e:	4a44      	ldr	r2, [pc, #272]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ee80:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800ee84:	4843      	ldr	r0, [pc, #268]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ee86:	f000 ff87 	bl	800fd98 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	6879      	ldr	r1, [r7, #4]
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	4798      	blx	r3
 800ee94:	4602      	mov	r2, r0
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	691b      	ldr	r3, [r3, #16]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d04e      	beq.n	800ef44 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	68da      	ldr	r2, [r3, #12]
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d229      	bcs.n	800ef0c <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d206      	bcs.n	800eed0 <rxSessionWritePayload+0xf8>
 800eec2:	4b37      	ldr	r3, [pc, #220]	; (800efa0 <rxSessionWritePayload+0x1c8>)
 800eec4:	4a32      	ldr	r2, [pc, #200]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800eec6:	f240 21c3 	movw	r1, #707	; 0x2c3
 800eeca:	4832      	ldr	r0, [pc, #200]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800eecc:	f000 ff64 	bl	800fd98 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	68da      	ldr	r2, [r3, #12]
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	4413      	add	r3, r2
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d006      	beq.n	800eef6 <rxSessionWritePayload+0x11e>
 800eee8:	4b30      	ldr	r3, [pc, #192]	; (800efac <rxSessionWritePayload+0x1d4>)
 800eeea:	4a29      	ldr	r2, [pc, #164]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800eeec:	f240 21c5 	movw	r1, #709	; 0x2c5
 800eef0:	4828      	ldr	r0, [pc, #160]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800eef2:	f000 ff51 	bl	800fd98 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d306      	bcc.n	800ef0c <rxSessionWritePayload+0x134>
 800eefe:	4b2c      	ldr	r3, [pc, #176]	; (800efb0 <rxSessionWritePayload+0x1d8>)
 800ef00:	4a23      	ldr	r2, [pc, #140]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ef02:	f240 21c6 	movw	r1, #710	; 0x2c6
 800ef06:	4823      	ldr	r0, [pc, #140]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ef08:	f000 ff46 	bl	800fd98 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	691a      	ldr	r2, [r3, #16]
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	4413      	add	r3, r2
 800ef16:	693a      	ldr	r2, [r7, #16]
 800ef18:	6a39      	ldr	r1, [r7, #32]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f002 f8e5 	bl	80110ea <memcpy>
        rxs->payload_size += bytes_to_copy;
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	68da      	ldr	r2, [r3, #12]
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	441a      	add	r2, r3
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d219      	bcs.n	800ef6a <rxSessionWritePayload+0x192>
 800ef36:	4b1a      	ldr	r3, [pc, #104]	; (800efa0 <rxSessionWritePayload+0x1c8>)
 800ef38:	4a15      	ldr	r2, [pc, #84]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ef3a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800ef3e:	4815      	ldr	r0, [pc, #84]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ef40:	f000 ff2a 	bl	800fd98 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	68db      	ldr	r3, [r3, #12]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d006      	beq.n	800ef5a <rxSessionWritePayload+0x182>
 800ef4c:	4b16      	ldr	r3, [pc, #88]	; (800efa8 <rxSessionWritePayload+0x1d0>)
 800ef4e:	4a10      	ldr	r2, [pc, #64]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ef50:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800ef54:	480f      	ldr	r0, [pc, #60]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ef56:	f000 ff1f 	bl	800fd98 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <rxSessionWritePayload+0x18e>
 800ef60:	f06f 0302 	mvn.w	r3, #2
 800ef64:	e000      	b.n	800ef68 <rxSessionWritePayload+0x190>
 800ef66:	2300      	movs	r3, #0
 800ef68:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800ef6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	dd06      	ble.n	800ef80 <rxSessionWritePayload+0x1a8>
 800ef72:	4b10      	ldr	r3, [pc, #64]	; (800efb4 <rxSessionWritePayload+0x1dc>)
 800ef74:	4a06      	ldr	r2, [pc, #24]	; (800ef90 <rxSessionWritePayload+0x1b8>)
 800ef76:	f240 21d7 	movw	r1, #727	; 0x2d7
 800ef7a:	4806      	ldr	r0, [pc, #24]	; (800ef94 <rxSessionWritePayload+0x1bc>)
 800ef7c:	f000 ff0c 	bl	800fd98 <__assert_func>
    return out;
 800ef80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3718      	adds	r7, #24
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	0801495c 	.word	0x0801495c
 800ef90:	080156b8 	.word	0x080156b8
 800ef94:	08014798 	.word	0x08014798
 800ef98:	08014cb8 	.word	0x08014cb8
 800ef9c:	08014854 	.word	0x08014854
 800efa0:	08014ccc 	.word	0x08014ccc
 800efa4:	08014ce8 	.word	0x08014ce8
 800efa8:	08014d18 	.word	0x08014d18
 800efac:	08014d30 	.word	0x08014d30
 800efb0:	08014d60 	.word	0x08014d60
 800efb4:	08014d80 	.word	0x08014d80

0800efb8 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d106      	bne.n	800efd6 <rxSessionRestart+0x1e>
 800efc8:	4b1a      	ldr	r3, [pc, #104]	; (800f034 <rxSessionRestart+0x7c>)
 800efca:	4a1b      	ldr	r2, [pc, #108]	; (800f038 <rxSessionRestart+0x80>)
 800efcc:	f240 21dd 	movw	r1, #733	; 0x2dd
 800efd0:	481a      	ldr	r0, [pc, #104]	; (800f03c <rxSessionRestart+0x84>)
 800efd2:	f000 fee1 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d106      	bne.n	800efea <rxSessionRestart+0x32>
 800efdc:	4b18      	ldr	r3, [pc, #96]	; (800f040 <rxSessionRestart+0x88>)
 800efde:	4a16      	ldr	r2, [pc, #88]	; (800f038 <rxSessionRestart+0x80>)
 800efe0:	f240 21de 	movw	r1, #734	; 0x2de
 800efe4:	4815      	ldr	r0, [pc, #84]	; (800f03c <rxSessionRestart+0x84>)
 800efe6:	f000 fed7 	bl	800fd98 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	6912      	ldr	r2, [r2, #16]
 800eff2:	4611      	mov	r1, r2
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	2200      	movs	r2, #0
 800effc:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2200      	movs	r2, #0
 800f002:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2200      	movs	r2, #0
 800f008:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f010:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	7d9b      	ldrb	r3, [r3, #22]
 800f016:	3301      	adds	r3, #1
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	f003 031f 	and.w	r3, r3, #31
 800f01e:	b2da      	uxtb	r2, r3
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	2201      	movs	r2, #1
 800f028:	761a      	strb	r2, [r3, #24]
}
 800f02a:	bf00      	nop
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	0801495c 	.word	0x0801495c
 800f038:	0801568c 	.word	0x0801568c
 800f03c:	08014798 	.word	0x08014798
 800f040:	08014cb8 	.word	0x08014cb8

0800f044 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b088      	sub	sp, #32
 800f048:	af02      	add	r7, sp, #8
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d106      	bne.n	800f066 <rxSessionAcceptFrame+0x22>
 800f058:	4b81      	ldr	r3, [pc, #516]	; (800f260 <rxSessionAcceptFrame+0x21c>)
 800f05a:	4a82      	ldr	r2, [pc, #520]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f05c:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f060:	4881      	ldr	r0, [pc, #516]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f062:	f000 fe99 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d106      	bne.n	800f07a <rxSessionAcceptFrame+0x36>
 800f06c:	4b7f      	ldr	r3, [pc, #508]	; (800f26c <rxSessionAcceptFrame+0x228>)
 800f06e:	4a7d      	ldr	r2, [pc, #500]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f070:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800f074:	487c      	ldr	r0, [pc, #496]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f076:	f000 fe8f 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d106      	bne.n	800f08e <rxSessionAcceptFrame+0x4a>
 800f080:	4b7b      	ldr	r3, [pc, #492]	; (800f270 <rxSessionAcceptFrame+0x22c>)
 800f082:	4a78      	ldr	r2, [pc, #480]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f084:	f240 21f1 	movw	r1, #753	; 0x2f1
 800f088:	4877      	ldr	r0, [pc, #476]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f08a:	f000 fe85 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <rxSessionAcceptFrame+0x60>
 800f096:	4b77      	ldr	r3, [pc, #476]	; (800f274 <rxSessionAcceptFrame+0x230>)
 800f098:	4a72      	ldr	r2, [pc, #456]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f09a:	f240 21f2 	movw	r1, #754	; 0x2f2
 800f09e:	4872      	ldr	r0, [pc, #456]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f0a0:	f000 fe7a 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7b9b      	ldrb	r3, [r3, #14]
 800f0a8:	2b1f      	cmp	r3, #31
 800f0aa:	d906      	bls.n	800f0ba <rxSessionAcceptFrame+0x76>
 800f0ac:	4b72      	ldr	r3, [pc, #456]	; (800f278 <rxSessionAcceptFrame+0x234>)
 800f0ae:	4a6d      	ldr	r2, [pc, #436]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f0b0:	f240 21f3 	movw	r1, #755	; 0x2f3
 800f0b4:	486c      	ldr	r0, [pc, #432]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f0b6:	f000 fe6f 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800f0ba:	6a3b      	ldr	r3, [r7, #32]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d106      	bne.n	800f0ce <rxSessionAcceptFrame+0x8a>
 800f0c0:	4b6e      	ldr	r3, [pc, #440]	; (800f27c <rxSessionAcceptFrame+0x238>)
 800f0c2:	4a68      	ldr	r2, [pc, #416]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f0c4:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800f0c8:	4867      	ldr	r0, [pc, #412]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f0ca:	f000 fe65 	bl	800fd98 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	7bdb      	ldrb	r3, [r3, #15]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d005      	beq.n	800f0e2 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0dc:	68b9      	ldr	r1, [r7, #8]
 800f0de:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	7bdb      	ldrb	r3, [r3, #15]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d005      	beq.n	800f0f6 <rxSessionAcceptFrame+0xb2>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	7c1b      	ldrb	r3, [r3, #16]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d001      	beq.n	800f0f6 <rxSessionAcceptFrame+0xb2>
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e000      	b.n	800f0f8 <rxSessionAcceptFrame+0xb4>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	75bb      	strb	r3, [r7, #22]
 800f0fa:	7dbb      	ldrb	r3, [r7, #22]
 800f0fc:	f003 0301 	and.w	r3, r3, #1
 800f100:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800f102:	7dbb      	ldrb	r3, [r7, #22]
 800f104:	f083 0301 	eor.w	r3, r3, #1
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00c      	beq.n	800f128 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	8a98      	ldrh	r0, [r3, #20]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6959      	ldr	r1, [r3, #20]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	699b      	ldr	r3, [r3, #24]
 800f11a:	461a      	mov	r2, r3
 800f11c:	f7fe fed6 	bl	800decc <crcAdd>
 800f120:	4603      	mov	r3, r0
 800f122:	461a      	mov	r2, r3
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	695a      	ldr	r2, [r3, #20]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	699b      	ldr	r3, [r3, #24]
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	4613      	mov	r3, r2
 800f134:	683a      	ldr	r2, [r7, #0]
 800f136:	68b9      	ldr	r1, [r7, #8]
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f7ff fe4d 	bl	800edd8 <rxSessionWritePayload>
 800f13e:	4603      	mov	r3, r0
 800f140:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800f142:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f146:	2b00      	cmp	r3, #0
 800f148:	da10      	bge.n	800f16c <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800f14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f14e:	f113 0f03 	cmn.w	r3, #3
 800f152:	d006      	beq.n	800f162 <rxSessionAcceptFrame+0x11e>
 800f154:	4b4a      	ldr	r3, [pc, #296]	; (800f280 <rxSessionAcceptFrame+0x23c>)
 800f156:	4a43      	ldr	r2, [pc, #268]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f158:	f240 3106 	movw	r1, #774	; 0x306
 800f15c:	4842      	ldr	r0, [pc, #264]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f15e:	f000 fe1b 	bl	800fd98 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7ff ff27 	bl	800efb8 <rxSessionRestart>
 800f16a:	e072      	b.n	800f252 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	7c1b      	ldrb	r3, [r3, #16]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d05f      	beq.n	800f234 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800f174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d006      	beq.n	800f18a <rxSessionAcceptFrame+0x146>
 800f17c:	4b41      	ldr	r3, [pc, #260]	; (800f284 <rxSessionAcceptFrame+0x240>)
 800f17e:	4a39      	ldr	r2, [pc, #228]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f180:	f240 310b 	movw	r1, #779	; 0x30b
 800f184:	4838      	ldr	r0, [pc, #224]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f186:	f000 fe07 	bl	800fd98 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800f18a:	7dbb      	ldrb	r3, [r7, #22]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d103      	bne.n	800f198 <rxSessionAcceptFrame+0x154>
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	8a9b      	ldrh	r3, [r3, #20]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d148      	bne.n	800f22a <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800f198:	2301      	movs	r3, #1
 800f19a:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800f19c:	6a3b      	ldr	r3, [r7, #32]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7ff fd95 	bl	800ecd0 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ac:	6a39      	ldr	r1, [r7, #32]
 800f1ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	68da      	ldr	r2, [r3, #12]
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	691a      	ldr	r2, [r3, #16]
 800f1be:	6a3b      	ldr	r3, [r7, #32]
 800f1c0:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	689a      	ldr	r2, [r3, #8]
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d206      	bcs.n	800f1dc <rxSessionAcceptFrame+0x198>
 800f1ce:	4b2e      	ldr	r3, [pc, #184]	; (800f288 <rxSessionAcceptFrame+0x244>)
 800f1d0:	4a24      	ldr	r2, [pc, #144]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f1d2:	f240 3115 	movw	r1, #789	; 0x315
 800f1d6:	4824      	ldr	r0, [pc, #144]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f1d8:	f000 fdde 	bl	800fd98 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	689a      	ldr	r2, [r3, #8]
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800f1e8:	7dbb      	ldrb	r3, [r7, #22]
 800f1ea:	f083 0301 	eor.w	r3, r3, #1
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d017      	beq.n	800f224 <rxSessionAcceptFrame+0x1e0>
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d814      	bhi.n	800f224 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	691a      	ldr	r2, [r3, #16]
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f1c3 0302 	rsb	r3, r3, #2
 800f204:	429a      	cmp	r2, r3
 800f206:	d206      	bcs.n	800f216 <rxSessionAcceptFrame+0x1d2>
 800f208:	4b20      	ldr	r3, [pc, #128]	; (800f28c <rxSessionAcceptFrame+0x248>)
 800f20a:	4a16      	ldr	r2, [pc, #88]	; (800f264 <rxSessionAcceptFrame+0x220>)
 800f20c:	f240 3119 	movw	r1, #793	; 0x319
 800f210:	4815      	ldr	r0, [pc, #84]	; (800f268 <rxSessionAcceptFrame+0x224>)
 800f212:	f000 fdc1 	bl	800fd98 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	691a      	ldr	r2, [r3, #16]
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	4413      	add	r3, r2
 800f21e:	1e9a      	subs	r2, r3, #2
 800f220:	6a3b      	ldr	r3, [r7, #32]
 800f222:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2200      	movs	r2, #0
 800f228:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800f22a:	68b9      	ldr	r1, [r7, #8]
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7ff fec3 	bl	800efb8 <rxSessionRestart>
 800f232:	e00e      	b.n	800f252 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	7e1b      	ldrb	r3, [r3, #24]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	bf14      	ite	ne
 800f23c:	2301      	movne	r3, #1
 800f23e:	2300      	moveq	r3, #0
 800f240:	b2db      	uxtb	r3, r3
 800f242:	f083 0301 	eor.w	r3, r3, #1
 800f246:	b2db      	uxtb	r3, r3
 800f248:	f003 0301 	and.w	r3, r3, #1
 800f24c:	b2da      	uxtb	r2, r3
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800f252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3718      	adds	r7, #24
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	0801495c 	.word	0x0801495c
 800f264:	080156a0 	.word	0x080156a0
 800f268:	08014798 	.word	0x08014798
 800f26c:	08014cb8 	.word	0x08014cb8
 800f270:	08014bf0 	.word	0x08014bf0
 800f274:	08014c4c 	.word	0x08014c4c
 800f278:	08014d8c 	.word	0x08014d8c
 800f27c:	08014c6c 	.word	0x08014c6c
 800f280:	08014db4 	.word	0x08014db4
 800f284:	08014dc0 	.word	0x08014dc0
 800f288:	08014dcc 	.word	0x08014dcc
 800f28c:	08014dfc 	.word	0x08014dfc

0800f290 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800f290:	b5b0      	push	{r4, r5, r7, lr}
 800f292:	b088      	sub	sp, #32
 800f294:	af02      	add	r7, sp, #8
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
 800f29c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d106      	bne.n	800f2b2 <rxSessionUpdate+0x22>
 800f2a4:	4b6d      	ldr	r3, [pc, #436]	; (800f45c <rxSessionUpdate+0x1cc>)
 800f2a6:	4a6e      	ldr	r2, [pc, #440]	; (800f460 <rxSessionUpdate+0x1d0>)
 800f2a8:	f240 3137 	movw	r1, #823	; 0x337
 800f2ac:	486d      	ldr	r0, [pc, #436]	; (800f464 <rxSessionUpdate+0x1d4>)
 800f2ae:	f000 fd73 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d106      	bne.n	800f2c6 <rxSessionUpdate+0x36>
 800f2b8:	4b6b      	ldr	r3, [pc, #428]	; (800f468 <rxSessionUpdate+0x1d8>)
 800f2ba:	4a69      	ldr	r2, [pc, #420]	; (800f460 <rxSessionUpdate+0x1d0>)
 800f2bc:	f44f 714e 	mov.w	r1, #824	; 0x338
 800f2c0:	4868      	ldr	r0, [pc, #416]	; (800f464 <rxSessionUpdate+0x1d4>)
 800f2c2:	f000 fd69 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d106      	bne.n	800f2da <rxSessionUpdate+0x4a>
 800f2cc:	4b67      	ldr	r3, [pc, #412]	; (800f46c <rxSessionUpdate+0x1dc>)
 800f2ce:	4a64      	ldr	r2, [pc, #400]	; (800f460 <rxSessionUpdate+0x1d0>)
 800f2d0:	f240 3139 	movw	r1, #825	; 0x339
 800f2d4:	4863      	ldr	r0, [pc, #396]	; (800f464 <rxSessionUpdate+0x1d4>)
 800f2d6:	f000 fd5f 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800f2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d106      	bne.n	800f2ee <rxSessionUpdate+0x5e>
 800f2e0:	4b63      	ldr	r3, [pc, #396]	; (800f470 <rxSessionUpdate+0x1e0>)
 800f2e2:	4a5f      	ldr	r2, [pc, #380]	; (800f460 <rxSessionUpdate+0x1d0>)
 800f2e4:	f240 313a 	movw	r1, #826	; 0x33a
 800f2e8:	485e      	ldr	r0, [pc, #376]	; (800f464 <rxSessionUpdate+0x1d4>)
 800f2ea:	f000 fd55 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	7d9b      	ldrb	r3, [r3, #22]
 800f2f2:	2b1f      	cmp	r3, #31
 800f2f4:	d906      	bls.n	800f304 <rxSessionUpdate+0x74>
 800f2f6:	4b5f      	ldr	r3, [pc, #380]	; (800f474 <rxSessionUpdate+0x1e4>)
 800f2f8:	4a59      	ldr	r2, [pc, #356]	; (800f460 <rxSessionUpdate+0x1d0>)
 800f2fa:	f240 313b 	movw	r1, #827	; 0x33b
 800f2fe:	4859      	ldr	r0, [pc, #356]	; (800f464 <rxSessionUpdate+0x1d4>)
 800f300:	f000 fd4a 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	7b9b      	ldrb	r3, [r3, #14]
 800f308:	2b1f      	cmp	r3, #31
 800f30a:	d906      	bls.n	800f31a <rxSessionUpdate+0x8a>
 800f30c:	4b5a      	ldr	r3, [pc, #360]	; (800f478 <rxSessionUpdate+0x1e8>)
 800f30e:	4a54      	ldr	r2, [pc, #336]	; (800f460 <rxSessionUpdate+0x1d0>)
 800f310:	f44f 714f 	mov.w	r1, #828	; 0x33c
 800f314:	4853      	ldr	r0, [pc, #332]	; (800f464 <rxSessionUpdate+0x1d4>)
 800f316:	f000 fd3f 	bl	800fd98 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f326:	4290      	cmp	r0, r2
 800f328:	eb71 0303 	sbcs.w	r3, r1, r3
 800f32c:	d20f      	bcs.n	800f34e <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33a:	1a84      	subs	r4, r0, r2
 800f33c:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800f340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f344:	42a2      	cmp	r2, r4
 800f346:	41ab      	sbcs	r3, r5
 800f348:	d201      	bcs.n	800f34e <rxSessionUpdate+0xbe>
 800f34a:	2301      	movs	r3, #1
 800f34c:	e000      	b.n	800f350 <rxSessionUpdate+0xc0>
 800f34e:	2300      	movs	r3, #0
 800f350:	75bb      	strb	r3, [r7, #22]
 800f352:	7dbb      	ldrb	r3, [r7, #22]
 800f354:	f003 0301 	and.w	r3, r3, #1
 800f358:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	7d9a      	ldrb	r2, [r3, #22]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	7b9b      	ldrb	r3, [r3, #14]
 800f362:	4619      	mov	r1, r3
 800f364:	4610      	mov	r0, r2
 800f366:	f7ff fcf9 	bl	800ed5c <rxComputeTransferIDDifference>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	bf8c      	ite	hi
 800f370:	2301      	movhi	r3, #1
 800f372:	2300      	movls	r3, #0
 800f374:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800f376:	7dbb      	ldrb	r3, [r7, #22]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d10b      	bne.n	800f394 <rxSessionUpdate+0x104>
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	7ddb      	ldrb	r3, [r3, #23]
 800f380:	78fa      	ldrb	r2, [r7, #3]
 800f382:	429a      	cmp	r2, r3
 800f384:	d108      	bne.n	800f398 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d004      	beq.n	800f398 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800f38e:	7d7b      	ldrb	r3, [r7, #21]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d001      	beq.n	800f398 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800f394:	2301      	movs	r3, #1
 800f396:	e000      	b.n	800f39a <rxSessionUpdate+0x10a>
 800f398:	2300      	movs	r3, #0
 800f39a:	753b      	strb	r3, [r7, #20]
 800f39c:	7d3b      	ldrb	r3, [r7, #20]
 800f39e:	f003 0301 	and.w	r3, r3, #1
 800f3a2:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 800f3a4:	7d3b      	ldrb	r3, [r7, #20]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d013      	beq.n	800f3d2 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3bc:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	7b9a      	ldrb	r2, [r3, #14]
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	78fa      	ldrb	r2, [r7, #3]
 800f3d0:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 800f3d6:	7d3b      	ldrb	r3, [r7, #20]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <rxSessionUpdate+0x164>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	7bdb      	ldrb	r3, [r3, #15]
 800f3e0:	f083 0301 	eor.w	r3, r3, #1
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d004      	beq.n	800f3f4 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 800f3ea:	68b9      	ldr	r1, [r7, #8]
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f7ff fde3 	bl	800efb8 <rxSessionRestart>
 800f3f2:	e02c      	b.n	800f44e <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	7ddb      	ldrb	r3, [r3, #23]
 800f3f8:	78fa      	ldrb	r2, [r7, #3]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	bf0c      	ite	eq
 800f3fe:	2301      	moveq	r3, #1
 800f400:	2300      	movne	r3, #0
 800f402:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	7c5a      	ldrb	r2, [r3, #17]
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	7e1b      	ldrb	r3, [r3, #24]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	bf0c      	ite	eq
 800f410:	2301      	moveq	r3, #1
 800f412:	2300      	movne	r3, #0
 800f414:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	7b9a      	ldrb	r2, [r3, #14]
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	7d9b      	ldrb	r3, [r3, #22]
 800f41e:	429a      	cmp	r2, r3
 800f420:	bf0c      	ite	eq
 800f422:	2301      	moveq	r3, #1
 800f424:	2300      	movne	r3, #0
 800f426:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 800f428:	7cfb      	ldrb	r3, [r7, #19]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00f      	beq.n	800f44e <rxSessionUpdate+0x1be>
 800f42e:	7cbb      	ldrb	r3, [r7, #18]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00c      	beq.n	800f44e <rxSessionUpdate+0x1be>
 800f434:	7c7b      	ldrb	r3, [r7, #17]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d009      	beq.n	800f44e <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800f43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	68b9      	ldr	r1, [r7, #8]
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7ff fdfd 	bl	800f044 <rxSessionAcceptFrame>
 800f44a:	4603      	mov	r3, r0
 800f44c:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 800f44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f452:	4618      	mov	r0, r3
 800f454:	3718      	adds	r7, #24
 800f456:	46bd      	mov	sp, r7
 800f458:	bdb0      	pop	{r4, r5, r7, pc}
 800f45a:	bf00      	nop
 800f45c:	0801495c 	.word	0x0801495c
 800f460:	0801565c 	.word	0x0801565c
 800f464:	08014798 	.word	0x08014798
 800f468:	08014cb8 	.word	0x08014cb8
 800f46c:	08014bf0 	.word	0x08014bf0
 800f470:	08014c6c 	.word	0x08014c6c
 800f474:	08014e34 	.word	0x08014e34
 800f478:	08014d8c 	.word	0x08014d8c

0800f47c <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800f47c:	b5b0      	push	{r4, r5, r7, lr}
 800f47e:	b08c      	sub	sp, #48	; 0x30
 800f480:	af04      	add	r7, sp, #16
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
 800f488:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d106      	bne.n	800f49e <rxAcceptFrame+0x22>
 800f490:	4b85      	ldr	r3, [pc, #532]	; (800f6a8 <rxAcceptFrame+0x22c>)
 800f492:	4a86      	ldr	r2, [pc, #536]	; (800f6ac <rxAcceptFrame+0x230>)
 800f494:	f44f 715a 	mov.w	r1, #872	; 0x368
 800f498:	4885      	ldr	r0, [pc, #532]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f49a:	f000 fc7d 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d106      	bne.n	800f4b2 <rxAcceptFrame+0x36>
 800f4a4:	4b83      	ldr	r3, [pc, #524]	; (800f6b4 <rxAcceptFrame+0x238>)
 800f4a6:	4a81      	ldr	r2, [pc, #516]	; (800f6ac <rxAcceptFrame+0x230>)
 800f4a8:	f240 3169 	movw	r1, #873	; 0x369
 800f4ac:	4880      	ldr	r0, [pc, #512]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f4ae:	f000 fc73 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	8b9a      	ldrh	r2, [r3, #28]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	895b      	ldrh	r3, [r3, #10]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d006      	beq.n	800f4cc <rxAcceptFrame+0x50>
 800f4be:	4b7e      	ldr	r3, [pc, #504]	; (800f6b8 <rxAcceptFrame+0x23c>)
 800f4c0:	4a7a      	ldr	r2, [pc, #488]	; (800f6ac <rxAcceptFrame+0x230>)
 800f4c2:	f240 316a 	movw	r1, #874	; 0x36a
 800f4c6:	487a      	ldr	r0, [pc, #488]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f4c8:	f000 fc66 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <rxAcceptFrame+0x64>
 800f4d2:	4b7a      	ldr	r3, [pc, #488]	; (800f6bc <rxAcceptFrame+0x240>)
 800f4d4:	4a75      	ldr	r2, [pc, #468]	; (800f6ac <rxAcceptFrame+0x230>)
 800f4d6:	f240 316b 	movw	r1, #875	; 0x36b
 800f4da:	4875      	ldr	r0, [pc, #468]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f4dc:	f000 fc5c 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	699b      	ldr	r3, [r3, #24]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d106      	bne.n	800f4f6 <rxAcceptFrame+0x7a>
 800f4e8:	4b75      	ldr	r3, [pc, #468]	; (800f6c0 <rxAcceptFrame+0x244>)
 800f4ea:	4a70      	ldr	r2, [pc, #448]	; (800f6ac <rxAcceptFrame+0x230>)
 800f4ec:	f44f 715b 	mov.w	r1, #876	; 0x36c
 800f4f0:	486f      	ldr	r0, [pc, #444]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f4f2:	f000 fc51 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	7b9b      	ldrb	r3, [r3, #14]
 800f4fa:	2b1f      	cmp	r3, #31
 800f4fc:	d906      	bls.n	800f50c <rxAcceptFrame+0x90>
 800f4fe:	4b71      	ldr	r3, [pc, #452]	; (800f6c4 <rxAcceptFrame+0x248>)
 800f500:	4a6a      	ldr	r2, [pc, #424]	; (800f6ac <rxAcceptFrame+0x230>)
 800f502:	f240 316d 	movw	r1, #877	; 0x36d
 800f506:	486a      	ldr	r0, [pc, #424]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f508:	f000 fc46 	bl	800fd98 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	7b5b      	ldrb	r3, [r3, #13]
 800f510:	2bff      	cmp	r3, #255	; 0xff
 800f512:	d00c      	beq.n	800f52e <rxAcceptFrame+0xb2>
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	791a      	ldrb	r2, [r3, #4]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	7b5b      	ldrb	r3, [r3, #13]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d006      	beq.n	800f52e <rxAcceptFrame+0xb2>
 800f520:	4b69      	ldr	r3, [pc, #420]	; (800f6c8 <rxAcceptFrame+0x24c>)
 800f522:	4a62      	ldr	r2, [pc, #392]	; (800f6ac <rxAcceptFrame+0x230>)
 800f524:	f240 316e 	movw	r1, #878	; 0x36e
 800f528:	4861      	ldr	r0, [pc, #388]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f52a:	f000 fc35 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800f52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f530:	2b00      	cmp	r3, #0
 800f532:	d106      	bne.n	800f542 <rxAcceptFrame+0xc6>
 800f534:	4b65      	ldr	r3, [pc, #404]	; (800f6cc <rxAcceptFrame+0x250>)
 800f536:	4a5d      	ldr	r2, [pc, #372]	; (800f6ac <rxAcceptFrame+0x230>)
 800f538:	f240 316f 	movw	r1, #879	; 0x36f
 800f53c:	485c      	ldr	r0, [pc, #368]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f53e:	f000 fc2b 	bl	800fd98 <__assert_func>

    int8_t out = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	7b1b      	ldrb	r3, [r3, #12]
 800f54a:	b25b      	sxtb	r3, r3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	db6c      	blt.n	800f62a <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7b1b      	ldrb	r3, [r3, #12]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	3308      	adds	r3, #8
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	4413      	add	r3, r2
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d134      	bne.n	800f5cc <rxAcceptFrame+0x150>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	7bdb      	ldrb	r3, [r3, #15]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d030      	beq.n	800f5cc <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	2120      	movs	r1, #32
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	4798      	blx	r3
 800f574:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	7b1b      	ldrb	r3, [r3, #12]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	3308      	adds	r3, #8
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	4413      	add	r3, r2
 800f582:	693a      	ldr	r2, [r7, #16]
 800f584:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d01d      	beq.n	800f5c8 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	6939      	ldr	r1, [r7, #16]
 800f594:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	2200      	movs	r2, #0
 800f59c:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5b0:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	7b9a      	ldrb	r2, [r3, #14]
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	78fa      	ldrb	r2, [r7, #3]
 800f5be:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	761a      	strb	r2, [r3, #24]
 800f5c6:	e001      	b.n	800f5cc <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800f5c8:	23fd      	movs	r3, #253	; 0xfd
 800f5ca:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	7b1b      	ldrb	r3, [r3, #12]
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	3308      	adds	r3, #8
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	4413      	add	r3, r2
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d05e      	beq.n	800f69c <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800f5de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d006      	beq.n	800f5f4 <rxAcceptFrame+0x178>
 800f5e6:	4b3a      	ldr	r3, [pc, #232]	; (800f6d0 <rxAcceptFrame+0x254>)
 800f5e8:	4a30      	ldr	r2, [pc, #192]	; (800f6ac <rxAcceptFrame+0x230>)
 800f5ea:	f240 318e 	movw	r1, #910	; 0x38e
 800f5ee:	4830      	ldr	r0, [pc, #192]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f5f0:	f000 fbd2 	bl	800fd98 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	7b1b      	ldrb	r3, [r3, #12]
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	3308      	adds	r3, #8
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4413      	add	r3, r2
 800f600:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f608:	68b9      	ldr	r1, [r7, #8]
 800f60a:	6989      	ldr	r1, [r1, #24]
 800f60c:	78fd      	ldrb	r5, [r7, #3]
 800f60e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f610:	9003      	str	r0, [sp, #12]
 800f612:	9102      	str	r1, [sp, #8]
 800f614:	e9cd 2300 	strd	r2, r3, [sp]
 800f618:	462b      	mov	r3, r5
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	4621      	mov	r1, r4
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f7ff fe36 	bl	800f290 <rxSessionUpdate>
 800f624:	4603      	mov	r3, r0
 800f626:	77fb      	strb	r3, [r7, #31]
 800f628:	e038      	b.n	800f69c <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	7b1b      	ldrb	r3, [r3, #12]
 800f62e:	2bff      	cmp	r3, #255	; 0xff
 800f630:	d006      	beq.n	800f640 <rxAcceptFrame+0x1c4>
 800f632:	4b28      	ldr	r3, [pc, #160]	; (800f6d4 <rxAcceptFrame+0x258>)
 800f634:	4a1d      	ldr	r2, [pc, #116]	; (800f6ac <rxAcceptFrame+0x230>)
 800f636:	f240 319a 	movw	r1, #922	; 0x39a
 800f63a:	481d      	ldr	r0, [pc, #116]	; (800f6b0 <rxAcceptFrame+0x234>)
 800f63c:	f000 fbac 	bl	800fd98 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	695a      	ldr	r2, [r3, #20]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800f648:	4293      	cmp	r3, r2
 800f64a:	bf28      	it	cs
 800f64c:	4613      	movcs	r3, r2
 800f64e:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	69b9      	ldr	r1, [r7, #24]
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	4798      	blx	r3
 800f65a:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d01a      	beq.n	800f698 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff fb32 	bl	800ecd0 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f674:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	69ba      	ldr	r2, [r7, #24]
 800f67c:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	699b      	ldr	r3, [r3, #24]
 800f688:	69ba      	ldr	r2, [r7, #24]
 800f68a:	4619      	mov	r1, r3
 800f68c:	6978      	ldr	r0, [r7, #20]
 800f68e:	f001 fd2c 	bl	80110ea <memcpy>
            out = 1;
 800f692:	2301      	movs	r3, #1
 800f694:	77fb      	strb	r3, [r7, #31]
 800f696:	e001      	b.n	800f69c <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800f698:	23fd      	movs	r3, #253	; 0xfd
 800f69a:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800f69c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3720      	adds	r7, #32
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bdb0      	pop	{r4, r5, r7, pc}
 800f6a8:	0801495c 	.word	0x0801495c
 800f6ac:	0801564c 	.word	0x0801564c
 800f6b0:	08014798 	.word	0x08014798
 800f6b4:	08014e5c 	.word	0x08014e5c
 800f6b8:	08014e78 	.word	0x08014e78
 800f6bc:	08014bf0 	.word	0x08014bf0
 800f6c0:	08014c4c 	.word	0x08014c4c
 800f6c4:	08014d8c 	.word	0x08014d8c
 800f6c8:	08014ea0 	.word	0x08014ea0
 800f6cc:	08014c6c 	.word	0x08014c6c
 800f6d0:	08014ef8 	.word	0x08014ef8
 800f6d4:	08014f04 	.word	0x08014f04

0800f6d8 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	8b9b      	ldrh	r3, [r3, #28]
 800f6ec:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800f6ee:	89fa      	ldrh	r2, [r7, #14]
 800f6f0:	89bb      	ldrh	r3, [r7, #12]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d00a      	beq.n	800f70c <rxSubscriptionPredicateOnPortID+0x34>
 800f6f6:	89fa      	ldrh	r2, [r7, #14]
 800f6f8:	89bb      	ldrh	r3, [r7, #12]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	bf8c      	ite	hi
 800f6fe:	2301      	movhi	r3, #1
 800f700:	2300      	movls	r3, #0
 800f702:	b2db      	uxtb	r3, r3
 800f704:	461a      	mov	r2, r3
 800f706:	4b05      	ldr	r3, [pc, #20]	; (800f71c <rxSubscriptionPredicateOnPortID+0x44>)
 800f708:	569b      	ldrsb	r3, [r3, r2]
 800f70a:	e000      	b.n	800f70e <rxSubscriptionPredicateOnPortID+0x36>
 800f70c:	2300      	movs	r3, #0
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	08015638 	.word	0x08015638

0800f720 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	331c      	adds	r3, #28
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	4618      	mov	r0, r3
 800f732:	f7ff ffd1 	bl	800f6d8 <rxSubscriptionPredicateOnPortID>
 800f736:	4603      	mov	r3, r0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800f740:	b5b0      	push	{r4, r5, r7, lr}
 800f742:	b08c      	sub	sp, #48	; 0x30
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d106      	bne.n	800f760 <canardInit+0x20>
 800f752:	4b16      	ldr	r3, [pc, #88]	; (800f7ac <canardInit+0x6c>)
 800f754:	4a16      	ldr	r2, [pc, #88]	; (800f7b0 <canardInit+0x70>)
 800f756:	f240 31d6 	movw	r1, #982	; 0x3d6
 800f75a:	4816      	ldr	r0, [pc, #88]	; (800f7b4 <canardInit+0x74>)
 800f75c:	f000 fb1c 	bl	800fd98 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d106      	bne.n	800f774 <canardInit+0x34>
 800f766:	4b14      	ldr	r3, [pc, #80]	; (800f7b8 <canardInit+0x78>)
 800f768:	4a11      	ldr	r2, [pc, #68]	; (800f7b0 <canardInit+0x70>)
 800f76a:	f240 31d7 	movw	r1, #983	; 0x3d7
 800f76e:	4811      	ldr	r0, [pc, #68]	; (800f7b4 <canardInit+0x74>)
 800f770:	f000 fb12 	bl	800fd98 <__assert_func>
    const CanardInstance out = {
 800f774:	2300      	movs	r3, #0
 800f776:	617b      	str	r3, [r7, #20]
 800f778:	23ff      	movs	r3, #255	; 0xff
 800f77a:	763b      	strb	r3, [r7, #24]
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	61fb      	str	r3, [r7, #28]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	623b      	str	r3, [r7, #32]
 800f784:	2300      	movs	r3, #0
 800f786:	627b      	str	r3, [r7, #36]	; 0x24
 800f788:	2300      	movs	r3, #0
 800f78a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f78c:	2300      	movs	r3, #0
 800f78e:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	461d      	mov	r5, r3
 800f794:	f107 0414 	add.w	r4, r7, #20
 800f798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f79a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f79c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f7a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	3730      	adds	r7, #48	; 0x30
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bdb0      	pop	{r4, r5, r7, pc}
 800f7ac:	08014f24 	.word	0x08014f24
 800f7b0:	080154c0 	.word	0x080154c0
 800f7b4:	08014798 	.word	0x08014798
 800f7b8:	08014f44 	.word	0x08014f44

0800f7bc <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800f7bc:	b4b0      	push	{r4, r5, r7}
 800f7be:	b08b      	sub	sp, #44	; 0x2c
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	617b      	str	r3, [r7, #20]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	61bb      	str	r3, [r7, #24]
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	61fb      	str	r3, [r7, #28]
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	623b      	str	r3, [r7, #32]
 800f7d8:	2300      	movs	r3, #0
 800f7da:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	461d      	mov	r5, r3
 800f7e0:	f107 0414 	add.w	r4, r7, #20
 800f7e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	602b      	str	r3, [r5, #0]
}
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	372c      	adds	r7, #44	; 0x2c
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bcb0      	pop	{r4, r5, r7}
 800f7f4:	4770      	bx	lr
	...

0800f7f8 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b08e      	sub	sp, #56	; 0x38
 800f7fc:	af06      	add	r7, sp, #24
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800f806:	f06f 0301 	mvn.w	r3, #1
 800f80a:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d062      	beq.n	800f8d8 <canardTxPush+0xe0>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d05f      	beq.n	800f8d8 <canardTxPush+0xe0>
 800f818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d05c      	beq.n	800f8d8 <canardTxPush+0xe0>
 800f81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f820:	2b00      	cmp	r3, #0
 800f822:	d102      	bne.n	800f82a <canardTxPush+0x32>
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	2b00      	cmp	r3, #0
 800f828:	d156      	bne.n	800f8d8 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fc02 	bl	800e038 <adjustPresentationLayerMTU>
 800f834:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	791a      	ldrb	r2, [r3, #4]
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	4613      	mov	r3, r2
 800f840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f846:	f7fe fc27 	bl	800e098 <txMakeCANID>
 800f84a:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	db40      	blt.n	800f8d4 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800f852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	429a      	cmp	r2, r3
 800f858:	d81c      	bhi.n	800f894 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800f85a:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800f85c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f85e:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800f860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f862:	9103      	str	r1, [sp, #12]
 800f864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f866:	9102      	str	r1, [sp, #8]
 800f868:	9201      	str	r2, [sp, #4]
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f870:	68b9      	ldr	r1, [r7, #8]
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	f7fe fdda 	bl	800e42c <txPushSingleFrame>
 800f878:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	db2b      	blt.n	800f8d8 <canardTxPush+0xe0>
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	2b01      	cmp	r3, #1
 800f884:	d028      	beq.n	800f8d8 <canardTxPush+0xe0>
 800f886:	4b1c      	ldr	r3, [pc, #112]	; (800f8f8 <canardTxPush+0x100>)
 800f888:	4a1c      	ldr	r2, [pc, #112]	; (800f8fc <canardTxPush+0x104>)
 800f88a:	f240 4105 	movw	r1, #1029	; 0x405
 800f88e:	481c      	ldr	r0, [pc, #112]	; (800f900 <canardTxPush+0x108>)
 800f890:	f000 fa82 	bl	800fd98 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800f894:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800f896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f898:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800f89a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f89c:	9105      	str	r1, [sp, #20]
 800f89e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8a0:	9104      	str	r1, [sp, #16]
 800f8a2:	9203      	str	r2, [sp, #12]
 800f8a4:	9302      	str	r3, [sp, #8]
 800f8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8aa:	e9cd 2300 	strd	r2, r3, [sp]
 800f8ae:	69ba      	ldr	r2, [r7, #24]
 800f8b0:	68b9      	ldr	r1, [r7, #8]
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f7fe ffd4 	bl	800e860 <txPushMultiFrame>
 800f8b8:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	db0b      	blt.n	800f8d8 <canardTxPush+0xe0>
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	dc08      	bgt.n	800f8d8 <canardTxPush+0xe0>
 800f8c6:	4b0f      	ldr	r3, [pc, #60]	; (800f904 <canardTxPush+0x10c>)
 800f8c8:	4a0c      	ldr	r2, [pc, #48]	; (800f8fc <canardTxPush+0x104>)
 800f8ca:	f240 4111 	movw	r1, #1041	; 0x411
 800f8ce:	480c      	ldr	r0, [pc, #48]	; (800f900 <canardTxPush+0x108>)
 800f8d0:	f000 fa62 	bl	800fd98 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d106      	bne.n	800f8ec <canardTxPush+0xf4>
 800f8de:	4b0a      	ldr	r3, [pc, #40]	; (800f908 <canardTxPush+0x110>)
 800f8e0:	4a06      	ldr	r2, [pc, #24]	; (800f8fc <canardTxPush+0x104>)
 800f8e2:	f240 4119 	movw	r1, #1049	; 0x419
 800f8e6:	4806      	ldr	r0, [pc, #24]	; (800f900 <canardTxPush+0x108>)
 800f8e8:	f000 fa56 	bl	800fd98 <__assert_func>
    return out;
 800f8ec:	69fb      	ldr	r3, [r7, #28]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3720      	adds	r7, #32
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	08014a94 	.word	0x08014a94
 800f8fc:	080154cc 	.word	0x080154cc
 800f900:	08014798 	.word	0x08014798
 800f904:	08014bd8 	.word	0x08014bd8
 800f908:	08014f60 	.word	0x08014f60

0800f90c <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800f914:	2300      	movs	r3, #0
 800f916:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d006      	beq.n	800f92c <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	2100      	movs	r1, #0
 800f924:	4618      	mov	r0, r3
 800f926:	f7fd ff1d 	bl	800d764 <cavlFindExtremum>
 800f92a:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800f92c:	68fb      	ldr	r3, [r7, #12]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800f940:	2300      	movs	r3, #0
 800f942:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d010      	beq.n	800f96c <canardTxPop+0x36>
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00d      	beq.n	800f96c <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	330c      	adds	r3, #12
 800f958:	683a      	ldr	r2, [r7, #0]
 800f95a:	4611      	mov	r1, r2
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fe f957 	bl	800dc10 <cavlRemove>
        que->size--;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	1e5a      	subs	r2, r3, #1
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	609a      	str	r2, [r3, #8]
    }
    return out;
 800f96c:	68fb      	ldr	r3, [r7, #12]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3710      	adds	r7, #16
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
	...

0800f978 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b090      	sub	sp, #64	; 0x40
 800f97c:	af02      	add	r7, sp, #8
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800f984:	23fe      	movs	r3, #254	; 0xfe
 800f986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d068      	beq.n	800fa62 <canardRxAccept+0xea>
 800f990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f992:	2b00      	cmp	r3, #0
 800f994:	d065      	beq.n	800fa62 <canardRxAccept+0xea>
 800f996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d062      	beq.n	800fa62 <canardRxAccept+0xea>
 800f99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9a4:	d25d      	bcs.n	800fa62 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800f9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9a8:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d103      	bne.n	800f9b6 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800f9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d155      	bne.n	800fa62 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800f9b6:	f107 0310 	add.w	r3, r7, #16
 800f9ba:	2220      	movs	r2, #32
 800f9bc:	2100      	movs	r1, #0
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f001 faad 	bl	8010f1e <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800f9c4:	f107 0310 	add.w	r3, r7, #16
 800f9c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f9ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9ce:	f7ff f83b 	bl	800ea48 <rxTryParseFrame>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d041      	beq.n	800fa5c <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800f9d8:	7f7b      	ldrb	r3, [r7, #29]
 800f9da:	2bff      	cmp	r3, #255	; 0xff
 800f9dc:	d004      	beq.n	800f9e8 <canardRxAccept+0x70>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	791a      	ldrb	r2, [r3, #4]
 800f9e2:	7f7b      	ldrb	r3, [r7, #29]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d135      	bne.n	800fa54 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800f9e8:	7e7b      	ldrb	r3, [r7, #25]
 800f9ea:	3304      	adds	r3, #4
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	18d0      	adds	r0, r2, r3
 800f9f2:	f107 0310 	add.w	r3, r7, #16
 800f9f6:	f103 010a 	add.w	r1, r3, #10
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	4a21      	ldr	r2, [pc, #132]	; (800fa84 <canardRxAccept+0x10c>)
 800f9fe:	f7fe f889 	bl	800db14 <cavlSearch>
 800fa02:	6338      	str	r0, [r7, #48]	; 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 800fa04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d002      	beq.n	800fa10 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800fa0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa0e:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800fa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d01a      	beq.n	800fa4c <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	8b9a      	ldrh	r2, [r3, #28]
 800fa1a:	8b7b      	ldrh	r3, [r7, #26]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d006      	beq.n	800fa2e <canardRxAccept+0xb6>
 800fa20:	4b19      	ldr	r3, [pc, #100]	; (800fa88 <canardRxAccept+0x110>)
 800fa22:	4a1a      	ldr	r2, [pc, #104]	; (800fa8c <canardRxAccept+0x114>)
 800fa24:	f240 415a 	movw	r1, #1114	; 0x45a
 800fa28:	4819      	ldr	r0, [pc, #100]	; (800fa90 <canardRxAccept+0x118>)
 800fa2a:	f000 f9b5 	bl	800fd98 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 800fa2e:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800fa32:	f107 0210 	add.w	r2, r7, #16
 800fa36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa38:	9300      	str	r3, [sp, #0]
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f7ff fd1c 	bl	800f47c <rxAcceptFrame>
 800fa44:	4603      	mov	r3, r0
 800fa46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800fa4a:	e00a      	b.n	800fa62 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800fa52:	e006      	b.n	800fa62 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800fa54:	2300      	movs	r3, #0
 800fa56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fa5a:	e002      	b.n	800fa62 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800fa62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	dd06      	ble.n	800fa78 <canardRxAccept+0x100>
 800fa6a:	4b0a      	ldr	r3, [pc, #40]	; (800fa94 <canardRxAccept+0x11c>)
 800fa6c:	4a07      	ldr	r2, [pc, #28]	; (800fa8c <canardRxAccept+0x114>)
 800fa6e:	f240 416c 	movw	r1, #1132	; 0x46c
 800fa72:	4807      	ldr	r0, [pc, #28]	; (800fa90 <canardRxAccept+0x118>)
 800fa74:	f000 f990 	bl	800fd98 <__assert_func>
    return out;
 800fa78:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3738      	adds	r7, #56	; 0x38
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	0800f6d9 	.word	0x0800f6d9
 800fa88:	08014f6c 	.word	0x08014f6c
 800fa8c:	08015628 	.word	0x08015628
 800fa90:	08014798 	.word	0x08014798
 800fa94:	08014f8c 	.word	0x08014f8c

0800fa98 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b088      	sub	sp, #32
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	607b      	str	r3, [r7, #4]
 800faa2:	460b      	mov	r3, r1
 800faa4:	72fb      	strb	r3, [r7, #11]
 800faa6:	4613      	mov	r3, r2
 800faa8:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800faaa:	23fe      	movs	r3, #254	; 0xfe
 800faac:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800faae:	7afb      	ldrb	r3, [r7, #11]
 800fab0:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d04a      	beq.n	800fb4e <canardRxSubscribe+0xb6>
 800fab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d047      	beq.n	800fb4e <canardRxSubscribe+0xb6>
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	d844      	bhi.n	800fb4e <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800fac4:	893a      	ldrh	r2, [r7, #8]
 800fac6:	7afb      	ldrb	r3, [r7, #11]
 800fac8:	4619      	mov	r1, r3
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f000 f850 	bl	800fb70 <canardRxUnsubscribe>
 800fad0:	4603      	mov	r3, r0
 800fad2:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800fad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	db38      	blt.n	800fb4e <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800fadc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fae2:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800fae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800faec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faee:	893a      	ldrh	r2, [r7, #8]
 800faf0:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800faf2:	2300      	movs	r3, #0
 800faf4:	61bb      	str	r3, [r7, #24]
 800faf6:	e009      	b.n	800fb0c <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800faf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	3308      	adds	r3, #8
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	4413      	add	r3, r2
 800fb02:	2200      	movs	r2, #0
 800fb04:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	61bb      	str	r3, [r7, #24]
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	2b7f      	cmp	r3, #127	; 0x7f
 800fb10:	d9f2      	bls.n	800faf8 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	3304      	adds	r3, #4
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	18d0      	adds	r0, r2, r3
 800fb1c:	4b0f      	ldr	r3, [pc, #60]	; (800fb5c <canardRxSubscribe+0xc4>)
 800fb1e:	4a10      	ldr	r2, [pc, #64]	; (800fb60 <canardRxSubscribe+0xc8>)
 800fb20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb22:	f7fd fff7 	bl	800db14 <cavlSearch>
 800fb26:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800fb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d006      	beq.n	800fb3e <canardRxSubscribe+0xa6>
 800fb30:	4b0c      	ldr	r3, [pc, #48]	; (800fb64 <canardRxSubscribe+0xcc>)
 800fb32:	4a0d      	ldr	r2, [pc, #52]	; (800fb68 <canardRxSubscribe+0xd0>)
 800fb34:	f44f 6192 	mov.w	r1, #1168	; 0x490
 800fb38:	480c      	ldr	r0, [pc, #48]	; (800fb6c <canardRxSubscribe+0xd4>)
 800fb3a:	f000 f92d 	bl	800fd98 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800fb3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bfd4      	ite	le
 800fb46:	2301      	movle	r3, #1
 800fb48:	2300      	movgt	r3, #0
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800fb4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3720      	adds	r7, #32
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	0800de75 	.word	0x0800de75
 800fb60:	0800f721 	.word	0x0800f721
 800fb64:	08014f98 	.word	0x08014f98
 800fb68:	080156f0 	.word	0x080156f0
 800fb6c:	08014798 	.word	0x08014798

0800fb70 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b088      	sub	sp, #32
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800fb80:	23fe      	movs	r3, #254	; 0xfe
 800fb82:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800fb84:	78fb      	ldrb	r3, [r7, #3]
 800fb86:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d05f      	beq.n	800fc4e <canardRxUnsubscribe+0xde>
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	d85c      	bhi.n	800fc4e <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800fb94:	883b      	ldrh	r3, [r7, #0]
 800fb96:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	18d0      	adds	r0, r2, r3
 800fba2:	f107 010e 	add.w	r1, r7, #14
 800fba6:	2300      	movs	r3, #0
 800fba8:	4a2c      	ldr	r2, [pc, #176]	; (800fc5c <canardRxUnsubscribe+0xec>)
 800fbaa:	f7fd ffb3 	bl	800db14 <cavlSearch>
 800fbae:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d049      	beq.n	800fc4a <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	3304      	adds	r3, #4
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fe f823 	bl	800dc10 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	8b9b      	ldrh	r3, [r3, #28]
 800fbce:	883a      	ldrh	r2, [r7, #0]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d006      	beq.n	800fbe2 <canardRxUnsubscribe+0x72>
 800fbd4:	4b22      	ldr	r3, [pc, #136]	; (800fc60 <canardRxUnsubscribe+0xf0>)
 800fbd6:	4a23      	ldr	r2, [pc, #140]	; (800fc64 <canardRxUnsubscribe+0xf4>)
 800fbd8:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800fbdc:	4822      	ldr	r0, [pc, #136]	; (800fc68 <canardRxUnsubscribe+0xf8>)
 800fbde:	f000 f8db 	bl	800fd98 <__assert_func>
            out = 1;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	61bb      	str	r3, [r7, #24]
 800fbea:	e02a      	b.n	800fc42 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	68da      	ldr	r2, [r3, #12]
 800fbf0:	6939      	ldr	r1, [r7, #16]
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	3308      	adds	r3, #8
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	440b      	add	r3, r1
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d007      	beq.n	800fc10 <canardRxUnsubscribe+0xa0>
 800fc00:	6939      	ldr	r1, [r7, #16]
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	3308      	adds	r3, #8
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	440b      	add	r3, r1
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	e000      	b.n	800fc12 <canardRxUnsubscribe+0xa2>
 800fc10:	2300      	movs	r3, #0
 800fc12:	4619      	mov	r1, r3
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68da      	ldr	r2, [r3, #12]
 800fc1c:	6939      	ldr	r1, [r7, #16]
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	3308      	adds	r3, #8
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	440b      	add	r3, r1
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	4619      	mov	r1, r3
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	3308      	adds	r3, #8
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	4413      	add	r3, r2
 800fc38:	2200      	movs	r2, #0
 800fc3a:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	61bb      	str	r3, [r7, #24]
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	2b7f      	cmp	r3, #127	; 0x7f
 800fc46:	d9d1      	bls.n	800fbec <canardRxUnsubscribe+0x7c>
 800fc48:	e001      	b.n	800fc4e <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800fc4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3720      	adds	r7, #32
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	0800f6d9 	.word	0x0800f6d9
 800fc60:	08014fb8 	.word	0x08014fb8
 800fc64:	08015704 	.word	0x08015704
 800fc68:	08014798 	.word	0x08014798

0800fc6c <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	460b      	mov	r3, r1
 800fc76:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 800fc78:	f107 0308 	add.w	r3, r7, #8
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	601a      	str	r2, [r3, #0]
 800fc80:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 800fc82:	887b      	ldrh	r3, [r7, #2]
 800fc84:	021b      	lsls	r3, r3, #8
 800fc86:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 800fc88:	4b07      	ldr	r3, [pc, #28]	; (800fca8 <canardMakeFilterForSubject+0x3c>)
 800fc8a:	60fb      	str	r3, [r7, #12]

    return out;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	461a      	mov	r2, r3
 800fc90:	f107 0308 	add.w	r3, r7, #8
 800fc94:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc98:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	3714      	adds	r7, #20
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	021fff80 	.word	0x021fff80

0800fcac <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 800fcb8:	f107 0308 	add.w	r3, r7, #8
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	601a      	str	r2, [r3, #0]
 800fcc0:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 800fcc2:	78fb      	ldrb	r3, [r7, #3]
 800fcc4:	01db      	lsls	r3, r3, #7
 800fcc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fcca:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 800fccc:	4b07      	ldr	r3, [pc, #28]	; (800fcec <canardMakeFilterForServices+0x40>)
 800fcce:	60fb      	str	r3, [r7, #12]

    return out;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	f107 0308 	add.w	r3, r7, #8
 800fcd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fcdc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	3714      	adds	r7, #20
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	02803f80 	.word	0x02803f80

0800fcf0 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 800fcfc:	f107 0310 	add.w	r3, r7, #16
 800fd00:	2200      	movs	r2, #0
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	685a      	ldr	r2, [r3, #4]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	401a      	ands	r2, r3
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	6819      	ldr	r1, [r3, #0]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	404b      	eors	r3, r1
 800fd1a:	43db      	mvns	r3, r3
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	4013      	ands	r3, r2
 800fd28:	613b      	str	r3, [r7, #16]

    return out;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	f107 0310 	add.w	r3, r7, #16
 800fd32:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd36:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	371c      	adds	r7, #28
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <_ZdlPvj>:
 800fd46:	f000 b814 	b.w	800fd72 <_ZdlPv>

0800fd4a <_Znwj>:
 800fd4a:	2801      	cmp	r0, #1
 800fd4c:	bf38      	it	cc
 800fd4e:	2001      	movcc	r0, #1
 800fd50:	b510      	push	{r4, lr}
 800fd52:	4604      	mov	r4, r0
 800fd54:	4620      	mov	r0, r4
 800fd56:	f000 f84f 	bl	800fdf8 <malloc>
 800fd5a:	b100      	cbz	r0, 800fd5e <_Znwj+0x14>
 800fd5c:	bd10      	pop	{r4, pc}
 800fd5e:	f000 f80b 	bl	800fd78 <_ZSt15get_new_handlerv>
 800fd62:	b908      	cbnz	r0, 800fd68 <_Znwj+0x1e>
 800fd64:	f000 f810 	bl	800fd88 <abort>
 800fd68:	4780      	blx	r0
 800fd6a:	e7f3      	b.n	800fd54 <_Znwj+0xa>

0800fd6c <_ZSt25__throw_bad_function_callv>:
 800fd6c:	b508      	push	{r3, lr}
 800fd6e:	f000 f80b 	bl	800fd88 <abort>

0800fd72 <_ZdlPv>:
 800fd72:	f000 b849 	b.w	800fe08 <free>
	...

0800fd78 <_ZSt15get_new_handlerv>:
 800fd78:	4b02      	ldr	r3, [pc, #8]	; (800fd84 <_ZSt15get_new_handlerv+0xc>)
 800fd7a:	6818      	ldr	r0, [r3, #0]
 800fd7c:	f3bf 8f5b 	dmb	ish
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	200006bc 	.word	0x200006bc

0800fd88 <abort>:
 800fd88:	b508      	push	{r3, lr}
 800fd8a:	2006      	movs	r0, #6
 800fd8c:	f001 f90a 	bl	8010fa4 <raise>
 800fd90:	2001      	movs	r0, #1
 800fd92:	f7f8 f8ad 	bl	8007ef0 <_exit>
	...

0800fd98 <__assert_func>:
 800fd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd9a:	4614      	mov	r4, r2
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	4b09      	ldr	r3, [pc, #36]	; (800fdc4 <__assert_func+0x2c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4605      	mov	r5, r0
 800fda4:	68d8      	ldr	r0, [r3, #12]
 800fda6:	b14c      	cbz	r4, 800fdbc <__assert_func+0x24>
 800fda8:	4b07      	ldr	r3, [pc, #28]	; (800fdc8 <__assert_func+0x30>)
 800fdaa:	9100      	str	r1, [sp, #0]
 800fdac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdb0:	4906      	ldr	r1, [pc, #24]	; (800fdcc <__assert_func+0x34>)
 800fdb2:	462b      	mov	r3, r5
 800fdb4:	f000 fff6 	bl	8010da4 <fiprintf>
 800fdb8:	f7ff ffe6 	bl	800fd88 <abort>
 800fdbc:	4b04      	ldr	r3, [pc, #16]	; (800fdd0 <__assert_func+0x38>)
 800fdbe:	461c      	mov	r4, r3
 800fdc0:	e7f3      	b.n	800fdaa <__assert_func+0x12>
 800fdc2:	bf00      	nop
 800fdc4:	200000a0 	.word	0x200000a0
 800fdc8:	08015718 	.word	0x08015718
 800fdcc:	08015725 	.word	0x08015725
 800fdd0:	08015753 	.word	0x08015753

0800fdd4 <exit>:
 800fdd4:	b508      	push	{r3, lr}
 800fdd6:	4b06      	ldr	r3, [pc, #24]	; (800fdf0 <exit+0x1c>)
 800fdd8:	4604      	mov	r4, r0
 800fdda:	b113      	cbz	r3, 800fde2 <exit+0xe>
 800fddc:	2100      	movs	r1, #0
 800fdde:	f3af 8000 	nop.w
 800fde2:	4b04      	ldr	r3, [pc, #16]	; (800fdf4 <exit+0x20>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	b103      	cbz	r3, 800fdea <exit+0x16>
 800fde8:	4798      	blx	r3
 800fdea:	4620      	mov	r0, r4
 800fdec:	f7f8 f880 	bl	8007ef0 <_exit>
 800fdf0:	00000000 	.word	0x00000000
 800fdf4:	20000800 	.word	0x20000800

0800fdf8 <malloc>:
 800fdf8:	4b02      	ldr	r3, [pc, #8]	; (800fe04 <malloc+0xc>)
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	6818      	ldr	r0, [r3, #0]
 800fdfe:	f000 b82b 	b.w	800fe58 <_malloc_r>
 800fe02:	bf00      	nop
 800fe04:	200000a0 	.word	0x200000a0

0800fe08 <free>:
 800fe08:	4b02      	ldr	r3, [pc, #8]	; (800fe14 <free+0xc>)
 800fe0a:	4601      	mov	r1, r0
 800fe0c:	6818      	ldr	r0, [r3, #0]
 800fe0e:	f001 bffd 	b.w	8011e0c <_free_r>
 800fe12:	bf00      	nop
 800fe14:	200000a0 	.word	0x200000a0

0800fe18 <sbrk_aligned>:
 800fe18:	b570      	push	{r4, r5, r6, lr}
 800fe1a:	4e0e      	ldr	r6, [pc, #56]	; (800fe54 <sbrk_aligned+0x3c>)
 800fe1c:	460c      	mov	r4, r1
 800fe1e:	6831      	ldr	r1, [r6, #0]
 800fe20:	4605      	mov	r5, r0
 800fe22:	b911      	cbnz	r1, 800fe2a <sbrk_aligned+0x12>
 800fe24:	f001 f912 	bl	801104c <_sbrk_r>
 800fe28:	6030      	str	r0, [r6, #0]
 800fe2a:	4621      	mov	r1, r4
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f001 f90d 	bl	801104c <_sbrk_r>
 800fe32:	1c43      	adds	r3, r0, #1
 800fe34:	d00a      	beq.n	800fe4c <sbrk_aligned+0x34>
 800fe36:	1cc4      	adds	r4, r0, #3
 800fe38:	f024 0403 	bic.w	r4, r4, #3
 800fe3c:	42a0      	cmp	r0, r4
 800fe3e:	d007      	beq.n	800fe50 <sbrk_aligned+0x38>
 800fe40:	1a21      	subs	r1, r4, r0
 800fe42:	4628      	mov	r0, r5
 800fe44:	f001 f902 	bl	801104c <_sbrk_r>
 800fe48:	3001      	adds	r0, #1
 800fe4a:	d101      	bne.n	800fe50 <sbrk_aligned+0x38>
 800fe4c:	f04f 34ff 	mov.w	r4, #4294967295
 800fe50:	4620      	mov	r0, r4
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
 800fe54:	200006c4 	.word	0x200006c4

0800fe58 <_malloc_r>:
 800fe58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe5c:	1ccd      	adds	r5, r1, #3
 800fe5e:	f025 0503 	bic.w	r5, r5, #3
 800fe62:	3508      	adds	r5, #8
 800fe64:	2d0c      	cmp	r5, #12
 800fe66:	bf38      	it	cc
 800fe68:	250c      	movcc	r5, #12
 800fe6a:	2d00      	cmp	r5, #0
 800fe6c:	4607      	mov	r7, r0
 800fe6e:	db01      	blt.n	800fe74 <_malloc_r+0x1c>
 800fe70:	42a9      	cmp	r1, r5
 800fe72:	d905      	bls.n	800fe80 <_malloc_r+0x28>
 800fe74:	230c      	movs	r3, #12
 800fe76:	603b      	str	r3, [r7, #0]
 800fe78:	2600      	movs	r6, #0
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ff54 <_malloc_r+0xfc>
 800fe84:	f000 f868 	bl	800ff58 <__malloc_lock>
 800fe88:	f8d8 3000 	ldr.w	r3, [r8]
 800fe8c:	461c      	mov	r4, r3
 800fe8e:	bb5c      	cbnz	r4, 800fee8 <_malloc_r+0x90>
 800fe90:	4629      	mov	r1, r5
 800fe92:	4638      	mov	r0, r7
 800fe94:	f7ff ffc0 	bl	800fe18 <sbrk_aligned>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	d155      	bne.n	800ff4a <_malloc_r+0xf2>
 800fe9e:	f8d8 4000 	ldr.w	r4, [r8]
 800fea2:	4626      	mov	r6, r4
 800fea4:	2e00      	cmp	r6, #0
 800fea6:	d145      	bne.n	800ff34 <_malloc_r+0xdc>
 800fea8:	2c00      	cmp	r4, #0
 800feaa:	d048      	beq.n	800ff3e <_malloc_r+0xe6>
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	4631      	mov	r1, r6
 800feb0:	4638      	mov	r0, r7
 800feb2:	eb04 0903 	add.w	r9, r4, r3
 800feb6:	f001 f8c9 	bl	801104c <_sbrk_r>
 800feba:	4581      	cmp	r9, r0
 800febc:	d13f      	bne.n	800ff3e <_malloc_r+0xe6>
 800febe:	6821      	ldr	r1, [r4, #0]
 800fec0:	1a6d      	subs	r5, r5, r1
 800fec2:	4629      	mov	r1, r5
 800fec4:	4638      	mov	r0, r7
 800fec6:	f7ff ffa7 	bl	800fe18 <sbrk_aligned>
 800feca:	3001      	adds	r0, #1
 800fecc:	d037      	beq.n	800ff3e <_malloc_r+0xe6>
 800fece:	6823      	ldr	r3, [r4, #0]
 800fed0:	442b      	add	r3, r5
 800fed2:	6023      	str	r3, [r4, #0]
 800fed4:	f8d8 3000 	ldr.w	r3, [r8]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d038      	beq.n	800ff4e <_malloc_r+0xf6>
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	42a2      	cmp	r2, r4
 800fee0:	d12b      	bne.n	800ff3a <_malloc_r+0xe2>
 800fee2:	2200      	movs	r2, #0
 800fee4:	605a      	str	r2, [r3, #4]
 800fee6:	e00f      	b.n	800ff08 <_malloc_r+0xb0>
 800fee8:	6822      	ldr	r2, [r4, #0]
 800feea:	1b52      	subs	r2, r2, r5
 800feec:	d41f      	bmi.n	800ff2e <_malloc_r+0xd6>
 800feee:	2a0b      	cmp	r2, #11
 800fef0:	d917      	bls.n	800ff22 <_malloc_r+0xca>
 800fef2:	1961      	adds	r1, r4, r5
 800fef4:	42a3      	cmp	r3, r4
 800fef6:	6025      	str	r5, [r4, #0]
 800fef8:	bf18      	it	ne
 800fefa:	6059      	strne	r1, [r3, #4]
 800fefc:	6863      	ldr	r3, [r4, #4]
 800fefe:	bf08      	it	eq
 800ff00:	f8c8 1000 	streq.w	r1, [r8]
 800ff04:	5162      	str	r2, [r4, r5]
 800ff06:	604b      	str	r3, [r1, #4]
 800ff08:	4638      	mov	r0, r7
 800ff0a:	f104 060b 	add.w	r6, r4, #11
 800ff0e:	f000 f829 	bl	800ff64 <__malloc_unlock>
 800ff12:	f026 0607 	bic.w	r6, r6, #7
 800ff16:	1d23      	adds	r3, r4, #4
 800ff18:	1af2      	subs	r2, r6, r3
 800ff1a:	d0ae      	beq.n	800fe7a <_malloc_r+0x22>
 800ff1c:	1b9b      	subs	r3, r3, r6
 800ff1e:	50a3      	str	r3, [r4, r2]
 800ff20:	e7ab      	b.n	800fe7a <_malloc_r+0x22>
 800ff22:	42a3      	cmp	r3, r4
 800ff24:	6862      	ldr	r2, [r4, #4]
 800ff26:	d1dd      	bne.n	800fee4 <_malloc_r+0x8c>
 800ff28:	f8c8 2000 	str.w	r2, [r8]
 800ff2c:	e7ec      	b.n	800ff08 <_malloc_r+0xb0>
 800ff2e:	4623      	mov	r3, r4
 800ff30:	6864      	ldr	r4, [r4, #4]
 800ff32:	e7ac      	b.n	800fe8e <_malloc_r+0x36>
 800ff34:	4634      	mov	r4, r6
 800ff36:	6876      	ldr	r6, [r6, #4]
 800ff38:	e7b4      	b.n	800fea4 <_malloc_r+0x4c>
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	e7cc      	b.n	800fed8 <_malloc_r+0x80>
 800ff3e:	230c      	movs	r3, #12
 800ff40:	603b      	str	r3, [r7, #0]
 800ff42:	4638      	mov	r0, r7
 800ff44:	f000 f80e 	bl	800ff64 <__malloc_unlock>
 800ff48:	e797      	b.n	800fe7a <_malloc_r+0x22>
 800ff4a:	6025      	str	r5, [r4, #0]
 800ff4c:	e7dc      	b.n	800ff08 <_malloc_r+0xb0>
 800ff4e:	605b      	str	r3, [r3, #4]
 800ff50:	deff      	udf	#255	; 0xff
 800ff52:	bf00      	nop
 800ff54:	200006c0 	.word	0x200006c0

0800ff58 <__malloc_lock>:
 800ff58:	4801      	ldr	r0, [pc, #4]	; (800ff60 <__malloc_lock+0x8>)
 800ff5a:	f001 b8c4 	b.w	80110e6 <__retarget_lock_acquire_recursive>
 800ff5e:	bf00      	nop
 800ff60:	20000808 	.word	0x20000808

0800ff64 <__malloc_unlock>:
 800ff64:	4801      	ldr	r0, [pc, #4]	; (800ff6c <__malloc_unlock+0x8>)
 800ff66:	f001 b8bf 	b.w	80110e8 <__retarget_lock_release_recursive>
 800ff6a:	bf00      	nop
 800ff6c:	20000808 	.word	0x20000808

0800ff70 <__cvt>:
 800ff70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff74:	ec55 4b10 	vmov	r4, r5, d0
 800ff78:	2d00      	cmp	r5, #0
 800ff7a:	460e      	mov	r6, r1
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	462b      	mov	r3, r5
 800ff80:	bfbb      	ittet	lt
 800ff82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff86:	461d      	movlt	r5, r3
 800ff88:	2300      	movge	r3, #0
 800ff8a:	232d      	movlt	r3, #45	; 0x2d
 800ff8c:	700b      	strb	r3, [r1, #0]
 800ff8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff94:	4691      	mov	r9, r2
 800ff96:	f023 0820 	bic.w	r8, r3, #32
 800ff9a:	bfbc      	itt	lt
 800ff9c:	4622      	movlt	r2, r4
 800ff9e:	4614      	movlt	r4, r2
 800ffa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffa4:	d005      	beq.n	800ffb2 <__cvt+0x42>
 800ffa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffaa:	d100      	bne.n	800ffae <__cvt+0x3e>
 800ffac:	3601      	adds	r6, #1
 800ffae:	2102      	movs	r1, #2
 800ffb0:	e000      	b.n	800ffb4 <__cvt+0x44>
 800ffb2:	2103      	movs	r1, #3
 800ffb4:	ab03      	add	r3, sp, #12
 800ffb6:	9301      	str	r3, [sp, #4]
 800ffb8:	ab02      	add	r3, sp, #8
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	ec45 4b10 	vmov	d0, r4, r5
 800ffc0:	4653      	mov	r3, sl
 800ffc2:	4632      	mov	r2, r6
 800ffc4:	f001 f930 	bl	8011228 <_dtoa_r>
 800ffc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ffcc:	4607      	mov	r7, r0
 800ffce:	d102      	bne.n	800ffd6 <__cvt+0x66>
 800ffd0:	f019 0f01 	tst.w	r9, #1
 800ffd4:	d022      	beq.n	801001c <__cvt+0xac>
 800ffd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffda:	eb07 0906 	add.w	r9, r7, r6
 800ffde:	d110      	bne.n	8010002 <__cvt+0x92>
 800ffe0:	783b      	ldrb	r3, [r7, #0]
 800ffe2:	2b30      	cmp	r3, #48	; 0x30
 800ffe4:	d10a      	bne.n	800fffc <__cvt+0x8c>
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	2300      	movs	r3, #0
 800ffea:	4620      	mov	r0, r4
 800ffec:	4629      	mov	r1, r5
 800ffee:	f7f0 fd93 	bl	8000b18 <__aeabi_dcmpeq>
 800fff2:	b918      	cbnz	r0, 800fffc <__cvt+0x8c>
 800fff4:	f1c6 0601 	rsb	r6, r6, #1
 800fff8:	f8ca 6000 	str.w	r6, [sl]
 800fffc:	f8da 3000 	ldr.w	r3, [sl]
 8010000:	4499      	add	r9, r3
 8010002:	2200      	movs	r2, #0
 8010004:	2300      	movs	r3, #0
 8010006:	4620      	mov	r0, r4
 8010008:	4629      	mov	r1, r5
 801000a:	f7f0 fd85 	bl	8000b18 <__aeabi_dcmpeq>
 801000e:	b108      	cbz	r0, 8010014 <__cvt+0xa4>
 8010010:	f8cd 900c 	str.w	r9, [sp, #12]
 8010014:	2230      	movs	r2, #48	; 0x30
 8010016:	9b03      	ldr	r3, [sp, #12]
 8010018:	454b      	cmp	r3, r9
 801001a:	d307      	bcc.n	801002c <__cvt+0xbc>
 801001c:	9b03      	ldr	r3, [sp, #12]
 801001e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010020:	1bdb      	subs	r3, r3, r7
 8010022:	4638      	mov	r0, r7
 8010024:	6013      	str	r3, [r2, #0]
 8010026:	b004      	add	sp, #16
 8010028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801002c:	1c59      	adds	r1, r3, #1
 801002e:	9103      	str	r1, [sp, #12]
 8010030:	701a      	strb	r2, [r3, #0]
 8010032:	e7f0      	b.n	8010016 <__cvt+0xa6>

08010034 <__exponent>:
 8010034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010036:	4603      	mov	r3, r0
 8010038:	2900      	cmp	r1, #0
 801003a:	bfb8      	it	lt
 801003c:	4249      	neglt	r1, r1
 801003e:	f803 2b02 	strb.w	r2, [r3], #2
 8010042:	bfb4      	ite	lt
 8010044:	222d      	movlt	r2, #45	; 0x2d
 8010046:	222b      	movge	r2, #43	; 0x2b
 8010048:	2909      	cmp	r1, #9
 801004a:	7042      	strb	r2, [r0, #1]
 801004c:	dd2a      	ble.n	80100a4 <__exponent+0x70>
 801004e:	f10d 0207 	add.w	r2, sp, #7
 8010052:	4617      	mov	r7, r2
 8010054:	260a      	movs	r6, #10
 8010056:	4694      	mov	ip, r2
 8010058:	fb91 f5f6 	sdiv	r5, r1, r6
 801005c:	fb06 1415 	mls	r4, r6, r5, r1
 8010060:	3430      	adds	r4, #48	; 0x30
 8010062:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010066:	460c      	mov	r4, r1
 8010068:	2c63      	cmp	r4, #99	; 0x63
 801006a:	f102 32ff 	add.w	r2, r2, #4294967295
 801006e:	4629      	mov	r1, r5
 8010070:	dcf1      	bgt.n	8010056 <__exponent+0x22>
 8010072:	3130      	adds	r1, #48	; 0x30
 8010074:	f1ac 0402 	sub.w	r4, ip, #2
 8010078:	f802 1c01 	strb.w	r1, [r2, #-1]
 801007c:	1c41      	adds	r1, r0, #1
 801007e:	4622      	mov	r2, r4
 8010080:	42ba      	cmp	r2, r7
 8010082:	d30a      	bcc.n	801009a <__exponent+0x66>
 8010084:	f10d 0209 	add.w	r2, sp, #9
 8010088:	eba2 020c 	sub.w	r2, r2, ip
 801008c:	42bc      	cmp	r4, r7
 801008e:	bf88      	it	hi
 8010090:	2200      	movhi	r2, #0
 8010092:	4413      	add	r3, r2
 8010094:	1a18      	subs	r0, r3, r0
 8010096:	b003      	add	sp, #12
 8010098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801009a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801009e:	f801 5f01 	strb.w	r5, [r1, #1]!
 80100a2:	e7ed      	b.n	8010080 <__exponent+0x4c>
 80100a4:	2330      	movs	r3, #48	; 0x30
 80100a6:	3130      	adds	r1, #48	; 0x30
 80100a8:	7083      	strb	r3, [r0, #2]
 80100aa:	70c1      	strb	r1, [r0, #3]
 80100ac:	1d03      	adds	r3, r0, #4
 80100ae:	e7f1      	b.n	8010094 <__exponent+0x60>

080100b0 <_printf_float>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	ed2d 8b02 	vpush	{d8}
 80100b8:	b08d      	sub	sp, #52	; 0x34
 80100ba:	460c      	mov	r4, r1
 80100bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100c0:	4616      	mov	r6, r2
 80100c2:	461f      	mov	r7, r3
 80100c4:	4605      	mov	r5, r0
 80100c6:	f000 ff75 	bl	8010fb4 <_localeconv_r>
 80100ca:	f8d0 a000 	ldr.w	sl, [r0]
 80100ce:	4650      	mov	r0, sl
 80100d0:	f7f0 f8f6 	bl	80002c0 <strlen>
 80100d4:	2300      	movs	r3, #0
 80100d6:	930a      	str	r3, [sp, #40]	; 0x28
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	9305      	str	r3, [sp, #20]
 80100dc:	f8d8 3000 	ldr.w	r3, [r8]
 80100e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80100e4:	3307      	adds	r3, #7
 80100e6:	f023 0307 	bic.w	r3, r3, #7
 80100ea:	f103 0208 	add.w	r2, r3, #8
 80100ee:	f8c8 2000 	str.w	r2, [r8]
 80100f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80100fa:	9307      	str	r3, [sp, #28]
 80100fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8010100:	ee08 0a10 	vmov	s16, r0
 8010104:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801010c:	4b9e      	ldr	r3, [pc, #632]	; (8010388 <_printf_float+0x2d8>)
 801010e:	f04f 32ff 	mov.w	r2, #4294967295
 8010112:	f7f0 fd33 	bl	8000b7c <__aeabi_dcmpun>
 8010116:	bb88      	cbnz	r0, 801017c <_printf_float+0xcc>
 8010118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801011c:	4b9a      	ldr	r3, [pc, #616]	; (8010388 <_printf_float+0x2d8>)
 801011e:	f04f 32ff 	mov.w	r2, #4294967295
 8010122:	f7f0 fd0d 	bl	8000b40 <__aeabi_dcmple>
 8010126:	bb48      	cbnz	r0, 801017c <_printf_float+0xcc>
 8010128:	2200      	movs	r2, #0
 801012a:	2300      	movs	r3, #0
 801012c:	4640      	mov	r0, r8
 801012e:	4649      	mov	r1, r9
 8010130:	f7f0 fcfc 	bl	8000b2c <__aeabi_dcmplt>
 8010134:	b110      	cbz	r0, 801013c <_printf_float+0x8c>
 8010136:	232d      	movs	r3, #45	; 0x2d
 8010138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801013c:	4a93      	ldr	r2, [pc, #588]	; (801038c <_printf_float+0x2dc>)
 801013e:	4b94      	ldr	r3, [pc, #592]	; (8010390 <_printf_float+0x2e0>)
 8010140:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010144:	bf94      	ite	ls
 8010146:	4690      	movls	r8, r2
 8010148:	4698      	movhi	r8, r3
 801014a:	2303      	movs	r3, #3
 801014c:	6123      	str	r3, [r4, #16]
 801014e:	9b05      	ldr	r3, [sp, #20]
 8010150:	f023 0304 	bic.w	r3, r3, #4
 8010154:	6023      	str	r3, [r4, #0]
 8010156:	f04f 0900 	mov.w	r9, #0
 801015a:	9700      	str	r7, [sp, #0]
 801015c:	4633      	mov	r3, r6
 801015e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010160:	4621      	mov	r1, r4
 8010162:	4628      	mov	r0, r5
 8010164:	f000 f9da 	bl	801051c <_printf_common>
 8010168:	3001      	adds	r0, #1
 801016a:	f040 8090 	bne.w	801028e <_printf_float+0x1de>
 801016e:	f04f 30ff 	mov.w	r0, #4294967295
 8010172:	b00d      	add	sp, #52	; 0x34
 8010174:	ecbd 8b02 	vpop	{d8}
 8010178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017c:	4642      	mov	r2, r8
 801017e:	464b      	mov	r3, r9
 8010180:	4640      	mov	r0, r8
 8010182:	4649      	mov	r1, r9
 8010184:	f7f0 fcfa 	bl	8000b7c <__aeabi_dcmpun>
 8010188:	b140      	cbz	r0, 801019c <_printf_float+0xec>
 801018a:	464b      	mov	r3, r9
 801018c:	2b00      	cmp	r3, #0
 801018e:	bfbc      	itt	lt
 8010190:	232d      	movlt	r3, #45	; 0x2d
 8010192:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010196:	4a7f      	ldr	r2, [pc, #508]	; (8010394 <_printf_float+0x2e4>)
 8010198:	4b7f      	ldr	r3, [pc, #508]	; (8010398 <_printf_float+0x2e8>)
 801019a:	e7d1      	b.n	8010140 <_printf_float+0x90>
 801019c:	6863      	ldr	r3, [r4, #4]
 801019e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101a2:	9206      	str	r2, [sp, #24]
 80101a4:	1c5a      	adds	r2, r3, #1
 80101a6:	d13f      	bne.n	8010228 <_printf_float+0x178>
 80101a8:	2306      	movs	r3, #6
 80101aa:	6063      	str	r3, [r4, #4]
 80101ac:	9b05      	ldr	r3, [sp, #20]
 80101ae:	6861      	ldr	r1, [r4, #4]
 80101b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101b4:	2300      	movs	r3, #0
 80101b6:	9303      	str	r3, [sp, #12]
 80101b8:	ab0a      	add	r3, sp, #40	; 0x28
 80101ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101be:	ab09      	add	r3, sp, #36	; 0x24
 80101c0:	ec49 8b10 	vmov	d0, r8, r9
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	6022      	str	r2, [r4, #0]
 80101c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101cc:	4628      	mov	r0, r5
 80101ce:	f7ff fecf 	bl	800ff70 <__cvt>
 80101d2:	9b06      	ldr	r3, [sp, #24]
 80101d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101d6:	2b47      	cmp	r3, #71	; 0x47
 80101d8:	4680      	mov	r8, r0
 80101da:	d108      	bne.n	80101ee <_printf_float+0x13e>
 80101dc:	1cc8      	adds	r0, r1, #3
 80101de:	db02      	blt.n	80101e6 <_printf_float+0x136>
 80101e0:	6863      	ldr	r3, [r4, #4]
 80101e2:	4299      	cmp	r1, r3
 80101e4:	dd41      	ble.n	801026a <_printf_float+0x1ba>
 80101e6:	f1ab 0302 	sub.w	r3, fp, #2
 80101ea:	fa5f fb83 	uxtb.w	fp, r3
 80101ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80101f2:	d820      	bhi.n	8010236 <_printf_float+0x186>
 80101f4:	3901      	subs	r1, #1
 80101f6:	465a      	mov	r2, fp
 80101f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80101fc:	9109      	str	r1, [sp, #36]	; 0x24
 80101fe:	f7ff ff19 	bl	8010034 <__exponent>
 8010202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010204:	1813      	adds	r3, r2, r0
 8010206:	2a01      	cmp	r2, #1
 8010208:	4681      	mov	r9, r0
 801020a:	6123      	str	r3, [r4, #16]
 801020c:	dc02      	bgt.n	8010214 <_printf_float+0x164>
 801020e:	6822      	ldr	r2, [r4, #0]
 8010210:	07d2      	lsls	r2, r2, #31
 8010212:	d501      	bpl.n	8010218 <_printf_float+0x168>
 8010214:	3301      	adds	r3, #1
 8010216:	6123      	str	r3, [r4, #16]
 8010218:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801021c:	2b00      	cmp	r3, #0
 801021e:	d09c      	beq.n	801015a <_printf_float+0xaa>
 8010220:	232d      	movs	r3, #45	; 0x2d
 8010222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010226:	e798      	b.n	801015a <_printf_float+0xaa>
 8010228:	9a06      	ldr	r2, [sp, #24]
 801022a:	2a47      	cmp	r2, #71	; 0x47
 801022c:	d1be      	bne.n	80101ac <_printf_float+0xfc>
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1bc      	bne.n	80101ac <_printf_float+0xfc>
 8010232:	2301      	movs	r3, #1
 8010234:	e7b9      	b.n	80101aa <_printf_float+0xfa>
 8010236:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801023a:	d118      	bne.n	801026e <_printf_float+0x1be>
 801023c:	2900      	cmp	r1, #0
 801023e:	6863      	ldr	r3, [r4, #4]
 8010240:	dd0b      	ble.n	801025a <_printf_float+0x1aa>
 8010242:	6121      	str	r1, [r4, #16]
 8010244:	b913      	cbnz	r3, 801024c <_printf_float+0x19c>
 8010246:	6822      	ldr	r2, [r4, #0]
 8010248:	07d0      	lsls	r0, r2, #31
 801024a:	d502      	bpl.n	8010252 <_printf_float+0x1a2>
 801024c:	3301      	adds	r3, #1
 801024e:	440b      	add	r3, r1
 8010250:	6123      	str	r3, [r4, #16]
 8010252:	65a1      	str	r1, [r4, #88]	; 0x58
 8010254:	f04f 0900 	mov.w	r9, #0
 8010258:	e7de      	b.n	8010218 <_printf_float+0x168>
 801025a:	b913      	cbnz	r3, 8010262 <_printf_float+0x1b2>
 801025c:	6822      	ldr	r2, [r4, #0]
 801025e:	07d2      	lsls	r2, r2, #31
 8010260:	d501      	bpl.n	8010266 <_printf_float+0x1b6>
 8010262:	3302      	adds	r3, #2
 8010264:	e7f4      	b.n	8010250 <_printf_float+0x1a0>
 8010266:	2301      	movs	r3, #1
 8010268:	e7f2      	b.n	8010250 <_printf_float+0x1a0>
 801026a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801026e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010270:	4299      	cmp	r1, r3
 8010272:	db05      	blt.n	8010280 <_printf_float+0x1d0>
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	6121      	str	r1, [r4, #16]
 8010278:	07d8      	lsls	r0, r3, #31
 801027a:	d5ea      	bpl.n	8010252 <_printf_float+0x1a2>
 801027c:	1c4b      	adds	r3, r1, #1
 801027e:	e7e7      	b.n	8010250 <_printf_float+0x1a0>
 8010280:	2900      	cmp	r1, #0
 8010282:	bfd4      	ite	le
 8010284:	f1c1 0202 	rsble	r2, r1, #2
 8010288:	2201      	movgt	r2, #1
 801028a:	4413      	add	r3, r2
 801028c:	e7e0      	b.n	8010250 <_printf_float+0x1a0>
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	055a      	lsls	r2, r3, #21
 8010292:	d407      	bmi.n	80102a4 <_printf_float+0x1f4>
 8010294:	6923      	ldr	r3, [r4, #16]
 8010296:	4642      	mov	r2, r8
 8010298:	4631      	mov	r1, r6
 801029a:	4628      	mov	r0, r5
 801029c:	47b8      	blx	r7
 801029e:	3001      	adds	r0, #1
 80102a0:	d12c      	bne.n	80102fc <_printf_float+0x24c>
 80102a2:	e764      	b.n	801016e <_printf_float+0xbe>
 80102a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102a8:	f240 80e0 	bls.w	801046c <_printf_float+0x3bc>
 80102ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102b0:	2200      	movs	r2, #0
 80102b2:	2300      	movs	r3, #0
 80102b4:	f7f0 fc30 	bl	8000b18 <__aeabi_dcmpeq>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d034      	beq.n	8010326 <_printf_float+0x276>
 80102bc:	4a37      	ldr	r2, [pc, #220]	; (801039c <_printf_float+0x2ec>)
 80102be:	2301      	movs	r3, #1
 80102c0:	4631      	mov	r1, r6
 80102c2:	4628      	mov	r0, r5
 80102c4:	47b8      	blx	r7
 80102c6:	3001      	adds	r0, #1
 80102c8:	f43f af51 	beq.w	801016e <_printf_float+0xbe>
 80102cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102d0:	429a      	cmp	r2, r3
 80102d2:	db02      	blt.n	80102da <_printf_float+0x22a>
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	07d8      	lsls	r0, r3, #31
 80102d8:	d510      	bpl.n	80102fc <_printf_float+0x24c>
 80102da:	ee18 3a10 	vmov	r3, s16
 80102de:	4652      	mov	r2, sl
 80102e0:	4631      	mov	r1, r6
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b8      	blx	r7
 80102e6:	3001      	adds	r0, #1
 80102e8:	f43f af41 	beq.w	801016e <_printf_float+0xbe>
 80102ec:	f04f 0800 	mov.w	r8, #0
 80102f0:	f104 091a 	add.w	r9, r4, #26
 80102f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102f6:	3b01      	subs	r3, #1
 80102f8:	4543      	cmp	r3, r8
 80102fa:	dc09      	bgt.n	8010310 <_printf_float+0x260>
 80102fc:	6823      	ldr	r3, [r4, #0]
 80102fe:	079b      	lsls	r3, r3, #30
 8010300:	f100 8107 	bmi.w	8010512 <_printf_float+0x462>
 8010304:	68e0      	ldr	r0, [r4, #12]
 8010306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010308:	4298      	cmp	r0, r3
 801030a:	bfb8      	it	lt
 801030c:	4618      	movlt	r0, r3
 801030e:	e730      	b.n	8010172 <_printf_float+0xc2>
 8010310:	2301      	movs	r3, #1
 8010312:	464a      	mov	r2, r9
 8010314:	4631      	mov	r1, r6
 8010316:	4628      	mov	r0, r5
 8010318:	47b8      	blx	r7
 801031a:	3001      	adds	r0, #1
 801031c:	f43f af27 	beq.w	801016e <_printf_float+0xbe>
 8010320:	f108 0801 	add.w	r8, r8, #1
 8010324:	e7e6      	b.n	80102f4 <_printf_float+0x244>
 8010326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010328:	2b00      	cmp	r3, #0
 801032a:	dc39      	bgt.n	80103a0 <_printf_float+0x2f0>
 801032c:	4a1b      	ldr	r2, [pc, #108]	; (801039c <_printf_float+0x2ec>)
 801032e:	2301      	movs	r3, #1
 8010330:	4631      	mov	r1, r6
 8010332:	4628      	mov	r0, r5
 8010334:	47b8      	blx	r7
 8010336:	3001      	adds	r0, #1
 8010338:	f43f af19 	beq.w	801016e <_printf_float+0xbe>
 801033c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010340:	4313      	orrs	r3, r2
 8010342:	d102      	bne.n	801034a <_printf_float+0x29a>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	07d9      	lsls	r1, r3, #31
 8010348:	d5d8      	bpl.n	80102fc <_printf_float+0x24c>
 801034a:	ee18 3a10 	vmov	r3, s16
 801034e:	4652      	mov	r2, sl
 8010350:	4631      	mov	r1, r6
 8010352:	4628      	mov	r0, r5
 8010354:	47b8      	blx	r7
 8010356:	3001      	adds	r0, #1
 8010358:	f43f af09 	beq.w	801016e <_printf_float+0xbe>
 801035c:	f04f 0900 	mov.w	r9, #0
 8010360:	f104 0a1a 	add.w	sl, r4, #26
 8010364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010366:	425b      	negs	r3, r3
 8010368:	454b      	cmp	r3, r9
 801036a:	dc01      	bgt.n	8010370 <_printf_float+0x2c0>
 801036c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801036e:	e792      	b.n	8010296 <_printf_float+0x1e6>
 8010370:	2301      	movs	r3, #1
 8010372:	4652      	mov	r2, sl
 8010374:	4631      	mov	r1, r6
 8010376:	4628      	mov	r0, r5
 8010378:	47b8      	blx	r7
 801037a:	3001      	adds	r0, #1
 801037c:	f43f aef7 	beq.w	801016e <_printf_float+0xbe>
 8010380:	f109 0901 	add.w	r9, r9, #1
 8010384:	e7ee      	b.n	8010364 <_printf_float+0x2b4>
 8010386:	bf00      	nop
 8010388:	7fefffff 	.word	0x7fefffff
 801038c:	08015754 	.word	0x08015754
 8010390:	08015758 	.word	0x08015758
 8010394:	0801575c 	.word	0x0801575c
 8010398:	08015760 	.word	0x08015760
 801039c:	08015764 	.word	0x08015764
 80103a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103a4:	429a      	cmp	r2, r3
 80103a6:	bfa8      	it	ge
 80103a8:	461a      	movge	r2, r3
 80103aa:	2a00      	cmp	r2, #0
 80103ac:	4691      	mov	r9, r2
 80103ae:	dc37      	bgt.n	8010420 <_printf_float+0x370>
 80103b0:	f04f 0b00 	mov.w	fp, #0
 80103b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103b8:	f104 021a 	add.w	r2, r4, #26
 80103bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103be:	9305      	str	r3, [sp, #20]
 80103c0:	eba3 0309 	sub.w	r3, r3, r9
 80103c4:	455b      	cmp	r3, fp
 80103c6:	dc33      	bgt.n	8010430 <_printf_float+0x380>
 80103c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103cc:	429a      	cmp	r2, r3
 80103ce:	db3b      	blt.n	8010448 <_printf_float+0x398>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	07da      	lsls	r2, r3, #31
 80103d4:	d438      	bmi.n	8010448 <_printf_float+0x398>
 80103d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80103da:	eba2 0903 	sub.w	r9, r2, r3
 80103de:	9b05      	ldr	r3, [sp, #20]
 80103e0:	1ad2      	subs	r2, r2, r3
 80103e2:	4591      	cmp	r9, r2
 80103e4:	bfa8      	it	ge
 80103e6:	4691      	movge	r9, r2
 80103e8:	f1b9 0f00 	cmp.w	r9, #0
 80103ec:	dc35      	bgt.n	801045a <_printf_float+0x3aa>
 80103ee:	f04f 0800 	mov.w	r8, #0
 80103f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103f6:	f104 0a1a 	add.w	sl, r4, #26
 80103fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103fe:	1a9b      	subs	r3, r3, r2
 8010400:	eba3 0309 	sub.w	r3, r3, r9
 8010404:	4543      	cmp	r3, r8
 8010406:	f77f af79 	ble.w	80102fc <_printf_float+0x24c>
 801040a:	2301      	movs	r3, #1
 801040c:	4652      	mov	r2, sl
 801040e:	4631      	mov	r1, r6
 8010410:	4628      	mov	r0, r5
 8010412:	47b8      	blx	r7
 8010414:	3001      	adds	r0, #1
 8010416:	f43f aeaa 	beq.w	801016e <_printf_float+0xbe>
 801041a:	f108 0801 	add.w	r8, r8, #1
 801041e:	e7ec      	b.n	80103fa <_printf_float+0x34a>
 8010420:	4613      	mov	r3, r2
 8010422:	4631      	mov	r1, r6
 8010424:	4642      	mov	r2, r8
 8010426:	4628      	mov	r0, r5
 8010428:	47b8      	blx	r7
 801042a:	3001      	adds	r0, #1
 801042c:	d1c0      	bne.n	80103b0 <_printf_float+0x300>
 801042e:	e69e      	b.n	801016e <_printf_float+0xbe>
 8010430:	2301      	movs	r3, #1
 8010432:	4631      	mov	r1, r6
 8010434:	4628      	mov	r0, r5
 8010436:	9205      	str	r2, [sp, #20]
 8010438:	47b8      	blx	r7
 801043a:	3001      	adds	r0, #1
 801043c:	f43f ae97 	beq.w	801016e <_printf_float+0xbe>
 8010440:	9a05      	ldr	r2, [sp, #20]
 8010442:	f10b 0b01 	add.w	fp, fp, #1
 8010446:	e7b9      	b.n	80103bc <_printf_float+0x30c>
 8010448:	ee18 3a10 	vmov	r3, s16
 801044c:	4652      	mov	r2, sl
 801044e:	4631      	mov	r1, r6
 8010450:	4628      	mov	r0, r5
 8010452:	47b8      	blx	r7
 8010454:	3001      	adds	r0, #1
 8010456:	d1be      	bne.n	80103d6 <_printf_float+0x326>
 8010458:	e689      	b.n	801016e <_printf_float+0xbe>
 801045a:	9a05      	ldr	r2, [sp, #20]
 801045c:	464b      	mov	r3, r9
 801045e:	4442      	add	r2, r8
 8010460:	4631      	mov	r1, r6
 8010462:	4628      	mov	r0, r5
 8010464:	47b8      	blx	r7
 8010466:	3001      	adds	r0, #1
 8010468:	d1c1      	bne.n	80103ee <_printf_float+0x33e>
 801046a:	e680      	b.n	801016e <_printf_float+0xbe>
 801046c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801046e:	2a01      	cmp	r2, #1
 8010470:	dc01      	bgt.n	8010476 <_printf_float+0x3c6>
 8010472:	07db      	lsls	r3, r3, #31
 8010474:	d53a      	bpl.n	80104ec <_printf_float+0x43c>
 8010476:	2301      	movs	r3, #1
 8010478:	4642      	mov	r2, r8
 801047a:	4631      	mov	r1, r6
 801047c:	4628      	mov	r0, r5
 801047e:	47b8      	blx	r7
 8010480:	3001      	adds	r0, #1
 8010482:	f43f ae74 	beq.w	801016e <_printf_float+0xbe>
 8010486:	ee18 3a10 	vmov	r3, s16
 801048a:	4652      	mov	r2, sl
 801048c:	4631      	mov	r1, r6
 801048e:	4628      	mov	r0, r5
 8010490:	47b8      	blx	r7
 8010492:	3001      	adds	r0, #1
 8010494:	f43f ae6b 	beq.w	801016e <_printf_float+0xbe>
 8010498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801049c:	2200      	movs	r2, #0
 801049e:	2300      	movs	r3, #0
 80104a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80104a4:	f7f0 fb38 	bl	8000b18 <__aeabi_dcmpeq>
 80104a8:	b9d8      	cbnz	r0, 80104e2 <_printf_float+0x432>
 80104aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80104ae:	f108 0201 	add.w	r2, r8, #1
 80104b2:	4631      	mov	r1, r6
 80104b4:	4628      	mov	r0, r5
 80104b6:	47b8      	blx	r7
 80104b8:	3001      	adds	r0, #1
 80104ba:	d10e      	bne.n	80104da <_printf_float+0x42a>
 80104bc:	e657      	b.n	801016e <_printf_float+0xbe>
 80104be:	2301      	movs	r3, #1
 80104c0:	4652      	mov	r2, sl
 80104c2:	4631      	mov	r1, r6
 80104c4:	4628      	mov	r0, r5
 80104c6:	47b8      	blx	r7
 80104c8:	3001      	adds	r0, #1
 80104ca:	f43f ae50 	beq.w	801016e <_printf_float+0xbe>
 80104ce:	f108 0801 	add.w	r8, r8, #1
 80104d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104d4:	3b01      	subs	r3, #1
 80104d6:	4543      	cmp	r3, r8
 80104d8:	dcf1      	bgt.n	80104be <_printf_float+0x40e>
 80104da:	464b      	mov	r3, r9
 80104dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80104e0:	e6da      	b.n	8010298 <_printf_float+0x1e8>
 80104e2:	f04f 0800 	mov.w	r8, #0
 80104e6:	f104 0a1a 	add.w	sl, r4, #26
 80104ea:	e7f2      	b.n	80104d2 <_printf_float+0x422>
 80104ec:	2301      	movs	r3, #1
 80104ee:	4642      	mov	r2, r8
 80104f0:	e7df      	b.n	80104b2 <_printf_float+0x402>
 80104f2:	2301      	movs	r3, #1
 80104f4:	464a      	mov	r2, r9
 80104f6:	4631      	mov	r1, r6
 80104f8:	4628      	mov	r0, r5
 80104fa:	47b8      	blx	r7
 80104fc:	3001      	adds	r0, #1
 80104fe:	f43f ae36 	beq.w	801016e <_printf_float+0xbe>
 8010502:	f108 0801 	add.w	r8, r8, #1
 8010506:	68e3      	ldr	r3, [r4, #12]
 8010508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801050a:	1a5b      	subs	r3, r3, r1
 801050c:	4543      	cmp	r3, r8
 801050e:	dcf0      	bgt.n	80104f2 <_printf_float+0x442>
 8010510:	e6f8      	b.n	8010304 <_printf_float+0x254>
 8010512:	f04f 0800 	mov.w	r8, #0
 8010516:	f104 0919 	add.w	r9, r4, #25
 801051a:	e7f4      	b.n	8010506 <_printf_float+0x456>

0801051c <_printf_common>:
 801051c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010520:	4616      	mov	r6, r2
 8010522:	4699      	mov	r9, r3
 8010524:	688a      	ldr	r2, [r1, #8]
 8010526:	690b      	ldr	r3, [r1, #16]
 8010528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801052c:	4293      	cmp	r3, r2
 801052e:	bfb8      	it	lt
 8010530:	4613      	movlt	r3, r2
 8010532:	6033      	str	r3, [r6, #0]
 8010534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010538:	4607      	mov	r7, r0
 801053a:	460c      	mov	r4, r1
 801053c:	b10a      	cbz	r2, 8010542 <_printf_common+0x26>
 801053e:	3301      	adds	r3, #1
 8010540:	6033      	str	r3, [r6, #0]
 8010542:	6823      	ldr	r3, [r4, #0]
 8010544:	0699      	lsls	r1, r3, #26
 8010546:	bf42      	ittt	mi
 8010548:	6833      	ldrmi	r3, [r6, #0]
 801054a:	3302      	addmi	r3, #2
 801054c:	6033      	strmi	r3, [r6, #0]
 801054e:	6825      	ldr	r5, [r4, #0]
 8010550:	f015 0506 	ands.w	r5, r5, #6
 8010554:	d106      	bne.n	8010564 <_printf_common+0x48>
 8010556:	f104 0a19 	add.w	sl, r4, #25
 801055a:	68e3      	ldr	r3, [r4, #12]
 801055c:	6832      	ldr	r2, [r6, #0]
 801055e:	1a9b      	subs	r3, r3, r2
 8010560:	42ab      	cmp	r3, r5
 8010562:	dc26      	bgt.n	80105b2 <_printf_common+0x96>
 8010564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010568:	1e13      	subs	r3, r2, #0
 801056a:	6822      	ldr	r2, [r4, #0]
 801056c:	bf18      	it	ne
 801056e:	2301      	movne	r3, #1
 8010570:	0692      	lsls	r2, r2, #26
 8010572:	d42b      	bmi.n	80105cc <_printf_common+0xb0>
 8010574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010578:	4649      	mov	r1, r9
 801057a:	4638      	mov	r0, r7
 801057c:	47c0      	blx	r8
 801057e:	3001      	adds	r0, #1
 8010580:	d01e      	beq.n	80105c0 <_printf_common+0xa4>
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	6922      	ldr	r2, [r4, #16]
 8010586:	f003 0306 	and.w	r3, r3, #6
 801058a:	2b04      	cmp	r3, #4
 801058c:	bf02      	ittt	eq
 801058e:	68e5      	ldreq	r5, [r4, #12]
 8010590:	6833      	ldreq	r3, [r6, #0]
 8010592:	1aed      	subeq	r5, r5, r3
 8010594:	68a3      	ldr	r3, [r4, #8]
 8010596:	bf0c      	ite	eq
 8010598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801059c:	2500      	movne	r5, #0
 801059e:	4293      	cmp	r3, r2
 80105a0:	bfc4      	itt	gt
 80105a2:	1a9b      	subgt	r3, r3, r2
 80105a4:	18ed      	addgt	r5, r5, r3
 80105a6:	2600      	movs	r6, #0
 80105a8:	341a      	adds	r4, #26
 80105aa:	42b5      	cmp	r5, r6
 80105ac:	d11a      	bne.n	80105e4 <_printf_common+0xc8>
 80105ae:	2000      	movs	r0, #0
 80105b0:	e008      	b.n	80105c4 <_printf_common+0xa8>
 80105b2:	2301      	movs	r3, #1
 80105b4:	4652      	mov	r2, sl
 80105b6:	4649      	mov	r1, r9
 80105b8:	4638      	mov	r0, r7
 80105ba:	47c0      	blx	r8
 80105bc:	3001      	adds	r0, #1
 80105be:	d103      	bne.n	80105c8 <_printf_common+0xac>
 80105c0:	f04f 30ff 	mov.w	r0, #4294967295
 80105c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105c8:	3501      	adds	r5, #1
 80105ca:	e7c6      	b.n	801055a <_printf_common+0x3e>
 80105cc:	18e1      	adds	r1, r4, r3
 80105ce:	1c5a      	adds	r2, r3, #1
 80105d0:	2030      	movs	r0, #48	; 0x30
 80105d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105d6:	4422      	add	r2, r4
 80105d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80105e0:	3302      	adds	r3, #2
 80105e2:	e7c7      	b.n	8010574 <_printf_common+0x58>
 80105e4:	2301      	movs	r3, #1
 80105e6:	4622      	mov	r2, r4
 80105e8:	4649      	mov	r1, r9
 80105ea:	4638      	mov	r0, r7
 80105ec:	47c0      	blx	r8
 80105ee:	3001      	adds	r0, #1
 80105f0:	d0e6      	beq.n	80105c0 <_printf_common+0xa4>
 80105f2:	3601      	adds	r6, #1
 80105f4:	e7d9      	b.n	80105aa <_printf_common+0x8e>
	...

080105f8 <_printf_i>:
 80105f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105fc:	7e0f      	ldrb	r7, [r1, #24]
 80105fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010600:	2f78      	cmp	r7, #120	; 0x78
 8010602:	4691      	mov	r9, r2
 8010604:	4680      	mov	r8, r0
 8010606:	460c      	mov	r4, r1
 8010608:	469a      	mov	sl, r3
 801060a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801060e:	d807      	bhi.n	8010620 <_printf_i+0x28>
 8010610:	2f62      	cmp	r7, #98	; 0x62
 8010612:	d80a      	bhi.n	801062a <_printf_i+0x32>
 8010614:	2f00      	cmp	r7, #0
 8010616:	f000 80d4 	beq.w	80107c2 <_printf_i+0x1ca>
 801061a:	2f58      	cmp	r7, #88	; 0x58
 801061c:	f000 80c0 	beq.w	80107a0 <_printf_i+0x1a8>
 8010620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010628:	e03a      	b.n	80106a0 <_printf_i+0xa8>
 801062a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801062e:	2b15      	cmp	r3, #21
 8010630:	d8f6      	bhi.n	8010620 <_printf_i+0x28>
 8010632:	a101      	add	r1, pc, #4	; (adr r1, 8010638 <_printf_i+0x40>)
 8010634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010638:	08010691 	.word	0x08010691
 801063c:	080106a5 	.word	0x080106a5
 8010640:	08010621 	.word	0x08010621
 8010644:	08010621 	.word	0x08010621
 8010648:	08010621 	.word	0x08010621
 801064c:	08010621 	.word	0x08010621
 8010650:	080106a5 	.word	0x080106a5
 8010654:	08010621 	.word	0x08010621
 8010658:	08010621 	.word	0x08010621
 801065c:	08010621 	.word	0x08010621
 8010660:	08010621 	.word	0x08010621
 8010664:	080107a9 	.word	0x080107a9
 8010668:	080106d1 	.word	0x080106d1
 801066c:	08010763 	.word	0x08010763
 8010670:	08010621 	.word	0x08010621
 8010674:	08010621 	.word	0x08010621
 8010678:	080107cb 	.word	0x080107cb
 801067c:	08010621 	.word	0x08010621
 8010680:	080106d1 	.word	0x080106d1
 8010684:	08010621 	.word	0x08010621
 8010688:	08010621 	.word	0x08010621
 801068c:	0801076b 	.word	0x0801076b
 8010690:	682b      	ldr	r3, [r5, #0]
 8010692:	1d1a      	adds	r2, r3, #4
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	602a      	str	r2, [r5, #0]
 8010698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801069c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106a0:	2301      	movs	r3, #1
 80106a2:	e09f      	b.n	80107e4 <_printf_i+0x1ec>
 80106a4:	6820      	ldr	r0, [r4, #0]
 80106a6:	682b      	ldr	r3, [r5, #0]
 80106a8:	0607      	lsls	r7, r0, #24
 80106aa:	f103 0104 	add.w	r1, r3, #4
 80106ae:	6029      	str	r1, [r5, #0]
 80106b0:	d501      	bpl.n	80106b6 <_printf_i+0xbe>
 80106b2:	681e      	ldr	r6, [r3, #0]
 80106b4:	e003      	b.n	80106be <_printf_i+0xc6>
 80106b6:	0646      	lsls	r6, r0, #25
 80106b8:	d5fb      	bpl.n	80106b2 <_printf_i+0xba>
 80106ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80106be:	2e00      	cmp	r6, #0
 80106c0:	da03      	bge.n	80106ca <_printf_i+0xd2>
 80106c2:	232d      	movs	r3, #45	; 0x2d
 80106c4:	4276      	negs	r6, r6
 80106c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106ca:	485a      	ldr	r0, [pc, #360]	; (8010834 <_printf_i+0x23c>)
 80106cc:	230a      	movs	r3, #10
 80106ce:	e012      	b.n	80106f6 <_printf_i+0xfe>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	6820      	ldr	r0, [r4, #0]
 80106d4:	1d19      	adds	r1, r3, #4
 80106d6:	6029      	str	r1, [r5, #0]
 80106d8:	0605      	lsls	r5, r0, #24
 80106da:	d501      	bpl.n	80106e0 <_printf_i+0xe8>
 80106dc:	681e      	ldr	r6, [r3, #0]
 80106de:	e002      	b.n	80106e6 <_printf_i+0xee>
 80106e0:	0641      	lsls	r1, r0, #25
 80106e2:	d5fb      	bpl.n	80106dc <_printf_i+0xe4>
 80106e4:	881e      	ldrh	r6, [r3, #0]
 80106e6:	4853      	ldr	r0, [pc, #332]	; (8010834 <_printf_i+0x23c>)
 80106e8:	2f6f      	cmp	r7, #111	; 0x6f
 80106ea:	bf0c      	ite	eq
 80106ec:	2308      	moveq	r3, #8
 80106ee:	230a      	movne	r3, #10
 80106f0:	2100      	movs	r1, #0
 80106f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80106f6:	6865      	ldr	r5, [r4, #4]
 80106f8:	60a5      	str	r5, [r4, #8]
 80106fa:	2d00      	cmp	r5, #0
 80106fc:	bfa2      	ittt	ge
 80106fe:	6821      	ldrge	r1, [r4, #0]
 8010700:	f021 0104 	bicge.w	r1, r1, #4
 8010704:	6021      	strge	r1, [r4, #0]
 8010706:	b90e      	cbnz	r6, 801070c <_printf_i+0x114>
 8010708:	2d00      	cmp	r5, #0
 801070a:	d04b      	beq.n	80107a4 <_printf_i+0x1ac>
 801070c:	4615      	mov	r5, r2
 801070e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010712:	fb03 6711 	mls	r7, r3, r1, r6
 8010716:	5dc7      	ldrb	r7, [r0, r7]
 8010718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801071c:	4637      	mov	r7, r6
 801071e:	42bb      	cmp	r3, r7
 8010720:	460e      	mov	r6, r1
 8010722:	d9f4      	bls.n	801070e <_printf_i+0x116>
 8010724:	2b08      	cmp	r3, #8
 8010726:	d10b      	bne.n	8010740 <_printf_i+0x148>
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	07de      	lsls	r6, r3, #31
 801072c:	d508      	bpl.n	8010740 <_printf_i+0x148>
 801072e:	6923      	ldr	r3, [r4, #16]
 8010730:	6861      	ldr	r1, [r4, #4]
 8010732:	4299      	cmp	r1, r3
 8010734:	bfde      	ittt	le
 8010736:	2330      	movle	r3, #48	; 0x30
 8010738:	f805 3c01 	strble.w	r3, [r5, #-1]
 801073c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010740:	1b52      	subs	r2, r2, r5
 8010742:	6122      	str	r2, [r4, #16]
 8010744:	f8cd a000 	str.w	sl, [sp]
 8010748:	464b      	mov	r3, r9
 801074a:	aa03      	add	r2, sp, #12
 801074c:	4621      	mov	r1, r4
 801074e:	4640      	mov	r0, r8
 8010750:	f7ff fee4 	bl	801051c <_printf_common>
 8010754:	3001      	adds	r0, #1
 8010756:	d14a      	bne.n	80107ee <_printf_i+0x1f6>
 8010758:	f04f 30ff 	mov.w	r0, #4294967295
 801075c:	b004      	add	sp, #16
 801075e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010762:	6823      	ldr	r3, [r4, #0]
 8010764:	f043 0320 	orr.w	r3, r3, #32
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	4833      	ldr	r0, [pc, #204]	; (8010838 <_printf_i+0x240>)
 801076c:	2778      	movs	r7, #120	; 0x78
 801076e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	6829      	ldr	r1, [r5, #0]
 8010776:	061f      	lsls	r7, r3, #24
 8010778:	f851 6b04 	ldr.w	r6, [r1], #4
 801077c:	d402      	bmi.n	8010784 <_printf_i+0x18c>
 801077e:	065f      	lsls	r7, r3, #25
 8010780:	bf48      	it	mi
 8010782:	b2b6      	uxthmi	r6, r6
 8010784:	07df      	lsls	r7, r3, #31
 8010786:	bf48      	it	mi
 8010788:	f043 0320 	orrmi.w	r3, r3, #32
 801078c:	6029      	str	r1, [r5, #0]
 801078e:	bf48      	it	mi
 8010790:	6023      	strmi	r3, [r4, #0]
 8010792:	b91e      	cbnz	r6, 801079c <_printf_i+0x1a4>
 8010794:	6823      	ldr	r3, [r4, #0]
 8010796:	f023 0320 	bic.w	r3, r3, #32
 801079a:	6023      	str	r3, [r4, #0]
 801079c:	2310      	movs	r3, #16
 801079e:	e7a7      	b.n	80106f0 <_printf_i+0xf8>
 80107a0:	4824      	ldr	r0, [pc, #144]	; (8010834 <_printf_i+0x23c>)
 80107a2:	e7e4      	b.n	801076e <_printf_i+0x176>
 80107a4:	4615      	mov	r5, r2
 80107a6:	e7bd      	b.n	8010724 <_printf_i+0x12c>
 80107a8:	682b      	ldr	r3, [r5, #0]
 80107aa:	6826      	ldr	r6, [r4, #0]
 80107ac:	6961      	ldr	r1, [r4, #20]
 80107ae:	1d18      	adds	r0, r3, #4
 80107b0:	6028      	str	r0, [r5, #0]
 80107b2:	0635      	lsls	r5, r6, #24
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	d501      	bpl.n	80107bc <_printf_i+0x1c4>
 80107b8:	6019      	str	r1, [r3, #0]
 80107ba:	e002      	b.n	80107c2 <_printf_i+0x1ca>
 80107bc:	0670      	lsls	r0, r6, #25
 80107be:	d5fb      	bpl.n	80107b8 <_printf_i+0x1c0>
 80107c0:	8019      	strh	r1, [r3, #0]
 80107c2:	2300      	movs	r3, #0
 80107c4:	6123      	str	r3, [r4, #16]
 80107c6:	4615      	mov	r5, r2
 80107c8:	e7bc      	b.n	8010744 <_printf_i+0x14c>
 80107ca:	682b      	ldr	r3, [r5, #0]
 80107cc:	1d1a      	adds	r2, r3, #4
 80107ce:	602a      	str	r2, [r5, #0]
 80107d0:	681d      	ldr	r5, [r3, #0]
 80107d2:	6862      	ldr	r2, [r4, #4]
 80107d4:	2100      	movs	r1, #0
 80107d6:	4628      	mov	r0, r5
 80107d8:	f7ef fd22 	bl	8000220 <memchr>
 80107dc:	b108      	cbz	r0, 80107e2 <_printf_i+0x1ea>
 80107de:	1b40      	subs	r0, r0, r5
 80107e0:	6060      	str	r0, [r4, #4]
 80107e2:	6863      	ldr	r3, [r4, #4]
 80107e4:	6123      	str	r3, [r4, #16]
 80107e6:	2300      	movs	r3, #0
 80107e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107ec:	e7aa      	b.n	8010744 <_printf_i+0x14c>
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	462a      	mov	r2, r5
 80107f2:	4649      	mov	r1, r9
 80107f4:	4640      	mov	r0, r8
 80107f6:	47d0      	blx	sl
 80107f8:	3001      	adds	r0, #1
 80107fa:	d0ad      	beq.n	8010758 <_printf_i+0x160>
 80107fc:	6823      	ldr	r3, [r4, #0]
 80107fe:	079b      	lsls	r3, r3, #30
 8010800:	d413      	bmi.n	801082a <_printf_i+0x232>
 8010802:	68e0      	ldr	r0, [r4, #12]
 8010804:	9b03      	ldr	r3, [sp, #12]
 8010806:	4298      	cmp	r0, r3
 8010808:	bfb8      	it	lt
 801080a:	4618      	movlt	r0, r3
 801080c:	e7a6      	b.n	801075c <_printf_i+0x164>
 801080e:	2301      	movs	r3, #1
 8010810:	4632      	mov	r2, r6
 8010812:	4649      	mov	r1, r9
 8010814:	4640      	mov	r0, r8
 8010816:	47d0      	blx	sl
 8010818:	3001      	adds	r0, #1
 801081a:	d09d      	beq.n	8010758 <_printf_i+0x160>
 801081c:	3501      	adds	r5, #1
 801081e:	68e3      	ldr	r3, [r4, #12]
 8010820:	9903      	ldr	r1, [sp, #12]
 8010822:	1a5b      	subs	r3, r3, r1
 8010824:	42ab      	cmp	r3, r5
 8010826:	dcf2      	bgt.n	801080e <_printf_i+0x216>
 8010828:	e7eb      	b.n	8010802 <_printf_i+0x20a>
 801082a:	2500      	movs	r5, #0
 801082c:	f104 0619 	add.w	r6, r4, #25
 8010830:	e7f5      	b.n	801081e <_printf_i+0x226>
 8010832:	bf00      	nop
 8010834:	08015766 	.word	0x08015766
 8010838:	08015777 	.word	0x08015777

0801083c <_scanf_float>:
 801083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010840:	b087      	sub	sp, #28
 8010842:	4617      	mov	r7, r2
 8010844:	9303      	str	r3, [sp, #12]
 8010846:	688b      	ldr	r3, [r1, #8]
 8010848:	1e5a      	subs	r2, r3, #1
 801084a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801084e:	bf83      	ittte	hi
 8010850:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010854:	195b      	addhi	r3, r3, r5
 8010856:	9302      	strhi	r3, [sp, #8]
 8010858:	2300      	movls	r3, #0
 801085a:	bf86      	itte	hi
 801085c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010860:	608b      	strhi	r3, [r1, #8]
 8010862:	9302      	strls	r3, [sp, #8]
 8010864:	680b      	ldr	r3, [r1, #0]
 8010866:	468b      	mov	fp, r1
 8010868:	2500      	movs	r5, #0
 801086a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801086e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010872:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010876:	4680      	mov	r8, r0
 8010878:	460c      	mov	r4, r1
 801087a:	465e      	mov	r6, fp
 801087c:	46aa      	mov	sl, r5
 801087e:	46a9      	mov	r9, r5
 8010880:	9501      	str	r5, [sp, #4]
 8010882:	68a2      	ldr	r2, [r4, #8]
 8010884:	b152      	cbz	r2, 801089c <_scanf_float+0x60>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	2b4e      	cmp	r3, #78	; 0x4e
 801088c:	d864      	bhi.n	8010958 <_scanf_float+0x11c>
 801088e:	2b40      	cmp	r3, #64	; 0x40
 8010890:	d83c      	bhi.n	801090c <_scanf_float+0xd0>
 8010892:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010896:	b2c8      	uxtb	r0, r1
 8010898:	280e      	cmp	r0, #14
 801089a:	d93a      	bls.n	8010912 <_scanf_float+0xd6>
 801089c:	f1b9 0f00 	cmp.w	r9, #0
 80108a0:	d003      	beq.n	80108aa <_scanf_float+0x6e>
 80108a2:	6823      	ldr	r3, [r4, #0]
 80108a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108ae:	f1ba 0f01 	cmp.w	sl, #1
 80108b2:	f200 8113 	bhi.w	8010adc <_scanf_float+0x2a0>
 80108b6:	455e      	cmp	r6, fp
 80108b8:	f200 8105 	bhi.w	8010ac6 <_scanf_float+0x28a>
 80108bc:	2501      	movs	r5, #1
 80108be:	4628      	mov	r0, r5
 80108c0:	b007      	add	sp, #28
 80108c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80108ca:	2a0d      	cmp	r2, #13
 80108cc:	d8e6      	bhi.n	801089c <_scanf_float+0x60>
 80108ce:	a101      	add	r1, pc, #4	; (adr r1, 80108d4 <_scanf_float+0x98>)
 80108d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80108d4:	08010a13 	.word	0x08010a13
 80108d8:	0801089d 	.word	0x0801089d
 80108dc:	0801089d 	.word	0x0801089d
 80108e0:	0801089d 	.word	0x0801089d
 80108e4:	08010a73 	.word	0x08010a73
 80108e8:	08010a4b 	.word	0x08010a4b
 80108ec:	0801089d 	.word	0x0801089d
 80108f0:	0801089d 	.word	0x0801089d
 80108f4:	08010a21 	.word	0x08010a21
 80108f8:	0801089d 	.word	0x0801089d
 80108fc:	0801089d 	.word	0x0801089d
 8010900:	0801089d 	.word	0x0801089d
 8010904:	0801089d 	.word	0x0801089d
 8010908:	080109d9 	.word	0x080109d9
 801090c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010910:	e7db      	b.n	80108ca <_scanf_float+0x8e>
 8010912:	290e      	cmp	r1, #14
 8010914:	d8c2      	bhi.n	801089c <_scanf_float+0x60>
 8010916:	a001      	add	r0, pc, #4	; (adr r0, 801091c <_scanf_float+0xe0>)
 8010918:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801091c:	080109cb 	.word	0x080109cb
 8010920:	0801089d 	.word	0x0801089d
 8010924:	080109cb 	.word	0x080109cb
 8010928:	08010a5f 	.word	0x08010a5f
 801092c:	0801089d 	.word	0x0801089d
 8010930:	08010979 	.word	0x08010979
 8010934:	080109b5 	.word	0x080109b5
 8010938:	080109b5 	.word	0x080109b5
 801093c:	080109b5 	.word	0x080109b5
 8010940:	080109b5 	.word	0x080109b5
 8010944:	080109b5 	.word	0x080109b5
 8010948:	080109b5 	.word	0x080109b5
 801094c:	080109b5 	.word	0x080109b5
 8010950:	080109b5 	.word	0x080109b5
 8010954:	080109b5 	.word	0x080109b5
 8010958:	2b6e      	cmp	r3, #110	; 0x6e
 801095a:	d809      	bhi.n	8010970 <_scanf_float+0x134>
 801095c:	2b60      	cmp	r3, #96	; 0x60
 801095e:	d8b2      	bhi.n	80108c6 <_scanf_float+0x8a>
 8010960:	2b54      	cmp	r3, #84	; 0x54
 8010962:	d077      	beq.n	8010a54 <_scanf_float+0x218>
 8010964:	2b59      	cmp	r3, #89	; 0x59
 8010966:	d199      	bne.n	801089c <_scanf_float+0x60>
 8010968:	2d07      	cmp	r5, #7
 801096a:	d197      	bne.n	801089c <_scanf_float+0x60>
 801096c:	2508      	movs	r5, #8
 801096e:	e029      	b.n	80109c4 <_scanf_float+0x188>
 8010970:	2b74      	cmp	r3, #116	; 0x74
 8010972:	d06f      	beq.n	8010a54 <_scanf_float+0x218>
 8010974:	2b79      	cmp	r3, #121	; 0x79
 8010976:	e7f6      	b.n	8010966 <_scanf_float+0x12a>
 8010978:	6821      	ldr	r1, [r4, #0]
 801097a:	05c8      	lsls	r0, r1, #23
 801097c:	d51a      	bpl.n	80109b4 <_scanf_float+0x178>
 801097e:	9b02      	ldr	r3, [sp, #8]
 8010980:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010984:	6021      	str	r1, [r4, #0]
 8010986:	f109 0901 	add.w	r9, r9, #1
 801098a:	b11b      	cbz	r3, 8010994 <_scanf_float+0x158>
 801098c:	3b01      	subs	r3, #1
 801098e:	3201      	adds	r2, #1
 8010990:	9302      	str	r3, [sp, #8]
 8010992:	60a2      	str	r2, [r4, #8]
 8010994:	68a3      	ldr	r3, [r4, #8]
 8010996:	3b01      	subs	r3, #1
 8010998:	60a3      	str	r3, [r4, #8]
 801099a:	6923      	ldr	r3, [r4, #16]
 801099c:	3301      	adds	r3, #1
 801099e:	6123      	str	r3, [r4, #16]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	3b01      	subs	r3, #1
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	607b      	str	r3, [r7, #4]
 80109a8:	f340 8084 	ble.w	8010ab4 <_scanf_float+0x278>
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	3301      	adds	r3, #1
 80109b0:	603b      	str	r3, [r7, #0]
 80109b2:	e766      	b.n	8010882 <_scanf_float+0x46>
 80109b4:	eb1a 0f05 	cmn.w	sl, r5
 80109b8:	f47f af70 	bne.w	801089c <_scanf_float+0x60>
 80109bc:	6822      	ldr	r2, [r4, #0]
 80109be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80109c2:	6022      	str	r2, [r4, #0]
 80109c4:	f806 3b01 	strb.w	r3, [r6], #1
 80109c8:	e7e4      	b.n	8010994 <_scanf_float+0x158>
 80109ca:	6822      	ldr	r2, [r4, #0]
 80109cc:	0610      	lsls	r0, r2, #24
 80109ce:	f57f af65 	bpl.w	801089c <_scanf_float+0x60>
 80109d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109d6:	e7f4      	b.n	80109c2 <_scanf_float+0x186>
 80109d8:	f1ba 0f00 	cmp.w	sl, #0
 80109dc:	d10e      	bne.n	80109fc <_scanf_float+0x1c0>
 80109de:	f1b9 0f00 	cmp.w	r9, #0
 80109e2:	d10e      	bne.n	8010a02 <_scanf_float+0x1c6>
 80109e4:	6822      	ldr	r2, [r4, #0]
 80109e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80109ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80109ee:	d108      	bne.n	8010a02 <_scanf_float+0x1c6>
 80109f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80109f4:	6022      	str	r2, [r4, #0]
 80109f6:	f04f 0a01 	mov.w	sl, #1
 80109fa:	e7e3      	b.n	80109c4 <_scanf_float+0x188>
 80109fc:	f1ba 0f02 	cmp.w	sl, #2
 8010a00:	d055      	beq.n	8010aae <_scanf_float+0x272>
 8010a02:	2d01      	cmp	r5, #1
 8010a04:	d002      	beq.n	8010a0c <_scanf_float+0x1d0>
 8010a06:	2d04      	cmp	r5, #4
 8010a08:	f47f af48 	bne.w	801089c <_scanf_float+0x60>
 8010a0c:	3501      	adds	r5, #1
 8010a0e:	b2ed      	uxtb	r5, r5
 8010a10:	e7d8      	b.n	80109c4 <_scanf_float+0x188>
 8010a12:	f1ba 0f01 	cmp.w	sl, #1
 8010a16:	f47f af41 	bne.w	801089c <_scanf_float+0x60>
 8010a1a:	f04f 0a02 	mov.w	sl, #2
 8010a1e:	e7d1      	b.n	80109c4 <_scanf_float+0x188>
 8010a20:	b97d      	cbnz	r5, 8010a42 <_scanf_float+0x206>
 8010a22:	f1b9 0f00 	cmp.w	r9, #0
 8010a26:	f47f af3c 	bne.w	80108a2 <_scanf_float+0x66>
 8010a2a:	6822      	ldr	r2, [r4, #0]
 8010a2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a34:	f47f af39 	bne.w	80108aa <_scanf_float+0x6e>
 8010a38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a3c:	6022      	str	r2, [r4, #0]
 8010a3e:	2501      	movs	r5, #1
 8010a40:	e7c0      	b.n	80109c4 <_scanf_float+0x188>
 8010a42:	2d03      	cmp	r5, #3
 8010a44:	d0e2      	beq.n	8010a0c <_scanf_float+0x1d0>
 8010a46:	2d05      	cmp	r5, #5
 8010a48:	e7de      	b.n	8010a08 <_scanf_float+0x1cc>
 8010a4a:	2d02      	cmp	r5, #2
 8010a4c:	f47f af26 	bne.w	801089c <_scanf_float+0x60>
 8010a50:	2503      	movs	r5, #3
 8010a52:	e7b7      	b.n	80109c4 <_scanf_float+0x188>
 8010a54:	2d06      	cmp	r5, #6
 8010a56:	f47f af21 	bne.w	801089c <_scanf_float+0x60>
 8010a5a:	2507      	movs	r5, #7
 8010a5c:	e7b2      	b.n	80109c4 <_scanf_float+0x188>
 8010a5e:	6822      	ldr	r2, [r4, #0]
 8010a60:	0591      	lsls	r1, r2, #22
 8010a62:	f57f af1b 	bpl.w	801089c <_scanf_float+0x60>
 8010a66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010a6a:	6022      	str	r2, [r4, #0]
 8010a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010a70:	e7a8      	b.n	80109c4 <_scanf_float+0x188>
 8010a72:	6822      	ldr	r2, [r4, #0]
 8010a74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010a78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010a7c:	d006      	beq.n	8010a8c <_scanf_float+0x250>
 8010a7e:	0550      	lsls	r0, r2, #21
 8010a80:	f57f af0c 	bpl.w	801089c <_scanf_float+0x60>
 8010a84:	f1b9 0f00 	cmp.w	r9, #0
 8010a88:	f43f af0f 	beq.w	80108aa <_scanf_float+0x6e>
 8010a8c:	0591      	lsls	r1, r2, #22
 8010a8e:	bf58      	it	pl
 8010a90:	9901      	ldrpl	r1, [sp, #4]
 8010a92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a96:	bf58      	it	pl
 8010a98:	eba9 0101 	subpl.w	r1, r9, r1
 8010a9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010aa0:	bf58      	it	pl
 8010aa2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010aa6:	6022      	str	r2, [r4, #0]
 8010aa8:	f04f 0900 	mov.w	r9, #0
 8010aac:	e78a      	b.n	80109c4 <_scanf_float+0x188>
 8010aae:	f04f 0a03 	mov.w	sl, #3
 8010ab2:	e787      	b.n	80109c4 <_scanf_float+0x188>
 8010ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010ab8:	4639      	mov	r1, r7
 8010aba:	4640      	mov	r0, r8
 8010abc:	4798      	blx	r3
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	f43f aedf 	beq.w	8010882 <_scanf_float+0x46>
 8010ac4:	e6ea      	b.n	801089c <_scanf_float+0x60>
 8010ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ace:	463a      	mov	r2, r7
 8010ad0:	4640      	mov	r0, r8
 8010ad2:	4798      	blx	r3
 8010ad4:	6923      	ldr	r3, [r4, #16]
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	6123      	str	r3, [r4, #16]
 8010ada:	e6ec      	b.n	80108b6 <_scanf_float+0x7a>
 8010adc:	1e6b      	subs	r3, r5, #1
 8010ade:	2b06      	cmp	r3, #6
 8010ae0:	d825      	bhi.n	8010b2e <_scanf_float+0x2f2>
 8010ae2:	2d02      	cmp	r5, #2
 8010ae4:	d836      	bhi.n	8010b54 <_scanf_float+0x318>
 8010ae6:	455e      	cmp	r6, fp
 8010ae8:	f67f aee8 	bls.w	80108bc <_scanf_float+0x80>
 8010aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010af0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010af4:	463a      	mov	r2, r7
 8010af6:	4640      	mov	r0, r8
 8010af8:	4798      	blx	r3
 8010afa:	6923      	ldr	r3, [r4, #16]
 8010afc:	3b01      	subs	r3, #1
 8010afe:	6123      	str	r3, [r4, #16]
 8010b00:	e7f1      	b.n	8010ae6 <_scanf_float+0x2aa>
 8010b02:	9802      	ldr	r0, [sp, #8]
 8010b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010b0c:	9002      	str	r0, [sp, #8]
 8010b0e:	463a      	mov	r2, r7
 8010b10:	4640      	mov	r0, r8
 8010b12:	4798      	blx	r3
 8010b14:	6923      	ldr	r3, [r4, #16]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	6123      	str	r3, [r4, #16]
 8010b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b1e:	fa5f fa8a 	uxtb.w	sl, sl
 8010b22:	f1ba 0f02 	cmp.w	sl, #2
 8010b26:	d1ec      	bne.n	8010b02 <_scanf_float+0x2c6>
 8010b28:	3d03      	subs	r5, #3
 8010b2a:	b2ed      	uxtb	r5, r5
 8010b2c:	1b76      	subs	r6, r6, r5
 8010b2e:	6823      	ldr	r3, [r4, #0]
 8010b30:	05da      	lsls	r2, r3, #23
 8010b32:	d52f      	bpl.n	8010b94 <_scanf_float+0x358>
 8010b34:	055b      	lsls	r3, r3, #21
 8010b36:	d510      	bpl.n	8010b5a <_scanf_float+0x31e>
 8010b38:	455e      	cmp	r6, fp
 8010b3a:	f67f aebf 	bls.w	80108bc <_scanf_float+0x80>
 8010b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b46:	463a      	mov	r2, r7
 8010b48:	4640      	mov	r0, r8
 8010b4a:	4798      	blx	r3
 8010b4c:	6923      	ldr	r3, [r4, #16]
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	6123      	str	r3, [r4, #16]
 8010b52:	e7f1      	b.n	8010b38 <_scanf_float+0x2fc>
 8010b54:	46aa      	mov	sl, r5
 8010b56:	9602      	str	r6, [sp, #8]
 8010b58:	e7df      	b.n	8010b1a <_scanf_float+0x2de>
 8010b5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010b5e:	6923      	ldr	r3, [r4, #16]
 8010b60:	2965      	cmp	r1, #101	; 0x65
 8010b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8010b66:	f106 35ff 	add.w	r5, r6, #4294967295
 8010b6a:	6123      	str	r3, [r4, #16]
 8010b6c:	d00c      	beq.n	8010b88 <_scanf_float+0x34c>
 8010b6e:	2945      	cmp	r1, #69	; 0x45
 8010b70:	d00a      	beq.n	8010b88 <_scanf_float+0x34c>
 8010b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b76:	463a      	mov	r2, r7
 8010b78:	4640      	mov	r0, r8
 8010b7a:	4798      	blx	r3
 8010b7c:	6923      	ldr	r3, [r4, #16]
 8010b7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	1eb5      	subs	r5, r6, #2
 8010b86:	6123      	str	r3, [r4, #16]
 8010b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b8c:	463a      	mov	r2, r7
 8010b8e:	4640      	mov	r0, r8
 8010b90:	4798      	blx	r3
 8010b92:	462e      	mov	r6, r5
 8010b94:	6825      	ldr	r5, [r4, #0]
 8010b96:	f015 0510 	ands.w	r5, r5, #16
 8010b9a:	d158      	bne.n	8010c4e <_scanf_float+0x412>
 8010b9c:	7035      	strb	r5, [r6, #0]
 8010b9e:	6823      	ldr	r3, [r4, #0]
 8010ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ba8:	d11c      	bne.n	8010be4 <_scanf_float+0x3a8>
 8010baa:	9b01      	ldr	r3, [sp, #4]
 8010bac:	454b      	cmp	r3, r9
 8010bae:	eba3 0209 	sub.w	r2, r3, r9
 8010bb2:	d124      	bne.n	8010bfe <_scanf_float+0x3c2>
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	4659      	mov	r1, fp
 8010bb8:	4640      	mov	r0, r8
 8010bba:	f002 fc2d 	bl	8013418 <_strtod_r>
 8010bbe:	9b03      	ldr	r3, [sp, #12]
 8010bc0:	6821      	ldr	r1, [r4, #0]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f011 0f02 	tst.w	r1, #2
 8010bc8:	ec57 6b10 	vmov	r6, r7, d0
 8010bcc:	f103 0204 	add.w	r2, r3, #4
 8010bd0:	d020      	beq.n	8010c14 <_scanf_float+0x3d8>
 8010bd2:	9903      	ldr	r1, [sp, #12]
 8010bd4:	600a      	str	r2, [r1, #0]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	e9c3 6700 	strd	r6, r7, [r3]
 8010bdc:	68e3      	ldr	r3, [r4, #12]
 8010bde:	3301      	adds	r3, #1
 8010be0:	60e3      	str	r3, [r4, #12]
 8010be2:	e66c      	b.n	80108be <_scanf_float+0x82>
 8010be4:	9b04      	ldr	r3, [sp, #16]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d0e4      	beq.n	8010bb4 <_scanf_float+0x378>
 8010bea:	9905      	ldr	r1, [sp, #20]
 8010bec:	230a      	movs	r3, #10
 8010bee:	462a      	mov	r2, r5
 8010bf0:	3101      	adds	r1, #1
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	f002 fc98 	bl	8013528 <_strtol_r>
 8010bf8:	9b04      	ldr	r3, [sp, #16]
 8010bfa:	9e05      	ldr	r6, [sp, #20]
 8010bfc:	1ac2      	subs	r2, r0, r3
 8010bfe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010c02:	429e      	cmp	r6, r3
 8010c04:	bf28      	it	cs
 8010c06:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010c0a:	4912      	ldr	r1, [pc, #72]	; (8010c54 <_scanf_float+0x418>)
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f000 f8f9 	bl	8010e04 <siprintf>
 8010c12:	e7cf      	b.n	8010bb4 <_scanf_float+0x378>
 8010c14:	f011 0f04 	tst.w	r1, #4
 8010c18:	9903      	ldr	r1, [sp, #12]
 8010c1a:	600a      	str	r2, [r1, #0]
 8010c1c:	d1db      	bne.n	8010bd6 <_scanf_float+0x39a>
 8010c1e:	f8d3 8000 	ldr.w	r8, [r3]
 8010c22:	ee10 2a10 	vmov	r2, s0
 8010c26:	ee10 0a10 	vmov	r0, s0
 8010c2a:	463b      	mov	r3, r7
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	f7ef ffa5 	bl	8000b7c <__aeabi_dcmpun>
 8010c32:	b128      	cbz	r0, 8010c40 <_scanf_float+0x404>
 8010c34:	4808      	ldr	r0, [pc, #32]	; (8010c58 <_scanf_float+0x41c>)
 8010c36:	f000 fa67 	bl	8011108 <nanf>
 8010c3a:	ed88 0a00 	vstr	s0, [r8]
 8010c3e:	e7cd      	b.n	8010bdc <_scanf_float+0x3a0>
 8010c40:	4630      	mov	r0, r6
 8010c42:	4639      	mov	r1, r7
 8010c44:	f7ef fff8 	bl	8000c38 <__aeabi_d2f>
 8010c48:	f8c8 0000 	str.w	r0, [r8]
 8010c4c:	e7c6      	b.n	8010bdc <_scanf_float+0x3a0>
 8010c4e:	2500      	movs	r5, #0
 8010c50:	e635      	b.n	80108be <_scanf_float+0x82>
 8010c52:	bf00      	nop
 8010c54:	08015788 	.word	0x08015788
 8010c58:	08015753 	.word	0x08015753

08010c5c <std>:
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	b510      	push	{r4, lr}
 8010c60:	4604      	mov	r4, r0
 8010c62:	e9c0 3300 	strd	r3, r3, [r0]
 8010c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c6a:	6083      	str	r3, [r0, #8]
 8010c6c:	8181      	strh	r1, [r0, #12]
 8010c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8010c70:	81c2      	strh	r2, [r0, #14]
 8010c72:	6183      	str	r3, [r0, #24]
 8010c74:	4619      	mov	r1, r3
 8010c76:	2208      	movs	r2, #8
 8010c78:	305c      	adds	r0, #92	; 0x5c
 8010c7a:	f000 f950 	bl	8010f1e <memset>
 8010c7e:	4b0d      	ldr	r3, [pc, #52]	; (8010cb4 <std+0x58>)
 8010c80:	6263      	str	r3, [r4, #36]	; 0x24
 8010c82:	4b0d      	ldr	r3, [pc, #52]	; (8010cb8 <std+0x5c>)
 8010c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c86:	4b0d      	ldr	r3, [pc, #52]	; (8010cbc <std+0x60>)
 8010c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c8a:	4b0d      	ldr	r3, [pc, #52]	; (8010cc0 <std+0x64>)
 8010c8c:	6323      	str	r3, [r4, #48]	; 0x30
 8010c8e:	4b0d      	ldr	r3, [pc, #52]	; (8010cc4 <std+0x68>)
 8010c90:	6224      	str	r4, [r4, #32]
 8010c92:	429c      	cmp	r4, r3
 8010c94:	d006      	beq.n	8010ca4 <std+0x48>
 8010c96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010c9a:	4294      	cmp	r4, r2
 8010c9c:	d002      	beq.n	8010ca4 <std+0x48>
 8010c9e:	33d0      	adds	r3, #208	; 0xd0
 8010ca0:	429c      	cmp	r4, r3
 8010ca2:	d105      	bne.n	8010cb0 <std+0x54>
 8010ca4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cac:	f000 ba1a 	b.w	80110e4 <__retarget_lock_init_recursive>
 8010cb0:	bd10      	pop	{r4, pc}
 8010cb2:	bf00      	nop
 8010cb4:	08010e45 	.word	0x08010e45
 8010cb8:	08010e67 	.word	0x08010e67
 8010cbc:	08010e9f 	.word	0x08010e9f
 8010cc0:	08010ec3 	.word	0x08010ec3
 8010cc4:	200006c8 	.word	0x200006c8

08010cc8 <stdio_exit_handler>:
 8010cc8:	4a02      	ldr	r2, [pc, #8]	; (8010cd4 <stdio_exit_handler+0xc>)
 8010cca:	4903      	ldr	r1, [pc, #12]	; (8010cd8 <stdio_exit_handler+0x10>)
 8010ccc:	4803      	ldr	r0, [pc, #12]	; (8010cdc <stdio_exit_handler+0x14>)
 8010cce:	f000 b87b 	b.w	8010dc8 <_fwalk_sglue>
 8010cd2:	bf00      	nop
 8010cd4:	20000048 	.word	0x20000048
 8010cd8:	08013b71 	.word	0x08013b71
 8010cdc:	20000054 	.word	0x20000054

08010ce0 <cleanup_stdio>:
 8010ce0:	6841      	ldr	r1, [r0, #4]
 8010ce2:	4b0c      	ldr	r3, [pc, #48]	; (8010d14 <cleanup_stdio+0x34>)
 8010ce4:	4299      	cmp	r1, r3
 8010ce6:	b510      	push	{r4, lr}
 8010ce8:	4604      	mov	r4, r0
 8010cea:	d001      	beq.n	8010cf0 <cleanup_stdio+0x10>
 8010cec:	f002 ff40 	bl	8013b70 <_fflush_r>
 8010cf0:	68a1      	ldr	r1, [r4, #8]
 8010cf2:	4b09      	ldr	r3, [pc, #36]	; (8010d18 <cleanup_stdio+0x38>)
 8010cf4:	4299      	cmp	r1, r3
 8010cf6:	d002      	beq.n	8010cfe <cleanup_stdio+0x1e>
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f002 ff39 	bl	8013b70 <_fflush_r>
 8010cfe:	68e1      	ldr	r1, [r4, #12]
 8010d00:	4b06      	ldr	r3, [pc, #24]	; (8010d1c <cleanup_stdio+0x3c>)
 8010d02:	4299      	cmp	r1, r3
 8010d04:	d004      	beq.n	8010d10 <cleanup_stdio+0x30>
 8010d06:	4620      	mov	r0, r4
 8010d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d0c:	f002 bf30 	b.w	8013b70 <_fflush_r>
 8010d10:	bd10      	pop	{r4, pc}
 8010d12:	bf00      	nop
 8010d14:	200006c8 	.word	0x200006c8
 8010d18:	20000730 	.word	0x20000730
 8010d1c:	20000798 	.word	0x20000798

08010d20 <global_stdio_init.part.0>:
 8010d20:	b510      	push	{r4, lr}
 8010d22:	4b0b      	ldr	r3, [pc, #44]	; (8010d50 <global_stdio_init.part.0+0x30>)
 8010d24:	4c0b      	ldr	r4, [pc, #44]	; (8010d54 <global_stdio_init.part.0+0x34>)
 8010d26:	4a0c      	ldr	r2, [pc, #48]	; (8010d58 <global_stdio_init.part.0+0x38>)
 8010d28:	601a      	str	r2, [r3, #0]
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	2104      	movs	r1, #4
 8010d30:	f7ff ff94 	bl	8010c5c <std>
 8010d34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010d38:	2201      	movs	r2, #1
 8010d3a:	2109      	movs	r1, #9
 8010d3c:	f7ff ff8e 	bl	8010c5c <std>
 8010d40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010d44:	2202      	movs	r2, #2
 8010d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d4a:	2112      	movs	r1, #18
 8010d4c:	f7ff bf86 	b.w	8010c5c <std>
 8010d50:	20000800 	.word	0x20000800
 8010d54:	200006c8 	.word	0x200006c8
 8010d58:	08010cc9 	.word	0x08010cc9

08010d5c <__sfp_lock_acquire>:
 8010d5c:	4801      	ldr	r0, [pc, #4]	; (8010d64 <__sfp_lock_acquire+0x8>)
 8010d5e:	f000 b9c2 	b.w	80110e6 <__retarget_lock_acquire_recursive>
 8010d62:	bf00      	nop
 8010d64:	20000809 	.word	0x20000809

08010d68 <__sfp_lock_release>:
 8010d68:	4801      	ldr	r0, [pc, #4]	; (8010d70 <__sfp_lock_release+0x8>)
 8010d6a:	f000 b9bd 	b.w	80110e8 <__retarget_lock_release_recursive>
 8010d6e:	bf00      	nop
 8010d70:	20000809 	.word	0x20000809

08010d74 <__sinit>:
 8010d74:	b510      	push	{r4, lr}
 8010d76:	4604      	mov	r4, r0
 8010d78:	f7ff fff0 	bl	8010d5c <__sfp_lock_acquire>
 8010d7c:	6a23      	ldr	r3, [r4, #32]
 8010d7e:	b11b      	cbz	r3, 8010d88 <__sinit+0x14>
 8010d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d84:	f7ff bff0 	b.w	8010d68 <__sfp_lock_release>
 8010d88:	4b04      	ldr	r3, [pc, #16]	; (8010d9c <__sinit+0x28>)
 8010d8a:	6223      	str	r3, [r4, #32]
 8010d8c:	4b04      	ldr	r3, [pc, #16]	; (8010da0 <__sinit+0x2c>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d1f5      	bne.n	8010d80 <__sinit+0xc>
 8010d94:	f7ff ffc4 	bl	8010d20 <global_stdio_init.part.0>
 8010d98:	e7f2      	b.n	8010d80 <__sinit+0xc>
 8010d9a:	bf00      	nop
 8010d9c:	08010ce1 	.word	0x08010ce1
 8010da0:	20000800 	.word	0x20000800

08010da4 <fiprintf>:
 8010da4:	b40e      	push	{r1, r2, r3}
 8010da6:	b503      	push	{r0, r1, lr}
 8010da8:	4601      	mov	r1, r0
 8010daa:	ab03      	add	r3, sp, #12
 8010dac:	4805      	ldr	r0, [pc, #20]	; (8010dc4 <fiprintf+0x20>)
 8010dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8010db2:	6800      	ldr	r0, [r0, #0]
 8010db4:	9301      	str	r3, [sp, #4]
 8010db6:	f002 fd3b 	bl	8013830 <_vfiprintf_r>
 8010dba:	b002      	add	sp, #8
 8010dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dc0:	b003      	add	sp, #12
 8010dc2:	4770      	bx	lr
 8010dc4:	200000a0 	.word	0x200000a0

08010dc8 <_fwalk_sglue>:
 8010dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dcc:	4607      	mov	r7, r0
 8010dce:	4688      	mov	r8, r1
 8010dd0:	4614      	mov	r4, r2
 8010dd2:	2600      	movs	r6, #0
 8010dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8010ddc:	d505      	bpl.n	8010dea <_fwalk_sglue+0x22>
 8010dde:	6824      	ldr	r4, [r4, #0]
 8010de0:	2c00      	cmp	r4, #0
 8010de2:	d1f7      	bne.n	8010dd4 <_fwalk_sglue+0xc>
 8010de4:	4630      	mov	r0, r6
 8010de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dea:	89ab      	ldrh	r3, [r5, #12]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d907      	bls.n	8010e00 <_fwalk_sglue+0x38>
 8010df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010df4:	3301      	adds	r3, #1
 8010df6:	d003      	beq.n	8010e00 <_fwalk_sglue+0x38>
 8010df8:	4629      	mov	r1, r5
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	47c0      	blx	r8
 8010dfe:	4306      	orrs	r6, r0
 8010e00:	3568      	adds	r5, #104	; 0x68
 8010e02:	e7e9      	b.n	8010dd8 <_fwalk_sglue+0x10>

08010e04 <siprintf>:
 8010e04:	b40e      	push	{r1, r2, r3}
 8010e06:	b500      	push	{lr}
 8010e08:	b09c      	sub	sp, #112	; 0x70
 8010e0a:	ab1d      	add	r3, sp, #116	; 0x74
 8010e0c:	9002      	str	r0, [sp, #8]
 8010e0e:	9006      	str	r0, [sp, #24]
 8010e10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e14:	4809      	ldr	r0, [pc, #36]	; (8010e3c <siprintf+0x38>)
 8010e16:	9107      	str	r1, [sp, #28]
 8010e18:	9104      	str	r1, [sp, #16]
 8010e1a:	4909      	ldr	r1, [pc, #36]	; (8010e40 <siprintf+0x3c>)
 8010e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e20:	9105      	str	r1, [sp, #20]
 8010e22:	6800      	ldr	r0, [r0, #0]
 8010e24:	9301      	str	r3, [sp, #4]
 8010e26:	a902      	add	r1, sp, #8
 8010e28:	f002 fbda 	bl	80135e0 <_svfiprintf_r>
 8010e2c:	9b02      	ldr	r3, [sp, #8]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	701a      	strb	r2, [r3, #0]
 8010e32:	b01c      	add	sp, #112	; 0x70
 8010e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e38:	b003      	add	sp, #12
 8010e3a:	4770      	bx	lr
 8010e3c:	200000a0 	.word	0x200000a0
 8010e40:	ffff0208 	.word	0xffff0208

08010e44 <__sread>:
 8010e44:	b510      	push	{r4, lr}
 8010e46:	460c      	mov	r4, r1
 8010e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e4c:	f000 f8d8 	bl	8011000 <_read_r>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	bfab      	itete	ge
 8010e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e56:	89a3      	ldrhlt	r3, [r4, #12]
 8010e58:	181b      	addge	r3, r3, r0
 8010e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e5e:	bfac      	ite	ge
 8010e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e62:	81a3      	strhlt	r3, [r4, #12]
 8010e64:	bd10      	pop	{r4, pc}

08010e66 <__swrite>:
 8010e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6a:	461f      	mov	r7, r3
 8010e6c:	898b      	ldrh	r3, [r1, #12]
 8010e6e:	05db      	lsls	r3, r3, #23
 8010e70:	4605      	mov	r5, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	4616      	mov	r6, r2
 8010e76:	d505      	bpl.n	8010e84 <__swrite+0x1e>
 8010e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f000 f8ac 	bl	8010fdc <_lseek_r>
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e8e:	81a3      	strh	r3, [r4, #12]
 8010e90:	4632      	mov	r2, r6
 8010e92:	463b      	mov	r3, r7
 8010e94:	4628      	mov	r0, r5
 8010e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9a:	f000 b8e7 	b.w	801106c <_write_r>

08010e9e <__sseek>:
 8010e9e:	b510      	push	{r4, lr}
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea6:	f000 f899 	bl	8010fdc <_lseek_r>
 8010eaa:	1c43      	adds	r3, r0, #1
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	bf15      	itete	ne
 8010eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010eba:	81a3      	strheq	r3, [r4, #12]
 8010ebc:	bf18      	it	ne
 8010ebe:	81a3      	strhne	r3, [r4, #12]
 8010ec0:	bd10      	pop	{r4, pc}

08010ec2 <__sclose>:
 8010ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ec6:	f000 b879 	b.w	8010fbc <_close_r>

08010eca <memcmp>:
 8010eca:	b510      	push	{r4, lr}
 8010ecc:	3901      	subs	r1, #1
 8010ece:	4402      	add	r2, r0
 8010ed0:	4290      	cmp	r0, r2
 8010ed2:	d101      	bne.n	8010ed8 <memcmp+0xe>
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	e005      	b.n	8010ee4 <memcmp+0x1a>
 8010ed8:	7803      	ldrb	r3, [r0, #0]
 8010eda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d001      	beq.n	8010ee6 <memcmp+0x1c>
 8010ee2:	1b18      	subs	r0, r3, r4
 8010ee4:	bd10      	pop	{r4, pc}
 8010ee6:	3001      	adds	r0, #1
 8010ee8:	e7f2      	b.n	8010ed0 <memcmp+0x6>

08010eea <memmove>:
 8010eea:	4288      	cmp	r0, r1
 8010eec:	b510      	push	{r4, lr}
 8010eee:	eb01 0402 	add.w	r4, r1, r2
 8010ef2:	d902      	bls.n	8010efa <memmove+0x10>
 8010ef4:	4284      	cmp	r4, r0
 8010ef6:	4623      	mov	r3, r4
 8010ef8:	d807      	bhi.n	8010f0a <memmove+0x20>
 8010efa:	1e43      	subs	r3, r0, #1
 8010efc:	42a1      	cmp	r1, r4
 8010efe:	d008      	beq.n	8010f12 <memmove+0x28>
 8010f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f08:	e7f8      	b.n	8010efc <memmove+0x12>
 8010f0a:	4402      	add	r2, r0
 8010f0c:	4601      	mov	r1, r0
 8010f0e:	428a      	cmp	r2, r1
 8010f10:	d100      	bne.n	8010f14 <memmove+0x2a>
 8010f12:	bd10      	pop	{r4, pc}
 8010f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f1c:	e7f7      	b.n	8010f0e <memmove+0x24>

08010f1e <memset>:
 8010f1e:	4402      	add	r2, r0
 8010f20:	4603      	mov	r3, r0
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d100      	bne.n	8010f28 <memset+0xa>
 8010f26:	4770      	bx	lr
 8010f28:	f803 1b01 	strb.w	r1, [r3], #1
 8010f2c:	e7f9      	b.n	8010f22 <memset+0x4>

08010f2e <strncpy>:
 8010f2e:	b510      	push	{r4, lr}
 8010f30:	3901      	subs	r1, #1
 8010f32:	4603      	mov	r3, r0
 8010f34:	b132      	cbz	r2, 8010f44 <strncpy+0x16>
 8010f36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010f3a:	f803 4b01 	strb.w	r4, [r3], #1
 8010f3e:	3a01      	subs	r2, #1
 8010f40:	2c00      	cmp	r4, #0
 8010f42:	d1f7      	bne.n	8010f34 <strncpy+0x6>
 8010f44:	441a      	add	r2, r3
 8010f46:	2100      	movs	r1, #0
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d100      	bne.n	8010f4e <strncpy+0x20>
 8010f4c:	bd10      	pop	{r4, pc}
 8010f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8010f52:	e7f9      	b.n	8010f48 <strncpy+0x1a>

08010f54 <_raise_r>:
 8010f54:	291f      	cmp	r1, #31
 8010f56:	b538      	push	{r3, r4, r5, lr}
 8010f58:	4604      	mov	r4, r0
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	d904      	bls.n	8010f68 <_raise_r+0x14>
 8010f5e:	2316      	movs	r3, #22
 8010f60:	6003      	str	r3, [r0, #0]
 8010f62:	f04f 30ff 	mov.w	r0, #4294967295
 8010f66:	bd38      	pop	{r3, r4, r5, pc}
 8010f68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010f6a:	b112      	cbz	r2, 8010f72 <_raise_r+0x1e>
 8010f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f70:	b94b      	cbnz	r3, 8010f86 <_raise_r+0x32>
 8010f72:	4620      	mov	r0, r4
 8010f74:	f000 f868 	bl	8011048 <_getpid_r>
 8010f78:	462a      	mov	r2, r5
 8010f7a:	4601      	mov	r1, r0
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f82:	f000 b84f 	b.w	8011024 <_kill_r>
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d00a      	beq.n	8010fa0 <_raise_r+0x4c>
 8010f8a:	1c59      	adds	r1, r3, #1
 8010f8c:	d103      	bne.n	8010f96 <_raise_r+0x42>
 8010f8e:	2316      	movs	r3, #22
 8010f90:	6003      	str	r3, [r0, #0]
 8010f92:	2001      	movs	r0, #1
 8010f94:	e7e7      	b.n	8010f66 <_raise_r+0x12>
 8010f96:	2400      	movs	r4, #0
 8010f98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	4798      	blx	r3
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	e7e0      	b.n	8010f66 <_raise_r+0x12>

08010fa4 <raise>:
 8010fa4:	4b02      	ldr	r3, [pc, #8]	; (8010fb0 <raise+0xc>)
 8010fa6:	4601      	mov	r1, r0
 8010fa8:	6818      	ldr	r0, [r3, #0]
 8010faa:	f7ff bfd3 	b.w	8010f54 <_raise_r>
 8010fae:	bf00      	nop
 8010fb0:	200000a0 	.word	0x200000a0

08010fb4 <_localeconv_r>:
 8010fb4:	4800      	ldr	r0, [pc, #0]	; (8010fb8 <_localeconv_r+0x4>)
 8010fb6:	4770      	bx	lr
 8010fb8:	20000194 	.word	0x20000194

08010fbc <_close_r>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4d06      	ldr	r5, [pc, #24]	; (8010fd8 <_close_r+0x1c>)
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	4608      	mov	r0, r1
 8010fc6:	602b      	str	r3, [r5, #0]
 8010fc8:	f7f6 ffd5 	bl	8007f76 <_close>
 8010fcc:	1c43      	adds	r3, r0, #1
 8010fce:	d102      	bne.n	8010fd6 <_close_r+0x1a>
 8010fd0:	682b      	ldr	r3, [r5, #0]
 8010fd2:	b103      	cbz	r3, 8010fd6 <_close_r+0x1a>
 8010fd4:	6023      	str	r3, [r4, #0]
 8010fd6:	bd38      	pop	{r3, r4, r5, pc}
 8010fd8:	20000804 	.word	0x20000804

08010fdc <_lseek_r>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	4d07      	ldr	r5, [pc, #28]	; (8010ffc <_lseek_r+0x20>)
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	4608      	mov	r0, r1
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	602a      	str	r2, [r5, #0]
 8010fea:	461a      	mov	r2, r3
 8010fec:	f7f6 ffea 	bl	8007fc4 <_lseek>
 8010ff0:	1c43      	adds	r3, r0, #1
 8010ff2:	d102      	bne.n	8010ffa <_lseek_r+0x1e>
 8010ff4:	682b      	ldr	r3, [r5, #0]
 8010ff6:	b103      	cbz	r3, 8010ffa <_lseek_r+0x1e>
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	bd38      	pop	{r3, r4, r5, pc}
 8010ffc:	20000804 	.word	0x20000804

08011000 <_read_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d07      	ldr	r5, [pc, #28]	; (8011020 <_read_r+0x20>)
 8011004:	4604      	mov	r4, r0
 8011006:	4608      	mov	r0, r1
 8011008:	4611      	mov	r1, r2
 801100a:	2200      	movs	r2, #0
 801100c:	602a      	str	r2, [r5, #0]
 801100e:	461a      	mov	r2, r3
 8011010:	f7f6 ff78 	bl	8007f04 <_read>
 8011014:	1c43      	adds	r3, r0, #1
 8011016:	d102      	bne.n	801101e <_read_r+0x1e>
 8011018:	682b      	ldr	r3, [r5, #0]
 801101a:	b103      	cbz	r3, 801101e <_read_r+0x1e>
 801101c:	6023      	str	r3, [r4, #0]
 801101e:	bd38      	pop	{r3, r4, r5, pc}
 8011020:	20000804 	.word	0x20000804

08011024 <_kill_r>:
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	4d07      	ldr	r5, [pc, #28]	; (8011044 <_kill_r+0x20>)
 8011028:	2300      	movs	r3, #0
 801102a:	4604      	mov	r4, r0
 801102c:	4608      	mov	r0, r1
 801102e:	4611      	mov	r1, r2
 8011030:	602b      	str	r3, [r5, #0]
 8011032:	f7f6 ff4d 	bl	8007ed0 <_kill>
 8011036:	1c43      	adds	r3, r0, #1
 8011038:	d102      	bne.n	8011040 <_kill_r+0x1c>
 801103a:	682b      	ldr	r3, [r5, #0]
 801103c:	b103      	cbz	r3, 8011040 <_kill_r+0x1c>
 801103e:	6023      	str	r3, [r4, #0]
 8011040:	bd38      	pop	{r3, r4, r5, pc}
 8011042:	bf00      	nop
 8011044:	20000804 	.word	0x20000804

08011048 <_getpid_r>:
 8011048:	f7f6 bf3a 	b.w	8007ec0 <_getpid>

0801104c <_sbrk_r>:
 801104c:	b538      	push	{r3, r4, r5, lr}
 801104e:	4d06      	ldr	r5, [pc, #24]	; (8011068 <_sbrk_r+0x1c>)
 8011050:	2300      	movs	r3, #0
 8011052:	4604      	mov	r4, r0
 8011054:	4608      	mov	r0, r1
 8011056:	602b      	str	r3, [r5, #0]
 8011058:	f7f6 ffc2 	bl	8007fe0 <_sbrk>
 801105c:	1c43      	adds	r3, r0, #1
 801105e:	d102      	bne.n	8011066 <_sbrk_r+0x1a>
 8011060:	682b      	ldr	r3, [r5, #0]
 8011062:	b103      	cbz	r3, 8011066 <_sbrk_r+0x1a>
 8011064:	6023      	str	r3, [r4, #0]
 8011066:	bd38      	pop	{r3, r4, r5, pc}
 8011068:	20000804 	.word	0x20000804

0801106c <_write_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4d07      	ldr	r5, [pc, #28]	; (801108c <_write_r+0x20>)
 8011070:	4604      	mov	r4, r0
 8011072:	4608      	mov	r0, r1
 8011074:	4611      	mov	r1, r2
 8011076:	2200      	movs	r2, #0
 8011078:	602a      	str	r2, [r5, #0]
 801107a:	461a      	mov	r2, r3
 801107c:	f7f6 ff5f 	bl	8007f3e <_write>
 8011080:	1c43      	adds	r3, r0, #1
 8011082:	d102      	bne.n	801108a <_write_r+0x1e>
 8011084:	682b      	ldr	r3, [r5, #0]
 8011086:	b103      	cbz	r3, 801108a <_write_r+0x1e>
 8011088:	6023      	str	r3, [r4, #0]
 801108a:	bd38      	pop	{r3, r4, r5, pc}
 801108c:	20000804 	.word	0x20000804

08011090 <__errno>:
 8011090:	4b01      	ldr	r3, [pc, #4]	; (8011098 <__errno+0x8>)
 8011092:	6818      	ldr	r0, [r3, #0]
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	200000a0 	.word	0x200000a0

0801109c <__libc_init_array>:
 801109c:	b570      	push	{r4, r5, r6, lr}
 801109e:	4d0d      	ldr	r5, [pc, #52]	; (80110d4 <__libc_init_array+0x38>)
 80110a0:	4c0d      	ldr	r4, [pc, #52]	; (80110d8 <__libc_init_array+0x3c>)
 80110a2:	1b64      	subs	r4, r4, r5
 80110a4:	10a4      	asrs	r4, r4, #2
 80110a6:	2600      	movs	r6, #0
 80110a8:	42a6      	cmp	r6, r4
 80110aa:	d109      	bne.n	80110c0 <__libc_init_array+0x24>
 80110ac:	4d0b      	ldr	r5, [pc, #44]	; (80110dc <__libc_init_array+0x40>)
 80110ae:	4c0c      	ldr	r4, [pc, #48]	; (80110e0 <__libc_init_array+0x44>)
 80110b0:	f003 fa7e 	bl	80145b0 <_init>
 80110b4:	1b64      	subs	r4, r4, r5
 80110b6:	10a4      	asrs	r4, r4, #2
 80110b8:	2600      	movs	r6, #0
 80110ba:	42a6      	cmp	r6, r4
 80110bc:	d105      	bne.n	80110ca <__libc_init_array+0x2e>
 80110be:	bd70      	pop	{r4, r5, r6, pc}
 80110c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110c4:	4798      	blx	r3
 80110c6:	3601      	adds	r6, #1
 80110c8:	e7ee      	b.n	80110a8 <__libc_init_array+0xc>
 80110ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ce:	4798      	blx	r3
 80110d0:	3601      	adds	r6, #1
 80110d2:	e7f2      	b.n	80110ba <__libc_init_array+0x1e>
 80110d4:	08015b4c 	.word	0x08015b4c
 80110d8:	08015b4c 	.word	0x08015b4c
 80110dc:	08015b4c 	.word	0x08015b4c
 80110e0:	08015b5c 	.word	0x08015b5c

080110e4 <__retarget_lock_init_recursive>:
 80110e4:	4770      	bx	lr

080110e6 <__retarget_lock_acquire_recursive>:
 80110e6:	4770      	bx	lr

080110e8 <__retarget_lock_release_recursive>:
 80110e8:	4770      	bx	lr

080110ea <memcpy>:
 80110ea:	440a      	add	r2, r1
 80110ec:	4291      	cmp	r1, r2
 80110ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80110f2:	d100      	bne.n	80110f6 <memcpy+0xc>
 80110f4:	4770      	bx	lr
 80110f6:	b510      	push	{r4, lr}
 80110f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011100:	4291      	cmp	r1, r2
 8011102:	d1f9      	bne.n	80110f8 <memcpy+0xe>
 8011104:	bd10      	pop	{r4, pc}
	...

08011108 <nanf>:
 8011108:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011110 <nanf+0x8>
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop
 8011110:	7fc00000 	.word	0x7fc00000

08011114 <quorem>:
 8011114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011118:	6903      	ldr	r3, [r0, #16]
 801111a:	690c      	ldr	r4, [r1, #16]
 801111c:	42a3      	cmp	r3, r4
 801111e:	4607      	mov	r7, r0
 8011120:	db7e      	blt.n	8011220 <quorem+0x10c>
 8011122:	3c01      	subs	r4, #1
 8011124:	f101 0814 	add.w	r8, r1, #20
 8011128:	f100 0514 	add.w	r5, r0, #20
 801112c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801113a:	3301      	adds	r3, #1
 801113c:	429a      	cmp	r2, r3
 801113e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011142:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011146:	fbb2 f6f3 	udiv	r6, r2, r3
 801114a:	d331      	bcc.n	80111b0 <quorem+0x9c>
 801114c:	f04f 0e00 	mov.w	lr, #0
 8011150:	4640      	mov	r0, r8
 8011152:	46ac      	mov	ip, r5
 8011154:	46f2      	mov	sl, lr
 8011156:	f850 2b04 	ldr.w	r2, [r0], #4
 801115a:	b293      	uxth	r3, r2
 801115c:	fb06 e303 	mla	r3, r6, r3, lr
 8011160:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011164:	0c1a      	lsrs	r2, r3, #16
 8011166:	b29b      	uxth	r3, r3
 8011168:	ebaa 0303 	sub.w	r3, sl, r3
 801116c:	f8dc a000 	ldr.w	sl, [ip]
 8011170:	fa13 f38a 	uxtah	r3, r3, sl
 8011174:	fb06 220e 	mla	r2, r6, lr, r2
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	9b00      	ldr	r3, [sp, #0]
 801117c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011180:	b292      	uxth	r2, r2
 8011182:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011186:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801118a:	f8bd 3000 	ldrh.w	r3, [sp]
 801118e:	4581      	cmp	r9, r0
 8011190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011194:	f84c 3b04 	str.w	r3, [ip], #4
 8011198:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801119c:	d2db      	bcs.n	8011156 <quorem+0x42>
 801119e:	f855 300b 	ldr.w	r3, [r5, fp]
 80111a2:	b92b      	cbnz	r3, 80111b0 <quorem+0x9c>
 80111a4:	9b01      	ldr	r3, [sp, #4]
 80111a6:	3b04      	subs	r3, #4
 80111a8:	429d      	cmp	r5, r3
 80111aa:	461a      	mov	r2, r3
 80111ac:	d32c      	bcc.n	8011208 <quorem+0xf4>
 80111ae:	613c      	str	r4, [r7, #16]
 80111b0:	4638      	mov	r0, r7
 80111b2:	f001 f93d 	bl	8012430 <__mcmp>
 80111b6:	2800      	cmp	r0, #0
 80111b8:	db22      	blt.n	8011200 <quorem+0xec>
 80111ba:	3601      	adds	r6, #1
 80111bc:	4629      	mov	r1, r5
 80111be:	2000      	movs	r0, #0
 80111c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80111c4:	f8d1 c000 	ldr.w	ip, [r1]
 80111c8:	b293      	uxth	r3, r2
 80111ca:	1ac3      	subs	r3, r0, r3
 80111cc:	0c12      	lsrs	r2, r2, #16
 80111ce:	fa13 f38c 	uxtah	r3, r3, ip
 80111d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80111d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111da:	b29b      	uxth	r3, r3
 80111dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111e0:	45c1      	cmp	r9, r8
 80111e2:	f841 3b04 	str.w	r3, [r1], #4
 80111e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80111ea:	d2e9      	bcs.n	80111c0 <quorem+0xac>
 80111ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111f4:	b922      	cbnz	r2, 8011200 <quorem+0xec>
 80111f6:	3b04      	subs	r3, #4
 80111f8:	429d      	cmp	r5, r3
 80111fa:	461a      	mov	r2, r3
 80111fc:	d30a      	bcc.n	8011214 <quorem+0x100>
 80111fe:	613c      	str	r4, [r7, #16]
 8011200:	4630      	mov	r0, r6
 8011202:	b003      	add	sp, #12
 8011204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011208:	6812      	ldr	r2, [r2, #0]
 801120a:	3b04      	subs	r3, #4
 801120c:	2a00      	cmp	r2, #0
 801120e:	d1ce      	bne.n	80111ae <quorem+0x9a>
 8011210:	3c01      	subs	r4, #1
 8011212:	e7c9      	b.n	80111a8 <quorem+0x94>
 8011214:	6812      	ldr	r2, [r2, #0]
 8011216:	3b04      	subs	r3, #4
 8011218:	2a00      	cmp	r2, #0
 801121a:	d1f0      	bne.n	80111fe <quorem+0xea>
 801121c:	3c01      	subs	r4, #1
 801121e:	e7eb      	b.n	80111f8 <quorem+0xe4>
 8011220:	2000      	movs	r0, #0
 8011222:	e7ee      	b.n	8011202 <quorem+0xee>
 8011224:	0000      	movs	r0, r0
	...

08011228 <_dtoa_r>:
 8011228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801122c:	ed2d 8b04 	vpush	{d8-d9}
 8011230:	69c5      	ldr	r5, [r0, #28]
 8011232:	b093      	sub	sp, #76	; 0x4c
 8011234:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011238:	ec57 6b10 	vmov	r6, r7, d0
 801123c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011240:	9107      	str	r1, [sp, #28]
 8011242:	4604      	mov	r4, r0
 8011244:	920a      	str	r2, [sp, #40]	; 0x28
 8011246:	930d      	str	r3, [sp, #52]	; 0x34
 8011248:	b975      	cbnz	r5, 8011268 <_dtoa_r+0x40>
 801124a:	2010      	movs	r0, #16
 801124c:	f7fe fdd4 	bl	800fdf8 <malloc>
 8011250:	4602      	mov	r2, r0
 8011252:	61e0      	str	r0, [r4, #28]
 8011254:	b920      	cbnz	r0, 8011260 <_dtoa_r+0x38>
 8011256:	4bae      	ldr	r3, [pc, #696]	; (8011510 <_dtoa_r+0x2e8>)
 8011258:	21ef      	movs	r1, #239	; 0xef
 801125a:	48ae      	ldr	r0, [pc, #696]	; (8011514 <_dtoa_r+0x2ec>)
 801125c:	f7fe fd9c 	bl	800fd98 <__assert_func>
 8011260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011264:	6005      	str	r5, [r0, #0]
 8011266:	60c5      	str	r5, [r0, #12]
 8011268:	69e3      	ldr	r3, [r4, #28]
 801126a:	6819      	ldr	r1, [r3, #0]
 801126c:	b151      	cbz	r1, 8011284 <_dtoa_r+0x5c>
 801126e:	685a      	ldr	r2, [r3, #4]
 8011270:	604a      	str	r2, [r1, #4]
 8011272:	2301      	movs	r3, #1
 8011274:	4093      	lsls	r3, r2
 8011276:	608b      	str	r3, [r1, #8]
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fe53 	bl	8011f24 <_Bfree>
 801127e:	69e3      	ldr	r3, [r4, #28]
 8011280:	2200      	movs	r2, #0
 8011282:	601a      	str	r2, [r3, #0]
 8011284:	1e3b      	subs	r3, r7, #0
 8011286:	bfbb      	ittet	lt
 8011288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801128c:	9303      	strlt	r3, [sp, #12]
 801128e:	2300      	movge	r3, #0
 8011290:	2201      	movlt	r2, #1
 8011292:	bfac      	ite	ge
 8011294:	f8c8 3000 	strge.w	r3, [r8]
 8011298:	f8c8 2000 	strlt.w	r2, [r8]
 801129c:	4b9e      	ldr	r3, [pc, #632]	; (8011518 <_dtoa_r+0x2f0>)
 801129e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80112a2:	ea33 0308 	bics.w	r3, r3, r8
 80112a6:	d11b      	bne.n	80112e0 <_dtoa_r+0xb8>
 80112a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80112aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80112ae:	6013      	str	r3, [r2, #0]
 80112b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80112b4:	4333      	orrs	r3, r6
 80112b6:	f000 8593 	beq.w	8011de0 <_dtoa_r+0xbb8>
 80112ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112bc:	b963      	cbnz	r3, 80112d8 <_dtoa_r+0xb0>
 80112be:	4b97      	ldr	r3, [pc, #604]	; (801151c <_dtoa_r+0x2f4>)
 80112c0:	e027      	b.n	8011312 <_dtoa_r+0xea>
 80112c2:	4b97      	ldr	r3, [pc, #604]	; (8011520 <_dtoa_r+0x2f8>)
 80112c4:	9300      	str	r3, [sp, #0]
 80112c6:	3308      	adds	r3, #8
 80112c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80112ca:	6013      	str	r3, [r2, #0]
 80112cc:	9800      	ldr	r0, [sp, #0]
 80112ce:	b013      	add	sp, #76	; 0x4c
 80112d0:	ecbd 8b04 	vpop	{d8-d9}
 80112d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d8:	4b90      	ldr	r3, [pc, #576]	; (801151c <_dtoa_r+0x2f4>)
 80112da:	9300      	str	r3, [sp, #0]
 80112dc:	3303      	adds	r3, #3
 80112de:	e7f3      	b.n	80112c8 <_dtoa_r+0xa0>
 80112e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112e4:	2200      	movs	r2, #0
 80112e6:	ec51 0b17 	vmov	r0, r1, d7
 80112ea:	eeb0 8a47 	vmov.f32	s16, s14
 80112ee:	eef0 8a67 	vmov.f32	s17, s15
 80112f2:	2300      	movs	r3, #0
 80112f4:	f7ef fc10 	bl	8000b18 <__aeabi_dcmpeq>
 80112f8:	4681      	mov	r9, r0
 80112fa:	b160      	cbz	r0, 8011316 <_dtoa_r+0xee>
 80112fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80112fe:	2301      	movs	r3, #1
 8011300:	6013      	str	r3, [r2, #0]
 8011302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 8568 	beq.w	8011dda <_dtoa_r+0xbb2>
 801130a:	4b86      	ldr	r3, [pc, #536]	; (8011524 <_dtoa_r+0x2fc>)
 801130c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801130e:	6013      	str	r3, [r2, #0]
 8011310:	3b01      	subs	r3, #1
 8011312:	9300      	str	r3, [sp, #0]
 8011314:	e7da      	b.n	80112cc <_dtoa_r+0xa4>
 8011316:	aa10      	add	r2, sp, #64	; 0x40
 8011318:	a911      	add	r1, sp, #68	; 0x44
 801131a:	4620      	mov	r0, r4
 801131c:	eeb0 0a48 	vmov.f32	s0, s16
 8011320:	eef0 0a68 	vmov.f32	s1, s17
 8011324:	f001 f99a 	bl	801265c <__d2b>
 8011328:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801132c:	4682      	mov	sl, r0
 801132e:	2d00      	cmp	r5, #0
 8011330:	d07f      	beq.n	8011432 <_dtoa_r+0x20a>
 8011332:	ee18 3a90 	vmov	r3, s17
 8011336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801133a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801133e:	ec51 0b18 	vmov	r0, r1, d8
 8011342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801134a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801134e:	4619      	mov	r1, r3
 8011350:	2200      	movs	r2, #0
 8011352:	4b75      	ldr	r3, [pc, #468]	; (8011528 <_dtoa_r+0x300>)
 8011354:	f7ee ffc0 	bl	80002d8 <__aeabi_dsub>
 8011358:	a367      	add	r3, pc, #412	; (adr r3, 80114f8 <_dtoa_r+0x2d0>)
 801135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135e:	f7ef f973 	bl	8000648 <__aeabi_dmul>
 8011362:	a367      	add	r3, pc, #412	; (adr r3, 8011500 <_dtoa_r+0x2d8>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	f7ee ffb8 	bl	80002dc <__adddf3>
 801136c:	4606      	mov	r6, r0
 801136e:	4628      	mov	r0, r5
 8011370:	460f      	mov	r7, r1
 8011372:	f7ef f8ff 	bl	8000574 <__aeabi_i2d>
 8011376:	a364      	add	r3, pc, #400	; (adr r3, 8011508 <_dtoa_r+0x2e0>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	f7ef f964 	bl	8000648 <__aeabi_dmul>
 8011380:	4602      	mov	r2, r0
 8011382:	460b      	mov	r3, r1
 8011384:	4630      	mov	r0, r6
 8011386:	4639      	mov	r1, r7
 8011388:	f7ee ffa8 	bl	80002dc <__adddf3>
 801138c:	4606      	mov	r6, r0
 801138e:	460f      	mov	r7, r1
 8011390:	f7ef fc0a 	bl	8000ba8 <__aeabi_d2iz>
 8011394:	2200      	movs	r2, #0
 8011396:	4683      	mov	fp, r0
 8011398:	2300      	movs	r3, #0
 801139a:	4630      	mov	r0, r6
 801139c:	4639      	mov	r1, r7
 801139e:	f7ef fbc5 	bl	8000b2c <__aeabi_dcmplt>
 80113a2:	b148      	cbz	r0, 80113b8 <_dtoa_r+0x190>
 80113a4:	4658      	mov	r0, fp
 80113a6:	f7ef f8e5 	bl	8000574 <__aeabi_i2d>
 80113aa:	4632      	mov	r2, r6
 80113ac:	463b      	mov	r3, r7
 80113ae:	f7ef fbb3 	bl	8000b18 <__aeabi_dcmpeq>
 80113b2:	b908      	cbnz	r0, 80113b8 <_dtoa_r+0x190>
 80113b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80113b8:	f1bb 0f16 	cmp.w	fp, #22
 80113bc:	d857      	bhi.n	801146e <_dtoa_r+0x246>
 80113be:	4b5b      	ldr	r3, [pc, #364]	; (801152c <_dtoa_r+0x304>)
 80113c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80113c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c8:	ec51 0b18 	vmov	r0, r1, d8
 80113cc:	f7ef fbae 	bl	8000b2c <__aeabi_dcmplt>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d04e      	beq.n	8011472 <_dtoa_r+0x24a>
 80113d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80113d8:	2300      	movs	r3, #0
 80113da:	930c      	str	r3, [sp, #48]	; 0x30
 80113dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113de:	1b5b      	subs	r3, r3, r5
 80113e0:	1e5a      	subs	r2, r3, #1
 80113e2:	bf45      	ittet	mi
 80113e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80113e8:	9305      	strmi	r3, [sp, #20]
 80113ea:	2300      	movpl	r3, #0
 80113ec:	2300      	movmi	r3, #0
 80113ee:	9206      	str	r2, [sp, #24]
 80113f0:	bf54      	ite	pl
 80113f2:	9305      	strpl	r3, [sp, #20]
 80113f4:	9306      	strmi	r3, [sp, #24]
 80113f6:	f1bb 0f00 	cmp.w	fp, #0
 80113fa:	db3c      	blt.n	8011476 <_dtoa_r+0x24e>
 80113fc:	9b06      	ldr	r3, [sp, #24]
 80113fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011402:	445b      	add	r3, fp
 8011404:	9306      	str	r3, [sp, #24]
 8011406:	2300      	movs	r3, #0
 8011408:	9308      	str	r3, [sp, #32]
 801140a:	9b07      	ldr	r3, [sp, #28]
 801140c:	2b09      	cmp	r3, #9
 801140e:	d868      	bhi.n	80114e2 <_dtoa_r+0x2ba>
 8011410:	2b05      	cmp	r3, #5
 8011412:	bfc4      	itt	gt
 8011414:	3b04      	subgt	r3, #4
 8011416:	9307      	strgt	r3, [sp, #28]
 8011418:	9b07      	ldr	r3, [sp, #28]
 801141a:	f1a3 0302 	sub.w	r3, r3, #2
 801141e:	bfcc      	ite	gt
 8011420:	2500      	movgt	r5, #0
 8011422:	2501      	movle	r5, #1
 8011424:	2b03      	cmp	r3, #3
 8011426:	f200 8085 	bhi.w	8011534 <_dtoa_r+0x30c>
 801142a:	e8df f003 	tbb	[pc, r3]
 801142e:	3b2e      	.short	0x3b2e
 8011430:	5839      	.short	0x5839
 8011432:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011436:	441d      	add	r5, r3
 8011438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801143c:	2b20      	cmp	r3, #32
 801143e:	bfc1      	itttt	gt
 8011440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011444:	fa08 f803 	lslgt.w	r8, r8, r3
 8011448:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801144c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011450:	bfd6      	itet	le
 8011452:	f1c3 0320 	rsble	r3, r3, #32
 8011456:	ea48 0003 	orrgt.w	r0, r8, r3
 801145a:	fa06 f003 	lslle.w	r0, r6, r3
 801145e:	f7ef f879 	bl	8000554 <__aeabi_ui2d>
 8011462:	2201      	movs	r2, #1
 8011464:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011468:	3d01      	subs	r5, #1
 801146a:	920e      	str	r2, [sp, #56]	; 0x38
 801146c:	e76f      	b.n	801134e <_dtoa_r+0x126>
 801146e:	2301      	movs	r3, #1
 8011470:	e7b3      	b.n	80113da <_dtoa_r+0x1b2>
 8011472:	900c      	str	r0, [sp, #48]	; 0x30
 8011474:	e7b2      	b.n	80113dc <_dtoa_r+0x1b4>
 8011476:	9b05      	ldr	r3, [sp, #20]
 8011478:	eba3 030b 	sub.w	r3, r3, fp
 801147c:	9305      	str	r3, [sp, #20]
 801147e:	f1cb 0300 	rsb	r3, fp, #0
 8011482:	9308      	str	r3, [sp, #32]
 8011484:	2300      	movs	r3, #0
 8011486:	930b      	str	r3, [sp, #44]	; 0x2c
 8011488:	e7bf      	b.n	801140a <_dtoa_r+0x1e2>
 801148a:	2300      	movs	r3, #0
 801148c:	9309      	str	r3, [sp, #36]	; 0x24
 801148e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011490:	2b00      	cmp	r3, #0
 8011492:	dc52      	bgt.n	801153a <_dtoa_r+0x312>
 8011494:	2301      	movs	r3, #1
 8011496:	9301      	str	r3, [sp, #4]
 8011498:	9304      	str	r3, [sp, #16]
 801149a:	461a      	mov	r2, r3
 801149c:	920a      	str	r2, [sp, #40]	; 0x28
 801149e:	e00b      	b.n	80114b8 <_dtoa_r+0x290>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e7f3      	b.n	801148c <_dtoa_r+0x264>
 80114a4:	2300      	movs	r3, #0
 80114a6:	9309      	str	r3, [sp, #36]	; 0x24
 80114a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114aa:	445b      	add	r3, fp
 80114ac:	9301      	str	r3, [sp, #4]
 80114ae:	3301      	adds	r3, #1
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	9304      	str	r3, [sp, #16]
 80114b4:	bfb8      	it	lt
 80114b6:	2301      	movlt	r3, #1
 80114b8:	69e0      	ldr	r0, [r4, #28]
 80114ba:	2100      	movs	r1, #0
 80114bc:	2204      	movs	r2, #4
 80114be:	f102 0614 	add.w	r6, r2, #20
 80114c2:	429e      	cmp	r6, r3
 80114c4:	d93d      	bls.n	8011542 <_dtoa_r+0x31a>
 80114c6:	6041      	str	r1, [r0, #4]
 80114c8:	4620      	mov	r0, r4
 80114ca:	f000 fceb 	bl	8011ea4 <_Balloc>
 80114ce:	9000      	str	r0, [sp, #0]
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d139      	bne.n	8011548 <_dtoa_r+0x320>
 80114d4:	4b16      	ldr	r3, [pc, #88]	; (8011530 <_dtoa_r+0x308>)
 80114d6:	4602      	mov	r2, r0
 80114d8:	f240 11af 	movw	r1, #431	; 0x1af
 80114dc:	e6bd      	b.n	801125a <_dtoa_r+0x32>
 80114de:	2301      	movs	r3, #1
 80114e0:	e7e1      	b.n	80114a6 <_dtoa_r+0x27e>
 80114e2:	2501      	movs	r5, #1
 80114e4:	2300      	movs	r3, #0
 80114e6:	9307      	str	r3, [sp, #28]
 80114e8:	9509      	str	r5, [sp, #36]	; 0x24
 80114ea:	f04f 33ff 	mov.w	r3, #4294967295
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	9304      	str	r3, [sp, #16]
 80114f2:	2200      	movs	r2, #0
 80114f4:	2312      	movs	r3, #18
 80114f6:	e7d1      	b.n	801149c <_dtoa_r+0x274>
 80114f8:	636f4361 	.word	0x636f4361
 80114fc:	3fd287a7 	.word	0x3fd287a7
 8011500:	8b60c8b3 	.word	0x8b60c8b3
 8011504:	3fc68a28 	.word	0x3fc68a28
 8011508:	509f79fb 	.word	0x509f79fb
 801150c:	3fd34413 	.word	0x3fd34413
 8011510:	0801579a 	.word	0x0801579a
 8011514:	080157b1 	.word	0x080157b1
 8011518:	7ff00000 	.word	0x7ff00000
 801151c:	08015796 	.word	0x08015796
 8011520:	0801578d 	.word	0x0801578d
 8011524:	08015765 	.word	0x08015765
 8011528:	3ff80000 	.word	0x3ff80000
 801152c:	080158a0 	.word	0x080158a0
 8011530:	08015809 	.word	0x08015809
 8011534:	2301      	movs	r3, #1
 8011536:	9309      	str	r3, [sp, #36]	; 0x24
 8011538:	e7d7      	b.n	80114ea <_dtoa_r+0x2c2>
 801153a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801153c:	9301      	str	r3, [sp, #4]
 801153e:	9304      	str	r3, [sp, #16]
 8011540:	e7ba      	b.n	80114b8 <_dtoa_r+0x290>
 8011542:	3101      	adds	r1, #1
 8011544:	0052      	lsls	r2, r2, #1
 8011546:	e7ba      	b.n	80114be <_dtoa_r+0x296>
 8011548:	69e3      	ldr	r3, [r4, #28]
 801154a:	9a00      	ldr	r2, [sp, #0]
 801154c:	601a      	str	r2, [r3, #0]
 801154e:	9b04      	ldr	r3, [sp, #16]
 8011550:	2b0e      	cmp	r3, #14
 8011552:	f200 80a8 	bhi.w	80116a6 <_dtoa_r+0x47e>
 8011556:	2d00      	cmp	r5, #0
 8011558:	f000 80a5 	beq.w	80116a6 <_dtoa_r+0x47e>
 801155c:	f1bb 0f00 	cmp.w	fp, #0
 8011560:	dd38      	ble.n	80115d4 <_dtoa_r+0x3ac>
 8011562:	4bc0      	ldr	r3, [pc, #768]	; (8011864 <_dtoa_r+0x63c>)
 8011564:	f00b 020f 	and.w	r2, fp, #15
 8011568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801156c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011570:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011574:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011578:	d019      	beq.n	80115ae <_dtoa_r+0x386>
 801157a:	4bbb      	ldr	r3, [pc, #748]	; (8011868 <_dtoa_r+0x640>)
 801157c:	ec51 0b18 	vmov	r0, r1, d8
 8011580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011584:	f7ef f98a 	bl	800089c <__aeabi_ddiv>
 8011588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801158c:	f008 080f 	and.w	r8, r8, #15
 8011590:	2503      	movs	r5, #3
 8011592:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011868 <_dtoa_r+0x640>
 8011596:	f1b8 0f00 	cmp.w	r8, #0
 801159a:	d10a      	bne.n	80115b2 <_dtoa_r+0x38a>
 801159c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115a0:	4632      	mov	r2, r6
 80115a2:	463b      	mov	r3, r7
 80115a4:	f7ef f97a 	bl	800089c <__aeabi_ddiv>
 80115a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115ac:	e02b      	b.n	8011606 <_dtoa_r+0x3de>
 80115ae:	2502      	movs	r5, #2
 80115b0:	e7ef      	b.n	8011592 <_dtoa_r+0x36a>
 80115b2:	f018 0f01 	tst.w	r8, #1
 80115b6:	d008      	beq.n	80115ca <_dtoa_r+0x3a2>
 80115b8:	4630      	mov	r0, r6
 80115ba:	4639      	mov	r1, r7
 80115bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80115c0:	f7ef f842 	bl	8000648 <__aeabi_dmul>
 80115c4:	3501      	adds	r5, #1
 80115c6:	4606      	mov	r6, r0
 80115c8:	460f      	mov	r7, r1
 80115ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80115ce:	f109 0908 	add.w	r9, r9, #8
 80115d2:	e7e0      	b.n	8011596 <_dtoa_r+0x36e>
 80115d4:	f000 809f 	beq.w	8011716 <_dtoa_r+0x4ee>
 80115d8:	f1cb 0600 	rsb	r6, fp, #0
 80115dc:	4ba1      	ldr	r3, [pc, #644]	; (8011864 <_dtoa_r+0x63c>)
 80115de:	4fa2      	ldr	r7, [pc, #648]	; (8011868 <_dtoa_r+0x640>)
 80115e0:	f006 020f 	and.w	r2, r6, #15
 80115e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ec:	ec51 0b18 	vmov	r0, r1, d8
 80115f0:	f7ef f82a 	bl	8000648 <__aeabi_dmul>
 80115f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115f8:	1136      	asrs	r6, r6, #4
 80115fa:	2300      	movs	r3, #0
 80115fc:	2502      	movs	r5, #2
 80115fe:	2e00      	cmp	r6, #0
 8011600:	d17e      	bne.n	8011700 <_dtoa_r+0x4d8>
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1d0      	bne.n	80115a8 <_dtoa_r+0x380>
 8011606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011608:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801160c:	2b00      	cmp	r3, #0
 801160e:	f000 8084 	beq.w	801171a <_dtoa_r+0x4f2>
 8011612:	4b96      	ldr	r3, [pc, #600]	; (801186c <_dtoa_r+0x644>)
 8011614:	2200      	movs	r2, #0
 8011616:	4640      	mov	r0, r8
 8011618:	4649      	mov	r1, r9
 801161a:	f7ef fa87 	bl	8000b2c <__aeabi_dcmplt>
 801161e:	2800      	cmp	r0, #0
 8011620:	d07b      	beq.n	801171a <_dtoa_r+0x4f2>
 8011622:	9b04      	ldr	r3, [sp, #16]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d078      	beq.n	801171a <_dtoa_r+0x4f2>
 8011628:	9b01      	ldr	r3, [sp, #4]
 801162a:	2b00      	cmp	r3, #0
 801162c:	dd39      	ble.n	80116a2 <_dtoa_r+0x47a>
 801162e:	4b90      	ldr	r3, [pc, #576]	; (8011870 <_dtoa_r+0x648>)
 8011630:	2200      	movs	r2, #0
 8011632:	4640      	mov	r0, r8
 8011634:	4649      	mov	r1, r9
 8011636:	f7ef f807 	bl	8000648 <__aeabi_dmul>
 801163a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801163e:	9e01      	ldr	r6, [sp, #4]
 8011640:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011644:	3501      	adds	r5, #1
 8011646:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801164a:	4628      	mov	r0, r5
 801164c:	f7ee ff92 	bl	8000574 <__aeabi_i2d>
 8011650:	4642      	mov	r2, r8
 8011652:	464b      	mov	r3, r9
 8011654:	f7ee fff8 	bl	8000648 <__aeabi_dmul>
 8011658:	4b86      	ldr	r3, [pc, #536]	; (8011874 <_dtoa_r+0x64c>)
 801165a:	2200      	movs	r2, #0
 801165c:	f7ee fe3e 	bl	80002dc <__adddf3>
 8011660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011668:	9303      	str	r3, [sp, #12]
 801166a:	2e00      	cmp	r6, #0
 801166c:	d158      	bne.n	8011720 <_dtoa_r+0x4f8>
 801166e:	4b82      	ldr	r3, [pc, #520]	; (8011878 <_dtoa_r+0x650>)
 8011670:	2200      	movs	r2, #0
 8011672:	4640      	mov	r0, r8
 8011674:	4649      	mov	r1, r9
 8011676:	f7ee fe2f 	bl	80002d8 <__aeabi_dsub>
 801167a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801167e:	4680      	mov	r8, r0
 8011680:	4689      	mov	r9, r1
 8011682:	f7ef fa71 	bl	8000b68 <__aeabi_dcmpgt>
 8011686:	2800      	cmp	r0, #0
 8011688:	f040 8296 	bne.w	8011bb8 <_dtoa_r+0x990>
 801168c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011690:	4640      	mov	r0, r8
 8011692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011696:	4649      	mov	r1, r9
 8011698:	f7ef fa48 	bl	8000b2c <__aeabi_dcmplt>
 801169c:	2800      	cmp	r0, #0
 801169e:	f040 8289 	bne.w	8011bb4 <_dtoa_r+0x98c>
 80116a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80116a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f2c0 814e 	blt.w	801194a <_dtoa_r+0x722>
 80116ae:	f1bb 0f0e 	cmp.w	fp, #14
 80116b2:	f300 814a 	bgt.w	801194a <_dtoa_r+0x722>
 80116b6:	4b6b      	ldr	r3, [pc, #428]	; (8011864 <_dtoa_r+0x63c>)
 80116b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80116bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f280 80dc 	bge.w	8011880 <_dtoa_r+0x658>
 80116c8:	9b04      	ldr	r3, [sp, #16]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f300 80d8 	bgt.w	8011880 <_dtoa_r+0x658>
 80116d0:	f040 826f 	bne.w	8011bb2 <_dtoa_r+0x98a>
 80116d4:	4b68      	ldr	r3, [pc, #416]	; (8011878 <_dtoa_r+0x650>)
 80116d6:	2200      	movs	r2, #0
 80116d8:	4640      	mov	r0, r8
 80116da:	4649      	mov	r1, r9
 80116dc:	f7ee ffb4 	bl	8000648 <__aeabi_dmul>
 80116e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116e4:	f7ef fa36 	bl	8000b54 <__aeabi_dcmpge>
 80116e8:	9e04      	ldr	r6, [sp, #16]
 80116ea:	4637      	mov	r7, r6
 80116ec:	2800      	cmp	r0, #0
 80116ee:	f040 8245 	bne.w	8011b7c <_dtoa_r+0x954>
 80116f2:	9d00      	ldr	r5, [sp, #0]
 80116f4:	2331      	movs	r3, #49	; 0x31
 80116f6:	f805 3b01 	strb.w	r3, [r5], #1
 80116fa:	f10b 0b01 	add.w	fp, fp, #1
 80116fe:	e241      	b.n	8011b84 <_dtoa_r+0x95c>
 8011700:	07f2      	lsls	r2, r6, #31
 8011702:	d505      	bpl.n	8011710 <_dtoa_r+0x4e8>
 8011704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011708:	f7ee ff9e 	bl	8000648 <__aeabi_dmul>
 801170c:	3501      	adds	r5, #1
 801170e:	2301      	movs	r3, #1
 8011710:	1076      	asrs	r6, r6, #1
 8011712:	3708      	adds	r7, #8
 8011714:	e773      	b.n	80115fe <_dtoa_r+0x3d6>
 8011716:	2502      	movs	r5, #2
 8011718:	e775      	b.n	8011606 <_dtoa_r+0x3de>
 801171a:	9e04      	ldr	r6, [sp, #16]
 801171c:	465f      	mov	r7, fp
 801171e:	e792      	b.n	8011646 <_dtoa_r+0x41e>
 8011720:	9900      	ldr	r1, [sp, #0]
 8011722:	4b50      	ldr	r3, [pc, #320]	; (8011864 <_dtoa_r+0x63c>)
 8011724:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011728:	4431      	add	r1, r6
 801172a:	9102      	str	r1, [sp, #8]
 801172c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801172e:	eeb0 9a47 	vmov.f32	s18, s14
 8011732:	eef0 9a67 	vmov.f32	s19, s15
 8011736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801173a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801173e:	2900      	cmp	r1, #0
 8011740:	d044      	beq.n	80117cc <_dtoa_r+0x5a4>
 8011742:	494e      	ldr	r1, [pc, #312]	; (801187c <_dtoa_r+0x654>)
 8011744:	2000      	movs	r0, #0
 8011746:	f7ef f8a9 	bl	800089c <__aeabi_ddiv>
 801174a:	ec53 2b19 	vmov	r2, r3, d9
 801174e:	f7ee fdc3 	bl	80002d8 <__aeabi_dsub>
 8011752:	9d00      	ldr	r5, [sp, #0]
 8011754:	ec41 0b19 	vmov	d9, r0, r1
 8011758:	4649      	mov	r1, r9
 801175a:	4640      	mov	r0, r8
 801175c:	f7ef fa24 	bl	8000ba8 <__aeabi_d2iz>
 8011760:	4606      	mov	r6, r0
 8011762:	f7ee ff07 	bl	8000574 <__aeabi_i2d>
 8011766:	4602      	mov	r2, r0
 8011768:	460b      	mov	r3, r1
 801176a:	4640      	mov	r0, r8
 801176c:	4649      	mov	r1, r9
 801176e:	f7ee fdb3 	bl	80002d8 <__aeabi_dsub>
 8011772:	3630      	adds	r6, #48	; 0x30
 8011774:	f805 6b01 	strb.w	r6, [r5], #1
 8011778:	ec53 2b19 	vmov	r2, r3, d9
 801177c:	4680      	mov	r8, r0
 801177e:	4689      	mov	r9, r1
 8011780:	f7ef f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8011784:	2800      	cmp	r0, #0
 8011786:	d164      	bne.n	8011852 <_dtoa_r+0x62a>
 8011788:	4642      	mov	r2, r8
 801178a:	464b      	mov	r3, r9
 801178c:	4937      	ldr	r1, [pc, #220]	; (801186c <_dtoa_r+0x644>)
 801178e:	2000      	movs	r0, #0
 8011790:	f7ee fda2 	bl	80002d8 <__aeabi_dsub>
 8011794:	ec53 2b19 	vmov	r2, r3, d9
 8011798:	f7ef f9c8 	bl	8000b2c <__aeabi_dcmplt>
 801179c:	2800      	cmp	r0, #0
 801179e:	f040 80b6 	bne.w	801190e <_dtoa_r+0x6e6>
 80117a2:	9b02      	ldr	r3, [sp, #8]
 80117a4:	429d      	cmp	r5, r3
 80117a6:	f43f af7c 	beq.w	80116a2 <_dtoa_r+0x47a>
 80117aa:	4b31      	ldr	r3, [pc, #196]	; (8011870 <_dtoa_r+0x648>)
 80117ac:	ec51 0b19 	vmov	r0, r1, d9
 80117b0:	2200      	movs	r2, #0
 80117b2:	f7ee ff49 	bl	8000648 <__aeabi_dmul>
 80117b6:	4b2e      	ldr	r3, [pc, #184]	; (8011870 <_dtoa_r+0x648>)
 80117b8:	ec41 0b19 	vmov	d9, r0, r1
 80117bc:	2200      	movs	r2, #0
 80117be:	4640      	mov	r0, r8
 80117c0:	4649      	mov	r1, r9
 80117c2:	f7ee ff41 	bl	8000648 <__aeabi_dmul>
 80117c6:	4680      	mov	r8, r0
 80117c8:	4689      	mov	r9, r1
 80117ca:	e7c5      	b.n	8011758 <_dtoa_r+0x530>
 80117cc:	ec51 0b17 	vmov	r0, r1, d7
 80117d0:	f7ee ff3a 	bl	8000648 <__aeabi_dmul>
 80117d4:	9b02      	ldr	r3, [sp, #8]
 80117d6:	9d00      	ldr	r5, [sp, #0]
 80117d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80117da:	ec41 0b19 	vmov	d9, r0, r1
 80117de:	4649      	mov	r1, r9
 80117e0:	4640      	mov	r0, r8
 80117e2:	f7ef f9e1 	bl	8000ba8 <__aeabi_d2iz>
 80117e6:	4606      	mov	r6, r0
 80117e8:	f7ee fec4 	bl	8000574 <__aeabi_i2d>
 80117ec:	3630      	adds	r6, #48	; 0x30
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	4640      	mov	r0, r8
 80117f4:	4649      	mov	r1, r9
 80117f6:	f7ee fd6f 	bl	80002d8 <__aeabi_dsub>
 80117fa:	f805 6b01 	strb.w	r6, [r5], #1
 80117fe:	9b02      	ldr	r3, [sp, #8]
 8011800:	429d      	cmp	r5, r3
 8011802:	4680      	mov	r8, r0
 8011804:	4689      	mov	r9, r1
 8011806:	f04f 0200 	mov.w	r2, #0
 801180a:	d124      	bne.n	8011856 <_dtoa_r+0x62e>
 801180c:	4b1b      	ldr	r3, [pc, #108]	; (801187c <_dtoa_r+0x654>)
 801180e:	ec51 0b19 	vmov	r0, r1, d9
 8011812:	f7ee fd63 	bl	80002dc <__adddf3>
 8011816:	4602      	mov	r2, r0
 8011818:	460b      	mov	r3, r1
 801181a:	4640      	mov	r0, r8
 801181c:	4649      	mov	r1, r9
 801181e:	f7ef f9a3 	bl	8000b68 <__aeabi_dcmpgt>
 8011822:	2800      	cmp	r0, #0
 8011824:	d173      	bne.n	801190e <_dtoa_r+0x6e6>
 8011826:	ec53 2b19 	vmov	r2, r3, d9
 801182a:	4914      	ldr	r1, [pc, #80]	; (801187c <_dtoa_r+0x654>)
 801182c:	2000      	movs	r0, #0
 801182e:	f7ee fd53 	bl	80002d8 <__aeabi_dsub>
 8011832:	4602      	mov	r2, r0
 8011834:	460b      	mov	r3, r1
 8011836:	4640      	mov	r0, r8
 8011838:	4649      	mov	r1, r9
 801183a:	f7ef f977 	bl	8000b2c <__aeabi_dcmplt>
 801183e:	2800      	cmp	r0, #0
 8011840:	f43f af2f 	beq.w	80116a2 <_dtoa_r+0x47a>
 8011844:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011846:	1e6b      	subs	r3, r5, #1
 8011848:	930f      	str	r3, [sp, #60]	; 0x3c
 801184a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801184e:	2b30      	cmp	r3, #48	; 0x30
 8011850:	d0f8      	beq.n	8011844 <_dtoa_r+0x61c>
 8011852:	46bb      	mov	fp, r7
 8011854:	e04a      	b.n	80118ec <_dtoa_r+0x6c4>
 8011856:	4b06      	ldr	r3, [pc, #24]	; (8011870 <_dtoa_r+0x648>)
 8011858:	f7ee fef6 	bl	8000648 <__aeabi_dmul>
 801185c:	4680      	mov	r8, r0
 801185e:	4689      	mov	r9, r1
 8011860:	e7bd      	b.n	80117de <_dtoa_r+0x5b6>
 8011862:	bf00      	nop
 8011864:	080158a0 	.word	0x080158a0
 8011868:	08015878 	.word	0x08015878
 801186c:	3ff00000 	.word	0x3ff00000
 8011870:	40240000 	.word	0x40240000
 8011874:	401c0000 	.word	0x401c0000
 8011878:	40140000 	.word	0x40140000
 801187c:	3fe00000 	.word	0x3fe00000
 8011880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011884:	9d00      	ldr	r5, [sp, #0]
 8011886:	4642      	mov	r2, r8
 8011888:	464b      	mov	r3, r9
 801188a:	4630      	mov	r0, r6
 801188c:	4639      	mov	r1, r7
 801188e:	f7ef f805 	bl	800089c <__aeabi_ddiv>
 8011892:	f7ef f989 	bl	8000ba8 <__aeabi_d2iz>
 8011896:	9001      	str	r0, [sp, #4]
 8011898:	f7ee fe6c 	bl	8000574 <__aeabi_i2d>
 801189c:	4642      	mov	r2, r8
 801189e:	464b      	mov	r3, r9
 80118a0:	f7ee fed2 	bl	8000648 <__aeabi_dmul>
 80118a4:	4602      	mov	r2, r0
 80118a6:	460b      	mov	r3, r1
 80118a8:	4630      	mov	r0, r6
 80118aa:	4639      	mov	r1, r7
 80118ac:	f7ee fd14 	bl	80002d8 <__aeabi_dsub>
 80118b0:	9e01      	ldr	r6, [sp, #4]
 80118b2:	9f04      	ldr	r7, [sp, #16]
 80118b4:	3630      	adds	r6, #48	; 0x30
 80118b6:	f805 6b01 	strb.w	r6, [r5], #1
 80118ba:	9e00      	ldr	r6, [sp, #0]
 80118bc:	1bae      	subs	r6, r5, r6
 80118be:	42b7      	cmp	r7, r6
 80118c0:	4602      	mov	r2, r0
 80118c2:	460b      	mov	r3, r1
 80118c4:	d134      	bne.n	8011930 <_dtoa_r+0x708>
 80118c6:	f7ee fd09 	bl	80002dc <__adddf3>
 80118ca:	4642      	mov	r2, r8
 80118cc:	464b      	mov	r3, r9
 80118ce:	4606      	mov	r6, r0
 80118d0:	460f      	mov	r7, r1
 80118d2:	f7ef f949 	bl	8000b68 <__aeabi_dcmpgt>
 80118d6:	b9c8      	cbnz	r0, 801190c <_dtoa_r+0x6e4>
 80118d8:	4642      	mov	r2, r8
 80118da:	464b      	mov	r3, r9
 80118dc:	4630      	mov	r0, r6
 80118de:	4639      	mov	r1, r7
 80118e0:	f7ef f91a 	bl	8000b18 <__aeabi_dcmpeq>
 80118e4:	b110      	cbz	r0, 80118ec <_dtoa_r+0x6c4>
 80118e6:	9b01      	ldr	r3, [sp, #4]
 80118e8:	07db      	lsls	r3, r3, #31
 80118ea:	d40f      	bmi.n	801190c <_dtoa_r+0x6e4>
 80118ec:	4651      	mov	r1, sl
 80118ee:	4620      	mov	r0, r4
 80118f0:	f000 fb18 	bl	8011f24 <_Bfree>
 80118f4:	2300      	movs	r3, #0
 80118f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118f8:	702b      	strb	r3, [r5, #0]
 80118fa:	f10b 0301 	add.w	r3, fp, #1
 80118fe:	6013      	str	r3, [r2, #0]
 8011900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011902:	2b00      	cmp	r3, #0
 8011904:	f43f ace2 	beq.w	80112cc <_dtoa_r+0xa4>
 8011908:	601d      	str	r5, [r3, #0]
 801190a:	e4df      	b.n	80112cc <_dtoa_r+0xa4>
 801190c:	465f      	mov	r7, fp
 801190e:	462b      	mov	r3, r5
 8011910:	461d      	mov	r5, r3
 8011912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011916:	2a39      	cmp	r2, #57	; 0x39
 8011918:	d106      	bne.n	8011928 <_dtoa_r+0x700>
 801191a:	9a00      	ldr	r2, [sp, #0]
 801191c:	429a      	cmp	r2, r3
 801191e:	d1f7      	bne.n	8011910 <_dtoa_r+0x6e8>
 8011920:	9900      	ldr	r1, [sp, #0]
 8011922:	2230      	movs	r2, #48	; 0x30
 8011924:	3701      	adds	r7, #1
 8011926:	700a      	strb	r2, [r1, #0]
 8011928:	781a      	ldrb	r2, [r3, #0]
 801192a:	3201      	adds	r2, #1
 801192c:	701a      	strb	r2, [r3, #0]
 801192e:	e790      	b.n	8011852 <_dtoa_r+0x62a>
 8011930:	4ba3      	ldr	r3, [pc, #652]	; (8011bc0 <_dtoa_r+0x998>)
 8011932:	2200      	movs	r2, #0
 8011934:	f7ee fe88 	bl	8000648 <__aeabi_dmul>
 8011938:	2200      	movs	r2, #0
 801193a:	2300      	movs	r3, #0
 801193c:	4606      	mov	r6, r0
 801193e:	460f      	mov	r7, r1
 8011940:	f7ef f8ea 	bl	8000b18 <__aeabi_dcmpeq>
 8011944:	2800      	cmp	r0, #0
 8011946:	d09e      	beq.n	8011886 <_dtoa_r+0x65e>
 8011948:	e7d0      	b.n	80118ec <_dtoa_r+0x6c4>
 801194a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801194c:	2a00      	cmp	r2, #0
 801194e:	f000 80ca 	beq.w	8011ae6 <_dtoa_r+0x8be>
 8011952:	9a07      	ldr	r2, [sp, #28]
 8011954:	2a01      	cmp	r2, #1
 8011956:	f300 80ad 	bgt.w	8011ab4 <_dtoa_r+0x88c>
 801195a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801195c:	2a00      	cmp	r2, #0
 801195e:	f000 80a5 	beq.w	8011aac <_dtoa_r+0x884>
 8011962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011966:	9e08      	ldr	r6, [sp, #32]
 8011968:	9d05      	ldr	r5, [sp, #20]
 801196a:	9a05      	ldr	r2, [sp, #20]
 801196c:	441a      	add	r2, r3
 801196e:	9205      	str	r2, [sp, #20]
 8011970:	9a06      	ldr	r2, [sp, #24]
 8011972:	2101      	movs	r1, #1
 8011974:	441a      	add	r2, r3
 8011976:	4620      	mov	r0, r4
 8011978:	9206      	str	r2, [sp, #24]
 801197a:	f000 fbd3 	bl	8012124 <__i2b>
 801197e:	4607      	mov	r7, r0
 8011980:	b165      	cbz	r5, 801199c <_dtoa_r+0x774>
 8011982:	9b06      	ldr	r3, [sp, #24]
 8011984:	2b00      	cmp	r3, #0
 8011986:	dd09      	ble.n	801199c <_dtoa_r+0x774>
 8011988:	42ab      	cmp	r3, r5
 801198a:	9a05      	ldr	r2, [sp, #20]
 801198c:	bfa8      	it	ge
 801198e:	462b      	movge	r3, r5
 8011990:	1ad2      	subs	r2, r2, r3
 8011992:	9205      	str	r2, [sp, #20]
 8011994:	9a06      	ldr	r2, [sp, #24]
 8011996:	1aed      	subs	r5, r5, r3
 8011998:	1ad3      	subs	r3, r2, r3
 801199a:	9306      	str	r3, [sp, #24]
 801199c:	9b08      	ldr	r3, [sp, #32]
 801199e:	b1f3      	cbz	r3, 80119de <_dtoa_r+0x7b6>
 80119a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f000 80a3 	beq.w	8011aee <_dtoa_r+0x8c6>
 80119a8:	2e00      	cmp	r6, #0
 80119aa:	dd10      	ble.n	80119ce <_dtoa_r+0x7a6>
 80119ac:	4639      	mov	r1, r7
 80119ae:	4632      	mov	r2, r6
 80119b0:	4620      	mov	r0, r4
 80119b2:	f000 fc77 	bl	80122a4 <__pow5mult>
 80119b6:	4652      	mov	r2, sl
 80119b8:	4601      	mov	r1, r0
 80119ba:	4607      	mov	r7, r0
 80119bc:	4620      	mov	r0, r4
 80119be:	f000 fbc7 	bl	8012150 <__multiply>
 80119c2:	4651      	mov	r1, sl
 80119c4:	4680      	mov	r8, r0
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 faac 	bl	8011f24 <_Bfree>
 80119cc:	46c2      	mov	sl, r8
 80119ce:	9b08      	ldr	r3, [sp, #32]
 80119d0:	1b9a      	subs	r2, r3, r6
 80119d2:	d004      	beq.n	80119de <_dtoa_r+0x7b6>
 80119d4:	4651      	mov	r1, sl
 80119d6:	4620      	mov	r0, r4
 80119d8:	f000 fc64 	bl	80122a4 <__pow5mult>
 80119dc:	4682      	mov	sl, r0
 80119de:	2101      	movs	r1, #1
 80119e0:	4620      	mov	r0, r4
 80119e2:	f000 fb9f 	bl	8012124 <__i2b>
 80119e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	4606      	mov	r6, r0
 80119ec:	f340 8081 	ble.w	8011af2 <_dtoa_r+0x8ca>
 80119f0:	461a      	mov	r2, r3
 80119f2:	4601      	mov	r1, r0
 80119f4:	4620      	mov	r0, r4
 80119f6:	f000 fc55 	bl	80122a4 <__pow5mult>
 80119fa:	9b07      	ldr	r3, [sp, #28]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	4606      	mov	r6, r0
 8011a00:	dd7a      	ble.n	8011af8 <_dtoa_r+0x8d0>
 8011a02:	f04f 0800 	mov.w	r8, #0
 8011a06:	6933      	ldr	r3, [r6, #16]
 8011a08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011a0c:	6918      	ldr	r0, [r3, #16]
 8011a0e:	f000 fb3b 	bl	8012088 <__hi0bits>
 8011a12:	f1c0 0020 	rsb	r0, r0, #32
 8011a16:	9b06      	ldr	r3, [sp, #24]
 8011a18:	4418      	add	r0, r3
 8011a1a:	f010 001f 	ands.w	r0, r0, #31
 8011a1e:	f000 8094 	beq.w	8011b4a <_dtoa_r+0x922>
 8011a22:	f1c0 0320 	rsb	r3, r0, #32
 8011a26:	2b04      	cmp	r3, #4
 8011a28:	f340 8085 	ble.w	8011b36 <_dtoa_r+0x90e>
 8011a2c:	9b05      	ldr	r3, [sp, #20]
 8011a2e:	f1c0 001c 	rsb	r0, r0, #28
 8011a32:	4403      	add	r3, r0
 8011a34:	9305      	str	r3, [sp, #20]
 8011a36:	9b06      	ldr	r3, [sp, #24]
 8011a38:	4403      	add	r3, r0
 8011a3a:	4405      	add	r5, r0
 8011a3c:	9306      	str	r3, [sp, #24]
 8011a3e:	9b05      	ldr	r3, [sp, #20]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dd05      	ble.n	8011a50 <_dtoa_r+0x828>
 8011a44:	4651      	mov	r1, sl
 8011a46:	461a      	mov	r2, r3
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f000 fc85 	bl	8012358 <__lshift>
 8011a4e:	4682      	mov	sl, r0
 8011a50:	9b06      	ldr	r3, [sp, #24]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	dd05      	ble.n	8011a62 <_dtoa_r+0x83a>
 8011a56:	4631      	mov	r1, r6
 8011a58:	461a      	mov	r2, r3
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f000 fc7c 	bl	8012358 <__lshift>
 8011a60:	4606      	mov	r6, r0
 8011a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d072      	beq.n	8011b4e <_dtoa_r+0x926>
 8011a68:	4631      	mov	r1, r6
 8011a6a:	4650      	mov	r0, sl
 8011a6c:	f000 fce0 	bl	8012430 <__mcmp>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	da6c      	bge.n	8011b4e <_dtoa_r+0x926>
 8011a74:	2300      	movs	r3, #0
 8011a76:	4651      	mov	r1, sl
 8011a78:	220a      	movs	r2, #10
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f000 fa74 	bl	8011f68 <__multadd>
 8011a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a86:	4682      	mov	sl, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f000 81b0 	beq.w	8011dee <_dtoa_r+0xbc6>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	4639      	mov	r1, r7
 8011a92:	220a      	movs	r2, #10
 8011a94:	4620      	mov	r0, r4
 8011a96:	f000 fa67 	bl	8011f68 <__multadd>
 8011a9a:	9b01      	ldr	r3, [sp, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	4607      	mov	r7, r0
 8011aa0:	f300 8096 	bgt.w	8011bd0 <_dtoa_r+0x9a8>
 8011aa4:	9b07      	ldr	r3, [sp, #28]
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	dc59      	bgt.n	8011b5e <_dtoa_r+0x936>
 8011aaa:	e091      	b.n	8011bd0 <_dtoa_r+0x9a8>
 8011aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011ab2:	e758      	b.n	8011966 <_dtoa_r+0x73e>
 8011ab4:	9b04      	ldr	r3, [sp, #16]
 8011ab6:	1e5e      	subs	r6, r3, #1
 8011ab8:	9b08      	ldr	r3, [sp, #32]
 8011aba:	42b3      	cmp	r3, r6
 8011abc:	bfbf      	itttt	lt
 8011abe:	9b08      	ldrlt	r3, [sp, #32]
 8011ac0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011ac2:	9608      	strlt	r6, [sp, #32]
 8011ac4:	1af3      	sublt	r3, r6, r3
 8011ac6:	bfb4      	ite	lt
 8011ac8:	18d2      	addlt	r2, r2, r3
 8011aca:	1b9e      	subge	r6, r3, r6
 8011acc:	9b04      	ldr	r3, [sp, #16]
 8011ace:	bfbc      	itt	lt
 8011ad0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011ad2:	2600      	movlt	r6, #0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	bfb7      	itett	lt
 8011ad8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011adc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011ae0:	1a9d      	sublt	r5, r3, r2
 8011ae2:	2300      	movlt	r3, #0
 8011ae4:	e741      	b.n	801196a <_dtoa_r+0x742>
 8011ae6:	9e08      	ldr	r6, [sp, #32]
 8011ae8:	9d05      	ldr	r5, [sp, #20]
 8011aea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011aec:	e748      	b.n	8011980 <_dtoa_r+0x758>
 8011aee:	9a08      	ldr	r2, [sp, #32]
 8011af0:	e770      	b.n	80119d4 <_dtoa_r+0x7ac>
 8011af2:	9b07      	ldr	r3, [sp, #28]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	dc19      	bgt.n	8011b2c <_dtoa_r+0x904>
 8011af8:	9b02      	ldr	r3, [sp, #8]
 8011afa:	b9bb      	cbnz	r3, 8011b2c <_dtoa_r+0x904>
 8011afc:	9b03      	ldr	r3, [sp, #12]
 8011afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b02:	b99b      	cbnz	r3, 8011b2c <_dtoa_r+0x904>
 8011b04:	9b03      	ldr	r3, [sp, #12]
 8011b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b0a:	0d1b      	lsrs	r3, r3, #20
 8011b0c:	051b      	lsls	r3, r3, #20
 8011b0e:	b183      	cbz	r3, 8011b32 <_dtoa_r+0x90a>
 8011b10:	9b05      	ldr	r3, [sp, #20]
 8011b12:	3301      	adds	r3, #1
 8011b14:	9305      	str	r3, [sp, #20]
 8011b16:	9b06      	ldr	r3, [sp, #24]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	9306      	str	r3, [sp, #24]
 8011b1c:	f04f 0801 	mov.w	r8, #1
 8011b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f47f af6f 	bne.w	8011a06 <_dtoa_r+0x7de>
 8011b28:	2001      	movs	r0, #1
 8011b2a:	e774      	b.n	8011a16 <_dtoa_r+0x7ee>
 8011b2c:	f04f 0800 	mov.w	r8, #0
 8011b30:	e7f6      	b.n	8011b20 <_dtoa_r+0x8f8>
 8011b32:	4698      	mov	r8, r3
 8011b34:	e7f4      	b.n	8011b20 <_dtoa_r+0x8f8>
 8011b36:	d082      	beq.n	8011a3e <_dtoa_r+0x816>
 8011b38:	9a05      	ldr	r2, [sp, #20]
 8011b3a:	331c      	adds	r3, #28
 8011b3c:	441a      	add	r2, r3
 8011b3e:	9205      	str	r2, [sp, #20]
 8011b40:	9a06      	ldr	r2, [sp, #24]
 8011b42:	441a      	add	r2, r3
 8011b44:	441d      	add	r5, r3
 8011b46:	9206      	str	r2, [sp, #24]
 8011b48:	e779      	b.n	8011a3e <_dtoa_r+0x816>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	e7f4      	b.n	8011b38 <_dtoa_r+0x910>
 8011b4e:	9b04      	ldr	r3, [sp, #16]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	dc37      	bgt.n	8011bc4 <_dtoa_r+0x99c>
 8011b54:	9b07      	ldr	r3, [sp, #28]
 8011b56:	2b02      	cmp	r3, #2
 8011b58:	dd34      	ble.n	8011bc4 <_dtoa_r+0x99c>
 8011b5a:	9b04      	ldr	r3, [sp, #16]
 8011b5c:	9301      	str	r3, [sp, #4]
 8011b5e:	9b01      	ldr	r3, [sp, #4]
 8011b60:	b963      	cbnz	r3, 8011b7c <_dtoa_r+0x954>
 8011b62:	4631      	mov	r1, r6
 8011b64:	2205      	movs	r2, #5
 8011b66:	4620      	mov	r0, r4
 8011b68:	f000 f9fe 	bl	8011f68 <__multadd>
 8011b6c:	4601      	mov	r1, r0
 8011b6e:	4606      	mov	r6, r0
 8011b70:	4650      	mov	r0, sl
 8011b72:	f000 fc5d 	bl	8012430 <__mcmp>
 8011b76:	2800      	cmp	r0, #0
 8011b78:	f73f adbb 	bgt.w	80116f2 <_dtoa_r+0x4ca>
 8011b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b7e:	9d00      	ldr	r5, [sp, #0]
 8011b80:	ea6f 0b03 	mvn.w	fp, r3
 8011b84:	f04f 0800 	mov.w	r8, #0
 8011b88:	4631      	mov	r1, r6
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	f000 f9ca 	bl	8011f24 <_Bfree>
 8011b90:	2f00      	cmp	r7, #0
 8011b92:	f43f aeab 	beq.w	80118ec <_dtoa_r+0x6c4>
 8011b96:	f1b8 0f00 	cmp.w	r8, #0
 8011b9a:	d005      	beq.n	8011ba8 <_dtoa_r+0x980>
 8011b9c:	45b8      	cmp	r8, r7
 8011b9e:	d003      	beq.n	8011ba8 <_dtoa_r+0x980>
 8011ba0:	4641      	mov	r1, r8
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f000 f9be 	bl	8011f24 <_Bfree>
 8011ba8:	4639      	mov	r1, r7
 8011baa:	4620      	mov	r0, r4
 8011bac:	f000 f9ba 	bl	8011f24 <_Bfree>
 8011bb0:	e69c      	b.n	80118ec <_dtoa_r+0x6c4>
 8011bb2:	2600      	movs	r6, #0
 8011bb4:	4637      	mov	r7, r6
 8011bb6:	e7e1      	b.n	8011b7c <_dtoa_r+0x954>
 8011bb8:	46bb      	mov	fp, r7
 8011bba:	4637      	mov	r7, r6
 8011bbc:	e599      	b.n	80116f2 <_dtoa_r+0x4ca>
 8011bbe:	bf00      	nop
 8011bc0:	40240000 	.word	0x40240000
 8011bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	f000 80c8 	beq.w	8011d5c <_dtoa_r+0xb34>
 8011bcc:	9b04      	ldr	r3, [sp, #16]
 8011bce:	9301      	str	r3, [sp, #4]
 8011bd0:	2d00      	cmp	r5, #0
 8011bd2:	dd05      	ble.n	8011be0 <_dtoa_r+0x9b8>
 8011bd4:	4639      	mov	r1, r7
 8011bd6:	462a      	mov	r2, r5
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 fbbd 	bl	8012358 <__lshift>
 8011bde:	4607      	mov	r7, r0
 8011be0:	f1b8 0f00 	cmp.w	r8, #0
 8011be4:	d05b      	beq.n	8011c9e <_dtoa_r+0xa76>
 8011be6:	6879      	ldr	r1, [r7, #4]
 8011be8:	4620      	mov	r0, r4
 8011bea:	f000 f95b 	bl	8011ea4 <_Balloc>
 8011bee:	4605      	mov	r5, r0
 8011bf0:	b928      	cbnz	r0, 8011bfe <_dtoa_r+0x9d6>
 8011bf2:	4b83      	ldr	r3, [pc, #524]	; (8011e00 <_dtoa_r+0xbd8>)
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011bfa:	f7ff bb2e 	b.w	801125a <_dtoa_r+0x32>
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	3202      	adds	r2, #2
 8011c02:	0092      	lsls	r2, r2, #2
 8011c04:	f107 010c 	add.w	r1, r7, #12
 8011c08:	300c      	adds	r0, #12
 8011c0a:	f7ff fa6e 	bl	80110ea <memcpy>
 8011c0e:	2201      	movs	r2, #1
 8011c10:	4629      	mov	r1, r5
 8011c12:	4620      	mov	r0, r4
 8011c14:	f000 fba0 	bl	8012358 <__lshift>
 8011c18:	9b00      	ldr	r3, [sp, #0]
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	9304      	str	r3, [sp, #16]
 8011c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c22:	4413      	add	r3, r2
 8011c24:	9308      	str	r3, [sp, #32]
 8011c26:	9b02      	ldr	r3, [sp, #8]
 8011c28:	f003 0301 	and.w	r3, r3, #1
 8011c2c:	46b8      	mov	r8, r7
 8011c2e:	9306      	str	r3, [sp, #24]
 8011c30:	4607      	mov	r7, r0
 8011c32:	9b04      	ldr	r3, [sp, #16]
 8011c34:	4631      	mov	r1, r6
 8011c36:	3b01      	subs	r3, #1
 8011c38:	4650      	mov	r0, sl
 8011c3a:	9301      	str	r3, [sp, #4]
 8011c3c:	f7ff fa6a 	bl	8011114 <quorem>
 8011c40:	4641      	mov	r1, r8
 8011c42:	9002      	str	r0, [sp, #8]
 8011c44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011c48:	4650      	mov	r0, sl
 8011c4a:	f000 fbf1 	bl	8012430 <__mcmp>
 8011c4e:	463a      	mov	r2, r7
 8011c50:	9005      	str	r0, [sp, #20]
 8011c52:	4631      	mov	r1, r6
 8011c54:	4620      	mov	r0, r4
 8011c56:	f000 fc07 	bl	8012468 <__mdiff>
 8011c5a:	68c2      	ldr	r2, [r0, #12]
 8011c5c:	4605      	mov	r5, r0
 8011c5e:	bb02      	cbnz	r2, 8011ca2 <_dtoa_r+0xa7a>
 8011c60:	4601      	mov	r1, r0
 8011c62:	4650      	mov	r0, sl
 8011c64:	f000 fbe4 	bl	8012430 <__mcmp>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8011c70:	f000 f958 	bl	8011f24 <_Bfree>
 8011c74:	9b07      	ldr	r3, [sp, #28]
 8011c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c78:	9d04      	ldr	r5, [sp, #16]
 8011c7a:	ea43 0102 	orr.w	r1, r3, r2
 8011c7e:	9b06      	ldr	r3, [sp, #24]
 8011c80:	4319      	orrs	r1, r3
 8011c82:	d110      	bne.n	8011ca6 <_dtoa_r+0xa7e>
 8011c84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011c88:	d029      	beq.n	8011cde <_dtoa_r+0xab6>
 8011c8a:	9b05      	ldr	r3, [sp, #20]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	dd02      	ble.n	8011c96 <_dtoa_r+0xa6e>
 8011c90:	9b02      	ldr	r3, [sp, #8]
 8011c92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011c96:	9b01      	ldr	r3, [sp, #4]
 8011c98:	f883 9000 	strb.w	r9, [r3]
 8011c9c:	e774      	b.n	8011b88 <_dtoa_r+0x960>
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	e7ba      	b.n	8011c18 <_dtoa_r+0x9f0>
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	e7e1      	b.n	8011c6a <_dtoa_r+0xa42>
 8011ca6:	9b05      	ldr	r3, [sp, #20]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	db04      	blt.n	8011cb6 <_dtoa_r+0xa8e>
 8011cac:	9907      	ldr	r1, [sp, #28]
 8011cae:	430b      	orrs	r3, r1
 8011cb0:	9906      	ldr	r1, [sp, #24]
 8011cb2:	430b      	orrs	r3, r1
 8011cb4:	d120      	bne.n	8011cf8 <_dtoa_r+0xad0>
 8011cb6:	2a00      	cmp	r2, #0
 8011cb8:	dded      	ble.n	8011c96 <_dtoa_r+0xa6e>
 8011cba:	4651      	mov	r1, sl
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f000 fb4a 	bl	8012358 <__lshift>
 8011cc4:	4631      	mov	r1, r6
 8011cc6:	4682      	mov	sl, r0
 8011cc8:	f000 fbb2 	bl	8012430 <__mcmp>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	dc03      	bgt.n	8011cd8 <_dtoa_r+0xab0>
 8011cd0:	d1e1      	bne.n	8011c96 <_dtoa_r+0xa6e>
 8011cd2:	f019 0f01 	tst.w	r9, #1
 8011cd6:	d0de      	beq.n	8011c96 <_dtoa_r+0xa6e>
 8011cd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011cdc:	d1d8      	bne.n	8011c90 <_dtoa_r+0xa68>
 8011cde:	9a01      	ldr	r2, [sp, #4]
 8011ce0:	2339      	movs	r3, #57	; 0x39
 8011ce2:	7013      	strb	r3, [r2, #0]
 8011ce4:	462b      	mov	r3, r5
 8011ce6:	461d      	mov	r5, r3
 8011ce8:	3b01      	subs	r3, #1
 8011cea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011cee:	2a39      	cmp	r2, #57	; 0x39
 8011cf0:	d06c      	beq.n	8011dcc <_dtoa_r+0xba4>
 8011cf2:	3201      	adds	r2, #1
 8011cf4:	701a      	strb	r2, [r3, #0]
 8011cf6:	e747      	b.n	8011b88 <_dtoa_r+0x960>
 8011cf8:	2a00      	cmp	r2, #0
 8011cfa:	dd07      	ble.n	8011d0c <_dtoa_r+0xae4>
 8011cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011d00:	d0ed      	beq.n	8011cde <_dtoa_r+0xab6>
 8011d02:	9a01      	ldr	r2, [sp, #4]
 8011d04:	f109 0301 	add.w	r3, r9, #1
 8011d08:	7013      	strb	r3, [r2, #0]
 8011d0a:	e73d      	b.n	8011b88 <_dtoa_r+0x960>
 8011d0c:	9b04      	ldr	r3, [sp, #16]
 8011d0e:	9a08      	ldr	r2, [sp, #32]
 8011d10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011d14:	4293      	cmp	r3, r2
 8011d16:	d043      	beq.n	8011da0 <_dtoa_r+0xb78>
 8011d18:	4651      	mov	r1, sl
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	220a      	movs	r2, #10
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f000 f922 	bl	8011f68 <__multadd>
 8011d24:	45b8      	cmp	r8, r7
 8011d26:	4682      	mov	sl, r0
 8011d28:	f04f 0300 	mov.w	r3, #0
 8011d2c:	f04f 020a 	mov.w	r2, #10
 8011d30:	4641      	mov	r1, r8
 8011d32:	4620      	mov	r0, r4
 8011d34:	d107      	bne.n	8011d46 <_dtoa_r+0xb1e>
 8011d36:	f000 f917 	bl	8011f68 <__multadd>
 8011d3a:	4680      	mov	r8, r0
 8011d3c:	4607      	mov	r7, r0
 8011d3e:	9b04      	ldr	r3, [sp, #16]
 8011d40:	3301      	adds	r3, #1
 8011d42:	9304      	str	r3, [sp, #16]
 8011d44:	e775      	b.n	8011c32 <_dtoa_r+0xa0a>
 8011d46:	f000 f90f 	bl	8011f68 <__multadd>
 8011d4a:	4639      	mov	r1, r7
 8011d4c:	4680      	mov	r8, r0
 8011d4e:	2300      	movs	r3, #0
 8011d50:	220a      	movs	r2, #10
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 f908 	bl	8011f68 <__multadd>
 8011d58:	4607      	mov	r7, r0
 8011d5a:	e7f0      	b.n	8011d3e <_dtoa_r+0xb16>
 8011d5c:	9b04      	ldr	r3, [sp, #16]
 8011d5e:	9301      	str	r3, [sp, #4]
 8011d60:	9d00      	ldr	r5, [sp, #0]
 8011d62:	4631      	mov	r1, r6
 8011d64:	4650      	mov	r0, sl
 8011d66:	f7ff f9d5 	bl	8011114 <quorem>
 8011d6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011d6e:	9b00      	ldr	r3, [sp, #0]
 8011d70:	f805 9b01 	strb.w	r9, [r5], #1
 8011d74:	1aea      	subs	r2, r5, r3
 8011d76:	9b01      	ldr	r3, [sp, #4]
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	dd07      	ble.n	8011d8c <_dtoa_r+0xb64>
 8011d7c:	4651      	mov	r1, sl
 8011d7e:	2300      	movs	r3, #0
 8011d80:	220a      	movs	r2, #10
 8011d82:	4620      	mov	r0, r4
 8011d84:	f000 f8f0 	bl	8011f68 <__multadd>
 8011d88:	4682      	mov	sl, r0
 8011d8a:	e7ea      	b.n	8011d62 <_dtoa_r+0xb3a>
 8011d8c:	9b01      	ldr	r3, [sp, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	bfc8      	it	gt
 8011d92:	461d      	movgt	r5, r3
 8011d94:	9b00      	ldr	r3, [sp, #0]
 8011d96:	bfd8      	it	le
 8011d98:	2501      	movle	r5, #1
 8011d9a:	441d      	add	r5, r3
 8011d9c:	f04f 0800 	mov.w	r8, #0
 8011da0:	4651      	mov	r1, sl
 8011da2:	2201      	movs	r2, #1
 8011da4:	4620      	mov	r0, r4
 8011da6:	f000 fad7 	bl	8012358 <__lshift>
 8011daa:	4631      	mov	r1, r6
 8011dac:	4682      	mov	sl, r0
 8011dae:	f000 fb3f 	bl	8012430 <__mcmp>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	dc96      	bgt.n	8011ce4 <_dtoa_r+0xabc>
 8011db6:	d102      	bne.n	8011dbe <_dtoa_r+0xb96>
 8011db8:	f019 0f01 	tst.w	r9, #1
 8011dbc:	d192      	bne.n	8011ce4 <_dtoa_r+0xabc>
 8011dbe:	462b      	mov	r3, r5
 8011dc0:	461d      	mov	r5, r3
 8011dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011dc6:	2a30      	cmp	r2, #48	; 0x30
 8011dc8:	d0fa      	beq.n	8011dc0 <_dtoa_r+0xb98>
 8011dca:	e6dd      	b.n	8011b88 <_dtoa_r+0x960>
 8011dcc:	9a00      	ldr	r2, [sp, #0]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d189      	bne.n	8011ce6 <_dtoa_r+0xabe>
 8011dd2:	f10b 0b01 	add.w	fp, fp, #1
 8011dd6:	2331      	movs	r3, #49	; 0x31
 8011dd8:	e796      	b.n	8011d08 <_dtoa_r+0xae0>
 8011dda:	4b0a      	ldr	r3, [pc, #40]	; (8011e04 <_dtoa_r+0xbdc>)
 8011ddc:	f7ff ba99 	b.w	8011312 <_dtoa_r+0xea>
 8011de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	f47f aa6d 	bne.w	80112c2 <_dtoa_r+0x9a>
 8011de8:	4b07      	ldr	r3, [pc, #28]	; (8011e08 <_dtoa_r+0xbe0>)
 8011dea:	f7ff ba92 	b.w	8011312 <_dtoa_r+0xea>
 8011dee:	9b01      	ldr	r3, [sp, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	dcb5      	bgt.n	8011d60 <_dtoa_r+0xb38>
 8011df4:	9b07      	ldr	r3, [sp, #28]
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	f73f aeb1 	bgt.w	8011b5e <_dtoa_r+0x936>
 8011dfc:	e7b0      	b.n	8011d60 <_dtoa_r+0xb38>
 8011dfe:	bf00      	nop
 8011e00:	08015809 	.word	0x08015809
 8011e04:	08015764 	.word	0x08015764
 8011e08:	0801578d 	.word	0x0801578d

08011e0c <_free_r>:
 8011e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e0e:	2900      	cmp	r1, #0
 8011e10:	d044      	beq.n	8011e9c <_free_r+0x90>
 8011e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e16:	9001      	str	r0, [sp, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8011e1e:	bfb8      	it	lt
 8011e20:	18e4      	addlt	r4, r4, r3
 8011e22:	f7fe f899 	bl	800ff58 <__malloc_lock>
 8011e26:	4a1e      	ldr	r2, [pc, #120]	; (8011ea0 <_free_r+0x94>)
 8011e28:	9801      	ldr	r0, [sp, #4]
 8011e2a:	6813      	ldr	r3, [r2, #0]
 8011e2c:	b933      	cbnz	r3, 8011e3c <_free_r+0x30>
 8011e2e:	6063      	str	r3, [r4, #4]
 8011e30:	6014      	str	r4, [r2, #0]
 8011e32:	b003      	add	sp, #12
 8011e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e38:	f7fe b894 	b.w	800ff64 <__malloc_unlock>
 8011e3c:	42a3      	cmp	r3, r4
 8011e3e:	d908      	bls.n	8011e52 <_free_r+0x46>
 8011e40:	6825      	ldr	r5, [r4, #0]
 8011e42:	1961      	adds	r1, r4, r5
 8011e44:	428b      	cmp	r3, r1
 8011e46:	bf01      	itttt	eq
 8011e48:	6819      	ldreq	r1, [r3, #0]
 8011e4a:	685b      	ldreq	r3, [r3, #4]
 8011e4c:	1949      	addeq	r1, r1, r5
 8011e4e:	6021      	streq	r1, [r4, #0]
 8011e50:	e7ed      	b.n	8011e2e <_free_r+0x22>
 8011e52:	461a      	mov	r2, r3
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	b10b      	cbz	r3, 8011e5c <_free_r+0x50>
 8011e58:	42a3      	cmp	r3, r4
 8011e5a:	d9fa      	bls.n	8011e52 <_free_r+0x46>
 8011e5c:	6811      	ldr	r1, [r2, #0]
 8011e5e:	1855      	adds	r5, r2, r1
 8011e60:	42a5      	cmp	r5, r4
 8011e62:	d10b      	bne.n	8011e7c <_free_r+0x70>
 8011e64:	6824      	ldr	r4, [r4, #0]
 8011e66:	4421      	add	r1, r4
 8011e68:	1854      	adds	r4, r2, r1
 8011e6a:	42a3      	cmp	r3, r4
 8011e6c:	6011      	str	r1, [r2, #0]
 8011e6e:	d1e0      	bne.n	8011e32 <_free_r+0x26>
 8011e70:	681c      	ldr	r4, [r3, #0]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	6053      	str	r3, [r2, #4]
 8011e76:	440c      	add	r4, r1
 8011e78:	6014      	str	r4, [r2, #0]
 8011e7a:	e7da      	b.n	8011e32 <_free_r+0x26>
 8011e7c:	d902      	bls.n	8011e84 <_free_r+0x78>
 8011e7e:	230c      	movs	r3, #12
 8011e80:	6003      	str	r3, [r0, #0]
 8011e82:	e7d6      	b.n	8011e32 <_free_r+0x26>
 8011e84:	6825      	ldr	r5, [r4, #0]
 8011e86:	1961      	adds	r1, r4, r5
 8011e88:	428b      	cmp	r3, r1
 8011e8a:	bf04      	itt	eq
 8011e8c:	6819      	ldreq	r1, [r3, #0]
 8011e8e:	685b      	ldreq	r3, [r3, #4]
 8011e90:	6063      	str	r3, [r4, #4]
 8011e92:	bf04      	itt	eq
 8011e94:	1949      	addeq	r1, r1, r5
 8011e96:	6021      	streq	r1, [r4, #0]
 8011e98:	6054      	str	r4, [r2, #4]
 8011e9a:	e7ca      	b.n	8011e32 <_free_r+0x26>
 8011e9c:	b003      	add	sp, #12
 8011e9e:	bd30      	pop	{r4, r5, pc}
 8011ea0:	200006c0 	.word	0x200006c0

08011ea4 <_Balloc>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	69c6      	ldr	r6, [r0, #28]
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	460d      	mov	r5, r1
 8011eac:	b976      	cbnz	r6, 8011ecc <_Balloc+0x28>
 8011eae:	2010      	movs	r0, #16
 8011eb0:	f7fd ffa2 	bl	800fdf8 <malloc>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	61e0      	str	r0, [r4, #28]
 8011eb8:	b920      	cbnz	r0, 8011ec4 <_Balloc+0x20>
 8011eba:	4b18      	ldr	r3, [pc, #96]	; (8011f1c <_Balloc+0x78>)
 8011ebc:	4818      	ldr	r0, [pc, #96]	; (8011f20 <_Balloc+0x7c>)
 8011ebe:	216b      	movs	r1, #107	; 0x6b
 8011ec0:	f7fd ff6a 	bl	800fd98 <__assert_func>
 8011ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ec8:	6006      	str	r6, [r0, #0]
 8011eca:	60c6      	str	r6, [r0, #12]
 8011ecc:	69e6      	ldr	r6, [r4, #28]
 8011ece:	68f3      	ldr	r3, [r6, #12]
 8011ed0:	b183      	cbz	r3, 8011ef4 <_Balloc+0x50>
 8011ed2:	69e3      	ldr	r3, [r4, #28]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011eda:	b9b8      	cbnz	r0, 8011f0c <_Balloc+0x68>
 8011edc:	2101      	movs	r1, #1
 8011ede:	fa01 f605 	lsl.w	r6, r1, r5
 8011ee2:	1d72      	adds	r2, r6, #5
 8011ee4:	0092      	lsls	r2, r2, #2
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f001 ff1a 	bl	8013d20 <_calloc_r>
 8011eec:	b160      	cbz	r0, 8011f08 <_Balloc+0x64>
 8011eee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011ef2:	e00e      	b.n	8011f12 <_Balloc+0x6e>
 8011ef4:	2221      	movs	r2, #33	; 0x21
 8011ef6:	2104      	movs	r1, #4
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f001 ff11 	bl	8013d20 <_calloc_r>
 8011efe:	69e3      	ldr	r3, [r4, #28]
 8011f00:	60f0      	str	r0, [r6, #12]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d1e4      	bne.n	8011ed2 <_Balloc+0x2e>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	bd70      	pop	{r4, r5, r6, pc}
 8011f0c:	6802      	ldr	r2, [r0, #0]
 8011f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f12:	2300      	movs	r3, #0
 8011f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f18:	e7f7      	b.n	8011f0a <_Balloc+0x66>
 8011f1a:	bf00      	nop
 8011f1c:	0801579a 	.word	0x0801579a
 8011f20:	0801581a 	.word	0x0801581a

08011f24 <_Bfree>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	69c6      	ldr	r6, [r0, #28]
 8011f28:	4605      	mov	r5, r0
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	b976      	cbnz	r6, 8011f4c <_Bfree+0x28>
 8011f2e:	2010      	movs	r0, #16
 8011f30:	f7fd ff62 	bl	800fdf8 <malloc>
 8011f34:	4602      	mov	r2, r0
 8011f36:	61e8      	str	r0, [r5, #28]
 8011f38:	b920      	cbnz	r0, 8011f44 <_Bfree+0x20>
 8011f3a:	4b09      	ldr	r3, [pc, #36]	; (8011f60 <_Bfree+0x3c>)
 8011f3c:	4809      	ldr	r0, [pc, #36]	; (8011f64 <_Bfree+0x40>)
 8011f3e:	218f      	movs	r1, #143	; 0x8f
 8011f40:	f7fd ff2a 	bl	800fd98 <__assert_func>
 8011f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f48:	6006      	str	r6, [r0, #0]
 8011f4a:	60c6      	str	r6, [r0, #12]
 8011f4c:	b13c      	cbz	r4, 8011f5e <_Bfree+0x3a>
 8011f4e:	69eb      	ldr	r3, [r5, #28]
 8011f50:	6862      	ldr	r2, [r4, #4]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f58:	6021      	str	r1, [r4, #0]
 8011f5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}
 8011f60:	0801579a 	.word	0x0801579a
 8011f64:	0801581a 	.word	0x0801581a

08011f68 <__multadd>:
 8011f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f6c:	690d      	ldr	r5, [r1, #16]
 8011f6e:	4607      	mov	r7, r0
 8011f70:	460c      	mov	r4, r1
 8011f72:	461e      	mov	r6, r3
 8011f74:	f101 0c14 	add.w	ip, r1, #20
 8011f78:	2000      	movs	r0, #0
 8011f7a:	f8dc 3000 	ldr.w	r3, [ip]
 8011f7e:	b299      	uxth	r1, r3
 8011f80:	fb02 6101 	mla	r1, r2, r1, r6
 8011f84:	0c1e      	lsrs	r6, r3, #16
 8011f86:	0c0b      	lsrs	r3, r1, #16
 8011f88:	fb02 3306 	mla	r3, r2, r6, r3
 8011f8c:	b289      	uxth	r1, r1
 8011f8e:	3001      	adds	r0, #1
 8011f90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011f94:	4285      	cmp	r5, r0
 8011f96:	f84c 1b04 	str.w	r1, [ip], #4
 8011f9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011f9e:	dcec      	bgt.n	8011f7a <__multadd+0x12>
 8011fa0:	b30e      	cbz	r6, 8011fe6 <__multadd+0x7e>
 8011fa2:	68a3      	ldr	r3, [r4, #8]
 8011fa4:	42ab      	cmp	r3, r5
 8011fa6:	dc19      	bgt.n	8011fdc <__multadd+0x74>
 8011fa8:	6861      	ldr	r1, [r4, #4]
 8011faa:	4638      	mov	r0, r7
 8011fac:	3101      	adds	r1, #1
 8011fae:	f7ff ff79 	bl	8011ea4 <_Balloc>
 8011fb2:	4680      	mov	r8, r0
 8011fb4:	b928      	cbnz	r0, 8011fc2 <__multadd+0x5a>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	4b0c      	ldr	r3, [pc, #48]	; (8011fec <__multadd+0x84>)
 8011fba:	480d      	ldr	r0, [pc, #52]	; (8011ff0 <__multadd+0x88>)
 8011fbc:	21ba      	movs	r1, #186	; 0xba
 8011fbe:	f7fd feeb 	bl	800fd98 <__assert_func>
 8011fc2:	6922      	ldr	r2, [r4, #16]
 8011fc4:	3202      	adds	r2, #2
 8011fc6:	f104 010c 	add.w	r1, r4, #12
 8011fca:	0092      	lsls	r2, r2, #2
 8011fcc:	300c      	adds	r0, #12
 8011fce:	f7ff f88c 	bl	80110ea <memcpy>
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	4638      	mov	r0, r7
 8011fd6:	f7ff ffa5 	bl	8011f24 <_Bfree>
 8011fda:	4644      	mov	r4, r8
 8011fdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011fe0:	3501      	adds	r5, #1
 8011fe2:	615e      	str	r6, [r3, #20]
 8011fe4:	6125      	str	r5, [r4, #16]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fec:	08015809 	.word	0x08015809
 8011ff0:	0801581a 	.word	0x0801581a

08011ff4 <__s2b>:
 8011ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	4615      	mov	r5, r2
 8011ffc:	461f      	mov	r7, r3
 8011ffe:	2209      	movs	r2, #9
 8012000:	3308      	adds	r3, #8
 8012002:	4606      	mov	r6, r0
 8012004:	fb93 f3f2 	sdiv	r3, r3, r2
 8012008:	2100      	movs	r1, #0
 801200a:	2201      	movs	r2, #1
 801200c:	429a      	cmp	r2, r3
 801200e:	db09      	blt.n	8012024 <__s2b+0x30>
 8012010:	4630      	mov	r0, r6
 8012012:	f7ff ff47 	bl	8011ea4 <_Balloc>
 8012016:	b940      	cbnz	r0, 801202a <__s2b+0x36>
 8012018:	4602      	mov	r2, r0
 801201a:	4b19      	ldr	r3, [pc, #100]	; (8012080 <__s2b+0x8c>)
 801201c:	4819      	ldr	r0, [pc, #100]	; (8012084 <__s2b+0x90>)
 801201e:	21d3      	movs	r1, #211	; 0xd3
 8012020:	f7fd feba 	bl	800fd98 <__assert_func>
 8012024:	0052      	lsls	r2, r2, #1
 8012026:	3101      	adds	r1, #1
 8012028:	e7f0      	b.n	801200c <__s2b+0x18>
 801202a:	9b08      	ldr	r3, [sp, #32]
 801202c:	6143      	str	r3, [r0, #20]
 801202e:	2d09      	cmp	r5, #9
 8012030:	f04f 0301 	mov.w	r3, #1
 8012034:	6103      	str	r3, [r0, #16]
 8012036:	dd16      	ble.n	8012066 <__s2b+0x72>
 8012038:	f104 0909 	add.w	r9, r4, #9
 801203c:	46c8      	mov	r8, r9
 801203e:	442c      	add	r4, r5
 8012040:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012044:	4601      	mov	r1, r0
 8012046:	3b30      	subs	r3, #48	; 0x30
 8012048:	220a      	movs	r2, #10
 801204a:	4630      	mov	r0, r6
 801204c:	f7ff ff8c 	bl	8011f68 <__multadd>
 8012050:	45a0      	cmp	r8, r4
 8012052:	d1f5      	bne.n	8012040 <__s2b+0x4c>
 8012054:	f1a5 0408 	sub.w	r4, r5, #8
 8012058:	444c      	add	r4, r9
 801205a:	1b2d      	subs	r5, r5, r4
 801205c:	1963      	adds	r3, r4, r5
 801205e:	42bb      	cmp	r3, r7
 8012060:	db04      	blt.n	801206c <__s2b+0x78>
 8012062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012066:	340a      	adds	r4, #10
 8012068:	2509      	movs	r5, #9
 801206a:	e7f6      	b.n	801205a <__s2b+0x66>
 801206c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012070:	4601      	mov	r1, r0
 8012072:	3b30      	subs	r3, #48	; 0x30
 8012074:	220a      	movs	r2, #10
 8012076:	4630      	mov	r0, r6
 8012078:	f7ff ff76 	bl	8011f68 <__multadd>
 801207c:	e7ee      	b.n	801205c <__s2b+0x68>
 801207e:	bf00      	nop
 8012080:	08015809 	.word	0x08015809
 8012084:	0801581a 	.word	0x0801581a

08012088 <__hi0bits>:
 8012088:	0c03      	lsrs	r3, r0, #16
 801208a:	041b      	lsls	r3, r3, #16
 801208c:	b9d3      	cbnz	r3, 80120c4 <__hi0bits+0x3c>
 801208e:	0400      	lsls	r0, r0, #16
 8012090:	2310      	movs	r3, #16
 8012092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012096:	bf04      	itt	eq
 8012098:	0200      	lsleq	r0, r0, #8
 801209a:	3308      	addeq	r3, #8
 801209c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80120a0:	bf04      	itt	eq
 80120a2:	0100      	lsleq	r0, r0, #4
 80120a4:	3304      	addeq	r3, #4
 80120a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80120aa:	bf04      	itt	eq
 80120ac:	0080      	lsleq	r0, r0, #2
 80120ae:	3302      	addeq	r3, #2
 80120b0:	2800      	cmp	r0, #0
 80120b2:	db05      	blt.n	80120c0 <__hi0bits+0x38>
 80120b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80120b8:	f103 0301 	add.w	r3, r3, #1
 80120bc:	bf08      	it	eq
 80120be:	2320      	moveq	r3, #32
 80120c0:	4618      	mov	r0, r3
 80120c2:	4770      	bx	lr
 80120c4:	2300      	movs	r3, #0
 80120c6:	e7e4      	b.n	8012092 <__hi0bits+0xa>

080120c8 <__lo0bits>:
 80120c8:	6803      	ldr	r3, [r0, #0]
 80120ca:	f013 0207 	ands.w	r2, r3, #7
 80120ce:	d00c      	beq.n	80120ea <__lo0bits+0x22>
 80120d0:	07d9      	lsls	r1, r3, #31
 80120d2:	d422      	bmi.n	801211a <__lo0bits+0x52>
 80120d4:	079a      	lsls	r2, r3, #30
 80120d6:	bf49      	itett	mi
 80120d8:	085b      	lsrmi	r3, r3, #1
 80120da:	089b      	lsrpl	r3, r3, #2
 80120dc:	6003      	strmi	r3, [r0, #0]
 80120de:	2201      	movmi	r2, #1
 80120e0:	bf5c      	itt	pl
 80120e2:	6003      	strpl	r3, [r0, #0]
 80120e4:	2202      	movpl	r2, #2
 80120e6:	4610      	mov	r0, r2
 80120e8:	4770      	bx	lr
 80120ea:	b299      	uxth	r1, r3
 80120ec:	b909      	cbnz	r1, 80120f2 <__lo0bits+0x2a>
 80120ee:	0c1b      	lsrs	r3, r3, #16
 80120f0:	2210      	movs	r2, #16
 80120f2:	b2d9      	uxtb	r1, r3
 80120f4:	b909      	cbnz	r1, 80120fa <__lo0bits+0x32>
 80120f6:	3208      	adds	r2, #8
 80120f8:	0a1b      	lsrs	r3, r3, #8
 80120fa:	0719      	lsls	r1, r3, #28
 80120fc:	bf04      	itt	eq
 80120fe:	091b      	lsreq	r3, r3, #4
 8012100:	3204      	addeq	r2, #4
 8012102:	0799      	lsls	r1, r3, #30
 8012104:	bf04      	itt	eq
 8012106:	089b      	lsreq	r3, r3, #2
 8012108:	3202      	addeq	r2, #2
 801210a:	07d9      	lsls	r1, r3, #31
 801210c:	d403      	bmi.n	8012116 <__lo0bits+0x4e>
 801210e:	085b      	lsrs	r3, r3, #1
 8012110:	f102 0201 	add.w	r2, r2, #1
 8012114:	d003      	beq.n	801211e <__lo0bits+0x56>
 8012116:	6003      	str	r3, [r0, #0]
 8012118:	e7e5      	b.n	80120e6 <__lo0bits+0x1e>
 801211a:	2200      	movs	r2, #0
 801211c:	e7e3      	b.n	80120e6 <__lo0bits+0x1e>
 801211e:	2220      	movs	r2, #32
 8012120:	e7e1      	b.n	80120e6 <__lo0bits+0x1e>
	...

08012124 <__i2b>:
 8012124:	b510      	push	{r4, lr}
 8012126:	460c      	mov	r4, r1
 8012128:	2101      	movs	r1, #1
 801212a:	f7ff febb 	bl	8011ea4 <_Balloc>
 801212e:	4602      	mov	r2, r0
 8012130:	b928      	cbnz	r0, 801213e <__i2b+0x1a>
 8012132:	4b05      	ldr	r3, [pc, #20]	; (8012148 <__i2b+0x24>)
 8012134:	4805      	ldr	r0, [pc, #20]	; (801214c <__i2b+0x28>)
 8012136:	f240 1145 	movw	r1, #325	; 0x145
 801213a:	f7fd fe2d 	bl	800fd98 <__assert_func>
 801213e:	2301      	movs	r3, #1
 8012140:	6144      	str	r4, [r0, #20]
 8012142:	6103      	str	r3, [r0, #16]
 8012144:	bd10      	pop	{r4, pc}
 8012146:	bf00      	nop
 8012148:	08015809 	.word	0x08015809
 801214c:	0801581a 	.word	0x0801581a

08012150 <__multiply>:
 8012150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012154:	4691      	mov	r9, r2
 8012156:	690a      	ldr	r2, [r1, #16]
 8012158:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801215c:	429a      	cmp	r2, r3
 801215e:	bfb8      	it	lt
 8012160:	460b      	movlt	r3, r1
 8012162:	460c      	mov	r4, r1
 8012164:	bfbc      	itt	lt
 8012166:	464c      	movlt	r4, r9
 8012168:	4699      	movlt	r9, r3
 801216a:	6927      	ldr	r7, [r4, #16]
 801216c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012170:	68a3      	ldr	r3, [r4, #8]
 8012172:	6861      	ldr	r1, [r4, #4]
 8012174:	eb07 060a 	add.w	r6, r7, sl
 8012178:	42b3      	cmp	r3, r6
 801217a:	b085      	sub	sp, #20
 801217c:	bfb8      	it	lt
 801217e:	3101      	addlt	r1, #1
 8012180:	f7ff fe90 	bl	8011ea4 <_Balloc>
 8012184:	b930      	cbnz	r0, 8012194 <__multiply+0x44>
 8012186:	4602      	mov	r2, r0
 8012188:	4b44      	ldr	r3, [pc, #272]	; (801229c <__multiply+0x14c>)
 801218a:	4845      	ldr	r0, [pc, #276]	; (80122a0 <__multiply+0x150>)
 801218c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012190:	f7fd fe02 	bl	800fd98 <__assert_func>
 8012194:	f100 0514 	add.w	r5, r0, #20
 8012198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801219c:	462b      	mov	r3, r5
 801219e:	2200      	movs	r2, #0
 80121a0:	4543      	cmp	r3, r8
 80121a2:	d321      	bcc.n	80121e8 <__multiply+0x98>
 80121a4:	f104 0314 	add.w	r3, r4, #20
 80121a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80121ac:	f109 0314 	add.w	r3, r9, #20
 80121b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80121b4:	9202      	str	r2, [sp, #8]
 80121b6:	1b3a      	subs	r2, r7, r4
 80121b8:	3a15      	subs	r2, #21
 80121ba:	f022 0203 	bic.w	r2, r2, #3
 80121be:	3204      	adds	r2, #4
 80121c0:	f104 0115 	add.w	r1, r4, #21
 80121c4:	428f      	cmp	r7, r1
 80121c6:	bf38      	it	cc
 80121c8:	2204      	movcc	r2, #4
 80121ca:	9201      	str	r2, [sp, #4]
 80121cc:	9a02      	ldr	r2, [sp, #8]
 80121ce:	9303      	str	r3, [sp, #12]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d80c      	bhi.n	80121ee <__multiply+0x9e>
 80121d4:	2e00      	cmp	r6, #0
 80121d6:	dd03      	ble.n	80121e0 <__multiply+0x90>
 80121d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d05b      	beq.n	8012298 <__multiply+0x148>
 80121e0:	6106      	str	r6, [r0, #16]
 80121e2:	b005      	add	sp, #20
 80121e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e8:	f843 2b04 	str.w	r2, [r3], #4
 80121ec:	e7d8      	b.n	80121a0 <__multiply+0x50>
 80121ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80121f2:	f1ba 0f00 	cmp.w	sl, #0
 80121f6:	d024      	beq.n	8012242 <__multiply+0xf2>
 80121f8:	f104 0e14 	add.w	lr, r4, #20
 80121fc:	46a9      	mov	r9, r5
 80121fe:	f04f 0c00 	mov.w	ip, #0
 8012202:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012206:	f8d9 1000 	ldr.w	r1, [r9]
 801220a:	fa1f fb82 	uxth.w	fp, r2
 801220e:	b289      	uxth	r1, r1
 8012210:	fb0a 110b 	mla	r1, sl, fp, r1
 8012214:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012218:	f8d9 2000 	ldr.w	r2, [r9]
 801221c:	4461      	add	r1, ip
 801221e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012222:	fb0a c20b 	mla	r2, sl, fp, ip
 8012226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801222a:	b289      	uxth	r1, r1
 801222c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012230:	4577      	cmp	r7, lr
 8012232:	f849 1b04 	str.w	r1, [r9], #4
 8012236:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801223a:	d8e2      	bhi.n	8012202 <__multiply+0xb2>
 801223c:	9a01      	ldr	r2, [sp, #4]
 801223e:	f845 c002 	str.w	ip, [r5, r2]
 8012242:	9a03      	ldr	r2, [sp, #12]
 8012244:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012248:	3304      	adds	r3, #4
 801224a:	f1b9 0f00 	cmp.w	r9, #0
 801224e:	d021      	beq.n	8012294 <__multiply+0x144>
 8012250:	6829      	ldr	r1, [r5, #0]
 8012252:	f104 0c14 	add.w	ip, r4, #20
 8012256:	46ae      	mov	lr, r5
 8012258:	f04f 0a00 	mov.w	sl, #0
 801225c:	f8bc b000 	ldrh.w	fp, [ip]
 8012260:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012264:	fb09 220b 	mla	r2, r9, fp, r2
 8012268:	4452      	add	r2, sl
 801226a:	b289      	uxth	r1, r1
 801226c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012270:	f84e 1b04 	str.w	r1, [lr], #4
 8012274:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012278:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801227c:	f8be 1000 	ldrh.w	r1, [lr]
 8012280:	fb09 110a 	mla	r1, r9, sl, r1
 8012284:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012288:	4567      	cmp	r7, ip
 801228a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801228e:	d8e5      	bhi.n	801225c <__multiply+0x10c>
 8012290:	9a01      	ldr	r2, [sp, #4]
 8012292:	50a9      	str	r1, [r5, r2]
 8012294:	3504      	adds	r5, #4
 8012296:	e799      	b.n	80121cc <__multiply+0x7c>
 8012298:	3e01      	subs	r6, #1
 801229a:	e79b      	b.n	80121d4 <__multiply+0x84>
 801229c:	08015809 	.word	0x08015809
 80122a0:	0801581a 	.word	0x0801581a

080122a4 <__pow5mult>:
 80122a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122a8:	4615      	mov	r5, r2
 80122aa:	f012 0203 	ands.w	r2, r2, #3
 80122ae:	4606      	mov	r6, r0
 80122b0:	460f      	mov	r7, r1
 80122b2:	d007      	beq.n	80122c4 <__pow5mult+0x20>
 80122b4:	4c25      	ldr	r4, [pc, #148]	; (801234c <__pow5mult+0xa8>)
 80122b6:	3a01      	subs	r2, #1
 80122b8:	2300      	movs	r3, #0
 80122ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122be:	f7ff fe53 	bl	8011f68 <__multadd>
 80122c2:	4607      	mov	r7, r0
 80122c4:	10ad      	asrs	r5, r5, #2
 80122c6:	d03d      	beq.n	8012344 <__pow5mult+0xa0>
 80122c8:	69f4      	ldr	r4, [r6, #28]
 80122ca:	b97c      	cbnz	r4, 80122ec <__pow5mult+0x48>
 80122cc:	2010      	movs	r0, #16
 80122ce:	f7fd fd93 	bl	800fdf8 <malloc>
 80122d2:	4602      	mov	r2, r0
 80122d4:	61f0      	str	r0, [r6, #28]
 80122d6:	b928      	cbnz	r0, 80122e4 <__pow5mult+0x40>
 80122d8:	4b1d      	ldr	r3, [pc, #116]	; (8012350 <__pow5mult+0xac>)
 80122da:	481e      	ldr	r0, [pc, #120]	; (8012354 <__pow5mult+0xb0>)
 80122dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80122e0:	f7fd fd5a 	bl	800fd98 <__assert_func>
 80122e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80122e8:	6004      	str	r4, [r0, #0]
 80122ea:	60c4      	str	r4, [r0, #12]
 80122ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80122f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80122f4:	b94c      	cbnz	r4, 801230a <__pow5mult+0x66>
 80122f6:	f240 2171 	movw	r1, #625	; 0x271
 80122fa:	4630      	mov	r0, r6
 80122fc:	f7ff ff12 	bl	8012124 <__i2b>
 8012300:	2300      	movs	r3, #0
 8012302:	f8c8 0008 	str.w	r0, [r8, #8]
 8012306:	4604      	mov	r4, r0
 8012308:	6003      	str	r3, [r0, #0]
 801230a:	f04f 0900 	mov.w	r9, #0
 801230e:	07eb      	lsls	r3, r5, #31
 8012310:	d50a      	bpl.n	8012328 <__pow5mult+0x84>
 8012312:	4639      	mov	r1, r7
 8012314:	4622      	mov	r2, r4
 8012316:	4630      	mov	r0, r6
 8012318:	f7ff ff1a 	bl	8012150 <__multiply>
 801231c:	4639      	mov	r1, r7
 801231e:	4680      	mov	r8, r0
 8012320:	4630      	mov	r0, r6
 8012322:	f7ff fdff 	bl	8011f24 <_Bfree>
 8012326:	4647      	mov	r7, r8
 8012328:	106d      	asrs	r5, r5, #1
 801232a:	d00b      	beq.n	8012344 <__pow5mult+0xa0>
 801232c:	6820      	ldr	r0, [r4, #0]
 801232e:	b938      	cbnz	r0, 8012340 <__pow5mult+0x9c>
 8012330:	4622      	mov	r2, r4
 8012332:	4621      	mov	r1, r4
 8012334:	4630      	mov	r0, r6
 8012336:	f7ff ff0b 	bl	8012150 <__multiply>
 801233a:	6020      	str	r0, [r4, #0]
 801233c:	f8c0 9000 	str.w	r9, [r0]
 8012340:	4604      	mov	r4, r0
 8012342:	e7e4      	b.n	801230e <__pow5mult+0x6a>
 8012344:	4638      	mov	r0, r7
 8012346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801234a:	bf00      	nop
 801234c:	08015968 	.word	0x08015968
 8012350:	0801579a 	.word	0x0801579a
 8012354:	0801581a 	.word	0x0801581a

08012358 <__lshift>:
 8012358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801235c:	460c      	mov	r4, r1
 801235e:	6849      	ldr	r1, [r1, #4]
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012366:	68a3      	ldr	r3, [r4, #8]
 8012368:	4607      	mov	r7, r0
 801236a:	4691      	mov	r9, r2
 801236c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012370:	f108 0601 	add.w	r6, r8, #1
 8012374:	42b3      	cmp	r3, r6
 8012376:	db0b      	blt.n	8012390 <__lshift+0x38>
 8012378:	4638      	mov	r0, r7
 801237a:	f7ff fd93 	bl	8011ea4 <_Balloc>
 801237e:	4605      	mov	r5, r0
 8012380:	b948      	cbnz	r0, 8012396 <__lshift+0x3e>
 8012382:	4602      	mov	r2, r0
 8012384:	4b28      	ldr	r3, [pc, #160]	; (8012428 <__lshift+0xd0>)
 8012386:	4829      	ldr	r0, [pc, #164]	; (801242c <__lshift+0xd4>)
 8012388:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801238c:	f7fd fd04 	bl	800fd98 <__assert_func>
 8012390:	3101      	adds	r1, #1
 8012392:	005b      	lsls	r3, r3, #1
 8012394:	e7ee      	b.n	8012374 <__lshift+0x1c>
 8012396:	2300      	movs	r3, #0
 8012398:	f100 0114 	add.w	r1, r0, #20
 801239c:	f100 0210 	add.w	r2, r0, #16
 80123a0:	4618      	mov	r0, r3
 80123a2:	4553      	cmp	r3, sl
 80123a4:	db33      	blt.n	801240e <__lshift+0xb6>
 80123a6:	6920      	ldr	r0, [r4, #16]
 80123a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123ac:	f104 0314 	add.w	r3, r4, #20
 80123b0:	f019 091f 	ands.w	r9, r9, #31
 80123b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80123bc:	d02b      	beq.n	8012416 <__lshift+0xbe>
 80123be:	f1c9 0e20 	rsb	lr, r9, #32
 80123c2:	468a      	mov	sl, r1
 80123c4:	2200      	movs	r2, #0
 80123c6:	6818      	ldr	r0, [r3, #0]
 80123c8:	fa00 f009 	lsl.w	r0, r0, r9
 80123cc:	4310      	orrs	r0, r2
 80123ce:	f84a 0b04 	str.w	r0, [sl], #4
 80123d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d6:	459c      	cmp	ip, r3
 80123d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80123dc:	d8f3      	bhi.n	80123c6 <__lshift+0x6e>
 80123de:	ebac 0304 	sub.w	r3, ip, r4
 80123e2:	3b15      	subs	r3, #21
 80123e4:	f023 0303 	bic.w	r3, r3, #3
 80123e8:	3304      	adds	r3, #4
 80123ea:	f104 0015 	add.w	r0, r4, #21
 80123ee:	4584      	cmp	ip, r0
 80123f0:	bf38      	it	cc
 80123f2:	2304      	movcc	r3, #4
 80123f4:	50ca      	str	r2, [r1, r3]
 80123f6:	b10a      	cbz	r2, 80123fc <__lshift+0xa4>
 80123f8:	f108 0602 	add.w	r6, r8, #2
 80123fc:	3e01      	subs	r6, #1
 80123fe:	4638      	mov	r0, r7
 8012400:	612e      	str	r6, [r5, #16]
 8012402:	4621      	mov	r1, r4
 8012404:	f7ff fd8e 	bl	8011f24 <_Bfree>
 8012408:	4628      	mov	r0, r5
 801240a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801240e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012412:	3301      	adds	r3, #1
 8012414:	e7c5      	b.n	80123a2 <__lshift+0x4a>
 8012416:	3904      	subs	r1, #4
 8012418:	f853 2b04 	ldr.w	r2, [r3], #4
 801241c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012420:	459c      	cmp	ip, r3
 8012422:	d8f9      	bhi.n	8012418 <__lshift+0xc0>
 8012424:	e7ea      	b.n	80123fc <__lshift+0xa4>
 8012426:	bf00      	nop
 8012428:	08015809 	.word	0x08015809
 801242c:	0801581a 	.word	0x0801581a

08012430 <__mcmp>:
 8012430:	b530      	push	{r4, r5, lr}
 8012432:	6902      	ldr	r2, [r0, #16]
 8012434:	690c      	ldr	r4, [r1, #16]
 8012436:	1b12      	subs	r2, r2, r4
 8012438:	d10e      	bne.n	8012458 <__mcmp+0x28>
 801243a:	f100 0314 	add.w	r3, r0, #20
 801243e:	3114      	adds	r1, #20
 8012440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801244c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012450:	42a5      	cmp	r5, r4
 8012452:	d003      	beq.n	801245c <__mcmp+0x2c>
 8012454:	d305      	bcc.n	8012462 <__mcmp+0x32>
 8012456:	2201      	movs	r2, #1
 8012458:	4610      	mov	r0, r2
 801245a:	bd30      	pop	{r4, r5, pc}
 801245c:	4283      	cmp	r3, r0
 801245e:	d3f3      	bcc.n	8012448 <__mcmp+0x18>
 8012460:	e7fa      	b.n	8012458 <__mcmp+0x28>
 8012462:	f04f 32ff 	mov.w	r2, #4294967295
 8012466:	e7f7      	b.n	8012458 <__mcmp+0x28>

08012468 <__mdiff>:
 8012468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	460c      	mov	r4, r1
 801246e:	4606      	mov	r6, r0
 8012470:	4611      	mov	r1, r2
 8012472:	4620      	mov	r0, r4
 8012474:	4690      	mov	r8, r2
 8012476:	f7ff ffdb 	bl	8012430 <__mcmp>
 801247a:	1e05      	subs	r5, r0, #0
 801247c:	d110      	bne.n	80124a0 <__mdiff+0x38>
 801247e:	4629      	mov	r1, r5
 8012480:	4630      	mov	r0, r6
 8012482:	f7ff fd0f 	bl	8011ea4 <_Balloc>
 8012486:	b930      	cbnz	r0, 8012496 <__mdiff+0x2e>
 8012488:	4b3a      	ldr	r3, [pc, #232]	; (8012574 <__mdiff+0x10c>)
 801248a:	4602      	mov	r2, r0
 801248c:	f240 2137 	movw	r1, #567	; 0x237
 8012490:	4839      	ldr	r0, [pc, #228]	; (8012578 <__mdiff+0x110>)
 8012492:	f7fd fc81 	bl	800fd98 <__assert_func>
 8012496:	2301      	movs	r3, #1
 8012498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801249c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a0:	bfa4      	itt	ge
 80124a2:	4643      	movge	r3, r8
 80124a4:	46a0      	movge	r8, r4
 80124a6:	4630      	mov	r0, r6
 80124a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80124ac:	bfa6      	itte	ge
 80124ae:	461c      	movge	r4, r3
 80124b0:	2500      	movge	r5, #0
 80124b2:	2501      	movlt	r5, #1
 80124b4:	f7ff fcf6 	bl	8011ea4 <_Balloc>
 80124b8:	b920      	cbnz	r0, 80124c4 <__mdiff+0x5c>
 80124ba:	4b2e      	ldr	r3, [pc, #184]	; (8012574 <__mdiff+0x10c>)
 80124bc:	4602      	mov	r2, r0
 80124be:	f240 2145 	movw	r1, #581	; 0x245
 80124c2:	e7e5      	b.n	8012490 <__mdiff+0x28>
 80124c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80124c8:	6926      	ldr	r6, [r4, #16]
 80124ca:	60c5      	str	r5, [r0, #12]
 80124cc:	f104 0914 	add.w	r9, r4, #20
 80124d0:	f108 0514 	add.w	r5, r8, #20
 80124d4:	f100 0e14 	add.w	lr, r0, #20
 80124d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80124dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80124e0:	f108 0210 	add.w	r2, r8, #16
 80124e4:	46f2      	mov	sl, lr
 80124e6:	2100      	movs	r1, #0
 80124e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80124ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80124f0:	fa11 f88b 	uxtah	r8, r1, fp
 80124f4:	b299      	uxth	r1, r3
 80124f6:	0c1b      	lsrs	r3, r3, #16
 80124f8:	eba8 0801 	sub.w	r8, r8, r1
 80124fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012500:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012504:	fa1f f888 	uxth.w	r8, r8
 8012508:	1419      	asrs	r1, r3, #16
 801250a:	454e      	cmp	r6, r9
 801250c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012510:	f84a 3b04 	str.w	r3, [sl], #4
 8012514:	d8e8      	bhi.n	80124e8 <__mdiff+0x80>
 8012516:	1b33      	subs	r3, r6, r4
 8012518:	3b15      	subs	r3, #21
 801251a:	f023 0303 	bic.w	r3, r3, #3
 801251e:	3304      	adds	r3, #4
 8012520:	3415      	adds	r4, #21
 8012522:	42a6      	cmp	r6, r4
 8012524:	bf38      	it	cc
 8012526:	2304      	movcc	r3, #4
 8012528:	441d      	add	r5, r3
 801252a:	4473      	add	r3, lr
 801252c:	469e      	mov	lr, r3
 801252e:	462e      	mov	r6, r5
 8012530:	4566      	cmp	r6, ip
 8012532:	d30e      	bcc.n	8012552 <__mdiff+0xea>
 8012534:	f10c 0203 	add.w	r2, ip, #3
 8012538:	1b52      	subs	r2, r2, r5
 801253a:	f022 0203 	bic.w	r2, r2, #3
 801253e:	3d03      	subs	r5, #3
 8012540:	45ac      	cmp	ip, r5
 8012542:	bf38      	it	cc
 8012544:	2200      	movcc	r2, #0
 8012546:	4413      	add	r3, r2
 8012548:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801254c:	b17a      	cbz	r2, 801256e <__mdiff+0x106>
 801254e:	6107      	str	r7, [r0, #16]
 8012550:	e7a4      	b.n	801249c <__mdiff+0x34>
 8012552:	f856 8b04 	ldr.w	r8, [r6], #4
 8012556:	fa11 f288 	uxtah	r2, r1, r8
 801255a:	1414      	asrs	r4, r2, #16
 801255c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012560:	b292      	uxth	r2, r2
 8012562:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012566:	f84e 2b04 	str.w	r2, [lr], #4
 801256a:	1421      	asrs	r1, r4, #16
 801256c:	e7e0      	b.n	8012530 <__mdiff+0xc8>
 801256e:	3f01      	subs	r7, #1
 8012570:	e7ea      	b.n	8012548 <__mdiff+0xe0>
 8012572:	bf00      	nop
 8012574:	08015809 	.word	0x08015809
 8012578:	0801581a 	.word	0x0801581a

0801257c <__ulp>:
 801257c:	b082      	sub	sp, #8
 801257e:	ed8d 0b00 	vstr	d0, [sp]
 8012582:	9a01      	ldr	r2, [sp, #4]
 8012584:	4b0f      	ldr	r3, [pc, #60]	; (80125c4 <__ulp+0x48>)
 8012586:	4013      	ands	r3, r2
 8012588:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801258c:	2b00      	cmp	r3, #0
 801258e:	dc08      	bgt.n	80125a2 <__ulp+0x26>
 8012590:	425b      	negs	r3, r3
 8012592:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012596:	ea4f 5223 	mov.w	r2, r3, asr #20
 801259a:	da04      	bge.n	80125a6 <__ulp+0x2a>
 801259c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80125a0:	4113      	asrs	r3, r2
 80125a2:	2200      	movs	r2, #0
 80125a4:	e008      	b.n	80125b8 <__ulp+0x3c>
 80125a6:	f1a2 0314 	sub.w	r3, r2, #20
 80125aa:	2b1e      	cmp	r3, #30
 80125ac:	bfda      	itte	le
 80125ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80125b2:	40da      	lsrle	r2, r3
 80125b4:	2201      	movgt	r2, #1
 80125b6:	2300      	movs	r3, #0
 80125b8:	4619      	mov	r1, r3
 80125ba:	4610      	mov	r0, r2
 80125bc:	ec41 0b10 	vmov	d0, r0, r1
 80125c0:	b002      	add	sp, #8
 80125c2:	4770      	bx	lr
 80125c4:	7ff00000 	.word	0x7ff00000

080125c8 <__b2d>:
 80125c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125cc:	6906      	ldr	r6, [r0, #16]
 80125ce:	f100 0814 	add.w	r8, r0, #20
 80125d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80125d6:	1f37      	subs	r7, r6, #4
 80125d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80125dc:	4610      	mov	r0, r2
 80125de:	f7ff fd53 	bl	8012088 <__hi0bits>
 80125e2:	f1c0 0320 	rsb	r3, r0, #32
 80125e6:	280a      	cmp	r0, #10
 80125e8:	600b      	str	r3, [r1, #0]
 80125ea:	491b      	ldr	r1, [pc, #108]	; (8012658 <__b2d+0x90>)
 80125ec:	dc15      	bgt.n	801261a <__b2d+0x52>
 80125ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80125f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80125f6:	45b8      	cmp	r8, r7
 80125f8:	ea43 0501 	orr.w	r5, r3, r1
 80125fc:	bf34      	ite	cc
 80125fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012602:	2300      	movcs	r3, #0
 8012604:	3015      	adds	r0, #21
 8012606:	fa02 f000 	lsl.w	r0, r2, r0
 801260a:	fa23 f30c 	lsr.w	r3, r3, ip
 801260e:	4303      	orrs	r3, r0
 8012610:	461c      	mov	r4, r3
 8012612:	ec45 4b10 	vmov	d0, r4, r5
 8012616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801261a:	45b8      	cmp	r8, r7
 801261c:	bf3a      	itte	cc
 801261e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012622:	f1a6 0708 	subcc.w	r7, r6, #8
 8012626:	2300      	movcs	r3, #0
 8012628:	380b      	subs	r0, #11
 801262a:	d012      	beq.n	8012652 <__b2d+0x8a>
 801262c:	f1c0 0120 	rsb	r1, r0, #32
 8012630:	fa23 f401 	lsr.w	r4, r3, r1
 8012634:	4082      	lsls	r2, r0
 8012636:	4322      	orrs	r2, r4
 8012638:	4547      	cmp	r7, r8
 801263a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801263e:	bf8c      	ite	hi
 8012640:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012644:	2200      	movls	r2, #0
 8012646:	4083      	lsls	r3, r0
 8012648:	40ca      	lsrs	r2, r1
 801264a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801264e:	4313      	orrs	r3, r2
 8012650:	e7de      	b.n	8012610 <__b2d+0x48>
 8012652:	ea42 0501 	orr.w	r5, r2, r1
 8012656:	e7db      	b.n	8012610 <__b2d+0x48>
 8012658:	3ff00000 	.word	0x3ff00000

0801265c <__d2b>:
 801265c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012660:	460f      	mov	r7, r1
 8012662:	2101      	movs	r1, #1
 8012664:	ec59 8b10 	vmov	r8, r9, d0
 8012668:	4616      	mov	r6, r2
 801266a:	f7ff fc1b 	bl	8011ea4 <_Balloc>
 801266e:	4604      	mov	r4, r0
 8012670:	b930      	cbnz	r0, 8012680 <__d2b+0x24>
 8012672:	4602      	mov	r2, r0
 8012674:	4b24      	ldr	r3, [pc, #144]	; (8012708 <__d2b+0xac>)
 8012676:	4825      	ldr	r0, [pc, #148]	; (801270c <__d2b+0xb0>)
 8012678:	f240 310f 	movw	r1, #783	; 0x30f
 801267c:	f7fd fb8c 	bl	800fd98 <__assert_func>
 8012680:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012688:	bb2d      	cbnz	r5, 80126d6 <__d2b+0x7a>
 801268a:	9301      	str	r3, [sp, #4]
 801268c:	f1b8 0300 	subs.w	r3, r8, #0
 8012690:	d026      	beq.n	80126e0 <__d2b+0x84>
 8012692:	4668      	mov	r0, sp
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	f7ff fd17 	bl	80120c8 <__lo0bits>
 801269a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801269e:	b1e8      	cbz	r0, 80126dc <__d2b+0x80>
 80126a0:	f1c0 0320 	rsb	r3, r0, #32
 80126a4:	fa02 f303 	lsl.w	r3, r2, r3
 80126a8:	430b      	orrs	r3, r1
 80126aa:	40c2      	lsrs	r2, r0
 80126ac:	6163      	str	r3, [r4, #20]
 80126ae:	9201      	str	r2, [sp, #4]
 80126b0:	9b01      	ldr	r3, [sp, #4]
 80126b2:	61a3      	str	r3, [r4, #24]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	bf14      	ite	ne
 80126b8:	2202      	movne	r2, #2
 80126ba:	2201      	moveq	r2, #1
 80126bc:	6122      	str	r2, [r4, #16]
 80126be:	b1bd      	cbz	r5, 80126f0 <__d2b+0x94>
 80126c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80126c4:	4405      	add	r5, r0
 80126c6:	603d      	str	r5, [r7, #0]
 80126c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80126cc:	6030      	str	r0, [r6, #0]
 80126ce:	4620      	mov	r0, r4
 80126d0:	b003      	add	sp, #12
 80126d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80126da:	e7d6      	b.n	801268a <__d2b+0x2e>
 80126dc:	6161      	str	r1, [r4, #20]
 80126de:	e7e7      	b.n	80126b0 <__d2b+0x54>
 80126e0:	a801      	add	r0, sp, #4
 80126e2:	f7ff fcf1 	bl	80120c8 <__lo0bits>
 80126e6:	9b01      	ldr	r3, [sp, #4]
 80126e8:	6163      	str	r3, [r4, #20]
 80126ea:	3020      	adds	r0, #32
 80126ec:	2201      	movs	r2, #1
 80126ee:	e7e5      	b.n	80126bc <__d2b+0x60>
 80126f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80126f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80126f8:	6038      	str	r0, [r7, #0]
 80126fa:	6918      	ldr	r0, [r3, #16]
 80126fc:	f7ff fcc4 	bl	8012088 <__hi0bits>
 8012700:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012704:	e7e2      	b.n	80126cc <__d2b+0x70>
 8012706:	bf00      	nop
 8012708:	08015809 	.word	0x08015809
 801270c:	0801581a 	.word	0x0801581a

08012710 <__ratio>:
 8012710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012714:	4688      	mov	r8, r1
 8012716:	4669      	mov	r1, sp
 8012718:	4681      	mov	r9, r0
 801271a:	f7ff ff55 	bl	80125c8 <__b2d>
 801271e:	a901      	add	r1, sp, #4
 8012720:	4640      	mov	r0, r8
 8012722:	ec55 4b10 	vmov	r4, r5, d0
 8012726:	f7ff ff4f 	bl	80125c8 <__b2d>
 801272a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801272e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012732:	eba3 0c02 	sub.w	ip, r3, r2
 8012736:	e9dd 3200 	ldrd	r3, r2, [sp]
 801273a:	1a9b      	subs	r3, r3, r2
 801273c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012740:	ec51 0b10 	vmov	r0, r1, d0
 8012744:	2b00      	cmp	r3, #0
 8012746:	bfd6      	itet	le
 8012748:	460a      	movle	r2, r1
 801274a:	462a      	movgt	r2, r5
 801274c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012750:	468b      	mov	fp, r1
 8012752:	462f      	mov	r7, r5
 8012754:	bfd4      	ite	le
 8012756:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801275a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801275e:	4620      	mov	r0, r4
 8012760:	ee10 2a10 	vmov	r2, s0
 8012764:	465b      	mov	r3, fp
 8012766:	4639      	mov	r1, r7
 8012768:	f7ee f898 	bl	800089c <__aeabi_ddiv>
 801276c:	ec41 0b10 	vmov	d0, r0, r1
 8012770:	b003      	add	sp, #12
 8012772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012776 <__copybits>:
 8012776:	3901      	subs	r1, #1
 8012778:	b570      	push	{r4, r5, r6, lr}
 801277a:	1149      	asrs	r1, r1, #5
 801277c:	6914      	ldr	r4, [r2, #16]
 801277e:	3101      	adds	r1, #1
 8012780:	f102 0314 	add.w	r3, r2, #20
 8012784:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012788:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801278c:	1f05      	subs	r5, r0, #4
 801278e:	42a3      	cmp	r3, r4
 8012790:	d30c      	bcc.n	80127ac <__copybits+0x36>
 8012792:	1aa3      	subs	r3, r4, r2
 8012794:	3b11      	subs	r3, #17
 8012796:	f023 0303 	bic.w	r3, r3, #3
 801279a:	3211      	adds	r2, #17
 801279c:	42a2      	cmp	r2, r4
 801279e:	bf88      	it	hi
 80127a0:	2300      	movhi	r3, #0
 80127a2:	4418      	add	r0, r3
 80127a4:	2300      	movs	r3, #0
 80127a6:	4288      	cmp	r0, r1
 80127a8:	d305      	bcc.n	80127b6 <__copybits+0x40>
 80127aa:	bd70      	pop	{r4, r5, r6, pc}
 80127ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80127b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80127b4:	e7eb      	b.n	801278e <__copybits+0x18>
 80127b6:	f840 3b04 	str.w	r3, [r0], #4
 80127ba:	e7f4      	b.n	80127a6 <__copybits+0x30>

080127bc <__any_on>:
 80127bc:	f100 0214 	add.w	r2, r0, #20
 80127c0:	6900      	ldr	r0, [r0, #16]
 80127c2:	114b      	asrs	r3, r1, #5
 80127c4:	4298      	cmp	r0, r3
 80127c6:	b510      	push	{r4, lr}
 80127c8:	db11      	blt.n	80127ee <__any_on+0x32>
 80127ca:	dd0a      	ble.n	80127e2 <__any_on+0x26>
 80127cc:	f011 011f 	ands.w	r1, r1, #31
 80127d0:	d007      	beq.n	80127e2 <__any_on+0x26>
 80127d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80127d6:	fa24 f001 	lsr.w	r0, r4, r1
 80127da:	fa00 f101 	lsl.w	r1, r0, r1
 80127de:	428c      	cmp	r4, r1
 80127e0:	d10b      	bne.n	80127fa <__any_on+0x3e>
 80127e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80127e6:	4293      	cmp	r3, r2
 80127e8:	d803      	bhi.n	80127f2 <__any_on+0x36>
 80127ea:	2000      	movs	r0, #0
 80127ec:	bd10      	pop	{r4, pc}
 80127ee:	4603      	mov	r3, r0
 80127f0:	e7f7      	b.n	80127e2 <__any_on+0x26>
 80127f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80127f6:	2900      	cmp	r1, #0
 80127f8:	d0f5      	beq.n	80127e6 <__any_on+0x2a>
 80127fa:	2001      	movs	r0, #1
 80127fc:	e7f6      	b.n	80127ec <__any_on+0x30>

080127fe <sulp>:
 80127fe:	b570      	push	{r4, r5, r6, lr}
 8012800:	4604      	mov	r4, r0
 8012802:	460d      	mov	r5, r1
 8012804:	ec45 4b10 	vmov	d0, r4, r5
 8012808:	4616      	mov	r6, r2
 801280a:	f7ff feb7 	bl	801257c <__ulp>
 801280e:	ec51 0b10 	vmov	r0, r1, d0
 8012812:	b17e      	cbz	r6, 8012834 <sulp+0x36>
 8012814:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012818:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801281c:	2b00      	cmp	r3, #0
 801281e:	dd09      	ble.n	8012834 <sulp+0x36>
 8012820:	051b      	lsls	r3, r3, #20
 8012822:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012826:	2400      	movs	r4, #0
 8012828:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801282c:	4622      	mov	r2, r4
 801282e:	462b      	mov	r3, r5
 8012830:	f7ed ff0a 	bl	8000648 <__aeabi_dmul>
 8012834:	bd70      	pop	{r4, r5, r6, pc}
	...

08012838 <_strtod_l>:
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	ed2d 8b02 	vpush	{d8}
 8012840:	b09b      	sub	sp, #108	; 0x6c
 8012842:	4604      	mov	r4, r0
 8012844:	9213      	str	r2, [sp, #76]	; 0x4c
 8012846:	2200      	movs	r2, #0
 8012848:	9216      	str	r2, [sp, #88]	; 0x58
 801284a:	460d      	mov	r5, r1
 801284c:	f04f 0800 	mov.w	r8, #0
 8012850:	f04f 0900 	mov.w	r9, #0
 8012854:	460a      	mov	r2, r1
 8012856:	9215      	str	r2, [sp, #84]	; 0x54
 8012858:	7811      	ldrb	r1, [r2, #0]
 801285a:	292b      	cmp	r1, #43	; 0x2b
 801285c:	d04c      	beq.n	80128f8 <_strtod_l+0xc0>
 801285e:	d83a      	bhi.n	80128d6 <_strtod_l+0x9e>
 8012860:	290d      	cmp	r1, #13
 8012862:	d834      	bhi.n	80128ce <_strtod_l+0x96>
 8012864:	2908      	cmp	r1, #8
 8012866:	d834      	bhi.n	80128d2 <_strtod_l+0x9a>
 8012868:	2900      	cmp	r1, #0
 801286a:	d03d      	beq.n	80128e8 <_strtod_l+0xb0>
 801286c:	2200      	movs	r2, #0
 801286e:	920a      	str	r2, [sp, #40]	; 0x28
 8012870:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012872:	7832      	ldrb	r2, [r6, #0]
 8012874:	2a30      	cmp	r2, #48	; 0x30
 8012876:	f040 80b4 	bne.w	80129e2 <_strtod_l+0x1aa>
 801287a:	7872      	ldrb	r2, [r6, #1]
 801287c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012880:	2a58      	cmp	r2, #88	; 0x58
 8012882:	d170      	bne.n	8012966 <_strtod_l+0x12e>
 8012884:	9302      	str	r3, [sp, #8]
 8012886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012888:	9301      	str	r3, [sp, #4]
 801288a:	ab16      	add	r3, sp, #88	; 0x58
 801288c:	9300      	str	r3, [sp, #0]
 801288e:	4a8e      	ldr	r2, [pc, #568]	; (8012ac8 <_strtod_l+0x290>)
 8012890:	ab17      	add	r3, sp, #92	; 0x5c
 8012892:	a915      	add	r1, sp, #84	; 0x54
 8012894:	4620      	mov	r0, r4
 8012896:	f001 fac1 	bl	8013e1c <__gethex>
 801289a:	f010 070f 	ands.w	r7, r0, #15
 801289e:	4605      	mov	r5, r0
 80128a0:	d005      	beq.n	80128ae <_strtod_l+0x76>
 80128a2:	2f06      	cmp	r7, #6
 80128a4:	d12a      	bne.n	80128fc <_strtod_l+0xc4>
 80128a6:	3601      	adds	r6, #1
 80128a8:	2300      	movs	r3, #0
 80128aa:	9615      	str	r6, [sp, #84]	; 0x54
 80128ac:	930a      	str	r3, [sp, #40]	; 0x28
 80128ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f040 857f 	bne.w	80133b4 <_strtod_l+0xb7c>
 80128b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b8:	b1db      	cbz	r3, 80128f2 <_strtod_l+0xba>
 80128ba:	4642      	mov	r2, r8
 80128bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80128c0:	ec43 2b10 	vmov	d0, r2, r3
 80128c4:	b01b      	add	sp, #108	; 0x6c
 80128c6:	ecbd 8b02 	vpop	{d8}
 80128ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ce:	2920      	cmp	r1, #32
 80128d0:	d1cc      	bne.n	801286c <_strtod_l+0x34>
 80128d2:	3201      	adds	r2, #1
 80128d4:	e7bf      	b.n	8012856 <_strtod_l+0x1e>
 80128d6:	292d      	cmp	r1, #45	; 0x2d
 80128d8:	d1c8      	bne.n	801286c <_strtod_l+0x34>
 80128da:	2101      	movs	r1, #1
 80128dc:	910a      	str	r1, [sp, #40]	; 0x28
 80128de:	1c51      	adds	r1, r2, #1
 80128e0:	9115      	str	r1, [sp, #84]	; 0x54
 80128e2:	7852      	ldrb	r2, [r2, #1]
 80128e4:	2a00      	cmp	r2, #0
 80128e6:	d1c3      	bne.n	8012870 <_strtod_l+0x38>
 80128e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80128ea:	9515      	str	r5, [sp, #84]	; 0x54
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f040 855f 	bne.w	80133b0 <_strtod_l+0xb78>
 80128f2:	4642      	mov	r2, r8
 80128f4:	464b      	mov	r3, r9
 80128f6:	e7e3      	b.n	80128c0 <_strtod_l+0x88>
 80128f8:	2100      	movs	r1, #0
 80128fa:	e7ef      	b.n	80128dc <_strtod_l+0xa4>
 80128fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80128fe:	b13a      	cbz	r2, 8012910 <_strtod_l+0xd8>
 8012900:	2135      	movs	r1, #53	; 0x35
 8012902:	a818      	add	r0, sp, #96	; 0x60
 8012904:	f7ff ff37 	bl	8012776 <__copybits>
 8012908:	9916      	ldr	r1, [sp, #88]	; 0x58
 801290a:	4620      	mov	r0, r4
 801290c:	f7ff fb0a 	bl	8011f24 <_Bfree>
 8012910:	3f01      	subs	r7, #1
 8012912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012914:	2f04      	cmp	r7, #4
 8012916:	d806      	bhi.n	8012926 <_strtod_l+0xee>
 8012918:	e8df f007 	tbb	[pc, r7]
 801291c:	201d0314 	.word	0x201d0314
 8012920:	14          	.byte	0x14
 8012921:	00          	.byte	0x00
 8012922:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8012926:	05e9      	lsls	r1, r5, #23
 8012928:	bf48      	it	mi
 801292a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801292e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012932:	0d1b      	lsrs	r3, r3, #20
 8012934:	051b      	lsls	r3, r3, #20
 8012936:	2b00      	cmp	r3, #0
 8012938:	d1b9      	bne.n	80128ae <_strtod_l+0x76>
 801293a:	f7fe fba9 	bl	8011090 <__errno>
 801293e:	2322      	movs	r3, #34	; 0x22
 8012940:	6003      	str	r3, [r0, #0]
 8012942:	e7b4      	b.n	80128ae <_strtod_l+0x76>
 8012944:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8012948:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801294c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012950:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012954:	e7e7      	b.n	8012926 <_strtod_l+0xee>
 8012956:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012ad0 <_strtod_l+0x298>
 801295a:	e7e4      	b.n	8012926 <_strtod_l+0xee>
 801295c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012960:	f04f 38ff 	mov.w	r8, #4294967295
 8012964:	e7df      	b.n	8012926 <_strtod_l+0xee>
 8012966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012968:	1c5a      	adds	r2, r3, #1
 801296a:	9215      	str	r2, [sp, #84]	; 0x54
 801296c:	785b      	ldrb	r3, [r3, #1]
 801296e:	2b30      	cmp	r3, #48	; 0x30
 8012970:	d0f9      	beq.n	8012966 <_strtod_l+0x12e>
 8012972:	2b00      	cmp	r3, #0
 8012974:	d09b      	beq.n	80128ae <_strtod_l+0x76>
 8012976:	2301      	movs	r3, #1
 8012978:	f04f 0a00 	mov.w	sl, #0
 801297c:	9304      	str	r3, [sp, #16]
 801297e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012980:	930b      	str	r3, [sp, #44]	; 0x2c
 8012982:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012986:	46d3      	mov	fp, sl
 8012988:	220a      	movs	r2, #10
 801298a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801298c:	7806      	ldrb	r6, [r0, #0]
 801298e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012992:	b2d9      	uxtb	r1, r3
 8012994:	2909      	cmp	r1, #9
 8012996:	d926      	bls.n	80129e6 <_strtod_l+0x1ae>
 8012998:	494c      	ldr	r1, [pc, #304]	; (8012acc <_strtod_l+0x294>)
 801299a:	2201      	movs	r2, #1
 801299c:	f001 f9a6 	bl	8013cec <strncmp>
 80129a0:	2800      	cmp	r0, #0
 80129a2:	d030      	beq.n	8012a06 <_strtod_l+0x1ce>
 80129a4:	2000      	movs	r0, #0
 80129a6:	4632      	mov	r2, r6
 80129a8:	9005      	str	r0, [sp, #20]
 80129aa:	465e      	mov	r6, fp
 80129ac:	4603      	mov	r3, r0
 80129ae:	2a65      	cmp	r2, #101	; 0x65
 80129b0:	d001      	beq.n	80129b6 <_strtod_l+0x17e>
 80129b2:	2a45      	cmp	r2, #69	; 0x45
 80129b4:	d113      	bne.n	80129de <_strtod_l+0x1a6>
 80129b6:	b91e      	cbnz	r6, 80129c0 <_strtod_l+0x188>
 80129b8:	9a04      	ldr	r2, [sp, #16]
 80129ba:	4302      	orrs	r2, r0
 80129bc:	d094      	beq.n	80128e8 <_strtod_l+0xb0>
 80129be:	2600      	movs	r6, #0
 80129c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80129c2:	1c6a      	adds	r2, r5, #1
 80129c4:	9215      	str	r2, [sp, #84]	; 0x54
 80129c6:	786a      	ldrb	r2, [r5, #1]
 80129c8:	2a2b      	cmp	r2, #43	; 0x2b
 80129ca:	d074      	beq.n	8012ab6 <_strtod_l+0x27e>
 80129cc:	2a2d      	cmp	r2, #45	; 0x2d
 80129ce:	d078      	beq.n	8012ac2 <_strtod_l+0x28a>
 80129d0:	f04f 0c00 	mov.w	ip, #0
 80129d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80129d8:	2909      	cmp	r1, #9
 80129da:	d97f      	bls.n	8012adc <_strtod_l+0x2a4>
 80129dc:	9515      	str	r5, [sp, #84]	; 0x54
 80129de:	2700      	movs	r7, #0
 80129e0:	e09e      	b.n	8012b20 <_strtod_l+0x2e8>
 80129e2:	2300      	movs	r3, #0
 80129e4:	e7c8      	b.n	8012978 <_strtod_l+0x140>
 80129e6:	f1bb 0f08 	cmp.w	fp, #8
 80129ea:	bfd8      	it	le
 80129ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80129ee:	f100 0001 	add.w	r0, r0, #1
 80129f2:	bfda      	itte	le
 80129f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80129f8:	9309      	strle	r3, [sp, #36]	; 0x24
 80129fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80129fe:	f10b 0b01 	add.w	fp, fp, #1
 8012a02:	9015      	str	r0, [sp, #84]	; 0x54
 8012a04:	e7c1      	b.n	801298a <_strtod_l+0x152>
 8012a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a08:	1c5a      	adds	r2, r3, #1
 8012a0a:	9215      	str	r2, [sp, #84]	; 0x54
 8012a0c:	785a      	ldrb	r2, [r3, #1]
 8012a0e:	f1bb 0f00 	cmp.w	fp, #0
 8012a12:	d037      	beq.n	8012a84 <_strtod_l+0x24c>
 8012a14:	9005      	str	r0, [sp, #20]
 8012a16:	465e      	mov	r6, fp
 8012a18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012a1c:	2b09      	cmp	r3, #9
 8012a1e:	d912      	bls.n	8012a46 <_strtod_l+0x20e>
 8012a20:	2301      	movs	r3, #1
 8012a22:	e7c4      	b.n	80129ae <_strtod_l+0x176>
 8012a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a26:	1c5a      	adds	r2, r3, #1
 8012a28:	9215      	str	r2, [sp, #84]	; 0x54
 8012a2a:	785a      	ldrb	r2, [r3, #1]
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	2a30      	cmp	r2, #48	; 0x30
 8012a30:	d0f8      	beq.n	8012a24 <_strtod_l+0x1ec>
 8012a32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012a36:	2b08      	cmp	r3, #8
 8012a38:	f200 84c1 	bhi.w	80133be <_strtod_l+0xb86>
 8012a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a3e:	9005      	str	r0, [sp, #20]
 8012a40:	2000      	movs	r0, #0
 8012a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a44:	4606      	mov	r6, r0
 8012a46:	3a30      	subs	r2, #48	; 0x30
 8012a48:	f100 0301 	add.w	r3, r0, #1
 8012a4c:	d014      	beq.n	8012a78 <_strtod_l+0x240>
 8012a4e:	9905      	ldr	r1, [sp, #20]
 8012a50:	4419      	add	r1, r3
 8012a52:	9105      	str	r1, [sp, #20]
 8012a54:	4633      	mov	r3, r6
 8012a56:	eb00 0c06 	add.w	ip, r0, r6
 8012a5a:	210a      	movs	r1, #10
 8012a5c:	4563      	cmp	r3, ip
 8012a5e:	d113      	bne.n	8012a88 <_strtod_l+0x250>
 8012a60:	1833      	adds	r3, r6, r0
 8012a62:	2b08      	cmp	r3, #8
 8012a64:	f106 0601 	add.w	r6, r6, #1
 8012a68:	4406      	add	r6, r0
 8012a6a:	dc1a      	bgt.n	8012aa2 <_strtod_l+0x26a>
 8012a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a6e:	230a      	movs	r3, #10
 8012a70:	fb03 2301 	mla	r3, r3, r1, r2
 8012a74:	9309      	str	r3, [sp, #36]	; 0x24
 8012a76:	2300      	movs	r3, #0
 8012a78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012a7a:	1c51      	adds	r1, r2, #1
 8012a7c:	9115      	str	r1, [sp, #84]	; 0x54
 8012a7e:	7852      	ldrb	r2, [r2, #1]
 8012a80:	4618      	mov	r0, r3
 8012a82:	e7c9      	b.n	8012a18 <_strtod_l+0x1e0>
 8012a84:	4658      	mov	r0, fp
 8012a86:	e7d2      	b.n	8012a2e <_strtod_l+0x1f6>
 8012a88:	2b08      	cmp	r3, #8
 8012a8a:	f103 0301 	add.w	r3, r3, #1
 8012a8e:	dc03      	bgt.n	8012a98 <_strtod_l+0x260>
 8012a90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012a92:	434f      	muls	r7, r1
 8012a94:	9709      	str	r7, [sp, #36]	; 0x24
 8012a96:	e7e1      	b.n	8012a5c <_strtod_l+0x224>
 8012a98:	2b10      	cmp	r3, #16
 8012a9a:	bfd8      	it	le
 8012a9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012aa0:	e7dc      	b.n	8012a5c <_strtod_l+0x224>
 8012aa2:	2e10      	cmp	r6, #16
 8012aa4:	bfdc      	itt	le
 8012aa6:	230a      	movle	r3, #10
 8012aa8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8012aac:	e7e3      	b.n	8012a76 <_strtod_l+0x23e>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	9305      	str	r3, [sp, #20]
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e780      	b.n	80129b8 <_strtod_l+0x180>
 8012ab6:	f04f 0c00 	mov.w	ip, #0
 8012aba:	1caa      	adds	r2, r5, #2
 8012abc:	9215      	str	r2, [sp, #84]	; 0x54
 8012abe:	78aa      	ldrb	r2, [r5, #2]
 8012ac0:	e788      	b.n	80129d4 <_strtod_l+0x19c>
 8012ac2:	f04f 0c01 	mov.w	ip, #1
 8012ac6:	e7f8      	b.n	8012aba <_strtod_l+0x282>
 8012ac8:	08015978 	.word	0x08015978
 8012acc:	08015974 	.word	0x08015974
 8012ad0:	7ff00000 	.word	0x7ff00000
 8012ad4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012ad6:	1c51      	adds	r1, r2, #1
 8012ad8:	9115      	str	r1, [sp, #84]	; 0x54
 8012ada:	7852      	ldrb	r2, [r2, #1]
 8012adc:	2a30      	cmp	r2, #48	; 0x30
 8012ade:	d0f9      	beq.n	8012ad4 <_strtod_l+0x29c>
 8012ae0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012ae4:	2908      	cmp	r1, #8
 8012ae6:	f63f af7a 	bhi.w	80129de <_strtod_l+0x1a6>
 8012aea:	3a30      	subs	r2, #48	; 0x30
 8012aec:	9208      	str	r2, [sp, #32]
 8012aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012af0:	920c      	str	r2, [sp, #48]	; 0x30
 8012af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012af4:	1c57      	adds	r7, r2, #1
 8012af6:	9715      	str	r7, [sp, #84]	; 0x54
 8012af8:	7852      	ldrb	r2, [r2, #1]
 8012afa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012afe:	f1be 0f09 	cmp.w	lr, #9
 8012b02:	d938      	bls.n	8012b76 <_strtod_l+0x33e>
 8012b04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b06:	1a7f      	subs	r7, r7, r1
 8012b08:	2f08      	cmp	r7, #8
 8012b0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012b0e:	dc03      	bgt.n	8012b18 <_strtod_l+0x2e0>
 8012b10:	9908      	ldr	r1, [sp, #32]
 8012b12:	428f      	cmp	r7, r1
 8012b14:	bfa8      	it	ge
 8012b16:	460f      	movge	r7, r1
 8012b18:	f1bc 0f00 	cmp.w	ip, #0
 8012b1c:	d000      	beq.n	8012b20 <_strtod_l+0x2e8>
 8012b1e:	427f      	negs	r7, r7
 8012b20:	2e00      	cmp	r6, #0
 8012b22:	d14f      	bne.n	8012bc4 <_strtod_l+0x38c>
 8012b24:	9904      	ldr	r1, [sp, #16]
 8012b26:	4301      	orrs	r1, r0
 8012b28:	f47f aec1 	bne.w	80128ae <_strtod_l+0x76>
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f47f aedb 	bne.w	80128e8 <_strtod_l+0xb0>
 8012b32:	2a69      	cmp	r2, #105	; 0x69
 8012b34:	d029      	beq.n	8012b8a <_strtod_l+0x352>
 8012b36:	dc26      	bgt.n	8012b86 <_strtod_l+0x34e>
 8012b38:	2a49      	cmp	r2, #73	; 0x49
 8012b3a:	d026      	beq.n	8012b8a <_strtod_l+0x352>
 8012b3c:	2a4e      	cmp	r2, #78	; 0x4e
 8012b3e:	f47f aed3 	bne.w	80128e8 <_strtod_l+0xb0>
 8012b42:	499b      	ldr	r1, [pc, #620]	; (8012db0 <_strtod_l+0x578>)
 8012b44:	a815      	add	r0, sp, #84	; 0x54
 8012b46:	f001 fba9 	bl	801429c <__match>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	f43f aecc 	beq.w	80128e8 <_strtod_l+0xb0>
 8012b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	2b28      	cmp	r3, #40	; 0x28
 8012b56:	d12f      	bne.n	8012bb8 <_strtod_l+0x380>
 8012b58:	4996      	ldr	r1, [pc, #600]	; (8012db4 <_strtod_l+0x57c>)
 8012b5a:	aa18      	add	r2, sp, #96	; 0x60
 8012b5c:	a815      	add	r0, sp, #84	; 0x54
 8012b5e:	f001 fbb1 	bl	80142c4 <__hexnan>
 8012b62:	2805      	cmp	r0, #5
 8012b64:	d128      	bne.n	8012bb8 <_strtod_l+0x380>
 8012b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012b6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012b70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012b74:	e69b      	b.n	80128ae <_strtod_l+0x76>
 8012b76:	9f08      	ldr	r7, [sp, #32]
 8012b78:	210a      	movs	r1, #10
 8012b7a:	fb01 2107 	mla	r1, r1, r7, r2
 8012b7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012b82:	9208      	str	r2, [sp, #32]
 8012b84:	e7b5      	b.n	8012af2 <_strtod_l+0x2ba>
 8012b86:	2a6e      	cmp	r2, #110	; 0x6e
 8012b88:	e7d9      	b.n	8012b3e <_strtod_l+0x306>
 8012b8a:	498b      	ldr	r1, [pc, #556]	; (8012db8 <_strtod_l+0x580>)
 8012b8c:	a815      	add	r0, sp, #84	; 0x54
 8012b8e:	f001 fb85 	bl	801429c <__match>
 8012b92:	2800      	cmp	r0, #0
 8012b94:	f43f aea8 	beq.w	80128e8 <_strtod_l+0xb0>
 8012b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b9a:	4988      	ldr	r1, [pc, #544]	; (8012dbc <_strtod_l+0x584>)
 8012b9c:	3b01      	subs	r3, #1
 8012b9e:	a815      	add	r0, sp, #84	; 0x54
 8012ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8012ba2:	f001 fb7b 	bl	801429c <__match>
 8012ba6:	b910      	cbnz	r0, 8012bae <_strtod_l+0x376>
 8012ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012baa:	3301      	adds	r3, #1
 8012bac:	9315      	str	r3, [sp, #84]	; 0x54
 8012bae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012dcc <_strtod_l+0x594>
 8012bb2:	f04f 0800 	mov.w	r8, #0
 8012bb6:	e67a      	b.n	80128ae <_strtod_l+0x76>
 8012bb8:	4881      	ldr	r0, [pc, #516]	; (8012dc0 <_strtod_l+0x588>)
 8012bba:	f001 f8a9 	bl	8013d10 <nan>
 8012bbe:	ec59 8b10 	vmov	r8, r9, d0
 8012bc2:	e674      	b.n	80128ae <_strtod_l+0x76>
 8012bc4:	9b05      	ldr	r3, [sp, #20]
 8012bc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bc8:	1afb      	subs	r3, r7, r3
 8012bca:	f1bb 0f00 	cmp.w	fp, #0
 8012bce:	bf08      	it	eq
 8012bd0:	46b3      	moveq	fp, r6
 8012bd2:	2e10      	cmp	r6, #16
 8012bd4:	9308      	str	r3, [sp, #32]
 8012bd6:	4635      	mov	r5, r6
 8012bd8:	bfa8      	it	ge
 8012bda:	2510      	movge	r5, #16
 8012bdc:	f7ed fcba 	bl	8000554 <__aeabi_ui2d>
 8012be0:	2e09      	cmp	r6, #9
 8012be2:	4680      	mov	r8, r0
 8012be4:	4689      	mov	r9, r1
 8012be6:	dd13      	ble.n	8012c10 <_strtod_l+0x3d8>
 8012be8:	4b76      	ldr	r3, [pc, #472]	; (8012dc4 <_strtod_l+0x58c>)
 8012bea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012bee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012bf2:	f7ed fd29 	bl	8000648 <__aeabi_dmul>
 8012bf6:	4680      	mov	r8, r0
 8012bf8:	4650      	mov	r0, sl
 8012bfa:	4689      	mov	r9, r1
 8012bfc:	f7ed fcaa 	bl	8000554 <__aeabi_ui2d>
 8012c00:	4602      	mov	r2, r0
 8012c02:	460b      	mov	r3, r1
 8012c04:	4640      	mov	r0, r8
 8012c06:	4649      	mov	r1, r9
 8012c08:	f7ed fb68 	bl	80002dc <__adddf3>
 8012c0c:	4680      	mov	r8, r0
 8012c0e:	4689      	mov	r9, r1
 8012c10:	2e0f      	cmp	r6, #15
 8012c12:	dc38      	bgt.n	8012c86 <_strtod_l+0x44e>
 8012c14:	9b08      	ldr	r3, [sp, #32]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f43f ae49 	beq.w	80128ae <_strtod_l+0x76>
 8012c1c:	dd24      	ble.n	8012c68 <_strtod_l+0x430>
 8012c1e:	2b16      	cmp	r3, #22
 8012c20:	dc0b      	bgt.n	8012c3a <_strtod_l+0x402>
 8012c22:	4968      	ldr	r1, [pc, #416]	; (8012dc4 <_strtod_l+0x58c>)
 8012c24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c2c:	4642      	mov	r2, r8
 8012c2e:	464b      	mov	r3, r9
 8012c30:	f7ed fd0a 	bl	8000648 <__aeabi_dmul>
 8012c34:	4680      	mov	r8, r0
 8012c36:	4689      	mov	r9, r1
 8012c38:	e639      	b.n	80128ae <_strtod_l+0x76>
 8012c3a:	9a08      	ldr	r2, [sp, #32]
 8012c3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012c40:	4293      	cmp	r3, r2
 8012c42:	db20      	blt.n	8012c86 <_strtod_l+0x44e>
 8012c44:	4c5f      	ldr	r4, [pc, #380]	; (8012dc4 <_strtod_l+0x58c>)
 8012c46:	f1c6 060f 	rsb	r6, r6, #15
 8012c4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012c4e:	4642      	mov	r2, r8
 8012c50:	464b      	mov	r3, r9
 8012c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c56:	f7ed fcf7 	bl	8000648 <__aeabi_dmul>
 8012c5a:	9b08      	ldr	r3, [sp, #32]
 8012c5c:	1b9e      	subs	r6, r3, r6
 8012c5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8012c62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012c66:	e7e3      	b.n	8012c30 <_strtod_l+0x3f8>
 8012c68:	9b08      	ldr	r3, [sp, #32]
 8012c6a:	3316      	adds	r3, #22
 8012c6c:	db0b      	blt.n	8012c86 <_strtod_l+0x44e>
 8012c6e:	9b05      	ldr	r3, [sp, #20]
 8012c70:	1bdf      	subs	r7, r3, r7
 8012c72:	4b54      	ldr	r3, [pc, #336]	; (8012dc4 <_strtod_l+0x58c>)
 8012c74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c7c:	4640      	mov	r0, r8
 8012c7e:	4649      	mov	r1, r9
 8012c80:	f7ed fe0c 	bl	800089c <__aeabi_ddiv>
 8012c84:	e7d6      	b.n	8012c34 <_strtod_l+0x3fc>
 8012c86:	9b08      	ldr	r3, [sp, #32]
 8012c88:	1b75      	subs	r5, r6, r5
 8012c8a:	441d      	add	r5, r3
 8012c8c:	2d00      	cmp	r5, #0
 8012c8e:	dd70      	ble.n	8012d72 <_strtod_l+0x53a>
 8012c90:	f015 030f 	ands.w	r3, r5, #15
 8012c94:	d00a      	beq.n	8012cac <_strtod_l+0x474>
 8012c96:	494b      	ldr	r1, [pc, #300]	; (8012dc4 <_strtod_l+0x58c>)
 8012c98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012c9c:	4642      	mov	r2, r8
 8012c9e:	464b      	mov	r3, r9
 8012ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ca4:	f7ed fcd0 	bl	8000648 <__aeabi_dmul>
 8012ca8:	4680      	mov	r8, r0
 8012caa:	4689      	mov	r9, r1
 8012cac:	f035 050f 	bics.w	r5, r5, #15
 8012cb0:	d04d      	beq.n	8012d4e <_strtod_l+0x516>
 8012cb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8012cb6:	dd22      	ble.n	8012cfe <_strtod_l+0x4c6>
 8012cb8:	2500      	movs	r5, #0
 8012cba:	46ab      	mov	fp, r5
 8012cbc:	9509      	str	r5, [sp, #36]	; 0x24
 8012cbe:	9505      	str	r5, [sp, #20]
 8012cc0:	2322      	movs	r3, #34	; 0x22
 8012cc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012dcc <_strtod_l+0x594>
 8012cc6:	6023      	str	r3, [r4, #0]
 8012cc8:	f04f 0800 	mov.w	r8, #0
 8012ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f43f aded 	beq.w	80128ae <_strtod_l+0x76>
 8012cd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7ff f924 	bl	8011f24 <_Bfree>
 8012cdc:	9905      	ldr	r1, [sp, #20]
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f7ff f920 	bl	8011f24 <_Bfree>
 8012ce4:	4659      	mov	r1, fp
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f7ff f91c 	bl	8011f24 <_Bfree>
 8012cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f7ff f918 	bl	8011f24 <_Bfree>
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	f7ff f914 	bl	8011f24 <_Bfree>
 8012cfc:	e5d7      	b.n	80128ae <_strtod_l+0x76>
 8012cfe:	4b32      	ldr	r3, [pc, #200]	; (8012dc8 <_strtod_l+0x590>)
 8012d00:	9304      	str	r3, [sp, #16]
 8012d02:	2300      	movs	r3, #0
 8012d04:	112d      	asrs	r5, r5, #4
 8012d06:	4640      	mov	r0, r8
 8012d08:	4649      	mov	r1, r9
 8012d0a:	469a      	mov	sl, r3
 8012d0c:	2d01      	cmp	r5, #1
 8012d0e:	dc21      	bgt.n	8012d54 <_strtod_l+0x51c>
 8012d10:	b10b      	cbz	r3, 8012d16 <_strtod_l+0x4de>
 8012d12:	4680      	mov	r8, r0
 8012d14:	4689      	mov	r9, r1
 8012d16:	492c      	ldr	r1, [pc, #176]	; (8012dc8 <_strtod_l+0x590>)
 8012d18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012d1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012d20:	4642      	mov	r2, r8
 8012d22:	464b      	mov	r3, r9
 8012d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d28:	f7ed fc8e 	bl	8000648 <__aeabi_dmul>
 8012d2c:	4b27      	ldr	r3, [pc, #156]	; (8012dcc <_strtod_l+0x594>)
 8012d2e:	460a      	mov	r2, r1
 8012d30:	400b      	ands	r3, r1
 8012d32:	4927      	ldr	r1, [pc, #156]	; (8012dd0 <_strtod_l+0x598>)
 8012d34:	428b      	cmp	r3, r1
 8012d36:	4680      	mov	r8, r0
 8012d38:	d8be      	bhi.n	8012cb8 <_strtod_l+0x480>
 8012d3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012d3e:	428b      	cmp	r3, r1
 8012d40:	bf86      	itte	hi
 8012d42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8012dd4 <_strtod_l+0x59c>
 8012d46:	f04f 38ff 	movhi.w	r8, #4294967295
 8012d4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012d4e:	2300      	movs	r3, #0
 8012d50:	9304      	str	r3, [sp, #16]
 8012d52:	e07b      	b.n	8012e4c <_strtod_l+0x614>
 8012d54:	07ea      	lsls	r2, r5, #31
 8012d56:	d505      	bpl.n	8012d64 <_strtod_l+0x52c>
 8012d58:	9b04      	ldr	r3, [sp, #16]
 8012d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5e:	f7ed fc73 	bl	8000648 <__aeabi_dmul>
 8012d62:	2301      	movs	r3, #1
 8012d64:	9a04      	ldr	r2, [sp, #16]
 8012d66:	3208      	adds	r2, #8
 8012d68:	f10a 0a01 	add.w	sl, sl, #1
 8012d6c:	106d      	asrs	r5, r5, #1
 8012d6e:	9204      	str	r2, [sp, #16]
 8012d70:	e7cc      	b.n	8012d0c <_strtod_l+0x4d4>
 8012d72:	d0ec      	beq.n	8012d4e <_strtod_l+0x516>
 8012d74:	426d      	negs	r5, r5
 8012d76:	f015 020f 	ands.w	r2, r5, #15
 8012d7a:	d00a      	beq.n	8012d92 <_strtod_l+0x55a>
 8012d7c:	4b11      	ldr	r3, [pc, #68]	; (8012dc4 <_strtod_l+0x58c>)
 8012d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d82:	4640      	mov	r0, r8
 8012d84:	4649      	mov	r1, r9
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	f7ed fd87 	bl	800089c <__aeabi_ddiv>
 8012d8e:	4680      	mov	r8, r0
 8012d90:	4689      	mov	r9, r1
 8012d92:	112d      	asrs	r5, r5, #4
 8012d94:	d0db      	beq.n	8012d4e <_strtod_l+0x516>
 8012d96:	2d1f      	cmp	r5, #31
 8012d98:	dd1e      	ble.n	8012dd8 <_strtod_l+0x5a0>
 8012d9a:	2500      	movs	r5, #0
 8012d9c:	46ab      	mov	fp, r5
 8012d9e:	9509      	str	r5, [sp, #36]	; 0x24
 8012da0:	9505      	str	r5, [sp, #20]
 8012da2:	2322      	movs	r3, #34	; 0x22
 8012da4:	f04f 0800 	mov.w	r8, #0
 8012da8:	f04f 0900 	mov.w	r9, #0
 8012dac:	6023      	str	r3, [r4, #0]
 8012dae:	e78d      	b.n	8012ccc <_strtod_l+0x494>
 8012db0:	08015761 	.word	0x08015761
 8012db4:	0801598c 	.word	0x0801598c
 8012db8:	08015759 	.word	0x08015759
 8012dbc:	08015790 	.word	0x08015790
 8012dc0:	08015753 	.word	0x08015753
 8012dc4:	080158a0 	.word	0x080158a0
 8012dc8:	08015878 	.word	0x08015878
 8012dcc:	7ff00000 	.word	0x7ff00000
 8012dd0:	7ca00000 	.word	0x7ca00000
 8012dd4:	7fefffff 	.word	0x7fefffff
 8012dd8:	f015 0310 	ands.w	r3, r5, #16
 8012ddc:	bf18      	it	ne
 8012dde:	236a      	movne	r3, #106	; 0x6a
 8012de0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013184 <_strtod_l+0x94c>
 8012de4:	9304      	str	r3, [sp, #16]
 8012de6:	4640      	mov	r0, r8
 8012de8:	4649      	mov	r1, r9
 8012dea:	2300      	movs	r3, #0
 8012dec:	07ea      	lsls	r2, r5, #31
 8012dee:	d504      	bpl.n	8012dfa <_strtod_l+0x5c2>
 8012df0:	e9da 2300 	ldrd	r2, r3, [sl]
 8012df4:	f7ed fc28 	bl	8000648 <__aeabi_dmul>
 8012df8:	2301      	movs	r3, #1
 8012dfa:	106d      	asrs	r5, r5, #1
 8012dfc:	f10a 0a08 	add.w	sl, sl, #8
 8012e00:	d1f4      	bne.n	8012dec <_strtod_l+0x5b4>
 8012e02:	b10b      	cbz	r3, 8012e08 <_strtod_l+0x5d0>
 8012e04:	4680      	mov	r8, r0
 8012e06:	4689      	mov	r9, r1
 8012e08:	9b04      	ldr	r3, [sp, #16]
 8012e0a:	b1bb      	cbz	r3, 8012e3c <_strtod_l+0x604>
 8012e0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012e10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	4649      	mov	r1, r9
 8012e18:	dd10      	ble.n	8012e3c <_strtod_l+0x604>
 8012e1a:	2b1f      	cmp	r3, #31
 8012e1c:	f340 811e 	ble.w	801305c <_strtod_l+0x824>
 8012e20:	2b34      	cmp	r3, #52	; 0x34
 8012e22:	bfde      	ittt	le
 8012e24:	f04f 33ff 	movle.w	r3, #4294967295
 8012e28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012e2c:	4093      	lslle	r3, r2
 8012e2e:	f04f 0800 	mov.w	r8, #0
 8012e32:	bfcc      	ite	gt
 8012e34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012e38:	ea03 0901 	andle.w	r9, r3, r1
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	2300      	movs	r3, #0
 8012e40:	4640      	mov	r0, r8
 8012e42:	4649      	mov	r1, r9
 8012e44:	f7ed fe68 	bl	8000b18 <__aeabi_dcmpeq>
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d1a6      	bne.n	8012d9a <_strtod_l+0x562>
 8012e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e52:	4633      	mov	r3, r6
 8012e54:	465a      	mov	r2, fp
 8012e56:	4620      	mov	r0, r4
 8012e58:	f7ff f8cc 	bl	8011ff4 <__s2b>
 8012e5c:	9009      	str	r0, [sp, #36]	; 0x24
 8012e5e:	2800      	cmp	r0, #0
 8012e60:	f43f af2a 	beq.w	8012cb8 <_strtod_l+0x480>
 8012e64:	9a08      	ldr	r2, [sp, #32]
 8012e66:	9b05      	ldr	r3, [sp, #20]
 8012e68:	2a00      	cmp	r2, #0
 8012e6a:	eba3 0307 	sub.w	r3, r3, r7
 8012e6e:	bfa8      	it	ge
 8012e70:	2300      	movge	r3, #0
 8012e72:	930c      	str	r3, [sp, #48]	; 0x30
 8012e74:	2500      	movs	r5, #0
 8012e76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8012e7c:	46ab      	mov	fp, r5
 8012e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e80:	4620      	mov	r0, r4
 8012e82:	6859      	ldr	r1, [r3, #4]
 8012e84:	f7ff f80e 	bl	8011ea4 <_Balloc>
 8012e88:	9005      	str	r0, [sp, #20]
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	f43f af18 	beq.w	8012cc0 <_strtod_l+0x488>
 8012e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e92:	691a      	ldr	r2, [r3, #16]
 8012e94:	3202      	adds	r2, #2
 8012e96:	f103 010c 	add.w	r1, r3, #12
 8012e9a:	0092      	lsls	r2, r2, #2
 8012e9c:	300c      	adds	r0, #12
 8012e9e:	f7fe f924 	bl	80110ea <memcpy>
 8012ea2:	ec49 8b10 	vmov	d0, r8, r9
 8012ea6:	aa18      	add	r2, sp, #96	; 0x60
 8012ea8:	a917      	add	r1, sp, #92	; 0x5c
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f7ff fbd6 	bl	801265c <__d2b>
 8012eb0:	ec49 8b18 	vmov	d8, r8, r9
 8012eb4:	9016      	str	r0, [sp, #88]	; 0x58
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	f43f af02 	beq.w	8012cc0 <_strtod_l+0x488>
 8012ebc:	2101      	movs	r1, #1
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f7ff f930 	bl	8012124 <__i2b>
 8012ec4:	4683      	mov	fp, r0
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	f43f aefa 	beq.w	8012cc0 <_strtod_l+0x488>
 8012ecc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012ece:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012ed0:	2e00      	cmp	r6, #0
 8012ed2:	bfab      	itete	ge
 8012ed4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8012ed6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012ed8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012eda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012ede:	bfac      	ite	ge
 8012ee0:	eb06 0a03 	addge.w	sl, r6, r3
 8012ee4:	1b9f      	sublt	r7, r3, r6
 8012ee6:	9b04      	ldr	r3, [sp, #16]
 8012ee8:	1af6      	subs	r6, r6, r3
 8012eea:	4416      	add	r6, r2
 8012eec:	4ba0      	ldr	r3, [pc, #640]	; (8013170 <_strtod_l+0x938>)
 8012eee:	3e01      	subs	r6, #1
 8012ef0:	429e      	cmp	r6, r3
 8012ef2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012ef6:	f280 80c4 	bge.w	8013082 <_strtod_l+0x84a>
 8012efa:	1b9b      	subs	r3, r3, r6
 8012efc:	2b1f      	cmp	r3, #31
 8012efe:	eba2 0203 	sub.w	r2, r2, r3
 8012f02:	f04f 0101 	mov.w	r1, #1
 8012f06:	f300 80b0 	bgt.w	801306a <_strtod_l+0x832>
 8012f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8012f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8012f10:	2300      	movs	r3, #0
 8012f12:	930d      	str	r3, [sp, #52]	; 0x34
 8012f14:	eb0a 0602 	add.w	r6, sl, r2
 8012f18:	9b04      	ldr	r3, [sp, #16]
 8012f1a:	45b2      	cmp	sl, r6
 8012f1c:	4417      	add	r7, r2
 8012f1e:	441f      	add	r7, r3
 8012f20:	4653      	mov	r3, sl
 8012f22:	bfa8      	it	ge
 8012f24:	4633      	movge	r3, r6
 8012f26:	42bb      	cmp	r3, r7
 8012f28:	bfa8      	it	ge
 8012f2a:	463b      	movge	r3, r7
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	bfc2      	ittt	gt
 8012f30:	1af6      	subgt	r6, r6, r3
 8012f32:	1aff      	subgt	r7, r7, r3
 8012f34:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	dd17      	ble.n	8012f6e <_strtod_l+0x736>
 8012f3e:	4659      	mov	r1, fp
 8012f40:	461a      	mov	r2, r3
 8012f42:	4620      	mov	r0, r4
 8012f44:	f7ff f9ae 	bl	80122a4 <__pow5mult>
 8012f48:	4683      	mov	fp, r0
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	f43f aeb8 	beq.w	8012cc0 <_strtod_l+0x488>
 8012f50:	4601      	mov	r1, r0
 8012f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012f54:	4620      	mov	r0, r4
 8012f56:	f7ff f8fb 	bl	8012150 <__multiply>
 8012f5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	f43f aeaf 	beq.w	8012cc0 <_strtod_l+0x488>
 8012f62:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012f64:	4620      	mov	r0, r4
 8012f66:	f7fe ffdd 	bl	8011f24 <_Bfree>
 8012f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f6c:	9316      	str	r3, [sp, #88]	; 0x58
 8012f6e:	2e00      	cmp	r6, #0
 8012f70:	f300 808c 	bgt.w	801308c <_strtod_l+0x854>
 8012f74:	9b08      	ldr	r3, [sp, #32]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	dd08      	ble.n	8012f8c <_strtod_l+0x754>
 8012f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012f7c:	9905      	ldr	r1, [sp, #20]
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f7ff f990 	bl	80122a4 <__pow5mult>
 8012f84:	9005      	str	r0, [sp, #20]
 8012f86:	2800      	cmp	r0, #0
 8012f88:	f43f ae9a 	beq.w	8012cc0 <_strtod_l+0x488>
 8012f8c:	2f00      	cmp	r7, #0
 8012f8e:	dd08      	ble.n	8012fa2 <_strtod_l+0x76a>
 8012f90:	9905      	ldr	r1, [sp, #20]
 8012f92:	463a      	mov	r2, r7
 8012f94:	4620      	mov	r0, r4
 8012f96:	f7ff f9df 	bl	8012358 <__lshift>
 8012f9a:	9005      	str	r0, [sp, #20]
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	f43f ae8f 	beq.w	8012cc0 <_strtod_l+0x488>
 8012fa2:	f1ba 0f00 	cmp.w	sl, #0
 8012fa6:	dd08      	ble.n	8012fba <_strtod_l+0x782>
 8012fa8:	4659      	mov	r1, fp
 8012faa:	4652      	mov	r2, sl
 8012fac:	4620      	mov	r0, r4
 8012fae:	f7ff f9d3 	bl	8012358 <__lshift>
 8012fb2:	4683      	mov	fp, r0
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	f43f ae83 	beq.w	8012cc0 <_strtod_l+0x488>
 8012fba:	9a05      	ldr	r2, [sp, #20]
 8012fbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f7ff fa52 	bl	8012468 <__mdiff>
 8012fc4:	4605      	mov	r5, r0
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	f43f ae7a 	beq.w	8012cc0 <_strtod_l+0x488>
 8012fcc:	68c3      	ldr	r3, [r0, #12]
 8012fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	60c3      	str	r3, [r0, #12]
 8012fd4:	4659      	mov	r1, fp
 8012fd6:	f7ff fa2b 	bl	8012430 <__mcmp>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	da60      	bge.n	80130a0 <_strtod_l+0x868>
 8012fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fe0:	ea53 0308 	orrs.w	r3, r3, r8
 8012fe4:	f040 8084 	bne.w	80130f0 <_strtod_l+0x8b8>
 8012fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d17f      	bne.n	80130f0 <_strtod_l+0x8b8>
 8012ff0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012ff4:	0d1b      	lsrs	r3, r3, #20
 8012ff6:	051b      	lsls	r3, r3, #20
 8012ff8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012ffc:	d978      	bls.n	80130f0 <_strtod_l+0x8b8>
 8012ffe:	696b      	ldr	r3, [r5, #20]
 8013000:	b913      	cbnz	r3, 8013008 <_strtod_l+0x7d0>
 8013002:	692b      	ldr	r3, [r5, #16]
 8013004:	2b01      	cmp	r3, #1
 8013006:	dd73      	ble.n	80130f0 <_strtod_l+0x8b8>
 8013008:	4629      	mov	r1, r5
 801300a:	2201      	movs	r2, #1
 801300c:	4620      	mov	r0, r4
 801300e:	f7ff f9a3 	bl	8012358 <__lshift>
 8013012:	4659      	mov	r1, fp
 8013014:	4605      	mov	r5, r0
 8013016:	f7ff fa0b 	bl	8012430 <__mcmp>
 801301a:	2800      	cmp	r0, #0
 801301c:	dd68      	ble.n	80130f0 <_strtod_l+0x8b8>
 801301e:	9904      	ldr	r1, [sp, #16]
 8013020:	4a54      	ldr	r2, [pc, #336]	; (8013174 <_strtod_l+0x93c>)
 8013022:	464b      	mov	r3, r9
 8013024:	2900      	cmp	r1, #0
 8013026:	f000 8084 	beq.w	8013132 <_strtod_l+0x8fa>
 801302a:	ea02 0109 	and.w	r1, r2, r9
 801302e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013032:	dc7e      	bgt.n	8013132 <_strtod_l+0x8fa>
 8013034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013038:	f77f aeb3 	ble.w	8012da2 <_strtod_l+0x56a>
 801303c:	4b4e      	ldr	r3, [pc, #312]	; (8013178 <_strtod_l+0x940>)
 801303e:	4640      	mov	r0, r8
 8013040:	4649      	mov	r1, r9
 8013042:	2200      	movs	r2, #0
 8013044:	f7ed fb00 	bl	8000648 <__aeabi_dmul>
 8013048:	4b4a      	ldr	r3, [pc, #296]	; (8013174 <_strtod_l+0x93c>)
 801304a:	400b      	ands	r3, r1
 801304c:	4680      	mov	r8, r0
 801304e:	4689      	mov	r9, r1
 8013050:	2b00      	cmp	r3, #0
 8013052:	f47f ae3f 	bne.w	8012cd4 <_strtod_l+0x49c>
 8013056:	2322      	movs	r3, #34	; 0x22
 8013058:	6023      	str	r3, [r4, #0]
 801305a:	e63b      	b.n	8012cd4 <_strtod_l+0x49c>
 801305c:	f04f 32ff 	mov.w	r2, #4294967295
 8013060:	fa02 f303 	lsl.w	r3, r2, r3
 8013064:	ea03 0808 	and.w	r8, r3, r8
 8013068:	e6e8      	b.n	8012e3c <_strtod_l+0x604>
 801306a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801306e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013072:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013076:	36e2      	adds	r6, #226	; 0xe2
 8013078:	fa01 f306 	lsl.w	r3, r1, r6
 801307c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013080:	e748      	b.n	8012f14 <_strtod_l+0x6dc>
 8013082:	2100      	movs	r1, #0
 8013084:	2301      	movs	r3, #1
 8013086:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801308a:	e743      	b.n	8012f14 <_strtod_l+0x6dc>
 801308c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801308e:	4632      	mov	r2, r6
 8013090:	4620      	mov	r0, r4
 8013092:	f7ff f961 	bl	8012358 <__lshift>
 8013096:	9016      	str	r0, [sp, #88]	; 0x58
 8013098:	2800      	cmp	r0, #0
 801309a:	f47f af6b 	bne.w	8012f74 <_strtod_l+0x73c>
 801309e:	e60f      	b.n	8012cc0 <_strtod_l+0x488>
 80130a0:	46ca      	mov	sl, r9
 80130a2:	d171      	bne.n	8013188 <_strtod_l+0x950>
 80130a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80130aa:	b352      	cbz	r2, 8013102 <_strtod_l+0x8ca>
 80130ac:	4a33      	ldr	r2, [pc, #204]	; (801317c <_strtod_l+0x944>)
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d12a      	bne.n	8013108 <_strtod_l+0x8d0>
 80130b2:	9b04      	ldr	r3, [sp, #16]
 80130b4:	4641      	mov	r1, r8
 80130b6:	b1fb      	cbz	r3, 80130f8 <_strtod_l+0x8c0>
 80130b8:	4b2e      	ldr	r3, [pc, #184]	; (8013174 <_strtod_l+0x93c>)
 80130ba:	ea09 0303 	and.w	r3, r9, r3
 80130be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80130c2:	f04f 32ff 	mov.w	r2, #4294967295
 80130c6:	d81a      	bhi.n	80130fe <_strtod_l+0x8c6>
 80130c8:	0d1b      	lsrs	r3, r3, #20
 80130ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80130ce:	fa02 f303 	lsl.w	r3, r2, r3
 80130d2:	4299      	cmp	r1, r3
 80130d4:	d118      	bne.n	8013108 <_strtod_l+0x8d0>
 80130d6:	4b2a      	ldr	r3, [pc, #168]	; (8013180 <_strtod_l+0x948>)
 80130d8:	459a      	cmp	sl, r3
 80130da:	d102      	bne.n	80130e2 <_strtod_l+0x8aa>
 80130dc:	3101      	adds	r1, #1
 80130de:	f43f adef 	beq.w	8012cc0 <_strtod_l+0x488>
 80130e2:	4b24      	ldr	r3, [pc, #144]	; (8013174 <_strtod_l+0x93c>)
 80130e4:	ea0a 0303 	and.w	r3, sl, r3
 80130e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80130ec:	f04f 0800 	mov.w	r8, #0
 80130f0:	9b04      	ldr	r3, [sp, #16]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d1a2      	bne.n	801303c <_strtod_l+0x804>
 80130f6:	e5ed      	b.n	8012cd4 <_strtod_l+0x49c>
 80130f8:	f04f 33ff 	mov.w	r3, #4294967295
 80130fc:	e7e9      	b.n	80130d2 <_strtod_l+0x89a>
 80130fe:	4613      	mov	r3, r2
 8013100:	e7e7      	b.n	80130d2 <_strtod_l+0x89a>
 8013102:	ea53 0308 	orrs.w	r3, r3, r8
 8013106:	d08a      	beq.n	801301e <_strtod_l+0x7e6>
 8013108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801310a:	b1e3      	cbz	r3, 8013146 <_strtod_l+0x90e>
 801310c:	ea13 0f0a 	tst.w	r3, sl
 8013110:	d0ee      	beq.n	80130f0 <_strtod_l+0x8b8>
 8013112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013114:	9a04      	ldr	r2, [sp, #16]
 8013116:	4640      	mov	r0, r8
 8013118:	4649      	mov	r1, r9
 801311a:	b1c3      	cbz	r3, 801314e <_strtod_l+0x916>
 801311c:	f7ff fb6f 	bl	80127fe <sulp>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	ec51 0b18 	vmov	r0, r1, d8
 8013128:	f7ed f8d8 	bl	80002dc <__adddf3>
 801312c:	4680      	mov	r8, r0
 801312e:	4689      	mov	r9, r1
 8013130:	e7de      	b.n	80130f0 <_strtod_l+0x8b8>
 8013132:	4013      	ands	r3, r2
 8013134:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013138:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801313c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013140:	f04f 38ff 	mov.w	r8, #4294967295
 8013144:	e7d4      	b.n	80130f0 <_strtod_l+0x8b8>
 8013146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013148:	ea13 0f08 	tst.w	r3, r8
 801314c:	e7e0      	b.n	8013110 <_strtod_l+0x8d8>
 801314e:	f7ff fb56 	bl	80127fe <sulp>
 8013152:	4602      	mov	r2, r0
 8013154:	460b      	mov	r3, r1
 8013156:	ec51 0b18 	vmov	r0, r1, d8
 801315a:	f7ed f8bd 	bl	80002d8 <__aeabi_dsub>
 801315e:	2200      	movs	r2, #0
 8013160:	2300      	movs	r3, #0
 8013162:	4680      	mov	r8, r0
 8013164:	4689      	mov	r9, r1
 8013166:	f7ed fcd7 	bl	8000b18 <__aeabi_dcmpeq>
 801316a:	2800      	cmp	r0, #0
 801316c:	d0c0      	beq.n	80130f0 <_strtod_l+0x8b8>
 801316e:	e618      	b.n	8012da2 <_strtod_l+0x56a>
 8013170:	fffffc02 	.word	0xfffffc02
 8013174:	7ff00000 	.word	0x7ff00000
 8013178:	39500000 	.word	0x39500000
 801317c:	000fffff 	.word	0x000fffff
 8013180:	7fefffff 	.word	0x7fefffff
 8013184:	080159a0 	.word	0x080159a0
 8013188:	4659      	mov	r1, fp
 801318a:	4628      	mov	r0, r5
 801318c:	f7ff fac0 	bl	8012710 <__ratio>
 8013190:	ec57 6b10 	vmov	r6, r7, d0
 8013194:	ee10 0a10 	vmov	r0, s0
 8013198:	2200      	movs	r2, #0
 801319a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801319e:	4639      	mov	r1, r7
 80131a0:	f7ed fcce 	bl	8000b40 <__aeabi_dcmple>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d071      	beq.n	801328c <_strtod_l+0xa54>
 80131a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d17c      	bne.n	80132a8 <_strtod_l+0xa70>
 80131ae:	f1b8 0f00 	cmp.w	r8, #0
 80131b2:	d15a      	bne.n	801326a <_strtod_l+0xa32>
 80131b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d15d      	bne.n	8013278 <_strtod_l+0xa40>
 80131bc:	4b90      	ldr	r3, [pc, #576]	; (8013400 <_strtod_l+0xbc8>)
 80131be:	2200      	movs	r2, #0
 80131c0:	4630      	mov	r0, r6
 80131c2:	4639      	mov	r1, r7
 80131c4:	f7ed fcb2 	bl	8000b2c <__aeabi_dcmplt>
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d15c      	bne.n	8013286 <_strtod_l+0xa4e>
 80131cc:	4630      	mov	r0, r6
 80131ce:	4639      	mov	r1, r7
 80131d0:	4b8c      	ldr	r3, [pc, #560]	; (8013404 <_strtod_l+0xbcc>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	f7ed fa38 	bl	8000648 <__aeabi_dmul>
 80131d8:	4606      	mov	r6, r0
 80131da:	460f      	mov	r7, r1
 80131dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80131e0:	9606      	str	r6, [sp, #24]
 80131e2:	9307      	str	r3, [sp, #28]
 80131e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80131e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80131ec:	4b86      	ldr	r3, [pc, #536]	; (8013408 <_strtod_l+0xbd0>)
 80131ee:	ea0a 0303 	and.w	r3, sl, r3
 80131f2:	930d      	str	r3, [sp, #52]	; 0x34
 80131f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131f6:	4b85      	ldr	r3, [pc, #532]	; (801340c <_strtod_l+0xbd4>)
 80131f8:	429a      	cmp	r2, r3
 80131fa:	f040 8090 	bne.w	801331e <_strtod_l+0xae6>
 80131fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013202:	ec49 8b10 	vmov	d0, r8, r9
 8013206:	f7ff f9b9 	bl	801257c <__ulp>
 801320a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801320e:	ec51 0b10 	vmov	r0, r1, d0
 8013212:	f7ed fa19 	bl	8000648 <__aeabi_dmul>
 8013216:	4642      	mov	r2, r8
 8013218:	464b      	mov	r3, r9
 801321a:	f7ed f85f 	bl	80002dc <__adddf3>
 801321e:	460b      	mov	r3, r1
 8013220:	4979      	ldr	r1, [pc, #484]	; (8013408 <_strtod_l+0xbd0>)
 8013222:	4a7b      	ldr	r2, [pc, #492]	; (8013410 <_strtod_l+0xbd8>)
 8013224:	4019      	ands	r1, r3
 8013226:	4291      	cmp	r1, r2
 8013228:	4680      	mov	r8, r0
 801322a:	d944      	bls.n	80132b6 <_strtod_l+0xa7e>
 801322c:	ee18 2a90 	vmov	r2, s17
 8013230:	4b78      	ldr	r3, [pc, #480]	; (8013414 <_strtod_l+0xbdc>)
 8013232:	429a      	cmp	r2, r3
 8013234:	d104      	bne.n	8013240 <_strtod_l+0xa08>
 8013236:	ee18 3a10 	vmov	r3, s16
 801323a:	3301      	adds	r3, #1
 801323c:	f43f ad40 	beq.w	8012cc0 <_strtod_l+0x488>
 8013240:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013414 <_strtod_l+0xbdc>
 8013244:	f04f 38ff 	mov.w	r8, #4294967295
 8013248:	9916      	ldr	r1, [sp, #88]	; 0x58
 801324a:	4620      	mov	r0, r4
 801324c:	f7fe fe6a 	bl	8011f24 <_Bfree>
 8013250:	9905      	ldr	r1, [sp, #20]
 8013252:	4620      	mov	r0, r4
 8013254:	f7fe fe66 	bl	8011f24 <_Bfree>
 8013258:	4659      	mov	r1, fp
 801325a:	4620      	mov	r0, r4
 801325c:	f7fe fe62 	bl	8011f24 <_Bfree>
 8013260:	4629      	mov	r1, r5
 8013262:	4620      	mov	r0, r4
 8013264:	f7fe fe5e 	bl	8011f24 <_Bfree>
 8013268:	e609      	b.n	8012e7e <_strtod_l+0x646>
 801326a:	f1b8 0f01 	cmp.w	r8, #1
 801326e:	d103      	bne.n	8013278 <_strtod_l+0xa40>
 8013270:	f1b9 0f00 	cmp.w	r9, #0
 8013274:	f43f ad95 	beq.w	8012da2 <_strtod_l+0x56a>
 8013278:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80133d0 <_strtod_l+0xb98>
 801327c:	4f60      	ldr	r7, [pc, #384]	; (8013400 <_strtod_l+0xbc8>)
 801327e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013282:	2600      	movs	r6, #0
 8013284:	e7ae      	b.n	80131e4 <_strtod_l+0x9ac>
 8013286:	4f5f      	ldr	r7, [pc, #380]	; (8013404 <_strtod_l+0xbcc>)
 8013288:	2600      	movs	r6, #0
 801328a:	e7a7      	b.n	80131dc <_strtod_l+0x9a4>
 801328c:	4b5d      	ldr	r3, [pc, #372]	; (8013404 <_strtod_l+0xbcc>)
 801328e:	4630      	mov	r0, r6
 8013290:	4639      	mov	r1, r7
 8013292:	2200      	movs	r2, #0
 8013294:	f7ed f9d8 	bl	8000648 <__aeabi_dmul>
 8013298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801329a:	4606      	mov	r6, r0
 801329c:	460f      	mov	r7, r1
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d09c      	beq.n	80131dc <_strtod_l+0x9a4>
 80132a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80132a6:	e79d      	b.n	80131e4 <_strtod_l+0x9ac>
 80132a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80133d8 <_strtod_l+0xba0>
 80132ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132b0:	ec57 6b17 	vmov	r6, r7, d7
 80132b4:	e796      	b.n	80131e4 <_strtod_l+0x9ac>
 80132b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80132ba:	9b04      	ldr	r3, [sp, #16]
 80132bc:	46ca      	mov	sl, r9
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1c2      	bne.n	8013248 <_strtod_l+0xa10>
 80132c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80132c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132c8:	0d1b      	lsrs	r3, r3, #20
 80132ca:	051b      	lsls	r3, r3, #20
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d1bb      	bne.n	8013248 <_strtod_l+0xa10>
 80132d0:	4630      	mov	r0, r6
 80132d2:	4639      	mov	r1, r7
 80132d4:	f7ed fd18 	bl	8000d08 <__aeabi_d2lz>
 80132d8:	f7ed f988 	bl	80005ec <__aeabi_l2d>
 80132dc:	4602      	mov	r2, r0
 80132de:	460b      	mov	r3, r1
 80132e0:	4630      	mov	r0, r6
 80132e2:	4639      	mov	r1, r7
 80132e4:	f7ec fff8 	bl	80002d8 <__aeabi_dsub>
 80132e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80132ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132ee:	ea43 0308 	orr.w	r3, r3, r8
 80132f2:	4313      	orrs	r3, r2
 80132f4:	4606      	mov	r6, r0
 80132f6:	460f      	mov	r7, r1
 80132f8:	d054      	beq.n	80133a4 <_strtod_l+0xb6c>
 80132fa:	a339      	add	r3, pc, #228	; (adr r3, 80133e0 <_strtod_l+0xba8>)
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	f7ed fc14 	bl	8000b2c <__aeabi_dcmplt>
 8013304:	2800      	cmp	r0, #0
 8013306:	f47f ace5 	bne.w	8012cd4 <_strtod_l+0x49c>
 801330a:	a337      	add	r3, pc, #220	; (adr r3, 80133e8 <_strtod_l+0xbb0>)
 801330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013310:	4630      	mov	r0, r6
 8013312:	4639      	mov	r1, r7
 8013314:	f7ed fc28 	bl	8000b68 <__aeabi_dcmpgt>
 8013318:	2800      	cmp	r0, #0
 801331a:	d095      	beq.n	8013248 <_strtod_l+0xa10>
 801331c:	e4da      	b.n	8012cd4 <_strtod_l+0x49c>
 801331e:	9b04      	ldr	r3, [sp, #16]
 8013320:	b333      	cbz	r3, 8013370 <_strtod_l+0xb38>
 8013322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013324:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013328:	d822      	bhi.n	8013370 <_strtod_l+0xb38>
 801332a:	a331      	add	r3, pc, #196	; (adr r3, 80133f0 <_strtod_l+0xbb8>)
 801332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013330:	4630      	mov	r0, r6
 8013332:	4639      	mov	r1, r7
 8013334:	f7ed fc04 	bl	8000b40 <__aeabi_dcmple>
 8013338:	b1a0      	cbz	r0, 8013364 <_strtod_l+0xb2c>
 801333a:	4639      	mov	r1, r7
 801333c:	4630      	mov	r0, r6
 801333e:	f7ed fc5b 	bl	8000bf8 <__aeabi_d2uiz>
 8013342:	2801      	cmp	r0, #1
 8013344:	bf38      	it	cc
 8013346:	2001      	movcc	r0, #1
 8013348:	f7ed f904 	bl	8000554 <__aeabi_ui2d>
 801334c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801334e:	4606      	mov	r6, r0
 8013350:	460f      	mov	r7, r1
 8013352:	bb23      	cbnz	r3, 801339e <_strtod_l+0xb66>
 8013354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013358:	9010      	str	r0, [sp, #64]	; 0x40
 801335a:	9311      	str	r3, [sp, #68]	; 0x44
 801335c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013360:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013368:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801336c:	1a9b      	subs	r3, r3, r2
 801336e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013370:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013374:	eeb0 0a48 	vmov.f32	s0, s16
 8013378:	eef0 0a68 	vmov.f32	s1, s17
 801337c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013380:	f7ff f8fc 	bl	801257c <__ulp>
 8013384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013388:	ec53 2b10 	vmov	r2, r3, d0
 801338c:	f7ed f95c 	bl	8000648 <__aeabi_dmul>
 8013390:	ec53 2b18 	vmov	r2, r3, d8
 8013394:	f7ec ffa2 	bl	80002dc <__adddf3>
 8013398:	4680      	mov	r8, r0
 801339a:	4689      	mov	r9, r1
 801339c:	e78d      	b.n	80132ba <_strtod_l+0xa82>
 801339e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80133a2:	e7db      	b.n	801335c <_strtod_l+0xb24>
 80133a4:	a314      	add	r3, pc, #80	; (adr r3, 80133f8 <_strtod_l+0xbc0>)
 80133a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133aa:	f7ed fbbf 	bl	8000b2c <__aeabi_dcmplt>
 80133ae:	e7b3      	b.n	8013318 <_strtod_l+0xae0>
 80133b0:	2300      	movs	r3, #0
 80133b2:	930a      	str	r3, [sp, #40]	; 0x28
 80133b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80133b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133b8:	6013      	str	r3, [r2, #0]
 80133ba:	f7ff ba7c 	b.w	80128b6 <_strtod_l+0x7e>
 80133be:	2a65      	cmp	r2, #101	; 0x65
 80133c0:	f43f ab75 	beq.w	8012aae <_strtod_l+0x276>
 80133c4:	2a45      	cmp	r2, #69	; 0x45
 80133c6:	f43f ab72 	beq.w	8012aae <_strtod_l+0x276>
 80133ca:	2301      	movs	r3, #1
 80133cc:	f7ff bbaa 	b.w	8012b24 <_strtod_l+0x2ec>
 80133d0:	00000000 	.word	0x00000000
 80133d4:	bff00000 	.word	0xbff00000
 80133d8:	00000000 	.word	0x00000000
 80133dc:	3ff00000 	.word	0x3ff00000
 80133e0:	94a03595 	.word	0x94a03595
 80133e4:	3fdfffff 	.word	0x3fdfffff
 80133e8:	35afe535 	.word	0x35afe535
 80133ec:	3fe00000 	.word	0x3fe00000
 80133f0:	ffc00000 	.word	0xffc00000
 80133f4:	41dfffff 	.word	0x41dfffff
 80133f8:	94a03595 	.word	0x94a03595
 80133fc:	3fcfffff 	.word	0x3fcfffff
 8013400:	3ff00000 	.word	0x3ff00000
 8013404:	3fe00000 	.word	0x3fe00000
 8013408:	7ff00000 	.word	0x7ff00000
 801340c:	7fe00000 	.word	0x7fe00000
 8013410:	7c9fffff 	.word	0x7c9fffff
 8013414:	7fefffff 	.word	0x7fefffff

08013418 <_strtod_r>:
 8013418:	4b01      	ldr	r3, [pc, #4]	; (8013420 <_strtod_r+0x8>)
 801341a:	f7ff ba0d 	b.w	8012838 <_strtod_l>
 801341e:	bf00      	nop
 8013420:	200000a4 	.word	0x200000a4

08013424 <_strtol_l.constprop.0>:
 8013424:	2b01      	cmp	r3, #1
 8013426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801342a:	d001      	beq.n	8013430 <_strtol_l.constprop.0+0xc>
 801342c:	2b24      	cmp	r3, #36	; 0x24
 801342e:	d906      	bls.n	801343e <_strtol_l.constprop.0+0x1a>
 8013430:	f7fd fe2e 	bl	8011090 <__errno>
 8013434:	2316      	movs	r3, #22
 8013436:	6003      	str	r3, [r0, #0]
 8013438:	2000      	movs	r0, #0
 801343a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801343e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013524 <_strtol_l.constprop.0+0x100>
 8013442:	460d      	mov	r5, r1
 8013444:	462e      	mov	r6, r5
 8013446:	f815 4b01 	ldrb.w	r4, [r5], #1
 801344a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801344e:	f017 0708 	ands.w	r7, r7, #8
 8013452:	d1f7      	bne.n	8013444 <_strtol_l.constprop.0+0x20>
 8013454:	2c2d      	cmp	r4, #45	; 0x2d
 8013456:	d132      	bne.n	80134be <_strtol_l.constprop.0+0x9a>
 8013458:	782c      	ldrb	r4, [r5, #0]
 801345a:	2701      	movs	r7, #1
 801345c:	1cb5      	adds	r5, r6, #2
 801345e:	2b00      	cmp	r3, #0
 8013460:	d05b      	beq.n	801351a <_strtol_l.constprop.0+0xf6>
 8013462:	2b10      	cmp	r3, #16
 8013464:	d109      	bne.n	801347a <_strtol_l.constprop.0+0x56>
 8013466:	2c30      	cmp	r4, #48	; 0x30
 8013468:	d107      	bne.n	801347a <_strtol_l.constprop.0+0x56>
 801346a:	782c      	ldrb	r4, [r5, #0]
 801346c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013470:	2c58      	cmp	r4, #88	; 0x58
 8013472:	d14d      	bne.n	8013510 <_strtol_l.constprop.0+0xec>
 8013474:	786c      	ldrb	r4, [r5, #1]
 8013476:	2310      	movs	r3, #16
 8013478:	3502      	adds	r5, #2
 801347a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801347e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013482:	f04f 0e00 	mov.w	lr, #0
 8013486:	fbb8 f9f3 	udiv	r9, r8, r3
 801348a:	4676      	mov	r6, lr
 801348c:	fb03 8a19 	mls	sl, r3, r9, r8
 8013490:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013494:	f1bc 0f09 	cmp.w	ip, #9
 8013498:	d816      	bhi.n	80134c8 <_strtol_l.constprop.0+0xa4>
 801349a:	4664      	mov	r4, ip
 801349c:	42a3      	cmp	r3, r4
 801349e:	dd24      	ble.n	80134ea <_strtol_l.constprop.0+0xc6>
 80134a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80134a4:	d008      	beq.n	80134b8 <_strtol_l.constprop.0+0x94>
 80134a6:	45b1      	cmp	r9, r6
 80134a8:	d31c      	bcc.n	80134e4 <_strtol_l.constprop.0+0xc0>
 80134aa:	d101      	bne.n	80134b0 <_strtol_l.constprop.0+0x8c>
 80134ac:	45a2      	cmp	sl, r4
 80134ae:	db19      	blt.n	80134e4 <_strtol_l.constprop.0+0xc0>
 80134b0:	fb06 4603 	mla	r6, r6, r3, r4
 80134b4:	f04f 0e01 	mov.w	lr, #1
 80134b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134bc:	e7e8      	b.n	8013490 <_strtol_l.constprop.0+0x6c>
 80134be:	2c2b      	cmp	r4, #43	; 0x2b
 80134c0:	bf04      	itt	eq
 80134c2:	782c      	ldrbeq	r4, [r5, #0]
 80134c4:	1cb5      	addeq	r5, r6, #2
 80134c6:	e7ca      	b.n	801345e <_strtol_l.constprop.0+0x3a>
 80134c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80134cc:	f1bc 0f19 	cmp.w	ip, #25
 80134d0:	d801      	bhi.n	80134d6 <_strtol_l.constprop.0+0xb2>
 80134d2:	3c37      	subs	r4, #55	; 0x37
 80134d4:	e7e2      	b.n	801349c <_strtol_l.constprop.0+0x78>
 80134d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80134da:	f1bc 0f19 	cmp.w	ip, #25
 80134de:	d804      	bhi.n	80134ea <_strtol_l.constprop.0+0xc6>
 80134e0:	3c57      	subs	r4, #87	; 0x57
 80134e2:	e7db      	b.n	801349c <_strtol_l.constprop.0+0x78>
 80134e4:	f04f 3eff 	mov.w	lr, #4294967295
 80134e8:	e7e6      	b.n	80134b8 <_strtol_l.constprop.0+0x94>
 80134ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80134ee:	d105      	bne.n	80134fc <_strtol_l.constprop.0+0xd8>
 80134f0:	2322      	movs	r3, #34	; 0x22
 80134f2:	6003      	str	r3, [r0, #0]
 80134f4:	4646      	mov	r6, r8
 80134f6:	b942      	cbnz	r2, 801350a <_strtol_l.constprop.0+0xe6>
 80134f8:	4630      	mov	r0, r6
 80134fa:	e79e      	b.n	801343a <_strtol_l.constprop.0+0x16>
 80134fc:	b107      	cbz	r7, 8013500 <_strtol_l.constprop.0+0xdc>
 80134fe:	4276      	negs	r6, r6
 8013500:	2a00      	cmp	r2, #0
 8013502:	d0f9      	beq.n	80134f8 <_strtol_l.constprop.0+0xd4>
 8013504:	f1be 0f00 	cmp.w	lr, #0
 8013508:	d000      	beq.n	801350c <_strtol_l.constprop.0+0xe8>
 801350a:	1e69      	subs	r1, r5, #1
 801350c:	6011      	str	r1, [r2, #0]
 801350e:	e7f3      	b.n	80134f8 <_strtol_l.constprop.0+0xd4>
 8013510:	2430      	movs	r4, #48	; 0x30
 8013512:	2b00      	cmp	r3, #0
 8013514:	d1b1      	bne.n	801347a <_strtol_l.constprop.0+0x56>
 8013516:	2308      	movs	r3, #8
 8013518:	e7af      	b.n	801347a <_strtol_l.constprop.0+0x56>
 801351a:	2c30      	cmp	r4, #48	; 0x30
 801351c:	d0a5      	beq.n	801346a <_strtol_l.constprop.0+0x46>
 801351e:	230a      	movs	r3, #10
 8013520:	e7ab      	b.n	801347a <_strtol_l.constprop.0+0x56>
 8013522:	bf00      	nop
 8013524:	080159c9 	.word	0x080159c9

08013528 <_strtol_r>:
 8013528:	f7ff bf7c 	b.w	8013424 <_strtol_l.constprop.0>

0801352c <__ssputs_r>:
 801352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013530:	688e      	ldr	r6, [r1, #8]
 8013532:	461f      	mov	r7, r3
 8013534:	42be      	cmp	r6, r7
 8013536:	680b      	ldr	r3, [r1, #0]
 8013538:	4682      	mov	sl, r0
 801353a:	460c      	mov	r4, r1
 801353c:	4690      	mov	r8, r2
 801353e:	d82c      	bhi.n	801359a <__ssputs_r+0x6e>
 8013540:	898a      	ldrh	r2, [r1, #12]
 8013542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013546:	d026      	beq.n	8013596 <__ssputs_r+0x6a>
 8013548:	6965      	ldr	r5, [r4, #20]
 801354a:	6909      	ldr	r1, [r1, #16]
 801354c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013550:	eba3 0901 	sub.w	r9, r3, r1
 8013554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013558:	1c7b      	adds	r3, r7, #1
 801355a:	444b      	add	r3, r9
 801355c:	106d      	asrs	r5, r5, #1
 801355e:	429d      	cmp	r5, r3
 8013560:	bf38      	it	cc
 8013562:	461d      	movcc	r5, r3
 8013564:	0553      	lsls	r3, r2, #21
 8013566:	d527      	bpl.n	80135b8 <__ssputs_r+0x8c>
 8013568:	4629      	mov	r1, r5
 801356a:	f7fc fc75 	bl	800fe58 <_malloc_r>
 801356e:	4606      	mov	r6, r0
 8013570:	b360      	cbz	r0, 80135cc <__ssputs_r+0xa0>
 8013572:	6921      	ldr	r1, [r4, #16]
 8013574:	464a      	mov	r2, r9
 8013576:	f7fd fdb8 	bl	80110ea <memcpy>
 801357a:	89a3      	ldrh	r3, [r4, #12]
 801357c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013584:	81a3      	strh	r3, [r4, #12]
 8013586:	6126      	str	r6, [r4, #16]
 8013588:	6165      	str	r5, [r4, #20]
 801358a:	444e      	add	r6, r9
 801358c:	eba5 0509 	sub.w	r5, r5, r9
 8013590:	6026      	str	r6, [r4, #0]
 8013592:	60a5      	str	r5, [r4, #8]
 8013594:	463e      	mov	r6, r7
 8013596:	42be      	cmp	r6, r7
 8013598:	d900      	bls.n	801359c <__ssputs_r+0x70>
 801359a:	463e      	mov	r6, r7
 801359c:	6820      	ldr	r0, [r4, #0]
 801359e:	4632      	mov	r2, r6
 80135a0:	4641      	mov	r1, r8
 80135a2:	f7fd fca2 	bl	8010eea <memmove>
 80135a6:	68a3      	ldr	r3, [r4, #8]
 80135a8:	1b9b      	subs	r3, r3, r6
 80135aa:	60a3      	str	r3, [r4, #8]
 80135ac:	6823      	ldr	r3, [r4, #0]
 80135ae:	4433      	add	r3, r6
 80135b0:	6023      	str	r3, [r4, #0]
 80135b2:	2000      	movs	r0, #0
 80135b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135b8:	462a      	mov	r2, r5
 80135ba:	f000 ff30 	bl	801441e <_realloc_r>
 80135be:	4606      	mov	r6, r0
 80135c0:	2800      	cmp	r0, #0
 80135c2:	d1e0      	bne.n	8013586 <__ssputs_r+0x5a>
 80135c4:	6921      	ldr	r1, [r4, #16]
 80135c6:	4650      	mov	r0, sl
 80135c8:	f7fe fc20 	bl	8011e0c <_free_r>
 80135cc:	230c      	movs	r3, #12
 80135ce:	f8ca 3000 	str.w	r3, [sl]
 80135d2:	89a3      	ldrh	r3, [r4, #12]
 80135d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135d8:	81a3      	strh	r3, [r4, #12]
 80135da:	f04f 30ff 	mov.w	r0, #4294967295
 80135de:	e7e9      	b.n	80135b4 <__ssputs_r+0x88>

080135e0 <_svfiprintf_r>:
 80135e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e4:	4698      	mov	r8, r3
 80135e6:	898b      	ldrh	r3, [r1, #12]
 80135e8:	061b      	lsls	r3, r3, #24
 80135ea:	b09d      	sub	sp, #116	; 0x74
 80135ec:	4607      	mov	r7, r0
 80135ee:	460d      	mov	r5, r1
 80135f0:	4614      	mov	r4, r2
 80135f2:	d50e      	bpl.n	8013612 <_svfiprintf_r+0x32>
 80135f4:	690b      	ldr	r3, [r1, #16]
 80135f6:	b963      	cbnz	r3, 8013612 <_svfiprintf_r+0x32>
 80135f8:	2140      	movs	r1, #64	; 0x40
 80135fa:	f7fc fc2d 	bl	800fe58 <_malloc_r>
 80135fe:	6028      	str	r0, [r5, #0]
 8013600:	6128      	str	r0, [r5, #16]
 8013602:	b920      	cbnz	r0, 801360e <_svfiprintf_r+0x2e>
 8013604:	230c      	movs	r3, #12
 8013606:	603b      	str	r3, [r7, #0]
 8013608:	f04f 30ff 	mov.w	r0, #4294967295
 801360c:	e0d0      	b.n	80137b0 <_svfiprintf_r+0x1d0>
 801360e:	2340      	movs	r3, #64	; 0x40
 8013610:	616b      	str	r3, [r5, #20]
 8013612:	2300      	movs	r3, #0
 8013614:	9309      	str	r3, [sp, #36]	; 0x24
 8013616:	2320      	movs	r3, #32
 8013618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801361c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013620:	2330      	movs	r3, #48	; 0x30
 8013622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80137c8 <_svfiprintf_r+0x1e8>
 8013626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801362a:	f04f 0901 	mov.w	r9, #1
 801362e:	4623      	mov	r3, r4
 8013630:	469a      	mov	sl, r3
 8013632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013636:	b10a      	cbz	r2, 801363c <_svfiprintf_r+0x5c>
 8013638:	2a25      	cmp	r2, #37	; 0x25
 801363a:	d1f9      	bne.n	8013630 <_svfiprintf_r+0x50>
 801363c:	ebba 0b04 	subs.w	fp, sl, r4
 8013640:	d00b      	beq.n	801365a <_svfiprintf_r+0x7a>
 8013642:	465b      	mov	r3, fp
 8013644:	4622      	mov	r2, r4
 8013646:	4629      	mov	r1, r5
 8013648:	4638      	mov	r0, r7
 801364a:	f7ff ff6f 	bl	801352c <__ssputs_r>
 801364e:	3001      	adds	r0, #1
 8013650:	f000 80a9 	beq.w	80137a6 <_svfiprintf_r+0x1c6>
 8013654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013656:	445a      	add	r2, fp
 8013658:	9209      	str	r2, [sp, #36]	; 0x24
 801365a:	f89a 3000 	ldrb.w	r3, [sl]
 801365e:	2b00      	cmp	r3, #0
 8013660:	f000 80a1 	beq.w	80137a6 <_svfiprintf_r+0x1c6>
 8013664:	2300      	movs	r3, #0
 8013666:	f04f 32ff 	mov.w	r2, #4294967295
 801366a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801366e:	f10a 0a01 	add.w	sl, sl, #1
 8013672:	9304      	str	r3, [sp, #16]
 8013674:	9307      	str	r3, [sp, #28]
 8013676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801367a:	931a      	str	r3, [sp, #104]	; 0x68
 801367c:	4654      	mov	r4, sl
 801367e:	2205      	movs	r2, #5
 8013680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013684:	4850      	ldr	r0, [pc, #320]	; (80137c8 <_svfiprintf_r+0x1e8>)
 8013686:	f7ec fdcb 	bl	8000220 <memchr>
 801368a:	9a04      	ldr	r2, [sp, #16]
 801368c:	b9d8      	cbnz	r0, 80136c6 <_svfiprintf_r+0xe6>
 801368e:	06d0      	lsls	r0, r2, #27
 8013690:	bf44      	itt	mi
 8013692:	2320      	movmi	r3, #32
 8013694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013698:	0711      	lsls	r1, r2, #28
 801369a:	bf44      	itt	mi
 801369c:	232b      	movmi	r3, #43	; 0x2b
 801369e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136a2:	f89a 3000 	ldrb.w	r3, [sl]
 80136a6:	2b2a      	cmp	r3, #42	; 0x2a
 80136a8:	d015      	beq.n	80136d6 <_svfiprintf_r+0xf6>
 80136aa:	9a07      	ldr	r2, [sp, #28]
 80136ac:	4654      	mov	r4, sl
 80136ae:	2000      	movs	r0, #0
 80136b0:	f04f 0c0a 	mov.w	ip, #10
 80136b4:	4621      	mov	r1, r4
 80136b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136ba:	3b30      	subs	r3, #48	; 0x30
 80136bc:	2b09      	cmp	r3, #9
 80136be:	d94d      	bls.n	801375c <_svfiprintf_r+0x17c>
 80136c0:	b1b0      	cbz	r0, 80136f0 <_svfiprintf_r+0x110>
 80136c2:	9207      	str	r2, [sp, #28]
 80136c4:	e014      	b.n	80136f0 <_svfiprintf_r+0x110>
 80136c6:	eba0 0308 	sub.w	r3, r0, r8
 80136ca:	fa09 f303 	lsl.w	r3, r9, r3
 80136ce:	4313      	orrs	r3, r2
 80136d0:	9304      	str	r3, [sp, #16]
 80136d2:	46a2      	mov	sl, r4
 80136d4:	e7d2      	b.n	801367c <_svfiprintf_r+0x9c>
 80136d6:	9b03      	ldr	r3, [sp, #12]
 80136d8:	1d19      	adds	r1, r3, #4
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	9103      	str	r1, [sp, #12]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	bfbb      	ittet	lt
 80136e2:	425b      	neglt	r3, r3
 80136e4:	f042 0202 	orrlt.w	r2, r2, #2
 80136e8:	9307      	strge	r3, [sp, #28]
 80136ea:	9307      	strlt	r3, [sp, #28]
 80136ec:	bfb8      	it	lt
 80136ee:	9204      	strlt	r2, [sp, #16]
 80136f0:	7823      	ldrb	r3, [r4, #0]
 80136f2:	2b2e      	cmp	r3, #46	; 0x2e
 80136f4:	d10c      	bne.n	8013710 <_svfiprintf_r+0x130>
 80136f6:	7863      	ldrb	r3, [r4, #1]
 80136f8:	2b2a      	cmp	r3, #42	; 0x2a
 80136fa:	d134      	bne.n	8013766 <_svfiprintf_r+0x186>
 80136fc:	9b03      	ldr	r3, [sp, #12]
 80136fe:	1d1a      	adds	r2, r3, #4
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	9203      	str	r2, [sp, #12]
 8013704:	2b00      	cmp	r3, #0
 8013706:	bfb8      	it	lt
 8013708:	f04f 33ff 	movlt.w	r3, #4294967295
 801370c:	3402      	adds	r4, #2
 801370e:	9305      	str	r3, [sp, #20]
 8013710:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80137d8 <_svfiprintf_r+0x1f8>
 8013714:	7821      	ldrb	r1, [r4, #0]
 8013716:	2203      	movs	r2, #3
 8013718:	4650      	mov	r0, sl
 801371a:	f7ec fd81 	bl	8000220 <memchr>
 801371e:	b138      	cbz	r0, 8013730 <_svfiprintf_r+0x150>
 8013720:	9b04      	ldr	r3, [sp, #16]
 8013722:	eba0 000a 	sub.w	r0, r0, sl
 8013726:	2240      	movs	r2, #64	; 0x40
 8013728:	4082      	lsls	r2, r0
 801372a:	4313      	orrs	r3, r2
 801372c:	3401      	adds	r4, #1
 801372e:	9304      	str	r3, [sp, #16]
 8013730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013734:	4825      	ldr	r0, [pc, #148]	; (80137cc <_svfiprintf_r+0x1ec>)
 8013736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801373a:	2206      	movs	r2, #6
 801373c:	f7ec fd70 	bl	8000220 <memchr>
 8013740:	2800      	cmp	r0, #0
 8013742:	d038      	beq.n	80137b6 <_svfiprintf_r+0x1d6>
 8013744:	4b22      	ldr	r3, [pc, #136]	; (80137d0 <_svfiprintf_r+0x1f0>)
 8013746:	bb1b      	cbnz	r3, 8013790 <_svfiprintf_r+0x1b0>
 8013748:	9b03      	ldr	r3, [sp, #12]
 801374a:	3307      	adds	r3, #7
 801374c:	f023 0307 	bic.w	r3, r3, #7
 8013750:	3308      	adds	r3, #8
 8013752:	9303      	str	r3, [sp, #12]
 8013754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013756:	4433      	add	r3, r6
 8013758:	9309      	str	r3, [sp, #36]	; 0x24
 801375a:	e768      	b.n	801362e <_svfiprintf_r+0x4e>
 801375c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013760:	460c      	mov	r4, r1
 8013762:	2001      	movs	r0, #1
 8013764:	e7a6      	b.n	80136b4 <_svfiprintf_r+0xd4>
 8013766:	2300      	movs	r3, #0
 8013768:	3401      	adds	r4, #1
 801376a:	9305      	str	r3, [sp, #20]
 801376c:	4619      	mov	r1, r3
 801376e:	f04f 0c0a 	mov.w	ip, #10
 8013772:	4620      	mov	r0, r4
 8013774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013778:	3a30      	subs	r2, #48	; 0x30
 801377a:	2a09      	cmp	r2, #9
 801377c:	d903      	bls.n	8013786 <_svfiprintf_r+0x1a6>
 801377e:	2b00      	cmp	r3, #0
 8013780:	d0c6      	beq.n	8013710 <_svfiprintf_r+0x130>
 8013782:	9105      	str	r1, [sp, #20]
 8013784:	e7c4      	b.n	8013710 <_svfiprintf_r+0x130>
 8013786:	fb0c 2101 	mla	r1, ip, r1, r2
 801378a:	4604      	mov	r4, r0
 801378c:	2301      	movs	r3, #1
 801378e:	e7f0      	b.n	8013772 <_svfiprintf_r+0x192>
 8013790:	ab03      	add	r3, sp, #12
 8013792:	9300      	str	r3, [sp, #0]
 8013794:	462a      	mov	r2, r5
 8013796:	4b0f      	ldr	r3, [pc, #60]	; (80137d4 <_svfiprintf_r+0x1f4>)
 8013798:	a904      	add	r1, sp, #16
 801379a:	4638      	mov	r0, r7
 801379c:	f7fc fc88 	bl	80100b0 <_printf_float>
 80137a0:	1c42      	adds	r2, r0, #1
 80137a2:	4606      	mov	r6, r0
 80137a4:	d1d6      	bne.n	8013754 <_svfiprintf_r+0x174>
 80137a6:	89ab      	ldrh	r3, [r5, #12]
 80137a8:	065b      	lsls	r3, r3, #25
 80137aa:	f53f af2d 	bmi.w	8013608 <_svfiprintf_r+0x28>
 80137ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137b0:	b01d      	add	sp, #116	; 0x74
 80137b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b6:	ab03      	add	r3, sp, #12
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	462a      	mov	r2, r5
 80137bc:	4b05      	ldr	r3, [pc, #20]	; (80137d4 <_svfiprintf_r+0x1f4>)
 80137be:	a904      	add	r1, sp, #16
 80137c0:	4638      	mov	r0, r7
 80137c2:	f7fc ff19 	bl	80105f8 <_printf_i>
 80137c6:	e7eb      	b.n	80137a0 <_svfiprintf_r+0x1c0>
 80137c8:	08015ac9 	.word	0x08015ac9
 80137cc:	08015ad3 	.word	0x08015ad3
 80137d0:	080100b1 	.word	0x080100b1
 80137d4:	0801352d 	.word	0x0801352d
 80137d8:	08015acf 	.word	0x08015acf

080137dc <__sfputc_r>:
 80137dc:	6893      	ldr	r3, [r2, #8]
 80137de:	3b01      	subs	r3, #1
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	b410      	push	{r4}
 80137e4:	6093      	str	r3, [r2, #8]
 80137e6:	da08      	bge.n	80137fa <__sfputc_r+0x1e>
 80137e8:	6994      	ldr	r4, [r2, #24]
 80137ea:	42a3      	cmp	r3, r4
 80137ec:	db01      	blt.n	80137f2 <__sfputc_r+0x16>
 80137ee:	290a      	cmp	r1, #10
 80137f0:	d103      	bne.n	80137fa <__sfputc_r+0x1e>
 80137f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137f6:	f000 b9e3 	b.w	8013bc0 <__swbuf_r>
 80137fa:	6813      	ldr	r3, [r2, #0]
 80137fc:	1c58      	adds	r0, r3, #1
 80137fe:	6010      	str	r0, [r2, #0]
 8013800:	7019      	strb	r1, [r3, #0]
 8013802:	4608      	mov	r0, r1
 8013804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013808:	4770      	bx	lr

0801380a <__sfputs_r>:
 801380a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380c:	4606      	mov	r6, r0
 801380e:	460f      	mov	r7, r1
 8013810:	4614      	mov	r4, r2
 8013812:	18d5      	adds	r5, r2, r3
 8013814:	42ac      	cmp	r4, r5
 8013816:	d101      	bne.n	801381c <__sfputs_r+0x12>
 8013818:	2000      	movs	r0, #0
 801381a:	e007      	b.n	801382c <__sfputs_r+0x22>
 801381c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013820:	463a      	mov	r2, r7
 8013822:	4630      	mov	r0, r6
 8013824:	f7ff ffda 	bl	80137dc <__sfputc_r>
 8013828:	1c43      	adds	r3, r0, #1
 801382a:	d1f3      	bne.n	8013814 <__sfputs_r+0xa>
 801382c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013830 <_vfiprintf_r>:
 8013830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013834:	460d      	mov	r5, r1
 8013836:	b09d      	sub	sp, #116	; 0x74
 8013838:	4614      	mov	r4, r2
 801383a:	4698      	mov	r8, r3
 801383c:	4606      	mov	r6, r0
 801383e:	b118      	cbz	r0, 8013848 <_vfiprintf_r+0x18>
 8013840:	6a03      	ldr	r3, [r0, #32]
 8013842:	b90b      	cbnz	r3, 8013848 <_vfiprintf_r+0x18>
 8013844:	f7fd fa96 	bl	8010d74 <__sinit>
 8013848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801384a:	07d9      	lsls	r1, r3, #31
 801384c:	d405      	bmi.n	801385a <_vfiprintf_r+0x2a>
 801384e:	89ab      	ldrh	r3, [r5, #12]
 8013850:	059a      	lsls	r2, r3, #22
 8013852:	d402      	bmi.n	801385a <_vfiprintf_r+0x2a>
 8013854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013856:	f7fd fc46 	bl	80110e6 <__retarget_lock_acquire_recursive>
 801385a:	89ab      	ldrh	r3, [r5, #12]
 801385c:	071b      	lsls	r3, r3, #28
 801385e:	d501      	bpl.n	8013864 <_vfiprintf_r+0x34>
 8013860:	692b      	ldr	r3, [r5, #16]
 8013862:	b99b      	cbnz	r3, 801388c <_vfiprintf_r+0x5c>
 8013864:	4629      	mov	r1, r5
 8013866:	4630      	mov	r0, r6
 8013868:	f000 f9e8 	bl	8013c3c <__swsetup_r>
 801386c:	b170      	cbz	r0, 801388c <_vfiprintf_r+0x5c>
 801386e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013870:	07dc      	lsls	r4, r3, #31
 8013872:	d504      	bpl.n	801387e <_vfiprintf_r+0x4e>
 8013874:	f04f 30ff 	mov.w	r0, #4294967295
 8013878:	b01d      	add	sp, #116	; 0x74
 801387a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387e:	89ab      	ldrh	r3, [r5, #12]
 8013880:	0598      	lsls	r0, r3, #22
 8013882:	d4f7      	bmi.n	8013874 <_vfiprintf_r+0x44>
 8013884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013886:	f7fd fc2f 	bl	80110e8 <__retarget_lock_release_recursive>
 801388a:	e7f3      	b.n	8013874 <_vfiprintf_r+0x44>
 801388c:	2300      	movs	r3, #0
 801388e:	9309      	str	r3, [sp, #36]	; 0x24
 8013890:	2320      	movs	r3, #32
 8013892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013896:	f8cd 800c 	str.w	r8, [sp, #12]
 801389a:	2330      	movs	r3, #48	; 0x30
 801389c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013a50 <_vfiprintf_r+0x220>
 80138a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138a4:	f04f 0901 	mov.w	r9, #1
 80138a8:	4623      	mov	r3, r4
 80138aa:	469a      	mov	sl, r3
 80138ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138b0:	b10a      	cbz	r2, 80138b6 <_vfiprintf_r+0x86>
 80138b2:	2a25      	cmp	r2, #37	; 0x25
 80138b4:	d1f9      	bne.n	80138aa <_vfiprintf_r+0x7a>
 80138b6:	ebba 0b04 	subs.w	fp, sl, r4
 80138ba:	d00b      	beq.n	80138d4 <_vfiprintf_r+0xa4>
 80138bc:	465b      	mov	r3, fp
 80138be:	4622      	mov	r2, r4
 80138c0:	4629      	mov	r1, r5
 80138c2:	4630      	mov	r0, r6
 80138c4:	f7ff ffa1 	bl	801380a <__sfputs_r>
 80138c8:	3001      	adds	r0, #1
 80138ca:	f000 80a9 	beq.w	8013a20 <_vfiprintf_r+0x1f0>
 80138ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138d0:	445a      	add	r2, fp
 80138d2:	9209      	str	r2, [sp, #36]	; 0x24
 80138d4:	f89a 3000 	ldrb.w	r3, [sl]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f000 80a1 	beq.w	8013a20 <_vfiprintf_r+0x1f0>
 80138de:	2300      	movs	r3, #0
 80138e0:	f04f 32ff 	mov.w	r2, #4294967295
 80138e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138e8:	f10a 0a01 	add.w	sl, sl, #1
 80138ec:	9304      	str	r3, [sp, #16]
 80138ee:	9307      	str	r3, [sp, #28]
 80138f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138f4:	931a      	str	r3, [sp, #104]	; 0x68
 80138f6:	4654      	mov	r4, sl
 80138f8:	2205      	movs	r2, #5
 80138fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138fe:	4854      	ldr	r0, [pc, #336]	; (8013a50 <_vfiprintf_r+0x220>)
 8013900:	f7ec fc8e 	bl	8000220 <memchr>
 8013904:	9a04      	ldr	r2, [sp, #16]
 8013906:	b9d8      	cbnz	r0, 8013940 <_vfiprintf_r+0x110>
 8013908:	06d1      	lsls	r1, r2, #27
 801390a:	bf44      	itt	mi
 801390c:	2320      	movmi	r3, #32
 801390e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013912:	0713      	lsls	r3, r2, #28
 8013914:	bf44      	itt	mi
 8013916:	232b      	movmi	r3, #43	; 0x2b
 8013918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801391c:	f89a 3000 	ldrb.w	r3, [sl]
 8013920:	2b2a      	cmp	r3, #42	; 0x2a
 8013922:	d015      	beq.n	8013950 <_vfiprintf_r+0x120>
 8013924:	9a07      	ldr	r2, [sp, #28]
 8013926:	4654      	mov	r4, sl
 8013928:	2000      	movs	r0, #0
 801392a:	f04f 0c0a 	mov.w	ip, #10
 801392e:	4621      	mov	r1, r4
 8013930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013934:	3b30      	subs	r3, #48	; 0x30
 8013936:	2b09      	cmp	r3, #9
 8013938:	d94d      	bls.n	80139d6 <_vfiprintf_r+0x1a6>
 801393a:	b1b0      	cbz	r0, 801396a <_vfiprintf_r+0x13a>
 801393c:	9207      	str	r2, [sp, #28]
 801393e:	e014      	b.n	801396a <_vfiprintf_r+0x13a>
 8013940:	eba0 0308 	sub.w	r3, r0, r8
 8013944:	fa09 f303 	lsl.w	r3, r9, r3
 8013948:	4313      	orrs	r3, r2
 801394a:	9304      	str	r3, [sp, #16]
 801394c:	46a2      	mov	sl, r4
 801394e:	e7d2      	b.n	80138f6 <_vfiprintf_r+0xc6>
 8013950:	9b03      	ldr	r3, [sp, #12]
 8013952:	1d19      	adds	r1, r3, #4
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	9103      	str	r1, [sp, #12]
 8013958:	2b00      	cmp	r3, #0
 801395a:	bfbb      	ittet	lt
 801395c:	425b      	neglt	r3, r3
 801395e:	f042 0202 	orrlt.w	r2, r2, #2
 8013962:	9307      	strge	r3, [sp, #28]
 8013964:	9307      	strlt	r3, [sp, #28]
 8013966:	bfb8      	it	lt
 8013968:	9204      	strlt	r2, [sp, #16]
 801396a:	7823      	ldrb	r3, [r4, #0]
 801396c:	2b2e      	cmp	r3, #46	; 0x2e
 801396e:	d10c      	bne.n	801398a <_vfiprintf_r+0x15a>
 8013970:	7863      	ldrb	r3, [r4, #1]
 8013972:	2b2a      	cmp	r3, #42	; 0x2a
 8013974:	d134      	bne.n	80139e0 <_vfiprintf_r+0x1b0>
 8013976:	9b03      	ldr	r3, [sp, #12]
 8013978:	1d1a      	adds	r2, r3, #4
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	9203      	str	r2, [sp, #12]
 801397e:	2b00      	cmp	r3, #0
 8013980:	bfb8      	it	lt
 8013982:	f04f 33ff 	movlt.w	r3, #4294967295
 8013986:	3402      	adds	r4, #2
 8013988:	9305      	str	r3, [sp, #20]
 801398a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013a60 <_vfiprintf_r+0x230>
 801398e:	7821      	ldrb	r1, [r4, #0]
 8013990:	2203      	movs	r2, #3
 8013992:	4650      	mov	r0, sl
 8013994:	f7ec fc44 	bl	8000220 <memchr>
 8013998:	b138      	cbz	r0, 80139aa <_vfiprintf_r+0x17a>
 801399a:	9b04      	ldr	r3, [sp, #16]
 801399c:	eba0 000a 	sub.w	r0, r0, sl
 80139a0:	2240      	movs	r2, #64	; 0x40
 80139a2:	4082      	lsls	r2, r0
 80139a4:	4313      	orrs	r3, r2
 80139a6:	3401      	adds	r4, #1
 80139a8:	9304      	str	r3, [sp, #16]
 80139aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139ae:	4829      	ldr	r0, [pc, #164]	; (8013a54 <_vfiprintf_r+0x224>)
 80139b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139b4:	2206      	movs	r2, #6
 80139b6:	f7ec fc33 	bl	8000220 <memchr>
 80139ba:	2800      	cmp	r0, #0
 80139bc:	d03f      	beq.n	8013a3e <_vfiprintf_r+0x20e>
 80139be:	4b26      	ldr	r3, [pc, #152]	; (8013a58 <_vfiprintf_r+0x228>)
 80139c0:	bb1b      	cbnz	r3, 8013a0a <_vfiprintf_r+0x1da>
 80139c2:	9b03      	ldr	r3, [sp, #12]
 80139c4:	3307      	adds	r3, #7
 80139c6:	f023 0307 	bic.w	r3, r3, #7
 80139ca:	3308      	adds	r3, #8
 80139cc:	9303      	str	r3, [sp, #12]
 80139ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139d0:	443b      	add	r3, r7
 80139d2:	9309      	str	r3, [sp, #36]	; 0x24
 80139d4:	e768      	b.n	80138a8 <_vfiprintf_r+0x78>
 80139d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80139da:	460c      	mov	r4, r1
 80139dc:	2001      	movs	r0, #1
 80139de:	e7a6      	b.n	801392e <_vfiprintf_r+0xfe>
 80139e0:	2300      	movs	r3, #0
 80139e2:	3401      	adds	r4, #1
 80139e4:	9305      	str	r3, [sp, #20]
 80139e6:	4619      	mov	r1, r3
 80139e8:	f04f 0c0a 	mov.w	ip, #10
 80139ec:	4620      	mov	r0, r4
 80139ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139f2:	3a30      	subs	r2, #48	; 0x30
 80139f4:	2a09      	cmp	r2, #9
 80139f6:	d903      	bls.n	8013a00 <_vfiprintf_r+0x1d0>
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d0c6      	beq.n	801398a <_vfiprintf_r+0x15a>
 80139fc:	9105      	str	r1, [sp, #20]
 80139fe:	e7c4      	b.n	801398a <_vfiprintf_r+0x15a>
 8013a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a04:	4604      	mov	r4, r0
 8013a06:	2301      	movs	r3, #1
 8013a08:	e7f0      	b.n	80139ec <_vfiprintf_r+0x1bc>
 8013a0a:	ab03      	add	r3, sp, #12
 8013a0c:	9300      	str	r3, [sp, #0]
 8013a0e:	462a      	mov	r2, r5
 8013a10:	4b12      	ldr	r3, [pc, #72]	; (8013a5c <_vfiprintf_r+0x22c>)
 8013a12:	a904      	add	r1, sp, #16
 8013a14:	4630      	mov	r0, r6
 8013a16:	f7fc fb4b 	bl	80100b0 <_printf_float>
 8013a1a:	4607      	mov	r7, r0
 8013a1c:	1c78      	adds	r0, r7, #1
 8013a1e:	d1d6      	bne.n	80139ce <_vfiprintf_r+0x19e>
 8013a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a22:	07d9      	lsls	r1, r3, #31
 8013a24:	d405      	bmi.n	8013a32 <_vfiprintf_r+0x202>
 8013a26:	89ab      	ldrh	r3, [r5, #12]
 8013a28:	059a      	lsls	r2, r3, #22
 8013a2a:	d402      	bmi.n	8013a32 <_vfiprintf_r+0x202>
 8013a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a2e:	f7fd fb5b 	bl	80110e8 <__retarget_lock_release_recursive>
 8013a32:	89ab      	ldrh	r3, [r5, #12]
 8013a34:	065b      	lsls	r3, r3, #25
 8013a36:	f53f af1d 	bmi.w	8013874 <_vfiprintf_r+0x44>
 8013a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a3c:	e71c      	b.n	8013878 <_vfiprintf_r+0x48>
 8013a3e:	ab03      	add	r3, sp, #12
 8013a40:	9300      	str	r3, [sp, #0]
 8013a42:	462a      	mov	r2, r5
 8013a44:	4b05      	ldr	r3, [pc, #20]	; (8013a5c <_vfiprintf_r+0x22c>)
 8013a46:	a904      	add	r1, sp, #16
 8013a48:	4630      	mov	r0, r6
 8013a4a:	f7fc fdd5 	bl	80105f8 <_printf_i>
 8013a4e:	e7e4      	b.n	8013a1a <_vfiprintf_r+0x1ea>
 8013a50:	08015ac9 	.word	0x08015ac9
 8013a54:	08015ad3 	.word	0x08015ad3
 8013a58:	080100b1 	.word	0x080100b1
 8013a5c:	0801380b 	.word	0x0801380b
 8013a60:	08015acf 	.word	0x08015acf

08013a64 <__sflush_r>:
 8013a64:	898a      	ldrh	r2, [r1, #12]
 8013a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a6a:	4605      	mov	r5, r0
 8013a6c:	0710      	lsls	r0, r2, #28
 8013a6e:	460c      	mov	r4, r1
 8013a70:	d458      	bmi.n	8013b24 <__sflush_r+0xc0>
 8013a72:	684b      	ldr	r3, [r1, #4]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	dc05      	bgt.n	8013a84 <__sflush_r+0x20>
 8013a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	dc02      	bgt.n	8013a84 <__sflush_r+0x20>
 8013a7e:	2000      	movs	r0, #0
 8013a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a86:	2e00      	cmp	r6, #0
 8013a88:	d0f9      	beq.n	8013a7e <__sflush_r+0x1a>
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a90:	682f      	ldr	r7, [r5, #0]
 8013a92:	6a21      	ldr	r1, [r4, #32]
 8013a94:	602b      	str	r3, [r5, #0]
 8013a96:	d032      	beq.n	8013afe <__sflush_r+0x9a>
 8013a98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a9a:	89a3      	ldrh	r3, [r4, #12]
 8013a9c:	075a      	lsls	r2, r3, #29
 8013a9e:	d505      	bpl.n	8013aac <__sflush_r+0x48>
 8013aa0:	6863      	ldr	r3, [r4, #4]
 8013aa2:	1ac0      	subs	r0, r0, r3
 8013aa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013aa6:	b10b      	cbz	r3, 8013aac <__sflush_r+0x48>
 8013aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013aaa:	1ac0      	subs	r0, r0, r3
 8013aac:	2300      	movs	r3, #0
 8013aae:	4602      	mov	r2, r0
 8013ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ab2:	6a21      	ldr	r1, [r4, #32]
 8013ab4:	4628      	mov	r0, r5
 8013ab6:	47b0      	blx	r6
 8013ab8:	1c43      	adds	r3, r0, #1
 8013aba:	89a3      	ldrh	r3, [r4, #12]
 8013abc:	d106      	bne.n	8013acc <__sflush_r+0x68>
 8013abe:	6829      	ldr	r1, [r5, #0]
 8013ac0:	291d      	cmp	r1, #29
 8013ac2:	d82b      	bhi.n	8013b1c <__sflush_r+0xb8>
 8013ac4:	4a29      	ldr	r2, [pc, #164]	; (8013b6c <__sflush_r+0x108>)
 8013ac6:	410a      	asrs	r2, r1
 8013ac8:	07d6      	lsls	r6, r2, #31
 8013aca:	d427      	bmi.n	8013b1c <__sflush_r+0xb8>
 8013acc:	2200      	movs	r2, #0
 8013ace:	6062      	str	r2, [r4, #4]
 8013ad0:	04d9      	lsls	r1, r3, #19
 8013ad2:	6922      	ldr	r2, [r4, #16]
 8013ad4:	6022      	str	r2, [r4, #0]
 8013ad6:	d504      	bpl.n	8013ae2 <__sflush_r+0x7e>
 8013ad8:	1c42      	adds	r2, r0, #1
 8013ada:	d101      	bne.n	8013ae0 <__sflush_r+0x7c>
 8013adc:	682b      	ldr	r3, [r5, #0]
 8013ade:	b903      	cbnz	r3, 8013ae2 <__sflush_r+0x7e>
 8013ae0:	6560      	str	r0, [r4, #84]	; 0x54
 8013ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ae4:	602f      	str	r7, [r5, #0]
 8013ae6:	2900      	cmp	r1, #0
 8013ae8:	d0c9      	beq.n	8013a7e <__sflush_r+0x1a>
 8013aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013aee:	4299      	cmp	r1, r3
 8013af0:	d002      	beq.n	8013af8 <__sflush_r+0x94>
 8013af2:	4628      	mov	r0, r5
 8013af4:	f7fe f98a 	bl	8011e0c <_free_r>
 8013af8:	2000      	movs	r0, #0
 8013afa:	6360      	str	r0, [r4, #52]	; 0x34
 8013afc:	e7c0      	b.n	8013a80 <__sflush_r+0x1c>
 8013afe:	2301      	movs	r3, #1
 8013b00:	4628      	mov	r0, r5
 8013b02:	47b0      	blx	r6
 8013b04:	1c41      	adds	r1, r0, #1
 8013b06:	d1c8      	bne.n	8013a9a <__sflush_r+0x36>
 8013b08:	682b      	ldr	r3, [r5, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d0c5      	beq.n	8013a9a <__sflush_r+0x36>
 8013b0e:	2b1d      	cmp	r3, #29
 8013b10:	d001      	beq.n	8013b16 <__sflush_r+0xb2>
 8013b12:	2b16      	cmp	r3, #22
 8013b14:	d101      	bne.n	8013b1a <__sflush_r+0xb6>
 8013b16:	602f      	str	r7, [r5, #0]
 8013b18:	e7b1      	b.n	8013a7e <__sflush_r+0x1a>
 8013b1a:	89a3      	ldrh	r3, [r4, #12]
 8013b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b20:	81a3      	strh	r3, [r4, #12]
 8013b22:	e7ad      	b.n	8013a80 <__sflush_r+0x1c>
 8013b24:	690f      	ldr	r7, [r1, #16]
 8013b26:	2f00      	cmp	r7, #0
 8013b28:	d0a9      	beq.n	8013a7e <__sflush_r+0x1a>
 8013b2a:	0793      	lsls	r3, r2, #30
 8013b2c:	680e      	ldr	r6, [r1, #0]
 8013b2e:	bf08      	it	eq
 8013b30:	694b      	ldreq	r3, [r1, #20]
 8013b32:	600f      	str	r7, [r1, #0]
 8013b34:	bf18      	it	ne
 8013b36:	2300      	movne	r3, #0
 8013b38:	eba6 0807 	sub.w	r8, r6, r7
 8013b3c:	608b      	str	r3, [r1, #8]
 8013b3e:	f1b8 0f00 	cmp.w	r8, #0
 8013b42:	dd9c      	ble.n	8013a7e <__sflush_r+0x1a>
 8013b44:	6a21      	ldr	r1, [r4, #32]
 8013b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b48:	4643      	mov	r3, r8
 8013b4a:	463a      	mov	r2, r7
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	47b0      	blx	r6
 8013b50:	2800      	cmp	r0, #0
 8013b52:	dc06      	bgt.n	8013b62 <__sflush_r+0xfe>
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b5a:	81a3      	strh	r3, [r4, #12]
 8013b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b60:	e78e      	b.n	8013a80 <__sflush_r+0x1c>
 8013b62:	4407      	add	r7, r0
 8013b64:	eba8 0800 	sub.w	r8, r8, r0
 8013b68:	e7e9      	b.n	8013b3e <__sflush_r+0xda>
 8013b6a:	bf00      	nop
 8013b6c:	dfbffffe 	.word	0xdfbffffe

08013b70 <_fflush_r>:
 8013b70:	b538      	push	{r3, r4, r5, lr}
 8013b72:	690b      	ldr	r3, [r1, #16]
 8013b74:	4605      	mov	r5, r0
 8013b76:	460c      	mov	r4, r1
 8013b78:	b913      	cbnz	r3, 8013b80 <_fflush_r+0x10>
 8013b7a:	2500      	movs	r5, #0
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	bd38      	pop	{r3, r4, r5, pc}
 8013b80:	b118      	cbz	r0, 8013b8a <_fflush_r+0x1a>
 8013b82:	6a03      	ldr	r3, [r0, #32]
 8013b84:	b90b      	cbnz	r3, 8013b8a <_fflush_r+0x1a>
 8013b86:	f7fd f8f5 	bl	8010d74 <__sinit>
 8013b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d0f3      	beq.n	8013b7a <_fflush_r+0xa>
 8013b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b94:	07d0      	lsls	r0, r2, #31
 8013b96:	d404      	bmi.n	8013ba2 <_fflush_r+0x32>
 8013b98:	0599      	lsls	r1, r3, #22
 8013b9a:	d402      	bmi.n	8013ba2 <_fflush_r+0x32>
 8013b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b9e:	f7fd faa2 	bl	80110e6 <__retarget_lock_acquire_recursive>
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	f7ff ff5d 	bl	8013a64 <__sflush_r>
 8013baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013bac:	07da      	lsls	r2, r3, #31
 8013bae:	4605      	mov	r5, r0
 8013bb0:	d4e4      	bmi.n	8013b7c <_fflush_r+0xc>
 8013bb2:	89a3      	ldrh	r3, [r4, #12]
 8013bb4:	059b      	lsls	r3, r3, #22
 8013bb6:	d4e1      	bmi.n	8013b7c <_fflush_r+0xc>
 8013bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bba:	f7fd fa95 	bl	80110e8 <__retarget_lock_release_recursive>
 8013bbe:	e7dd      	b.n	8013b7c <_fflush_r+0xc>

08013bc0 <__swbuf_r>:
 8013bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bc2:	460e      	mov	r6, r1
 8013bc4:	4614      	mov	r4, r2
 8013bc6:	4605      	mov	r5, r0
 8013bc8:	b118      	cbz	r0, 8013bd2 <__swbuf_r+0x12>
 8013bca:	6a03      	ldr	r3, [r0, #32]
 8013bcc:	b90b      	cbnz	r3, 8013bd2 <__swbuf_r+0x12>
 8013bce:	f7fd f8d1 	bl	8010d74 <__sinit>
 8013bd2:	69a3      	ldr	r3, [r4, #24]
 8013bd4:	60a3      	str	r3, [r4, #8]
 8013bd6:	89a3      	ldrh	r3, [r4, #12]
 8013bd8:	071a      	lsls	r2, r3, #28
 8013bda:	d525      	bpl.n	8013c28 <__swbuf_r+0x68>
 8013bdc:	6923      	ldr	r3, [r4, #16]
 8013bde:	b31b      	cbz	r3, 8013c28 <__swbuf_r+0x68>
 8013be0:	6823      	ldr	r3, [r4, #0]
 8013be2:	6922      	ldr	r2, [r4, #16]
 8013be4:	1a98      	subs	r0, r3, r2
 8013be6:	6963      	ldr	r3, [r4, #20]
 8013be8:	b2f6      	uxtb	r6, r6
 8013bea:	4283      	cmp	r3, r0
 8013bec:	4637      	mov	r7, r6
 8013bee:	dc04      	bgt.n	8013bfa <__swbuf_r+0x3a>
 8013bf0:	4621      	mov	r1, r4
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f7ff ffbc 	bl	8013b70 <_fflush_r>
 8013bf8:	b9e0      	cbnz	r0, 8013c34 <__swbuf_r+0x74>
 8013bfa:	68a3      	ldr	r3, [r4, #8]
 8013bfc:	3b01      	subs	r3, #1
 8013bfe:	60a3      	str	r3, [r4, #8]
 8013c00:	6823      	ldr	r3, [r4, #0]
 8013c02:	1c5a      	adds	r2, r3, #1
 8013c04:	6022      	str	r2, [r4, #0]
 8013c06:	701e      	strb	r6, [r3, #0]
 8013c08:	6962      	ldr	r2, [r4, #20]
 8013c0a:	1c43      	adds	r3, r0, #1
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d004      	beq.n	8013c1a <__swbuf_r+0x5a>
 8013c10:	89a3      	ldrh	r3, [r4, #12]
 8013c12:	07db      	lsls	r3, r3, #31
 8013c14:	d506      	bpl.n	8013c24 <__swbuf_r+0x64>
 8013c16:	2e0a      	cmp	r6, #10
 8013c18:	d104      	bne.n	8013c24 <__swbuf_r+0x64>
 8013c1a:	4621      	mov	r1, r4
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	f7ff ffa7 	bl	8013b70 <_fflush_r>
 8013c22:	b938      	cbnz	r0, 8013c34 <__swbuf_r+0x74>
 8013c24:	4638      	mov	r0, r7
 8013c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c28:	4621      	mov	r1, r4
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	f000 f806 	bl	8013c3c <__swsetup_r>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d0d5      	beq.n	8013be0 <__swbuf_r+0x20>
 8013c34:	f04f 37ff 	mov.w	r7, #4294967295
 8013c38:	e7f4      	b.n	8013c24 <__swbuf_r+0x64>
	...

08013c3c <__swsetup_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	4b2a      	ldr	r3, [pc, #168]	; (8013ce8 <__swsetup_r+0xac>)
 8013c40:	4605      	mov	r5, r0
 8013c42:	6818      	ldr	r0, [r3, #0]
 8013c44:	460c      	mov	r4, r1
 8013c46:	b118      	cbz	r0, 8013c50 <__swsetup_r+0x14>
 8013c48:	6a03      	ldr	r3, [r0, #32]
 8013c4a:	b90b      	cbnz	r3, 8013c50 <__swsetup_r+0x14>
 8013c4c:	f7fd f892 	bl	8010d74 <__sinit>
 8013c50:	89a3      	ldrh	r3, [r4, #12]
 8013c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c56:	0718      	lsls	r0, r3, #28
 8013c58:	d422      	bmi.n	8013ca0 <__swsetup_r+0x64>
 8013c5a:	06d9      	lsls	r1, r3, #27
 8013c5c:	d407      	bmi.n	8013c6e <__swsetup_r+0x32>
 8013c5e:	2309      	movs	r3, #9
 8013c60:	602b      	str	r3, [r5, #0]
 8013c62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c66:	81a3      	strh	r3, [r4, #12]
 8013c68:	f04f 30ff 	mov.w	r0, #4294967295
 8013c6c:	e034      	b.n	8013cd8 <__swsetup_r+0x9c>
 8013c6e:	0758      	lsls	r0, r3, #29
 8013c70:	d512      	bpl.n	8013c98 <__swsetup_r+0x5c>
 8013c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c74:	b141      	cbz	r1, 8013c88 <__swsetup_r+0x4c>
 8013c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c7a:	4299      	cmp	r1, r3
 8013c7c:	d002      	beq.n	8013c84 <__swsetup_r+0x48>
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f7fe f8c4 	bl	8011e0c <_free_r>
 8013c84:	2300      	movs	r3, #0
 8013c86:	6363      	str	r3, [r4, #52]	; 0x34
 8013c88:	89a3      	ldrh	r3, [r4, #12]
 8013c8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c8e:	81a3      	strh	r3, [r4, #12]
 8013c90:	2300      	movs	r3, #0
 8013c92:	6063      	str	r3, [r4, #4]
 8013c94:	6923      	ldr	r3, [r4, #16]
 8013c96:	6023      	str	r3, [r4, #0]
 8013c98:	89a3      	ldrh	r3, [r4, #12]
 8013c9a:	f043 0308 	orr.w	r3, r3, #8
 8013c9e:	81a3      	strh	r3, [r4, #12]
 8013ca0:	6923      	ldr	r3, [r4, #16]
 8013ca2:	b94b      	cbnz	r3, 8013cb8 <__swsetup_r+0x7c>
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cae:	d003      	beq.n	8013cb8 <__swsetup_r+0x7c>
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	f000 fc15 	bl	80144e2 <__smakebuf_r>
 8013cb8:	89a0      	ldrh	r0, [r4, #12]
 8013cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cbe:	f010 0301 	ands.w	r3, r0, #1
 8013cc2:	d00a      	beq.n	8013cda <__swsetup_r+0x9e>
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	60a3      	str	r3, [r4, #8]
 8013cc8:	6963      	ldr	r3, [r4, #20]
 8013cca:	425b      	negs	r3, r3
 8013ccc:	61a3      	str	r3, [r4, #24]
 8013cce:	6923      	ldr	r3, [r4, #16]
 8013cd0:	b943      	cbnz	r3, 8013ce4 <__swsetup_r+0xa8>
 8013cd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013cd6:	d1c4      	bne.n	8013c62 <__swsetup_r+0x26>
 8013cd8:	bd38      	pop	{r3, r4, r5, pc}
 8013cda:	0781      	lsls	r1, r0, #30
 8013cdc:	bf58      	it	pl
 8013cde:	6963      	ldrpl	r3, [r4, #20]
 8013ce0:	60a3      	str	r3, [r4, #8]
 8013ce2:	e7f4      	b.n	8013cce <__swsetup_r+0x92>
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	e7f7      	b.n	8013cd8 <__swsetup_r+0x9c>
 8013ce8:	200000a0 	.word	0x200000a0

08013cec <strncmp>:
 8013cec:	b510      	push	{r4, lr}
 8013cee:	b16a      	cbz	r2, 8013d0c <strncmp+0x20>
 8013cf0:	3901      	subs	r1, #1
 8013cf2:	1884      	adds	r4, r0, r2
 8013cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cf8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d103      	bne.n	8013d08 <strncmp+0x1c>
 8013d00:	42a0      	cmp	r0, r4
 8013d02:	d001      	beq.n	8013d08 <strncmp+0x1c>
 8013d04:	2a00      	cmp	r2, #0
 8013d06:	d1f5      	bne.n	8013cf4 <strncmp+0x8>
 8013d08:	1ad0      	subs	r0, r2, r3
 8013d0a:	bd10      	pop	{r4, pc}
 8013d0c:	4610      	mov	r0, r2
 8013d0e:	e7fc      	b.n	8013d0a <strncmp+0x1e>

08013d10 <nan>:
 8013d10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013d18 <nan+0x8>
 8013d14:	4770      	bx	lr
 8013d16:	bf00      	nop
 8013d18:	00000000 	.word	0x00000000
 8013d1c:	7ff80000 	.word	0x7ff80000

08013d20 <_calloc_r>:
 8013d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d22:	fba1 2402 	umull	r2, r4, r1, r2
 8013d26:	b94c      	cbnz	r4, 8013d3c <_calloc_r+0x1c>
 8013d28:	4611      	mov	r1, r2
 8013d2a:	9201      	str	r2, [sp, #4]
 8013d2c:	f7fc f894 	bl	800fe58 <_malloc_r>
 8013d30:	9a01      	ldr	r2, [sp, #4]
 8013d32:	4605      	mov	r5, r0
 8013d34:	b930      	cbnz	r0, 8013d44 <_calloc_r+0x24>
 8013d36:	4628      	mov	r0, r5
 8013d38:	b003      	add	sp, #12
 8013d3a:	bd30      	pop	{r4, r5, pc}
 8013d3c:	220c      	movs	r2, #12
 8013d3e:	6002      	str	r2, [r0, #0]
 8013d40:	2500      	movs	r5, #0
 8013d42:	e7f8      	b.n	8013d36 <_calloc_r+0x16>
 8013d44:	4621      	mov	r1, r4
 8013d46:	f7fd f8ea 	bl	8010f1e <memset>
 8013d4a:	e7f4      	b.n	8013d36 <_calloc_r+0x16>

08013d4c <rshift>:
 8013d4c:	6903      	ldr	r3, [r0, #16]
 8013d4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013d52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013d5a:	f100 0414 	add.w	r4, r0, #20
 8013d5e:	dd45      	ble.n	8013dec <rshift+0xa0>
 8013d60:	f011 011f 	ands.w	r1, r1, #31
 8013d64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013d68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013d6c:	d10c      	bne.n	8013d88 <rshift+0x3c>
 8013d6e:	f100 0710 	add.w	r7, r0, #16
 8013d72:	4629      	mov	r1, r5
 8013d74:	42b1      	cmp	r1, r6
 8013d76:	d334      	bcc.n	8013de2 <rshift+0x96>
 8013d78:	1a9b      	subs	r3, r3, r2
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	1eea      	subs	r2, r5, #3
 8013d7e:	4296      	cmp	r6, r2
 8013d80:	bf38      	it	cc
 8013d82:	2300      	movcc	r3, #0
 8013d84:	4423      	add	r3, r4
 8013d86:	e015      	b.n	8013db4 <rshift+0x68>
 8013d88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013d8c:	f1c1 0820 	rsb	r8, r1, #32
 8013d90:	40cf      	lsrs	r7, r1
 8013d92:	f105 0e04 	add.w	lr, r5, #4
 8013d96:	46a1      	mov	r9, r4
 8013d98:	4576      	cmp	r6, lr
 8013d9a:	46f4      	mov	ip, lr
 8013d9c:	d815      	bhi.n	8013dca <rshift+0x7e>
 8013d9e:	1a9a      	subs	r2, r3, r2
 8013da0:	0092      	lsls	r2, r2, #2
 8013da2:	3a04      	subs	r2, #4
 8013da4:	3501      	adds	r5, #1
 8013da6:	42ae      	cmp	r6, r5
 8013da8:	bf38      	it	cc
 8013daa:	2200      	movcc	r2, #0
 8013dac:	18a3      	adds	r3, r4, r2
 8013dae:	50a7      	str	r7, [r4, r2]
 8013db0:	b107      	cbz	r7, 8013db4 <rshift+0x68>
 8013db2:	3304      	adds	r3, #4
 8013db4:	1b1a      	subs	r2, r3, r4
 8013db6:	42a3      	cmp	r3, r4
 8013db8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013dbc:	bf08      	it	eq
 8013dbe:	2300      	moveq	r3, #0
 8013dc0:	6102      	str	r2, [r0, #16]
 8013dc2:	bf08      	it	eq
 8013dc4:	6143      	streq	r3, [r0, #20]
 8013dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dca:	f8dc c000 	ldr.w	ip, [ip]
 8013dce:	fa0c fc08 	lsl.w	ip, ip, r8
 8013dd2:	ea4c 0707 	orr.w	r7, ip, r7
 8013dd6:	f849 7b04 	str.w	r7, [r9], #4
 8013dda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013dde:	40cf      	lsrs	r7, r1
 8013de0:	e7da      	b.n	8013d98 <rshift+0x4c>
 8013de2:	f851 cb04 	ldr.w	ip, [r1], #4
 8013de6:	f847 cf04 	str.w	ip, [r7, #4]!
 8013dea:	e7c3      	b.n	8013d74 <rshift+0x28>
 8013dec:	4623      	mov	r3, r4
 8013dee:	e7e1      	b.n	8013db4 <rshift+0x68>

08013df0 <__hexdig_fun>:
 8013df0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013df4:	2b09      	cmp	r3, #9
 8013df6:	d802      	bhi.n	8013dfe <__hexdig_fun+0xe>
 8013df8:	3820      	subs	r0, #32
 8013dfa:	b2c0      	uxtb	r0, r0
 8013dfc:	4770      	bx	lr
 8013dfe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013e02:	2b05      	cmp	r3, #5
 8013e04:	d801      	bhi.n	8013e0a <__hexdig_fun+0x1a>
 8013e06:	3847      	subs	r0, #71	; 0x47
 8013e08:	e7f7      	b.n	8013dfa <__hexdig_fun+0xa>
 8013e0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013e0e:	2b05      	cmp	r3, #5
 8013e10:	d801      	bhi.n	8013e16 <__hexdig_fun+0x26>
 8013e12:	3827      	subs	r0, #39	; 0x27
 8013e14:	e7f1      	b.n	8013dfa <__hexdig_fun+0xa>
 8013e16:	2000      	movs	r0, #0
 8013e18:	4770      	bx	lr
	...

08013e1c <__gethex>:
 8013e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e20:	4617      	mov	r7, r2
 8013e22:	680a      	ldr	r2, [r1, #0]
 8013e24:	b085      	sub	sp, #20
 8013e26:	f102 0b02 	add.w	fp, r2, #2
 8013e2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013e2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013e32:	4681      	mov	r9, r0
 8013e34:	468a      	mov	sl, r1
 8013e36:	9302      	str	r3, [sp, #8]
 8013e38:	32fe      	adds	r2, #254	; 0xfe
 8013e3a:	eb02 030b 	add.w	r3, r2, fp
 8013e3e:	46d8      	mov	r8, fp
 8013e40:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013e44:	9301      	str	r3, [sp, #4]
 8013e46:	2830      	cmp	r0, #48	; 0x30
 8013e48:	d0f7      	beq.n	8013e3a <__gethex+0x1e>
 8013e4a:	f7ff ffd1 	bl	8013df0 <__hexdig_fun>
 8013e4e:	4604      	mov	r4, r0
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d138      	bne.n	8013ec6 <__gethex+0xaa>
 8013e54:	49a7      	ldr	r1, [pc, #668]	; (80140f4 <__gethex+0x2d8>)
 8013e56:	2201      	movs	r2, #1
 8013e58:	4640      	mov	r0, r8
 8013e5a:	f7ff ff47 	bl	8013cec <strncmp>
 8013e5e:	4606      	mov	r6, r0
 8013e60:	2800      	cmp	r0, #0
 8013e62:	d169      	bne.n	8013f38 <__gethex+0x11c>
 8013e64:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013e68:	465d      	mov	r5, fp
 8013e6a:	f7ff ffc1 	bl	8013df0 <__hexdig_fun>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d064      	beq.n	8013f3c <__gethex+0x120>
 8013e72:	465a      	mov	r2, fp
 8013e74:	7810      	ldrb	r0, [r2, #0]
 8013e76:	2830      	cmp	r0, #48	; 0x30
 8013e78:	4690      	mov	r8, r2
 8013e7a:	f102 0201 	add.w	r2, r2, #1
 8013e7e:	d0f9      	beq.n	8013e74 <__gethex+0x58>
 8013e80:	f7ff ffb6 	bl	8013df0 <__hexdig_fun>
 8013e84:	2301      	movs	r3, #1
 8013e86:	fab0 f480 	clz	r4, r0
 8013e8a:	0964      	lsrs	r4, r4, #5
 8013e8c:	465e      	mov	r6, fp
 8013e8e:	9301      	str	r3, [sp, #4]
 8013e90:	4642      	mov	r2, r8
 8013e92:	4615      	mov	r5, r2
 8013e94:	3201      	adds	r2, #1
 8013e96:	7828      	ldrb	r0, [r5, #0]
 8013e98:	f7ff ffaa 	bl	8013df0 <__hexdig_fun>
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d1f8      	bne.n	8013e92 <__gethex+0x76>
 8013ea0:	4994      	ldr	r1, [pc, #592]	; (80140f4 <__gethex+0x2d8>)
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	f7ff ff21 	bl	8013cec <strncmp>
 8013eaa:	b978      	cbnz	r0, 8013ecc <__gethex+0xb0>
 8013eac:	b946      	cbnz	r6, 8013ec0 <__gethex+0xa4>
 8013eae:	1c6e      	adds	r6, r5, #1
 8013eb0:	4632      	mov	r2, r6
 8013eb2:	4615      	mov	r5, r2
 8013eb4:	3201      	adds	r2, #1
 8013eb6:	7828      	ldrb	r0, [r5, #0]
 8013eb8:	f7ff ff9a 	bl	8013df0 <__hexdig_fun>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d1f8      	bne.n	8013eb2 <__gethex+0x96>
 8013ec0:	1b73      	subs	r3, r6, r5
 8013ec2:	009e      	lsls	r6, r3, #2
 8013ec4:	e004      	b.n	8013ed0 <__gethex+0xb4>
 8013ec6:	2400      	movs	r4, #0
 8013ec8:	4626      	mov	r6, r4
 8013eca:	e7e1      	b.n	8013e90 <__gethex+0x74>
 8013ecc:	2e00      	cmp	r6, #0
 8013ece:	d1f7      	bne.n	8013ec0 <__gethex+0xa4>
 8013ed0:	782b      	ldrb	r3, [r5, #0]
 8013ed2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013ed6:	2b50      	cmp	r3, #80	; 0x50
 8013ed8:	d13d      	bne.n	8013f56 <__gethex+0x13a>
 8013eda:	786b      	ldrb	r3, [r5, #1]
 8013edc:	2b2b      	cmp	r3, #43	; 0x2b
 8013ede:	d02f      	beq.n	8013f40 <__gethex+0x124>
 8013ee0:	2b2d      	cmp	r3, #45	; 0x2d
 8013ee2:	d031      	beq.n	8013f48 <__gethex+0x12c>
 8013ee4:	1c69      	adds	r1, r5, #1
 8013ee6:	f04f 0b00 	mov.w	fp, #0
 8013eea:	7808      	ldrb	r0, [r1, #0]
 8013eec:	f7ff ff80 	bl	8013df0 <__hexdig_fun>
 8013ef0:	1e42      	subs	r2, r0, #1
 8013ef2:	b2d2      	uxtb	r2, r2
 8013ef4:	2a18      	cmp	r2, #24
 8013ef6:	d82e      	bhi.n	8013f56 <__gethex+0x13a>
 8013ef8:	f1a0 0210 	sub.w	r2, r0, #16
 8013efc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013f00:	f7ff ff76 	bl	8013df0 <__hexdig_fun>
 8013f04:	f100 3cff 	add.w	ip, r0, #4294967295
 8013f08:	fa5f fc8c 	uxtb.w	ip, ip
 8013f0c:	f1bc 0f18 	cmp.w	ip, #24
 8013f10:	d91d      	bls.n	8013f4e <__gethex+0x132>
 8013f12:	f1bb 0f00 	cmp.w	fp, #0
 8013f16:	d000      	beq.n	8013f1a <__gethex+0xfe>
 8013f18:	4252      	negs	r2, r2
 8013f1a:	4416      	add	r6, r2
 8013f1c:	f8ca 1000 	str.w	r1, [sl]
 8013f20:	b1dc      	cbz	r4, 8013f5a <__gethex+0x13e>
 8013f22:	9b01      	ldr	r3, [sp, #4]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	bf14      	ite	ne
 8013f28:	f04f 0800 	movne.w	r8, #0
 8013f2c:	f04f 0806 	moveq.w	r8, #6
 8013f30:	4640      	mov	r0, r8
 8013f32:	b005      	add	sp, #20
 8013f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f38:	4645      	mov	r5, r8
 8013f3a:	4626      	mov	r6, r4
 8013f3c:	2401      	movs	r4, #1
 8013f3e:	e7c7      	b.n	8013ed0 <__gethex+0xb4>
 8013f40:	f04f 0b00 	mov.w	fp, #0
 8013f44:	1ca9      	adds	r1, r5, #2
 8013f46:	e7d0      	b.n	8013eea <__gethex+0xce>
 8013f48:	f04f 0b01 	mov.w	fp, #1
 8013f4c:	e7fa      	b.n	8013f44 <__gethex+0x128>
 8013f4e:	230a      	movs	r3, #10
 8013f50:	fb03 0002 	mla	r0, r3, r2, r0
 8013f54:	e7d0      	b.n	8013ef8 <__gethex+0xdc>
 8013f56:	4629      	mov	r1, r5
 8013f58:	e7e0      	b.n	8013f1c <__gethex+0x100>
 8013f5a:	eba5 0308 	sub.w	r3, r5, r8
 8013f5e:	3b01      	subs	r3, #1
 8013f60:	4621      	mov	r1, r4
 8013f62:	2b07      	cmp	r3, #7
 8013f64:	dc0a      	bgt.n	8013f7c <__gethex+0x160>
 8013f66:	4648      	mov	r0, r9
 8013f68:	f7fd ff9c 	bl	8011ea4 <_Balloc>
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	b940      	cbnz	r0, 8013f82 <__gethex+0x166>
 8013f70:	4b61      	ldr	r3, [pc, #388]	; (80140f8 <__gethex+0x2dc>)
 8013f72:	4602      	mov	r2, r0
 8013f74:	21e4      	movs	r1, #228	; 0xe4
 8013f76:	4861      	ldr	r0, [pc, #388]	; (80140fc <__gethex+0x2e0>)
 8013f78:	f7fb ff0e 	bl	800fd98 <__assert_func>
 8013f7c:	3101      	adds	r1, #1
 8013f7e:	105b      	asrs	r3, r3, #1
 8013f80:	e7ef      	b.n	8013f62 <__gethex+0x146>
 8013f82:	f100 0a14 	add.w	sl, r0, #20
 8013f86:	2300      	movs	r3, #0
 8013f88:	495a      	ldr	r1, [pc, #360]	; (80140f4 <__gethex+0x2d8>)
 8013f8a:	f8cd a004 	str.w	sl, [sp, #4]
 8013f8e:	469b      	mov	fp, r3
 8013f90:	45a8      	cmp	r8, r5
 8013f92:	d342      	bcc.n	801401a <__gethex+0x1fe>
 8013f94:	9801      	ldr	r0, [sp, #4]
 8013f96:	f840 bb04 	str.w	fp, [r0], #4
 8013f9a:	eba0 000a 	sub.w	r0, r0, sl
 8013f9e:	1080      	asrs	r0, r0, #2
 8013fa0:	6120      	str	r0, [r4, #16]
 8013fa2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013fa6:	4658      	mov	r0, fp
 8013fa8:	f7fe f86e 	bl	8012088 <__hi0bits>
 8013fac:	683d      	ldr	r5, [r7, #0]
 8013fae:	eba8 0000 	sub.w	r0, r8, r0
 8013fb2:	42a8      	cmp	r0, r5
 8013fb4:	dd59      	ble.n	801406a <__gethex+0x24e>
 8013fb6:	eba0 0805 	sub.w	r8, r0, r5
 8013fba:	4641      	mov	r1, r8
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f7fe fbfd 	bl	80127bc <__any_on>
 8013fc2:	4683      	mov	fp, r0
 8013fc4:	b1b8      	cbz	r0, 8013ff6 <__gethex+0x1da>
 8013fc6:	f108 33ff 	add.w	r3, r8, #4294967295
 8013fca:	1159      	asrs	r1, r3, #5
 8013fcc:	f003 021f 	and.w	r2, r3, #31
 8013fd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013fd4:	f04f 0b01 	mov.w	fp, #1
 8013fd8:	fa0b f202 	lsl.w	r2, fp, r2
 8013fdc:	420a      	tst	r2, r1
 8013fde:	d00a      	beq.n	8013ff6 <__gethex+0x1da>
 8013fe0:	455b      	cmp	r3, fp
 8013fe2:	dd06      	ble.n	8013ff2 <__gethex+0x1d6>
 8013fe4:	f1a8 0102 	sub.w	r1, r8, #2
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f7fe fbe7 	bl	80127bc <__any_on>
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	d138      	bne.n	8014064 <__gethex+0x248>
 8013ff2:	f04f 0b02 	mov.w	fp, #2
 8013ff6:	4641      	mov	r1, r8
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	f7ff fea7 	bl	8013d4c <rshift>
 8013ffe:	4446      	add	r6, r8
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	42b3      	cmp	r3, r6
 8014004:	da41      	bge.n	801408a <__gethex+0x26e>
 8014006:	4621      	mov	r1, r4
 8014008:	4648      	mov	r0, r9
 801400a:	f7fd ff8b 	bl	8011f24 <_Bfree>
 801400e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014010:	2300      	movs	r3, #0
 8014012:	6013      	str	r3, [r2, #0]
 8014014:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014018:	e78a      	b.n	8013f30 <__gethex+0x114>
 801401a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801401e:	2a2e      	cmp	r2, #46	; 0x2e
 8014020:	d014      	beq.n	801404c <__gethex+0x230>
 8014022:	2b20      	cmp	r3, #32
 8014024:	d106      	bne.n	8014034 <__gethex+0x218>
 8014026:	9b01      	ldr	r3, [sp, #4]
 8014028:	f843 bb04 	str.w	fp, [r3], #4
 801402c:	f04f 0b00 	mov.w	fp, #0
 8014030:	9301      	str	r3, [sp, #4]
 8014032:	465b      	mov	r3, fp
 8014034:	7828      	ldrb	r0, [r5, #0]
 8014036:	9303      	str	r3, [sp, #12]
 8014038:	f7ff feda 	bl	8013df0 <__hexdig_fun>
 801403c:	9b03      	ldr	r3, [sp, #12]
 801403e:	f000 000f 	and.w	r0, r0, #15
 8014042:	4098      	lsls	r0, r3
 8014044:	ea4b 0b00 	orr.w	fp, fp, r0
 8014048:	3304      	adds	r3, #4
 801404a:	e7a1      	b.n	8013f90 <__gethex+0x174>
 801404c:	45a8      	cmp	r8, r5
 801404e:	d8e8      	bhi.n	8014022 <__gethex+0x206>
 8014050:	2201      	movs	r2, #1
 8014052:	4628      	mov	r0, r5
 8014054:	9303      	str	r3, [sp, #12]
 8014056:	f7ff fe49 	bl	8013cec <strncmp>
 801405a:	4926      	ldr	r1, [pc, #152]	; (80140f4 <__gethex+0x2d8>)
 801405c:	9b03      	ldr	r3, [sp, #12]
 801405e:	2800      	cmp	r0, #0
 8014060:	d1df      	bne.n	8014022 <__gethex+0x206>
 8014062:	e795      	b.n	8013f90 <__gethex+0x174>
 8014064:	f04f 0b03 	mov.w	fp, #3
 8014068:	e7c5      	b.n	8013ff6 <__gethex+0x1da>
 801406a:	da0b      	bge.n	8014084 <__gethex+0x268>
 801406c:	eba5 0800 	sub.w	r8, r5, r0
 8014070:	4621      	mov	r1, r4
 8014072:	4642      	mov	r2, r8
 8014074:	4648      	mov	r0, r9
 8014076:	f7fe f96f 	bl	8012358 <__lshift>
 801407a:	eba6 0608 	sub.w	r6, r6, r8
 801407e:	4604      	mov	r4, r0
 8014080:	f100 0a14 	add.w	sl, r0, #20
 8014084:	f04f 0b00 	mov.w	fp, #0
 8014088:	e7ba      	b.n	8014000 <__gethex+0x1e4>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	42b3      	cmp	r3, r6
 801408e:	dd73      	ble.n	8014178 <__gethex+0x35c>
 8014090:	1b9e      	subs	r6, r3, r6
 8014092:	42b5      	cmp	r5, r6
 8014094:	dc34      	bgt.n	8014100 <__gethex+0x2e4>
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2b02      	cmp	r3, #2
 801409a:	d023      	beq.n	80140e4 <__gethex+0x2c8>
 801409c:	2b03      	cmp	r3, #3
 801409e:	d025      	beq.n	80140ec <__gethex+0x2d0>
 80140a0:	2b01      	cmp	r3, #1
 80140a2:	d115      	bne.n	80140d0 <__gethex+0x2b4>
 80140a4:	42b5      	cmp	r5, r6
 80140a6:	d113      	bne.n	80140d0 <__gethex+0x2b4>
 80140a8:	2d01      	cmp	r5, #1
 80140aa:	d10b      	bne.n	80140c4 <__gethex+0x2a8>
 80140ac:	9a02      	ldr	r2, [sp, #8]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6013      	str	r3, [r2, #0]
 80140b2:	2301      	movs	r3, #1
 80140b4:	6123      	str	r3, [r4, #16]
 80140b6:	f8ca 3000 	str.w	r3, [sl]
 80140ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140bc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80140c0:	601c      	str	r4, [r3, #0]
 80140c2:	e735      	b.n	8013f30 <__gethex+0x114>
 80140c4:	1e69      	subs	r1, r5, #1
 80140c6:	4620      	mov	r0, r4
 80140c8:	f7fe fb78 	bl	80127bc <__any_on>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	d1ed      	bne.n	80140ac <__gethex+0x290>
 80140d0:	4621      	mov	r1, r4
 80140d2:	4648      	mov	r0, r9
 80140d4:	f7fd ff26 	bl	8011f24 <_Bfree>
 80140d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140da:	2300      	movs	r3, #0
 80140dc:	6013      	str	r3, [r2, #0]
 80140de:	f04f 0850 	mov.w	r8, #80	; 0x50
 80140e2:	e725      	b.n	8013f30 <__gethex+0x114>
 80140e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d1f2      	bne.n	80140d0 <__gethex+0x2b4>
 80140ea:	e7df      	b.n	80140ac <__gethex+0x290>
 80140ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1dc      	bne.n	80140ac <__gethex+0x290>
 80140f2:	e7ed      	b.n	80140d0 <__gethex+0x2b4>
 80140f4:	08015974 	.word	0x08015974
 80140f8:	08015809 	.word	0x08015809
 80140fc:	08015ae2 	.word	0x08015ae2
 8014100:	f106 38ff 	add.w	r8, r6, #4294967295
 8014104:	f1bb 0f00 	cmp.w	fp, #0
 8014108:	d133      	bne.n	8014172 <__gethex+0x356>
 801410a:	f1b8 0f00 	cmp.w	r8, #0
 801410e:	d004      	beq.n	801411a <__gethex+0x2fe>
 8014110:	4641      	mov	r1, r8
 8014112:	4620      	mov	r0, r4
 8014114:	f7fe fb52 	bl	80127bc <__any_on>
 8014118:	4683      	mov	fp, r0
 801411a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801411e:	2301      	movs	r3, #1
 8014120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014124:	f008 081f 	and.w	r8, r8, #31
 8014128:	fa03 f308 	lsl.w	r3, r3, r8
 801412c:	4213      	tst	r3, r2
 801412e:	4631      	mov	r1, r6
 8014130:	4620      	mov	r0, r4
 8014132:	bf18      	it	ne
 8014134:	f04b 0b02 	orrne.w	fp, fp, #2
 8014138:	1bad      	subs	r5, r5, r6
 801413a:	f7ff fe07 	bl	8013d4c <rshift>
 801413e:	687e      	ldr	r6, [r7, #4]
 8014140:	f04f 0802 	mov.w	r8, #2
 8014144:	f1bb 0f00 	cmp.w	fp, #0
 8014148:	d04a      	beq.n	80141e0 <__gethex+0x3c4>
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	2b02      	cmp	r3, #2
 801414e:	d016      	beq.n	801417e <__gethex+0x362>
 8014150:	2b03      	cmp	r3, #3
 8014152:	d018      	beq.n	8014186 <__gethex+0x36a>
 8014154:	2b01      	cmp	r3, #1
 8014156:	d109      	bne.n	801416c <__gethex+0x350>
 8014158:	f01b 0f02 	tst.w	fp, #2
 801415c:	d006      	beq.n	801416c <__gethex+0x350>
 801415e:	f8da 3000 	ldr.w	r3, [sl]
 8014162:	ea4b 0b03 	orr.w	fp, fp, r3
 8014166:	f01b 0f01 	tst.w	fp, #1
 801416a:	d10f      	bne.n	801418c <__gethex+0x370>
 801416c:	f048 0810 	orr.w	r8, r8, #16
 8014170:	e036      	b.n	80141e0 <__gethex+0x3c4>
 8014172:	f04f 0b01 	mov.w	fp, #1
 8014176:	e7d0      	b.n	801411a <__gethex+0x2fe>
 8014178:	f04f 0801 	mov.w	r8, #1
 801417c:	e7e2      	b.n	8014144 <__gethex+0x328>
 801417e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014180:	f1c3 0301 	rsb	r3, r3, #1
 8014184:	930f      	str	r3, [sp, #60]	; 0x3c
 8014186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014188:	2b00      	cmp	r3, #0
 801418a:	d0ef      	beq.n	801416c <__gethex+0x350>
 801418c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014190:	f104 0214 	add.w	r2, r4, #20
 8014194:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014198:	9301      	str	r3, [sp, #4]
 801419a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801419e:	2300      	movs	r3, #0
 80141a0:	4694      	mov	ip, r2
 80141a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80141a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80141aa:	d01e      	beq.n	80141ea <__gethex+0x3ce>
 80141ac:	3101      	adds	r1, #1
 80141ae:	f8cc 1000 	str.w	r1, [ip]
 80141b2:	f1b8 0f02 	cmp.w	r8, #2
 80141b6:	f104 0214 	add.w	r2, r4, #20
 80141ba:	d13d      	bne.n	8014238 <__gethex+0x41c>
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	3b01      	subs	r3, #1
 80141c0:	42ab      	cmp	r3, r5
 80141c2:	d10b      	bne.n	80141dc <__gethex+0x3c0>
 80141c4:	1169      	asrs	r1, r5, #5
 80141c6:	2301      	movs	r3, #1
 80141c8:	f005 051f 	and.w	r5, r5, #31
 80141cc:	fa03 f505 	lsl.w	r5, r3, r5
 80141d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141d4:	421d      	tst	r5, r3
 80141d6:	bf18      	it	ne
 80141d8:	f04f 0801 	movne.w	r8, #1
 80141dc:	f048 0820 	orr.w	r8, r8, #32
 80141e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141e2:	601c      	str	r4, [r3, #0]
 80141e4:	9b02      	ldr	r3, [sp, #8]
 80141e6:	601e      	str	r6, [r3, #0]
 80141e8:	e6a2      	b.n	8013f30 <__gethex+0x114>
 80141ea:	4290      	cmp	r0, r2
 80141ec:	f842 3c04 	str.w	r3, [r2, #-4]
 80141f0:	d8d6      	bhi.n	80141a0 <__gethex+0x384>
 80141f2:	68a2      	ldr	r2, [r4, #8]
 80141f4:	4593      	cmp	fp, r2
 80141f6:	db17      	blt.n	8014228 <__gethex+0x40c>
 80141f8:	6861      	ldr	r1, [r4, #4]
 80141fa:	4648      	mov	r0, r9
 80141fc:	3101      	adds	r1, #1
 80141fe:	f7fd fe51 	bl	8011ea4 <_Balloc>
 8014202:	4682      	mov	sl, r0
 8014204:	b918      	cbnz	r0, 801420e <__gethex+0x3f2>
 8014206:	4b1b      	ldr	r3, [pc, #108]	; (8014274 <__gethex+0x458>)
 8014208:	4602      	mov	r2, r0
 801420a:	2184      	movs	r1, #132	; 0x84
 801420c:	e6b3      	b.n	8013f76 <__gethex+0x15a>
 801420e:	6922      	ldr	r2, [r4, #16]
 8014210:	3202      	adds	r2, #2
 8014212:	f104 010c 	add.w	r1, r4, #12
 8014216:	0092      	lsls	r2, r2, #2
 8014218:	300c      	adds	r0, #12
 801421a:	f7fc ff66 	bl	80110ea <memcpy>
 801421e:	4621      	mov	r1, r4
 8014220:	4648      	mov	r0, r9
 8014222:	f7fd fe7f 	bl	8011f24 <_Bfree>
 8014226:	4654      	mov	r4, sl
 8014228:	6922      	ldr	r2, [r4, #16]
 801422a:	1c51      	adds	r1, r2, #1
 801422c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014230:	6121      	str	r1, [r4, #16]
 8014232:	2101      	movs	r1, #1
 8014234:	6151      	str	r1, [r2, #20]
 8014236:	e7bc      	b.n	80141b2 <__gethex+0x396>
 8014238:	6921      	ldr	r1, [r4, #16]
 801423a:	4559      	cmp	r1, fp
 801423c:	dd0b      	ble.n	8014256 <__gethex+0x43a>
 801423e:	2101      	movs	r1, #1
 8014240:	4620      	mov	r0, r4
 8014242:	f7ff fd83 	bl	8013d4c <rshift>
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	3601      	adds	r6, #1
 801424a:	42b3      	cmp	r3, r6
 801424c:	f6ff aedb 	blt.w	8014006 <__gethex+0x1ea>
 8014250:	f04f 0801 	mov.w	r8, #1
 8014254:	e7c2      	b.n	80141dc <__gethex+0x3c0>
 8014256:	f015 051f 	ands.w	r5, r5, #31
 801425a:	d0f9      	beq.n	8014250 <__gethex+0x434>
 801425c:	9b01      	ldr	r3, [sp, #4]
 801425e:	441a      	add	r2, r3
 8014260:	f1c5 0520 	rsb	r5, r5, #32
 8014264:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014268:	f7fd ff0e 	bl	8012088 <__hi0bits>
 801426c:	42a8      	cmp	r0, r5
 801426e:	dbe6      	blt.n	801423e <__gethex+0x422>
 8014270:	e7ee      	b.n	8014250 <__gethex+0x434>
 8014272:	bf00      	nop
 8014274:	08015809 	.word	0x08015809

08014278 <L_shift>:
 8014278:	f1c2 0208 	rsb	r2, r2, #8
 801427c:	0092      	lsls	r2, r2, #2
 801427e:	b570      	push	{r4, r5, r6, lr}
 8014280:	f1c2 0620 	rsb	r6, r2, #32
 8014284:	6843      	ldr	r3, [r0, #4]
 8014286:	6804      	ldr	r4, [r0, #0]
 8014288:	fa03 f506 	lsl.w	r5, r3, r6
 801428c:	432c      	orrs	r4, r5
 801428e:	40d3      	lsrs	r3, r2
 8014290:	6004      	str	r4, [r0, #0]
 8014292:	f840 3f04 	str.w	r3, [r0, #4]!
 8014296:	4288      	cmp	r0, r1
 8014298:	d3f4      	bcc.n	8014284 <L_shift+0xc>
 801429a:	bd70      	pop	{r4, r5, r6, pc}

0801429c <__match>:
 801429c:	b530      	push	{r4, r5, lr}
 801429e:	6803      	ldr	r3, [r0, #0]
 80142a0:	3301      	adds	r3, #1
 80142a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142a6:	b914      	cbnz	r4, 80142ae <__match+0x12>
 80142a8:	6003      	str	r3, [r0, #0]
 80142aa:	2001      	movs	r0, #1
 80142ac:	bd30      	pop	{r4, r5, pc}
 80142ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80142b6:	2d19      	cmp	r5, #25
 80142b8:	bf98      	it	ls
 80142ba:	3220      	addls	r2, #32
 80142bc:	42a2      	cmp	r2, r4
 80142be:	d0f0      	beq.n	80142a2 <__match+0x6>
 80142c0:	2000      	movs	r0, #0
 80142c2:	e7f3      	b.n	80142ac <__match+0x10>

080142c4 <__hexnan>:
 80142c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c8:	680b      	ldr	r3, [r1, #0]
 80142ca:	6801      	ldr	r1, [r0, #0]
 80142cc:	115e      	asrs	r6, r3, #5
 80142ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80142d2:	f013 031f 	ands.w	r3, r3, #31
 80142d6:	b087      	sub	sp, #28
 80142d8:	bf18      	it	ne
 80142da:	3604      	addne	r6, #4
 80142dc:	2500      	movs	r5, #0
 80142de:	1f37      	subs	r7, r6, #4
 80142e0:	4682      	mov	sl, r0
 80142e2:	4690      	mov	r8, r2
 80142e4:	9301      	str	r3, [sp, #4]
 80142e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80142ea:	46b9      	mov	r9, r7
 80142ec:	463c      	mov	r4, r7
 80142ee:	9502      	str	r5, [sp, #8]
 80142f0:	46ab      	mov	fp, r5
 80142f2:	784a      	ldrb	r2, [r1, #1]
 80142f4:	1c4b      	adds	r3, r1, #1
 80142f6:	9303      	str	r3, [sp, #12]
 80142f8:	b342      	cbz	r2, 801434c <__hexnan+0x88>
 80142fa:	4610      	mov	r0, r2
 80142fc:	9105      	str	r1, [sp, #20]
 80142fe:	9204      	str	r2, [sp, #16]
 8014300:	f7ff fd76 	bl	8013df0 <__hexdig_fun>
 8014304:	2800      	cmp	r0, #0
 8014306:	d14f      	bne.n	80143a8 <__hexnan+0xe4>
 8014308:	9a04      	ldr	r2, [sp, #16]
 801430a:	9905      	ldr	r1, [sp, #20]
 801430c:	2a20      	cmp	r2, #32
 801430e:	d818      	bhi.n	8014342 <__hexnan+0x7e>
 8014310:	9b02      	ldr	r3, [sp, #8]
 8014312:	459b      	cmp	fp, r3
 8014314:	dd13      	ble.n	801433e <__hexnan+0x7a>
 8014316:	454c      	cmp	r4, r9
 8014318:	d206      	bcs.n	8014328 <__hexnan+0x64>
 801431a:	2d07      	cmp	r5, #7
 801431c:	dc04      	bgt.n	8014328 <__hexnan+0x64>
 801431e:	462a      	mov	r2, r5
 8014320:	4649      	mov	r1, r9
 8014322:	4620      	mov	r0, r4
 8014324:	f7ff ffa8 	bl	8014278 <L_shift>
 8014328:	4544      	cmp	r4, r8
 801432a:	d950      	bls.n	80143ce <__hexnan+0x10a>
 801432c:	2300      	movs	r3, #0
 801432e:	f1a4 0904 	sub.w	r9, r4, #4
 8014332:	f844 3c04 	str.w	r3, [r4, #-4]
 8014336:	f8cd b008 	str.w	fp, [sp, #8]
 801433a:	464c      	mov	r4, r9
 801433c:	461d      	mov	r5, r3
 801433e:	9903      	ldr	r1, [sp, #12]
 8014340:	e7d7      	b.n	80142f2 <__hexnan+0x2e>
 8014342:	2a29      	cmp	r2, #41	; 0x29
 8014344:	d155      	bne.n	80143f2 <__hexnan+0x12e>
 8014346:	3102      	adds	r1, #2
 8014348:	f8ca 1000 	str.w	r1, [sl]
 801434c:	f1bb 0f00 	cmp.w	fp, #0
 8014350:	d04f      	beq.n	80143f2 <__hexnan+0x12e>
 8014352:	454c      	cmp	r4, r9
 8014354:	d206      	bcs.n	8014364 <__hexnan+0xa0>
 8014356:	2d07      	cmp	r5, #7
 8014358:	dc04      	bgt.n	8014364 <__hexnan+0xa0>
 801435a:	462a      	mov	r2, r5
 801435c:	4649      	mov	r1, r9
 801435e:	4620      	mov	r0, r4
 8014360:	f7ff ff8a 	bl	8014278 <L_shift>
 8014364:	4544      	cmp	r4, r8
 8014366:	d934      	bls.n	80143d2 <__hexnan+0x10e>
 8014368:	f1a8 0204 	sub.w	r2, r8, #4
 801436c:	4623      	mov	r3, r4
 801436e:	f853 1b04 	ldr.w	r1, [r3], #4
 8014372:	f842 1f04 	str.w	r1, [r2, #4]!
 8014376:	429f      	cmp	r7, r3
 8014378:	d2f9      	bcs.n	801436e <__hexnan+0xaa>
 801437a:	1b3b      	subs	r3, r7, r4
 801437c:	f023 0303 	bic.w	r3, r3, #3
 8014380:	3304      	adds	r3, #4
 8014382:	3e03      	subs	r6, #3
 8014384:	3401      	adds	r4, #1
 8014386:	42a6      	cmp	r6, r4
 8014388:	bf38      	it	cc
 801438a:	2304      	movcc	r3, #4
 801438c:	4443      	add	r3, r8
 801438e:	2200      	movs	r2, #0
 8014390:	f843 2b04 	str.w	r2, [r3], #4
 8014394:	429f      	cmp	r7, r3
 8014396:	d2fb      	bcs.n	8014390 <__hexnan+0xcc>
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	b91b      	cbnz	r3, 80143a4 <__hexnan+0xe0>
 801439c:	4547      	cmp	r7, r8
 801439e:	d126      	bne.n	80143ee <__hexnan+0x12a>
 80143a0:	2301      	movs	r3, #1
 80143a2:	603b      	str	r3, [r7, #0]
 80143a4:	2005      	movs	r0, #5
 80143a6:	e025      	b.n	80143f4 <__hexnan+0x130>
 80143a8:	3501      	adds	r5, #1
 80143aa:	2d08      	cmp	r5, #8
 80143ac:	f10b 0b01 	add.w	fp, fp, #1
 80143b0:	dd06      	ble.n	80143c0 <__hexnan+0xfc>
 80143b2:	4544      	cmp	r4, r8
 80143b4:	d9c3      	bls.n	801433e <__hexnan+0x7a>
 80143b6:	2300      	movs	r3, #0
 80143b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80143bc:	2501      	movs	r5, #1
 80143be:	3c04      	subs	r4, #4
 80143c0:	6822      	ldr	r2, [r4, #0]
 80143c2:	f000 000f 	and.w	r0, r0, #15
 80143c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80143ca:	6020      	str	r0, [r4, #0]
 80143cc:	e7b7      	b.n	801433e <__hexnan+0x7a>
 80143ce:	2508      	movs	r5, #8
 80143d0:	e7b5      	b.n	801433e <__hexnan+0x7a>
 80143d2:	9b01      	ldr	r3, [sp, #4]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d0df      	beq.n	8014398 <__hexnan+0xd4>
 80143d8:	f1c3 0320 	rsb	r3, r3, #32
 80143dc:	f04f 32ff 	mov.w	r2, #4294967295
 80143e0:	40da      	lsrs	r2, r3
 80143e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80143e6:	4013      	ands	r3, r2
 80143e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80143ec:	e7d4      	b.n	8014398 <__hexnan+0xd4>
 80143ee:	3f04      	subs	r7, #4
 80143f0:	e7d2      	b.n	8014398 <__hexnan+0xd4>
 80143f2:	2004      	movs	r0, #4
 80143f4:	b007      	add	sp, #28
 80143f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143fa <__ascii_mbtowc>:
 80143fa:	b082      	sub	sp, #8
 80143fc:	b901      	cbnz	r1, 8014400 <__ascii_mbtowc+0x6>
 80143fe:	a901      	add	r1, sp, #4
 8014400:	b142      	cbz	r2, 8014414 <__ascii_mbtowc+0x1a>
 8014402:	b14b      	cbz	r3, 8014418 <__ascii_mbtowc+0x1e>
 8014404:	7813      	ldrb	r3, [r2, #0]
 8014406:	600b      	str	r3, [r1, #0]
 8014408:	7812      	ldrb	r2, [r2, #0]
 801440a:	1e10      	subs	r0, r2, #0
 801440c:	bf18      	it	ne
 801440e:	2001      	movne	r0, #1
 8014410:	b002      	add	sp, #8
 8014412:	4770      	bx	lr
 8014414:	4610      	mov	r0, r2
 8014416:	e7fb      	b.n	8014410 <__ascii_mbtowc+0x16>
 8014418:	f06f 0001 	mvn.w	r0, #1
 801441c:	e7f8      	b.n	8014410 <__ascii_mbtowc+0x16>

0801441e <_realloc_r>:
 801441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014422:	4680      	mov	r8, r0
 8014424:	4614      	mov	r4, r2
 8014426:	460e      	mov	r6, r1
 8014428:	b921      	cbnz	r1, 8014434 <_realloc_r+0x16>
 801442a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801442e:	4611      	mov	r1, r2
 8014430:	f7fb bd12 	b.w	800fe58 <_malloc_r>
 8014434:	b92a      	cbnz	r2, 8014442 <_realloc_r+0x24>
 8014436:	f7fd fce9 	bl	8011e0c <_free_r>
 801443a:	4625      	mov	r5, r4
 801443c:	4628      	mov	r0, r5
 801443e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014442:	f000 f8ad 	bl	80145a0 <_malloc_usable_size_r>
 8014446:	4284      	cmp	r4, r0
 8014448:	4607      	mov	r7, r0
 801444a:	d802      	bhi.n	8014452 <_realloc_r+0x34>
 801444c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014450:	d812      	bhi.n	8014478 <_realloc_r+0x5a>
 8014452:	4621      	mov	r1, r4
 8014454:	4640      	mov	r0, r8
 8014456:	f7fb fcff 	bl	800fe58 <_malloc_r>
 801445a:	4605      	mov	r5, r0
 801445c:	2800      	cmp	r0, #0
 801445e:	d0ed      	beq.n	801443c <_realloc_r+0x1e>
 8014460:	42bc      	cmp	r4, r7
 8014462:	4622      	mov	r2, r4
 8014464:	4631      	mov	r1, r6
 8014466:	bf28      	it	cs
 8014468:	463a      	movcs	r2, r7
 801446a:	f7fc fe3e 	bl	80110ea <memcpy>
 801446e:	4631      	mov	r1, r6
 8014470:	4640      	mov	r0, r8
 8014472:	f7fd fccb 	bl	8011e0c <_free_r>
 8014476:	e7e1      	b.n	801443c <_realloc_r+0x1e>
 8014478:	4635      	mov	r5, r6
 801447a:	e7df      	b.n	801443c <_realloc_r+0x1e>

0801447c <__ascii_wctomb>:
 801447c:	b149      	cbz	r1, 8014492 <__ascii_wctomb+0x16>
 801447e:	2aff      	cmp	r2, #255	; 0xff
 8014480:	bf85      	ittet	hi
 8014482:	238a      	movhi	r3, #138	; 0x8a
 8014484:	6003      	strhi	r3, [r0, #0]
 8014486:	700a      	strbls	r2, [r1, #0]
 8014488:	f04f 30ff 	movhi.w	r0, #4294967295
 801448c:	bf98      	it	ls
 801448e:	2001      	movls	r0, #1
 8014490:	4770      	bx	lr
 8014492:	4608      	mov	r0, r1
 8014494:	4770      	bx	lr

08014496 <__swhatbuf_r>:
 8014496:	b570      	push	{r4, r5, r6, lr}
 8014498:	460c      	mov	r4, r1
 801449a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801449e:	2900      	cmp	r1, #0
 80144a0:	b096      	sub	sp, #88	; 0x58
 80144a2:	4615      	mov	r5, r2
 80144a4:	461e      	mov	r6, r3
 80144a6:	da0d      	bge.n	80144c4 <__swhatbuf_r+0x2e>
 80144a8:	89a3      	ldrh	r3, [r4, #12]
 80144aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80144ae:	f04f 0100 	mov.w	r1, #0
 80144b2:	bf0c      	ite	eq
 80144b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80144b8:	2340      	movne	r3, #64	; 0x40
 80144ba:	2000      	movs	r0, #0
 80144bc:	6031      	str	r1, [r6, #0]
 80144be:	602b      	str	r3, [r5, #0]
 80144c0:	b016      	add	sp, #88	; 0x58
 80144c2:	bd70      	pop	{r4, r5, r6, pc}
 80144c4:	466a      	mov	r2, sp
 80144c6:	f000 f849 	bl	801455c <_fstat_r>
 80144ca:	2800      	cmp	r0, #0
 80144cc:	dbec      	blt.n	80144a8 <__swhatbuf_r+0x12>
 80144ce:	9901      	ldr	r1, [sp, #4]
 80144d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80144d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80144d8:	4259      	negs	r1, r3
 80144da:	4159      	adcs	r1, r3
 80144dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80144e0:	e7eb      	b.n	80144ba <__swhatbuf_r+0x24>

080144e2 <__smakebuf_r>:
 80144e2:	898b      	ldrh	r3, [r1, #12]
 80144e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80144e6:	079d      	lsls	r5, r3, #30
 80144e8:	4606      	mov	r6, r0
 80144ea:	460c      	mov	r4, r1
 80144ec:	d507      	bpl.n	80144fe <__smakebuf_r+0x1c>
 80144ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80144f2:	6023      	str	r3, [r4, #0]
 80144f4:	6123      	str	r3, [r4, #16]
 80144f6:	2301      	movs	r3, #1
 80144f8:	6163      	str	r3, [r4, #20]
 80144fa:	b002      	add	sp, #8
 80144fc:	bd70      	pop	{r4, r5, r6, pc}
 80144fe:	ab01      	add	r3, sp, #4
 8014500:	466a      	mov	r2, sp
 8014502:	f7ff ffc8 	bl	8014496 <__swhatbuf_r>
 8014506:	9900      	ldr	r1, [sp, #0]
 8014508:	4605      	mov	r5, r0
 801450a:	4630      	mov	r0, r6
 801450c:	f7fb fca4 	bl	800fe58 <_malloc_r>
 8014510:	b948      	cbnz	r0, 8014526 <__smakebuf_r+0x44>
 8014512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014516:	059a      	lsls	r2, r3, #22
 8014518:	d4ef      	bmi.n	80144fa <__smakebuf_r+0x18>
 801451a:	f023 0303 	bic.w	r3, r3, #3
 801451e:	f043 0302 	orr.w	r3, r3, #2
 8014522:	81a3      	strh	r3, [r4, #12]
 8014524:	e7e3      	b.n	80144ee <__smakebuf_r+0xc>
 8014526:	89a3      	ldrh	r3, [r4, #12]
 8014528:	6020      	str	r0, [r4, #0]
 801452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801452e:	81a3      	strh	r3, [r4, #12]
 8014530:	9b00      	ldr	r3, [sp, #0]
 8014532:	6163      	str	r3, [r4, #20]
 8014534:	9b01      	ldr	r3, [sp, #4]
 8014536:	6120      	str	r0, [r4, #16]
 8014538:	b15b      	cbz	r3, 8014552 <__smakebuf_r+0x70>
 801453a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801453e:	4630      	mov	r0, r6
 8014540:	f000 f81e 	bl	8014580 <_isatty_r>
 8014544:	b128      	cbz	r0, 8014552 <__smakebuf_r+0x70>
 8014546:	89a3      	ldrh	r3, [r4, #12]
 8014548:	f023 0303 	bic.w	r3, r3, #3
 801454c:	f043 0301 	orr.w	r3, r3, #1
 8014550:	81a3      	strh	r3, [r4, #12]
 8014552:	89a3      	ldrh	r3, [r4, #12]
 8014554:	431d      	orrs	r5, r3
 8014556:	81a5      	strh	r5, [r4, #12]
 8014558:	e7cf      	b.n	80144fa <__smakebuf_r+0x18>
	...

0801455c <_fstat_r>:
 801455c:	b538      	push	{r3, r4, r5, lr}
 801455e:	4d07      	ldr	r5, [pc, #28]	; (801457c <_fstat_r+0x20>)
 8014560:	2300      	movs	r3, #0
 8014562:	4604      	mov	r4, r0
 8014564:	4608      	mov	r0, r1
 8014566:	4611      	mov	r1, r2
 8014568:	602b      	str	r3, [r5, #0]
 801456a:	f7f3 fd10 	bl	8007f8e <_fstat>
 801456e:	1c43      	adds	r3, r0, #1
 8014570:	d102      	bne.n	8014578 <_fstat_r+0x1c>
 8014572:	682b      	ldr	r3, [r5, #0]
 8014574:	b103      	cbz	r3, 8014578 <_fstat_r+0x1c>
 8014576:	6023      	str	r3, [r4, #0]
 8014578:	bd38      	pop	{r3, r4, r5, pc}
 801457a:	bf00      	nop
 801457c:	20000804 	.word	0x20000804

08014580 <_isatty_r>:
 8014580:	b538      	push	{r3, r4, r5, lr}
 8014582:	4d06      	ldr	r5, [pc, #24]	; (801459c <_isatty_r+0x1c>)
 8014584:	2300      	movs	r3, #0
 8014586:	4604      	mov	r4, r0
 8014588:	4608      	mov	r0, r1
 801458a:	602b      	str	r3, [r5, #0]
 801458c:	f7f3 fd0f 	bl	8007fae <_isatty>
 8014590:	1c43      	adds	r3, r0, #1
 8014592:	d102      	bne.n	801459a <_isatty_r+0x1a>
 8014594:	682b      	ldr	r3, [r5, #0]
 8014596:	b103      	cbz	r3, 801459a <_isatty_r+0x1a>
 8014598:	6023      	str	r3, [r4, #0]
 801459a:	bd38      	pop	{r3, r4, r5, pc}
 801459c:	20000804 	.word	0x20000804

080145a0 <_malloc_usable_size_r>:
 80145a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145a4:	1f18      	subs	r0, r3, #4
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	bfbc      	itt	lt
 80145aa:	580b      	ldrlt	r3, [r1, r0]
 80145ac:	18c0      	addlt	r0, r0, r3
 80145ae:	4770      	bx	lr

080145b0 <_init>:
 80145b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145b2:	bf00      	nop
 80145b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145b6:	bc08      	pop	{r3}
 80145b8:	469e      	mov	lr, r3
 80145ba:	4770      	bx	lr

080145bc <_fini>:
 80145bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145be:	bf00      	nop
 80145c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145c2:	bc08      	pop	{r3}
 80145c4:	469e      	mov	lr, r3
 80145c6:	4770      	bx	lr
